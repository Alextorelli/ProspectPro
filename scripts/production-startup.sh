#!/bin/bash

# ============================================================================
# ProspectPro Production Startup
# Simplified startup for production deployment (no GitHub tokens needed)
# Environment generated by GitHub Actions with repository secrets
# ============================================================================

set -euo pipefail

echo "🚀 ProspectPro Production Startup"
echo "================================="
echo "🎯 Production deployment with GitHub Actions integration"
echo "🔒 Environment: Generated from repository secrets"
echo "⚡ Zero manual configuration required"
echo ""

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
ENV_FILE="${PROJECT_ROOT}/.env"
LOG_FILE="${PROJECT_ROOT}/production-startup.log"

echo "📋 Project root: $PROJECT_ROOT"
echo "📁 Environment file: $ENV_FILE"
echo "📄 Log file: $LOG_FILE"

# Initialize log file
echo "🔧 Initializing production startup log..."
echo "# ProspectPro Production Startup Log" > "$LOG_FILE"
echo "# Started: $(date -Iseconds)" >> "$LOG_FILE"
echo "# Production deployment with GitHub Actions" >> "$LOG_FILE"
echo "# =======================================" >> "$LOG_FILE"
echo ""

# Check if environment file exists (should be created by GitHub Actions)
check_environment_file() {
    echo "📋 Checking environment configuration..."
    
    if [[ ! -f "$ENV_FILE" ]]; then
        echo "❌ Environment file not found!"
        echo "# ERROR: .env file not found" >> "$LOG_FILE"
        echo ""
        echo "Expected: GitHub Actions should generate .env file during deployment"
        echo "Check:"
        echo "1. GitHub Actions workflow completed successfully"
        echo "2. Repository secrets are configured (SUPABASE_URL, SUPABASE_SECRET_KEY)"
        echo "3. Production deployment is connected to GitHub repository"
        return 1
    fi
    
    echo "✅ Environment file found: $(wc -c < "$ENV_FILE") bytes"
    echo "# Environment: Found .env file $(wc -c < "$ENV_FILE") bytes" >> "$LOG_FILE"
    return 0
}

# Validate environment content
validate_environment() {
    echo "🔍 Validating environment configuration..."
    echo "# Environment Validation: Starting checks" >> "$LOG_FILE"
    
    # Check for template values (should not exist in production)
    if grep -q "your_.*_here\|your-project-ref\.supabase\.co" "$ENV_FILE"; then
        echo "❌ Template values found in environment file!"
        echo "# ERROR: Template values found" >> "$LOG_FILE"
        echo ""
        echo "Environment contains placeholder values. Check:"
        echo "1. Repository secrets are properly set"
        echo "2. GitHub Actions workflow completed successfully"
        echo "3. Environment generation step worked correctly"
        return 1
    fi
    
    # Check for required Supabase configuration
    if ! grep -q "^SUPABASE_URL=https://" "$ENV_FILE"; then
        echo "❌ SUPABASE_URL not properly configured!"
        echo "# ERROR: SUPABASE_URL missing or invalid" >> "$LOG_FILE"
        return 1
    fi
    
    if ! grep -q "^SUPABASE_SECRET_KEY=.*" "$ENV_FILE"; then
        echo "❌ SUPABASE_SECRET_KEY not configured!"
        echo "# ERROR: SUPABASE_SECRET_KEY missing" >> "$LOG_FILE"
        return 1
    fi
    
    echo "✅ Environment validation passed"
    echo "# Environment Validation: SUCCESS" >> "$LOG_FILE"
    return 0
}

# Test database connection
test_database_connection() {
    echo "🔗 Testing database connection..."
    echo "# Database Test: Starting connection test" >> "$LOG_FILE"
    
    # Load environment
    set -a
    source "$ENV_FILE"
    set +a
    
    # Use the existing readiness checker
    if [[ -f "$PROJECT_ROOT/scripts/check-env-readiness.js" ]]; then
        if node "$PROJECT_ROOT/scripts/check-env-readiness.js" >> "$LOG_FILE" 2>&1; then
            echo "✅ Database connection successful"
            echo "# Database Test: SUCCESS" >> "$LOG_FILE"
            return 0
        else
            echo "❌ Database connection failed"
            echo "# Database Test: FAILED" >> "$LOG_FILE"
            return 1
        fi
    else
        echo "⚠️  Database readiness checker not found, skipping connection test"
        echo "# Database Test: SKIPPED (checker not found)" >> "$LOG_FILE"
        return 0
    fi
}

# Start production server
start_production_server() {
    echo "🚀 Starting ProspectPro production server..."
    echo "# Server Start: Initiating production server" >> "$LOG_FILE"
    
    # Load environment
    set -a
    source "$ENV_FILE"
    set +a
    
    echo "   Environment: $NODE_ENV"
    echo "   Port: ${PORT:-3000}"
    echo "   Database: Connected to Supabase"
    echo "   Features: All production features enabled"
    echo ""
    
    echo "# Server Configuration:" >> "$LOG_FILE"
    echo "#   NODE_ENV: $NODE_ENV" >> "$LOG_FILE"
    echo "#   PORT: ${PORT:-3000}" >> "$LOG_FILE"
    echo "#   ALLOW_DEGRADED_START: ${ALLOW_DEGRADED_START:-false}" >> "$LOG_FILE"
    echo "#   Database: Supabase connected" >> "$LOG_FILE"
    echo "# =========================" >> "$LOG_FILE"
    
    # Start the server (production deployment will handle this automatically, but we can also start it manually)
    exec node "$PROJECT_ROOT/server.js"
}

# Main execution flow
main() {
    echo "🎯 Initializing production deployment..."
    
    # Step 1: Check environment file exists
    if ! check_environment_file; then
        echo "❌ Environment setup incomplete"
        exit 1
    fi
    
    # Step 2: Validate environment content  
    if ! validate_environment; then
        echo "❌ Environment validation failed"
        exit 1
    fi
    
    # Step 3: Test database connection
    if ! test_database_connection; then
        echo "⚠️  Database connection test failed, but continuing with degraded start"
        echo "# Note: ALLOW_DEGRADED_START=true allows startup without DB" >> "$LOG_FILE"
    fi
    
    # Step 4: Start production server
    echo ""
    echo "🎉 All checks passed - starting production server!"
    echo "=================================================="
    start_production_server
}

# Handle script interruption
trap 'echo "🛑 Production startup interrupted"; exit 1' INT TERM

# Run main function
main "$@"