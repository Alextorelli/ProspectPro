Starting Deno language server...
{"type":"mark","name":"lsp.initialize","count":1,"args":{"processId":308,"rootPath":"/workspaces/ProspectPro","rootUri":"file:///workspaces/ProspectPro","initializationOptions":{"enable":true,"cacheOnSave":true,"disablePaths":[],"enablePaths":["supabase/functions"],"path":null,"env":{},"envFile":null,"cache":null,"certificateStores":null,"codeLens":{"implementations":true,"references":true,"referencesAllFunctions":true,"test":true,"testArgs":["--allow-all","--no-check"]},"config":null,"documentPreloadLimit":1000,"future":false,"importMap":null,"inlayHints":{"parameterNames":{"enabled":"none","suppressWhenArgumentMatchesName":true},"parameterTypes":{"enabled":false},"variableTypes":{"enabled":false,"suppressWhenTypeMatchesName":true},"propertyDeclarationTypes":{"enabled":false},"functionLikeReturnTypes":{"enabled":false},"enumMemberValues":{"enabled":false}},"maxTsServerMemory":3072,"suggest":{"autoImports":true,"completeFunctionCalls":false,"names":true,"paths":true,"imports":{"autoDiscover":true,"hosts":{"https://deno.land":true}}},"trace":{"server":"off"},"testing":{"args":["--allow-all","--no-check"]},"tlsCertificate":null,"unsafelyIgnoreCertificateErrors":null,"unstable":true,"lint":true,"internalDebug":false,"internalInspect":false,"logFile":true,"defaultTaskCommand":"open","javascript":{"referencesCodeLens":{"enabled":false,"showOnAllFunctions":false},"validate":{"enable":true},"suggestionActions":{"enabled":true},"updateImportsOnFileMove":{"enabled":"prompt"},"autoClosingTags":true,"preferGoToSourceDefinition":false,"updateImportsOnPaste":{"enabled":true},"suggest":{"enabled":true,"autoImports":true,"names":true,"completeFunctionCalls":false,"paths":true,"completeJSDocs":true,"jsdoc":{"generateReturns":true},"includeAutomaticOptionalChainCompletions":true,"includeCompletionsForImportStatements":true,"classMemberSnippets":{"enabled":true}},"preferences":{"quoteStyle":"auto","importModuleSpecifier":"shortest","importModuleSpecifierEnding":"auto","jsxAttributeCompletionStyle":"auto","autoImportFileExcludePatterns":[],"autoImportSpecifierExcludeRegexes":[],"useAliasesForRenames":true,"renameMatchingJsxTags":true,"organizeImports":{}},"format":{"enable":true,"insertSpaceAfterCommaDelimiter":true,"insertSpaceAfterConstructor":false,"insertSpaceAfterSemicolonInForStatements":true,"insertSpaceBeforeAndAfterBinaryOperators":true,"insertSpaceAfterKeywordsInControlFlowStatements":true,"insertSpaceAfterFunctionKeywordForAnonymousFunctions":true,"insertSpaceBeforeFunctionParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingEmptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces":false,"insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces":false,"placeOpenBraceOnNewLineForFunctions":false,"placeOpenBraceOnNewLineForControlBlocks":false,"semicolons":"ignore","indentSwitchCase":true},"inlayHints":{"parameterNames":{"enabled":"none","suppressWhenArgumentMatchesName":true},"parameterTypes":{"enabled":false},"variableTypes":{"enabled":false,"suppressWhenTypeMatchesName":true},"propertyDeclarationTypes":{"enabled":false},"functionLikeReturnTypes":{"enabled":false}}},"typescript":{"tsdk":"","disableAutomaticTypeAcquisition":false,"enablePromptUseWorkspaceTsdk":false,"referencesCodeLens":{"enabled":false,"showOnAllFunctions":false},"implementationsCodeLens":{"enabled":false,"showOnInterfaceMethods":false},"experimental":{"useTsgo":false},"reportStyleChecksAsWarnings":true,"validate":{"enable":true},"tsc":{"autoDetect":"on"},"locale":"auto","suggestionActions":{"enabled":true},"updateImportsOnFileMove":{"enabled":"prompt"},"autoClosingTags":true,"workspaceSymbols":{"scope":"allOpenProjects","excludeLibrarySymbols":true},"preferGoToSourceDefinition":false,"tsserver":{"enableRegionDiagnostics":true,"nodePath":"","web":{"projectWideIntellisense":{"enabled":true,"suppressSemanticErrors":false},"typeAcquisition":{"enabled":true}},"useSyntaxServer":"auto","maxTsServerMemory":3072,"experimental":{"enableProjectDiagnostics":false},"watchOptions":"vscode","enableTracing":false,"log":"off","pluginPaths":[]},"updateImportsOnPaste":{"enabled":true},"suggest":{"enabled":true,"autoImports":false,"completeFunctionCalls":false,"paths":true,"completeJSDocs":true,"jsdoc":{"generateReturns":true},"includeAutomaticOptionalChainCompletions":true,"includeCompletionsForImportStatements":true,"classMemberSnippets":{"enabled":true},"objectLiteralMethodSnippets":{"enabled":true}},"preferences":{"quoteStyle":"auto","importModuleSpecifier":"shortest","importModuleSpecifierEnding":"auto","jsxAttributeCompletionStyle":"auto","includePackageJsonAutoImports":"auto","autoImportFileExcludePatterns":[],"autoImportSpecifierExcludeRegexes":[],"preferTypeOnlyAutoImports":false,"useAliasesForRenames":true,"renameMatchingJsxTags":true,"organizeImports":{}},"format":{"enable":true,"insertSpaceAfterCommaDelimiter":true,"insertSpaceAfterConstructor":false,"insertSpaceAfterSemicolonInForStatements":true,"insertSpaceBeforeAndAfterBinaryOperators":true,"insertSpaceAfterKeywordsInControlFlowStatements":true,"insertSpaceAfterFunctionKeywordForAnonymousFunctions":true,"insertSpaceBeforeFunctionParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingEmptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces":false,"insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces":false,"insertSpaceAfterTypeAssertion":false,"placeOpenBraceOnNewLineForFunctions":false,"placeOpenBraceOnNewLineForControlBlocks":false,"semicolons":"ignore","indentSwitchCase":true},"inlayHints":{"parameterNames":{"enabled":"none","suppressWhenArgumentMatchesName":true},"parameterTypes":{"enabled":false},"variableTypes":{"enabled":false,"suppressWhenTypeMatchesName":true},"propertyDeclarationTypes":{"enabled":false},"functionLikeReturnTypes":{"enabled":false},"enumMemberValues":{"enabled":false}},"npm":"","check":{"npmIsInstalled":true}},"enableBuiltinCommands":true},"capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional","normalizesLineEndings":true,"changeAnnotationSupport":{"groupsOnLabel":true}},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true,"relativePatternSupport":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]},"resolveSupport":{"properties":["location.range"]}},"executeCommand":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true,"semanticTokens":{"refreshSupport":true},"codeLens":{"refreshSupport":true},"fileOperations":{"dynamicRegistration":true,"didCreate":true,"willCreate":true,"didRename":true,"willRename":true,"didDelete":true,"willDelete":true},"inlineValue":{"refreshSupport":true},"inlayHint":{"refreshSupport":true}},"textDocument":{"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]},"insertReplaceSupport":true,"resolveSupport":{"properties":["documentation","detail","additionalTextEdits"]},"insertTextModeSupport":{"valueSet":[1,2]},"labelDetailsSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true,"insertTextMode":2,"completionList":{"itemDefaults":["commitCharacters","editRange","insertTextFormat","insertTextMode","data"]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true},"activeParameterSupport":true},"contextSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true,"tagSupport":{"valueSet":[1]}},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"codeAction":{"dynamicRegistration":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.move","refactor.rewrite","source","source.organizeImports","notebook"]}},"isPreferredSupport":true,"disabledSupport":true,"dataSupport":true,"resolveSupport":{"properties":["edit","command"]},"honorsChangeAnnotations":true},"codeLens":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"colorProvider":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true,"prepareSupportDefaultBehavior":1,"honorsChangeAnnotations":true},"publishDiagnostics":{"relatedInformation":true,"tagSupport":{"valueSet":[1,2]},"versionSupport":false,"codeDescriptionSupport":true,"dataSupport":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true,"foldingRangeKind":{"valueSet":["comment","imports","region"]},"foldingRange":{"collapsedText":false}},"selectionRange":{"dynamicRegistration":true},"linkedEditingRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"requests":{"range":true,"full":{"delta":true}},"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","comment","string","number","regexp","operator","decorator","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"formats":["relative"],"overlappingTokenSupport":false,"multilineTokenSupport":false,"serverCancelSupport":true,"augmentsSyntaxTokens":true},"typeHierarchy":{"dynamicRegistration":true},"inlineValue":{"dynamicRegistration":true},"inlayHint":{"dynamicRegistration":true,"resolveSupport":{"properties":["tooltip","textEdits","label.tooltip","label.location","label.command"]}},"diagnostic":{"dynamicRegistration":true,"relatedDocumentSupport":false}},"notebookDocument":{"synchronization":{"dynamicRegistration":true}},"window":{"workDoneProgress":true,"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"showDocument":{"support":true}},"general":{"regularExpressions":{"engine":"ECMAScript","version":"ES2020"},"markdown":{"parser":"marked","version":"1.1.0"},"staleRequestSupport":{"cancel":true,"retryOnContentModified":["textDocument/semanticTokens/full","textDocument/semanticTokens/range","textDocument/semanticTokens/full/delta"]},"positionEncodings":["utf-16"]},"experimental":{"testingApi":true}},"trace":"off","workspaceFolders":[{"uri":"file:///workspaces/ProspectPro","name":"ProspectPro"}],"clientInfo":{"name":"Visual Studio Code","version":"1.105.0"},"locale":"en"}},
  version: 2.5.2 (release, x86_64-unknown-linux-gnu)
  executable: /usr/local/share/npm-global/lib/node_modules/deno/deno
Connected to "Visual Studio Code" 1.105.0
{"type":"measure","name":"lsp.initialize","count":1,"duration":21.135},
{"type":"mark","name":"lsp.update_global_cache"},
Enabling import suggestions for: https://deno.land
{"type":"measure","name":"lsp.update_global_cache","count":1,"duration":506.899},
Refreshing configuration tree...
{"type":"mark","name":"lsp.update_cache"},
{"type":"measure","name":"lsp.update_cache","count":1,"duration":0.001},
{"type":"mark","name":"lsp.did_open","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro Production MCP Server v4.1 - Post-Cleanup Enhanced\n * Optimized for cleaned database architecture, streamlined Edge Functions, and MECE taxonomy\n *\n * Updated Features (Oct 2025):\n * - 2 Essential Edge Functions: business-discovery-optimized + campaign-export\n * - Cleaned Database: campaigns, leads, dashboard_exports (core tables only)\n * - MECE Business Taxonomy: 16 categories, 300+ optimized business types\n * - Security Hardened: No SECURITY DEFINER issues, fixed trigger functions\n * - Cache-Optimized: Real-time deployment updates via Vercel\n * - Cost Intelligence: Dynamic pricing with admin panel integration\n */\n\nconst { Server } = require(\"@modelcontextprotocol/sdk/server/index.js\");\nconst {\n  StdioServerTransport,\n} = require(\"@modelcontextprotocol/sdk/server/stdio.js\");\nconst { CallToolRequestSchema } = require(\"@modelcontextprotocol/sdk/types.js\");\nconst { createClient } = require(\"@supabase/supabase-js\");\nconst https = require(\"https\");\nconst { spawn } = require(\"child_process\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nclass ProductionMCPServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-production-v4.1\",\n        version: \"4.1.0\",\n      },\n      {\n        capabilities: {\n          tools: {},\n        },\n      }\n    );\n\n    this.supabase = null;\n    this.apiClients = {};\n    this.workspaceRoot = process.env.WORKSPACE_ROOT || process.cwd();\n    this.setupTools();\n    this.setupErrorHandling();\n  }\n\n  setupTools() {\n    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      switch (request.params.name) {\n        // === PRODUCTION MONITORING TOOLS ===\n        case \"environment_health_check\":\n          return await this.environmentHealthCheck();\n        case \"github_actions_monitor\":\n          return await this.githubActionsMonitor(request.params.arguments);\n        case \"dev_prod_config_diff\":\n          return await this.devProdConfigDiff();\n        case \"cost_budget_monitor\":\n          return await this.costBudgetMonitor();\n        case \"api_health_dashboard\":\n          return await this.apiHealthDashboard();\n        case \"vault_api_key_status\":\n          return await this.vaultApiKeyStatus();\n        case \"production_startup_validator\":\n          return await this.productionStartupValidator();\n        case \"github_workflow_optimizer\":\n          return await this.githubWorkflowOptimizer();\n\n        // === SYSTEM DIAGNOSTICS TOOLS (from monitoring-server) ===\n        case \"get_system_health\":\n          return await this.getSystemHealth(request.params.arguments);\n        case \"read_diagnostics\":\n          return await this.readDiagnostics(request.params.arguments);\n        case \"analyze_logs\":\n          return await this.analyzeLogs(request.params.arguments);\n        case \"validate_configuration\":\n          return await this.validateConfiguration(request.params.arguments);\n        case \"generate_performance_report\":\n          return await this.generatePerformanceReport(request.params.arguments);\n        case \"monitor_api_quotas\":\n          return await this.monitorAPIQuotas(request.params.arguments);\n\n        // === DATABASE ANALYTICS TOOLS (from database-server) ===\n        case \"query_leads\":\n          return await this.queryLeads(request.params.arguments);\n        case \"get_campaign_stats\":\n          return await this.getCampaignStats(request.params.arguments);\n        case \"analyze_lead_quality\":\n          return await this.analyzeLeadQuality(request.params.arguments);\n        case \"get_api_costs\":\n          return await this.getApiCosts(request.params.arguments);\n\n        // === API TESTING TOOLS (from api-server) ===\n        case \"test_google_places\":\n          return await this.testGooglePlaces(request.params.arguments);\n        case \"test_foursquare_places\":\n          return await this.testFoursquarePlaces(request.params.arguments);\n        case \"test_email_discovery\":\n          return await this.testEmailDiscovery(request.params.arguments);\n        case \"verify_email\":\n          return await this.verifyEmail(request.params.arguments);\n        case \"get_api_usage_stats\":\n          return await this.getAPIUsageStats();\n        case \"simulate_lead_discovery\":\n          return await this.simulateLeadDiscovery(request.params.arguments);\n\n        // === FILESYSTEM ANALYSIS TOOLS (from filesystem-server) ===\n        case \"analyze_project_structure\":\n          return await this.analyzeProjectStructure(request.params.arguments);\n        case \"find_code_patterns\":\n          return await this.findCodePatterns(request.params.arguments);\n        case \"analyze_api_clients\":\n          return await this.analyzeAPIClients(request.params.arguments);\n        case \"check_fake_data_violations\":\n          return await this.checkFakeDataViolations(request.params.arguments);\n\n        default:\n          throw new Error(`Unknown tool: ${request.params.name}`);\n      }\n    });\n  }\n\n  async initializeSupabase() {\n    if (!this.supabase) {\n      if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SECRET_KEY) {\n        throw new Error(\"Missing Supabase configuration\");\n      }\n\n      this.supabase = createClient(\n        process.env.SUPABASE_URL,\n        process.env.SUPABASE_SECRET_KEY\n      );\n\n      // Test connection (prefer cleaned leads table, fall back to legacy view)\n      const tablesToCheck = [\"leads\", \"enhanced_leads\"];\n      let connectionVerified = false;\n\n      for (const table of tablesToCheck) {\n        const { error } = await this.supabase\n          .from(table)\n          .select(\"count\")\n          .limit(1);\n\n        if (!error) {\n          connectionVerified = true;\n          break;\n        }\n\n        const message = error.message || \"\";\n        const isMissingTable =\n          message.includes(\"does not exist\") ||\n          message.includes(\"schema cache\");\n\n        if (!isMissingTable) {\n          throw new Error(`Supabase connection failed: ${message}`);\n        }\n      }\n\n      if (!connectionVerified) {\n        console.warn(\n          \"⚠️  Supabase connection verified, but no leads tables found (leads/enhanced_leads)\"\n        );\n      }\n    }\n  }\n\n  async initializeAPIClients() {\n    if (Object.keys(this.apiClients).length === 0) {\n      try {\n        const GooglePlacesClient = require(\"../modules/api-clients/google-places-client\");\n        const FoursquareClient = require(\"../modules/api-clients/foursquare-places-client\");\n        const HunterIOClient = require(\"../modules/api-clients/hunter-io-client\");\n        const NeverBounceClient = require(\"../modules/api-clients/neverbounce-client\");\n\n        this.apiClients = {\n          googlePlaces: new GooglePlacesClient(\n            process.env.GOOGLE_PLACES_API_KEY\n          ),\n          foursquare: new FoursquareClient(process.env.FOURSQUARE_API_KEY),\n          hunterIO: new HunterIOClient(process.env.HUNTER_IO_API_KEY),\n          neverBounce: new NeverBounceClient(process.env.NEVERBOUNCE_API_KEY),\n        };\n      } catch (error) {\n        console.error(\n          \"Warning: Some API clients could not be loaded:\",\n          error.message\n        );\n      }\n    }\n  }\n\n  // === PRODUCTION MONITORING METHODS ===\n  async environmentHealthCheck() {\n    const results = {\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || \"unknown\",\n      checks: [],\n    };\n\n    try {\n      // Check 1: Environment variables\n      const requiredEnvVars = [\"SUPABASE_URL\", \"SUPABASE_SECRET_KEY\"];\n      const envCheck = {\n        name: \"Environment Variables\",\n        status: \"healthy\",\n        details: {},\n      };\n\n      requiredEnvVars.forEach((varName) => {\n        const value = process.env[varName];\n        if (!value || value.includes(\"your_\")) {\n          envCheck.status = \"unhealthy\";\n          envCheck.details[varName] = \"missing or template value\";\n        } else {\n          envCheck.details[varName] = \"configured\";\n        }\n      });\n      results.checks.push(envCheck);\n\n      // Check 2: Supabase Connection\n      if (process.env.SUPABASE_URL && process.env.SUPABASE_SECRET_KEY) {\n        const supabase = createClient(\n          process.env.SUPABASE_URL,\n          process.env.SUPABASE_SECRET_KEY\n        );\n\n        try {\n          let status = \"unhealthy\";\n          const tablesToCheck = [\"leads\", \"enhanced_leads\"];\n\n          for (const table of tablesToCheck) {\n            const { error } = await supabase\n              .from(table)\n              .select(\"count\")\n              .limit(1);\n\n            if (!error) {\n              status = \"healthy\";\n              break;\n            }\n\n            const message = error.message || \"\";\n            const isMissingTable =\n              message.includes(\"does not exist\") ||\n              message.includes(\"schema cache\");\n\n            if (!isMissingTable) {\n              throw new Error(message);\n            }\n          }\n\n          results.checks.push({\n            name: \"Supabase Database\",\n            status,\n            details: { connection: \"successful\" },\n          });\n        } catch (dbError) {\n          results.checks.push({\n            name: \"Supabase Database\",\n            status: \"unhealthy\",\n            details: { error: dbError.message },\n          });\n        }\n      }\n\n      // Check 3: GitHub Actions Integration\n      const ghToken = process.env.GHP_TOKEN || process.env.GITHUB_TOKEN;\n      results.checks.push({\n        name: \"GitHub Actions Integration\",\n        status: ghToken ? \"healthy\" : \"warning\",\n        details: { token: ghToken ? \"present\" : \"missing\" },\n      });\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🔍 **Production Environment Health Check**\\n\\n${JSON.stringify(\n              results,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Health check failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // GitHub Actions Workflow Monitor\n  async githubActionsMonitor({\n    repo = \"Alextorelli/ProspectPro\",\n    workflow = \"generate-dotenv.yml\",\n  } = {}) {\n    const token = process.env.GHP_TOKEN || process.env.GITHUB_TOKEN;\n\n    if (!token) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: \"⚠️ No GitHub token available for workflow monitoring\",\n          },\n        ],\n      };\n    }\n\n    try {\n      const [owner, repoName] = repo.split(\"/\");\n      const options = {\n        hostname: \"api.github.com\",\n        path: `/repos/${owner}/${repoName}/actions/workflows/${workflow}/runs?per_page=5`,\n        headers: {\n          Authorization: `token ${token}`,\n          \"User-Agent\": \"ProspectPro-Production-MCP\",\n        },\n      };\n\n      const response = await this.makeHttpsRequest(options);\n      const data = JSON.parse(response);\n\n      if (data.workflow_runs && data.workflow_runs.length > 0) {\n        const runs = data.workflow_runs.slice(0, 3).map((run) => ({\n          id: run.id,\n          status: run.status,\n          conclusion: run.conclusion,\n          created_at: run.created_at,\n          head_commit: run.head_commit?.message?.substring(0, 50) + \"...\",\n        }));\n\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `📊 **GitHub Actions Workflow Status**\\n\\n**Workflow**: ${workflow}\\n**Repository**: ${repo}\\n\\n**Recent Runs**:\\n${JSON.stringify(\n                runs,\n                null,\n                2\n              )}`,\n            },\n          ],\n        };\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `📊 No recent workflow runs found for ${workflow}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ GitHub Actions monitoring failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Dev/Prod Configuration Comparison\n  async devProdConfigDiff() {\n    try {\n      const prodEnvPath = path.join(process.cwd(), \".env\");\n      const devEnvPath = path.join(\n        process.cwd(),\n        \".devcontainer\",\n        \"devcontainer.json\"\n      );\n\n      const comparison = {\n        production: {\n          environment_file: fs.existsSync(prodEnvPath),\n          node_env: process.env.NODE_ENV,\n          theme: \"default (unchanged)\",\n          mcp_servers: \"production-only\",\n        },\n        development: {\n          devcontainer_config: fs.existsSync(devEnvPath),\n          theme: \"Vira Deepforest (green)\",\n          mcp_servers: \"full suite (database, API, filesystem, monitoring)\",\n        },\n      };\n\n      // Read production configuration\n      if (fs.existsSync(prodEnvPath)) {\n        const envContent = fs.readFileSync(prodEnvPath, \"utf8\");\n        comparison.production.features = {\n          supabase_configured: !envContent.includes(\"your-project-ref\"),\n          github_actions_build: envContent.includes(\"BUILD_TIMESTAMP\"),\n          vault_integration: envContent.includes(\"Vault\"),\n        };\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🔄 **Dev/Prod Configuration Comparison**\\n\\n${JSON.stringify(\n              comparison,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Configuration comparison failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Cost Budget Monitor\n  async costBudgetMonitor() {\n    try {\n      const supabase = createClient(\n        process.env.SUPABASE_URL,\n        process.env.SUPABASE_SECRET_KEY\n      );\n\n      // Get recent API costs\n      const { data: costs, error } = await supabase\n        .from(\"api_costs\")\n        .select(\"*\")\n        .gte(\n          \"created_at\",\n          new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n        )\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n\n      const totalCost =\n        costs?.reduce((sum, cost) => sum + (cost.cost || 0), 0) || 0;\n      const budgetLimit = parseFloat(process.env.DEFAULT_BUDGET_LIMIT) || 25.0;\n      const utilization = (totalCost / budgetLimit) * 100;\n\n      const analysis = {\n        period: \"Last 24 hours\",\n        total_cost: `$${totalCost.toFixed(2)}`,\n        budget_limit: `$${budgetLimit.toFixed(2)}`,\n        utilization: `${utilization.toFixed(1)}%`,\n        status:\n          utilization > 80\n            ? \"⚠️ HIGH\"\n            : utilization > 50\n            ? \"⚡ MODERATE\"\n            : \"✅ HEALTHY\",\n        recent_costs:\n          costs?.slice(0, 5).map((cost) => ({\n            service: cost.service,\n            cost: `$${cost.cost?.toFixed(3)}`,\n            timestamp: cost.created_at,\n          })) || [],\n      };\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `💰 **Cost Budget Monitor**\\n\\n${JSON.stringify(\n              analysis,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Cost monitoring failed: ${error.message}\\n\\nNote: Ensure api_costs table exists in Supabase`,\n          },\n        ],\n      };\n    }\n  }\n\n  // API Health Dashboard\n  async apiHealthDashboard() {\n    const apis = [\n      { name: \"Google Places\", key: \"GOOGLE_PLACES_API_KEY\" },\n      { name: \"Hunter.io\", key: \"HUNTER_IO_API_KEY\" },\n      { name: \"NeverBounce\", key: \"NEVERBOUNCE_API_KEY\" },\n      { name: \"Foursquare\", key: \"FOURSQUARE_API_KEY\" },\n    ];\n\n    const dashboard = {\n      timestamp: new Date().toISOString(),\n      apis: [],\n    };\n\n    for (const api of apis) {\n      const status = {\n        name: api.name,\n        key_configured: !!process.env[api.key],\n        status: \"unknown\",\n      };\n\n      // Basic configuration check\n      if (process.env[api.key]) {\n        status.status = \"configured\";\n      } else {\n        status.status = \"missing_key\";\n        status.note = \"Check Supabase Vault or environment variables\";\n      }\n\n      dashboard.apis.push(status);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: `🔌 **API Health Dashboard**\\n\\n${JSON.stringify(\n            dashboard,\n            null,\n            2\n          )}`,\n        },\n      ],\n    };\n  }\n\n  // === NEW ENHANCED TOOLS FOR VAULT AND PRODUCTION OPTIMIZATION ===\n\n  // Vault API Key Status Monitor\n  async vaultApiKeyStatus() {\n    try {\n      console.log(\"🔑 Checking Supabase Vault API key status...\");\n\n      // Test Supabase connection\n      const supabaseUrl = process.env.SUPABASE_URL;\n      const supabaseKey = process.env.SUPABASE_SECRET_KEY;\n\n      if (!supabaseUrl || !supabaseKey) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"❌ Supabase credentials not configured in environment\",\n            },\n          ],\n        };\n      }\n\n      const supabase = createClient(supabaseUrl, supabaseKey);\n\n      // Check vault diagnostic function\n      const { data, error } = await supabase.rpc(\"vault_diagnostic_check\");\n\n      if (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `❌ Vault diagnostic failed: ${error.message}`,\n            },\n          ],\n        };\n      }\n\n      let report = \"🔐 **Supabase Vault API Key Status Report**\\n\\n\";\n\n      if (data && data.length > 0) {\n        data.forEach((check) => {\n          const statusIcon =\n            check.status === \"ENABLED\" || check.status === \"COMPLETE\"\n              ? \"✅\"\n              : check.status === \"PARTIAL\"\n              ? \"⚠️\"\n              : \"❌\";\n\n          report += `${statusIcon} **${check.check_name}**: ${check.status}\\n`;\n          report += `   Details: ${check.details}\\n`;\n          report += `   Recommendation: ${check.recommendation}\\n\\n`;\n        });\n      } else {\n        report += \"⚠️ No diagnostic data returned from vault\\n\";\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Error checking vault status: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Production Startup Validator\n  async productionStartupValidator() {\n    try {\n      console.log(\"🔍 Running production startup validation...\");\n\n      const issues = [];\n      const validations = [];\n\n      // Check 1: Environment variables\n      const requiredEnvs = [\"SUPABASE_URL\", \"SUPABASE_SECRET_KEY\"];\n      requiredEnvs.forEach((env) => {\n        const value = process.env[env];\n        if (!value || value.includes(\"your_\")) {\n          issues.push(`Missing or template value for ${env}`);\n        } else {\n          validations.push(`✅ ${env} configured`);\n        }\n      });\n\n      // Check 2: Production mode settings\n      const nodeEnv = process.env.NODE_ENV;\n      if (nodeEnv === \"production\") {\n        validations.push(\"✅ NODE_ENV set to production\");\n\n        // Check degraded start setting\n        if (process.env.ALLOW_DEGRADED_START === \"true\") {\n          issues.push(\n            \"❌ ALLOW_DEGRADED_START=true is not recommended for production\"\n          );\n        } else {\n          validations.push(\n            \"✅ Strict production mode enabled (no degraded starts)\"\n          );\n        }\n      } else {\n        issues.push(`NODE_ENV is '${nodeEnv}', should be 'production'`);\n      }\n\n      // Check 3: Port configuration\n      const port = process.env.PORT;\n      if (port && port !== \"3000\") {\n        validations.push(`✅ Custom port configured: ${port}`);\n      } else {\n        validations.push(\"ℹ️ Using default/standard port configuration\");\n      }\n\n      let report = \"🏭 **Production Startup Validation Report**\\n\\n\";\n\n      report += \"**Validations Passed:**\\n\";\n      validations.forEach((validation) => {\n        report += `${validation}\\n`;\n      });\n\n      if (issues.length > 0) {\n        report += \"\\n**Issues Found:**\\n\";\n        issues.forEach((issue) => {\n          report += `❌ ${issue}\\n`;\n        });\n\n        report += \"\\n**Recommendations:**\\n\";\n        report +=\n          \"1. Ensure GitHub Actions workflows have generated proper .env\\n\";\n        report += \"2. Configure API keys in Supabase Vault\\n\";\n        report +=\n          \"3. Set ALLOW_DEGRADED_START=false for strict production mode\\n\";\n        report += \"4. Verify all secrets are present and valid\\n\";\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Production validation failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // GitHub Workflow Optimizer\n  async githubWorkflowOptimizer() {\n    try {\n      console.log(\"⚙️ Analyzing GitHub Actions workflows...\");\n\n      const workflowsDir = path.join(process.cwd(), \".github\", \"workflows\");\n\n      if (!fs.existsSync(workflowsDir)) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"❌ No .github/workflows directory found\",\n            },\n          ],\n        };\n      }\n\n      const workflows = fs\n        .readdirSync(workflowsDir)\n        .filter((file) => file.endsWith(\".yml\") || file.endsWith(\".yaml\"));\n\n      let report = \"⚙️ **GitHub Actions Workflow Analysis**\\n\\n\";\n\n      const optimizations = [];\n      const issues = [];\n\n      workflows.forEach((workflow) => {\n        const workflowPath = path.join(workflowsDir, workflow);\n        const content = fs.readFileSync(workflowPath, \"utf8\");\n\n        report += `📋 **${workflow}:**\\n`;\n\n        // Check triggers\n        if (content.includes(\"push:\") && content.includes(\"branches: [main]\")) {\n          if (\n            workflow.includes(\"repository-maintenance\") ||\n            workflow.includes(\"docker-env\")\n          ) {\n            issues.push(\n              `${workflow}: Triggers on every push (may cause cascade failures)`\n            );\n            optimizations.push(\n              `Consider schedule-only or manual triggers for ${workflow}`\n            );\n          } else {\n            report += \"  ✅ Push trigger configured for main branch\\n\";\n          }\n        }\n\n        // Check for workflow_dispatch\n        if (content.includes(\"workflow_dispatch:\")) {\n          report += \"  ✅ Manual trigger available\\n\";\n        } else {\n          optimizations.push(\n            `Add workflow_dispatch to ${workflow} for manual testing`\n          );\n        }\n\n        // Check for proper permissions\n        if (content.includes(\"permissions:\")) {\n          report += \"  ✅ Permissions configured\\n\";\n        } else {\n          if (\n            content.includes(\"GITHUB_TOKEN\") ||\n            content.includes(\"secrets.\")\n          ) {\n            issues.push(\n              `${workflow}: Uses secrets but no permissions specified`\n            );\n          }\n        }\n\n        report += \"\\n\";\n      });\n\n      if (optimizations.length > 0) {\n        report += \"**Optimization Recommendations:**\\n\";\n        optimizations.forEach((opt) => {\n          report += `💡 ${opt}\\n`;\n        });\n        report += \"\\n\";\n      }\n\n      if (issues.length > 0) {\n        report += \"**Issues Found:**\\n\";\n        issues.forEach((issue) => {\n          report += `⚠️ ${issue}\\n`;\n        });\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Workflow analysis failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // === SYSTEM DIAGNOSTICS METHODS (from monitoring-server) ===\n\n  async getSystemHealth(args = {}) {\n    const { includeDetailedMetrics = false } = args;\n\n    const health = {\n      timestamp: new Date().toISOString(),\n      status: \"unknown\",\n      components: {},\n      metrics: {},\n    };\n\n    try {\n      // Check critical files\n      const packageJson = await this.checkFile(\"package.json\");\n      const dockerCompose = await this.checkFile(\"docker-compose.yml\");\n      const server = await this.checkFile(\"server.js\");\n\n      health.components = {\n        filesystem: {\n          status: \"healthy\",\n          package_json: packageJson.exists,\n          docker_compose: dockerCompose.exists,\n          server_file: server.exists,\n        },\n      };\n\n      // Check diagnostics file\n      try {\n        const diagnosticsPath = path.join(\n          this.workspaceRoot,\n          \"diagnostics.json\"\n        );\n        const diagnosticsContent = await fs.readFileSync(\n          diagnosticsPath,\n          \"utf8\"\n        );\n        const diagnostics = JSON.parse(diagnosticsContent);\n\n        health.components.diagnostics = {\n          status: diagnostics.status || \"unknown\",\n          last_check: diagnostics.timestamp,\n          database_connection: diagnostics.database?.status === \"connected\",\n        };\n      } catch (error) {\n        health.components.diagnostics = {\n          status: \"unavailable\",\n          error: \"Diagnostics file not found or invalid\",\n        };\n      }\n\n      // Overall health determination\n      const criticalComponents = [\"filesystem\"];\n      const healthyComponents = criticalComponents.filter(\n        (comp) => health.components[comp]?.status === \"healthy\"\n      );\n\n      health.status =\n        healthyComponents.length === criticalComponents.length\n          ? \"healthy\"\n          : healthyComponents.length > 0\n          ? \"degraded\"\n          : \"unhealthy\";\n\n      if (includeDetailedMetrics) {\n        health.metrics = await this.gatherDetailedMetrics();\n      }\n    } catch (error) {\n      health.status = \"error\";\n      health.error = error.message;\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(health, null, 2),\n        },\n      ],\n    };\n  }\n\n  async readDiagnostics(args = {}) {\n    const { includeHistory = true } = args;\n\n    try {\n      const diagnosticsPath = path.join(this.workspaceRoot, \"diagnostics.json\");\n      const content = await fs.readFileSync(diagnosticsPath, \"utf8\");\n      const diagnostics = JSON.parse(content);\n\n      const analysis = {\n        current_diagnostics: diagnostics,\n        analysis: {\n          timestamp: diagnostics.timestamp,\n          status: diagnostics.status,\n          critical_issues: [],\n          warnings: [],\n          recommendations: [],\n        },\n      };\n\n      // Analyze diagnostics data\n      if (diagnostics.database) {\n        if (diagnostics.database.status !== \"connected\") {\n          analysis.analysis.critical_issues.push(\"Database connection failed\");\n        }\n        if (diagnostics.database.error) {\n          analysis.analysis.critical_issues.push(\n            `Database error: ${diagnostics.database.error}`\n          );\n        }\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(analysis, null, 2),\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(\n              {\n                error: `Failed to read diagnostics: ${error.message}`,\n                suggestion:\n                  \"Run the application to generate diagnostics.json file\",\n              },\n              null,\n              2\n            ),\n          },\n        ],\n      };\n    }\n  }\n\n  async analyzeLogs(args = {}) {\n    const { logType = \"all\", timeRange = \"24h\" } = args;\n\n    const logFiles = [\n      \"startup.log\",\n      \"production.log\",\n      \"database-validation.log\",\n    ];\n    const analysis = {\n      log_type: logType,\n      time_range: timeRange,\n      log_files_checked: [],\n      patterns_found: { errors: [], warnings: [], info: [] },\n      summary: {},\n    };\n\n    for (const logFile of logFiles) {\n      try {\n        const logPath = path.join(this.workspaceRoot, logFile);\n        const content = await fs.readFileSync(logPath, \"utf8\");\n        const stats = await fs.statSync(logPath);\n\n        analysis.log_files_checked.push({\n          file: logFile,\n          size: stats.size,\n          last_modified: stats.mtime,\n          line_count: content.split(\"\\n\").length,\n        });\n\n        const errorPatterns = content.match(/ERROR|Error:|error:/gi) || [];\n        if (errorPatterns.length > 0) {\n          analysis.patterns_found.errors.push({\n            file: logFile,\n            count: errorPatterns.length,\n          });\n        }\n      } catch (error) {\n        analysis.log_files_checked.push({\n          file: logFile,\n          error: `Could not read: ${error.message}`,\n        });\n      }\n    }\n\n    analysis.summary = {\n      total_log_files: analysis.log_files_checked.filter((f) => !f.error)\n        .length,\n      total_errors: analysis.patterns_found.errors.reduce(\n        (sum, e) => sum + e.count,\n        0\n      ),\n      health_status:\n        analysis.patterns_found.errors.length === 0\n          ? \"healthy\"\n          : \"needs_attention\",\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(analysis, null, 2),\n        },\n      ],\n    };\n  }\n\n  async validateConfiguration(args = {}) {\n    const { strict = true } = args;\n\n    const validation = {\n      validation_mode: strict ? \"strict\" : \"standard\",\n      results: {},\n      issues: [],\n      recommendations: [],\n    };\n\n    // Check critical files\n    const criticalFiles = [\"package.json\", \"server.js\", \"docker-compose.yml\"];\n    validation.results.critical_files = {};\n\n    for (const file of criticalFiles) {\n      const fileInfo = await this.checkFile(file);\n      validation.results.critical_files[file] = fileInfo;\n\n      if (!fileInfo.exists) {\n        validation.issues.push(`Missing critical file: ${file}`);\n      }\n    }\n\n    if (validation.issues.length === 0) {\n      validation.recommendations.push(\n        \"Configuration appears to be complete and healthy\"\n      );\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(validation, null, 2),\n        },\n      ],\n    };\n  }\n\n  async generatePerformanceReport(args = {}) {\n    const { includeRecommendations = true } = args;\n\n    const report = {\n      generated_at: new Date().toISOString(),\n      performance_metrics: {},\n      analysis: {},\n      recommendations: [],\n    };\n\n    // File system performance metrics\n    const metrics = await this.gatherDetailedMetrics();\n    report.performance_metrics = metrics;\n\n    const totalFiles = Object.values(metrics.file_counts || {}).reduce(\n      (sum, count) => sum + count,\n      0\n    );\n\n    report.analysis = {\n      total_files: totalFiles,\n      estimated_complexity:\n        totalFiles > 100 ? \"complex\" : totalFiles > 50 ? \"moderate\" : \"simple\",\n    };\n\n    if (includeRecommendations) {\n      report.recommendations.push(\n        \"Use MCP servers to offload AI processing tasks\"\n      );\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(report, null, 2),\n        },\n      ],\n    };\n  }\n\n  async monitorAPIQuotas(args = {}) {\n    const { alertThreshold = 80 } = args;\n\n    const quotaMonitoring = {\n      alert_threshold: alertThreshold,\n      api_services: {},\n      alerts: [],\n      recommendations: [],\n    };\n\n    // Mock API quota data (integrate with actual APIs in production)\n    const apiServices = [\n      {\n        name: \"Google Places\",\n        quota: 1000,\n        used: 250,\n        cost_per_request: 0.032,\n      },\n      { name: \"Hunter.io\", quota: 100, used: 45, cost_per_request: 0.04 },\n      { name: \"NeverBounce\", quota: 1000, used: 320, cost_per_request: 0.008 },\n    ];\n\n    apiServices.forEach((service) => {\n      const usagePercent = (service.used / service.quota) * 100;\n      quotaMonitoring.api_services[service.name] = {\n        quota_limit: service.quota,\n        requests_used: service.used,\n        usage_percentage: Math.round(usagePercent),\n        status: usagePercent >= alertThreshold ? \"alert\" : \"ok\",\n      };\n    });\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(quotaMonitoring, null, 2),\n        },\n      ],\n    };\n  }\n\n  // === DATABASE ANALYTICS METHODS (from database-server) ===\n\n  async queryLeads(args = {}) {\n    const { filters = {}, limit = 10, orderBy = \"confidence_score\" } = args;\n\n    await this.initializeSupabase();\n\n    let query = this.supabase\n      .from(\"enhanced_leads\")\n      .select(\"*\")\n      .order(orderBy, { ascending: false })\n      .limit(limit);\n\n    // Apply filters\n    Object.entries(filters).forEach(([key, value]) => {\n      query = query.eq(key, value);\n    });\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw new Error(`Query failed: ${error.message}`);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              results: data,\n              count: data.length,\n              query_info: { filters, limit, orderBy },\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async getCampaignStats(args = {}) {\n    const { campaignId, timeRange = \"24h\" } = args;\n\n    await this.initializeSupabase();\n\n    const intervalMap = {\n      \"24h\": \"1 day\",\n      \"7d\": \"7 days\",\n      \"30d\": \"30 days\",\n    };\n\n    const { data, error } = await this.supabase.rpc(\"get_campaign_statistics\", {\n      p_campaign_id: campaignId,\n      p_time_interval: intervalMap[timeRange] || \"1 day\",\n    });\n\n    if (error) {\n      throw new Error(`Campaign stats query failed: ${error.message}`);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              campaign_id: campaignId,\n              time_range: timeRange,\n              statistics: data,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async analyzeLeadQuality(args = {}) {\n    const { businessType, minConfidence = 70 } = args;\n\n    await this.initializeSupabase();\n\n    let query = this.supabase\n      .from(\"enhanced_leads\")\n      .select(\n        \"confidence_score, business_name, email_confidence, phone_confidence, website_confidence\"\n      )\n      .gte(\"confidence_score\", minConfidence);\n\n    if (businessType) {\n      query = query.ilike(\"business_type\", `%${businessType}%`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw new Error(`Quality analysis failed: ${error.message}`);\n    }\n\n    const analysis = {\n      total_leads: data.length,\n      average_confidence:\n        data.reduce((sum, lead) => sum + lead.confidence_score, 0) /\n        data.length,\n      confidence_distribution: {\n        high: data.filter((l) => l.confidence_score >= 85).length,\n        medium: data.filter(\n          (l) => l.confidence_score >= 70 && l.confidence_score < 85\n        ).length,\n        low: data.filter((l) => l.confidence_score < 70).length,\n      },\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(analysis, null, 2),\n        },\n      ],\n    };\n  }\n\n  async getApiCosts(args = {}) {\n    const { timeRange = \"24h\" } = args;\n\n    await this.initializeSupabase();\n\n    const { data, error } = await this.supabase\n      .from(\"api_costs\")\n      .select(\"*\")\n      .gte(\n        \"created_at\",\n        new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n      )\n      .order(\"created_at\", { ascending: false });\n\n    if (error) {\n      throw new Error(`API costs query failed: ${error.message}`);\n    }\n\n    const totalCost =\n      data?.reduce((sum, cost) => sum + (cost.cost || 0), 0) || 0;\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              time_range: timeRange,\n              total_cost: totalCost,\n              total_requests: data?.length || 0,\n              recent_costs: data?.slice(0, 5) || [],\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  // === API TESTING METHODS (from api-server) ===\n\n  async testGooglePlaces(args = {}) {\n    const { query, location = \"New York, NY\", limit = 5 } = args;\n\n    await this.initializeAPIClients();\n\n    if (!this.apiClients.googlePlaces) {\n      throw new Error(\"Google Places API client not available\");\n    }\n\n    const results = await this.apiClients.googlePlaces.searchBusinesses(\n      query,\n      location,\n      limit\n    );\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Google Places\",\n              query,\n              location,\n              results: results.businesses || [],\n              success: results.found,\n              error: results.error || null,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async testFoursquarePlaces(args = {}) {\n    const { query, location = \"New York, NY\", limit = 5 } = args;\n\n    await this.initializeAPIClients();\n\n    if (!this.apiClients.foursquare) {\n      throw new Error(\"Foursquare API client not available\");\n    }\n\n    const results = await this.apiClients.foursquare.searchBusinesses(\n      query,\n      location,\n      limit\n    );\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Foursquare Places\",\n              query,\n              location,\n              results: results.businesses || [],\n              success: results.found,\n              error: results.error || null,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async testEmailDiscovery(args = {}) {\n    const { domain, limit = 5 } = args;\n\n    await this.initializeAPIClients();\n\n    if (!this.apiClients.hunterIO) {\n      throw new Error(\"Hunter.io API client not available\");\n    }\n\n    const results = await this.apiClients.hunterIO.findEmails(domain, limit);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Hunter.io\",\n              domain,\n              emails: results.emails || [],\n              success: results.found,\n              error: results.error || null,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async verifyEmail(args = {}) {\n    const { email } = args;\n\n    await this.initializeAPIClients();\n\n    if (!this.apiClients.neverBounce) {\n      throw new Error(\"NeverBounce API client not available\");\n    }\n\n    const result = await this.apiClients.neverBounce.verifyEmail(email);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"NeverBounce\",\n              email,\n              verification: result,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async getAPIUsageStats() {\n    await this.initializeAPIClients();\n\n    const stats = {};\n\n    Object.entries(this.apiClients).forEach(([name, client]) => {\n      if (client && typeof client.getUsageStats === \"function\") {\n        stats[name] = client.getUsageStats();\n      }\n    });\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api_usage_statistics: stats,\n              generated_at: new Date().toISOString(),\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async simulateLeadDiscovery(args = {}) {\n    const { businessType, location, maxResults = 3 } = args;\n\n    await this.initializeAPIClients();\n\n    const results = {\n      businessType,\n      location,\n      maxResults,\n      discovery_results: {},\n      processing_summary: {\n        total_discovered: 0,\n        errors: [],\n      },\n    };\n\n    try {\n      // Business Discovery\n      if (this.apiClients.googlePlaces) {\n        const googleResults =\n          await this.apiClients.googlePlaces.searchBusinesses(\n            businessType,\n            location,\n            maxResults\n          );\n        results.discovery_results.google_places = googleResults;\n        results.processing_summary.total_discovered +=\n          googleResults.businesses?.length || 0;\n      }\n\n      if (this.apiClients.foursquare) {\n        const foursquareResults =\n          await this.apiClients.foursquare.searchBusinesses(\n            businessType,\n            location,\n            maxResults\n          );\n        results.discovery_results.foursquare = foursquareResults;\n        results.processing_summary.total_discovered +=\n          foursquareResults.businesses?.length || 0;\n      }\n    } catch (error) {\n      results.processing_summary.errors.push(error.message);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(results, null, 2),\n        },\n      ],\n    };\n  }\n\n  // === FILESYSTEM ANALYSIS METHODS (from filesystem-server) ===\n\n  async analyzeProjectStructure(args = {}) {\n    const { includeFiles = true } = args;\n\n    const structure = await this.walkDirectory(\n      this.workspaceRoot,\n      includeFiles\n    );\n    const analysis = this.analyzeStructure(structure);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              workspace_root: this.workspaceRoot,\n              structure_analysis: analysis,\n              directory_tree: structure,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async findCodePatterns(args = {}) {\n    const {\n      pattern,\n      fileExtensions = [\".js\", \".json\", \".md\", \".sql\"],\n      excludeDirectories = [\"node_modules\", \".git\", \"archive\"],\n    } = args;\n\n    const results = [];\n    const regex = new RegExp(pattern, \"gi\");\n\n    const searchInDirectory = async (dirPath) => {\n      try {\n        const items = await fs.readdirSync(dirPath);\n\n        for (const item of items) {\n          const itemPath = path.join(dirPath, item);\n          const stats = await fs.statSync(itemPath);\n\n          if (stats.isDirectory()) {\n            if (!excludeDirectories.includes(item) && !item.startsWith(\".\")) {\n              await searchInDirectory(itemPath);\n            }\n          } else if (fileExtensions.includes(path.extname(item))) {\n            try {\n              const content = await fs.readFileSync(itemPath, \"utf8\");\n              const matches = [...content.matchAll(regex)];\n\n              if (matches.length > 0) {\n                results.push({\n                  file: path.relative(this.workspaceRoot, itemPath),\n                  matches: matches.length,\n                  details: matches.slice(0, 5).map((match) => ({\n                    match: match[0],\n                  })),\n                });\n              }\n            } catch (readError) {\n              // Skip files that can't be read\n            }\n          }\n        }\n      } catch (error) {\n        // Skip directories that can't be accessed\n      }\n    };\n\n    await searchInDirectory(this.workspaceRoot);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              pattern,\n              total_matches: results.reduce((sum, r) => sum + r.matches, 0),\n              files_with_matches: results.length,\n              results,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async analyzeAPIClients(args = {}) {\n    const { detailed = false } = args;\n    const apiClientsPath = path.join(\n      this.workspaceRoot,\n      \"modules\",\n      \"api-clients\"\n    );\n\n    try {\n      const files = await fs.readdirSync(apiClientsPath);\n      const analysis = { clients: [], summary: {} };\n\n      for (const file of files) {\n        if (path.extname(file) === \".js\") {\n          const filePath = path.join(apiClientsPath, file);\n          const content = await fs.readFileSync(filePath, \"utf8\");\n\n          const clientAnalysis = {\n            name: file,\n            size: content.length,\n            method_count: (content.match(/async\\s+\\w+\\(|^\\s*\\w+\\s*\\(/gm) || [])\n              .length,\n            error_handling: (content.match(/try\\s*{|catch\\s*\\(/g) || []).length,\n            caching_implemented:\n              content.includes(\"cache\") || content.includes(\"Cache\"),\n          };\n\n          analysis.clients.push(clientAnalysis);\n        }\n      }\n\n      analysis.summary = {\n        total_clients: analysis.clients.length,\n        total_methods: analysis.clients.reduce(\n          (sum, c) => sum + c.method_count,\n          0\n        ),\n        clients_with_caching: analysis.clients.filter(\n          (c) => c.caching_implemented\n        ).length,\n      };\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(analysis, null, 2),\n          },\n        ],\n      };\n    } catch (error) {\n      throw new Error(`Failed to analyze API clients: ${error.message}`);\n    }\n  }\n\n  async checkFakeDataViolations(args = {}) {\n    const { strict = true } = args;\n\n    const suspiciousPatterns = [\n      \"Artisan\\\\s+Bistro\",\n      \"Downtown\\\\s+Café?\",\n      \"Business\\\\s+LLC\",\n      \"\\\\(555\\\\)\\\\s*\\\\d{3}-\\\\d{4}\",\n      \"example\\\\.com\",\n      \"generateFake\",\n      \"mockData\",\n    ];\n\n    const violations = [];\n\n    for (const pattern of suspiciousPatterns) {\n      const patternResults = await this.findCodePatterns({\n        pattern,\n        fileExtensions: [\".js\", \".json\"],\n        excludeDirectories: [\"node_modules\", \".git\", \"archive\", \"tests\"],\n      });\n\n      const data = JSON.parse(patternResults.content[0].text);\n      if (data.results.length > 0) {\n        violations.push({\n          pattern,\n          severity: strict ? \"HIGH\" : \"MEDIUM\",\n          matches: data.results,\n        });\n      }\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              check_mode: strict ? \"strict\" : \"standard\",\n              total_violations: violations.length,\n              violations,\n              recommendation:\n                violations.length > 0\n                  ? \"IMMEDIATE ACTION REQUIRED: Remove all fake data patterns\"\n                  : \"No fake data violations detected - good!\",\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  // === HELPER METHODS ===\n\n  async checkFile(relativePath) {\n    try {\n      const filePath = path.join(this.workspaceRoot, relativePath);\n      const stats = await fs.statSync(filePath);\n      return {\n        exists: true,\n        size: stats.size,\n        modified: stats.mtime,\n      };\n    } catch (error) {\n      return {\n        exists: false,\n        error: error.message,\n      };\n    }\n  }\n\n  async gatherDetailedMetrics() {\n    const metrics = {\n      disk_usage: {},\n      file_counts: {},\n    };\n\n    try {\n      // Count files by extension\n      const fileExtensions = await this.countFilesByExtension();\n      metrics.file_counts = fileExtensions;\n\n      // Calculate directory sizes for key directories\n      const directories = [\"modules\", \"api\", \"database\", \"mcp-servers\"];\n      for (const dir of directories) {\n        try {\n          const dirPath = path.join(this.workspaceRoot, dir);\n          const size = await this.getDirectorySize(dirPath);\n          metrics.disk_usage[dir] = size;\n        } catch (error) {\n          metrics.disk_usage[dir] = { error: error.message };\n        }\n      }\n    } catch (error) {\n      metrics.error = error.message;\n    }\n\n    return metrics;\n  }\n\n  async countFilesByExtension() {\n    const counts = {};\n\n    const countInDirectory = async (dirPath) => {\n      try {\n        const items = await fs.readdirSync(dirPath);\n\n        for (const item of items) {\n          const itemPath = path.join(dirPath, item);\n          const stats = await fs.statSync(itemPath);\n\n          if (stats.isDirectory()) {\n            if (\n              item !== \"node_modules\" &&\n              !item.startsWith(\".\") &&\n              item !== \"archive\"\n            ) {\n              await countInDirectory(itemPath);\n            }\n          } else {\n            const ext = path.extname(item) || \"no-extension\";\n            counts[ext] = (counts[ext] || 0) + 1;\n          }\n        }\n      } catch (error) {\n        // Skip inaccessible directories\n      }\n    };\n\n    await countInDirectory(this.workspaceRoot);\n    return counts;\n  }\n\n  async getDirectorySize(dirPath) {\n    let totalSize = 0;\n\n    try {\n      const items = await fs.readdirSync(dirPath);\n\n      for (const item of items) {\n        const itemPath = path.join(dirPath, item);\n        const stats = await fs.statSync(itemPath);\n\n        if (stats.isDirectory()) {\n          if (item !== \"node_modules\" && !item.startsWith(\".\")) {\n            totalSize += await this.getDirectorySize(itemPath);\n          }\n        } else {\n          totalSize += stats.size;\n        }\n      }\n    } catch (error) {\n      // Skip inaccessible directories\n    }\n\n    return totalSize;\n  }\n\n  async walkDirectory(dirPath, includeFiles, currentDepth = 0, maxDepth = 4) {\n    if (currentDepth > maxDepth) return null;\n\n    const result = {\n      name: path.basename(dirPath),\n      type: \"directory\",\n      children: [],\n    };\n\n    try {\n      const items = await fs.readdirSync(dirPath);\n\n      for (const item of items) {\n        if (item.startsWith(\".\") && !item.includes(\"vscode\")) continue;\n        if ([\"node_modules\", \"archive\"].includes(item)) continue;\n\n        const itemPath = path.join(dirPath, item);\n        const stats = await fs.statSync(itemPath);\n\n        if (stats.isDirectory()) {\n          const childResult = await this.walkDirectory(\n            itemPath,\n            includeFiles,\n            currentDepth + 1,\n            maxDepth\n          );\n          if (childResult) result.children.push(childResult);\n        } else if (includeFiles) {\n          result.children.push({\n            name: item,\n            type: \"file\",\n            size: stats.size,\n            extension: path.extname(item),\n          });\n        }\n      }\n    } catch (error) {\n      result.error = error.message;\n    }\n\n    return result;\n  }\n\n  analyzeStructure(structure) {\n    const analysis = {\n      total_directories: 0,\n      total_files: 0,\n      file_types: {},\n      key_directories: [],\n    };\n\n    const analyzeNode = (node) => {\n      if (node.type === \"directory\") {\n        analysis.total_directories++;\n\n        // Identify key directories\n        const keyDirs = [\n          \"api\",\n          \"modules\",\n          \"config\",\n          \"database\",\n          \"mcp-servers\",\n          \"scripts\",\n        ];\n        if (keyDirs.includes(node.name)) {\n          analysis.key_directories.push({\n            name: node.name,\n            children_count: node.children?.length || 0,\n          });\n        }\n\n        if (node.children) {\n          node.children.forEach(analyzeNode);\n        }\n      } else if (node.type === \"file\") {\n        analysis.total_files++;\n        const ext = node.extension || \"no-extension\";\n        analysis.file_types[ext] = (analysis.file_types[ext] || 0) + 1;\n      }\n    };\n\n    analyzeNode(structure);\n    return analysis;\n  }\n\n  // Additional helper methods...\n  async makeHttpsRequest(options) {\n    return new Promise((resolve, reject) => {\n      const req = https.request(options, (res) => {\n        let data = \"\";\n        res.on(\"data\", (chunk) => (data += chunk));\n        res.on(\"end\", () => {\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            resolve(data);\n          } else {\n            reject(new Error(`HTTP ${res.statusCode}: ${data}`));\n          }\n        });\n      });\n      req.on(\"error\", reject);\n      req.end();\n    });\n  }\n\n  setupErrorHandling() {\n    this.server.onerror = (error) => {\n      console.error(\"[Production MCP Server Error]:\", error);\n    };\n\n    process.on(\"SIGINT\", async () => {\n      await this.server.close();\n      process.exit(0);\n    });\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\n      \"🚀 ProspectPro Production MCP Server v4.1 - Post-Cleanup Enhanced\"\n    );\n    console.error(\n      \"   📊 Tier-Aware Monitoring | 🗄️  Database Analytics | 🔧 System Diagnostics\"\n    );\n    console.error(\n      \"   🔌 API Testing | 📁 Filesystem Analysis | 🛡️  Zero Fake Data Enforcement\"\n    );\n  }\n}\n\n// Start server if run directly\nif (require.main === module) {\n  const server = new ProductionMCPServer();\n  server.run().catch(console.error);\n}\n\nmodule.exports = ProductionMCPServer;\n"}}},
{"type":"measure","name":"lsp.did_open","count":1,"duration":25.244},
{"type":"mark","name":"lsp.did_open","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/PRODUCTION_MCP_INITIALIZED.md","languageId":"markdown","version":1,"text":"# ProspectPro Production MCP Server - INITIALIZED ✅\n\n## Server Status: **ACTIVE**\n\n- **Port**: Running via stdio transport\n- **Process ID**: 3a3d1917-1648-44de-bb79-095c15528637\n- **Version**: 4.1.0 Post-Cleanup Enhanced\n- **Total Tools**: 28 production-ready tools\n\n## Available Tool Categories:\n\n### 🚀 **Production Monitoring (8 tools)**\n\n- `environment_health_check` - Check Supabase environment status\n- `github_actions_monitor` - Monitor CI/CD pipeline status\n- `dev_prod_config_diff` - Compare development vs production configurations\n- `cost_budget_monitor` - Track API costs and budget usage\n- `api_health_dashboard` - Monitor all API endpoints\n- `vault_api_key_status` - Check Supabase Vault API key status\n- `production_startup_validator` - Validate production deployment readiness\n- `github_workflow_optimizer` - Optimize GitHub Actions workflows\n\n### 🔧 **System Diagnostics (6 tools)**\n\n- `get_system_health` - Overall system health check\n- `read_diagnostics` - Read system diagnostic information\n- `analyze_logs` - Analyze application logs for issues\n- `validate_configuration` - Validate all configuration files\n- `generate_performance_report` - Generate performance analysis report\n- `monitor_api_quotas` - Monitor API rate limits and quotas\n\n### 📊 **Database Analytics (4 tools)**\n\n- `query_leads` - Query and analyze lead data from database\n- `get_campaign_stats` - Get comprehensive campaign statistics\n- `analyze_lead_quality` - Analyze lead quality metrics and scoring\n- `get_api_costs` - Get detailed API cost breakdown\n\n### 🧪 **API Testing (6 tools)**\n\n- `test_google_places` - Test Google Places API integration\n- `test_foursquare_places` - Test Foursquare Places API integration\n- `test_email_discovery` - Test email discovery APIs (Hunter.io)\n- `verify_email` - Test email verification APIs (NeverBounce)\n- `get_api_usage_stats` - Get detailed API usage statistics\n- `simulate_lead_discovery` - Simulate full lead discovery workflow\n\n### 📁 **Filesystem Analysis (4 tools)**\n\n- `analyze_project_structure` - Analyze ProspectPro project structure\n- `find_code_patterns` - Find specific code patterns across codebase\n- `analyze_api_clients` - Analyze API client implementations\n- `check_fake_data_violations` - Enforce zero fake data policy with strict detection\n\n## MCP Integration Status:\n\n- ✅ **Server**: Production MCP server running\n- ✅ **Transport**: stdio transport active\n- ✅ **Tools**: All 28 tools loaded and available\n- ✅ **Supabase**: Ready for database operations\n- ✅ **API Testing**: Ready for API validation\n- ✅ **Monitoring**: Real-time monitoring capabilities active\n\n## Usage Examples:\n\n### Environment Health Check:\n\n```bash\n# Use tool: environment_health_check\n# Checks Supabase connection, Edge Functions, and database status\n```\n\n### Campaign Analytics:\n\n```bash\n# Use tool: get_campaign_stats\n# Returns comprehensive campaign statistics and performance metrics\n```\n\n### API Testing:\n\n```bash\n# Use tool: test_google_places\n# Tests Google Places API with sample queries\n```\n\n### Cost Monitoring:\n\n```bash\n# Use tool: cost_budget_monitor\n# Tracks API costs and budget utilization\n```\n\nThe production MCP server is now fully initialized and ready for comprehensive ProspectPro monitoring, analytics, and troubleshooting! 🎉\n"}}},
{"type":"measure","name":"lsp.did_open","count":2,"duration":0.061},
{"type":"mark","name":"lsp.did_open","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/PRODUCTION_MCP_SERVER_INITIALIZED.md","languageId":"markdown","version":1,"text":"# ProspectPro Production MCP Server - Initialized Successfully\n\n## Server Status: ✅ RUNNING\n\n- **Process ID**: Initialized via GitHub Codespaces session (Oct 8, 2025)\n- **Version**: v4.1 Post-Cleanup Enhanced\n- **Status**: Active and operational\n- **Architecture**: Verified Business Intelligence Platform\n\n## Server Capabilities\n\n### 📊 **Production Monitoring**\n\n- Real-time system performance tracking\n- Business intelligence data pipeline monitoring\n- Contact verification workflow analytics\n- API usage and cost optimization tracking\n\n### 🗄️ **Database Analytics**\n\n- Supabase database health monitoring\n- Lead verification status tracking\n- Apollo API integration analytics\n- Professional licensing verification metrics\n\n### 🔧 **System Diagnostics**\n\n- Edge Function performance monitoring\n- Verification service health checks\n- Zero fake data policy enforcement\n- Contact discovery pipeline diagnostics\n\n### 🔌 **API Testing**\n\n- Apollo API connectivity validation\n- Professional licensing API testing\n- Chamber of Commerce directory verification\n- Google Places API integration testing\n\n### 📁 **Filesystem Analysis**\n\n- Project structure validation\n- Configuration file monitoring\n- Database schema verification\n- Zero fake data enforcement with strict pattern detection\n\n### 🛡️ **Security Validation**\n\n- Authentication token verification\n- Data source attribution validation\n- Fake data pattern detection\n- Professional contact verification\n\n## MCP Tools Available (28 Total)\n\nThe production server provides comprehensive access to ProspectPro's verified business intelligence infrastructure through the Model Context Protocol, enabling AI assistants to:\n\n- Monitor contact verification pipelines\n- Analyze professional data source performance\n- Validate zero fake data policy compliance\n- Track Apollo API usage and effectiveness\n- Diagnose verification workflow issues\n- Optimize contact discovery costs\n\n## Integration Status\n\n✅ **Supabase Edge Functions**: Connected and monitored  \n✅ **Apollo API**: Authentication validated  \n✅ **Professional Licensing**: Directory access confirmed  \n✅ **Chamber of Commerce**: Verification pipeline active  \n✅ **Database Analytics**: Real-time monitoring enabled  \n✅ **Zero Fake Data Policy**: Enforcement active\n\n## Usage\n\nThe production MCP server is now available for AI-assisted development, monitoring, and troubleshooting of ProspectPro's verified business intelligence platform. AI assistants can access all 28 production tools for comprehensive system management and optimization.\n\n---\n\n**Initialized**: October 8, 2025  \n**Server Version**: v4.1 Post-Cleanup Enhanced  \n**Platform**: ProspectPro Verified Business Intelligence  \n**Status**: Production Ready with Zero Fake Data Policy\n"}}},
{"type":"measure","name":"lsp.did_open","count":3,"duration":0.042},
{"type":"mark","name":"lsp.did_open","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/index.html","languageId":"html","version":1,"text":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon-yellow-arrow.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ProspectPro - Real Business Lead Discovery</title>\n    <meta\n      name=\"description\"\n      content=\"Zero fake data lead generation platform with real-time business validation\"\n    />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n"}}},
{"type":"measure","name":"lsp.did_open","count":4,"duration":0.018},
{"type":"mark","name":"lsp.did_open","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/contexts/AuthContext.tsx","languageId":"typescriptreact","version":1,"text":"import { Session, User } from \"@supabase/supabase-js\";\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { supabase } from \"../lib/supabase\";\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  sessionUserId: string | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (email: string, password: string) => Promise<void>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [sessionUserId, setSessionUserId] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Initialize auth session (create anonymous session if needed)\n    const initializeAuth = async () => {\n      try {\n        // Get current session\n        const {\n          data: { session },\n          error: sessionError,\n        } = await supabase.auth.getSession();\n\n        if (sessionError) {\n          console.error(\"Session error:\", sessionError);\n        }\n\n        if (session?.user) {\n          setSession(session);\n          setUser(session.user);\n          setSessionUserId(session.user.id);\n        } else {\n          setSession(null);\n          setUser(null);\n          setSessionUserId(null);\n        }\n\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Auth initialization error:\", error);\n        setSession(null);\n        setUser(null);\n        setSessionUserId(null);\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log(\"Auth state changed:\", event, session?.user?.id);\n\n      if (session?.user) {\n        setSession(session);\n        setUser(session.user);\n        setSessionUserId(session.user.id);\n      } else {\n        setSession(null);\n        setUser(null);\n        setSessionUserId(null);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n    if (error) throw error;\n  };\n\n  const signUp = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signUp({\n      email,\n      password,\n    });\n    if (error) throw error;\n  };\n\n  const signOut = async () => {\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n    setSession(null);\n    setUser(null);\n    setSessionUserId(null);\n  };\n\n  const value = {\n    user,\n    session,\n    sessionUserId,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":5,"duration":1.061},
{"type":"mark","name":"lsp.did_open","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/components/Layout.tsx","languageId":"typescriptreact","version":1,"text":"import React, { ReactNode, useMemo } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { AuthComponent } from \"./AuthComponent\";\nimport { ThemeToggle } from \"./ThemeToggle\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport const Layout: React.FC<LayoutProps> = ({ children }) => {\n  const location = useLocation();\n  const { user } = useAuth();\n\n  const navigation = useMemo(\n    () => [\n      { name: \"New Campaign\", href: \"/\", disabled: false },\n      {\n        name: \"My Campaigns\",\n        href: \"/dashboard\",\n        disabled: !user,\n      },\n    ],\n    [user]\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 text-gray-900 transition-colors dark:bg-slate-900 dark:text-slate-100\">\n      <header className=\"border-b border-yellow-400 bg-[#f9ed69] text-gray-900 dark:border-yellow-500 dark:bg-[#f9ed69] dark:text-gray-900\">\n        <div className=\"mx-auto flex h-16 max-w-5xl items-center justify-between px-6\">\n          <Link\n            to=\"/\"\n            className=\"flex h-full items-center\"\n            aria-label=\"ProspectPro home\"\n          >\n            <img\n              src=\"/logo-full.svg\"\n              alt=\"ProspectPro\"\n              className=\"h-16 w-auto\"\n            />\n          </Link>\n          <div className=\"flex items-center space-x-3\">\n            <AuthComponent />\n            <div className=\"h-10 w-px bg-gray-300\" aria-hidden=\"true\" />\n            <ThemeToggle />\n          </div>\n        </div>\n      </header>\n      <nav className=\"border-b border-gray-200 bg-white text-sm font-medium transition-colors dark:border-slate-700 dark:bg-slate-900\">\n        <div className=\"mx-auto flex max-w-5xl items-center px-6\">\n          {navigation.map((item) => {\n            const isActive = !item.disabled && location.pathname === item.href;\n\n            if (item.disabled) {\n              return (\n                <span\n                  key={item.name}\n                  className=\"flex items-center border-b-2 border-transparent px-4 py-3 text-gray-400\"\n                  aria-disabled=\"true\"\n                >\n                  {item.name}\n                </span>\n              );\n            }\n\n            return (\n              <Link\n                key={item.name}\n                to={item.href}\n                className={`flex items-center border-b-2 px-4 py-3 transition-colors ${\n                  isActive\n                    ? \"border-blue-600 text-blue-700 dark:border-sky-400 dark:text-sky-300\"\n                    : \"border-transparent text-gray-600 hover:text-gray-900 dark:text-slate-400 dark:hover:text-slate-50\"\n                }`}\n              >\n                {item.name}\n              </Link>\n            );\n          })}\n        </div>\n      </nav>\n\n      <main className=\"mx-auto max-w-5xl px-6 pb-12 pt-8 sm:pb-16 sm:pt-10\">\n        {children}\n      </main>\n    </div>\n  );\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":1,"duration":0.746},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":2,"duration":0.186},
{"type":"measure","name":"lsp.did_open","count":6,"duration":11.499},
{"type":"mark","name":"lsp.did_open","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json","languageId":"jsonc","version":1,"text":"{\r\n  \"name\": \"ProspectPro - Verified Business Intelligence\",\r\n  \"image\": \"mcr.microsoft.com/devcontainers/javascript-node:20\",\r\n  \"features\": {\r\n    \"ghcr.io/devcontainers/features/git:1\": {}\r\n  },\r\n  \"customizations\": {\r\n    \"vscode\": {\r\n      \"extensions\": [\r\n        // Core Development\r\n        \"denoland.vscode-deno\",\r\n        \"supabase.supabase-vscode\",\r\n        \"dbaeumer.vscode-eslint\",\r\n        \"esbenp.prettier-vscode\",\r\n\r\n        // Productivity\r\n        \"eamodio.gitlens\",\r\n        \"github.copilot\",\r\n        \"github.copilot-chat\",\r\n        \"streetsidesoftware.code-spell-checker\",\r\n        \"wayou.vscode-todo-highlight\",\r\n\r\n        // API Development\r\n        \"humao.rest-client\",\r\n        \"rangav.vscode-thunder-client\",\r\n\r\n        // Database Tools\r\n        \"mtxr.sqltools\",\r\n        \"mtxr.sqltools-driver-pg\",\r\n\r\n        // Security\r\n        \"snyk-security.snyk-vulnerability-scanner\",\r\n\r\n        // Performance\r\n        \"wix.vscode-import-cost\",\r\n\r\n        // Documentation\r\n        \"bierner.markdown-preview-github-styles\",\r\n\r\n        // Development Theme & Visual Organization\r\n        \"deepforest.theme\", // Vira Deepforest theme for organized development\r\n        \"vscode-icons-team.vscode-icons\" // Better file icons for organization\r\n      ],\r\n      \"settings\": {\r\n        \"terminal.integrated.defaultProfile.linux\": \"bash\",\r\n        \"deno.enable\": true,\r\n        \"deno.enablePaths\": [\"supabase/functions\"],\r\n        \"git.autofetch\": true,\r\n        \"git.confirmSync\": false,\r\n        \"git.enableSmartCommit\": true,\r\n\r\n        // Editor Performance Settings - Enhanced for Development\r\n        \"editor.minimap.enabled\": false,\r\n        \"editor.renderWhitespace\": \"none\",\r\n        \"editor.renderControlCharacters\": false,\r\n        \"workbench.colorTheme\": \"Vira Deepforest\", // Development-specific theme\r\n        \"workbench.iconTheme\": \"vscode-icons\", // Better file icons for organization\r\n        \"workbench.list.smoothScrolling\": false,\r\n        \"workbench.tree.renderIndentGuides\": \"none\",\r\n        \"workbench.editor.closeOnFileDelete\": true,\r\n\r\n        // Development-specific UI enhancements\r\n        \"workbench.colorCustomizations\": {\r\n          \"[Vira Deepforest]\": {\r\n            \"titleBar.activeBackground\": \"#1a4d3a\",\r\n            \"titleBar.activeForeground\": \"#ffffff\",\r\n            \"statusBar.background\": \"#1a4d3a\",\r\n            \"statusBar.foreground\": \"#ffffff\",\r\n            \"activityBar.background\": \"#0d2818\",\r\n            \"panel.background\": \"#0a1f14\"\r\n          }\r\n        },\r\n        \"workbench.settings.editor\": \"json\",\r\n        \"breadcrumbs.enabled\": true,\r\n\r\n        // File System Performance\r\n        \"files.watcherExclude\": {\r\n          \"**/*.log\": true,\r\n          \"**/*.tmp\": true,\r\n          \"**/node_modules/**\": true,\r\n          \"**/archive/**\": true,\r\n          \"**/.git/**\": true,\r\n          \"**/logs/**\": true\r\n        },\r\n\r\n        // Search Performance\r\n        \"search.exclude\": {\r\n          \"**/node_modules\": true,\r\n          \"**/*.log\": true,\r\n          \"**/archive/**\": true,\r\n          \"**/.git\": true\r\n        },\r\n        \"search.searchOnType\": false,\r\n\r\n        // Copilot Optimization\r\n        \"github.copilot.chat.historyCount\": 8,\r\n        \"github.copilot.chat.welcomeMessage\": \"none\",\r\n        \"github.copilot.chat.completionPhrasesEnabled\": false,\r\n        \"github.copilot.advanced.setAutoCompletionTriggerThreshold\": 30,\r\n\r\n        // Terminal Settings - Development Enhanced\r\n        \"terminal.integrated.gpuAcceleration\": \"on\",\r\n        \"terminal.integrated.scrollback\": 1000,\r\n        \"terminal.integrated.fontFamily\": \"Consolas, 'Courier New', monospace\",\r\n        \"terminal.integrated.fontSize\": 13,\r\n\r\n        // Development Environment Indicators\r\n        \"window.title\": \"🎯 ${folderName} - Verified Business Intelligence ${separator} ${activeEditorShort}\",\r\n        \"workbench.startupEditor\": \"welcomePageInEmptyWorkbench\",\r\n\r\n        // === MCP (Model Context Protocol) Configuration ===\r\n        \"mcp.enable\": true,\r\n        \"mcp.configFile\": \"${workspaceFolder}/.vscode/mcp-config.json\",\r\n\r\n        // API Development Specific Settings\r\n        \"rest-client.enableTelemetry\": false,\r\n        \"files.associations\": {\r\n          \"*.http\": \"http\",\r\n          \"*.rest\": \"http\"\r\n        },\r\n\r\n        // AI-Enhanced Development Settings for Verified Data Integration\r\n        \"ai.contextAware\": true,\r\n        \"ai.projectContext\": {\r\n          \"type\": \"verified-business-intelligence-platform\",\r\n          \"framework\": \"supabase-edge-functions\",\r\n          \"database\": \"supabase-postgresql\",\r\n          \"apis\": [\r\n            \"google-places\",\r\n            \"apollo-contacts\",\r\n            \"chamber-commerce\",\r\n            \"professional-licensing\"\r\n          ],\r\n          \"deployment\": \"supabase-edge-functions\",\r\n          \"dataPolicy\": \"zero-fake-data-verified-contacts-only\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"forwardPorts\": [3000, 5432],\r\n  \"postCreateCommand\": \"bash -lc 'set -e; echo \\\"� Setting up ProspectPro Verified Business Intelligence Environment...\\\"; sudo apt-get update && sudo apt-get install -y docker.io; if [ -f package-lock.json ]; then npm ci; else npm install; fi; npm i supabase --save-dev; npm run mcp:install; npm run mcp:test; echo \\\"✅ Verified data environment ready with zero fake data policy!\\\"; echo \\\"🚀 ProspectPro verified business intelligence development ready\\\"'\",\r\n  \"postStartCommand\": \"bash -c 'echo \\\"� ProspectPro Verified Business Intelligence Started\\\"; echo \\\"Data Policy: Zero Fake Data | Contacts: Verified Only | Architecture: Supabase Edge Functions\\\"; echo \\\"💡 Use Copilot Chat for AI-assisted development with verified data context\\\"'\",\r\n  \"runArgs\": [\"--init\", \"-v\", \"/var/run/docker.sock:/var/run/docker.sock\"],\r\n  \"remoteUser\": \"node\"\r\n}\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":7,"duration":0.071},
{"type":"mark","name":"lsp.did_open","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/lib/supabase.ts","languageId":"typescript","version":1,"text":"import { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl =\n  import.meta.env.VITE_SUPABASE_URL ||\n  import.meta.env.NEXT_PUBLIC_SUPABASE_URL ||\n  import.meta.env.SUPABASE_URL;\n\nconst supabaseAnonKey =\n  import.meta.env.VITE_SUPABASE_ANON_KEY ||\n  import.meta.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ||\n  import.meta.env.SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error(\"Missing Supabase environment variables\");\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    persistSession: true,\n    autoRefreshToken: true,\n  },\n});\n\n// Helper function to get current session token for Edge Function calls\nexport const getSessionToken = async (): Promise<string | null> => {\n  const {\n    data: { session },\n    error,\n  } = await supabase.auth.getSession();\n\n  if (error) {\n    console.error(\"Error getting session:\", error);\n    return null;\n  }\n\n  // Return the access token (JWT) from the session\n  return session?.access_token ?? null;\n};\n\n// Helper function to ensure we have a valid session\nexport const ensureSession = async (): Promise<boolean> => {\n  const {\n    data: { session },\n    error,\n  } = await supabase.auth.getSession();\n\n  if (error) {\n    console.error(\"Failed to read session:\", error);\n    return false;\n  }\n\n  return Boolean(session?.access_token);\n};\n\n// Edge Functions URL\nexport const EDGE_FUNCTIONS_URL =\n  import.meta.env.VITE_EDGE_FUNCTIONS_URL || `${supabaseUrl}/functions/v1`;\n\n// Edge Function endpoints for vault-secured progressive enrichment\nexport const EDGE_FUNCTIONS = {\n  // Progressive Enrichment Orchestrator (vault-secured)\n  ENRICHMENT_ORCHESTRATOR: `${EDGE_FUNCTIONS_URL}/enrichment-orchestrator`,\n\n  // Individual enrichment services (vault-secured)\n  ENRICHMENT_BUSINESS_LICENSE: `${EDGE_FUNCTIONS_URL}/enrichment-business-license`,\n  ENRICHMENT_PDL: `${EDGE_FUNCTIONS_URL}/enrichment-pdl`,\n  ENRICHMENT_HUNTER: `${EDGE_FUNCTIONS_URL}/enrichment-hunter`,\n  ENRICHMENT_NEVERBOUNCE: `${EDGE_FUNCTIONS_URL}/enrichment-neverbounce`,\n\n  // Legacy endpoints (for backward compatibility)\n  ENHANCED_BUSINESS_DISCOVERY: `${EDGE_FUNCTIONS_URL}/enhanced-business-discovery`,\n  LEAD_VALIDATION: `${EDGE_FUNCTIONS_URL}/lead-validation-edge`,\n  BUSINESS_DISCOVERY: `${EDGE_FUNCTIONS_URL}/business-discovery-edge`,\n  DIAGNOSTICS: `${EDGE_FUNCTIONS_URL}/diag`,\n} as const;\n\n// Progressive Enrichment Tiers - Consolidated to 3 Tiers\nexport const ENRICHMENT_TIERS = {\n  BASE: {\n    name: \"Base\",\n    price: 0.15, // Essential Business Data\n    stages: [\"business-verification\", \"company-data\"],\n    description:\n      \"Essential Business Data - Perfect for targeted outreach campaigns\",\n    features: [\n      \"Business verification\",\n      \"Company data (name, industry, size)\",\n      \"Phone & address validation\",\n      \"Generic company email\",\n    ],\n    badge: \"Most Popular\",\n    hasOwnershipData: false,\n  },\n  PROFESSIONAL: {\n    name: \"Professional\",\n    price: 0.45, // Enhanced Sales Intelligence\n    stages: [\n      \"business-verification\",\n      \"company-data\",\n      \"email-discovery\",\n      \"email-verification\",\n    ],\n    description:\n      \"Enhanced Sales Intelligence - Verified contacts for higher conversion rates\",\n    features: [\n      \"Everything in Base\",\n      \"Professional email discovery & verification\",\n      \"Email deliverability verification\",\n      \"Enhanced company enrichment\",\n    ],\n    badge: \"\",\n    hasOwnershipData: false,\n  },\n  ENTERPRISE: {\n    name: \"Enterprise\",\n    price: 2.5, // Premium Executive Access\n    stages: [\n      \"business-verification\",\n      \"company-data\",\n      \"email-discovery\",\n      \"email-verification\",\n      \"executive-enrichment\",\n      \"compliance-verification\",\n    ],\n    description:\n      \"Premium Executive Access - Compliance-grade data with C-suite contacts\",\n    features: [\n      \"Everything in Professional\",\n      \"Executive contact enrichment\",\n      \"Full compliance verification\",\n      \"Advanced data validation\",\n    ],\n    badge: \"Premium\",\n    hasOwnershipData: true,\n  },\n} as const;\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":3,"duration":0.231},
{"type":"measure","name":"lsp.did_open","count":8,"duration":5.965},
{"type":"mark","name":"lsp.did_open","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","languageId":"typescript","version":1,"text":"import { useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport {\n  ENRICHMENT_TIERS,\n  ensureSession,\n  getSessionToken,\n  supabase,\n} from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport type { BusinessDiscoveryResponse, CampaignConfig } from \"../types\";\n\ninterface SupabaseFunctionError {\n  message?: string;\n  name?: string;\n  context?: {\n    status?: number;\n    response?: unknown;\n  };\n}\n\nconst extractFunctionErrorMessage = (error: unknown): string => {\n  if (!error || typeof error !== \"object\") {\n    return \"Discovery failed due to an unknown error.\";\n  }\n\n  const functionsError = error as SupabaseFunctionError;\n  const defaultMessage =\n    functionsError.message || \"Edge function returned an error response.\";\n\n  const contextResponse = functionsError.context?.response;\n  if (!contextResponse) {\n    return defaultMessage;\n  }\n\n  try {\n    if (typeof contextResponse === \"string\") {\n      const parsed = JSON.parse(contextResponse);\n      if (parsed?.error) return String(parsed.error);\n      if (parsed?.message) return String(parsed.message);\n      return contextResponse;\n    }\n\n    if (\n      typeof contextResponse === \"object\" &&\n      contextResponse !== null &&\n      \"error\" in contextResponse\n    ) {\n      const { error: ctxError } = contextResponse as { error?: unknown };\n      if (ctxError) return String(ctxError);\n    }\n  } catch (parseError) {\n    console.warn(\"Unable to parse edge function error response:\", parseError);\n    return defaultMessage;\n  }\n\n  return defaultMessage;\n};\n\nexport const useBusinessDiscovery = (\n  onJobCreated?: (jobData: {\n    jobId: string;\n    campaignId: string;\n    status: string;\n    estimatedTime?: number;\n  }) => void\n) => {\n  const { user } = useAuth();\n  const { setLoading, setError, clearLeads, setCurrentCampaign } =\n    useCampaignStore();\n  const [progress, setProgress] = useState(0);\n  const [currentStage, setCurrentStage] = useState<string>(\"\");\n  const [cacheStats] = useState<any>(null);\n\n  const discoveryMutation = useMutation({\n    mutationFn: async (\n      config: CampaignConfig & { selectedTier?: keyof typeof ENRICHMENT_TIERS }\n    ): Promise<BusinessDiscoveryResponse> => {\n      setLoading(true);\n      setError(null);\n      setProgress(10);\n      setCurrentStage(\"Initializing user-aware discovery...\");\n\n      // Reset any existing campaign context before starting a new discovery\n      clearLeads();\n      setCurrentCampaign(null);\n\n      try {\n        console.log(\"🚀 Starting user-aware business discovery:\", config);\n\n        // Ensure we have a valid session before calling Edge Function\n        const hasSession = await ensureSession();\n        if (!hasSession || !user?.id) {\n          throw new Error(\"Please sign in to run a discovery campaign.\");\n        }\n\n        // Determine enrichment tier\n        const tier = config.selectedTier || \"PROFESSIONAL\";\n        const tierConfig = ENRICHMENT_TIERS[tier];\n        const keywordList = config.keywords\n          ? config.keywords\n              .split(\",\")\n              .map((value) => value.trim())\n              .filter(Boolean)\n          : undefined;\n\n        const discoveryOptions = {\n          tradeAssociation: config.trade_association ?? false,\n          professionalLicense: config.professional_license ?? false,\n          chamberVerification: config.chamber_verification ?? false,\n          apolloDiscovery: tier === \"ENTERPRISE\",\n        };\n\n        setCurrentStage(\n          `Using ${tierConfig.name} tier ($${tierConfig.price}/lead)`\n        );\n        setProgress(20);\n\n        const accessToken = await getSessionToken();\n\n        const billingContext = {\n          tier,\n          tierName: tierConfig.name,\n          unitPrice: tierConfig.price,\n          estimatedBudget: config.max_results * tierConfig.price,\n          currency: \"USD\",\n        };\n\n        // Call background task business discovery with authentication\n        const { data, error } = await supabase.functions.invoke(\n          \"business-discovery-background\",\n          {\n            body: {\n              businessType: config.business_type || config.search_terms,\n              location: config.location,\n              keywords: keywordList,\n              searchRadius: config.search_radius,\n              expandGeography: config.expand_geography,\n              maxResults: config.max_results,\n              budgetLimit: config.max_results * tierConfig.price,\n              minConfidenceScore: config.min_confidence_score || 50,\n              tierKey: tier,\n              tierName: tierConfig.name,\n              tierPrice: tierConfig.price,\n              options: discoveryOptions,\n              sessionUserId: user.id,\n              userId: user.id,\n              billingContext,\n            },\n            headers: accessToken\n              ? { Authorization: `Bearer ${accessToken}` }\n              : undefined,\n          }\n        );\n\n        if (error) {\n          console.error(\"❌ Background discovery error:\", error);\n          throw new Error(extractFunctionErrorMessage(error));\n        }\n\n        if (!data || !data.success) {\n          const fallbackMessage =\n            typeof data?.error === \"string\"\n              ? data.error\n              : \"No data returned from background discovery\";\n          throw new Error(fallbackMessage);\n        }\n\n        console.log(\"✅ Background discovery response:\", data);\n\n        // For background tasks, we get jobId and campaignId immediately\n        // The actual processing happens in the background\n        const transformedData: BusinessDiscoveryResponse = {\n          campaign_id: data.campaignId,\n          job_id: data.jobId, // New: job ID for tracking progress\n          status: data.status, // New: processing status\n          estimated_time: data.estimatedTime, // New: estimated completion time\n          realtime_channel: data.realtimeChannel, // New: for real-time updates\n          total_found: 0, // Will be updated via real-time\n          qualified_count: 0, // Will be updated via real-time\n          total_cost: 0, // Will be updated via real-time\n          processing_time: \"< 100ms\", // Immediate response\n          tier_used: tierConfig.name,\n          cache_performance: undefined,\n          vault_status: \"secured\",\n          census_intelligence: undefined,\n          businesses: [], // Will be populated via real-time updates\n        };\n\n        setProgress(100);\n        setCurrentStage(\"Complete! 🎉\");\n        return transformedData;\n      } catch (error) {\n        console.error(\"❌ User-aware discovery error:\", error);\n        setCurrentStage(\"Failed ❌\");\n        throw error;\n      } finally {\n        setLoading(false);\n      }\n    },\n    onSuccess: (data: BusinessDiscoveryResponse) => {\n      console.log(\"✅ Background job created:\", data);\n\n      // For background jobs, we don't create the full campaign record immediately\n      // The progress page will handle real-time updates and final campaign creation\n\n      setProgress(100);\n      setCurrentStage(\"Background processing started! 🚀\");\n\n      // Navigate to progress page with job ID\n      if (data.job_id && data.campaign_id) {\n        const jobData = {\n          jobId: data.job_id,\n          campaignId: data.campaign_id,\n          status: data.status || \"pending\",\n          estimatedTime: data.estimated_time,\n        };\n\n        console.log(\"Job started:\", jobData);\n\n        // Call the navigation callback if provided\n        if (onJobCreated) {\n          onJobCreated(jobData);\n        }\n      }\n    },\n    onError: (error: any) => {\n      setError(\n        error instanceof Error ? error.message : \"User-aware discovery failed\"\n      );\n      setProgress(0);\n      setCurrentStage(\"Failed ❌\");\n    },\n  });\n\n  return {\n    startDiscovery: discoveryMutation.mutate,\n    isDiscovering: discoveryMutation.isPending,\n    progress,\n    currentStage,\n    cacheStats,\n    error: discoveryMutation.error,\n    data: discoveryMutation.data,\n  };\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_open","count":9,"duration":1.623},
{"type":"mark","name":"lsp.did_open","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useLeadEnrichment.ts","languageId":"typescript","version":1,"text":"import { useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { ensureSession, supabase } from \"../lib/supabase\";\n\nexport interface EnrichmentConfig {\n  businessName: string;\n  domain?: string;\n  address?: string;\n  phone?: string;\n  website?: string;\n  industry?: string;\n  state?: string;\n\n  // Progressive enrichment options\n  includeBusinessLicense?: boolean;\n  includeCompanyEnrichment?: boolean;\n  discoverEmails?: boolean;\n  verifyEmails?: boolean;\n  includePersonEnrichment?: boolean;\n  apolloEnrichment?: boolean;\n\n  // Control parameters\n  maxCostPerBusiness?: number;\n  minConfidenceScore?: number;\n  tier?: \"starter\" | \"professional\" | \"enterprise\" | \"compliance\";\n}\n\nexport interface EnrichmentResult {\n  success: boolean;\n  businessName: string;\n  enrichedData: {\n    emails?: Array<{\n      email: string;\n      confidence: number;\n      verified: boolean;\n      type?: string;\n      firstName?: string;\n      lastName?: string;\n      position?: string;\n    }>;\n    businessLicense?: {\n      isValid: boolean;\n      licenseNumber?: string;\n      status?: string;\n      expirationDate?: string;\n      professionalType?: string;\n      source: string;\n    };\n    companyInfo?: {\n      name?: string;\n      industry?: string;\n      size?: string;\n      founded?: number;\n      revenue?: string;\n      website?: string;\n      description?: string;\n      source: string;\n    };\n  };\n  confidenceScore: number;\n  totalCost: number;\n  costBreakdown: {\n    businessLicenseCost: number;\n    companyEnrichmentCost: number;\n    hunterCost: number;\n    neverBounceCost: number;\n    personEnrichmentCost: number;\n    apolloCost: number;\n    complianceCost: number;\n  };\n  processingMetadata: {\n    servicesUsed: string[];\n    servicesSkipped: string[];\n    processingTime: number;\n    errors: Array<{\n      service: string;\n      error: string;\n    }>;\n  };\n}\n\nexport const useLeadEnrichment = () => {\n  const { user } = useAuth();\n  const [progress, setProgress] = useState(0);\n  const [currentStage, setCurrentStage] = useState<string>(\"\");\n  const [enrichedCount, setEnrichedCount] = useState(0);\n  const [totalCost, setTotalCost] = useState(0);\n\n  const enrichmentMutation = useMutation({\n    mutationFn: async (config: EnrichmentConfig): Promise<EnrichmentResult> => {\n      setProgress(10);\n      setCurrentStage(`Enriching ${config.businessName}...`);\n\n      try {\n        console.log(\"🔄 Starting enrichment for:\", config.businessName);\n\n        // Ensure we have a valid session before calling Edge Function\n        const hasSession = await ensureSession();\n        if (!hasSession || !user?.id) {\n          throw new Error(\"Please sign in to run lead enrichment.\");\n        }\n\n        const billingContext = {\n          tier: config.tier ?? \"professional\",\n          maxCostPerBusiness: config.maxCostPerBusiness ?? 0.5,\n          currency: \"USD\",\n        };\n\n        // Call enrichment orchestrator\n        const { data, error } = await supabase.functions.invoke(\n          \"enrichment-orchestrator\",\n          {\n            body: {\n              businessName: config.businessName,\n              domain: config.domain\n                ?.replace(/^https?:\\/\\//, \"\")\n                .replace(/\\/$/, \"\"),\n              address: config.address,\n              phone: config.phone,\n              website: config.website,\n              industry: config.industry,\n              state: config.state,\n\n              // Progressive enrichment configuration (professional tier)\n              includeBusinessLicense: config.includeBusinessLicense ?? true,\n              discoverEmails: config.discoverEmails ?? true,\n              verifyEmails: config.verifyEmails ?? true,\n              includeCompanyEnrichment:\n                config.includeCompanyEnrichment ?? false,\n              includePersonEnrichment: config.includePersonEnrichment ?? false,\n              apolloEnrichment: config.apolloEnrichment ?? false,\n\n              // Budget controls\n              maxCostPerBusiness: config.maxCostPerBusiness ?? 0.5,\n              minConfidenceScore: config.minConfidenceScore ?? 50,\n              tier: config.tier ?? \"professional\",\n              sessionUserId: user.id,\n              userId: user.id,\n              billingContext,\n            },\n          }\n        );\n\n        if (error) {\n          console.error(\"❌ Enrichment error:\", error);\n          throw new Error(`Enrichment failed: ${error.message}`);\n        }\n\n        if (!data || !data.success) {\n          throw new Error(\n            data?.processingMetadata?.errors?.[0]?.error ||\n              \"Enrichment service returned no data\"\n          );\n        }\n\n        console.log(\"✅ Enrichment complete:\", data);\n        setProgress(100);\n        setCurrentStage(\n          `Found ${data.enrichedData?.emails?.length || 0} emails`\n        );\n\n        return data as EnrichmentResult;\n      } catch (error) {\n        console.error(\"❌ Enrichment error:\", error);\n        setCurrentStage(\"Enrichment failed\");\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      setEnrichedCount((prev) => prev + 1);\n      setTotalCost((prev) => prev + data.totalCost);\n    },\n  });\n\n  // Batch enrichment for multiple leads\n  const enrichMultipleLeads = async (\n    leads: Array<{\n      businessName: string;\n      website?: string;\n      address?: string;\n      phone?: string;\n    }>,\n    config?: Partial<EnrichmentConfig>\n  ) => {\n    const results: EnrichmentResult[] = [];\n    const errors: Array<{ businessName: string; error: string }> = [];\n\n    setProgress(0);\n    setEnrichedCount(0);\n    setTotalCost(0);\n\n    for (let i = 0; i < leads.length; i++) {\n      const lead = leads[i];\n      setCurrentStage(\n        `Enriching ${i + 1}/${leads.length}: ${lead.businessName}...`\n      );\n      setProgress(Math.round((i / leads.length) * 100));\n\n      try {\n        const result = await enrichmentMutation.mutateAsync({\n          businessName: lead.businessName,\n          website: lead.website,\n          domain: lead.website?.replace(/^https?:\\/\\//, \"\").replace(/\\/$/, \"\"),\n          address: lead.address,\n          phone: lead.phone,\n          ...config,\n        });\n        results.push(result);\n      } catch (error) {\n        console.error(`❌ Failed to enrich ${lead.businessName}:`, error);\n        errors.push({\n          businessName: lead.businessName,\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n      }\n    }\n\n    setProgress(100);\n    setCurrentStage(`Enriched ${results.length}/${leads.length} leads`);\n\n    return { results, errors };\n  };\n\n  const reset = () => {\n    setProgress(0);\n    setCurrentStage(\"\");\n    setEnrichedCount(0);\n    setTotalCost(0);\n  };\n\n  return {\n    enrichLead: enrichmentMutation.mutate,\n    enrichLeadAsync: enrichmentMutation.mutateAsync,\n    enrichMultipleLeads,\n    isEnriching: enrichmentMutation.isPending,\n    progress,\n    currentStage,\n    enrichedCount,\n    totalCost,\n    error: enrichmentMutation.error,\n    data: enrichmentMutation.data,\n    reset,\n  };\n};\n"}}},
{"type":"measure","name":"lsp.testing_update","count":4,"duration":0.306},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":5,"duration":0.311},
{"type":"measure","name":"lsp.did_open","count":10,"duration":5.658},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.did_open","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Dashboard.tsx","languageId":"typescriptreact","version":1,"text":"import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { supabase } from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\n\ninterface Campaign {\n  id: string;\n  campaign_id?: string;\n  business_type: string;\n  location: string;\n  status: string;\n  results_count: number;\n  leads_found?: number;\n  leads_qualified?: number;\n  total_cost: number;\n  created_at: string;\n}\n\nexport const Dashboard: React.FC = () => {\n  const { user, loading: authLoading } = useAuth();\n  const { campaigns: localCampaigns, leads: localLeads } = useCampaignStore();\n  const navigate = useNavigate();\n\n  const [campaigns, setCampaigns] = useState<Campaign[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch user-aware campaigns from database\n  useEffect(() => {\n    const fetchCampaigns = async () => {\n      if (authLoading) {\n        return;\n      }\n\n      if (!user?.id) {\n        setCampaigns([]);\n        setLoading(false);\n        setError(null);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        console.log(\"📊 Fetching campaigns for user:\", user.id);\n\n        // Query campaigns scoped to the authenticated user\n        const query = supabase\n          .from(\"campaigns\")\n          .select(\"*\")\n          .eq(\"user_id\", user.id);\n\n        const { data, error } = await query.order(\"created_at\", {\n          ascending: false,\n        });\n\n        if (error) {\n          console.error(\"❌ Error fetching campaigns:\", error);\n          setError(error.message);\n          return;\n        }\n\n        console.log(\"✅ Campaigns loaded:\", data?.length || 0);\n        setCampaigns(data || []);\n      } catch (err) {\n        console.error(\"❌ Unexpected error:\", err);\n        setError(\n          err instanceof Error ? err.message : \"Failed to load campaigns\"\n        );\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCampaigns();\n  }, [authLoading, user?.id]);\n\n  // Calculate stats from database campaigns\n  const totalCost = campaigns.reduce(\n    (sum, campaign) => sum + (campaign.total_cost || 0),\n    0\n  );\n  const totalLeads = campaigns.reduce(\n    (sum, campaign) => sum + (campaign.results_count || 0),\n    0\n  );\n  const qualifiedLeads = localLeads.filter(\n    (lead) => lead.confidence_score >= 80\n  ).length;\n\n  // Fallback to local store data if no database campaigns\n  const stats = [\n    {\n      name: \"Total Campaigns\",\n      value: campaigns.length || localCampaigns.length,\n      icon: \"🚀\",\n    },\n    { name: \"Total Leads\", value: totalLeads || localLeads.length, icon: \"👥\" },\n    { name: \"Qualified Leads\", value: qualifiedLeads, icon: \"✅\" },\n    { name: \"Total Cost\", value: `$${totalCost.toFixed(2)}`, icon: \"💰\" },\n  ];\n\n  const recentCampaigns =\n    campaigns.length > 0 ? campaigns.slice(0, 5) : localCampaigns.slice(0, 5);\n\n  if (loading || authLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600 dark:text-gray-400\">\n            Loading campaigns...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-8 text-center\">\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n          Sign in to view your campaigns\n        </h2>\n        <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n          Create an account or sign in to access saved campaigns and lead\n          history.\n        </p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n        <div className=\"flex\">\n          <div className=\"text-red-500 dark:text-red-400 text-xl mr-3\">⚠️</div>\n          <div>\n            <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n              Error loading campaigns\n            </h3>\n            <p className=\"text-sm text-red-700 dark:text-red-300 mt-1\">\n              {error}\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n          Dashboard\n        </h1>\n        <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n          Overview of your lead generation campaigns and results\n        </p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\n        {stats.map((stat) => (\n          <div\n            key={stat.name}\n            className=\"bg-white dark:bg-gray-700 overflow-hidden shadow rounded-lg border border-gray-200 dark:border-gray-600\"\n          >\n            <div className=\"p-5\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <span className=\"text-2xl\">{stat.icon}</span>\n                </div>\n                <div className=\"ml-5 w-0 flex-1\">\n                  <dl>\n                    <dt className=\"text-sm font-medium text-gray-500 dark:text-gray-400 truncate\">\n                      {stat.name}\n                    </dt>\n                    <dd className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">\n                      {stat.value}\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Recent Campaigns */}\n      <div className=\"bg-white dark:bg-gray-700 shadow rounded-lg border border-gray-200 dark:border-gray-600\">\n        <div className=\"px-4 py-5 sm:p-6\">\n          <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-gray-100 mb-4\">\n            Recent Campaigns\n          </h3>\n          {recentCampaigns.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <span className=\"text-4xl\">🔍</span>\n              <h3 className=\"mt-2 text-sm font-medium text-gray-900 dark:text-gray-100\">\n                No campaigns yet\n              </h3>\n              <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                Get started by creating your first lead discovery campaign.\n              </p>\n              <div className=\"mt-6\">\n                <a\n                  href=\"/discovery\"\n                  className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 focus:ring-blue-500 dark:focus:ring-blue-400 transition-colors\"\n                >\n                  Start Discovery\n                </a>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {recentCampaigns.map((campaign: any) => {\n                const campaignId = campaign.id || campaign.campaign_id || \"\";\n                const leadsCount =\n                  campaign.results_count || campaign.leads_found || 0;\n                const qualifiedCount = campaign.leads_qualified || 0;\n\n                return (\n                  <div\n                    key={campaignId}\n                    className=\"flex items-center justify-between p-4 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 cursor-pointer transition-colors\"\n                    onClick={() => navigate(`/campaign?id=${campaignId}`)}\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center\">\n                        <span\n                          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                            campaign.status === \"completed\"\n                              ? \"bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200\"\n                              : campaign.status === \"running\"\n                              ? \"bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200\"\n                              : campaign.status === \"failed\"\n                              ? \"bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200\"\n                              : \"bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200\"\n                          }`}\n                        >\n                          {campaign.status}\n                        </span>\n                        <span className=\"ml-3 text-sm font-weight-medium text-gray-900 dark:text-gray-100\">\n                          {campaign.business_type} in {campaign.location}\n                        </span>\n                      </div>\n                      <div className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                        {leadsCount} results • {qualifiedCount} qualified • $\n                        {campaign.total_cost.toFixed(2)} cost\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        {new Date(campaign.created_at).toLocaleDateString()}\n                      </div>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          navigate(`/campaign?id=${campaignId}`);\n                        }}\n                        className=\"text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium transition-colors\"\n                      >\n                        View Details →\n                      </button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"measure","name":"lsp.testing_update","count":6,"duration":0.284},
{"type":"measure","name":"lsp.did_open","count":11,"duration":7.06},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.did_open","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","languageId":"typescriptreact","version":1,"text":"import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useNavigate, useParams, useSearchParams } from \"react-router-dom\";\nimport { ProgressDisplay } from \"../components/ProgressDisplay\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useJobProgress } from \"../hooks/useJobProgress\";\nimport { supabase } from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport { transformCampaignData } from \"../utils/campaignTransforms\";\n\nexport const CampaignProgress: React.FC = () => {\n  const { campaignId } = useParams<{ campaignId: string }>();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const jobId = searchParams.get(\"jobId\");\n\n  // Use the job progress hook for real-time updates\n  const { progress: jobProgress } = useJobProgress(jobId || \"\");\n\n  const campaigns = useCampaignStore((state) => state.campaigns);\n  const addCampaign = useCampaignStore((state) => state.addCampaign);\n  const updateCampaign = useCampaignStore((state) => state.updateCampaign);\n  const setCurrentCampaign = useCampaignStore(\n    (state) => state.setCurrentCampaign\n  );\n  const clearLeads = useCampaignStore((state) => state.clearLeads);\n  const addLeads = useCampaignStore((state) => state.addLeads);\n  const setLoading = useCampaignStore((state) => state.setLoading);\n  const setError = useCampaignStore((state) => state.setError);\n  const { user, loading: authLoading } = useAuth();\n  const authUserId = user?.id ?? null;\n\n  const [isFetchingResults, setIsFetchingResults] = useState(false);\n  const [resultFetchError, setResultFetchError] = useState<string | null>(null);\n  const hasFetchedResultsRef = useRef(false);\n  const isMountedRef = useRef(true);\n\n  useEffect(() => {\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  // Extract data from job progress\n  const progress = jobProgress?.progress || 0;\n  const status = jobProgress?.status || \"pending\";\n  const currentStage = jobProgress?.currentStage || \"Initializing...\";\n  const metrics = jobProgress?.metrics;\n  const isComplete = status === \"completed\";\n  const error = jobProgress?.error;\n\n  const displayStage = isFetchingResults\n    ? \"Preparing final results...\"\n    : currentStage;\n  const displayProgress = isFetchingResults\n    ? Math.min(100, Math.max(progress, 96))\n    : progress;\n  const isProcessing = !isComplete || isFetchingResults;\n\n  const fetchResults = useCallback(async () => {\n    if (!campaignId) {\n      return;\n    }\n\n    if (!authUserId) {\n      setResultFetchError(\"Sign in again to view campaign results.\");\n      return;\n    }\n\n    hasFetchedResultsRef.current = true;\n    setIsFetchingResults(true);\n    setResultFetchError(null);\n    setLoading(true);\n\n    const wait = (ms: number) =>\n      new Promise<void>((resolve) => {\n        setTimeout(resolve, ms);\n      });\n\n    try {\n      const MAX_ATTEMPTS = 5;\n      let campaignRecord: any = null;\n      let leadsRecords: any[] = [];\n\n      for (let attempt = 0; attempt < MAX_ATTEMPTS; attempt += 1) {\n        const campaignQuery = supabase\n          .from(\"campaigns\")\n          .select(\n            \"id,business_type,location,status,total_cost,results_count,created_at,updated_at\"\n          )\n          .eq(\"id\", campaignId)\n          .eq(\"user_id\", authUserId);\n\n        const { data: campaignData, error: campaignError } =\n          await campaignQuery.maybeSingle();\n\n        if (campaignError) {\n          throw campaignError;\n        }\n\n        const leadsQuery = supabase\n          .from(\"leads\")\n          .select(\n            \"id,campaign_id,business_name,address,phone,website,email,confidence_score,validation_cost,enrichment_data,created_at\"\n          )\n          .eq(\"campaign_id\", campaignId)\n          .eq(\"user_id\", authUserId)\n          .order(\"confidence_score\", { ascending: false });\n\n        const { data: leadsData, error: leadsError } = await leadsQuery;\n\n        if (leadsError) {\n          throw leadsError;\n        }\n\n        campaignRecord = campaignData;\n        leadsRecords = leadsData ?? [];\n\n        if (\n          campaignRecord &&\n          (leadsRecords.length > 0 || attempt === MAX_ATTEMPTS - 1)\n        ) {\n          break;\n        }\n\n        await wait(2000);\n      }\n\n      if (!campaignRecord) {\n        throw new Error(\n          \"Campaign record not available yet. Please try again in a moment.\"\n        );\n      }\n\n      const { campaignResult, leads: mappedLeads } = transformCampaignData(\n        campaignRecord,\n        leadsRecords,\n        { metrics: (metrics ?? null) as Record<string, any> | null }\n      );\n\n      const campaignExists = campaigns.some(\n        (item) => item.campaign_id === campaignResult.campaign_id\n      );\n\n      if (campaignExists) {\n        updateCampaign(campaignResult.campaign_id, campaignResult);\n      } else {\n        addCampaign(campaignResult);\n      }\n\n      clearLeads();\n      addLeads(mappedLeads);\n      setCurrentCampaign(campaignResult);\n\n      if (isMountedRef.current) {\n        setResultFetchError(null);\n        navigate(\"/results\", { replace: true, state: { campaignId } });\n      }\n    } catch (err) {\n      console.error(\"⚠️ Unable to load campaign results\", err);\n      const message =\n        err instanceof Error\n          ? err.message\n          : \"Unable to load campaign results. Please try again.\";\n\n      if (isMountedRef.current) {\n        setResultFetchError(message);\n      }\n\n      setError(message);\n      hasFetchedResultsRef.current = false;\n    } finally {\n      if (isMountedRef.current) {\n        setIsFetchingResults(false);\n        setLoading(false);\n      }\n    }\n  }, [\n    addCampaign,\n    addLeads,\n    authUserId,\n    campaignId,\n    campaigns,\n    clearLeads,\n    metrics,\n    navigate,\n    setCurrentCampaign,\n    setError,\n    setLoading,\n    updateCampaign,\n  ]);\n\n  useEffect(() => {\n    if (!isComplete || !campaignId || !jobId) {\n      return;\n    }\n\n    if (!authUserId) {\n      return;\n    }\n\n    if (hasFetchedResultsRef.current) {\n      return;\n    }\n\n    fetchResults();\n  }, [authUserId, campaignId, fetchResults, isComplete, jobId]);\n\n  const handleRetryFetch = () => {\n    if (!campaignId) {\n      return;\n    }\n\n    if (!authUserId) {\n      setResultFetchError(\"Sign in again to re-establish your session.\");\n      return;\n    }\n\n    fetchResults();\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"flex items-center justify-center\">\n          <div className=\"flex items-center space-x-3 text-gray-600\">\n            <div className=\"h-6 w-6 animate-spin rounded-full border-2 border-blue-600 border-t-transparent\"></div>\n            <span>Loading campaign...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!authUserId) {\n    return (\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"max-w-xl mx-auto rounded-lg border border-gray-200 bg-white p-8 text-center shadow-sm dark:border-gray-700 dark:bg-gray-800\">\n          <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\n            Sign in required\n          </h1>\n          <p className=\"mt-3 text-sm text-gray-600 dark:text-gray-300\">\n            Please sign in to review campaign progress and download results.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!jobId || !campaignId) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">\n            Invalid Campaign\n          </h1>\n          <p className=\"text-gray-600 mb-4\">\n            Missing job or campaign information.\n          </p>\n          <button\n            onClick={() => navigate(\"/\")}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Return Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">\n            Processing Error\n          </h1>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button\n            onClick={() => navigate(\"/\")}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Start New Campaign\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          Campaign Discovery in Progress\n        </h1>\n        <p className=\"text-gray-600\">\n          Campaign ID: <span className=\"font-mono text-sm\">{campaignId}</span>\n        </p>\n        <p className=\"text-gray-600\">\n          Job ID: <span className=\"font-mono text-sm\">{jobId}</span>\n        </p>\n      </div>\n\n      {isFetchingResults && !resultFetchError && (\n        <div className=\"mb-6 rounded-lg border border-blue-200 bg-blue-50 p-4 text-sm text-blue-700\">\n          Finalizing campaign results and syncing verified leads to your\n          vault...\n        </div>\n      )}\n\n      {resultFetchError && (\n        <div className=\"mb-6 rounded-lg border border-red-200 bg-red-50 p-4 text-sm text-red-700\">\n          <div className=\"font-semibold\">Unable to load campaign results</div>\n          <p className=\"mt-1\">{resultFetchError}</p>\n          <button\n            onClick={handleRetryFetch}\n            className=\"mt-3 inline-flex items-center rounded border border-red-300 bg-white px-3 py-1.5 text-xs font-medium text-red-700 shadow-sm transition hover:bg-red-100\"\n          >\n            Retry syncing results\n          </button>\n        </div>\n      )}\n\n      {/* Progress Display */}\n      <ProgressDisplay\n        isDiscovering={isProcessing}\n        progress={displayProgress}\n        currentStage={displayStage}\n        cacheStats={null} // Real-time updates don't include cache stats\n      />\n\n      {/* Real-time Metrics */}\n      {metrics && (\n        <div className=\"mt-6 bg-white border border-gray-200 rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            📊 Live Discovery Metrics\n          </h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {metrics.total_found || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Found</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {metrics.qualified_leads || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Qualified</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {metrics.avg_confidence ? `${metrics.avg_confidence}%` : \"0%\"}\n              </div>\n              <div className=\"text-sm text-gray-600\">Avg Confidence</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                ${(metrics.total_cost || 0).toFixed(2)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Cost</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Status Updates */}\n      <div className=\"mt-6 bg-gray-50 border border-gray-200 rounded-lg p-4\">\n        <h4 className=\"font-semibold text-gray-900 mb-2\">Status Updates</h4>\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center text-sm\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full mr-2\"></div>\n            <span className=\"text-gray-600\">\n              Campaign started at {new Date().toLocaleTimeString()}\n            </span>\n          </div>\n          {displayStage && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-blue-400 rounded-full mr-2 animate-pulse\"></div>\n              <span className=\"text-gray-900 font-medium\">{displayStage}</span>\n            </div>\n          )}\n          {isFetchingResults && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-purple-400 rounded-full mr-2 animate-pulse\"></div>\n              <span className=\"text-purple-600 font-medium\">\n                Finalizing leads and preparing results...\n              </span>\n            </div>\n          )}\n          {status === \"completed\" && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full mr-2\"></div>\n              <span className=\"text-green-600 font-medium\">\n                ✅ Discovery completed! Redirecting to results...\n              </span>\n            </div>\n          )}\n          {resultFetchError && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-red-400 rounded-full mr-2\"></div>\n              <span className=\"text-red-600 font-medium\">\n                {resultFetchError}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"mt-8 text-center space-x-4\">\n        <button\n          onClick={() => navigate(\"/\")}\n          className=\"px-4 py-2 text-gray-600 bg-gray-100 rounded hover:bg-gray-200\"\n        >\n          Start New Campaign\n        </button>\n        {!isProcessing && (\n          <button\n            onClick={() => navigate(\"/results\", { state: { campaignId } })}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            View Complete Results\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"measure","name":"lsp.testing_update","count":7,"duration":0.265},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":8,"duration":0.224},
{"type":"measure","name":"lsp.did_open","count":12,"duration":5.583},
{"type":"mark","name":"lsp.did_open","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/BusinessDiscovery.tsx","languageId":"typescriptreact","version":1,"text":"import React, { useEffect, useMemo, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  GeographicLocation,\n  GeographicSelector,\n} from \"../components/GeographicSelector\";\nimport { MultiSelectBusinessTypes } from \"../components/MultiSelectBusinessTypes\";\nimport { ProgressDisplay } from \"../components/ProgressDisplay\";\nimport { TierSelector } from \"../components/TierSelector\";\nimport { BUSINESS_TYPES_BY_CATEGORY } from \"../constants/businessTaxonomy\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useBusinessDiscovery } from \"../hooks/useBusinessDiscovery\";\nimport { ENRICHMENT_TIERS } from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport { exportLeadsToCsv } from \"../utils/exportLeadsToCsv\";\n\nconst DEFAULT_CATEGORY = \"Home & Property Services\";\nconst DEFAULT_LOCATION: GeographicLocation = {\n  lat: 40.7128,\n  lng: -74.006,\n  address: \"New York, NY\",\n};\nconst DEFAULT_RADIUS = 10;\n\nconst STEPS = [\n  { id: 1, title: \"Targeting\", description: \"Audience & geography\" },\n  { id: 2, title: \"Campaign setup\", description: \"Tier & quantity\" },\n  { id: 3, title: \"Results\", description: \"Leads & export\" },\n];\n\nconst getConfidenceColor = (score: number) => {\n  if (score >= 90)\n    return \"border border-emerald-200 bg-emerald-50 text-emerald-700 dark:border-emerald-400 dark:bg-transparent dark:text-emerald-300\";\n  if (score >= 80)\n    return \"border border-sky-200 bg-sky-50 text-sky-700 dark:border-sky-400 dark:bg-transparent dark:text-sky-300\";\n  if (score >= 70)\n    return \"border border-amber-200 bg-amber-50 text-amber-700 dark:border-amber-400 dark:bg-transparent dark:text-amber-300\";\n  return \"border border-rose-200 bg-rose-50 text-rose-700 dark:border-rose-400 dark:bg-transparent dark:text-rose-300\";\n};\n\nconst getValidationStatusColor = (status?: string) => {\n  switch (status) {\n    case \"validated\":\n      return \"border border-emerald-200 bg-emerald-50 text-emerald-700 dark:border-emerald-400 dark:bg-transparent dark:text-emerald-300\";\n    case \"validating\":\n      return \"border border-sky-200 bg-sky-50 text-sky-700 dark:border-sky-400 dark:bg-transparent dark:text-sky-300\";\n    case \"pending\":\n      return \"border border-amber-200 bg-amber-50 text-amber-700 dark:border-amber-400 dark:bg-transparent dark:text-amber-300\";\n    case \"failed\":\n      return \"border border-rose-200 bg-rose-50 text-rose-700 dark:border-rose-400 dark:bg-transparent dark:text-rose-300\";\n    default:\n      return \"border border-gray-200 bg-gray-50 text-gray-700 dark:border-slate-500 dark:bg-transparent dark:text-slate-300\";\n  }\n};\n\nexport const BusinessDiscovery: React.FC = () => {\n  const navigate = useNavigate();\n  const { user, loading: authLoading } = useAuth();\n\n  const handleJobCreated = (jobData: {\n    jobId: string;\n    campaignId: string;\n    status: string;\n    estimatedTime?: number;\n  }) => {\n    console.log(\"🚀 Job created, navigating to progress page:\", jobData);\n    navigate(`/campaign/${jobData.campaignId}/progress?jobId=${jobData.jobId}`);\n  };\n\n  const {\n    startDiscovery,\n    isDiscovering,\n    progress,\n    currentStage,\n    cacheStats,\n    error,\n  } = useBusinessDiscovery(handleJobCreated);\n\n  const defaultBusinessTypes =\n    BUSINESS_TYPES_BY_CATEGORY[DEFAULT_CATEGORY] || [];\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([\n    DEFAULT_CATEGORY,\n  ]);\n  const [selectedBusinessTypes, setSelectedBusinessTypes] = useState<string[]>(\n    defaultBusinessTypes.length > 0 ? [defaultBusinessTypes[0]] : []\n  );\n  const [keywords, setKeywords] = useState(\"\");\n  const [location, setLocation] =\n    useState<GeographicLocation>(DEFAULT_LOCATION);\n  const [searchRadius, setSearchRadius] = useState<number>(DEFAULT_RADIUS);\n  const [expandGeography, setExpandGeography] = useState(false);\n  const [numberOfLeads, setNumberOfLeads] = useState(3);\n  const [selectedTier, setSelectedTier] =\n    useState<keyof typeof ENRICHMENT_TIERS>(\"BASE\");\n  const [activeStep, setActiveStep] = useState<1 | 2 | 3>(1);\n\n  const currentTierConfig = ENRICHMENT_TIERS[selectedTier];\n  const estimatedCost = numberOfLeads * currentTierConfig.price;\n  const sliderPercent = ((numberOfLeads - 1) / 9) * 100;\n\n  const { leads, currentCampaign } = useCampaignStore();\n\n  const campaignLeads = useMemo(() => {\n    if (currentCampaign) {\n      return leads.filter(\n        (lead) => lead.campaign_id === currentCampaign.campaign_id\n      );\n    }\n    return leads;\n  }, [leads, currentCampaign]);\n\n  const qualifiedLeadCount = useMemo(\n    () => campaignLeads.filter((lead) => lead.confidence_score >= 70).length,\n    [campaignLeads]\n  );\n\n  const hasResults = campaignLeads.length > 0;\n\n  useEffect(() => {\n    if (hasResults && activeStep === 2 && !isDiscovering) {\n      setActiveStep(3);\n    }\n  }, [hasResults, activeStep, isDiscovering]);\n\n  const handleExportResults = () => {\n    if (!campaignLeads.length) return;\n\n    exportLeadsToCsv(campaignLeads, {\n      fileName: `campaign-${\n        currentCampaign?.campaign_id || Date.now()\n      }-results.csv`,\n    });\n  };\n\n  const handleViewCampaign = () => {\n    if (!currentCampaign) return;\n\n    navigate(`/campaign?id=${currentCampaign.campaign_id}`);\n  };\n\n  const keywordsList = keywords\n    .split(\",\")\n    .map((keyword) => keyword.trim())\n    .filter((keyword) => keyword.length > 0);\n  const keywordsString = keywordsList.join(\", \");\n  const businessTypesString = selectedBusinessTypes.join(\", \");\n  const approxCoverage = Math.round(Math.PI * searchRadius * searchRadius);\n\n  const isTargetingValid =\n    selectedBusinessTypes.length > 0 && location.address.trim().length > 0;\n\n  const handleGeographicChange = (\n    updatedLocation: GeographicLocation,\n    radius: number\n  ) => {\n    setLocation(updatedLocation);\n    setSearchRadius(radius);\n  };\n\n  const handleContinue = () => {\n    if (!isTargetingValid) {\n      alert(\"Please select at least one business type and provide a location.\");\n      return;\n    }\n    setActiveStep(2);\n  };\n\n  const handleBackToTargeting = () => {\n    setActiveStep(1);\n  };\n\n  const handleSearch = () => {\n    if (!user) {\n      alert(\"Please sign in to run a discovery campaign.\");\n      return;\n    }\n\n    if (!isTargetingValid) {\n      setActiveStep(1);\n      alert(\"Please complete targeting details before running the campaign.\");\n      return;\n    }\n\n    const config = {\n      search_terms: `${businessTypesString}${\n        keywordsString ? ` ${keywordsString}` : \"\"\n      }`.trim(),\n      location: location.address.trim(),\n      business_type: businessTypesString,\n      budget_limit: estimatedCost,\n      max_results: numberOfLeads,\n      include_email_validation:\n        selectedTier === \"PROFESSIONAL\" || selectedTier === \"ENTERPRISE\",\n      include_website_validation: true,\n      min_confidence_score: 70,\n      chamber_verification: true,\n      trade_association: true,\n      professional_license: true,\n      keywords: keywordsString,\n      search_radius: `${searchRadius} miles`,\n      expand_geography: expandGeography,\n      selectedTier,\n    };\n\n    console.log(\"🚀 Starting campaign:\", config);\n    startDiscovery(config);\n  };\n\n  const selectedBusinessTypesPreview = selectedBusinessTypes.length\n    ? (() => {\n        const preview = selectedBusinessTypes.slice(0, 5).join(\", \");\n        const remaining = selectedBusinessTypes.length - 5;\n        return remaining > 0 ? `${preview} +${remaining} more` : preview;\n      })()\n    : \"No business types selected\";\n\n  const summaryItems = [\n    {\n      label: \"Business categories\",\n      value:\n        selectedCategories.length > 0\n          ? selectedCategories.join(\", \")\n          : \"No categories selected\",\n    },\n    {\n      label: \"Business types\",\n      value: selectedBusinessTypesPreview,\n    },\n    {\n      label: \"Keywords\",\n      value: keywordsString.length > 0 ? keywordsString : \"None\",\n    },\n    {\n      label: \"Location\",\n      value: location.address,\n    },\n    {\n      label: \"Radius\",\n      value: `${searchRadius} miles`,\n    },\n    {\n      label: \"Geography\",\n      value: expandGeography ? \"Auto-expand enabled\" : \"Stay within radius\",\n    },\n    {\n      label: \"Coverage\",\n      value: `~${approxCoverage} square miles`,\n    },\n  ];\n\n  if (authLoading) {\n    return (\n      <div className=\"rounded-lg border border-gray-200 bg-white p-6 text-center shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n        <div className=\"flex items-center justify-center space-x-3 text-gray-600 dark:text-slate-300\">\n          <div className=\"h-6 w-6 animate-spin rounded-full border-2 border-blue-600 border-t-transparent\" />\n          <span>Loading your workspace…</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"rounded-lg border border-gray-200 bg-white p-8 text-center shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\n          Sign in required\n        </h1>\n        <p className=\"mt-3 text-sm text-gray-600 dark:text-gray-300\">\n          Create an account or sign in to launch new campaigns and access\n          verified leads.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"rounded-lg border border-gray-200 bg-white shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n      <div className=\"border-b border-gray-200 px-6 py-4 dark:border-slate-700\">\n        <div className=\"flex flex-wrap items-center gap-4\">\n          {STEPS.map((step) => {\n            const isActive = activeStep === step.id;\n            const isCompleted = activeStep > step.id;\n            const canNavigate =\n              step.id === 1 ||\n              (step.id === 2 && isTargetingValid) ||\n              step.id === 3;\n            const isDisabled = step.id === 2 && !isTargetingValid;\n            const disableButton = !canNavigate || isDisabled;\n\n            return (\n              <button\n                key={step.id}\n                type=\"button\"\n                disabled={disableButton}\n                onClick={() => setActiveStep(step.id as 1 | 2 | 3)}\n                className={`flex items-center gap-3 rounded-md border px-4 py-2 text-left transition-colors ${\n                  isActive\n                    ? \"border-blue-600 bg-blue-50 text-blue-700 dark:border-sky-400 dark:bg-transparent dark:text-sky-300\"\n                    : isCompleted\n                    ? \"border-blue-200 bg-white text-blue-600 dark:border-slate-600 dark:bg-transparent dark:text-sky-300\"\n                    : \"border-transparent bg-white text-gray-600 hover:border-blue-200 hover:text-blue-700 dark:border-transparent dark:bg-transparent dark:text-slate-300 dark:hover:border-sky-400\"\n                } ${disableButton ? \"cursor-not-allowed opacity-60\" : \"\"}`}\n              >\n                <span\n                  className={`flex h-8 w-8 items-center justify-center rounded-full border-2 text-sm font-semibold ${\n                    isActive\n                      ? \"border-blue-600 bg-blue-600 text-white dark:border-sky-400 dark:bg-sky-400 dark:text-slate-900\"\n                      : isCompleted\n                      ? \"border-blue-300 bg-blue-100 text-blue-700 dark:border-sky-400 dark:bg-transparent dark:text-sky-300\"\n                      : \"border-gray-300 bg-white text-gray-500 dark:border-slate-600 dark:bg-transparent dark:text-slate-400\"\n                  }`}\n                  aria-hidden=\"true\"\n                >\n                  {step.id}\n                </span>\n                <span className=\"flex flex-col\">\n                  <span className=\"text-sm font-semibold\">{step.title}</span>\n                  <span className=\"text-xs text-gray-500 dark:text-slate-400\">\n                    {step.description}\n                  </span>\n                </span>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      <div className=\"p-6 space-y-8\">\n        <section\n          className={`space-y-6 ${activeStep === 1 ? \"\" : \"hidden\"}`}\n          aria-hidden={activeStep !== 1}\n        >\n          <header>\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n              Targeting & Geography\n            </h2>\n            <p className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">\n              Choose the businesses and regions you want ProspectPro to\n              discover.\n            </p>\n          </header>\n\n          <MultiSelectBusinessTypes\n            selectedCategories={selectedCategories}\n            selectedBusinessTypes={selectedBusinessTypes}\n            onCategoriesChange={setSelectedCategories}\n            onBusinessTypesChange={setSelectedBusinessTypes}\n          />\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Additional Keywords (Optional)\n            </label>\n            <input\n              type=\"text\"\n              value={keywords}\n              onChange={(e) => setKeywords(e.target.value)}\n              placeholder=\"e.g., luxury, organic, 24-hour (comma-separated)\"\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400\"\n            />\n            <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n              Add comma-separated keywords to refine your search.\n            </p>\n          </div>\n\n          <div className=\"space-y-4\">\n            <GeographicSelector\n              onLocationChange={handleGeographicChange}\n              initialLocation={location}\n              initialRadius={searchRadius}\n            />\n\n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"expandGeography\"\n                checked={expandGeography}\n                onChange={(e) => setExpandGeography(e.target.checked)}\n                className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700\"\n              />\n              <label\n                htmlFor=\"expandGeography\"\n                className=\"ml-2 text-sm text-gray-700 dark:text-gray-300\"\n              >\n                Expand geography automatically if initial results are limited\n              </label>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end\">\n            <button\n              type=\"button\"\n              onClick={handleContinue}\n              className=\"px-5 py-2 rounded-md bg-blue-600 text-white font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n              disabled={!isTargetingValid}\n            >\n              Continue to Campaign Setup\n            </button>\n          </div>\n        </section>\n\n        <section\n          className={`space-y-6 ${activeStep === 2 ? \"\" : \"hidden\"}`}\n          aria-hidden={activeStep !== 2}\n        >\n          <header className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n                Campaign Setup\n              </h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">\n                Review your targeting, then select enrichment tier and lead\n                quantity.\n              </p>\n            </div>\n            <button\n              type=\"button\"\n              onClick={handleBackToTargeting}\n              className=\"text-sm text-blue-600 hover:text-blue-700 dark:text-blue-300\"\n            >\n              ← Edit targeting\n            </button>\n          </header>\n\n          <div className=\"rounded-md border border-gray-200 bg-gray-50 p-4 dark:border-slate-700 dark:bg-slate-900/80\">\n            <h3 className=\"mb-3 text-sm font-semibold text-gray-800 dark:text-slate-200\">\n              Campaign summary\n            </h3>\n            <dl className=\"grid gap-3 sm:grid-cols-2\">\n              {summaryItems.map((item) => (\n                <div key={item.label} className=\"flex flex-col\">\n                  <dt className=\"text-xs uppercase tracking-wide text-gray-500 dark:text-slate-400\">\n                    {item.label}\n                  </dt>\n                  <dd className=\"text-sm text-gray-800 dark:text-slate-100\">\n                    {item.value}\n                  </dd>\n                </div>\n              ))}\n            </dl>\n          </div>\n\n          <TierSelector\n            selectedTier={selectedTier}\n            onTierChange={setSelectedTier}\n            numberOfLeads={numberOfLeads}\n          />\n\n          <div>\n            <label className=\"mb-2 block text-sm font-medium text-gray-700 dark:text-slate-200\">\n              Number of Leads\n            </label>\n            <div className=\"flex items-center gap-4\">\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"10\"\n                value={numberOfLeads}\n                onChange={(e) => setNumberOfLeads(parseInt(e.target.value, 10))}\n                className=\"h-2 flex-1 cursor-pointer appearance-none rounded-full bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                style={{\n                  background: `linear-gradient(90deg, #2563eb 0%, #2563eb ${sliderPercent}%, #d1d5db ${sliderPercent}%, #d1d5db 100%)`,\n                  accentColor: \"#2563eb\",\n                }}\n              />\n              <div className=\"min-w-fit rounded-full border border-blue-200 bg-blue-50 px-3 py-1 text-sm font-medium text-blue-700 dark:border-sky-400 dark:bg-slate-900 dark:text-sky-300\">\n                {numberOfLeads} leads\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rounded-lg border-2 border-yellow-400 bg-white p-4 shadow-sm dark:border-amber-400 dark:bg-slate-900\">\n            <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold uppercase tracking-wide text-gray-500 dark:text-slate-300\">\n                  Estimated cost\n                </p>\n                <div className=\"mt-1 flex items-baseline gap-x-3\">\n                  <span className=\"text-3xl font-bold text-blue-700 dark:text-sky-300\">\n                    ${estimatedCost.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n              <div className=\"flex w-full flex-col items-start gap-2 sm:w-auto sm:items-end\">\n                <span className=\"text-sm text-gray-600 dark:text-slate-400\">\n                  {numberOfLeads} leads × ${currentTierConfig.price.toFixed(2)}\n                </span>\n                <div className=\"flex flex-wrap items-center gap-2\">\n                  <span className=\"rounded-full border border-blue-200 bg-blue-50 px-3 py-1 text-xs font-medium text-blue-700 dark:border-sky-400 dark:bg-slate-900 dark:text-sky-300\">\n                    {currentTierConfig.name}\n                  </span>\n                  <button\n                    type=\"button\"\n                    onClick={handleSearch}\n                    disabled={isDiscovering}\n                    className=\"inline-flex items-center justify-center rounded-md bg-blue-600 px-5 py-2.5 text-sm font-semibold text-white shadow-sm transition-colors hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-60 dark:bg-sky-500 dark:hover:bg-sky-600\"\n                  >\n                    {isDiscovering ? (\n                      <>\n                        <svg\n                          className=\"-ml-1 mr-2 h-4 w-4 animate-spin text-white\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          fill=\"none\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <circle\n                            className=\"opacity-25\"\n                            cx=\"12\"\n                            cy=\"12\"\n                            r=\"10\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"4\"\n                          ></circle>\n                          <path\n                            className=\"opacity-75\"\n                            fill=\"currentColor\"\n                            d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                          ></path>\n                        </svg>\n                        Running…\n                      </>\n                    ) : (\n                      \"Run Campaign\"\n                    )}\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <ProgressDisplay\n            isDiscovering={isDiscovering}\n            progress={progress}\n            currentStage={currentStage}\n            cacheStats={cacheStats}\n          />\n        </section>\n\n        <section\n          className={`space-y-6 ${activeStep === 3 ? \"\" : \"hidden\"}`}\n          aria-hidden={activeStep !== 3}\n        >\n          <header className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n                Campaign Results\n              </h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">\n                {hasResults\n                  ? `${campaignLeads.length} leads captured • ${qualifiedLeadCount} qualified`\n                  : isDiscovering\n                  ? \"We're still enriching this campaign. Hang tight while ProspectPro verifies contacts.\"\n                  : \"Results will appear here once a campaign finishes. You can keep working in the meantime.\"}\n              </p>\n            </div>\n            <div className=\"flex flex-wrap gap-3\">\n              {currentCampaign && (\n                <button\n                  type=\"button\"\n                  onClick={handleViewCampaign}\n                  className=\"inline-flex items-center gap-2 rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-50 dark:border-slate-600 dark:bg-transparent dark:text-slate-200 dark:hover:border-sky-400\"\n                >\n                  View full campaign\n                </button>\n              )}\n              {hasResults && (\n                <button\n                  type=\"button\"\n                  onClick={handleExportResults}\n                  className=\"inline-flex items-center gap-2 rounded-md border border-emerald-400 px-4 py-2 text-sm font-semibold text-emerald-700 transition-colors hover:bg-emerald-50 dark:border-emerald-400 dark:text-emerald-300 dark:hover:bg-transparent\"\n                >\n                  📊 Export CSV\n                </button>\n              )}\n            </div>\n          </header>\n\n          {currentCampaign && (\n            <div className=\"rounded-lg border border-gray-200 bg-gray-50 p-4 dark:border-slate-700 dark:bg-slate-900/70\">\n              <div className=\"flex flex-wrap items-start justify-between gap-4\">\n                <div>\n                  <div className=\"text-xs uppercase tracking-wide text-gray-500 dark:text-slate-400\">\n                    Campaign ID\n                  </div>\n                  <div className=\"text-sm font-semibold text-gray-900 dark:text-slate-100\">\n                    {currentCampaign.campaign_id}\n                  </div>\n                  <div className=\"mt-2 text-xs text-gray-500 dark:text-slate-400\">\n                    Status • {currentCampaign.status}\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4 sm:grid-cols-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold text-gray-900 dark:text-slate-100\">\n                      {currentCampaign.leads_found ?? campaignLeads.length}\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-slate-400\">\n                      Total Leads\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold text-blue-600 dark:text-sky-300\">\n                      {currentCampaign.leads_qualified ?? qualifiedLeadCount}\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-slate-400\">\n                      Qualified\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold text-green-600 dark:text-emerald-300\">\n                      {currentCampaign.leads_validated ?? 0}\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-slate-400\">\n                      Validated\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold text-purple-600 dark:text-violet-300\">\n                      {currentCampaign.tier_used || selectedTier}\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-slate-400\">\n                      Tier\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden shadow-sm\">\n            {!hasResults ? (\n              <div className=\"flex flex-col items-center justify-center py-16 text-center\">\n                <span className=\"text-4xl mb-2\">🔍</span>\n                <h3 className=\"text-base font-semibold text-gray-900 dark:text-gray-100\">\n                  {isDiscovering\n                    ? \"ProspectPro is working on your campaign\"\n                    : \"No leads yet\"}\n                </h3>\n                <p className=\"mt-2 max-w-md text-sm text-gray-600 dark:text-gray-300\">\n                  {isDiscovering\n                    ? \"Please keep this tab open. We'll move results here automatically once enrichment finishes.\"\n                    : \"Launch or complete a campaign to populate results with verified leads.\"}\n                </p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                  <thead className=\"bg-gray-50 dark:bg-gray-900/40\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">\n                        Business\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">\n                        Contact\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">\n                        Confidence\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">\n                        Enrichment\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">\n                        Status\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">\n                        Cost\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                    {campaignLeads.map((lead) => (\n                      <tr\n                        key={lead.id}\n                        className=\"hover:bg-gray-50 dark:hover:bg-gray-900/30\"\n                      >\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100\">\n                            {lead.business_name}\n                          </div>\n                          <div className=\"mt-1 text-xs text-gray-500 dark:text-gray-400\">\n                            {lead.address}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-gray-900 dark:text-gray-100 space-y-1\">\n                            {lead.phone && <div>📞 {lead.phone}</div>}\n                            {lead.website && (\n                              <div>\n                                🌐{\" \"}\n                                <a\n                                  href={lead.website}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  className=\"text-blue-600 dark:text-blue-400 hover:underline\"\n                                >\n                                  {lead.website.replace(/^https?:\\/\\//, \"\")}\n                                </a>\n                              </div>\n                            )}\n                            {lead.email && <div>📧 {lead.email}</div>}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span\n                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getConfidenceColor(\n                              lead.confidence_score\n                            )}`}\n                          >\n                            {lead.confidence_score}%\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex flex-col space-y-1\">\n                            <span className=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900/40 dark:text-purple-300\">\n                              {lead.enrichment_tier || currentTierConfig.name}\n                            </span>\n                            {lead.vault_secured && (\n                              <span className=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/40 dark:text-green-300\">\n                                🔐 Vault Secured\n                              </span>\n                            )}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span\n                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getValidationStatusColor(\n                              lead.validation_status\n                            )}`}\n                          >\n                            {lead.validation_status || \"pending\"}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-200\">\n                          ${lead.cost_to_acquire.toFixed(2)}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n        </section>\n\n        {error && (\n          <div className=\"mt-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md\">\n            <div className=\"flex\">\n              <div className=\"flex-shrink-0\">\n                <svg\n                  className=\"h-5 w-5 text-red-400 dark:text-red-500\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"currentColor\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n              <div className=\"ml-3\">\n                <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n                  Discovery Failed\n                </h3>\n                <div className=\"mt-2 text-sm text-red-700 dark:text-red-300\">\n                  <p>\n                    {error instanceof Error ? error.message : String(error)}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":9,"duration":0.232},
{"type":"measure","name":"lsp.did_open","count":13,"duration":4.278},
{"type":"mark","name":"lsp.did_open","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/AccountPage.tsx","languageId":"typescriptreact","version":1,"text":"import React from \"react\";\nimport { ApiUsageTable } from \"../components/ApiUsageTable\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\nexport const AccountPage: React.FC = () => {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-64\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"h-6 w-6 animate-spin rounded-full border-2 border-blue-600 border-t-transparent\"></div>\n          <span className=\"text-gray-600 dark:text-slate-400\">\n            Loading account...\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-64\">\n        <div className=\"rounded-lg border border-gray-200 bg-white p-8 text-center shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n          <h1 className=\"text-xl font-semibold text-gray-900 dark:text-slate-100\">\n            Sign in to manage your account\n          </h1>\n          <p className=\"mt-2 text-sm text-gray-600 dark:text-slate-400\">\n            Access your billing, usage analytics, and profile settings after\n            signing in.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const displayName = user?.user_metadata?.full_name || \"ProspectPro User\";\n  const email = user?.email || \"Not provided\";\n  const avatarUrl = user?.user_metadata?.avatar_url;\n  const createdAt = user?.created_at ? new Date(user.created_at) : null;\n  const lastSignIn = user?.last_sign_in_at\n    ? new Date(user.last_sign_in_at)\n    : null;\n\n  const initials = displayName\n    .split(\" \")\n    .map((part: string) => part.charAt(0))\n    .join(\"\")\n    .slice(0, 2)\n    .toUpperCase();\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-8\">\n      {/* Page Header */}\n      <div className=\"border-b border-gray-200 pb-6 dark:border-slate-700\">\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-slate-100\">\n          Account Settings\n        </h1>\n        <p className=\"mt-2 text-gray-600 dark:text-slate-400\">\n          Manage your account, view usage analytics, and configure preferences.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-8 lg:grid-cols-3\">\n        {/* Profile Section */}\n        <div className=\"lg:col-span-1\">\n          <div className=\"rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-slate-100 mb-4\">\n              Profile Information\n            </h2>\n\n            <div className=\"flex items-center space-x-4 mb-6\">\n              <div className=\"relative flex h-16 w-16 items-center justify-center overflow-hidden rounded-full border-2 border-blue-200 bg-blue-100 text-xl font-bold text-blue-700 shadow-sm dark:border-sky-500/60 dark:bg-sky-500/10 dark:text-sky-200\">\n                {avatarUrl ? (\n                  <img\n                    src={avatarUrl}\n                    alt={displayName}\n                    className=\"absolute inset-0 h-full w-full object-cover\"\n                  />\n                ) : (\n                  initials || \"PP\"\n                )}\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-slate-100\">\n                  {displayName}\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-slate-400\">\n                  {email}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <dt className=\"text-sm font-medium text-gray-500 dark:text-slate-400\">\n                  Account Created\n                </dt>\n                <dd className=\"text-sm text-gray-900 dark:text-slate-100\">\n                  {createdAt\n                    ? createdAt.toLocaleDateString(\"en-US\", {\n                        year: \"numeric\",\n                        month: \"long\",\n                        day: \"numeric\",\n                      })\n                    : \"Unknown\"}\n                </dd>\n              </div>\n\n              <div>\n                <dt className=\"text-sm font-medium text-gray-500 dark:text-slate-400\">\n                  Last Sign In\n                </dt>\n                <dd className=\"text-sm text-gray-900 dark:text-slate-100\">\n                  {lastSignIn\n                    ? lastSignIn.toLocaleDateString(\"en-US\", {\n                        year: \"numeric\",\n                        month: \"short\",\n                        day: \"numeric\",\n                        hour: \"2-digit\",\n                        minute: \"2-digit\",\n                      })\n                    : \"Unknown\"}\n                </dd>\n              </div>\n\n              <div>\n                <dt className=\"text-sm font-medium text-gray-500 dark:text-slate-400\">\n                  User ID\n                </dt>\n                <dd className=\"text-xs font-mono text-gray-700 dark:text-slate-300 break-all\">\n                  {user?.id || \"Not available\"}\n                </dd>\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"mt-6 rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-slate-100 mb-4\">\n              Quick Actions\n            </h3>\n            <div className=\"space-y-3\">\n              <button\n                type=\"button\"\n                className=\"w-full rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-50 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-200 dark:hover:bg-slate-700\"\n                onClick={() => {\n                  // TODO: Implement profile editing\n                  alert(\n                    \"Profile editing will be available in a future update.\"\n                  );\n                }}\n              >\n                Edit Profile\n              </button>\n              <button\n                type=\"button\"\n                className=\"w-full rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-50 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-200 dark:hover:bg-slate-700\"\n                onClick={() => {\n                  // TODO: Implement password change\n                  alert(\n                    \"Password management will be available in a future update.\"\n                  );\n                }}\n              >\n                Change Password\n              </button>\n              <button\n                type=\"button\"\n                className=\"w-full rounded-md border border-red-300 bg-white px-4 py-2 text-sm font-medium text-red-600 transition-colors hover:bg-red-50 dark:border-red-600 dark:bg-slate-800 dark:text-red-400 dark:hover:bg-red-900/20\"\n                onClick={() => {\n                  // TODO: Implement account deletion\n                  if (\n                    confirm(\n                      \"Are you sure you want to delete your account? This action cannot be undone.\"\n                    )\n                  ) {\n                    alert(\n                      \"Account deletion will be available in a future update.\"\n                    );\n                  }\n                }}\n              >\n                Delete Account\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Usage Analytics */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-lg font-semibold text-gray-900 dark:text-slate-100\">\n                API Usage & Cost Analytics\n              </h2>\n              <p className=\"text-sm text-gray-600 dark:text-slate-400\">\n                Monitor your API usage patterns and costs across all services.\n              </p>\n            </div>\n\n            <ApiUsageTable />\n          </div>\n        </div>\n      </div>\n\n      {/* Subscription and Billing Section (Placeholder) */}\n      <div className=\"rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-slate-100 mb-4\">\n          Subscription & Billing\n        </h2>\n        <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4 dark:border-sky-800 dark:bg-sky-900/20\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <svg\n                className=\"h-5 w-5 text-blue-400\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-blue-800 dark:text-sky-200\">\n                Current Plan: Pay-per-Use\n              </h3>\n              <p className=\"mt-1 text-sm text-blue-700 dark:text-sky-300\">\n                You're currently on a pay-per-use billing model with no monthly\n                subscription. API costs are charged based on actual usage.\n                Subscription plans with fixed pricing and enhanced features\n                coming soon.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":10,"duration":0.245},
{"type":"measure","name":"lsp.did_open","count":14,"duration":1.687},
{"type":"mark","name":"lsp.did_open","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport {\n  createUsageLogger,\n  UsageLogContext,\n  UsageLogger,\n} from \"../_shared/api-usage.ts\";\nimport { corsHeaders, handleCORS } from \"../_shared/edge-auth.ts\";\n\n// Background Task Business Discovery with Tiered Enrichment + Multi-Source Discovery\n// ProspectPro v4.3 - October 2025\n// - Google Places + Foursquare discovery with Census targeting\n// - Tier-aware enrichment pipeline with Hunter.io + NeverBounce\n// - Rich verification metadata persisted for UI + exports\n\n// Type declarations for EdgeRuntime\ndeclare const EdgeRuntime: {\n  waitUntil(promise: Promise<unknown>): void;\n};\n\ntype TierKey = \"BASE\" | \"PROFESSIONAL\" | \"ENTERPRISE\";\n\ntype DataSource = \"google_places\" | \"google_place_details\" | \"foursquare\";\n\ninterface TierSettings {\n  key: TierKey;\n  name: string;\n  pricePerLead: number;\n  orchestratorTier: \"starter\" | \"professional\" | \"enterprise\" | \"compliance\";\n  maxCostPerLead: number;\n  includes: {\n    verifyEmails: boolean;\n    personEnrichment: boolean;\n    apolloEnrichment: boolean;\n  };\n}\n\nconst ENRICHMENT_TIERS: Record<TierKey, TierSettings> = {\n  BASE: {\n    key: \"BASE\",\n    name: \"Base\",\n    pricePerLead: 0.15,\n    orchestratorTier: \"starter\",\n    maxCostPerLead: 0.5,\n    includes: {\n      verifyEmails: false, // Generic company email only\n      personEnrichment: false,\n      apolloEnrichment: false,\n    },\n  },\n  PROFESSIONAL: {\n    key: \"PROFESSIONAL\",\n    name: \"Professional\",\n    pricePerLead: 0.45,\n    orchestratorTier: \"professional\",\n    maxCostPerLead: 1.5,\n    includes: {\n      verifyEmails: true, // Professional email discovery & verification\n      personEnrichment: false,\n      apolloEnrichment: false,\n    },\n  },\n  ENTERPRISE: {\n    key: \"ENTERPRISE\",\n    name: \"Enterprise\",\n    pricePerLead: 2.5,\n    orchestratorTier: \"enterprise\",\n    maxCostPerLead: 7.5,\n    includes: {\n      verifyEmails: true,\n      personEnrichment: true, // Executive contact enrichment\n      apolloEnrichment: true, // Full compliance verification\n    },\n  },\n};\n\ninterface BusinessDiscoveryRequest {\n  businessType: string;\n  location: string;\n  keywords?: string[] | string;\n  searchRadius?: string;\n  expandGeography?: boolean;\n  maxResults?: number;\n  budgetLimit?: number;\n  minConfidenceScore?: number;\n  sessionUserId?: string;\n  tierKey?: TierKey;\n  tierName?: string;\n  tierPrice?: number;\n  options?: {\n    tradeAssociation?: boolean;\n    professionalLicense?: boolean;\n    chamberVerification?: boolean;\n    apolloDiscovery?: boolean;\n  };\n  userEmail?: string;\n}\n\ninterface JobConfig {\n  campaignId: string;\n  businessType: string;\n  location: string;\n  keywords: string[];\n  searchRadius?: string;\n  expandGeography: boolean;\n  maxResults: number;\n  budgetLimit: number;\n  minConfidenceScore: number;\n  userId?: string;\n  sessionUserId?: string;\n  jobId?: string;\n  tier: TierSettings;\n  options: {\n    tradeAssociation: boolean;\n    professionalLicense: boolean;\n    chamberVerification: boolean;\n    apolloDiscovery: boolean;\n  };\n}\n\ninterface BusinessData {\n  name?: string;\n  businessName?: string;\n  formatted_address?: string;\n  address?: string;\n  formatted_phone_number?: string;\n  phone?: string;\n  website?: string;\n  place_id?: string;\n  rating?: number;\n  user_ratings_total?: number;\n  source?: DataSource;\n  data_enriched?: boolean;\n  foursquare_data?: Record<string, unknown>;\n}\n\ninterface DiscoveredBusiness extends BusinessData {\n  source: DataSource;\n}\n\ninterface FoursquarePlace {\n  fsq_id: string;\n  name: string;\n  location?: {\n    address?: string;\n    locality?: string;\n    admin_district?: string;\n    region?: string;\n    postcode?: string;\n    country?: string;\n  };\n  contact?: {\n    phone?: string;\n  };\n  website?: string;\n  rating?: number;\n  stats?: {\n    total_tips?: number;\n  };\n}\n\ninterface ScoredLead {\n  businessName: string;\n  address: string;\n  phone: string;\n  website: string;\n  email: string;\n  optimizedScore: number;\n  validationCost: number;\n  dataSources: string[];\n  enhancementData: {\n    verificationSources: string[];\n    emails?: Array<{\n      email: string;\n      confidence?: number;\n      verified?: boolean;\n      type?: string;\n      firstName?: string;\n      lastName?: string;\n      position?: string;\n    }>;\n    processingMetadata: {\n      totalCost: number;\n      validationCost: number;\n      enrichmentCost: number;\n      totalConfidenceBoost: number;\n      processingStrategy: string;\n      servicesUsed: string[];\n      servicesSkipped: string[];\n      enrichmentTier: string;\n      enrichmentCostBreakdown?: Record<string, number>;\n      emailStatus?: \"verified\" | \"unconfirmed\" | \"not_found\";\n      verifiedEmail?: string;\n      unverifiedEmail?: string;\n    };\n  };\n}\n\ninterface CensusIntelligence {\n  total_establishments: number;\n  density_score: number;\n  optimization: {\n    search_radius: number;\n    expected_results: number;\n    api_efficiency_score: number;\n    confidence_multiplier: number;\n  };\n  geographic_data: {\n    state: string;\n    county: string | null;\n    raw_location: string;\n    fallback?: boolean;\n  };\n}\n\nconst DEFAULT_OPTIONS = {\n  tradeAssociation: false,\n  professionalLicense: false,\n  chamberVerification: false,\n  apolloDiscovery: false,\n};\n\nconst GOOGLE_TEXT_SEARCH_COST = 0.032;\nconst GOOGLE_DETAILS_COST = 0.017;\nconst FOURSQUARE_SEARCH_COST = 0;\n\nfunction parseKeywords(input?: string[] | string): string[] {\n  if (!input) return [];\n  if (Array.isArray(input)) {\n    return input.map((value) => value.trim()).filter(Boolean);\n  }\n  return input\n    .split(\",\")\n    .map((value) => value.trim())\n    .filter(Boolean);\n}\n\nfunction getTierSettings(\n  tierKey?: TierKey,\n  fallbackName?: string\n): TierSettings {\n  if (tierKey && ENRICHMENT_TIERS[tierKey]) {\n    return ENRICHMENT_TIERS[tierKey];\n  }\n\n  if (fallbackName) {\n    const match = (Object.values(ENRICHMENT_TIERS) as TierSettings[]).find(\n      (tier) => tier.name.toLowerCase() === fallbackName.toLowerCase()\n    );\n    if (match) return match;\n  }\n\n  return ENRICHMENT_TIERS.BASE; // Changed from PROFESSIONAL to BASE as default\n}\n\n// --------------------\n// Census Intelligence\n// --------------------\n\nclass CensusAPIClient {\n  private apiKey: string;\n  private baseURL: string;\n  private cache = new Map<string, { data: unknown; timestamp: number }>();\n  private cacheTTL = 24 * 60 * 60 * 1000;\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n    this.baseURL = \"https://api.census.gov/data\";\n  }\n\n  async getBusinessDensity(\n    businessType: string,\n    location: string\n  ): Promise<CensusIntelligence> {\n    const naicsCode = this.mapBusinessTypeToNAICS(businessType);\n    const geoData = this.parseLocation(location);\n\n    const censusData = await this.fetchCountyBusinessPatterns({\n      naics: naicsCode,\n      state: geoData.state,\n      county: geoData.county,\n    });\n\n    return this.calculateDensityMetrics(censusData, geoData, location);\n  }\n\n  private async fetchCountyBusinessPatterns({\n    naics,\n    state,\n    county,\n  }: {\n    naics: string;\n    state: string;\n    county: string | null;\n  }) {\n    const cacheKey = `cbp_${naics}_${state}_${county ?? \"all\"}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheTTL) {\n      return cached.data as unknown[];\n    }\n\n    const url = `${this.baseURL}/2021/cbp?get=ESTAB,EMP,NAICS2017_LABEL&for=state:${state}&NAICS2017=${naics}&key=${this.apiKey}`;\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error(`Census API error: ${response.status}`);\n    }\n\n    const data = (await response.json()) as unknown[];\n    this.cache.set(cacheKey, { data, timestamp: Date.now() });\n    return data;\n  }\n\n  private calculateDensityMetrics(\n    censusData: unknown[],\n    geoData: {\n      state: string;\n      county: string | null;\n      raw_location: string;\n      fallback?: boolean;\n    },\n    rawLocation: string\n  ): CensusIntelligence {\n    if (!Array.isArray(censusData) || censusData.length < 2) {\n      return this.getDefaultOptimization(\n        rawLocation,\n        geoData.state,\n        geoData.county\n      );\n    }\n\n    const businessData = censusData.slice(1) as [\n      string,\n      string,\n      string,\n      string\n    ][];\n    let totalEstablishments = 0;\n    let totalEmployment = 0;\n\n    for (const row of businessData) {\n      const [estab, emp] = row;\n      totalEstablishments += parseInt(estab) || 0;\n      totalEmployment += parseInt(emp) || 0;\n    }\n\n    const densityScore = Math.min(totalEstablishments / 750, 100);\n    const confidenceMultiplier =\n      totalEstablishments > 750 ? 1.3 : totalEstablishments > 250 ? 1.15 : 1;\n    const expectedResults = Math.max(Math.round(totalEstablishments * 0.04), 5);\n\n    return {\n      total_establishments: totalEstablishments,\n      density_score: densityScore,\n      optimization: {\n        search_radius: this.calculateOptimalRadius(densityScore),\n        expected_results: Math.min(expectedResults, 40),\n        api_efficiency_score: Math.round(densityScore),\n        confidence_multiplier: confidenceMultiplier,\n      },\n      geographic_data: geoData,\n    };\n  }\n\n  private getDefaultOptimization(\n    rawLocation: string,\n    state: string,\n    county: string | null\n  ): CensusIntelligence {\n    return {\n      total_establishments: 250,\n      density_score: 25,\n      optimization: {\n        search_radius: 25,\n        expected_results: 12,\n        api_efficiency_score: 45,\n        confidence_multiplier: 1,\n      },\n      geographic_data: {\n        state,\n        county,\n        raw_location: rawLocation,\n        fallback: true,\n      },\n    };\n  }\n\n  private mapBusinessTypeToNAICS(businessType: string): string {\n    const naicsMapping: Record<string, string> = {\n      accounting: \"5412\",\n      cpa: \"5412\",\n      legal: \"5411\",\n      electrician: \"238210\",\n      contractor: \"23\",\n      restaurant: \"7225\",\n      cafe: \"722515\",\n      medical: \"621\",\n      dental: \"6212\",\n      retail: \"44\",\n      spa: \"8121\",\n      salon: \"8121\",\n      consulting: \"5416\",\n      marketing: \"5418\",\n      real: \"531\",\n      hvac: \"238220\",\n    };\n\n    const lower = businessType.toLowerCase();\n    for (const [key, code] of Object.entries(naicsMapping)) {\n      if (lower.includes(key)) return code;\n    }\n    return \"00\";\n  }\n\n  private parseLocation(location: string) {\n    const stateMatch = location.match(/\\b([A-Z]{2})\\b/);\n    const stateCode = stateMatch ? this.getStateFIPSCode(stateMatch[1]) : \"06\";\n    return {\n      state: stateCode,\n      county: null,\n      raw_location: location,\n    };\n  }\n\n  private getStateFIPSCode(stateAbbr: string): string {\n    const stateCodes: Record<string, string> = {\n      AL: \"01\",\n      AK: \"02\",\n      AZ: \"04\",\n      AR: \"05\",\n      CA: \"06\",\n      CO: \"08\",\n      CT: \"09\",\n      DE: \"10\",\n      FL: \"12\",\n      GA: \"13\",\n      HI: \"15\",\n      ID: \"16\",\n      IL: \"17\",\n      IN: \"18\",\n      IA: \"19\",\n      KS: \"20\",\n      KY: \"21\",\n      LA: \"22\",\n      ME: \"23\",\n      MD: \"24\",\n      MA: \"25\",\n      MI: \"26\",\n      MN: \"27\",\n      MS: \"28\",\n      MO: \"29\",\n      MT: \"30\",\n      NE: \"31\",\n      NV: \"32\",\n      NH: \"33\",\n      NJ: \"34\",\n      NM: \"35\",\n      NY: \"36\",\n      NC: \"37\",\n      ND: \"38\",\n      OH: \"39\",\n      OK: \"40\",\n      OR: \"41\",\n      PA: \"42\",\n      RI: \"44\",\n      SC: \"45\",\n      SD: \"46\",\n      TN: \"47\",\n      TX: \"48\",\n      UT: \"49\",\n      VT: \"50\",\n      VA: \"51\",\n      WA: \"53\",\n      WV: \"54\",\n      WI: \"55\",\n      WY: \"56\",\n    };\n    return stateCodes[stateAbbr.toUpperCase()] || \"06\";\n  }\n\n  private calculateOptimalRadius(densityScore: number): number {\n    if (densityScore > 60) return 5;\n    if (densityScore > 30) return 10;\n    if (densityScore > 10) return 20;\n    return 35;\n  }\n}\n\nasync function fetchCensusIntelligence(\n  businessType: string,\n  location: string\n): Promise<CensusIntelligence | null> {\n  const censusKey = Deno.env.get(\"CENSUS_API_KEY\");\n  if (!censusKey) return null;\n\n  try {\n    const client = new CensusAPIClient(censusKey);\n    return await client.getBusinessDensity(businessType, location);\n  } catch (error) {\n    console.warn(\"Census intelligence unavailable:\", error);\n    return null;\n  }\n}\n\n// --------------------\n// Discovery Providers\n// --------------------\n\nasync function searchGooglePlaces(\n  businessType: string,\n  location: string,\n  keywords: string[],\n  maxResults: number,\n  usageLogger?: UsageLogger,\n  usageContext?: UsageLogContext\n): Promise<DiscoveredBusiness[]> {\n  const apiKey = Deno.env.get(\"GOOGLE_PLACES_API_KEY\");\n  if (!apiKey) throw new Error(\"Google Places API key not configured\");\n\n  const keywordSuffix = keywords.length > 0 ? ` ${keywords.join(\" \")}` : \"\";\n  const query = `${businessType}${keywordSuffix} in ${location}`;\n  const searchUrl = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(\n    query\n  )}&key=${apiKey}`;\n\n  const requestParams = {\n    query,\n    businessType,\n    location,\n    keywordCount: keywords.length,\n    maxResults,\n  };\n\n  let textResponse: Response | null = null;\n  let data: Record<string, unknown> = {};\n  const searchStarted = performance.now();\n\n  try {\n    textResponse = await fetch(searchUrl);\n    data = await textResponse.json();\n  } catch (error) {\n    await usageLogger?.log({\n      sourceName: \"google_places\",\n      endpoint: \"textsearch\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: textResponse?.status ?? null,\n      responseTimeMs: Math.round(performance.now() - searchStarted),\n      success: false,\n      errorMessage: error instanceof Error ? error.message : String(error),\n    });\n    throw error;\n  }\n\n  const searchElapsed = Math.round(performance.now() - searchStarted);\n\n  if (data.status !== \"OK\") {\n    await usageLogger?.log({\n      sourceName: \"google_places\",\n      endpoint: \"textsearch\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: textResponse.status,\n      responseTimeMs: searchElapsed,\n      success: false,\n      errorMessage:\n        (data.error_message as string | undefined) || (data.status as string),\n      estimatedCost: GOOGLE_TEXT_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw new Error(`Google Places API failed: ${data.status}`);\n  }\n\n  const results = (data.results as BusinessData[]).slice(0, maxResults * 2);\n\n  await usageLogger?.log({\n    sourceName: \"google_places\",\n    endpoint: \"textsearch\",\n    httpMethod: \"GET\",\n    requestParams,\n    queryType: \"discovery\",\n    responseCode: textResponse.status,\n    responseTimeMs: searchElapsed,\n    resultsReturned: results.length,\n    usefulResults: results.length,\n    success: true,\n    estimatedCost: GOOGLE_TEXT_SEARCH_COST,\n    actualCost: GOOGLE_TEXT_SEARCH_COST,\n    ...usageContext,\n  });\n\n  const enriched: DiscoveredBusiness[] = [];\n\n  for (const business of results) {\n    if (!business.place_id) {\n      enriched.push({ ...business, source: \"google_places\" });\n      continue;\n    }\n\n    const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${business.place_id}&fields=formatted_phone_number,website&key=${apiKey}`;\n    const detailStart = performance.now();\n\n    let detailsResponse: Response | null = null;\n    let detailsData: {\n      result?: {\n        formatted_phone_number?: string;\n        website?: string;\n      };\n      [key: string]: unknown;\n    } = {};\n\n    try {\n      detailsResponse = await fetch(detailsUrl);\n      detailsData = await detailsResponse.json();\n    } catch (error) {\n      await usageLogger?.log({\n        sourceName: \"google_places\",\n        endpoint: \"details\",\n        httpMethod: \"GET\",\n        requestParams: {\n          placeId: business.place_id,\n        },\n        queryType: \"discovery\",\n        responseCode: detailsResponse?.status ?? null,\n        responseTimeMs: Math.round(performance.now() - detailStart),\n        success: false,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        estimatedCost: GOOGLE_DETAILS_COST,\n        actualCost: 0,\n      });\n      throw error;\n    }\n\n    const detailElapsed = Math.round(performance.now() - detailStart);\n\n    const dataEnriched = Boolean(detailsData.result);\n\n    enriched.push({\n      ...business,\n      formatted_phone_number:\n        detailsData.result?.formatted_phone_number ??\n        business.formatted_phone_number ??\n        \"\",\n      website: detailsData.result?.website ?? business.website ?? \"\",\n      source: dataEnriched ? \"google_place_details\" : \"google_places\",\n      data_enriched: dataEnriched,\n    });\n\n    await usageLogger?.log({\n      sourceName: \"google_places\",\n      endpoint: \"details\",\n      httpMethod: \"GET\",\n      requestParams: {\n        placeId: business.place_id,\n        hasWebsite: Boolean(detailsData.result?.website),\n      },\n      queryType: \"discovery\",\n      responseCode: detailsResponse.status,\n      responseTimeMs: detailElapsed,\n      resultsReturned: dataEnriched ? 1 : 0,\n      usefulResults: dataEnriched ? 1 : 0,\n      success: detailsResponse.ok && dataEnriched,\n      estimatedCost: GOOGLE_DETAILS_COST,\n      actualCost: detailsResponse.ok && dataEnriched ? GOOGLE_DETAILS_COST : 0,\n    });\n\n    // Basic rate limiting to stay under quota\n    await new Promise((resolve) => setTimeout(resolve, 80));\n  }\n\n  return enriched;\n}\n\nasync function searchFoursquare(\n  businessType: string,\n  location: string,\n  keywords: string[],\n  maxResults: number,\n  usageLogger?: UsageLogger,\n  usageContext?: UsageLogContext\n): Promise<DiscoveredBusiness[]> {\n  const apiKey = Deno.env.get(\"FOURSQUARE_API_KEY\");\n  if (!apiKey) {\n    return [];\n  }\n\n  const queryString =\n    [businessType, ...keywords].join(\" \").trim() || businessType;\n  const limit = Math.min(Math.max(maxResults, 5), 30);\n  const params = new URLSearchParams({\n    query: queryString,\n    near: location,\n    limit: limit.toString(),\n    fields: \"fsq_id,name,location,contact,website,categories,rating,stats\",\n  });\n\n  const requestParams = {\n    query: queryString,\n    location,\n    limit,\n    keywordCount: keywords.length,\n  };\n\n  let response: Response | null = null;\n  const startedAt = performance.now();\n\n  try {\n    response = await fetch(\n      `https://api.foursquare.com/v3/places/search?${params}`,\n      {\n        headers: {\n          Authorization: apiKey,\n          Accept: \"application/json\",\n        },\n      }\n    );\n  } catch (error) {\n    await usageLogger?.log({\n      sourceName: \"foursquare\",\n      endpoint: \"places.search\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: response?.status ?? null,\n      responseTimeMs: Math.round(performance.now() - startedAt),\n      success: false,\n      errorMessage: error instanceof Error ? error.message : String(error),\n      estimatedCost: FOURSQUARE_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw error;\n  }\n\n  const elapsed = Math.round(performance.now() - startedAt);\n\n  if (!response.ok) {\n    await usageLogger?.log({\n      sourceName: \"foursquare\",\n      endpoint: \"places.search\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: response.status,\n      responseTimeMs: elapsed,\n      success: false,\n      errorMessage: `HTTP ${response.status}`,\n      estimatedCost: FOURSQUARE_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw new Error(`Foursquare API error: ${response.status}`);\n  }\n\n  let payload: { results?: FoursquarePlace[] } = {};\n  try {\n    payload = await response.json();\n  } catch (error) {\n    await usageLogger?.log({\n      sourceName: \"foursquare\",\n      endpoint: \"places.search\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: response.status,\n      responseTimeMs: elapsed,\n      success: false,\n      errorMessage: error instanceof Error ? error.message : String(error),\n      estimatedCost: FOURSQUARE_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw error;\n  }\n\n  const results = Array.isArray(payload.results) ? payload.results : [];\n\n  await usageLogger?.log({\n    sourceName: \"foursquare\",\n    endpoint: \"places.search\",\n    httpMethod: \"GET\",\n    requestParams,\n    queryType: \"discovery\",\n    responseCode: response.status,\n    responseTimeMs: elapsed,\n    resultsReturned: results.length,\n    usefulResults: results.length,\n    success: true,\n    estimatedCost: FOURSQUARE_SEARCH_COST,\n    actualCost: FOURSQUARE_SEARCH_COST,\n    ...usageContext,\n  });\n\n  return results.map((place) => ({\n    source: \"foursquare\" as DataSource,\n    place_id: place.fsq_id,\n    name: place.name,\n    formatted_address: formatFoursquareAddress(place.location),\n    formatted_phone_number: place.contact?.phone ?? \"\",\n    website: place.website ?? \"\",\n    rating: place.rating ?? 0,\n    user_ratings_total: place.stats?.total_tips ?? 0,\n    foursquare_data: place as unknown as Record<string, unknown>,\n  }));\n}\n\nfunction formatFoursquareAddress(\n  location: {\n    address?: string;\n    locality?: string;\n    admin_district?: string;\n    postcode?: string;\n    country?: string;\n  } = {}\n): string {\n  const parts = [\n    location.address,\n    location.locality,\n    location.admin_district,\n    location.postcode,\n    location.country,\n  ]\n    .map((value) => value?.trim())\n    .filter(Boolean);\n  return parts.join(\", \");\n}\n\ntype BusinessFingerprintSource = {\n  name?: string | null;\n  businessName?: string | null;\n  business_name?: string | null;\n  formatted_address?: string | null;\n  address?: string | null;\n  formatted_phone_number?: string | null;\n  phone?: string | null;\n  website?: string | null;\n  place_id?: string | null;\n  source?: DataSource;\n};\n\nfunction normalizeString(value?: string | null): string {\n  return value ? value.toLowerCase().replace(/\\s+/g, \" \").trim() : \"\";\n}\n\nfunction normalizePhone(value?: string | null): string {\n  return value ? value.replace(/\\D+/g, \"\") : \"\";\n}\n\nfunction normalizeWebsite(value?: string | null): string {\n  if (!value) return \"\";\n  const normalized = value.toLowerCase().trim();\n  const withoutProtocol = normalized.replace(/^https?:\\/\\//, \"\");\n  const withoutWww = withoutProtocol.replace(/^www\\./, \"\");\n  return withoutWww.split(\"/\")[0];\n}\n\nfunction createBusinessFingerprint(\n  source: BusinessFingerprintSource\n): string {\n  const name = normalizeString(\n    source.business_name ?? source.businessName ?? source.name ?? \"\"\n  );\n  const address = normalizeString(\n    source.address ?? source.formatted_address ?? \"\"\n  );\n  const phone = normalizePhone(\n    source.phone ?? source.formatted_phone_number ?? \"\"\n  );\n  const website = normalizeWebsite(source.website ?? \"\");\n\n  if (name && address) {\n    return `${name}::${address}`;\n  }\n\n  if (name && phone) {\n    return `${name}::${phone}`;\n  }\n\n  if (website) {\n    return `domain::${website}`;\n  }\n\n  if (phone) {\n    return `phone::${phone}`;\n  }\n\n  if (name) {\n    return `name::${name}`;\n  }\n\n  return \"\";\n}\n\nfunction dedupeBusinesses(\n  businesses: DiscoveredBusiness[]\n): DiscoveredBusiness[] {\n  const map = new Map<string, DiscoveredBusiness>();\n  let fallbackIndex = 0;\n\n  for (const business of businesses) {\n    const fingerprint = createBusinessFingerprint(business);\n    const key = fingerprint\n      ? fingerprint\n      : business.place_id\n      ? `place::${business.place_id}`\n      : `fallback::${fallbackIndex++}`;\n\n    if (!map.has(key)) {\n      map.set(key, business);\n      continue;\n    }\n\n    const existing = map.get(key)!;\n    const existingHasWebsite = Boolean(existing.website);\n    const candidateHasWebsite = Boolean(business.website);\n    const existingHasPhone = Boolean(\n      existing.formatted_phone_number || existing.phone\n    );\n    const candidateHasPhone = Boolean(\n      business.formatted_phone_number || business.phone\n    );\n\n    const candidateIsDetailsUpgrade =\n      existing.source === \"google_places\" &&\n      business.source === \"google_place_details\";\n\n    const candidateHasMoreData =\n      candidateHasWebsite && !existingHasWebsite\n        ? true\n        : candidateHasPhone && !existingHasPhone\n        ? true\n        : false;\n\n    if (candidateIsDetailsUpgrade || candidateHasMoreData) {\n      map.set(key, business);\n    }\n  }\n  return Array.from(map.values());\n}\n\n// --------------------\n// Quality Scorer\n// --------------------\n\nclass QualityScorer {\n  private maxCostPerBusiness: number;\n  private tierName: string;\n  private censusMultiplier: number;\n\n  constructor(options: {\n    maxCostPerBusiness: number;\n    tierName: string;\n    censusMultiplier?: number;\n  }) {\n    this.maxCostPerBusiness = options.maxCostPerBusiness;\n    this.tierName = options.tierName;\n    this.censusMultiplier = options.censusMultiplier ?? 1;\n  }\n\n  scoreBusiness(business: DiscoveredBusiness): ScoredLead {\n    const businessName = business.name || business.businessName || \"\";\n    const address = business.formatted_address || business.address || \"\";\n    const phone = business.formatted_phone_number || business.phone || \"\";\n    const website = business.website || \"\";\n\n    const scores = {\n      businessName: businessName ? Math.min(100, businessName.length * 3) : 0,\n      address: address ? 100 : 0,\n      phone: phone ? 85 : 0,\n      website: website ? 80 : 0,\n      rating: business.rating ? Math.min(20, business.rating * 4) : 0,\n    };\n\n    let totalScore =\n      Object.values(scores).reduce((sum, score) => sum + score, 0) /\n      Object.values(scores).length;\n\n    if (business.source === \"foursquare\") {\n      totalScore += 8;\n    } else if (business.source === \"google_place_details\") {\n      totalScore += 5;\n    }\n\n    totalScore = Math.min(100, Math.round(totalScore * this.censusMultiplier));\n\n    const initialSources = new Set<string>();\n    initialSources.add(business.source);\n    if (business.data_enriched) {\n      initialSources.add(\"google_places_details_api\");\n    }\n\n    return {\n      businessName,\n      address,\n      phone,\n      website,\n      email: \"\",\n      optimizedScore: totalScore,\n      validationCost: 0.02,\n      dataSources: Array.from(initialSources),\n      enhancementData: {\n        verificationSources: Array.from(initialSources),\n        processingMetadata: {\n          totalCost: 0.02,\n          validationCost: 0.02,\n          enrichmentCost: 0,\n          totalConfidenceBoost: 0,\n          processingStrategy: \"basic\",\n          servicesUsed: Array.from(initialSources),\n          servicesSkipped: [],\n          enrichmentTier: this.tierName,\n          emailStatus: \"not_found\",\n        },\n      },\n    };\n  }\n}\n\n// --------------------\n// Enrichment Pipeline\n// --------------------\n\nasync function enrichLead(\n  lead: ScoredLead,\n  config: JobConfig\n): Promise<{ lead: ScoredLead; cost: number; enrichmentCost: number }> {\n  const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n  const serviceKey = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\");\n  if (!supabaseUrl || !serviceKey) {\n    return { lead, cost: lead.validationCost, enrichmentCost: 0 };\n  }\n\n  const url = `${supabaseUrl}/functions/v1/enrichment-orchestrator`;\n  const domain = lead.website\n    ? lead.website.replace(/^https?:\\/\\//, \"\").replace(/\\/.*$/, \"\")\n    : undefined;\n\n  const maxCostPerBusiness = Math.max(\n    config.tier.maxCostPerLead,\n    config.budgetLimit / Math.max(config.maxResults, 1)\n  );\n\n  const body = {\n    businessName: lead.businessName,\n    domain,\n    address: lead.address,\n    phone: lead.phone,\n    website: lead.website,\n    discoverEmails: true,\n    verifyEmails: config.tier.includes.verifyEmails,\n    includePersonEnrichment: config.tier.includes.personEnrichment,\n    apolloEnrichment:\n      config.tier.includes.apolloEnrichment || config.options.apolloDiscovery,\n    includeBusinessLicense: true,\n    includeCompanyEnrichment: true,\n    maxCostPerBusiness,\n    minConfidenceScore: config.minConfidenceScore,\n    tier: config.tier.orchestratorTier,\n    campaignId: config.campaignId,\n    jobId: config.jobId,\n    sessionUserId: config.sessionUserId,\n    userId: config.userId,\n    tierKey: config.tier.key,\n  };\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${serviceKey}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n\n  if (!response.ok) {\n    return { lead, cost: lead.validationCost, enrichmentCost: 0 };\n  }\n\n  const enrichmentData = await response.json();\n  type EnrichedEmail = {\n    email: string;\n    verified?: boolean;\n    [key: string]: unknown;\n  };\n\n  const emails = (enrichmentData.enrichedData?.emails ?? []) as EnrichedEmail[];\n\n  const normalizeDomain = (value?: string) =>\n    value ? value.toLowerCase().replace(/^www\\./, \"\") : \"\";\n\n  const normalizedDomain = normalizeDomain(domain);\n\n  const emailMatchesCorporateDomain = (emailAddress?: string) => {\n    if (!emailAddress || !normalizedDomain) return false;\n    const parts = emailAddress.split(\"@\");\n    if (parts.length !== 2) return false;\n    const emailDomain = normalizeDomain(parts[1]);\n    if (!emailDomain) return false;\n    return (\n      emailDomain === normalizedDomain ||\n      emailDomain.endsWith(`.${normalizedDomain}`)\n    );\n  };\n\n  const corporateEmails = normalizedDomain\n    ? emails.filter((entry: EnrichedEmail) =>\n        emailMatchesCorporateDomain(entry.email)\n      )\n    : emails;\n\n  const verifiedCorporate = corporateEmails.find(\n    (entry: EnrichedEmail) => entry.verified\n  );\n\n  let verifiedEmailEntry = verifiedCorporate;\n  if (!verifiedEmailEntry && !normalizedDomain) {\n    verifiedEmailEntry = emails.find((entry: EnrichedEmail) => entry.verified);\n  }\n\n  const unverifiedCorporate = corporateEmails.find(\n    (entry: EnrichedEmail) => entry.email && !entry.verified\n  );\n\n  const fallbackCandidate =\n    unverifiedCorporate ||\n    corporateEmails[0] ||\n    emails.find((entry: EnrichedEmail) => entry.email && !entry.verified) ||\n    emails[0];\n\n  let emailStatus: \"verified\" | \"unconfirmed\" | \"not_found\" = \"not_found\";\n  let verifiedEmailValue = \"\";\n  let unverifiedEmailValue = \"\";\n\n  if (verifiedEmailEntry?.email) {\n    emailStatus = \"verified\";\n    verifiedEmailValue = verifiedEmailEntry.email;\n  } else if (fallbackCandidate?.email) {\n    emailStatus = \"unconfirmed\";\n    unverifiedEmailValue = fallbackCandidate.email;\n  }\n\n  const servicesUsed = new Set<string>(\n    lead.enhancementData.verificationSources\n  );\n  (enrichmentData.processingMetadata?.servicesUsed ?? []).forEach(\n    (service: string) => servicesUsed.add(service)\n  );\n\n  const enrichmentCost = Number(enrichmentData.totalCost ?? 0);\n  const totalCost = lead.validationCost + enrichmentCost;\n\n  const updatedLead: ScoredLead = {\n    ...lead,\n    email: verifiedEmailValue || \"\",\n    enhancementData: {\n      ...lead.enhancementData,\n      verificationSources: Array.from(servicesUsed),\n      emails,\n      processingMetadata: {\n        ...lead.enhancementData.processingMetadata,\n        totalCost,\n        validationCost: lead.validationCost,\n        enrichmentCost,\n        servicesUsed: Array.from(servicesUsed),\n        servicesSkipped:\n          enrichmentData.processingMetadata?.servicesSkipped ?? [],\n        enrichmentTier: config.tier.name,\n        enrichmentCostBreakdown: enrichmentData.costBreakdown ?? undefined,\n        emailStatus,\n        verifiedEmail: verifiedEmailValue || undefined,\n        unverifiedEmail: unverifiedEmailValue || undefined,\n      },\n    },\n  };\n\n  return {\n    lead: updatedLead,\n    cost: totalCost,\n    enrichmentCost,\n  };\n}\n\n// --------------------\n// Discovery Workflow\n// --------------------\n\nasync function discoverBusinesses(\n  config: JobConfig,\n  census: CensusIntelligence | null,\n  usageLogger?: UsageLogger,\n  usageContext?: UsageLogContext\n): Promise<DiscoveredBusiness[]> {\n  const googleResults = await searchGooglePlaces(\n    config.businessType,\n    config.location,\n    config.keywords,\n    config.maxResults,\n    usageLogger,\n    {\n      ...usageContext,\n      businessQuery: config.businessType,\n      locationQuery: config.location,\n      tierKey: config.tier.key,\n    }\n  );\n\n  const results: DiscoveredBusiness[] = [...googleResults];\n\n  const shouldQueryFoursquare =\n    googleResults.length < config.maxResults * 1.2 || config.expandGeography;\n  if (shouldQueryFoursquare) {\n    const foursquareResults = await searchFoursquare(\n      config.businessType,\n      config.location,\n      config.keywords,\n      Math.max(\n        config.maxResults - googleResults.length,\n        Math.ceil(config.maxResults / 2)\n      ),\n      usageLogger,\n      {\n        ...usageContext,\n        businessQuery: config.businessType,\n        locationQuery: config.location,\n        tierKey: config.tier.key,\n      }\n    );\n    results.push(...foursquareResults);\n  }\n\n  const deduped = dedupeBusinesses(results);\n\n  if (\n    census &&\n    census.optimization.expected_results > deduped.length &&\n    config.expandGeography\n  ) {\n    const expandedResults = await searchFoursquare(\n      config.businessType,\n      census.geographic_data.raw_location,\n      config.keywords,\n      Math.min(census.optimization.expected_results, config.maxResults * 2),\n      usageLogger,\n      {\n        ...usageContext,\n        businessQuery: config.businessType,\n        locationQuery: census.geographic_data.raw_location,\n        tierKey: config.tier.key,\n      }\n    );\n    deduped.push(...expandedResults);\n  }\n\n  return dedupeBusinesses(deduped).slice(0, config.maxResults * 2);\n}\n\nasync function processDiscoveryJob(\n  jobId: string,\n  config: JobConfig,\n  supabaseUrl: string,\n  supabaseServiceKey: string\n) {\n  console.log(`🚀 Background job ${jobId} started`);\n\n  const supabase = createClient(supabaseUrl, supabaseServiceKey);\n  const usageLogger = createUsageLogger(supabaseUrl, supabaseServiceKey, {\n    campaignId: config.campaignId,\n    sessionId: config.sessionUserId ?? config.userId ?? null,\n    jobId,\n    tierKey: config.tier.key,\n    businessQuery: config.businessType,\n    locationQuery: config.location,\n  });\n  config.jobId = jobId;\n\n  const historicalFingerprints = new Set<string>();\n\n  try {\n    const { data: priorCampaigns, error: priorCampaignsError } = await supabase\n      .from(\"campaigns\")\n      .select(\"id\")\n      .eq(\"user_id\", config.userId)\n      .eq(\"business_type\", config.businessType)\n      .eq(\"location\", config.location)\n      .neq(\"id\", config.campaignId)\n      .limit(200);\n\n    if (priorCampaignsError) {\n      console.warn(\n        \"Unable to load historical campaigns for duplicate suppression:\",\n        priorCampaignsError.message\n      );\n    } else {\n      const campaignIds = (priorCampaigns ?? [])\n        .map((entry) => entry.id)\n        .filter((value): value is string => Boolean(value));\n\n      if (campaignIds.length > 0) {\n        const { data: priorLeads, error: priorLeadsError } = await supabase\n          .from(\"leads\")\n          .select(\"business_name,address,phone,website\")\n          .in(\"campaign_id\", campaignIds)\n          .limit(1000);\n\n        if (priorLeadsError) {\n          console.warn(\n            \"Unable to load previously delivered leads for duplicate suppression:\",\n            priorLeadsError.message\n          );\n        } else {\n          const priorLeadRows = (priorLeads ?? []) as Array<{\n            business_name?: string | null;\n            address?: string | null;\n            phone?: string | null;\n            website?: string | null;\n          }>;\n\n          for (const lead of priorLeadRows) {\n            const fingerprint = createBusinessFingerprint(lead);\n            if (fingerprint) {\n              historicalFingerprints.add(fingerprint);\n            }\n          }\n        }\n      }\n    }\n  } catch (historyError) {\n    console.warn(\"Historical lead lookup failed:\", historyError);\n  }\n\n  try {\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        status: \"processing\",\n        started_at: new Date().toISOString(),\n        current_stage: \"discovering_businesses\",\n        progress: 10,\n      })\n      .eq(\"id\", jobId);\n\n    const censusIntelligence = await fetchCensusIntelligence(\n      config.businessType,\n      config.location\n    );\n\n    let historicalFilteredCount = 0;\n\n    const applyHistoricalFilter = (\n      businesses: DiscoveredBusiness[]\n    ): DiscoveredBusiness[] => {\n      if (historicalFingerprints.size === 0) {\n        return businesses;\n      }\n\n      const filteredResults: DiscoveredBusiness[] = [];\n      for (const business of businesses) {\n        const fingerprint = createBusinessFingerprint(business);\n        if (fingerprint && historicalFingerprints.has(fingerprint)) {\n          historicalFilteredCount += 1;\n          continue;\n        }\n        filteredResults.push(business);\n      }\n      return filteredResults;\n    };\n\n    let discoveredBusinesses: DiscoveredBusiness[] = await discoverBusinesses(\n      config,\n      censusIntelligence,\n      usageLogger,\n      {\n        campaignId: config.campaignId,\n        sessionId: config.sessionUserId ?? config.userId ?? null,\n        jobId,\n        tierKey: config.tier.key,\n        businessQuery: config.businessType,\n        locationQuery: config.location,\n      }\n    );\n    let totalRawDiscovered = discoveredBusinesses.length;\n\n    discoveredBusinesses = applyHistoricalFilter(discoveredBusinesses);\n\n    if (\n      discoveredBusinesses.length === 0 &&\n      totalRawDiscovered > 0 &&\n      !config.expandGeography\n    ) {\n      console.log(\n        `ℹ️ No novel businesses found for ${config.businessType} in ${config.location}. Expanding geography to locate fresh results.`\n      );\n\n      const expandedConfig: JobConfig = {\n        ...config,\n        expandGeography: true,\n      };\n\n      const expandedResults = await discoverBusinesses(\n        expandedConfig,\n        censusIntelligence,\n        usageLogger,\n        {\n          campaignId: config.campaignId,\n          sessionId: config.sessionUserId ?? config.userId ?? null,\n          jobId,\n          tierKey: config.tier.key,\n          businessQuery: expandedConfig.businessType,\n          locationQuery: expandedConfig.location,\n        }\n      );\n\n      totalRawDiscovered += expandedResults.length;\n      discoveredBusinesses = applyHistoricalFilter(expandedResults);\n    }\n\n    if (historicalFilteredCount > 0) {\n      console.log(\n        `ℹ️ Suppressed ${historicalFilteredCount} previously delivered businesses for user ${config.userId}`\n      );\n    }\n\n    const sourcesUsed = Array.from(\n      new Set(discoveredBusinesses.map((business) => business.source))\n    );\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        current_stage: \"scoring_businesses\",\n        progress: 30,\n        metrics: {\n          businesses_found: discoveredBusinesses.length,\n          raw_candidates: totalRawDiscovered,\n          previously_delivered_filtered: historicalFilteredCount,\n          sources_used: sourcesUsed,\n          census_density_score: censusIntelligence?.density_score ?? null,\n        },\n      })\n      .eq(\"id\", jobId);\n\n    const scorer = new QualityScorer({\n      maxCostPerBusiness: config.budgetLimit / Math.max(config.maxResults, 1),\n      tierName: config.tier.name,\n      censusMultiplier: censusIntelligence?.optimization.confidence_multiplier,\n    });\n\n    const scoredBusinesses = discoveredBusinesses.map((business) =>\n      scorer.scoreBusiness(business)\n    );\n\n    const qualifiedLeads = scoredBusinesses\n      .filter((lead) => lead.optimizedScore >= config.minConfidenceScore)\n      .slice(0, config.maxResults);\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        current_stage: \"enriching_contacts\",\n        progress: 50,\n        metrics: {\n          businesses_found: discoveredBusinesses.length,\n          qualified_leads: qualifiedLeads.length,\n          raw_candidates: totalRawDiscovered,\n          previously_delivered_filtered: historicalFilteredCount,\n          sources_used: sourcesUsed,\n          census_density_score: censusIntelligence?.density_score ?? null,\n        },\n      })\n      .eq(\"id\", jobId);\n\n    const enrichedLeads: ScoredLead[] = [];\n    let totalCost = 0;\n    let totalValidationCost = 0;\n    let totalEnrichmentCost = 0;\n\n    for (let index = 0; index < qualifiedLeads.length; index += 1) {\n      const lead = qualifiedLeads[index];\n      try {\n        const enrichmentResult = await enrichLead(lead, config);\n        enrichedLeads.push(enrichmentResult.lead);\n        totalCost += enrichmentResult.cost;\n        totalValidationCost +=\n          enrichmentResult.lead.enhancementData.processingMetadata\n            .validationCost;\n        totalEnrichmentCost += enrichmentResult.enrichmentCost;\n      } catch (error) {\n        console.error(`❌ Enrichment error for ${lead.businessName}:`, error);\n        enrichedLeads.push(lead);\n        totalCost += lead.validationCost;\n        totalValidationCost += lead.validationCost;\n      }\n\n      const progress =\n        50 +\n        Math.floor(((index + 1) / Math.max(qualifiedLeads.length, 1)) * 35);\n      await supabase\n        .from(\"discovery_jobs\")\n        .update({\n          progress,\n          metrics: {\n            businesses_found: discoveredBusinesses.length,\n            qualified_leads: qualifiedLeads.length,\n            leads_enriched: index + 1,\n            total_cost: Number(totalCost.toFixed(3)),\n            validation_cost_total: Number(totalValidationCost.toFixed(3)),\n            enrichment_cost_total: Number(totalEnrichmentCost.toFixed(3)),\n            raw_candidates: totalRawDiscovered,\n            previously_delivered_filtered: historicalFilteredCount,\n            sources_used: sourcesUsed,\n            census_density_score: censusIntelligence?.density_score ?? null,\n          },\n        })\n        .eq(\"id\", jobId);\n    }\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        current_stage: \"storing_results\",\n        progress: 90,\n      })\n      .eq(\"id\", jobId);\n\n    const campaignInsert = await supabase\n      .from(\"campaigns\")\n      .insert({\n        id: config.campaignId,\n        business_type: config.businessType,\n        location: config.location,\n        target_count: config.maxResults,\n        results_count: enrichedLeads.length,\n        total_cost: Number(totalCost.toFixed(3)),\n        status: \"completed\",\n        user_id: config.userId,\n        session_user_id: config.sessionUserId,\n        processing_time_ms: null,\n      })\n      .select(\"id\")\n      .single();\n\n    if (campaignInsert.error) {\n      console.warn(\"Campaign insert warning:\", campaignInsert.error.message);\n    }\n\n    const leadsPayload = enrichedLeads.map((lead) => ({\n      campaign_id: config.campaignId,\n      business_name: lead.businessName,\n      address: lead.address,\n      phone: lead.phone,\n      website: lead.website,\n      email: lead.email,\n      confidence_score: lead.optimizedScore,\n      enrichment_data: {\n        verificationSources: lead.enhancementData.verificationSources,\n        emails: lead.enhancementData.emails,\n        processingMetadata: lead.enhancementData.processingMetadata,\n        dataSources: lead.dataSources,\n      },\n      validation_cost: lead.enhancementData.processingMetadata.validationCost,\n      user_id: config.userId,\n      session_user_id: config.sessionUserId,\n    }));\n\n    if (leadsPayload.length > 0) {\n      const leadInsert = await supabase.from(\"leads\").insert(leadsPayload);\n      if (leadInsert.error) {\n        console.error(\"Lead insert error:\", leadInsert.error.message);\n      }\n    }\n\n    const averageConfidence = enrichedLeads.length\n      ? enrichedLeads.reduce((sum, lead) => sum + lead.optimizedScore, 0) /\n        enrichedLeads.length\n      : 0;\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        status: \"completed\",\n        progress: 100,\n        completed_at: new Date().toISOString(),\n        results: enrichedLeads,\n        metrics: {\n          total_found: enrichedLeads.length,\n          qualified_leads: qualifiedLeads.length,\n          total_cost: Number(totalCost.toFixed(3)),\n          validation_cost_total: Number(totalValidationCost.toFixed(3)),\n          enrichment_cost_total: Number(totalEnrichmentCost.toFixed(3)),\n          avg_confidence: Number(averageConfidence.toFixed(1)),\n          tier_key: config.tier.key,\n          tier_name: config.tier.name,\n          tier_price: config.tier.pricePerLead,\n          raw_candidates: totalRawDiscovered,\n          previously_delivered_filtered: historicalFilteredCount,\n          sources_used: sourcesUsed,\n          census_density_score: censusIntelligence?.density_score ?? null,\n        },\n      })\n      .eq(\"id\", jobId);\n\n    console.log(\n      `✅ Background job ${jobId} completed: ${\n        enrichedLeads.length\n      } leads, $${totalCost.toFixed(3)}`\n    );\n  } catch (error) {\n    console.error(`❌ Background job ${jobId} failed:`, error);\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        status: \"failed\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        completed_at: new Date().toISOString(),\n      })\n      .eq(\"id\", jobId);\n  }\n}\n\n// --------------------\n// MAIN HANDLER\n// --------------------\n\nserve(async (req) => {\n  const corsResponse = handleCORS(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n    const supabaseAnonKey = Deno.env.get(\"SUPABASE_ANON_KEY\");\n    const supabaseServiceKey = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\");\n\n    if (!supabaseUrl || !supabaseAnonKey || !supabaseServiceKey) {\n      console.error(\"Missing Supabase environment variables\", {\n        hasUrl: Boolean(supabaseUrl),\n        hasAnonKey: Boolean(supabaseAnonKey),\n        hasServiceKey: Boolean(supabaseServiceKey),\n      });\n\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error:\n            \"Edge function misconfigured: missing Supabase credentials. Verify SUPABASE_URL, SUPABASE_ANON_KEY, and SUPABASE_SERVICE_ROLE_KEY secrets.\",\n        }),\n        {\n          status: 500,\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    const authHeader = req.headers.get(\"Authorization\");\n    const globalHeaders: Record<string, string> = authHeader\n      ? { Authorization: authHeader }\n      : {};\n    const supabaseClient = createClient(supabaseUrl, supabaseAnonKey, {\n      global: { headers: globalHeaders },\n    });\n\n    const {\n      data: { user },\n    } = await supabaseClient.auth.getUser();\n\n    if (!user?.id) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Authentication required to start discovery campaigns.\",\n        }),\n        {\n          status: 401,\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    const requestData: BusinessDiscoveryRequest = await req.json();\n    const {\n      businessType,\n      location,\n      keywords,\n      searchRadius,\n      expandGeography = false,\n      maxResults = 5,\n      budgetLimit,\n      minConfidenceScore = 50,\n      sessionUserId,\n      tierKey,\n      tierName,\n      options = {},\n    } = requestData;\n\n    if (sessionUserId && sessionUserId !== user.id) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Session mismatch detected. Please re-authenticate.\",\n        }),\n        {\n          status: 403,\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    const tierSettings = getTierSettings(tierKey, tierName);\n    const enforcedBudget =\n      budgetLimit ?? maxResults * tierSettings.pricePerLead;\n    const keywordList = parseKeywords(keywords);\n\n    const jobId = `job_${Date.now()}_${Math.random()\n      .toString(36)\n      .slice(2, 11)}`;\n\n    // Generate structured campaign ID using database function\n    let campaignId: string;\n    try {\n      const { data: generatedName, error: nameError } =\n        await supabaseClient.rpc(\"generate_campaign_name\", {\n          business_type: businessType,\n          location: location,\n          user_id: user?.id || null,\n        });\n\n      if (nameError) {\n        console.warn(\n          \"Campaign name generation failed, using fallback:\",\n          nameError\n        );\n        campaignId = `campaign_${Date.now()}_${Math.random()\n          .toString(36)\n          .slice(2, 11)}`;\n      } else {\n        campaignId =\n          generatedName ||\n          `campaign_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`;\n      }\n    } catch (error) {\n      console.warn(\"Campaign name generation error, using fallback:\", error);\n      campaignId = `campaign_${Date.now()}_${Math.random()\n        .toString(36)\n        .slice(2, 11)}`;\n    }\n\n    const jobConfig: JobConfig = {\n      campaignId,\n      businessType,\n      location,\n      keywords: keywordList,\n      searchRadius,\n      expandGeography,\n      maxResults,\n      budgetLimit: enforcedBudget,\n      minConfidenceScore,\n      userId: user.id,\n      sessionUserId: user.id,\n      tier: tierSettings,\n      options: {\n        ...DEFAULT_OPTIONS,\n        ...options,\n      },\n    };\n\n    const { error: jobError } = await supabaseClient\n      .from(\"discovery_jobs\")\n      .insert({\n        id: jobId,\n        campaign_id: campaignId,\n        user_id: user.id,\n        session_user_id: user.id,\n        status: \"pending\",\n        config: {\n          ...jobConfig,\n          tier: {\n            key: tierSettings.key,\n            name: tierSettings.name,\n            pricePerLead: tierSettings.pricePerLead,\n          },\n        },\n      });\n\n    if (jobError) {\n      throw new Error(`Failed to create job: ${jobError.message}`);\n    }\n\n    EdgeRuntime.waitUntil(\n      processDiscoveryJob(jobId, jobConfig, supabaseUrl, supabaseServiceKey)\n    );\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        message: \"Discovery job created and processing in background\",\n        jobId,\n        campaignId,\n        status: \"processing\",\n        estimatedTime: \"1-2 minutes\",\n        realtimeChannel: `discovery_jobs:id=eq.${jobId}`,\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  } catch (error) {\n    console.error(\"❌ Error:\", error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n});\n"}}},
{"type":"measure","name":"lsp.did_open","count":15,"duration":16.657},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":11,"duration":0.254},
TS server started.
{"type":"mark","name":"tsc.request.$getDiagnostics"},
Server ready.
{"type":"mark","name":"tsc.host.$getDiagnostics","count":1,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",12]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":1,"duration":0.464},
{"type":"mark","name":"tsc.op.op_load","count":1,"args":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"},
{"type":"measure","name":"tsc.op.op_load","count":1,"duration":0.057},
{"type":"mark","name":"tsc.op.op_load","count":2,"args":"file:///workspaces/ProspectPro/PRODUCTION_MCP_SERVER_INITIALIZED.md"},
{"type":"measure","name":"tsc.op.op_load","count":2,"duration":0.064},
{"type":"mark","name":"tsc.op.op_load","count":3,"args":"file:///workspaces/ProspectPro/index.html"},
{"type":"measure","name":"tsc.op.op_load","count":3,"duration":0.054},
{"type":"mark","name":"tsc.op.op_load","count":4,"args":"file:///workspaces/ProspectPro/mcp-servers/PRODUCTION_MCP_INITIALIZED.md"},
{"type":"measure","name":"tsc.op.op_load","count":4,"duration":0.069},
{"type":"mark","name":"tsc.op.op_load","count":5,"args":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},
{"type":"measure","name":"tsc.op.op_load","count":5,"duration":0.135},
{"type":"mark","name":"tsc.op.op_resolve","count":1,"args":{"base":"file:///workspaces/ProspectPro/mcp-servers/production-server.js","specifiers":[[true,"@modelcontextprotocol/sdk/server/index.js"],[true,"@modelcontextprotocol/sdk/server/stdio.js"],[true,"@modelcontextprotocol/sdk/types.js"],[true,"@supabase/supabase-js"],[true,"https"],[true,"child_process"],[true,"fs"],[true,"path"],[true,"../modules/api-clients/google-places-client"],[true,"../modules/api-clients/foursquare-places-client"],[true,"../modules/api-clients/hunter-io-client"],[true,"../modules/api-clients/neverbounce-client"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1,"duration":0.207},
{"type":"mark","name":"tsc.op.op_load","count":6,"args":"file:///workspaces/ProspectPro/src/components/Layout.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":6,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":2,"args":{"base":"file:///workspaces/ProspectPro/src/components/Layout.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../contexts/AuthContext"],[false,"./AuthComponent"],[false,"./ThemeToggle"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":2,"duration":0.078},
{"type":"mark","name":"tsc.op.op_load","count":7,"args":"file:///workspaces/ProspectPro/src/contexts/AuthContext.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":7,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":3,"args":{"base":"file:///workspaces/ProspectPro/src/contexts/AuthContext.tsx","specifiers":[[false,"@supabase/supabase-js"],[false,"react"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":3,"duration":0.051},
{"type":"mark","name":"tsc.op.op_load","count":8,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"tsc.op.op_load","count":8,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":4,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","specifiers":[[false,"@tanstack/react-query"],[false,"react"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../types"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":4,"duration":0.128},
{"type":"mark","name":"tsc.op.op_load","count":9,"args":"file:///workspaces/ProspectPro/src/hooks/useLeadEnrichment.ts"},
{"type":"measure","name":"tsc.op.op_load","count":9,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":5,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useLeadEnrichment.ts","specifiers":[[false,"@tanstack/react-query"],[false,"react"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":5,"duration":0.075},
{"type":"mark","name":"tsc.op.op_load","count":10,"args":"file:///workspaces/ProspectPro/src/lib/supabase.ts"},
{"type":"measure","name":"tsc.op.op_load","count":10,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":6,"args":{"base":"file:///workspaces/ProspectPro/src/lib/supabase.ts","specifiers":[[false,"@supabase/supabase-js"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":6,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":11,"args":"file:///workspaces/ProspectPro/src/pages/AccountPage.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":11,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":7,"args":{"base":"file:///workspaces/ProspectPro/src/pages/AccountPage.tsx","specifiers":[[false,"react"],[false,"../components/ApiUsageTable"],[false,"../contexts/AuthContext"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":7,"duration":0.076},
{"type":"mark","name":"tsc.op.op_load","count":12,"args":"file:///workspaces/ProspectPro/src/pages/BusinessDiscovery.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":12,"duration":0.072},
{"type":"mark","name":"tsc.op.op_resolve","count":8,"args":{"base":"file:///workspaces/ProspectPro/src/pages/BusinessDiscovery.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/GeographicSelector"],[false,"../components/MultiSelectBusinessTypes"],[false,"../components/ProgressDisplay"],[false,"../components/TierSelector"],[false,"../constants/businessTaxonomy"],[false,"../contexts/AuthContext"],[false,"../hooks/useBusinessDiscovery"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/exportLeadsToCsv"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":8,"duration":0.166},
{"type":"mark","name":"tsc.op.op_load","count":13,"args":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":13,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":9,"args":{"base":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/ProgressDisplay"],[false,"../contexts/AuthContext"],[false,"../hooks/useJobProgress"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":9,"duration":0.153},
{"type":"mark","name":"tsc.op.op_load","count":14,"args":"file:///workspaces/ProspectPro/src/pages/Dashboard.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":14,"duration":0.064},
{"type":"mark","name":"tsc.op.op_resolve","count":10,"args":{"base":"file:///workspaces/ProspectPro/src/pages/Dashboard.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../stores/campaignStore"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":10,"duration":0.058},
{"type":"mark","name":"tsc.op.op_load","count":15,"args":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts"},
{"type":"measure","name":"tsc.op.op_load","count":15,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":11,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":11,"duration":35.873},
{"type":"mark","name":"tsc.op.op_load","count":16,"args":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":16,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":12,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":12,"duration":147.993},
{"type":"mark","name":"tsc.op.op_load","count":17,"args":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":17,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":13,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":13,"duration":14.658},
{"type":"mark","name":"tsc.op.op_load","count":18,"args":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":18,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":14,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":14,"duration":8.74},
{"type":"mark","name":"tsc.op.op_load","count":19,"args":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":19,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":15,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":15,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":20,"args":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":20,"duration":0.023},
{"type":"mark","name":"tsc.op.op_load","count":21,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":21,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":16,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":16,"duration":92.987},
{"type":"mark","name":"tsc.op.op_load","count":22,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":22,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":17,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":17,"duration":0.06},
{"type":"mark","name":"tsc.op.op_load","count":23,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":23,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":18,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":18,"duration":0.045},
{"type":"mark","name":"tsc.op.op_load","count":24,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":24,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":19,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":19,"duration":46.509},
{"type":"mark","name":"tsc.op.op_load","count":25,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":25,"duration":0.249},
{"type":"mark","name":"tsc.op.op_resolve","count":20,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":20,"duration":0.064},
{"type":"mark","name":"tsc.op.op_load","count":26,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":26,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":21,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":21,"duration":43.853},
{"type":"mark","name":"tsc.op.op_load","count":27,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":27,"duration":0.058},
{"type":"mark","name":"tsc.op.op_resolve","count":22,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":22,"duration":0.048},
{"type":"mark","name":"tsc.op.op_load","count":28,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestError.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":28,"duration":0.023},
{"type":"mark","name":"tsc.op.op_load","count":29,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":29,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":23,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":23,"duration":0.039},
{"type":"mark","name":"tsc.op.op_load","count":30,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":30,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":24,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":24,"duration":88.623},
{"type":"mark","name":"tsc.op.op_load","count":31,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":31,"duration":0.085},
{"type":"mark","name":"tsc.op.op_resolve","count":25,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":25,"duration":0.079},
{"type":"mark","name":"tsc.op.op_load","count":32,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":32,"duration":0.065},
{"type":"mark","name":"tsc.op.op_resolve","count":26,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":26,"duration":0.044},
{"type":"mark","name":"tsc.op.op_load","count":33,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":33,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":27,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":27,"duration":185.172},
{"type":"mark","name":"tsc.op.op_load","count":34,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":34,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":28,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":28,"duration":22.983},
{"type":"mark","name":"tsc.op.op_load","count":35,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/websocket-factory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":35,"duration":0.052},
{"type":"mark","name":"tsc.op.op_load","count":36,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/constants.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":36,"duration":0.034},
{"type":"mark","name":"tsc.op.op_load","count":37,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/serializer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":37,"duration":0.025},
{"type":"mark","name":"tsc.op.op_load","count":38,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/timer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":38,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":39,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":39,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":29,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":29,"duration":87.883},
{"type":"mark","name":"tsc.op.op_load","count":40,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":40,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":30,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":30,"duration":0.023},
{"type":"mark","name":"tsc.op.op_load","count":41,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":41,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":31,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":31,"duration":52.082},
{"type":"mark","name":"tsc.op.op_load","count":42,"args":"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":42,"duration":0.035},
{"type":"mark","name":"tsc.op.op_load","count":43,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":43,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":32,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":32,"duration":153.153},
{"type":"mark","name":"tsc.op.op_load","count":44,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":44,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":33,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":33,"duration":120.624},
{"type":"mark","name":"tsc.op.op_load","count":45,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":45,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":34,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":34,"duration":55.889},
{"type":"mark","name":"tsc.op.op_load","count":46,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/errors.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":46,"duration":0.033},
{"type":"mark","name":"tsc.op.op_load","count":47,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":47,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":35,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":35,"duration":0.027},
{"type":"mark","name":"tsc.op.op_load","count":48,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":48,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":36,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":36,"duration":0.028},
{"type":"mark","name":"tsc.op.op_load","count":49,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":49,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":37,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":37,"duration":29.001},
{"type":"mark","name":"tsc.op.op_load","count":50,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":50,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":38,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":38,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":51,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":51,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":39,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":39,"duration":0.028},
{"type":"mark","name":"tsc.op.op_load","count":52,"args":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":52,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":40,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":40,"duration":0.027},
{"type":"mark","name":"tsc.op.op_load","count":53,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":53,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":41,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":41,"duration":82.26},
{"type":"mark","name":"tsc.op.op_load","count":54,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":54,"duration":1.094},
{"type":"mark","name":"tsc.op.op_resolve","count":42,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":42,"duration":7.632},
{"type":"mark","name":"tsc.op.op_load","count":55,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":55,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":43,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":43,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":56,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":56,"duration":0.062},
{"type":"mark","name":"tsc.op.op_resolve","count":44,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":44,"duration":57.869},
{"type":"mark","name":"tsc.op.op_load","count":57,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/web3/ethereum.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":57,"duration":0.035},
{"type":"mark","name":"tsc.op.op_load","count":58,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":58,"duration":0.047},
{"type":"mark","name":"tsc.op.op_resolve","count":45,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":45,"duration":4.215},
{"type":"mark","name":"tsc.op.op_load","count":59,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/error-codes.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":59,"duration":0.032},
{"type":"mark","name":"tsc.op.op_load","count":60,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/web3/solana.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":60,"duration":0.025},
{"type":"mark","name":"tsc.op.op_load","count":61,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":61,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":46,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":46,"duration":8.298},
{"type":"mark","name":"tsc.op.op_load","count":62,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":62,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":47,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":47,"duration":0.04},
{"type":"mark","name":"tsc.op.op_load","count":63,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":63,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":48,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":48,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":64,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":64,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":49,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":49,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":65,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/locks.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":65,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":66,"args":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":66,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":50,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":50,"duration":0.055},
{"type":"mark","name":"tsc.op.op_load","count":67,"args":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts"},
{"type":"measure","name":"tsc.op.op_load","count":67,"duration":0.053},
{"type":"mark","name":"tsc.op.op_resolve","count":51,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":51,"duration":0.034},
{"type":"mark","name":"tsc.op.op_load","count":68,"args":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts"},
{"type":"measure","name":"tsc.op.op_load","count":68,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":52,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":52,"duration":37.024},
{"type":"mark","name":"tsc.op.op_load","count":69,"args":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":69,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":53,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":53,"duration":33.699},
{"type":"mark","name":"tsc.op.op_load","count":70,"args":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":70,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":54,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":54,"duration":10.041},
{"type":"mark","name":"tsc.op.op_load","count":71,"args":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":71,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":55,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":55,"duration":9.232},
{"type":"mark","name":"tsc.op.op_load","count":72,"args":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":72,"duration":0.055},
{"type":"mark","name":"tsc.op.op_resolve","count":56,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":56,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":73,"args":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":73,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":74,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":74,"duration":0.055},
{"type":"mark","name":"tsc.op.op_resolve","count":57,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":57,"duration":102.437},
{"type":"mark","name":"tsc.op.op_load","count":75,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":75,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":58,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":58,"duration":0.036},
{"type":"mark","name":"tsc.op.op_load","count":76,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":76,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":59,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":59,"duration":0.039},
{"type":"mark","name":"tsc.op.op_load","count":77,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":77,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":60,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":60,"duration":0.055},
{"type":"mark","name":"tsc.op.op_load","count":78,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":78,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":61,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":61,"duration":0.596},
{"type":"mark","name":"tsc.op.op_load","count":79,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":79,"duration":0.044},
{"type":"mark","name":"tsc.op.op_resolve","count":62,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":62,"duration":0.024},
{"type":"mark","name":"tsc.op.op_load","count":80,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":80,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":63,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":63,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":81,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestError.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":81,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":82,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":82,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":64,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":64,"duration":68.359},
{"type":"mark","name":"tsc.op.op_load","count":83,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":83,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":65,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":65,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":84,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":84,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":66,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":66,"duration":0.024},
{"type":"mark","name":"tsc.op.op_load","count":85,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":85,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":67,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":67,"duration":0.053},
{"type":"mark","name":"tsc.op.op_load","count":86,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":86,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":68,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":68,"duration":86.619},
{"type":"mark","name":"tsc.op.op_load","count":87,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":87,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":69,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":69,"duration":26.297},
{"type":"mark","name":"tsc.op.op_load","count":88,"args":"https://esm.sh/@types/ws@8.5.13/index.d.mts"},
{"type":"measure","name":"tsc.op.op_load","count":88,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":70,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":70,"duration":0.027},
{"type":"mark","name":"tsc.op.op_load","count":89,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/constants.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":89,"duration":0.026},
{"type":"mark","name":"tsc.op.op_load","count":90,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/serializer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":90,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":91,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/timer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":91,"duration":0.041},
{"type":"mark","name":"tsc.op.op_load","count":92,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":92,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":71,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":71,"duration":55.325},
{"type":"mark","name":"tsc.op.op_load","count":93,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":93,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":72,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":72,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":94,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":94,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":73,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":73,"duration":0.025},
{"type":"mark","name":"tsc.op.op_load","count":95,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":95,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":74,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":74,"duration":38.231},
{"type":"mark","name":"tsc.op.op_load","count":96,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":96,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":75,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":75,"duration":132.027},
{"type":"mark","name":"tsc.op.op_load","count":97,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":97,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":76,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":76,"duration":0.035},
{"type":"mark","name":"tsc.op.op_load","count":98,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/errors.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":98,"duration":0.023},
{"type":"mark","name":"tsc.op.op_load","count":99,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":99,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":77,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":77,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":100,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":100,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":101,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":101,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":78,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":78,"duration":0.032},
{"type":"mark","name":"tsc.op.op_load","count":102,"args":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":102,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":79,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":79,"duration":0.027},
{"type":"mark","name":"tsc.op.op_load","count":103,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":103,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":80,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":80,"duration":52.03},
{"type":"mark","name":"tsc.op.op_load","count":104,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":104,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":81,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":81,"duration":2.638},
{"type":"mark","name":"tsc.op.op_load","count":105,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":105,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":82,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":82,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":106,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":106,"duration":0.077},
{"type":"mark","name":"tsc.op.op_resolve","count":83,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":83,"duration":7.836},
{"type":"mark","name":"tsc.op.op_load","count":107,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":107,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":84,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":84,"duration":5.582},
{"type":"mark","name":"tsc.op.op_load","count":108,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/error-codes.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":108,"duration":0.055},
{"type":"mark","name":"tsc.op.op_load","count":109,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":109,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":85,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":85,"duration":0.024},
{"type":"mark","name":"tsc.op.op_load","count":110,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":110,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":86,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":86,"duration":15.021},
{"type":"mark","name":"tsc.op.op_load","count":111,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":111,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":87,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":87,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":112,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":112,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":88,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":88,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":113,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":113,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":89,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":89,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":114,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/locks.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":114,"duration":0.111},
{"type":"mark","name":"tsc.op.op_load","count":115,"args":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":115,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":90,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":90,"duration":0.029},
{"type":"mark","name":"tsc.op.op_load","count":116,"args":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts"},
{"type":"measure","name":"tsc.op.op_load","count":116,"duration":0.179},
{"type":"mark","name":"tsc.op.op_resolve","count":91,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":91,"duration":0.049},
{"type":"mark","name":"tsc.op.op_load","count":117,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":117,"duration":0.158},
{"type":"mark","name":"tsc.op.op_resolve","count":92,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":92,"duration":0.092},
{"type":"mark","name":"tsc.op.op_load","count":118,"args":"https://deno.land/std@0.168.0/http/server.ts"},
{"type":"measure","name":"tsc.op.op_load","count":118,"duration":0.07},
{"type":"mark","name":"tsc.op.op_resolve","count":93,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":93,"duration":3.986},
{"type":"mark","name":"tsc.op.op_load","count":119,"args":"https://deno.land/std@0.168.0/async/mod.ts"},
{"type":"measure","name":"tsc.op.op_load","count":119,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":94,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":94,"duration":33.19},
{"type":"mark","name":"tsc.op.op_load","count":120,"args":"https://deno.land/std@0.168.0/async/abortable.ts"},
{"type":"measure","name":"tsc.op.op_load","count":120,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":95,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":95,"duration":0.035},
{"type":"mark","name":"tsc.op.op_load","count":121,"args":"https://deno.land/std@0.168.0/async/deferred.ts"},
{"type":"measure","name":"tsc.op.op_load","count":121,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":122,"args":"https://deno.land/std@0.168.0/async/deadline.ts"},
{"type":"measure","name":"tsc.op.op_load","count":122,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":96,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":96,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":123,"args":"https://deno.land/std@0.168.0/async/debounce.ts"},
{"type":"measure","name":"tsc.op.op_load","count":123,"duration":0.016},
{"type":"mark","name":"tsc.op.op_load","count":124,"args":"https://deno.land/std@0.168.0/async/delay.ts"},
{"type":"measure","name":"tsc.op.op_load","count":124,"duration":0.04},
{"type":"mark","name":"tsc.op.op_load","count":125,"args":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts"},
{"type":"measure","name":"tsc.op.op_load","count":125,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":97,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":97,"duration":0.023},
{"type":"mark","name":"tsc.op.op_load","count":126,"args":"https://deno.land/std@0.168.0/async/pool.ts"},
{"type":"measure","name":"tsc.op.op_load","count":126,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":127,"args":"https://deno.land/std@0.168.0/async/tee.ts"},
{"type":"measure","name":"tsc.op.op_load","count":127,"duration":0.026},
{"type":"mark","name":"tsc.op.op_load","count":128,"args":"https://deno.land/std@0.168.0/async/retry.ts"},
{"type":"measure","name":"tsc.op.op_load","count":128,"duration":0.057},
{"type":"mark","name":"tsc.op.op_load","count":129,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":129,"duration":0.183},
{"type":"mark","name":"tsc.op.op_resolve","count":98,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":98,"duration":0.082},
{"type":"mark","name":"tsc.op.op_load","count":130,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":130,"duration":1.973},
{"type":"mark","name":"tsc.op.op_resolve","count":99,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":99,"duration":0.083},
{"type":"mark","name":"tsc.op.op_load","count":131,"args":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":131,"duration":0.068},
{"type":"mark","name":"tsc.op.op_resolve","count":100,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":100,"duration":0.089},
{"type":"mark","name":"tsc.op.op_load","count":132,"args":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":132,"duration":0.134},
{"type":"mark","name":"tsc.op.op_resolve","count":101,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":101,"duration":0.067},
{"type":"mark","name":"tsc.op.op_load","count":133,"args":"file:///workspaces/ProspectPro/supabase/functions/enrichment-business-license/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":133,"duration":0.097},
{"type":"mark","name":"tsc.op.op_resolve","count":102,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-business-license/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.4"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":102,"duration":6.175},
{"type":"mark","name":"tsc.op.op_load","count":134,"args":"https://esm.sh/@supabase/supabase-js@2.38.4/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":134,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":103,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.4/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":103,"duration":11.714},
{"type":"mark","name":"tsc.op.op_load","count":135,"args":"https://esm.sh/@supabase/supabase-js@2.38.4/dist/module/SupabaseClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":135,"duration":0.054},
{"type":"mark","name":"tsc.op.op_resolve","count":104,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.4/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":104,"duration":72.542},
{"type":"mark","name":"tsc.op.op_load","count":136,"args":"https://esm.sh/@supabase/supabase-js@2.38.4/dist/module/lib/SupabaseAuthClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":136,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":105,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.4/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":105,"duration":0.027},
{"type":"mark","name":"tsc.op.op_load","count":137,"args":"https://esm.sh/@supabase/supabase-js@2.38.4/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":137,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":106,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.4/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":106,"duration":0.026},
{"type":"mark","name":"tsc.op.op_load","count":138,"args":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":138,"duration":0.085},
{"type":"mark","name":"tsc.op.op_resolve","count":107,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":107,"duration":0.057},
{"type":"mark","name":"tsc.op.op_load","count":139,"args":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":139,"duration":0.116},
{"type":"mark","name":"tsc.op.op_resolve","count":108,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":108,"duration":0.038},
{"type":"mark","name":"tsc.op.op_load","count":140,"args":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":140,"duration":0.113},
{"type":"mark","name":"tsc.op.op_resolve","count":109,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":109,"duration":0.069},
{"type":"mark","name":"tsc.op.op_load","count":141,"args":"file:///workspaces/ProspectPro/supabase/functions/enrichment-pdl/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":141,"duration":0.059},
{"type":"mark","name":"tsc.op.op_resolve","count":110,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-pdl/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.4"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":110,"duration":0.047},
{"type":"mark","name":"tsc.op.op_load","count":142,"args":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":142,"duration":0.044},
{"type":"mark","name":"tsc.op.op_resolve","count":111,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":111,"duration":0.041},
{"type":"mark","name":"tsc.op.op_load","count":143,"args":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":143,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":112,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":112,"duration":0.024},
{"type":"mark","name":"tsc.op.op_load","count":144,"args":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":144,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":113,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":113,"duration":0.073},
{"type":"mark","name":"tsc.op.op_load","count":145,"args":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":145,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":114,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":114,"duration":0.057},
{"type":"mark","name":"tsc.op.op_load","count":146,"args":"asset:///lib.deno.window.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":146,"duration":2.086},
{"type":"mark","name":"tsc.op.op_load","count":147,"args":"asset:///lib.deno.ns.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":147,"duration":7.747},
{"type":"mark","name":"tsc.op.op_load","count":148,"args":"asset:///lib.esnext.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":148,"duration":0.291},
{"type":"mark","name":"tsc.op.op_load","count":149,"args":"asset:///lib.es2024.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":149,"duration":0.067},
{"type":"mark","name":"tsc.op.op_load","count":150,"args":"asset:///lib.es2023.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":150,"duration":0.055},
{"type":"mark","name":"tsc.op.op_load","count":151,"args":"asset:///lib.es2022.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":151,"duration":0.058},
{"type":"mark","name":"tsc.op.op_load","count":152,"args":"asset:///lib.es2021.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":152,"duration":0.051},
{"type":"mark","name":"tsc.op.op_load","count":153,"args":"asset:///lib.es2020.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":153,"duration":0.061},
{"type":"mark","name":"tsc.op.op_load","count":154,"args":"asset:///lib.es2019.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":154,"duration":0.055},
{"type":"mark","name":"tsc.op.op_load","count":155,"args":"asset:///lib.es2018.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":155,"duration":0.058},
{"type":"mark","name":"tsc.op.op_load","count":156,"args":"asset:///lib.es2017.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":156,"duration":0.066},
{"type":"mark","name":"tsc.op.op_load","count":157,"args":"asset:///lib.es2016.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":157,"duration":0.053},
{"type":"mark","name":"tsc.op.op_load","count":158,"args":"asset:///lib.es2015.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":158,"duration":0.061},
{"type":"mark","name":"tsc.op.op_load","count":159,"args":"asset:///lib.es5.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":159,"duration":49.342},
{"type":"mark","name":"tsc.op.op_load","count":160,"args":"asset:///lib.decorators.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":160,"duration":0.941},
{"type":"mark","name":"tsc.op.op_load","count":161,"args":"asset:///lib.decorators.legacy.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":161,"duration":0.293},
{"type":"mark","name":"tsc.op.op_load","count":162,"args":"asset:///lib.es2015.core.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":162,"duration":5.358},
{"type":"mark","name":"tsc.op.op_load","count":163,"args":"asset:///lib.es2015.collection.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":163,"duration":3.328},
{"type":"mark","name":"tsc.op.op_load","count":164,"args":"asset:///lib.es2015.iterable.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":164,"duration":22.483},
{"type":"mark","name":"tsc.op.op_load","count":165,"args":"asset:///lib.es2015.symbol.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":165,"duration":0.233},
{"type":"mark","name":"tsc.op.op_load","count":166,"args":"asset:///lib.es2015.generator.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":166,"duration":1.794},
{"type":"mark","name":"tsc.op.op_load","count":167,"args":"asset:///lib.es2015.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":167,"duration":5.459},
{"type":"mark","name":"tsc.op.op_load","count":168,"args":"asset:///lib.es2015.proxy.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":168,"duration":0.389},
{"type":"mark","name":"tsc.op.op_load","count":169,"args":"asset:///lib.es2015.reflect.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":169,"duration":0.626},
{"type":"mark","name":"tsc.op.op_load","count":170,"args":"asset:///lib.es2015.symbol.wellknown.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":170,"duration":11.653},
{"type":"mark","name":"tsc.op.op_load","count":171,"args":"asset:///lib.es2016.array.include.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":171,"duration":0.361},
{"type":"mark","name":"tsc.op.op_load","count":172,"args":"asset:///lib.es2016.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":172,"duration":0.15},
{"type":"mark","name":"tsc.op.op_load","count":173,"args":"asset:///lib.es2017.arraybuffer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":173,"duration":0.082},
{"type":"mark","name":"tsc.op.op_load","count":174,"args":"asset:///lib.es2017.date.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":174,"duration":0.113},
{"type":"mark","name":"tsc.op.op_load","count":175,"args":"asset:///lib.es2017.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":175,"duration":10.359},
{"type":"mark","name":"tsc.op.op_load","count":176,"args":"asset:///lib.es2017.object.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":176,"duration":0.248},
{"type":"mark","name":"tsc.op.op_load","count":177,"args":"asset:///lib.es2017.sharedmemory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":177,"duration":2.335},
{"type":"mark","name":"tsc.op.op_load","count":178,"args":"asset:///lib.es2017.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":178,"duration":0.125},
{"type":"mark","name":"tsc.op.op_load","count":179,"args":"asset:///lib.es2017.typedarrays.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":179,"duration":0.155},
{"type":"mark","name":"tsc.op.op_load","count":180,"args":"asset:///lib.es2018.asynciterable.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":180,"duration":0.275},
{"type":"mark","name":"tsc.op.op_load","count":181,"args":"asset:///lib.es2018.asyncgenerator.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":181,"duration":0.236},
{"type":"mark","name":"tsc.op.op_load","count":182,"args":"asset:///lib.es2018.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":182,"duration":0.104},
{"type":"mark","name":"tsc.op.op_load","count":183,"args":"asset:///lib.es2018.regexp.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":183,"duration":0.099},
{"type":"mark","name":"tsc.op.op_load","count":184,"args":"asset:///lib.es2018.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":184,"duration":0.467},
{"type":"mark","name":"tsc.op.op_load","count":185,"args":"asset:///lib.es2019.array.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":185,"duration":0.295},
{"type":"mark","name":"tsc.op.op_load","count":186,"args":"asset:///lib.es2019.object.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":186,"duration":0.114},
{"type":"mark","name":"tsc.op.op_load","count":187,"args":"asset:///lib.es2019.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":187,"duration":0.085},
{"type":"mark","name":"tsc.op.op_load","count":188,"args":"asset:///lib.es2019.symbol.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":188,"duration":9.592},
{"type":"mark","name":"tsc.op.op_load","count":189,"args":"asset:///lib.es2019.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":189,"duration":0.145},
{"type":"mark","name":"tsc.op.op_load","count":190,"args":"asset:///lib.es2020.bigint.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":190,"duration":19.187},
{"type":"mark","name":"tsc.op.op_load","count":191,"args":"asset:///lib.es2020.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":191,"duration":1.268},
{"type":"mark","name":"tsc.op.op_load","count":192,"args":"asset:///lib.es2020.date.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":192,"duration":0.172},
{"type":"mark","name":"tsc.op.op_load","count":193,"args":"asset:///lib.es2020.number.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":193,"duration":0.091},
{"type":"mark","name":"tsc.op.op_load","count":194,"args":"asset:///lib.es2020.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":194,"duration":0.181},
{"type":"mark","name":"tsc.op.op_load","count":195,"args":"asset:///lib.es2020.sharedmemory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":195,"duration":0.299},
{"type":"mark","name":"tsc.op.op_load","count":196,"args":"asset:///lib.es2020.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":196,"duration":0.131},
{"type":"mark","name":"tsc.op.op_load","count":197,"args":"asset:///lib.es2020.symbol.wellknown.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":197,"duration":0.146},
{"type":"mark","name":"tsc.op.op_load","count":198,"args":"asset:///lib.es2021.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":198,"duration":0.175},
{"type":"mark","name":"tsc.op.op_load","count":199,"args":"asset:///lib.es2021.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":199,"duration":0.106},
{"type":"mark","name":"tsc.op.op_load","count":200,"args":"asset:///lib.es2021.weakref.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":200,"duration":0.258},
{"type":"mark","name":"tsc.op.op_load","count":201,"args":"asset:///lib.es2021.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":201,"duration":0.456},
{"type":"mark","name":"tsc.op.op_load","count":202,"args":"asset:///lib.es2022.array.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":202,"duration":0.377},
{"type":"mark","name":"tsc.op.op_load","count":203,"args":"asset:///lib.es2022.error.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":203,"duration":0.255},
{"type":"mark","name":"tsc.op.op_load","count":204,"args":"asset:///lib.es2022.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":204,"duration":0.218},
{"type":"mark","name":"tsc.op.op_load","count":205,"args":"asset:///lib.es2022.object.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":205,"duration":0.098},
{"type":"mark","name":"tsc.op.op_load","count":206,"args":"asset:///lib.es2022.regexp.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":206,"duration":0.132},
{"type":"mark","name":"tsc.op.op_load","count":207,"args":"asset:///lib.es2022.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":207,"duration":0.084},
{"type":"mark","name":"tsc.op.op_load","count":208,"args":"asset:///lib.es2023.array.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":208,"duration":2.426},
{"type":"mark","name":"tsc.op.op_load","count":209,"args":"asset:///lib.es2023.collection.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":209,"duration":0.175},
{"type":"mark","name":"tsc.op.op_load","count":210,"args":"asset:///lib.es2023.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":210,"duration":0.312},
{"type":"mark","name":"tsc.op.op_load","count":211,"args":"asset:///lib.es2024.arraybuffer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":211,"duration":0.178},
{"type":"mark","name":"tsc.op.op_load","count":212,"args":"asset:///lib.es2024.collection.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":212,"duration":0.284},
{"type":"mark","name":"tsc.op.op_load","count":213,"args":"asset:///lib.es2024.object.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":213,"duration":0.211},
{"type":"mark","name":"tsc.op.op_load","count":214,"args":"asset:///lib.es2024.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":214,"duration":0.358},
{"type":"mark","name":"tsc.op.op_load","count":215,"args":"asset:///lib.es2024.regexp.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":215,"duration":0.072},
{"type":"mark","name":"tsc.op.op_load","count":216,"args":"asset:///lib.es2024.sharedmemory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":216,"duration":0.224},
{"type":"mark","name":"tsc.op.op_load","count":217,"args":"asset:///lib.es2024.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":217,"duration":0.08},
{"type":"mark","name":"tsc.op.op_load","count":218,"args":"asset:///lib.esnext.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":218,"duration":0.086},
{"type":"mark","name":"tsc.op.op_load","count":219,"args":"asset:///lib.esnext.decorators.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":219,"duration":0.101},
{"type":"mark","name":"tsc.op.op_load","count":220,"args":"asset:///lib.esnext.disposable.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":220,"duration":0.508},
{"type":"mark","name":"tsc.op.op_load","count":221,"args":"asset:///lib.esnext.collection.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":221,"duration":0.337},
{"type":"mark","name":"tsc.op.op_load","count":222,"args":"asset:///lib.esnext.array.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":222,"duration":0.209},
{"type":"mark","name":"tsc.op.op_load","count":223,"args":"asset:///lib.esnext.iterator.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":223,"duration":0.571},
{"type":"mark","name":"tsc.op.op_load","count":224,"args":"asset:///lib.esnext.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":224,"duration":5.045},
{"type":"mark","name":"tsc.op.op_load","count":225,"args":"asset:///lib.esnext.float16.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":225,"duration":1.162},
{"type":"mark","name":"tsc.op.op_load","count":226,"args":"asset:///lib.esnext.error.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":226,"duration":0.179},
{"type":"mark","name":"tsc.op.op_load","count":227,"args":"asset:///lib.esnext.sharedmemory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":227,"duration":0.085},
{"type":"mark","name":"tsc.op.op_load","count":228,"args":"asset:///lib.deno.net.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":228,"duration":1.721},
{"type":"mark","name":"tsc.op.op_load","count":229,"args":"asset:///lib.deno.shared_globals.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":229,"duration":2.234},
{"type":"mark","name":"tsc.op.op_load","count":230,"args":"asset:///lib.deno.console.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":230,"duration":0.931},
{"type":"mark","name":"tsc.op.op_load","count":231,"args":"asset:///lib.deno.url.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":231,"duration":5.856},
{"type":"mark","name":"tsc.op.op_load","count":232,"args":"asset:///lib.deno.web.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":232,"duration":53.21},
{"type":"mark","name":"tsc.op.op_load","count":233,"args":"asset:///lib.deno.webgpu.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":233,"duration":4.349},
{"type":"mark","name":"tsc.op.op_load","count":234,"args":"asset:///lib.deno.canvas.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":234,"duration":0.382},
{"type":"mark","name":"tsc.op.op_load","count":235,"args":"asset:///lib.deno.fetch.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":235,"duration":4.289},
{"type":"mark","name":"tsc.op.op_load","count":236,"args":"asset:///lib.deno.websocket.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":236,"duration":0.683},
{"type":"mark","name":"tsc.op.op_load","count":237,"args":"asset:///lib.deno.crypto.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":237,"duration":1.516},
{"type":"mark","name":"tsc.op.op_load","count":238,"args":"asset:///lib.deno.webstorage.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":238,"duration":25.287},
{"type":"mark","name":"tsc.op.op_load","count":239,"args":"asset:///lib.deno.cache.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":239,"duration":0.35},
{"type":"mark","name":"tsc.op.op_load","count":240,"args":"asset:///lib.deno.unstable.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":240,"duration":113.667},
{"type":"mark","name":"tsc.op.op_load","count":241,"args":"asset:///lib.deno.broadcast_channel.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":241,"duration":0.401},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":1,"duration":0.011},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":2,"duration":0.006},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":3,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":4,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":5,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":6,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":7,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":8,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":9,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":10,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":11,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":12,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":13,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":14,"duration":0.005},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":15,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":16,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":17,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":18,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":19,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":20,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":21,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":22,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":23,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":24,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":25,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":26,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":27,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":28,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":29,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":30,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":31,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":32,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":33,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":34,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":35,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":36,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":37,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":38,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":39,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":40,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":41,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":42,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":43,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":44,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":45,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":46,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":47,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":48,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":49,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":50,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":51,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":52,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":53,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":54,"duration":0.005},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":55,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":56,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":57,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":58,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":59,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":60,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":61,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":62,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":63,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":64,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":65,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":66,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":67,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":68,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":69,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":70,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":71,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":72,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":73,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":74,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":75,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":76,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":77,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":78,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":79,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":80,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":81,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":82,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":83,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":84,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":85,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":86,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":87,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":88,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":89,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":90,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":91,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":92,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":93,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":94,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":95,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":96,"duration":0.006},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":97,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":98,"duration":0.015},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":99,"duration":0.014},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":100,"duration":0.015},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":101,"duration":0.015},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":102,"duration":0.009},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":103,"duration":0.033},
