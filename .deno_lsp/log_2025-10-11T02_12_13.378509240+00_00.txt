Starting Deno language server...
{"type":"mark","name":"lsp.initialize","count":1,"args":{"processId":307,"rootPath":"/workspaces/ProspectPro","rootUri":"file:///workspaces/ProspectPro","initializationOptions":{"enable":true,"cacheOnSave":true,"disablePaths":[],"enablePaths":["supabase/functions"],"path":null,"env":{},"envFile":null,"cache":null,"certificateStores":null,"codeLens":{"implementations":true,"references":true,"referencesAllFunctions":true,"test":true,"testArgs":["--allow-all","--no-check"]},"config":null,"documentPreloadLimit":1000,"future":false,"importMap":null,"inlayHints":{"parameterNames":{"enabled":"none","suppressWhenArgumentMatchesName":true},"parameterTypes":{"enabled":false},"variableTypes":{"enabled":false,"suppressWhenTypeMatchesName":true},"propertyDeclarationTypes":{"enabled":false},"functionLikeReturnTypes":{"enabled":false},"enumMemberValues":{"enabled":false}},"maxTsServerMemory":3072,"suggest":{"autoImports":true,"completeFunctionCalls":false,"names":true,"paths":true,"imports":{"autoDiscover":true,"hosts":{"https://deno.land":true}}},"trace":{"server":"off"},"testing":{"args":["--allow-all","--no-check"]},"tlsCertificate":null,"unsafelyIgnoreCertificateErrors":null,"unstable":["bare-node-builtins","byonm","sloppy-imports"],"lint":true,"internalDebug":false,"internalInspect":false,"logFile":true,"defaultTaskCommand":"open","javascript":{"referencesCodeLens":{"enabled":false,"showOnAllFunctions":false},"validate":{"enable":true},"suggestionActions":{"enabled":true},"updateImportsOnFileMove":{"enabled":"prompt"},"autoClosingTags":true,"preferGoToSourceDefinition":false,"updateImportsOnPaste":{"enabled":true},"suggest":{"enabled":true,"autoImports":true,"names":true,"completeFunctionCalls":false,"paths":true,"completeJSDocs":true,"jsdoc":{"generateReturns":true},"includeAutomaticOptionalChainCompletions":true,"includeCompletionsForImportStatements":true,"classMemberSnippets":{"enabled":true}},"preferences":{"quoteStyle":"auto","importModuleSpecifier":"shortest","importModuleSpecifierEnding":"auto","jsxAttributeCompletionStyle":"auto","autoImportFileExcludePatterns":[],"autoImportSpecifierExcludeRegexes":[],"useAliasesForRenames":true,"renameMatchingJsxTags":true,"organizeImports":{}},"format":{"enable":true,"insertSpaceAfterCommaDelimiter":true,"insertSpaceAfterConstructor":false,"insertSpaceAfterSemicolonInForStatements":true,"insertSpaceBeforeAndAfterBinaryOperators":true,"insertSpaceAfterKeywordsInControlFlowStatements":true,"insertSpaceAfterFunctionKeywordForAnonymousFunctions":true,"insertSpaceBeforeFunctionParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingEmptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces":false,"insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces":false,"placeOpenBraceOnNewLineForFunctions":false,"placeOpenBraceOnNewLineForControlBlocks":false,"semicolons":"ignore","indentSwitchCase":true},"inlayHints":{"parameterNames":{"enabled":"none","suppressWhenArgumentMatchesName":true},"parameterTypes":{"enabled":false},"variableTypes":{"enabled":false,"suppressWhenTypeMatchesName":true},"propertyDeclarationTypes":{"enabled":false},"functionLikeReturnTypes":{"enabled":false}}},"typescript":{"tsdk":"","disableAutomaticTypeAcquisition":false,"enablePromptUseWorkspaceTsdk":false,"referencesCodeLens":{"enabled":false,"showOnAllFunctions":false},"implementationsCodeLens":{"enabled":false,"showOnInterfaceMethods":false},"experimental":{"useTsgo":false},"reportStyleChecksAsWarnings":true,"validate":{"enable":true},"tsc":{"autoDetect":"on"},"locale":"auto","suggestionActions":{"enabled":true},"updateImportsOnFileMove":{"enabled":"prompt"},"autoClosingTags":true,"workspaceSymbols":{"scope":"allOpenProjects","excludeLibrarySymbols":true},"preferGoToSourceDefinition":false,"tsserver":{"enableRegionDiagnostics":true,"nodePath":"","web":{"projectWideIntellisense":{"enabled":true,"suppressSemanticErrors":false},"typeAcquisition":{"enabled":true}},"useSyntaxServer":"auto","maxTsServerMemory":3072,"experimental":{"enableProjectDiagnostics":false},"watchOptions":"vscode","enableTracing":false,"log":"off","pluginPaths":[]},"updateImportsOnPaste":{"enabled":true},"suggest":{"enabled":true,"autoImports":false,"completeFunctionCalls":false,"paths":true,"completeJSDocs":true,"jsdoc":{"generateReturns":true},"includeAutomaticOptionalChainCompletions":true,"includeCompletionsForImportStatements":true,"classMemberSnippets":{"enabled":true},"objectLiteralMethodSnippets":{"enabled":true}},"preferences":{"quoteStyle":"auto","importModuleSpecifier":"shortest","importModuleSpecifierEnding":"auto","jsxAttributeCompletionStyle":"auto","includePackageJsonAutoImports":"auto","autoImportFileExcludePatterns":[],"autoImportSpecifierExcludeRegexes":[],"preferTypeOnlyAutoImports":false,"useAliasesForRenames":true,"renameMatchingJsxTags":true,"organizeImports":{}},"format":{"enable":true,"insertSpaceAfterCommaDelimiter":true,"insertSpaceAfterConstructor":false,"insertSpaceAfterSemicolonInForStatements":true,"insertSpaceBeforeAndAfterBinaryOperators":true,"insertSpaceAfterKeywordsInControlFlowStatements":true,"insertSpaceAfterFunctionKeywordForAnonymousFunctions":true,"insertSpaceBeforeFunctionParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingEmptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces":false,"insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces":false,"insertSpaceAfterTypeAssertion":false,"placeOpenBraceOnNewLineForFunctions":false,"placeOpenBraceOnNewLineForControlBlocks":false,"semicolons":"ignore","indentSwitchCase":true},"inlayHints":{"parameterNames":{"enabled":"none","suppressWhenArgumentMatchesName":true},"parameterTypes":{"enabled":false},"variableTypes":{"enabled":false,"suppressWhenTypeMatchesName":true},"propertyDeclarationTypes":{"enabled":false},"functionLikeReturnTypes":{"enabled":false},"enumMemberValues":{"enabled":false}},"npm":"","check":{"npmIsInstalled":true}},"enableBuiltinCommands":true},"capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional","normalizesLineEndings":true,"changeAnnotationSupport":{"groupsOnLabel":true}},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true,"relativePatternSupport":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]},"resolveSupport":{"properties":["location.range"]}},"executeCommand":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true,"semanticTokens":{"refreshSupport":true},"codeLens":{"refreshSupport":true},"fileOperations":{"dynamicRegistration":true,"didCreate":true,"willCreate":true,"didRename":true,"willRename":true,"didDelete":true,"willDelete":true},"inlineValue":{"refreshSupport":true},"inlayHint":{"refreshSupport":true}},"textDocument":{"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]},"insertReplaceSupport":true,"resolveSupport":{"properties":["documentation","detail","additionalTextEdits"]},"insertTextModeSupport":{"valueSet":[1,2]},"labelDetailsSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true,"insertTextMode":2,"completionList":{"itemDefaults":["commitCharacters","editRange","insertTextFormat","insertTextMode","data"]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true},"activeParameterSupport":true},"contextSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true,"tagSupport":{"valueSet":[1]}},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"codeAction":{"dynamicRegistration":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.move","refactor.rewrite","source","source.organizeImports","notebook"]}},"isPreferredSupport":true,"disabledSupport":true,"dataSupport":true,"resolveSupport":{"properties":["edit","command"]},"honorsChangeAnnotations":true},"codeLens":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"colorProvider":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true,"prepareSupportDefaultBehavior":1,"honorsChangeAnnotations":true},"publishDiagnostics":{"relatedInformation":true,"tagSupport":{"valueSet":[1,2]},"versionSupport":false,"codeDescriptionSupport":true,"dataSupport":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true,"foldingRangeKind":{"valueSet":["comment","imports","region"]},"foldingRange":{"collapsedText":false}},"selectionRange":{"dynamicRegistration":true},"linkedEditingRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"requests":{"range":true,"full":{"delta":true}},"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","comment","string","number","regexp","operator","decorator","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"formats":["relative"],"overlappingTokenSupport":false,"multilineTokenSupport":false,"serverCancelSupport":true,"augmentsSyntaxTokens":true},"typeHierarchy":{"dynamicRegistration":true},"inlineValue":{"dynamicRegistration":true},"inlayHint":{"dynamicRegistration":true,"resolveSupport":{"properties":["tooltip","textEdits","label.tooltip","label.location","label.command"]}},"diagnostic":{"dynamicRegistration":true,"relatedDocumentSupport":false}},"notebookDocument":{"synchronization":{"dynamicRegistration":true}},"window":{"workDoneProgress":true,"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"showDocument":{"support":true}},"general":{"regularExpressions":{"engine":"ECMAScript","version":"ES2020"},"markdown":{"parser":"marked","version":"1.1.0"},"staleRequestSupport":{"cancel":true,"retryOnContentModified":["textDocument/semanticTokens/full","textDocument/semanticTokens/range","textDocument/semanticTokens/full/delta"]},"positionEncodings":["utf-16"]},"experimental":{"testingApi":true}},"trace":"off","workspaceFolders":[{"uri":"file:///workspaces/ProspectPro","name":"ProspectPro"}],"clientInfo":{"name":"Visual Studio Code","version":"1.105.0"},"locale":"en"}},
  version: 2.5.2 (release, x86_64-unknown-linux-gnu)
  executable: /usr/local/share/npm-global/lib/node_modules/deno/deno
Connected to "Visual Studio Code" 1.105.0
{"type":"measure","name":"lsp.initialize","count":1,"duration":0.254},
{"type":"mark","name":"lsp.update_global_cache"},
Enabling import suggestions for: https://deno.land
{"type":"measure","name":"lsp.update_global_cache","count":1,"duration":390.576},
Refreshing configuration tree...
{"type":"mark","name":"lsp.update_cache"},
{"type":"measure","name":"lsp.update_cache","count":1,"duration":0.001},
{"type":"mark","name":"lsp.did_open","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro Production MCP Server v4.1 - Post-Cleanup Enhanced\n * Optimized for cleaned database architecture, streamlined Edge Functions, and MECE taxonomy\n *\n * Updated Features (Oct 2025):\n * - 2 Essential Edge Functions: business-discovery-optimized + campaign-export\n * - Cleaned Database: campaigns, leads, dashboard_exports (core tables only)\n * - MECE Business Taxonomy: 16 categories, 300+ optimized business types\n * - Security Hardened: No SECURITY DEFINER issues, fixed trigger functions\n * - Cache-Optimized: Real-time deployment updates via Vercel\n * - Cost Intelligence: Dynamic pricing with admin panel integration\n */\n\nconst { Server } = require(\"@modelcontextprotocol/sdk/server/index.js\");\nconst {\n  StdioServerTransport,\n} = require(\"@modelcontextprotocol/sdk/server/stdio.js\");\nconst { CallToolRequestSchema } = require(\"@modelcontextprotocol/sdk/types.js\");\nconst { createClient } = require(\"@supabase/supabase-js\");\nconst https = require(\"https\");\nconst { spawn } = require(\"child_process\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nclass ProductionMCPServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-production-v4.1\",\n        version: \"4.1.0\",\n      },\n      {\n        capabilities: {\n          tools: {},\n        },\n      }\n    );\n\n    this.supabase = null;\n    this.apiClients = {};\n    this.workspaceRoot = process.env.WORKSPACE_ROOT || process.cwd();\n    this.setupTools();\n    this.setupErrorHandling();\n  }\n\n  setupTools() {\n    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      switch (request.params.name) {\n        // === PRODUCTION MONITORING TOOLS ===\n        case \"environment_health_check\":\n          return await this.environmentHealthCheck();\n        case \"github_actions_monitor\":\n          return await this.githubActionsMonitor(request.params.arguments);\n        case \"dev_prod_config_diff\":\n          return await this.devProdConfigDiff();\n        case \"cost_budget_monitor\":\n          return await this.costBudgetMonitor();\n        case \"api_health_dashboard\":\n          return await this.apiHealthDashboard();\n        case \"vault_api_key_status\":\n          return await this.vaultApiKeyStatus();\n        case \"production_startup_validator\":\n          return await this.productionStartupValidator();\n        case \"github_workflow_optimizer\":\n          return await this.githubWorkflowOptimizer();\n\n        // === SYSTEM DIAGNOSTICS TOOLS (from monitoring-server) ===\n        case \"get_system_health\":\n          return await this.getSystemHealth(request.params.arguments);\n        case \"read_diagnostics\":\n          return await this.readDiagnostics(request.params.arguments);\n        case \"analyze_logs\":\n          return await this.analyzeLogs(request.params.arguments);\n        case \"validate_configuration\":\n          return await this.validateConfiguration(request.params.arguments);\n        case \"generate_performance_report\":\n          return await this.generatePerformanceReport(request.params.arguments);\n        case \"monitor_api_quotas\":\n          return await this.monitorAPIQuotas(request.params.arguments);\n\n        // === DATABASE ANALYTICS TOOLS (from database-server) ===\n        case \"query_leads\":\n          return await this.queryLeads(request.params.arguments);\n        case \"get_campaign_stats\":\n          return await this.getCampaignStats(request.params.arguments);\n        case \"analyze_lead_quality\":\n          return await this.analyzeLeadQuality(request.params.arguments);\n        case \"get_api_costs\":\n          return await this.getApiCosts(request.params.arguments);\n\n        // === API TESTING TOOLS (from api-server) ===\n        case \"test_google_places\":\n          return await this.testGooglePlaces(request.params.arguments);\n        case \"test_foursquare_places\":\n          return await this.testFoursquarePlaces(request.params.arguments);\n        case \"test_email_discovery\":\n          return await this.testEmailDiscovery(request.params.arguments);\n        case \"verify_email\":\n          return await this.verifyEmail(request.params.arguments);\n        case \"get_api_usage_stats\":\n          return await this.getAPIUsageStats();\n        case \"simulate_lead_discovery\":\n          return await this.simulateLeadDiscovery(request.params.arguments);\n\n        // === FILESYSTEM ANALYSIS TOOLS (from filesystem-server) ===\n        case \"analyze_project_structure\":\n          return await this.analyzeProjectStructure(request.params.arguments);\n        case \"find_code_patterns\":\n          return await this.findCodePatterns(request.params.arguments);\n        case \"analyze_api_clients\":\n          return await this.analyzeAPIClients(request.params.arguments);\n        case \"check_fake_data_violations\":\n          return await this.checkFakeDataViolations(request.params.arguments);\n\n        default:\n          throw new Error(`Unknown tool: ${request.params.name}`);\n      }\n    });\n  }\n\n  async initializeSupabase() {\n    if (!this.supabase) {\n      if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SECRET_KEY) {\n        throw new Error(\"Missing Supabase configuration\");\n      }\n\n      this.supabase = createClient(\n        process.env.SUPABASE_URL,\n        process.env.SUPABASE_SECRET_KEY\n      );\n\n      // Test connection (prefer cleaned leads table, fall back to legacy view)\n      const tablesToCheck = [\"leads\", \"enhanced_leads\"];\n      let connectionVerified = false;\n\n      for (const table of tablesToCheck) {\n        const { error } = await this.supabase\n          .from(table)\n          .select(\"count\")\n          .limit(1);\n\n        if (!error) {\n          connectionVerified = true;\n          break;\n        }\n\n        const message = error.message || \"\";\n        const isMissingTable =\n          message.includes(\"does not exist\") ||\n          message.includes(\"schema cache\");\n\n        if (!isMissingTable) {\n          throw new Error(`Supabase connection failed: ${message}`);\n        }\n      }\n\n      if (!connectionVerified) {\n        console.warn(\n          \"⚠️  Supabase connection verified, but no leads tables found (leads/enhanced_leads)\"\n        );\n      }\n    }\n  }\n\n  async initializeAPIClients() {\n    if (Object.keys(this.apiClients).length === 0) {\n      try {\n        const GooglePlacesClient = require(\"../modules/api-clients/google-places-client\");\n        const FoursquareClient = require(\"../modules/api-clients/foursquare-places-client\");\n        const HunterIOClient = require(\"../modules/api-clients/hunter-io-client\");\n        const NeverBounceClient = require(\"../modules/api-clients/neverbounce-client\");\n\n        this.apiClients = {\n          googlePlaces: new GooglePlacesClient(\n            process.env.GOOGLE_PLACES_API_KEY\n          ),\n          foursquare: new FoursquareClient(process.env.FOURSQUARE_API_KEY),\n          hunterIO: new HunterIOClient(process.env.HUNTER_IO_API_KEY),\n          neverBounce: new NeverBounceClient(process.env.NEVERBOUNCE_API_KEY),\n        };\n      } catch (error) {\n        console.error(\n          \"Warning: Some API clients could not be loaded:\",\n          error.message\n        );\n      }\n    }\n  }\n\n  // === PRODUCTION MONITORING METHODS ===\n  async environmentHealthCheck() {\n    const results = {\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || \"unknown\",\n      checks: [],\n    };\n\n    try {\n      // Check 1: Environment variables\n      const requiredEnvVars = [\"SUPABASE_URL\", \"SUPABASE_SECRET_KEY\"];\n      const envCheck = {\n        name: \"Environment Variables\",\n        status: \"healthy\",\n        details: {},\n      };\n\n      requiredEnvVars.forEach((varName) => {\n        const value = process.env[varName];\n        if (!value || value.includes(\"your_\")) {\n          envCheck.status = \"unhealthy\";\n          envCheck.details[varName] = \"missing or template value\";\n        } else {\n          envCheck.details[varName] = \"configured\";\n        }\n      });\n      results.checks.push(envCheck);\n\n      // Check 2: Supabase Connection\n      if (process.env.SUPABASE_URL && process.env.SUPABASE_SECRET_KEY) {\n        const supabase = createClient(\n          process.env.SUPABASE_URL,\n          process.env.SUPABASE_SECRET_KEY\n        );\n\n        try {\n          let status = \"unhealthy\";\n          const tablesToCheck = [\"leads\", \"enhanced_leads\"];\n\n          for (const table of tablesToCheck) {\n            const { error } = await supabase\n              .from(table)\n              .select(\"count\")\n              .limit(1);\n\n            if (!error) {\n              status = \"healthy\";\n              break;\n            }\n\n            const message = error.message || \"\";\n            const isMissingTable =\n              message.includes(\"does not exist\") ||\n              message.includes(\"schema cache\");\n\n            if (!isMissingTable) {\n              throw new Error(message);\n            }\n          }\n\n          results.checks.push({\n            name: \"Supabase Database\",\n            status,\n            details: { connection: \"successful\" },\n          });\n        } catch (dbError) {\n          results.checks.push({\n            name: \"Supabase Database\",\n            status: \"unhealthy\",\n            details: { error: dbError.message },\n          });\n        }\n      }\n\n      // Check 3: GitHub Actions Integration\n      const ghToken = process.env.GHP_TOKEN || process.env.GITHUB_TOKEN;\n      results.checks.push({\n        name: \"GitHub Actions Integration\",\n        status: ghToken ? \"healthy\" : \"warning\",\n        details: { token: ghToken ? \"present\" : \"missing\" },\n      });\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🔍 **Production Environment Health Check**\\n\\n${JSON.stringify(\n              results,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Health check failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // GitHub Actions Workflow Monitor\n  async githubActionsMonitor({\n    repo = \"Alextorelli/ProspectPro\",\n    workflow = \"generate-dotenv.yml\",\n  } = {}) {\n    const token = process.env.GHP_TOKEN || process.env.GITHUB_TOKEN;\n\n    if (!token) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: \"⚠️ No GitHub token available for workflow monitoring\",\n          },\n        ],\n      };\n    }\n\n    try {\n      const [owner, repoName] = repo.split(\"/\");\n      const options = {\n        hostname: \"api.github.com\",\n        path: `/repos/${owner}/${repoName}/actions/workflows/${workflow}/runs?per_page=5`,\n        headers: {\n          Authorization: `token ${token}`,\n          \"User-Agent\": \"ProspectPro-Production-MCP\",\n        },\n      };\n\n      const response = await this.makeHttpsRequest(options);\n      const data = JSON.parse(response);\n\n      if (data.workflow_runs && data.workflow_runs.length > 0) {\n        const runs = data.workflow_runs.slice(0, 3).map((run) => ({\n          id: run.id,\n          status: run.status,\n          conclusion: run.conclusion,\n          created_at: run.created_at,\n          head_commit: run.head_commit?.message?.substring(0, 50) + \"...\",\n        }));\n\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `📊 **GitHub Actions Workflow Status**\\n\\n**Workflow**: ${workflow}\\n**Repository**: ${repo}\\n\\n**Recent Runs**:\\n${JSON.stringify(\n                runs,\n                null,\n                2\n              )}`,\n            },\n          ],\n        };\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `📊 No recent workflow runs found for ${workflow}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ GitHub Actions monitoring failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Dev/Prod Configuration Comparison\n  async devProdConfigDiff() {\n    try {\n      const prodEnvPath = path.join(process.cwd(), \".env\");\n      const devEnvPath = path.join(\n        process.cwd(),\n        \".devcontainer\",\n        \"devcontainer.json\"\n      );\n\n      const comparison = {\n        production: {\n          environment_file: fs.existsSync(prodEnvPath),\n          node_env: process.env.NODE_ENV,\n          theme: \"default (unchanged)\",\n          mcp_servers: \"production-only\",\n        },\n        development: {\n          devcontainer_config: fs.existsSync(devEnvPath),\n          theme: \"Vira Deepforest (green)\",\n          mcp_servers: \"full suite (database, API, filesystem, monitoring)\",\n        },\n      };\n\n      // Read production configuration\n      if (fs.existsSync(prodEnvPath)) {\n        const envContent = fs.readFileSync(prodEnvPath, \"utf8\");\n        comparison.production.features = {\n          supabase_configured: !envContent.includes(\"your-project-ref\"),\n          github_actions_build: envContent.includes(\"BUILD_TIMESTAMP\"),\n          vault_integration: envContent.includes(\"Vault\"),\n        };\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🔄 **Dev/Prod Configuration Comparison**\\n\\n${JSON.stringify(\n              comparison,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Configuration comparison failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Cost Budget Monitor\n  async costBudgetMonitor() {\n    try {\n      const supabase = createClient(\n        process.env.SUPABASE_URL,\n        process.env.SUPABASE_SECRET_KEY\n      );\n\n      // Get recent API costs\n      const { data: costs, error } = await supabase\n        .from(\"api_costs\")\n        .select(\"*\")\n        .gte(\n          \"created_at\",\n          new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n        )\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n\n      const totalCost =\n        costs?.reduce((sum, cost) => sum + (cost.cost || 0), 0) || 0;\n      const budgetLimit = parseFloat(process.env.DEFAULT_BUDGET_LIMIT) || 25.0;\n      const utilization = (totalCost / budgetLimit) * 100;\n\n      const analysis = {\n        period: \"Last 24 hours\",\n        total_cost: `$${totalCost.toFixed(2)}`,\n        budget_limit: `$${budgetLimit.toFixed(2)}`,\n        utilization: `${utilization.toFixed(1)}%`,\n        status:\n          utilization > 80\n            ? \"⚠️ HIGH\"\n            : utilization > 50\n            ? \"⚡ MODERATE\"\n            : \"✅ HEALTHY\",\n        recent_costs:\n          costs?.slice(0, 5).map((cost) => ({\n            service: cost.service,\n            cost: `$${cost.cost?.toFixed(3)}`,\n            timestamp: cost.created_at,\n          })) || [],\n      };\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `💰 **Cost Budget Monitor**\\n\\n${JSON.stringify(\n              analysis,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Cost monitoring failed: ${error.message}\\n\\nNote: Ensure api_costs table exists in Supabase`,\n          },\n        ],\n      };\n    }\n  }\n\n  // API Health Dashboard\n  async apiHealthDashboard() {\n    const apis = [\n      { name: \"Google Places\", key: \"GOOGLE_PLACES_API_KEY\" },\n      { name: \"Hunter.io\", key: \"HUNTER_IO_API_KEY\" },\n      { name: \"NeverBounce\", key: \"NEVERBOUNCE_API_KEY\" },\n      { name: \"Foursquare\", key: \"FOURSQUARE_API_KEY\" },\n    ];\n\n    const dashboard = {\n      timestamp: new Date().toISOString(),\n      apis: [],\n    };\n\n    for (const api of apis) {\n      const status = {\n        name: api.name,\n        key_configured: !!process.env[api.key],\n        status: \"unknown\",\n      };\n\n      // Basic configuration check\n      if (process.env[api.key]) {\n        status.status = \"configured\";\n      } else {\n        status.status = \"missing_key\";\n        status.note = \"Check Supabase Vault or environment variables\";\n      }\n\n      dashboard.apis.push(status);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: `🔌 **API Health Dashboard**\\n\\n${JSON.stringify(\n            dashboard,\n            null,\n            2\n          )}`,\n        },\n      ],\n    };\n  }\n\n  // === NEW ENHANCED TOOLS FOR VAULT AND PRODUCTION OPTIMIZATION ===\n\n  // Vault API Key Status Monitor\n  async vaultApiKeyStatus() {\n    try {\n      console.log(\"🔑 Checking Supabase Vault API key status...\");\n\n      // Test Supabase connection\n      const supabaseUrl = process.env.SUPABASE_URL;\n      const supabaseKey = process.env.SUPABASE_SECRET_KEY;\n\n      if (!supabaseUrl || !supabaseKey) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"❌ Supabase credentials not configured in environment\",\n            },\n          ],\n        };\n      }\n\n      const supabase = createClient(supabaseUrl, supabaseKey);\n\n      // Check vault diagnostic function\n      const { data, error } = await supabase.rpc(\"vault_diagnostic_check\");\n\n      if (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `❌ Vault diagnostic failed: ${error.message}`,\n            },\n          ],\n        };\n      }\n\n      let report = \"🔐 **Supabase Vault API Key Status Report**\\n\\n\";\n\n      if (data && data.length > 0) {\n        data.forEach((check) => {\n          const statusIcon =\n            check.status === \"ENABLED\" || check.status === \"COMPLETE\"\n              ? \"✅\"\n              : check.status === \"PARTIAL\"\n              ? \"⚠️\"\n              : \"❌\";\n\n          report += `${statusIcon} **${check.check_name}**: ${check.status}\\n`;\n          report += `   Details: ${check.details}\\n`;\n          report += `   Recommendation: ${check.recommendation}\\n\\n`;\n        });\n      } else {\n        report += \"⚠️ No diagnostic data returned from vault\\n\";\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Error checking vault status: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Production Startup Validator\n  async productionStartupValidator() {\n    try {\n      console.log(\"🔍 Running production startup validation...\");\n\n      const issues = [];\n      const validations = [];\n\n      // Check 1: Environment variables\n      const requiredEnvs = [\"SUPABASE_URL\", \"SUPABASE_SECRET_KEY\"];\n      requiredEnvs.forEach((env) => {\n        const value = process.env[env];\n        if (!value || value.includes(\"your_\")) {\n          issues.push(`Missing or template value for ${env}`);\n        } else {\n          validations.push(`✅ ${env} configured`);\n        }\n      });\n\n      // Check 2: Production mode settings\n      const nodeEnv = process.env.NODE_ENV;\n      if (nodeEnv === \"production\") {\n        validations.push(\"✅ NODE_ENV set to production\");\n\n        // Check degraded start setting\n        if (process.env.ALLOW_DEGRADED_START === \"true\") {\n          issues.push(\n            \"❌ ALLOW_DEGRADED_START=true is not recommended for production\"\n          );\n        } else {\n          validations.push(\n            \"✅ Strict production mode enabled (no degraded starts)\"\n          );\n        }\n      } else {\n        issues.push(`NODE_ENV is '${nodeEnv}', should be 'production'`);\n      }\n\n      // Check 3: Port configuration\n      const port = process.env.PORT;\n      if (port && port !== \"3000\") {\n        validations.push(`✅ Custom port configured: ${port}`);\n      } else {\n        validations.push(\"ℹ️ Using default/standard port configuration\");\n      }\n\n      let report = \"🏭 **Production Startup Validation Report**\\n\\n\";\n\n      report += \"**Validations Passed:**\\n\";\n      validations.forEach((validation) => {\n        report += `${validation}\\n`;\n      });\n\n      if (issues.length > 0) {\n        report += \"\\n**Issues Found:**\\n\";\n        issues.forEach((issue) => {\n          report += `❌ ${issue}\\n`;\n        });\n\n        report += \"\\n**Recommendations:**\\n\";\n        report +=\n          \"1. Ensure GitHub Actions workflows have generated proper .env\\n\";\n        report += \"2. Configure API keys in Supabase Vault\\n\";\n        report +=\n          \"3. Set ALLOW_DEGRADED_START=false for strict production mode\\n\";\n        report += \"4. Verify all secrets are present and valid\\n\";\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Production validation failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // GitHub Workflow Optimizer\n  async githubWorkflowOptimizer() {\n    try {\n      console.log(\"⚙️ Analyzing GitHub Actions workflows...\");\n\n      const workflowsDir = path.join(process.cwd(), \".github\", \"workflows\");\n\n      if (!fs.existsSync(workflowsDir)) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"❌ No .github/workflows directory found\",\n            },\n          ],\n        };\n      }\n\n      const workflows = fs\n        .readdirSync(workflowsDir)\n        .filter((file) => file.endsWith(\".yml\") || file.endsWith(\".yaml\"));\n\n      let report = \"⚙️ **GitHub Actions Workflow Analysis**\\n\\n\";\n\n      const optimizations = [];\n      const issues = [];\n\n      workflows.forEach((workflow) => {\n        const workflowPath = path.join(workflowsDir, workflow);\n        const content = fs.readFileSync(workflowPath, \"utf8\");\n\n        report += `📋 **${workflow}:**\\n`;\n\n        // Check triggers\n        if (content.includes(\"push:\") && content.includes(\"branches: [main]\")) {\n          if (\n            workflow.includes(\"repository-maintenance\") ||\n            workflow.includes(\"docker-env\")\n          ) {\n            issues.push(\n              `${workflow}: Triggers on every push (may cause cascade failures)`\n            );\n            optimizations.push(\n              `Consider schedule-only or manual triggers for ${workflow}`\n            );\n          } else {\n            report += \"  ✅ Push trigger configured for main branch\\n\";\n          }\n        }\n\n        // Check for workflow_dispatch\n        if (content.includes(\"workflow_dispatch:\")) {\n          report += \"  ✅ Manual trigger available\\n\";\n        } else {\n          optimizations.push(\n            `Add workflow_dispatch to ${workflow} for manual testing`\n          );\n        }\n\n        // Check for proper permissions\n        if (content.includes(\"permissions:\")) {\n          report += \"  ✅ Permissions configured\\n\";\n        } else {\n          if (\n            content.includes(\"GITHUB_TOKEN\") ||\n            content.includes(\"secrets.\")\n          ) {\n            issues.push(\n              `${workflow}: Uses secrets but no permissions specified`\n            );\n          }\n        }\n\n        report += \"\\n\";\n      });\n\n      if (optimizations.length > 0) {\n        report += \"**Optimization Recommendations:**\\n\";\n        optimizations.forEach((opt) => {\n          report += `💡 ${opt}\\n`;\n        });\n        report += \"\\n\";\n      }\n\n      if (issues.length > 0) {\n        report += \"**Issues Found:**\\n\";\n        issues.forEach((issue) => {\n          report += `⚠️ ${issue}\\n`;\n        });\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Workflow analysis failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // === SYSTEM DIAGNOSTICS METHODS (from monitoring-server) ===\n\n  async getSystemHealth(args = {}) {\n    const { includeDetailedMetrics = false } = args;\n\n    const health = {\n      timestamp: new Date().toISOString(),\n      status: \"unknown\",\n      components: {},\n      metrics: {},\n    };\n\n    try {\n      // Check critical files\n      const packageJson = await this.checkFile(\"package.json\");\n      const dockerCompose = await this.checkFile(\"docker-compose.yml\");\n      const server = await this.checkFile(\"server.js\");\n\n      health.components = {\n        filesystem: {\n          status: \"healthy\",\n          package_json: packageJson.exists,\n          docker_compose: dockerCompose.exists,\n          server_file: server.exists,\n        },\n      };\n\n      // Check diagnostics file\n      try {\n        const diagnosticsPath = path.join(\n          this.workspaceRoot,\n          \"diagnostics.json\"\n        );\n        const diagnosticsContent = await fs.readFileSync(\n          diagnosticsPath,\n          \"utf8\"\n        );\n        const diagnostics = JSON.parse(diagnosticsContent);\n\n        health.components.diagnostics = {\n          status: diagnostics.status || \"unknown\",\n          last_check: diagnostics.timestamp,\n          database_connection: diagnostics.database?.status === \"connected\",\n        };\n      } catch (error) {\n        health.components.diagnostics = {\n          status: \"unavailable\",\n          error: \"Diagnostics file not found or invalid\",\n        };\n      }\n\n      // Overall health determination\n      const criticalComponents = [\"filesystem\"];\n      const healthyComponents = criticalComponents.filter(\n        (comp) => health.components[comp]?.status === \"healthy\"\n      );\n\n      health.status =\n        healthyComponents.length === criticalComponents.length\n          ? \"healthy\"\n          : healthyComponents.length > 0\n          ? \"degraded\"\n          : \"unhealthy\";\n\n      if (includeDetailedMetrics) {\n        health.metrics = await this.gatherDetailedMetrics();\n      }\n    } catch (error) {\n      health.status = \"error\";\n      health.error = error.message;\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(health, null, 2),\n        },\n      ],\n    };\n  }\n\n  async readDiagnostics(args = {}) {\n    const { includeHistory = true } = args;\n\n    try {\n      const diagnosticsPath = path.join(this.workspaceRoot, \"diagnostics.json\");\n      const content = await fs.readFileSync(diagnosticsPath, \"utf8\");\n      const diagnostics = JSON.parse(content);\n\n      const analysis = {\n        current_diagnostics: diagnostics,\n        analysis: {\n          timestamp: diagnostics.timestamp,\n          status: diagnostics.status,\n          critical_issues: [],\n          warnings: [],\n          recommendations: [],\n        },\n      };\n\n      // Analyze diagnostics data\n      if (diagnostics.database) {\n        if (diagnostics.database.status !== \"connected\") {\n          analysis.analysis.critical_issues.push(\"Database connection failed\");\n        }\n        if (diagnostics.database.error) {\n          analysis.analysis.critical_issues.push(\n            `Database error: ${diagnostics.database.error}`\n          );\n        }\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(analysis, null, 2),\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(\n              {\n                error: `Failed to read diagnostics: ${error.message}`,\n                suggestion:\n                  \"Run the application to generate diagnostics.json file\",\n              },\n              null,\n              2\n            ),\n          },\n        ],\n      };\n    }\n  }\n\n  async analyzeLogs(args = {}) {\n    const { logType = \"all\", timeRange = \"24h\" } = args;\n\n    const logFiles = [\n      \"startup.log\",\n      \"production.log\",\n      \"database-validation.log\",\n    ];\n    const analysis = {\n      log_type: logType,\n      time_range: timeRange,\n      log_files_checked: [],\n      patterns_found: { errors: [], warnings: [], info: [] },\n      summary: {},\n    };\n\n    for (const logFile of logFiles) {\n      try {\n        const logPath = path.join(this.workspaceRoot, logFile);\n        const content = await fs.readFileSync(logPath, \"utf8\");\n        const stats = await fs.statSync(logPath);\n\n        analysis.log_files_checked.push({\n          file: logFile,\n          size: stats.size,\n          last_modified: stats.mtime,\n          line_count: content.split(\"\\n\").length,\n        });\n\n        const errorPatterns = content.match(/ERROR|Error:|error:/gi) || [];\n        if (errorPatterns.length > 0) {\n          analysis.patterns_found.errors.push({\n            file: logFile,\n            count: errorPatterns.length,\n          });\n        }\n      } catch (error) {\n        analysis.log_files_checked.push({\n          file: logFile,\n          error: `Could not read: ${error.message}`,\n        });\n      }\n    }\n\n    analysis.summary = {\n      total_log_files: analysis.log_files_checked.filter((f) => !f.error)\n        .length,\n      total_errors: analysis.patterns_found.errors.reduce(\n        (sum, e) => sum + e.count,\n        0\n      ),\n      health_status:\n        analysis.patterns_found.errors.length === 0\n          ? \"healthy\"\n          : \"needs_attention\",\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(analysis, null, 2),\n        },\n      ],\n    };\n  }\n\n  async validateConfiguration(args = {}) {\n    const { strict = true } = args;\n\n    const validation = {\n      validation_mode: strict ? \"strict\" : \"standard\",\n      results: {},\n      issues: [],\n      recommendations: [],\n    };\n\n    // Check critical files\n    const criticalFiles = [\"package.json\", \"server.js\", \"docker-compose.yml\"];\n    validation.results.critical_files = {};\n\n    for (const file of criticalFiles) {\n      const fileInfo = await this.checkFile(file);\n      validation.results.critical_files[file] = fileInfo;\n\n      if (!fileInfo.exists) {\n        validation.issues.push(`Missing critical file: ${file}`);\n      }\n    }\n\n    if (validation.issues.length === 0) {\n      validation.recommendations.push(\n        \"Configuration appears to be complete and healthy\"\n      );\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(validation, null, 2),\n        },\n      ],\n    };\n  }\n\n  async generatePerformanceReport(args = {}) {\n    const { includeRecommendations = true } = args;\n\n    const report = {\n      generated_at: new Date().toISOString(),\n      performance_metrics: {},\n      analysis: {},\n      recommendations: [],\n    };\n\n    // File system performance metrics\n    const metrics = await this.gatherDetailedMetrics();\n    report.performance_metrics = metrics;\n\n    const totalFiles = Object.values(metrics.file_counts || {}).reduce(\n      (sum, count) => sum + count,\n      0\n    );\n\n    report.analysis = {\n      total_files: totalFiles,\n      estimated_complexity:\n        totalFiles > 100 ? \"complex\" : totalFiles > 50 ? \"moderate\" : \"simple\",\n    };\n\n    if (includeRecommendations) {\n      report.recommendations.push(\n        \"Use MCP servers to offload AI processing tasks\"\n      );\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(report, null, 2),\n        },\n      ],\n    };\n  }\n\n  async monitorAPIQuotas(args = {}) {\n    const { alertThreshold = 80 } = args;\n\n    const quotaMonitoring = {\n      alert_threshold: alertThreshold,\n      api_services: {},\n      alerts: [],\n      recommendations: [],\n    };\n\n    // Mock API quota data (integrate with actual APIs in production)\n    const apiServices = [\n      {\n        name: \"Google Places\",\n        quota: 1000,\n        used: 250,\n        cost_per_request: 0.032,\n      },\n      { name: \"Hunter.io\", quota: 100, used: 45, cost_per_request: 0.04 },\n      { name: \"NeverBounce\", quota: 1000, used: 320, cost_per_request: 0.008 },\n    ];\n\n    apiServices.forEach((service) => {\n      const usagePercent = (service.used / service.quota) * 100;\n      quotaMonitoring.api_services[service.name] = {\n        quota_limit: service.quota,\n        requests_used: service.used,\n        usage_percentage: Math.round(usagePercent),\n        status: usagePercent >= alertThreshold ? \"alert\" : \"ok\",\n      };\n    });\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(quotaMonitoring, null, 2),\n        },\n      ],\n    };\n  }\n\n  // === DATABASE ANALYTICS METHODS (from database-server) ===\n\n  async queryLeads(args = {}) {\n    const { filters = {}, limit = 10, orderBy = \"confidence_score\" } = args;\n\n    await this.initializeSupabase();\n\n    let query = this.supabase\n      .from(\"enhanced_leads\")\n      .select(\"*\")\n      .order(orderBy, { ascending: false })\n      .limit(limit);\n\n    // Apply filters\n    Object.entries(filters).forEach(([key, value]) => {\n      query = query.eq(key, value);\n    });\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw new Error(`Query failed: ${error.message}`);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              results: data,\n              count: data.length,\n              query_info: { filters, limit, orderBy },\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async getCampaignStats(args = {}) {\n    const { campaignId, timeRange = \"24h\" } = args;\n\n    await this.initializeSupabase();\n\n    const intervalMap = {\n      \"24h\": \"1 day\",\n      \"7d\": \"7 days\",\n      \"30d\": \"30 days\",\n    };\n\n    const { data, error } = await this.supabase.rpc(\"get_campaign_statistics\", {\n      p_campaign_id: campaignId,\n      p_time_interval: intervalMap[timeRange] || \"1 day\",\n    });\n\n    if (error) {\n      throw new Error(`Campaign stats query failed: ${error.message}`);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              campaign_id: campaignId,\n              time_range: timeRange,\n              statistics: data,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async analyzeLeadQuality(args = {}) {\n    const { businessType, minConfidence = 70 } = args;\n\n    await this.initializeSupabase();\n\n    let query = this.supabase\n      .from(\"enhanced_leads\")\n      .select(\n        \"confidence_score, business_name, email_confidence, phone_confidence, website_confidence\"\n      )\n      .gte(\"confidence_score\", minConfidence);\n\n    if (businessType) {\n      query = query.ilike(\"business_type\", `%${businessType}%`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw new Error(`Quality analysis failed: ${error.message}`);\n    }\n\n    const analysis = {\n      total_leads: data.length,\n      average_confidence:\n        data.reduce((sum, lead) => sum + lead.confidence_score, 0) /\n        data.length,\n      confidence_distribution: {\n        high: data.filter((l) => l.confidence_score >= 85).length,\n        medium: data.filter(\n          (l) => l.confidence_score >= 70 && l.confidence_score < 85\n        ).length,\n        low: data.filter((l) => l.confidence_score < 70).length,\n      },\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(analysis, null, 2),\n        },\n      ],\n    };\n  }\n\n  async getApiCosts(args = {}) {\n    const { timeRange = \"24h\" } = args;\n\n    await this.initializeSupabase();\n\n    const { data, error } = await this.supabase\n      .from(\"api_costs\")\n      .select(\"*\")\n      .gte(\n        \"created_at\",\n        new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n      )\n      .order(\"created_at\", { ascending: false });\n\n    if (error) {\n      throw new Error(`API costs query failed: ${error.message}`);\n    }\n\n    const totalCost =\n      data?.reduce((sum, cost) => sum + (cost.cost || 0), 0) || 0;\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              time_range: timeRange,\n              total_cost: totalCost,\n              total_requests: data?.length || 0,\n              recent_costs: data?.slice(0, 5) || [],\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  // === API TESTING METHODS (from api-server) ===\n\n  async testGooglePlaces(args = {}) {\n    const { query, location = \"New York, NY\", limit = 5 } = args;\n\n    await this.initializeAPIClients();\n\n    if (!this.apiClients.googlePlaces) {\n      throw new Error(\"Google Places API client not available\");\n    }\n\n    const results = await this.apiClients.googlePlaces.searchBusinesses(\n      query,\n      location,\n      limit\n    );\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Google Places\",\n              query,\n              location,\n              results: results.businesses || [],\n              success: results.found,\n              error: results.error || null,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async testFoursquarePlaces(args = {}) {\n    const { query, location = \"New York, NY\", limit = 5 } = args;\n\n    await this.initializeAPIClients();\n\n    if (!this.apiClients.foursquare) {\n      throw new Error(\"Foursquare API client not available\");\n    }\n\n    const results = await this.apiClients.foursquare.searchBusinesses(\n      query,\n      location,\n      limit\n    );\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Foursquare Places\",\n              query,\n              location,\n              results: results.businesses || [],\n              success: results.found,\n              error: results.error || null,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async testEmailDiscovery(args = {}) {\n    const { domain, limit = 5 } = args;\n\n    await this.initializeAPIClients();\n\n    if (!this.apiClients.hunterIO) {\n      throw new Error(\"Hunter.io API client not available\");\n    }\n\n    const results = await this.apiClients.hunterIO.findEmails(domain, limit);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Hunter.io\",\n              domain,\n              emails: results.emails || [],\n              success: results.found,\n              error: results.error || null,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async verifyEmail(args = {}) {\n    const { email } = args;\n\n    await this.initializeAPIClients();\n\n    if (!this.apiClients.neverBounce) {\n      throw new Error(\"NeverBounce API client not available\");\n    }\n\n    const result = await this.apiClients.neverBounce.verifyEmail(email);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"NeverBounce\",\n              email,\n              verification: result,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async getAPIUsageStats() {\n    await this.initializeAPIClients();\n\n    const stats = {};\n\n    Object.entries(this.apiClients).forEach(([name, client]) => {\n      if (client && typeof client.getUsageStats === \"function\") {\n        stats[name] = client.getUsageStats();\n      }\n    });\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api_usage_statistics: stats,\n              generated_at: new Date().toISOString(),\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async simulateLeadDiscovery(args = {}) {\n    const { businessType, location, maxResults = 3 } = args;\n\n    await this.initializeAPIClients();\n\n    const results = {\n      businessType,\n      location,\n      maxResults,\n      discovery_results: {},\n      processing_summary: {\n        total_discovered: 0,\n        errors: [],\n      },\n    };\n\n    try {\n      // Business Discovery\n      if (this.apiClients.googlePlaces) {\n        const googleResults =\n          await this.apiClients.googlePlaces.searchBusinesses(\n            businessType,\n            location,\n            maxResults\n          );\n        results.discovery_results.google_places = googleResults;\n        results.processing_summary.total_discovered +=\n          googleResults.businesses?.length || 0;\n      }\n\n      if (this.apiClients.foursquare) {\n        const foursquareResults =\n          await this.apiClients.foursquare.searchBusinesses(\n            businessType,\n            location,\n            maxResults\n          );\n        results.discovery_results.foursquare = foursquareResults;\n        results.processing_summary.total_discovered +=\n          foursquareResults.businesses?.length || 0;\n      }\n    } catch (error) {\n      results.processing_summary.errors.push(error.message);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(results, null, 2),\n        },\n      ],\n    };\n  }\n\n  // === FILESYSTEM ANALYSIS METHODS (from filesystem-server) ===\n\n  async analyzeProjectStructure(args = {}) {\n    const { includeFiles = true } = args;\n\n    const structure = await this.walkDirectory(\n      this.workspaceRoot,\n      includeFiles\n    );\n    const analysis = this.analyzeStructure(structure);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              workspace_root: this.workspaceRoot,\n              structure_analysis: analysis,\n              directory_tree: structure,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async findCodePatterns(args = {}) {\n    const {\n      pattern,\n      fileExtensions = [\".js\", \".json\", \".md\", \".sql\"],\n      excludeDirectories = [\"node_modules\", \".git\", \"archive\"],\n    } = args;\n\n    const results = [];\n    const regex = new RegExp(pattern, \"gi\");\n\n    const searchInDirectory = async (dirPath) => {\n      try {\n        const items = await fs.readdirSync(dirPath);\n\n        for (const item of items) {\n          const itemPath = path.join(dirPath, item);\n          const stats = await fs.statSync(itemPath);\n\n          if (stats.isDirectory()) {\n            if (!excludeDirectories.includes(item) && !item.startsWith(\".\")) {\n              await searchInDirectory(itemPath);\n            }\n          } else if (fileExtensions.includes(path.extname(item))) {\n            try {\n              const content = await fs.readFileSync(itemPath, \"utf8\");\n              const matches = [...content.matchAll(regex)];\n\n              if (matches.length > 0) {\n                results.push({\n                  file: path.relative(this.workspaceRoot, itemPath),\n                  matches: matches.length,\n                  details: matches.slice(0, 5).map((match) => ({\n                    match: match[0],\n                  })),\n                });\n              }\n            } catch (readError) {\n              // Skip files that can't be read\n            }\n          }\n        }\n      } catch (error) {\n        // Skip directories that can't be accessed\n      }\n    };\n\n    await searchInDirectory(this.workspaceRoot);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              pattern,\n              total_matches: results.reduce((sum, r) => sum + r.matches, 0),\n              files_with_matches: results.length,\n              results,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async analyzeAPIClients(args = {}) {\n    const { detailed = false } = args;\n    const apiClientsPath = path.join(\n      this.workspaceRoot,\n      \"modules\",\n      \"api-clients\"\n    );\n\n    try {\n      const files = await fs.readdirSync(apiClientsPath);\n      const analysis = { clients: [], summary: {} };\n\n      for (const file of files) {\n        if (path.extname(file) === \".js\") {\n          const filePath = path.join(apiClientsPath, file);\n          const content = await fs.readFileSync(filePath, \"utf8\");\n\n          const clientAnalysis = {\n            name: file,\n            size: content.length,\n            method_count: (content.match(/async\\s+\\w+\\(|^\\s*\\w+\\s*\\(/gm) || [])\n              .length,\n            error_handling: (content.match(/try\\s*{|catch\\s*\\(/g) || []).length,\n            caching_implemented:\n              content.includes(\"cache\") || content.includes(\"Cache\"),\n          };\n\n          analysis.clients.push(clientAnalysis);\n        }\n      }\n\n      analysis.summary = {\n        total_clients: analysis.clients.length,\n        total_methods: analysis.clients.reduce(\n          (sum, c) => sum + c.method_count,\n          0\n        ),\n        clients_with_caching: analysis.clients.filter(\n          (c) => c.caching_implemented\n        ).length,\n      };\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(analysis, null, 2),\n          },\n        ],\n      };\n    } catch (error) {\n      throw new Error(`Failed to analyze API clients: ${error.message}`);\n    }\n  }\n\n  async checkFakeDataViolations(args = {}) {\n    const { strict = true } = args;\n\n    const suspiciousPatterns = [\n      \"Artisan\\\\s+Bistro\",\n      \"Downtown\\\\s+Café?\",\n      \"Business\\\\s+LLC\",\n      \"\\\\(555\\\\)\\\\s*\\\\d{3}-\\\\d{4}\",\n      \"example\\\\.com\",\n      \"generateFake\",\n      \"mockData\",\n    ];\n\n    const violations = [];\n\n    for (const pattern of suspiciousPatterns) {\n      const patternResults = await this.findCodePatterns({\n        pattern,\n        fileExtensions: [\".js\", \".json\"],\n        excludeDirectories: [\"node_modules\", \".git\", \"archive\", \"tests\"],\n      });\n\n      const data = JSON.parse(patternResults.content[0].text);\n      if (data.results.length > 0) {\n        violations.push({\n          pattern,\n          severity: strict ? \"HIGH\" : \"MEDIUM\",\n          matches: data.results,\n        });\n      }\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              check_mode: strict ? \"strict\" : \"standard\",\n              total_violations: violations.length,\n              violations,\n              recommendation:\n                violations.length > 0\n                  ? \"IMMEDIATE ACTION REQUIRED: Remove all fake data patterns\"\n                  : \"No fake data violations detected - good!\",\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  // === HELPER METHODS ===\n\n  async checkFile(relativePath) {\n    try {\n      const filePath = path.join(this.workspaceRoot, relativePath);\n      const stats = await fs.statSync(filePath);\n      return {\n        exists: true,\n        size: stats.size,\n        modified: stats.mtime,\n      };\n    } catch (error) {\n      return {\n        exists: false,\n        error: error.message,\n      };\n    }\n  }\n\n  async gatherDetailedMetrics() {\n    const metrics = {\n      disk_usage: {},\n      file_counts: {},\n    };\n\n    try {\n      // Count files by extension\n      const fileExtensions = await this.countFilesByExtension();\n      metrics.file_counts = fileExtensions;\n\n      // Calculate directory sizes for key directories\n      const directories = [\"modules\", \"api\", \"database\", \"mcp-servers\"];\n      for (const dir of directories) {\n        try {\n          const dirPath = path.join(this.workspaceRoot, dir);\n          const size = await this.getDirectorySize(dirPath);\n          metrics.disk_usage[dir] = size;\n        } catch (error) {\n          metrics.disk_usage[dir] = { error: error.message };\n        }\n      }\n    } catch (error) {\n      metrics.error = error.message;\n    }\n\n    return metrics;\n  }\n\n  async countFilesByExtension() {\n    const counts = {};\n\n    const countInDirectory = async (dirPath) => {\n      try {\n        const items = await fs.readdirSync(dirPath);\n\n        for (const item of items) {\n          const itemPath = path.join(dirPath, item);\n          const stats = await fs.statSync(itemPath);\n\n          if (stats.isDirectory()) {\n            if (\n              item !== \"node_modules\" &&\n              !item.startsWith(\".\") &&\n              item !== \"archive\"\n            ) {\n              await countInDirectory(itemPath);\n            }\n          } else {\n            const ext = path.extname(item) || \"no-extension\";\n            counts[ext] = (counts[ext] || 0) + 1;\n          }\n        }\n      } catch (error) {\n        // Skip inaccessible directories\n      }\n    };\n\n    await countInDirectory(this.workspaceRoot);\n    return counts;\n  }\n\n  async getDirectorySize(dirPath) {\n    let totalSize = 0;\n\n    try {\n      const items = await fs.readdirSync(dirPath);\n\n      for (const item of items) {\n        const itemPath = path.join(dirPath, item);\n        const stats = await fs.statSync(itemPath);\n\n        if (stats.isDirectory()) {\n          if (item !== \"node_modules\" && !item.startsWith(\".\")) {\n            totalSize += await this.getDirectorySize(itemPath);\n          }\n        } else {\n          totalSize += stats.size;\n        }\n      }\n    } catch (error) {\n      // Skip inaccessible directories\n    }\n\n    return totalSize;\n  }\n\n  async walkDirectory(dirPath, includeFiles, currentDepth = 0, maxDepth = 4) {\n    if (currentDepth > maxDepth) return null;\n\n    const result = {\n      name: path.basename(dirPath),\n      type: \"directory\",\n      children: [],\n    };\n\n    try {\n      const items = await fs.readdirSync(dirPath);\n\n      for (const item of items) {\n        if (item.startsWith(\".\") && !item.includes(\"vscode\")) continue;\n        if ([\"node_modules\", \"archive\"].includes(item)) continue;\n\n        const itemPath = path.join(dirPath, item);\n        const stats = await fs.statSync(itemPath);\n\n        if (stats.isDirectory()) {\n          const childResult = await this.walkDirectory(\n            itemPath,\n            includeFiles,\n            currentDepth + 1,\n            maxDepth\n          );\n          if (childResult) result.children.push(childResult);\n        } else if (includeFiles) {\n          result.children.push({\n            name: item,\n            type: \"file\",\n            size: stats.size,\n            extension: path.extname(item),\n          });\n        }\n      }\n    } catch (error) {\n      result.error = error.message;\n    }\n\n    return result;\n  }\n\n  analyzeStructure(structure) {\n    const analysis = {\n      total_directories: 0,\n      total_files: 0,\n      file_types: {},\n      key_directories: [],\n    };\n\n    const analyzeNode = (node) => {\n      if (node.type === \"directory\") {\n        analysis.total_directories++;\n\n        // Identify key directories\n        const keyDirs = [\n          \"api\",\n          \"modules\",\n          \"config\",\n          \"database\",\n          \"mcp-servers\",\n          \"scripts\",\n        ];\n        if (keyDirs.includes(node.name)) {\n          analysis.key_directories.push({\n            name: node.name,\n            children_count: node.children?.length || 0,\n          });\n        }\n\n        if (node.children) {\n          node.children.forEach(analyzeNode);\n        }\n      } else if (node.type === \"file\") {\n        analysis.total_files++;\n        const ext = node.extension || \"no-extension\";\n        analysis.file_types[ext] = (analysis.file_types[ext] || 0) + 1;\n      }\n    };\n\n    analyzeNode(structure);\n    return analysis;\n  }\n\n  // Additional helper methods...\n  async makeHttpsRequest(options) {\n    return new Promise((resolve, reject) => {\n      const req = https.request(options, (res) => {\n        let data = \"\";\n        res.on(\"data\", (chunk) => (data += chunk));\n        res.on(\"end\", () => {\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            resolve(data);\n          } else {\n            reject(new Error(`HTTP ${res.statusCode}: ${data}`));\n          }\n        });\n      });\n      req.on(\"error\", reject);\n      req.end();\n    });\n  }\n\n  setupErrorHandling() {\n    this.server.onerror = (error) => {\n      console.error(\"[Production MCP Server Error]:\", error);\n    };\n\n    process.on(\"SIGINT\", async () => {\n      await this.server.close();\n      process.exit(0);\n    });\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\n      \"🚀 ProspectPro Production MCP Server v4.1 - Post-Cleanup Enhanced\"\n    );\n    console.error(\n      \"   📊 Tier-Aware Monitoring | 🗄️  Database Analytics | 🔧 System Diagnostics\"\n    );\n    console.error(\n      \"   🔌 API Testing | 📁 Filesystem Analysis | 🛡️  Zero Fake Data Enforcement\"\n    );\n  }\n}\n\n// Start server if run directly\nif (require.main === module) {\n  const server = new ProductionMCPServer();\n  server.run().catch(console.error);\n}\n\nmodule.exports = ProductionMCPServer;\n"}}},
{"type":"measure","name":"lsp.did_open","count":1,"duration":108.284},
{"type":"mark","name":"lsp.did_open","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/PRODUCTION_MCP_INITIALIZED.md","languageId":"markdown","version":1,"text":"# ProspectPro Production MCP Server - INITIALIZED ✅\n\n## Server Status: **ACTIVE**\n\n- **Port**: Running via stdio transport\n- **Process ID**: 3a3d1917-1648-44de-bb79-095c15528637\n- **Version**: 4.1.0 Post-Cleanup Enhanced\n- **Total Tools**: 28 production-ready tools\n\n## Available Tool Categories:\n\n### 🚀 **Production Monitoring (8 tools)**\n\n- `environment_health_check` - Check Supabase environment status\n- `github_actions_monitor` - Monitor CI/CD pipeline status\n- `dev_prod_config_diff` - Compare development vs production configurations\n- `cost_budget_monitor` - Track API costs and budget usage\n- `api_health_dashboard` - Monitor all API endpoints\n- `vault_api_key_status` - Check Supabase Vault API key status\n- `production_startup_validator` - Validate production deployment readiness\n- `github_workflow_optimizer` - Optimize GitHub Actions workflows\n\n### 🔧 **System Diagnostics (6 tools)**\n\n- `get_system_health` - Overall system health check\n- `read_diagnostics` - Read system diagnostic information\n- `analyze_logs` - Analyze application logs for issues\n- `validate_configuration` - Validate all configuration files\n- `generate_performance_report` - Generate performance analysis report\n- `monitor_api_quotas` - Monitor API rate limits and quotas\n\n### 📊 **Database Analytics (4 tools)**\n\n- `query_leads` - Query and analyze lead data from database\n- `get_campaign_stats` - Get comprehensive campaign statistics\n- `analyze_lead_quality` - Analyze lead quality metrics and scoring\n- `get_api_costs` - Get detailed API cost breakdown\n\n### 🧪 **API Testing (6 tools)**\n\n- `test_google_places` - Test Google Places API integration\n- `test_foursquare_places` - Test Foursquare Places API integration\n- `test_email_discovery` - Test email discovery APIs (Hunter.io)\n- `verify_email` - Test email verification APIs (NeverBounce)\n- `get_api_usage_stats` - Get detailed API usage statistics\n- `simulate_lead_discovery` - Simulate full lead discovery workflow\n\n### 📁 **Filesystem Analysis (4 tools)**\n\n- `analyze_project_structure` - Analyze ProspectPro project structure\n- `find_code_patterns` - Find specific code patterns across codebase\n- `analyze_api_clients` - Analyze API client implementations\n- `check_fake_data_violations` - Enforce zero fake data policy with strict detection\n\n## MCP Integration Status:\n\n- ✅ **Server**: Production MCP server running\n- ✅ **Transport**: stdio transport active\n- ✅ **Tools**: All 28 tools loaded and available\n- ✅ **Supabase**: Ready for database operations\n- ✅ **API Testing**: Ready for API validation\n- ✅ **Monitoring**: Real-time monitoring capabilities active\n\n## Usage Examples:\n\n### Environment Health Check:\n\n```bash\n# Use tool: environment_health_check\n# Checks Supabase connection, Edge Functions, and database status\n```\n\n### Campaign Analytics:\n\n```bash\n# Use tool: get_campaign_stats\n# Returns comprehensive campaign statistics and performance metrics\n```\n\n### API Testing:\n\n```bash\n# Use tool: test_google_places\n# Tests Google Places API with sample queries\n```\n\n### Cost Monitoring:\n\n```bash\n# Use tool: cost_budget_monitor\n# Tracks API costs and budget utilization\n```\n\nThe production MCP server is now fully initialized and ready for comprehensive ProspectPro monitoring, analytics, and troubleshooting! 🎉\n"}}},
{"type":"measure","name":"lsp.did_open","count":2,"duration":0.062},
{"type":"mark","name":"lsp.did_open","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/PRODUCTION_MCP_SERVER_INITIALIZED.md","languageId":"markdown","version":1,"text":"# ProspectPro Production MCP Server - Initialized Successfully\n\n## Server Status: ✅ RUNNING\n\n- **Process ID**: Initialized via GitHub Codespaces session (Oct 8, 2025)\n- **Version**: v4.1 Post-Cleanup Enhanced\n- **Status**: Active and operational\n- **Architecture**: Verified Business Intelligence Platform\n\n## Server Capabilities\n\n### 📊 **Production Monitoring**\n\n- Real-time system performance tracking\n- Business intelligence data pipeline monitoring\n- Contact verification workflow analytics\n- API usage and cost optimization tracking\n\n### 🗄️ **Database Analytics**\n\n- Supabase database health monitoring\n- Lead verification status tracking\n- Apollo API integration analytics\n- Professional licensing verification metrics\n\n### 🔧 **System Diagnostics**\n\n- Edge Function performance monitoring\n- Verification service health checks\n- Zero fake data policy enforcement\n- Contact discovery pipeline diagnostics\n\n### 🔌 **API Testing**\n\n- Apollo API connectivity validation\n- Professional licensing API testing\n- Chamber of Commerce directory verification\n- Google Places API integration testing\n\n### 📁 **Filesystem Analysis**\n\n- Project structure validation\n- Configuration file monitoring\n- Database schema verification\n- Zero fake data enforcement with strict pattern detection\n\n### 🛡️ **Security Validation**\n\n- Authentication token verification\n- Data source attribution validation\n- Fake data pattern detection\n- Professional contact verification\n\n## MCP Tools Available (28 Total)\n\nThe production server provides comprehensive access to ProspectPro's verified business intelligence infrastructure through the Model Context Protocol, enabling AI assistants to:\n\n- Monitor contact verification pipelines\n- Analyze professional data source performance\n- Validate zero fake data policy compliance\n- Track Apollo API usage and effectiveness\n- Diagnose verification workflow issues\n- Optimize contact discovery costs\n\n## Integration Status\n\n✅ **Supabase Edge Functions**: Connected and monitored  \n✅ **Apollo API**: Authentication validated  \n✅ **Professional Licensing**: Directory access confirmed  \n✅ **Chamber of Commerce**: Verification pipeline active  \n✅ **Database Analytics**: Real-time monitoring enabled  \n✅ **Zero Fake Data Policy**: Enforcement active\n\n## Usage\n\nThe production MCP server is now available for AI-assisted development, monitoring, and troubleshooting of ProspectPro's verified business intelligence platform. AI assistants can access all 28 production tools for comprehensive system management and optimization.\n\n---\n\n**Initialized**: October 8, 2025  \n**Server Version**: v4.1 Post-Cleanup Enhanced  \n**Platform**: ProspectPro Verified Business Intelligence  \n**Status**: Production Ready with Zero Fake Data Policy\n"}}},
{"type":"measure","name":"lsp.did_open","count":3,"duration":0.044},
{"type":"mark","name":"lsp.did_open","count":4,"args":{"textDocument":{"uri":"file:///home/node/.vscode-remote/data/Machine/settings.json","languageId":"jsonc","version":1,"text":"{\n  \"github.copilot.chat.codeGeneration.instructions\": [\n    {\n      \"text\": \"This dev container includes an up-to-date version of Git, built from source as needed, pre-installed and available on the `PATH`.\"\n    },\n    {\n      \"text\": \"This dev container includes `node`, `npm` and `eslint` pre-installed and available on the `PATH` for Node.js and JavaScript development.\"\n    },\n    {\n      \"text\": \"This dev container includes an up-to-date version of Git, built from source as needed, pre-installed and available on the `PATH`.\"\n    },\n    {\n      \"text\": \"This workspace is in a dev container running on \\\"Debian GNU/Linux 13 (trixie)\\\".\\n\\nUse `\\\"$BROWSER\\\" <url>` to open a webpage in the host's default browser.\\n\\nSome of the command line tools available on the `PATH`: `apt`, `dpkg`, `git`, `curl`, `wget`, `ssh`, `scp`, `rsync`, `gpg`, `ps`, `lsof`, `netstat`, `top`, `tree`, `find`, `grep`, `zip`, `unzip`, `tar`, `gzip`, `bzip2`, `xz`\"\n    }\n  ],\n  \"terminal.integrated.defaultProfile.linux\": \"bash\",\n  \"deno.enable\": true,\n  \"deno.enablePaths\": [\"supabase/functions\"],\n  \"git.autofetch\": true,\n  \"git.confirmSync\": false,\n  \"git.enableSmartCommit\": true,\n  \"editor.minimap.enabled\": false,\n  \"editor.renderWhitespace\": \"none\",\n  \"editor.renderControlCharacters\": false,\n  \"workbench.colorTheme\": \"Vira Deepforest\",\n  \"workbench.iconTheme\": \"vira-icons-teal\",\n  \"workbench.list.smoothScrolling\": false,\n  \"workbench.tree.renderIndentGuides\": \"none\",\n  \"workbench.editor.closeOnFileDelete\": true,\n  \"workbench.colorCustomizations\": {\n    \"[Vira*]\": {\n      \"statusBar.debuggingBackground\": \"#80CBC433\",\n      \"statusBar.debuggingForeground\": \"#80CBC4\",\n      \"toolbar.activeBackground\": \"#80CBC426\",\n      \"button.background\": \"#80CBC4\",\n      \"button.hoverBackground\": \"#80CBC4cc\",\n      \"extensionButton.separator\": \"#80CBC433\",\n      \"extensionButton.background\": \"#80CBC414\",\n      \"extensionButton.foreground\": \"#80CBC4\",\n      \"extensionButton.hoverBackground\": \"#80CBC433\",\n      \"extensionButton.prominentForeground\": \"#80CBC4\",\n      \"extensionButton.prominentBackground\": \"#80CBC414\",\n      \"extensionButton.prominentHoverBackground\": \"#80CBC433\",\n      \"activityBarBadge.background\": \"#80CBC4\",\n      \"activityBar.activeBorder\": \"#80CBC4\",\n      \"activityBarTop.activeBorder\": \"#80CBC4\",\n      \"list.inactiveSelectionIconForeground\": \"#80CBC4\",\n      \"list.activeSelectionForeground\": \"#80CBC4\",\n      \"list.inactiveSelectionForeground\": \"#80CBC4\",\n      \"list.highlightForeground\": \"#80CBC4\",\n      \"sash.hoverBorder\": \"#80CBC480\",\n      \"list.activeSelectionIconForeground\": \"#80CBC4\",\n      \"scrollbarSlider.activeBackground\": \"#80CBC480\",\n      \"editorSuggestWidget.highlightForeground\": \"#80CBC4\",\n      \"textLink.foreground\": \"#80CBC4\",\n      \"progressBar.background\": \"#80CBC4\",\n      \"pickerGroup.foreground\": \"#80CBC4\",\n      \"tab.activeBorder\": \"#80CBC400\",\n      \"tab.activeBorderTop\": \"#80CBC4\",\n      \"tab.unfocusedActiveBorder\": \"#80CBC400\",\n      \"tab.unfocusedActiveBorderTop\": \"#80CBC4\",\n      \"tab.activeModifiedBorder\": \"#80CBC4\",\n      \"notificationLink.foreground\": \"#80CBC4\",\n      \"editorWidget.resizeBorder\": \"#80CBC4\",\n      \"editorWidget.border\": \"#80CBC4\",\n      \"settings.modifiedItemIndicator\": \"#80CBC4\",\n      \"panelTitle.activeBorder\": \"#80CBC4\",\n      \"breadcrumb.activeSelectionForeground\": \"#80CBC4\",\n      \"menu.selectionForeground\": \"#80CBC4\",\n      \"menubar.selectionForeground\": \"#80CBC4\",\n      \"editor.findMatchBorder\": \"#80CBC4\",\n      \"selection.background\": \"#80CBC440\",\n      \"statusBarItem.remoteBackground\": \"#80CBC414\",\n      \"statusBarItem.remoteHoverBackground\": \"#80CBC4\",\n      \"statusBarItem.remoteForeground\": \"#80CBC4\",\n      \"notebook.inactiveFocusedCellBorder\": \"#80CBC480\",\n      \"commandCenter.activeBorder\": \"#80CBC480\",\n      \"chat.slashCommandForeground\": \"#80CBC4\",\n      \"chat.avatarForeground\": \"#80CBC4\",\n      \"activityBarBadge.foreground\": \"#000000\",\n      \"button.foreground\": \"#000000\",\n      \"statusBarItem.remoteHoverForeground\": \"#000000\",\n      \"editorGroupHeader.tabsBackground\": \"#ffffff0a\",\n      \"tab.border\": \"#ffffff01\",\n      \"tab.inactiveBackground\": \"#ffffff01\",\n      \"widget.shadow\": \"#00000000\",\n      \"scrollbar.shadow\": \"#00000000\"\n    },\n    \"[Vira Deepforest]\": {\n      \"titleBar.activeBackground\": \"#1a4d3a\",\n      \"titleBar.activeForeground\": \"#ffffff\",\n      \"statusBar.background\": \"#1a4d3a\",\n      \"statusBar.foreground\": \"#ffffff\",\n      \"activityBar.background\": \"#0d2818\",\n      \"panel.background\": \"#0a1f14\"\n    },\n    \"statusBar.background\": \"#667eea\",\n    \"statusBar.foreground\": \"#ffffff\"\n  },\n  \"workbench.settings.editor\": \"json\",\n  \"breadcrumbs.enabled\": true,\n  \"files.watcherExclude\": {\n    \"**/*.log\": true,\n    \"**/*.tmp\": true,\n    \"**/node_modules/**\": true,\n    \"**/archive/**\": true,\n    \"**/.git/**\": true,\n    \"**/logs/**\": true\n  },\n  \"search.exclude\": {\n    \"**/node_modules\": true,\n    \"**/*.log\": true,\n    \"**/archive/**\": true,\n    \"**/.git\": true\n  },\n  \"search.searchOnType\": false,\n  \"github.copilot.chat.historyCount\": 8,\n  \"github.copilot.chat.welcomeMessage\": \"none\",\n  \"github.copilot.chat.completionPhrasesEnabled\": false,\n  \"github.copilot.advanced.setAutoCompletionTriggerThreshold\": 30,\n  \"terminal.integrated.gpuAcceleration\": \"on\",\n  \"terminal.integrated.scrollback\": 1000,\n  \"terminal.integrated.fontFamily\": \"Consolas, 'Courier New', monospace\",\n  \"terminal.integrated.fontSize\": 13,\n  \"window.title\": \"🔨 ${folderName} - ProspectPro Development ${separator} ${activeEditorShort}\",\n  \"workbench.startupEditor\": \"welcomePageInEmptyWorkbench\",\n  \"mcp.enable\": true,\n  \"mcp.configFile\": \"${workspaceFolder}/.vscode/mcp-config.json\",\n  \"rest-client.enableTelemetry\": false,\n  \"files.associations\": {\n    \"*.http\": \"http\",\n    \"*.rest\": \"http\"\n  },\n  \"ai.contextAware\": true,\n  \"ai.projectContext\": {\n    \"type\": \"lead-generation-platform\",\n    \"framework\": \"node-express\",\n    \"database\": \"supabase\",\n    \"apis\": [\"google-places\", \"foursquare\", \"hunter-io\", \"neverbounce\"],\n    \"deployment\": \"docker-compose\",\n    \"monitoring\": \"custom-diagnostics\"\n  },\n  \"snyk.advanced.cliPath\": \"/home/node/.local/share/snyk/vscode-cli/snyk-linux\",\n  \"github.copilot.advanced\": {\n    \"setAutoCompletionTriggerThreshold\": 30\n  },\n  \"containers.containerClient\": \"com.microsoft.visualstudio.containers.docker\",\n  \"containers.orchestratorClient\": \"com.microsoft.visualstudio.orchestrators.dockercompose\"\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":4,"duration":0.07},
{"type":"mark","name":"lsp.did_close","count":1,"args":{"textDocument":{"uri":"file:///home/node/.vscode-remote/data/Machine/settings.json"}}},
{"type":"measure","name":"lsp.did_close","count":1,"duration":0.014},
{"type":"mark","name":"lsp.did_open","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/index.html","languageId":"html","version":1,"text":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon-yellow-arrow.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ProspectPro - Real Business Lead Discovery</title>\n    <meta\n      name=\"description\"\n      content=\"Zero fake data lead generation platform with real-time business validation\"\n    />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n"}}},
{"type":"measure","name":"lsp.did_open","count":5,"duration":0.02},
{"type":"mark","name":"lsp.did_open","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/components/Layout.tsx","languageId":"typescriptreact","version":1,"text":"import React, { ReactNode, useMemo } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport { AuthComponent } from \"./AuthComponent\";\nimport { ThemeToggle } from \"./ThemeToggle\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport const Layout: React.FC<LayoutProps> = ({ children }) => {\n  const location = useLocation();\n  const { user } = useAuth();\n  const { currentCampaign, campaigns } = useCampaignStore((state) => ({\n    currentCampaign: state.currentCampaign,\n    campaigns: state.campaigns,\n  }));\n\n  const runningCampaignId = useMemo(() => {\n    if (currentCampaign?.status === \"running\") {\n      return currentCampaign.campaign_id;\n    }\n\n    const runningCampaign = campaigns.find(\n      (campaign) => campaign.status === \"running\"\n    );\n\n    return runningCampaign?.campaign_id ?? null;\n  }, [campaigns, currentCampaign]);\n\n  type NavigationItem = {\n    name: string;\n    href: string;\n    disabled?: boolean;\n    isActive?: (pathname: string) => boolean;\n  };\n\n  const navigation: NavigationItem[] = useMemo(() => {\n    const items: NavigationItem[] = [\n      {\n        name: \"Start Discovery\",\n        href: \"/discovery\",\n        isActive: (pathname) => pathname === \"/\" || pathname === \"/discovery\",\n      },\n      {\n        name: \"My Campaigns\",\n        href: \"/dashboard\",\n        disabled: !user,\n      },\n    ];\n\n    if (runningCampaignId) {\n      items.push({\n        name: \"Live Progress\",\n        href: `/campaign/${runningCampaignId}/progress`,\n        isActive: (pathname) =>\n          pathname.startsWith(`/campaign/${runningCampaignId}/progress`),\n      });\n    }\n\n    items.push({\n      name: \"Results\",\n      href: \"/results\",\n    });\n\n    return items;\n  }, [runningCampaignId, user]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 text-gray-900 transition-colors dark:bg-slate-900 dark:text-slate-100\">\n      <header className=\"border-b border-yellow-400 bg-[#f9ed69] text-gray-900 dark:border-yellow-500 dark:bg-[#f9ed69] dark:text-gray-900\">\n        <div className=\"mx-auto flex h-16 max-w-5xl items-center justify-between px-6\">\n          <Link\n            to=\"/\"\n            className=\"flex h-full items-center\"\n            aria-label=\"ProspectPro home\"\n          >\n            <img\n              src=\"/logo-full.svg\"\n              alt=\"ProspectPro\"\n              className=\"h-16 w-auto\"\n            />\n          </Link>\n          <div className=\"flex items-center space-x-3\">\n            <AuthComponent />\n            <div className=\"h-10 w-px bg-gray-300\" aria-hidden=\"true\" />\n            <ThemeToggle />\n          </div>\n        </div>\n      </header>\n      <nav className=\"border-b border-gray-200 bg-white text-sm font-medium transition-colors dark:border-slate-700 dark:bg-slate-900\">\n        <div className=\"mx-auto flex max-w-5xl items-center px-6\">\n          {navigation.map((item) => {\n            const isActive =\n              !item.disabled &&\n              (item.isActive\n                ? item.isActive(location.pathname)\n                : location.pathname === item.href);\n\n            if (item.disabled) {\n              return (\n                <span\n                  key={item.name}\n                  className=\"flex items-center border-b-2 border-transparent px-4 py-3 text-gray-400\"\n                  aria-disabled=\"true\"\n                >\n                  {item.name}\n                </span>\n              );\n            }\n\n            return (\n              <Link\n                key={item.name}\n                to={item.href}\n                className={`flex items-center border-b-2 px-4 py-3 transition-colors ${\n                  isActive\n                    ? \"border-blue-600 text-blue-700 dark:border-sky-400 dark:text-sky-300\"\n                    : \"border-transparent text-gray-600 hover:text-gray-900 dark:text-slate-400 dark:hover:text-slate-50\"\n                }`}\n              >\n                {item.name}\n              </Link>\n            );\n          })}\n        </div>\n      </nav>\n\n      <main className=\"mx-auto max-w-5xl px-6 pb-12 pt-8 sm:pb-16 sm:pt-10\">\n        {children}\n      </main>\n    </div>\n  );\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_open","count":6,"duration":1.672},
{"type":"measure","name":"lsp.testing_update","count":1,"duration":1.138},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":2,"duration":0.152},
{"type":"mark","name":"lsp.did_open","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/contexts/AuthContext.tsx","languageId":"typescriptreact","version":1,"text":"import { Session, User } from \"@supabase/supabase-js\";\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { supabase } from \"../lib/supabase\";\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  sessionUserId: string | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (email: string, password: string) => Promise<void>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [sessionUserId, setSessionUserId] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Initialize auth session (create anonymous session if needed)\n    const initializeAuth = async () => {\n      try {\n        // Get current session\n        const {\n          data: { session },\n          error: sessionError,\n        } = await supabase.auth.getSession();\n\n        if (sessionError) {\n          console.error(\"Session error:\", sessionError);\n        }\n\n        if (session?.user) {\n          setSession(session);\n          setUser(session.user);\n          setSessionUserId(session.user.id);\n        } else {\n          setSession(null);\n          setUser(null);\n          setSessionUserId(null);\n        }\n\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Auth initialization error:\", error);\n        setSession(null);\n        setUser(null);\n        setSessionUserId(null);\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log(\"Auth state changed:\", event, session?.user?.id);\n\n      if (session?.user) {\n        setSession(session);\n        setUser(session.user);\n        setSessionUserId(session.user.id);\n      } else {\n        setSession(null);\n        setUser(null);\n        setSessionUserId(null);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n    if (error) throw error;\n  };\n\n  const signUp = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signUp({\n      email,\n      password,\n    });\n    if (error) throw error;\n  };\n\n  const signOut = async () => {\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n    setSession(null);\n    setUser(null);\n    setSessionUserId(null);\n  };\n\n  const value = {\n    user,\n    session,\n    sessionUserId,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":3,"duration":0.173},
{"type":"measure","name":"lsp.did_open","count":7,"duration":2.586},
{"type":"mark","name":"lsp.did_open","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/lib/supabase.ts","languageId":"typescript","version":1,"text":"import { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl =\n  import.meta.env.VITE_SUPABASE_URL ||\n  import.meta.env.NEXT_PUBLIC_SUPABASE_URL ||\n  import.meta.env.SUPABASE_URL;\n\nconst supabaseAnonKey =\n  import.meta.env.VITE_SUPABASE_ANON_KEY ||\n  import.meta.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ||\n  import.meta.env.SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error(\"Missing Supabase environment variables\");\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    persistSession: true,\n    autoRefreshToken: true,\n  },\n});\n\nexport const SUPABASE_ANON_TOKEN = supabaseAnonKey;\n\n// Helper function to get current session token for Edge Function calls\nexport const getSessionToken = async (): Promise<string | null> => {\n  const {\n    data: { session },\n    error,\n  } = await supabase.auth.getSession();\n\n  if (error) {\n    console.error(\"Error getting session:\", error);\n    return null;\n  }\n\n  // Return the access token (JWT) from the session\n  return session?.access_token ?? null;\n};\n\n// Helper function to ensure we have a valid session\nexport const ensureSession = async (): Promise<boolean> => {\n  const {\n    data: { session },\n    error,\n  } = await supabase.auth.getSession();\n\n  if (error) {\n    console.error(\"Failed to read session:\", error);\n    return false;\n  }\n\n  return Boolean(session?.access_token);\n};\n\n// Edge Functions URL\nexport const EDGE_FUNCTIONS_URL =\n  import.meta.env.VITE_EDGE_FUNCTIONS_URL || `${supabaseUrl}/functions/v1`;\n\n// Edge Function endpoints for vault-secured progressive enrichment\nexport const EDGE_FUNCTIONS = {\n  // Progressive Enrichment Orchestrator (vault-secured)\n  ENRICHMENT_ORCHESTRATOR: `${EDGE_FUNCTIONS_URL}/enrichment-orchestrator`,\n\n  // Individual enrichment services (vault-secured)\n  ENRICHMENT_BUSINESS_LICENSE: `${EDGE_FUNCTIONS_URL}/enrichment-business-license`,\n  ENRICHMENT_PDL: `${EDGE_FUNCTIONS_URL}/enrichment-pdl`,\n  ENRICHMENT_HUNTER: `${EDGE_FUNCTIONS_URL}/enrichment-hunter`,\n  ENRICHMENT_NEVERBOUNCE: `${EDGE_FUNCTIONS_URL}/enrichment-neverbounce`,\n\n  // Legacy endpoints (for backward compatibility)\n  ENHANCED_BUSINESS_DISCOVERY: `${EDGE_FUNCTIONS_URL}/enhanced-business-discovery`,\n  LEAD_VALIDATION: `${EDGE_FUNCTIONS_URL}/lead-validation-edge`,\n  BUSINESS_DISCOVERY: `${EDGE_FUNCTIONS_URL}/business-discovery-edge`,\n  DIAGNOSTICS: `${EDGE_FUNCTIONS_URL}/diag`,\n} as const;\n\n// Progressive Enrichment Tiers - Consolidated to 3 Tiers\nexport const ENRICHMENT_TIERS = {\n  BASE: {\n    name: \"Base\",\n    price: 0.15, // Essential Business Data\n    stages: [\"business-verification\", \"company-data\"],\n    description:\n      \"Essential Business Data - Perfect for targeted outreach campaigns\",\n    features: [\n      \"Business verification\",\n      \"Company data (name, industry, size)\",\n      \"Phone & address validation\",\n      \"Generic company email\",\n    ],\n    badge: \"Most Popular\",\n    hasOwnershipData: false,\n  },\n  PROFESSIONAL: {\n    name: \"Professional\",\n    price: 0.45, // Enhanced Sales Intelligence\n    stages: [\n      \"business-verification\",\n      \"company-data\",\n      \"email-discovery\",\n      \"email-verification\",\n    ],\n    description:\n      \"Enhanced Sales Intelligence - Verified contacts for higher conversion rates\",\n    features: [\n      \"Everything in Base\",\n      \"Professional email discovery & verification\",\n      \"Email deliverability verification\",\n      \"Enhanced company enrichment\",\n    ],\n    badge: \"\",\n    hasOwnershipData: false,\n  },\n  ENTERPRISE: {\n    name: \"Enterprise\",\n    price: 2.5, // Premium Executive Access\n    stages: [\n      \"business-verification\",\n      \"company-data\",\n      \"email-discovery\",\n      \"email-verification\",\n      \"executive-enrichment\",\n      \"compliance-verification\",\n    ],\n    description:\n      \"Premium Executive Access - Compliance-grade data with C-suite contacts\",\n    features: [\n      \"Everything in Professional\",\n      \"Executive contact enrichment\",\n      \"Full compliance verification\",\n      \"Advanced data validation\",\n    ],\n    badge: \"Premium\",\n    hasOwnershipData: true,\n  },\n} as const;\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":4,"duration":0.175},
{"type":"measure","name":"lsp.did_open","count":8,"duration":3.804},
{"type":"mark","name":"lsp.did_open","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","languageId":"typescript","version":1,"text":"import { useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport {\n  EDGE_FUNCTIONS_URL,\n  ENRICHMENT_TIERS,\n  SUPABASE_ANON_TOKEN,\n  ensureSession,\n  getSessionToken,\n} from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport type { BusinessDiscoveryResponse, CampaignConfig } from \"../types\";\n\nexport const useBusinessDiscovery = (\n  onJobCreated?: (jobData: {\n    jobId: string;\n    campaignId: string;\n    status: string;\n    estimatedTime?: number;\n  }) => void\n) => {\n  const { user } = useAuth();\n  const {\n    setLoading,\n    setError,\n    clearLeads,\n    setCurrentCampaign,\n    setCurrentCampaignId,\n  } = useCampaignStore();\n  const [progress, setProgress] = useState(0);\n  const [currentStage, setCurrentStage] = useState<string>(\"\");\n  const [cacheStats] = useState<any>(null);\n\n  const discoveryMutation = useMutation({\n    mutationFn: async (\n      config: CampaignConfig & { selectedTier?: keyof typeof ENRICHMENT_TIERS }\n    ): Promise<BusinessDiscoveryResponse> => {\n      setLoading(true);\n      setError(null);\n      setProgress(10);\n      setCurrentStage(\"Initializing user-aware discovery...\");\n\n      // Reset any existing campaign context before starting a new discovery\n      clearLeads();\n      setCurrentCampaign(null);\n      setCurrentCampaignId(null);\n\n      try {\n        console.log(\"🚀 Starting user-aware business discovery:\", config);\n\n        // Ensure we have a valid session before calling Edge Function\n        const hasSession = await ensureSession();\n        if (!hasSession || !user?.id) {\n          throw new Error(\"Please sign in to run a discovery campaign.\");\n        }\n\n        // Determine enrichment tier\n        const tier = config.selectedTier || \"PROFESSIONAL\";\n        const tierConfig = ENRICHMENT_TIERS[tier];\n        const keywordList = config.keywords\n          ? config.keywords\n              .split(\",\")\n              .map((value) => value.trim())\n              .filter(Boolean)\n          : undefined;\n\n        const discoveryOptions = {\n          tradeAssociation: config.trade_association ?? false,\n          professionalLicense: config.professional_license ?? false,\n          chamberVerification: config.chamber_verification ?? false,\n          apolloDiscovery: tier === \"ENTERPRISE\",\n        };\n\n        setCurrentStage(\n          `Using ${tierConfig.name} tier ($${tierConfig.price}/lead)`\n        );\n        setProgress(20);\n\n        const accessToken = await getSessionToken();\n\n        const billingContext = {\n          tier,\n          tierName: tierConfig.name,\n          unitPrice: tierConfig.price,\n          estimatedBudget: config.max_results * tierConfig.price,\n          currency: \"USD\",\n        };\n\n        // Call background task business discovery with authentication\n        const requestBody = {\n          businessType: config.business_type || config.search_terms,\n          location: config.location,\n          keywords: keywordList,\n          searchRadius: config.search_radius,\n          expandGeography: config.expand_geography,\n          maxResults: config.max_results,\n          budgetLimit: config.max_results * tierConfig.price,\n          minConfidenceScore: config.min_confidence_score || 50,\n          tierKey: tier,\n          tierName: tierConfig.name,\n          tierPrice: tierConfig.price,\n          options: discoveryOptions,\n          sessionUserId: user.id,\n          userId: user.id,\n          billingContext,\n        };\n\n        if (!accessToken) {\n          throw new Error(\n            \"Unable to read session token. Please sign in again.\"\n          );\n        }\n\n        const headers: Record<string, string> = {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${accessToken}`,\n          apikey: SUPABASE_ANON_TOKEN,\n          \"X-Prospect-Session\": accessToken,\n        };\n\n        const response = await fetch(\n          `${EDGE_FUNCTIONS_URL}/business-discovery-background`,\n          {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody),\n          }\n        );\n\n        const rawResponse = await response.json().catch(() => ({}));\n\n        if (!response.ok) {\n          console.error(\"❌ Background discovery error:\", rawResponse);\n          const message =\n            typeof rawResponse?.error === \"string\"\n              ? rawResponse.error\n              : typeof rawResponse?.message === \"string\"\n              ? rawResponse.message\n              : `Edge function request failed: ${response.status}`;\n          throw new Error(message);\n        }\n\n        if (!rawResponse?.success) {\n          const fallbackMessage =\n            typeof rawResponse?.error === \"string\"\n              ? rawResponse.error\n              : \"No data returned from background discovery\";\n          throw new Error(fallbackMessage);\n        }\n\n        console.log(\"✅ Background discovery response:\", rawResponse);\n\n        // For background tasks, we get jobId and campaignId immediately\n        // The actual processing happens in the background\n        const transformedData: BusinessDiscoveryResponse = {\n          campaign_id: rawResponse.campaignId,\n          job_id: rawResponse.jobId, // New: job ID for tracking progress\n          status: rawResponse.status, // New: processing status\n          estimated_time: rawResponse.estimatedTime, // New: estimated completion time\n          realtime_channel: rawResponse.realtimeChannel, // New: for real-time updates\n          total_found: 0, // Will be updated via real-time\n          qualified_count: 0, // Will be updated via real-time\n          total_cost: 0, // Will be updated via real-time\n          processing_time: \"< 100ms\", // Immediate response\n          tier_used: tierConfig.name,\n          cache_performance: undefined,\n          vault_status: \"secured\",\n          census_intelligence: undefined,\n          businesses: [], // Will be populated via real-time updates\n        };\n\n        setProgress(100);\n        setCurrentStage(\"Complete! 🎉\");\n        return transformedData;\n      } catch (error) {\n        console.error(\"❌ User-aware discovery error:\", error);\n        setCurrentStage(\"Failed ❌\");\n        throw error;\n      } finally {\n        setLoading(false);\n      }\n    },\n    onSuccess: (data: BusinessDiscoveryResponse) => {\n      console.log(\"✅ Background job created:\", data);\n\n      // For background jobs, we don't create the full campaign record immediately\n      // The progress page will handle real-time updates and final campaign creation\n\n      setProgress(100);\n      setCurrentStage(\"Background processing started! 🚀\");\n\n      // Navigate to progress page with job ID\n      if (data.job_id && data.campaign_id) {\n        const jobData = {\n          jobId: data.job_id,\n          campaignId: data.campaign_id,\n          status: data.status || \"pending\",\n          estimatedTime: data.estimated_time,\n        };\n\n        console.log(\"Job started:\", jobData);\n\n        // Call the navigation callback if provided\n        if (onJobCreated) {\n          onJobCreated(jobData);\n        }\n\n        setCurrentCampaignId(data.campaign_id);\n      }\n    },\n    onError: (error: any) => {\n      setError(\n        error instanceof Error ? error.message : \"User-aware discovery failed\"\n      );\n      setProgress(0);\n      setCurrentStage(\"Failed ❌\");\n    },\n  });\n\n  return {\n    startDiscovery: discoveryMutation.mutate,\n    isDiscovering: discoveryMutation.isPending,\n    progress,\n    currentStage,\n    cacheStats,\n    error: discoveryMutation.error,\n    data: discoveryMutation.data,\n  };\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":5,"duration":0.185},
{"type":"measure","name":"lsp.did_open","count":9,"duration":10.791},
{"type":"mark","name":"lsp.did_open","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useLeadEnrichment.ts","languageId":"typescript","version":1,"text":"import { useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { ensureSession, supabase } from \"../lib/supabase\";\n\nexport interface EnrichmentConfig {\n  businessName: string;\n  domain?: string;\n  address?: string;\n  phone?: string;\n  website?: string;\n  industry?: string;\n  state?: string;\n\n  // Progressive enrichment options\n  includeBusinessLicense?: boolean;\n  includeCompanyEnrichment?: boolean;\n  discoverEmails?: boolean;\n  verifyEmails?: boolean;\n  includePersonEnrichment?: boolean;\n  apolloEnrichment?: boolean;\n\n  // Control parameters\n  maxCostPerBusiness?: number;\n  minConfidenceScore?: number;\n  tier?: \"starter\" | \"professional\" | \"enterprise\" | \"compliance\";\n}\n\nexport interface EnrichmentResult {\n  success: boolean;\n  businessName: string;\n  enrichedData: {\n    emails?: Array<{\n      email: string;\n      confidence: number;\n      verified: boolean;\n      type?: string;\n      firstName?: string;\n      lastName?: string;\n      position?: string;\n    }>;\n    businessLicense?: {\n      isValid: boolean;\n      licenseNumber?: string;\n      status?: string;\n      expirationDate?: string;\n      professionalType?: string;\n      source: string;\n    };\n    companyInfo?: {\n      name?: string;\n      industry?: string;\n      size?: string;\n      founded?: number;\n      revenue?: string;\n      website?: string;\n      description?: string;\n      source: string;\n    };\n  };\n  confidenceScore: number;\n  totalCost: number;\n  costBreakdown: {\n    businessLicenseCost: number;\n    companyEnrichmentCost: number;\n    hunterCost: number;\n    neverBounceCost: number;\n    personEnrichmentCost: number;\n    apolloCost: number;\n    complianceCost: number;\n  };\n  processingMetadata: {\n    servicesUsed: string[];\n    servicesSkipped: string[];\n    processingTime: number;\n    errors: Array<{\n      service: string;\n      error: string;\n    }>;\n  };\n}\n\nexport const useLeadEnrichment = () => {\n  const { user } = useAuth();\n  const [progress, setProgress] = useState(0);\n  const [currentStage, setCurrentStage] = useState<string>(\"\");\n  const [enrichedCount, setEnrichedCount] = useState(0);\n  const [totalCost, setTotalCost] = useState(0);\n\n  const enrichmentMutation = useMutation({\n    mutationFn: async (config: EnrichmentConfig): Promise<EnrichmentResult> => {\n      setProgress(10);\n      setCurrentStage(`Enriching ${config.businessName}...`);\n\n      try {\n        console.log(\"🔄 Starting enrichment for:\", config.businessName);\n\n        // Ensure we have a valid session before calling Edge Function\n        const hasSession = await ensureSession();\n        if (!hasSession || !user?.id) {\n          throw new Error(\"Please sign in to run lead enrichment.\");\n        }\n\n        const billingContext = {\n          tier: config.tier ?? \"professional\",\n          maxCostPerBusiness: config.maxCostPerBusiness ?? 0.5,\n          currency: \"USD\",\n        };\n\n        // Call enrichment orchestrator\n        const { data, error } = await supabase.functions.invoke(\n          \"enrichment-orchestrator\",\n          {\n            body: {\n              businessName: config.businessName,\n              domain: config.domain\n                ?.replace(/^https?:\\/\\//, \"\")\n                .replace(/\\/$/, \"\"),\n              address: config.address,\n              phone: config.phone,\n              website: config.website,\n              industry: config.industry,\n              state: config.state,\n\n              // Progressive enrichment configuration (professional tier)\n              includeBusinessLicense: config.includeBusinessLicense ?? true,\n              discoverEmails: config.discoverEmails ?? true,\n              verifyEmails: config.verifyEmails ?? true,\n              includeCompanyEnrichment:\n                config.includeCompanyEnrichment ?? false,\n              includePersonEnrichment: config.includePersonEnrichment ?? false,\n              apolloEnrichment: config.apolloEnrichment ?? false,\n\n              // Budget controls\n              maxCostPerBusiness: config.maxCostPerBusiness ?? 0.5,\n              minConfidenceScore: config.minConfidenceScore ?? 50,\n              tier: config.tier ?? \"professional\",\n              sessionUserId: user.id,\n              userId: user.id,\n              billingContext,\n            },\n          }\n        );\n\n        if (error) {\n          console.error(\"❌ Enrichment error:\", error);\n          throw new Error(`Enrichment failed: ${error.message}`);\n        }\n\n        if (!data || !data.success) {\n          throw new Error(\n            data?.processingMetadata?.errors?.[0]?.error ||\n              \"Enrichment service returned no data\"\n          );\n        }\n\n        console.log(\"✅ Enrichment complete:\", data);\n        setProgress(100);\n        setCurrentStage(\n          `Found ${data.enrichedData?.emails?.length || 0} emails`\n        );\n\n        return data as EnrichmentResult;\n      } catch (error) {\n        console.error(\"❌ Enrichment error:\", error);\n        setCurrentStage(\"Enrichment failed\");\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      setEnrichedCount((prev) => prev + 1);\n      setTotalCost((prev) => prev + data.totalCost);\n    },\n  });\n\n  // Batch enrichment for multiple leads\n  const enrichMultipleLeads = async (\n    leads: Array<{\n      businessName: string;\n      website?: string;\n      address?: string;\n      phone?: string;\n    }>,\n    config?: Partial<EnrichmentConfig>\n  ) => {\n    const results: EnrichmentResult[] = [];\n    const errors: Array<{ businessName: string; error: string }> = [];\n\n    setProgress(0);\n    setEnrichedCount(0);\n    setTotalCost(0);\n\n    for (let i = 0; i < leads.length; i++) {\n      const lead = leads[i];\n      setCurrentStage(\n        `Enriching ${i + 1}/${leads.length}: ${lead.businessName}...`\n      );\n      setProgress(Math.round((i / leads.length) * 100));\n\n      try {\n        const result = await enrichmentMutation.mutateAsync({\n          businessName: lead.businessName,\n          website: lead.website,\n          domain: lead.website?.replace(/^https?:\\/\\//, \"\").replace(/\\/$/, \"\"),\n          address: lead.address,\n          phone: lead.phone,\n          ...config,\n        });\n        results.push(result);\n      } catch (error) {\n        console.error(`❌ Failed to enrich ${lead.businessName}:`, error);\n        errors.push({\n          businessName: lead.businessName,\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n      }\n    }\n\n    setProgress(100);\n    setCurrentStage(`Enriched ${results.length}/${leads.length} leads`);\n\n    return { results, errors };\n  };\n\n  const reset = () => {\n    setProgress(0);\n    setCurrentStage(\"\");\n    setEnrichedCount(0);\n    setTotalCost(0);\n  };\n\n  return {\n    enrichLead: enrichmentMutation.mutate,\n    enrichLeadAsync: enrichmentMutation.mutateAsync,\n    enrichMultipleLeads,\n    isEnriching: enrichmentMutation.isPending,\n    progress,\n    currentStage,\n    enrichedCount,\n    totalCost,\n    error: enrichmentMutation.error,\n    data: enrichmentMutation.data,\n    reset,\n  };\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":6,"duration":0.189},
{"type":"measure","name":"lsp.did_open","count":10,"duration":14.199},
{"type":"mark","name":"lsp.did_open","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Dashboard.tsx","languageId":"typescriptreact","version":1,"text":"import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { supabase } from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\n\ninterface Campaign {\n  id: string;\n  campaign_id?: string;\n  business_type: string;\n  location: string;\n  status: string;\n  results_count: number;\n  leads_found?: number;\n  leads_qualified?: number;\n  total_cost: number;\n  created_at: string;\n}\n\nexport const Dashboard: React.FC = () => {\n  const { user, loading: authLoading } = useAuth();\n  const { campaigns: localCampaigns, leads: localLeads } = useCampaignStore();\n  const navigate = useNavigate();\n\n  const [campaigns, setCampaigns] = useState<Campaign[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch user-aware campaigns from database\n  useEffect(() => {\n    const fetchCampaigns = async () => {\n      if (authLoading) {\n        return;\n      }\n\n      if (!user?.id) {\n        setCampaigns([]);\n        setLoading(false);\n        setError(null);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        console.log(\"📊 Fetching campaigns for user:\", user.id);\n\n        // Query campaigns scoped to the authenticated user\n        const query = supabase\n          .from(\"campaigns\")\n          .select(\"*\")\n          .eq(\"user_id\", user.id);\n\n        const { data, error } = await query.order(\"created_at\", {\n          ascending: false,\n        });\n\n        if (error) {\n          console.error(\"❌ Error fetching campaigns:\", error);\n          setError(error.message);\n          return;\n        }\n\n        console.log(\"✅ Campaigns loaded:\", data?.length || 0);\n        setCampaigns(data || []);\n      } catch (err) {\n        console.error(\"❌ Unexpected error:\", err);\n        setError(\n          err instanceof Error ? err.message : \"Failed to load campaigns\"\n        );\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCampaigns();\n  }, [authLoading, user?.id]);\n\n  // Calculate stats from database campaigns\n  const totalCost = campaigns.reduce(\n    (sum, campaign) => sum + (campaign.total_cost || 0),\n    0\n  );\n  const totalLeads = campaigns.reduce(\n    (sum, campaign) => sum + (campaign.results_count || 0),\n    0\n  );\n  const qualifiedLeads = localLeads.filter(\n    (lead) => lead.confidence_score >= 80\n  ).length;\n\n  // Fallback to local store data if no database campaigns\n  const stats = [\n    {\n      name: \"Total Campaigns\",\n      value: campaigns.length || localCampaigns.length,\n      icon: \"🚀\",\n    },\n    { name: \"Total Leads\", value: totalLeads || localLeads.length, icon: \"👥\" },\n    { name: \"Qualified Leads\", value: qualifiedLeads, icon: \"✅\" },\n    { name: \"Total Cost\", value: `$${totalCost.toFixed(2)}`, icon: \"💰\" },\n  ];\n\n  const recentCampaigns =\n    campaigns.length > 0 ? campaigns.slice(0, 5) : localCampaigns.slice(0, 5);\n\n  if (loading || authLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600 dark:text-gray-400\">\n            Loading campaigns...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-8 text-center\">\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n          Sign in to view your campaigns\n        </h2>\n        <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n          Create an account or sign in to access saved campaigns and lead\n          history.\n        </p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n        <div className=\"flex\">\n          <div className=\"text-red-500 dark:text-red-400 text-xl mr-3\">⚠️</div>\n          <div>\n            <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n              Error loading campaigns\n            </h3>\n            <p className=\"text-sm text-red-700 dark:text-red-300 mt-1\">\n              {error}\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n          Dashboard\n        </h1>\n        <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n          Overview of your lead generation campaigns and results\n        </p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\n        {stats.map((stat) => (\n          <div\n            key={stat.name}\n            className=\"bg-white dark:bg-gray-700 overflow-hidden shadow rounded-lg border border-gray-200 dark:border-gray-600\"\n          >\n            <div className=\"p-5\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <span className=\"text-2xl\">{stat.icon}</span>\n                </div>\n                <div className=\"ml-5 w-0 flex-1\">\n                  <dl>\n                    <dt className=\"text-sm font-medium text-gray-500 dark:text-gray-400 truncate\">\n                      {stat.name}\n                    </dt>\n                    <dd className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">\n                      {stat.value}\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Recent Campaigns */}\n      <div className=\"bg-white dark:bg-gray-700 shadow rounded-lg border border-gray-200 dark:border-gray-600\">\n        <div className=\"px-4 py-5 sm:p-6\">\n          <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-gray-100 mb-4\">\n            Recent Campaigns\n          </h3>\n          {recentCampaigns.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <span className=\"text-4xl\">🔍</span>\n              <h3 className=\"mt-2 text-sm font-medium text-gray-900 dark:text-gray-100\">\n                No campaigns yet\n              </h3>\n              <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                Get started by creating your first lead discovery campaign.\n              </p>\n              <div className=\"mt-6\">\n                <a\n                  href=\"/discovery\"\n                  className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 focus:ring-blue-500 dark:focus:ring-blue-400 transition-colors\"\n                >\n                  Start Discovery\n                </a>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {recentCampaigns.map((campaign: any) => {\n                const campaignId = campaign.id || campaign.campaign_id || \"\";\n                const leadsCount =\n                  campaign.results_count || campaign.leads_found || 0;\n                const qualifiedCount = campaign.leads_qualified || 0;\n\n                return (\n                  <div\n                    key={campaignId}\n                    className=\"flex items-center justify-between p-4 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 cursor-pointer transition-colors\"\n                    onClick={() => navigate(`/campaign?id=${campaignId}`)}\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center\">\n                        <span\n                          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                            campaign.status === \"completed\"\n                              ? \"bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200\"\n                              : campaign.status === \"running\"\n                              ? \"bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200\"\n                              : campaign.status === \"failed\"\n                              ? \"bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200\"\n                              : \"bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200\"\n                          }`}\n                        >\n                          {campaign.status}\n                        </span>\n                        <span className=\"ml-3 text-sm font-weight-medium text-gray-900 dark:text-gray-100\">\n                          {campaign.business_type} in {campaign.location}\n                        </span>\n                      </div>\n                      <div className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                        {leadsCount} results • {qualifiedCount} qualified • $\n                        {campaign.total_cost.toFixed(2)} cost\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        {new Date(campaign.created_at).toLocaleDateString()}\n                      </div>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          navigate(`/campaign?id=${campaignId}`);\n                        }}\n                        className=\"text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium transition-colors\"\n                      >\n                        View Details →\n                      </button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":7,"duration":0.201},
{"type":"measure","name":"lsp.did_open","count":11,"duration":2.934},
{"type":"mark","name":"lsp.did_open","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","languageId":"typescriptreact","version":1,"text":"import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useNavigate, useParams, useSearchParams } from \"react-router-dom\";\nimport { ProgressDisplay } from \"../components/ProgressDisplay\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useJobProgress } from \"../hooks/useJobProgress\";\nimport { supabase } from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport { transformCampaignData } from \"../utils/campaignTransforms\";\n\nexport const CampaignProgress: React.FC = () => {\n  const { campaignId } = useParams<{ campaignId: string }>();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const jobId = searchParams.get(\"jobId\");\n\n  // Use the job progress hook for real-time updates\n  const { progress: jobProgress } = useJobProgress(jobId || \"\");\n\n  const campaigns = useCampaignStore((state) => state.campaigns);\n  const addCampaign = useCampaignStore((state) => state.addCampaign);\n  const updateCampaign = useCampaignStore((state) => state.updateCampaign);\n  const setCurrentCampaign = useCampaignStore(\n    (state) => state.setCurrentCampaign\n  );\n  const ensureUniqueCampaignHistory = useCampaignStore(\n    (state) => state.ensureUniqueCampaignHistory\n  );\n  const setCampaignLeads = useCampaignStore((state) => state.setCampaignLeads);\n  const setLoading = useCampaignStore((state) => state.setLoading);\n  const setError = useCampaignStore((state) => state.setError);\n  const { user, loading: authLoading } = useAuth();\n  const authUserId = user?.id ?? null;\n\n  const [isFetchingResults, setIsFetchingResults] = useState(false);\n  const [resultFetchError, setResultFetchError] = useState<string | null>(null);\n  const hasFetchedResultsRef = useRef(false);\n  const isMountedRef = useRef(true);\n\n  useEffect(() => {\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  // Extract data from job progress\n  const progress = jobProgress?.progress || 0;\n  const status = jobProgress?.status || \"pending\";\n  const currentStage = jobProgress?.currentStage || \"Initializing...\";\n  const metrics = jobProgress?.metrics;\n  const isComplete = status === \"completed\";\n  const error = jobProgress?.error;\n\n  const displayStage = isFetchingResults\n    ? \"Preparing final results...\"\n    : currentStage;\n  const displayProgress = isFetchingResults\n    ? Math.min(100, Math.max(progress, 96))\n    : progress;\n  const isProcessing = !isComplete || isFetchingResults;\n\n  const fetchResults = useCallback(async () => {\n    if (!campaignId) {\n      return;\n    }\n\n    if (!authUserId) {\n      setResultFetchError(\"Sign in again to view campaign results.\");\n      return;\n    }\n\n    hasFetchedResultsRef.current = true;\n    setIsFetchingResults(true);\n    setResultFetchError(null);\n    setLoading(true);\n\n    const wait = (ms: number) =>\n      new Promise<void>((resolve) => {\n        setTimeout(resolve, ms);\n      });\n\n    try {\n      const MAX_ATTEMPTS = 5;\n      let campaignRecord: any = null;\n      let leadsRecords: any[] = [];\n\n      for (let attempt = 0; attempt < MAX_ATTEMPTS; attempt += 1) {\n        const campaignQuery = supabase\n          .from(\"campaigns\")\n          .select(\n            \"id,business_type,location,status,total_cost,results_count,created_at,updated_at\"\n          )\n          .eq(\"id\", campaignId)\n          .eq(\"user_id\", authUserId);\n\n        const { data: campaignData, error: campaignError } =\n          await campaignQuery.maybeSingle();\n\n        if (campaignError) {\n          throw campaignError;\n        }\n\n        const leadsQuery = supabase\n          .from(\"leads\")\n          .select(\n            \"id,campaign_id,business_name,address,phone,website,email,confidence_score,validation_cost,enrichment_data,created_at\"\n          )\n          .eq(\"campaign_id\", campaignId)\n          .eq(\"user_id\", authUserId)\n          .order(\"confidence_score\", { ascending: false });\n\n        const { data: leadsData, error: leadsError } = await leadsQuery;\n\n        if (leadsError) {\n          throw leadsError;\n        }\n\n        campaignRecord = campaignData;\n        leadsRecords = leadsData ?? [];\n\n        if (\n          campaignRecord &&\n          (leadsRecords.length > 0 || attempt === MAX_ATTEMPTS - 1)\n        ) {\n          break;\n        }\n\n        await wait(2000);\n      }\n\n      if (!campaignRecord) {\n        throw new Error(\n          \"Campaign record not available yet. Please try again in a moment.\"\n        );\n      }\n\n      const { campaignResult, leads: mappedLeads } = transformCampaignData(\n        campaignRecord,\n        leadsRecords,\n        { metrics: (metrics ?? null) as Record<string, any> | null }\n      );\n\n      const campaignExists = campaigns.some(\n        (item) => item.campaign_id === campaignResult.campaign_id\n      );\n\n      if (campaignExists) {\n        updateCampaign(campaignResult.campaign_id, campaignResult);\n      } else {\n        addCampaign(campaignResult);\n      }\n\n      ensureUniqueCampaignHistory();\n\n      setCampaignLeads(campaignResult.campaign_id, mappedLeads);\n      setCurrentCampaign(campaignResult);\n\n      if (isMountedRef.current) {\n        setResultFetchError(null);\n        navigate(\"/results\", { replace: true, state: { campaignId } });\n      }\n    } catch (err) {\n      console.error(\"⚠️ Unable to load campaign results\", err);\n      const message =\n        err instanceof Error\n          ? err.message\n          : \"Unable to load campaign results. Please try again.\";\n\n      if (isMountedRef.current) {\n        setResultFetchError(message);\n      }\n\n      setError(message);\n      hasFetchedResultsRef.current = false;\n    } finally {\n      if (isMountedRef.current) {\n        setIsFetchingResults(false);\n        setLoading(false);\n      }\n    }\n  }, [\n    addCampaign,\n    authUserId,\n    campaignId,\n    campaigns,\n    ensureUniqueCampaignHistory,\n    metrics,\n    navigate,\n    setCurrentCampaign,\n    setCampaignLeads,\n    setError,\n    setLoading,\n    updateCampaign,\n  ]);\n\n  useEffect(() => {\n    if (!isComplete || !campaignId || !jobId) {\n      return;\n    }\n\n    if (!authUserId) {\n      return;\n    }\n\n    if (hasFetchedResultsRef.current) {\n      return;\n    }\n\n    fetchResults();\n  }, [authUserId, campaignId, fetchResults, isComplete, jobId]);\n\n  const handleRetryFetch = () => {\n    if (!campaignId) {\n      return;\n    }\n\n    if (!authUserId) {\n      setResultFetchError(\"Sign in again to re-establish your session.\");\n      return;\n    }\n\n    fetchResults();\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"flex items-center justify-center\">\n          <div className=\"flex items-center space-x-3 text-gray-600\">\n            <div className=\"h-6 w-6 animate-spin rounded-full border-2 border-blue-600 border-t-transparent\"></div>\n            <span>Loading campaign...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!authUserId) {\n    return (\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"max-w-xl mx-auto rounded-lg border border-gray-200 bg-white p-8 text-center shadow-sm dark:border-gray-700 dark:bg-gray-800\">\n          <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\n            Sign in required\n          </h1>\n          <p className=\"mt-3 text-sm text-gray-600 dark:text-gray-300\">\n            Please sign in to review campaign progress and download results.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!jobId || !campaignId) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">\n            Invalid Campaign\n          </h1>\n          <p className=\"text-gray-600 mb-4\">\n            Missing job or campaign information.\n          </p>\n          <button\n            onClick={() => navigate(\"/\")}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Return Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">\n            Processing Error\n          </h1>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button\n            onClick={() => navigate(\"/\")}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Start New Campaign\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          Campaign Discovery in Progress\n        </h1>\n      </div>\n\n      {isFetchingResults && !resultFetchError && (\n        <div className=\"mb-6 rounded-lg border border-blue-200 bg-blue-50 p-4 text-sm text-blue-700\">\n          Finalizing campaign results and syncing verified leads to your\n          vault...\n        </div>\n      )}\n\n      {resultFetchError && (\n        <div className=\"mb-6 rounded-lg border border-red-200 bg-red-50 p-4 text-sm text-red-700\">\n          <div className=\"font-semibold\">Unable to load campaign results</div>\n          <p className=\"mt-1\">{resultFetchError}</p>\n          <button\n            onClick={handleRetryFetch}\n            className=\"mt-3 inline-flex items-center rounded border border-red-300 bg-white px-3 py-1.5 text-xs font-medium text-red-700 shadow-sm transition hover:bg-red-100\"\n          >\n            Retry syncing results\n          </button>\n        </div>\n      )}\n\n      {/* Progress Display */}\n      <ProgressDisplay\n        isDiscovering={isProcessing}\n        progress={displayProgress}\n        currentStage={displayStage}\n        cacheStats={null} // Real-time updates don't include cache stats\n      />\n\n      {/* Real-time Metrics */}\n      {metrics && (\n        <div className=\"mt-6 bg-white border border-gray-200 rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            📊 Live Discovery Metrics\n          </h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {metrics.total_found || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Found</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {metrics.qualified_leads || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Qualified</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {metrics.avg_confidence ? `${metrics.avg_confidence}%` : \"0%\"}\n              </div>\n              <div className=\"text-sm text-gray-600\">Avg Confidence</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                ${(metrics.total_cost || 0).toFixed(2)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Cost</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Status Updates */}\n      <div className=\"mt-6 bg-gray-50 border border-gray-200 rounded-lg p-4\">\n        <h4 className=\"font-semibold text-gray-900 mb-2\">Status Updates</h4>\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center text-sm\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full mr-2\"></div>\n            <span className=\"text-gray-600\">\n              Campaign started at {new Date().toLocaleTimeString()}\n            </span>\n          </div>\n          {displayStage && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-blue-400 rounded-full mr-2 animate-pulse\"></div>\n              <span className=\"text-gray-900 font-medium\">{displayStage}</span>\n            </div>\n          )}\n          {isFetchingResults && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-purple-400 rounded-full mr-2 animate-pulse\"></div>\n              <span className=\"text-purple-600 font-medium\">\n                Finalizing leads and preparing results...\n              </span>\n            </div>\n          )}\n          {status === \"completed\" && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full mr-2\"></div>\n              <span className=\"text-green-600 font-medium\">\n                ✅ Discovery completed! Redirecting to results...\n              </span>\n            </div>\n          )}\n          {resultFetchError && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-red-400 rounded-full mr-2\"></div>\n              <span className=\"text-red-600 font-medium\">\n                {resultFetchError}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"mt-8 text-center space-x-4\">\n        <button\n          onClick={() => navigate(\"/\")}\n          className=\"px-4 py-2 text-gray-600 bg-gray-100 rounded hover:bg-gray-200\"\n        >\n          Start New Campaign\n        </button>\n        {!isProcessing && (\n          <button\n            onClick={() => navigate(\"/results\", { state: { campaignId } })}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            View Complete Results\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":12,"duration":8.63},
{"type":"mark","name":"lsp.did_open","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/BusinessDiscovery.tsx","languageId":"typescriptreact","version":1,"text":"import React, { useEffect, useMemo, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  GeographicLocation,\n  GeographicSelector,\n} from \"../components/GeographicSelector\";\nimport { MultiSelectBusinessTypes } from \"../components/MultiSelectBusinessTypes\";\nimport { ProgressDisplay } from \"../components/ProgressDisplay\";\nimport { TierSelector } from \"../components/TierSelector\";\nimport { BUSINESS_TYPES_BY_CATEGORY } from \"../constants/businessTaxonomy\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useBusinessDiscovery } from \"../hooks/useBusinessDiscovery\";\nimport { ENRICHMENT_TIERS } from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport { exportLeadsToCsv } from \"../utils/exportLeadsToCsv\";\n\nconst DEFAULT_CATEGORY = \"Home & Property Services\";\nconst DEFAULT_LOCATION: GeographicLocation = {\n  lat: 40.7128,\n  lng: -74.006,\n  address: \"New York, NY\",\n};\nconst DEFAULT_RADIUS = 10;\n\nconst STEPS = [\n  { id: 1, title: \"Targeting\", description: \"Audience & geography\" },\n  { id: 2, title: \"Campaign setup\", description: \"Tier & quantity\" },\n  { id: 3, title: \"Results\", description: \"Leads & export\" },\n];\n\nconst getConfidenceColor = (score: number) => {\n  if (score >= 90)\n    return \"border border-emerald-200 bg-emerald-50 text-emerald-700 dark:border-emerald-400 dark:bg-transparent dark:text-emerald-300\";\n  if (score >= 80)\n    return \"border border-sky-200 bg-sky-50 text-sky-700 dark:border-sky-400 dark:bg-transparent dark:text-sky-300\";\n  if (score >= 70)\n    return \"border border-amber-200 bg-amber-50 text-amber-700 dark:border-amber-400 dark:bg-transparent dark:text-amber-300\";\n  return \"border border-rose-200 bg-rose-50 text-rose-700 dark:border-rose-400 dark:bg-transparent dark:text-rose-300\";\n};\n\nconst getValidationStatusColor = (status?: string) => {\n  switch (status) {\n    case \"validated\":\n      return \"border border-emerald-200 bg-emerald-50 text-emerald-700 dark:border-emerald-400 dark:bg-transparent dark:text-emerald-300\";\n    case \"validating\":\n      return \"border border-sky-200 bg-sky-50 text-sky-700 dark:border-sky-400 dark:bg-transparent dark:text-sky-300\";\n    case \"pending\":\n      return \"border border-amber-200 bg-amber-50 text-amber-700 dark:border-amber-400 dark:bg-transparent dark:text-amber-300\";\n    case \"failed\":\n      return \"border border-rose-200 bg-rose-50 text-rose-700 dark:border-rose-400 dark:bg-transparent dark:text-rose-300\";\n    default:\n      return \"border border-gray-200 bg-gray-50 text-gray-700 dark:border-slate-500 dark:bg-transparent dark:text-slate-300\";\n  }\n};\n\nexport const BusinessDiscovery: React.FC = () => {\n  const navigate = useNavigate();\n  const { user, loading: authLoading } = useAuth();\n\n  const handleJobCreated = (jobData: {\n    jobId: string;\n    campaignId: string;\n    status: string;\n    estimatedTime?: number;\n  }) => {\n    console.log(\"🚀 Job created, navigating to progress page:\", jobData);\n    navigate(`/campaign/${jobData.campaignId}/progress?jobId=${jobData.jobId}`);\n  };\n\n  const {\n    startDiscovery,\n    isDiscovering,\n    progress,\n    currentStage,\n    cacheStats,\n    error,\n  } = useBusinessDiscovery(handleJobCreated);\n\n  const defaultBusinessTypes =\n    BUSINESS_TYPES_BY_CATEGORY[DEFAULT_CATEGORY] || [];\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([\n    DEFAULT_CATEGORY,\n  ]);\n  const [selectedBusinessTypes, setSelectedBusinessTypes] = useState<string[]>(\n    defaultBusinessTypes.length > 0 ? [defaultBusinessTypes[0]] : []\n  );\n  const [keywords, setKeywords] = useState(\"\");\n  const [location, setLocation] =\n    useState<GeographicLocation>(DEFAULT_LOCATION);\n  const [searchRadius, setSearchRadius] = useState<number>(DEFAULT_RADIUS);\n  const [expandGeography, setExpandGeography] = useState(false);\n  const [numberOfLeads, setNumberOfLeads] = useState(3);\n  const [selectedTier, setSelectedTier] =\n    useState<keyof typeof ENRICHMENT_TIERS>(\"BASE\");\n  const [activeStep, setActiveStep] = useState<1 | 2 | 3>(1);\n\n  const currentTierConfig = ENRICHMENT_TIERS[selectedTier];\n  const estimatedCost = numberOfLeads * currentTierConfig.price;\n  const sliderPercent = ((numberOfLeads - 1) / 9) * 100;\n\n  const { leads, currentCampaign } = useCampaignStore((state) => ({\n    leads: state.leads,\n    currentCampaign: state.currentCampaign,\n  }));\n  const setCurrentCampaignInStore = useCampaignStore(\n    (state) => state.setCurrentCampaign\n  );\n  const clearLeadsInStore = useCampaignStore((state) => state.clearLeads);\n\n  const campaignLeads = useMemo(() => {\n    if (!currentCampaign) {\n      return [];\n    }\n\n    return leads.filter(\n      (lead) => lead.campaign_id === currentCampaign.campaign_id\n    );\n  }, [leads, currentCampaign]);\n\n  const qualifiedLeadCount = useMemo(\n    () => campaignLeads.filter((lead) => lead.confidence_score >= 70).length,\n    [campaignLeads]\n  );\n\n  const hasResultsForCurrentCampaign = currentCampaign\n    ? campaignLeads.length > 0\n    : false;\n\n  useEffect(() => {\n    if (hasResultsForCurrentCampaign && activeStep === 2 && !isDiscovering) {\n      setActiveStep(3);\n    }\n  }, [hasResultsForCurrentCampaign, activeStep, isDiscovering]);\n\n  const handleExportResults = () => {\n    if (!campaignLeads.length) return;\n\n    exportLeadsToCsv(campaignLeads, {\n      fileName: `campaign-${\n        currentCampaign?.campaign_id || Date.now()\n      }-results.csv`,\n    });\n  };\n\n  const handleViewCampaign = () => {\n    if (!currentCampaign) return;\n\n    navigate(`/campaign?id=${currentCampaign.campaign_id}`);\n  };\n\n  const keywordsList = keywords\n    .split(\",\")\n    .map((keyword) => keyword.trim())\n    .filter((keyword) => keyword.length > 0);\n  const keywordsString = keywordsList.join(\", \");\n  const businessTypesString = selectedBusinessTypes.join(\", \");\n  const approxCoverage = Math.round(Math.PI * searchRadius * searchRadius);\n\n  const isTargetingValid =\n    selectedBusinessTypes.length > 0 && location.address.trim().length > 0;\n\n  const handleGeographicChange = (\n    updatedLocation: GeographicLocation,\n    radius: number\n  ) => {\n    setLocation(updatedLocation);\n    setSearchRadius(radius);\n  };\n\n  const handleContinue = () => {\n    if (!isTargetingValid) {\n      alert(\"Please select at least one business type and provide a location.\");\n      return;\n    }\n    setCurrentCampaignInStore(null);\n    clearLeadsInStore();\n    setActiveStep(2);\n  };\n\n  const handleBackToTargeting = () => {\n    setActiveStep(1);\n  };\n\n  const handleSearch = () => {\n    if (!user) {\n      alert(\"Please sign in to run a discovery campaign.\");\n      return;\n    }\n\n    if (!isTargetingValid) {\n      setActiveStep(1);\n      alert(\"Please complete targeting details before running the campaign.\");\n      return;\n    }\n\n    const config = {\n      search_terms: `${businessTypesString}${\n        keywordsString ? ` ${keywordsString}` : \"\"\n      }`.trim(),\n      location: location.address.trim(),\n      business_type: businessTypesString,\n      budget_limit: estimatedCost,\n      max_results: numberOfLeads,\n      include_email_validation:\n        selectedTier === \"PROFESSIONAL\" || selectedTier === \"ENTERPRISE\",\n      include_website_validation: true,\n      min_confidence_score: 70,\n      chamber_verification: true,\n      trade_association: true,\n      professional_license: true,\n      keywords: keywordsString,\n      search_radius: `${searchRadius} miles`,\n      expand_geography: expandGeography,\n      selectedTier,\n    };\n\n    console.log(\"🚀 Starting campaign:\", config);\n    startDiscovery(config);\n  };\n\n  const selectedBusinessTypesPreview = selectedBusinessTypes.length\n    ? (() => {\n        const preview = selectedBusinessTypes.slice(0, 5).join(\", \");\n        const remaining = selectedBusinessTypes.length - 5;\n        return remaining > 0 ? `${preview} +${remaining} more` : preview;\n      })()\n    : \"No business types selected\";\n\n  const summaryItems = [\n    {\n      label: \"Business categories\",\n      value:\n        selectedCategories.length > 0\n          ? selectedCategories.join(\", \")\n          : \"No categories selected\",\n    },\n    {\n      label: \"Business types\",\n      value: selectedBusinessTypesPreview,\n    },\n    {\n      label: \"Keywords\",\n      value: keywordsString.length > 0 ? keywordsString : \"None\",\n    },\n    {\n      label: \"Location\",\n      value: location.address,\n    },\n    {\n      label: \"Radius\",\n      value: `${searchRadius} miles`,\n    },\n    {\n      label: \"Geography\",\n      value: expandGeography ? \"Auto-expand enabled\" : \"Stay within radius\",\n    },\n    {\n      label: \"Coverage\",\n      value: `~${approxCoverage} square miles`,\n    },\n  ];\n\n  if (authLoading) {\n    return (\n      <div className=\"rounded-lg border border-gray-200 bg-white p-6 text-center shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n        <div className=\"flex items-center justify-center space-x-3 text-gray-600 dark:text-slate-300\">\n          <div className=\"h-6 w-6 animate-spin rounded-full border-2 border-blue-600 border-t-transparent\" />\n          <span>Loading your workspace…</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"rounded-lg border border-gray-200 bg-white p-8 text-center shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\n          Sign in required\n        </h1>\n        <p className=\"mt-3 text-sm text-gray-600 dark:text-gray-300\">\n          Create an account or sign in to launch new campaigns and access\n          verified leads.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"rounded-lg border border-gray-200 bg-white shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n      <div className=\"border-b border-gray-200 px-6 py-4 dark:border-slate-700\">\n        <div className=\"flex flex-wrap items-center gap-4\">\n          {STEPS.map((step) => {\n            const isActive = activeStep === step.id;\n            const isCompleted = activeStep > step.id;\n            const canNavigate =\n              step.id === 1 ||\n              (step.id === 2 && isTargetingValid) ||\n              step.id === 3;\n            const isDisabled = step.id === 2 && !isTargetingValid;\n            const disableButton = !canNavigate || isDisabled;\n\n            return (\n              <button\n                key={step.id}\n                type=\"button\"\n                disabled={disableButton}\n                onClick={() => setActiveStep(step.id as 1 | 2 | 3)}\n                className={`flex items-center gap-3 rounded-md border px-4 py-2 text-left transition-colors ${\n                  isActive\n                    ? \"border-blue-600 bg-blue-50 text-blue-700 dark:border-sky-400 dark:bg-transparent dark:text-sky-300\"\n                    : isCompleted\n                    ? \"border-blue-200 bg-white text-blue-600 dark:border-slate-600 dark:bg-transparent dark:text-sky-300\"\n                    : \"border-transparent bg-white text-gray-600 hover:border-blue-200 hover:text-blue-700 dark:border-transparent dark:bg-transparent dark:text-slate-300 dark:hover:border-sky-400\"\n                } ${disableButton ? \"cursor-not-allowed opacity-60\" : \"\"}`}\n              >\n                <span\n                  className={`flex h-8 w-8 items-center justify-center rounded-full border-2 text-sm font-semibold ${\n                    isActive\n                      ? \"border-blue-600 bg-blue-600 text-white dark:border-sky-400 dark:bg-sky-400 dark:text-slate-900\"\n                      : isCompleted\n                      ? \"border-blue-300 bg-blue-100 text-blue-700 dark:border-sky-400 dark:bg-transparent dark:text-sky-300\"\n                      : \"border-gray-300 bg-white text-gray-500 dark:border-slate-600 dark:bg-transparent dark:text-slate-400\"\n                  }`}\n                  aria-hidden=\"true\"\n                >\n                  {step.id}\n                </span>\n                <span className=\"flex flex-col\">\n                  <span className=\"text-sm font-semibold\">{step.title}</span>\n                  <span className=\"text-xs text-gray-500 dark:text-slate-400\">\n                    {step.description}\n                  </span>\n                </span>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      <div className=\"p-6 space-y-8\">\n        <section\n          className={`space-y-6 ${activeStep === 1 ? \"\" : \"hidden\"}`}\n          aria-hidden={activeStep !== 1}\n        >\n          <header>\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n              Targeting & Geography\n            </h2>\n            <p className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">\n              Choose the businesses and regions you want ProspectPro to\n              discover.\n            </p>\n          </header>\n\n          <MultiSelectBusinessTypes\n            selectedCategories={selectedCategories}\n            selectedBusinessTypes={selectedBusinessTypes}\n            onCategoriesChange={setSelectedCategories}\n            onBusinessTypesChange={setSelectedBusinessTypes}\n          />\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Additional Keywords (Optional)\n            </label>\n            <input\n              type=\"text\"\n              value={keywords}\n              onChange={(e) => setKeywords(e.target.value)}\n              placeholder=\"e.g., luxury, organic, 24-hour (comma-separated)\"\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400\"\n            />\n            <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n              Add comma-separated keywords to refine your search.\n            </p>\n          </div>\n\n          <div className=\"space-y-4\">\n            <GeographicSelector\n              onLocationChange={handleGeographicChange}\n              initialLocation={location}\n              initialRadius={searchRadius}\n            />\n\n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"expandGeography\"\n                checked={expandGeography}\n                onChange={(e) => setExpandGeography(e.target.checked)}\n                className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700\"\n              />\n              <label\n                htmlFor=\"expandGeography\"\n                className=\"ml-2 text-sm text-gray-700 dark:text-gray-300\"\n              >\n                Expand geography automatically if initial results are limited\n              </label>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end\">\n            <button\n              type=\"button\"\n              onClick={handleContinue}\n              className=\"px-5 py-2 rounded-md bg-blue-600 text-white font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n              disabled={!isTargetingValid}\n            >\n              Continue to Campaign Setup\n            </button>\n          </div>\n        </section>\n\n        <section\n          className={`space-y-6 ${activeStep === 2 ? \"\" : \"hidden\"}`}\n          aria-hidden={activeStep !== 2}\n        >\n          <header className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n                Campaign Setup\n              </h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">\n                Review your targeting, then select enrichment tier and lead\n                quantity.\n              </p>\n            </div>\n            <button\n              type=\"button\"\n              onClick={handleBackToTargeting}\n              className=\"text-sm text-blue-600 hover:text-blue-700 dark:text-blue-300\"\n            >\n              ← Edit targeting\n            </button>\n          </header>\n\n          <div className=\"rounded-md border border-gray-200 bg-gray-50 p-4 dark:border-slate-700 dark:bg-slate-900/80\">\n            <h3 className=\"mb-3 text-sm font-semibold text-gray-800 dark:text-slate-200\">\n              Campaign summary\n            </h3>\n            <dl className=\"grid gap-3 sm:grid-cols-2\">\n              {summaryItems.map((item) => (\n                <div key={item.label} className=\"flex flex-col\">\n                  <dt className=\"text-xs uppercase tracking-wide text-gray-500 dark:text-slate-400\">\n                    {item.label}\n                  </dt>\n                  <dd className=\"text-sm text-gray-800 dark:text-slate-100\">\n                    {item.value}\n                  </dd>\n                </div>\n              ))}\n            </dl>\n          </div>\n\n          <TierSelector\n            selectedTier={selectedTier}\n            onTierChange={setSelectedTier}\n            numberOfLeads={numberOfLeads}\n          />\n\n          <div>\n            <label className=\"mb-2 block text-sm font-medium text-gray-700 dark:text-slate-200\">\n              Number of Leads\n            </label>\n            <div className=\"flex items-center gap-4\">\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"10\"\n                value={numberOfLeads}\n                onChange={(e) => setNumberOfLeads(parseInt(e.target.value, 10))}\n                className=\"h-2 flex-1 cursor-pointer appearance-none rounded-full bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                style={{\n                  background: `linear-gradient(90deg, #2563eb 0%, #2563eb ${sliderPercent}%, #d1d5db ${sliderPercent}%, #d1d5db 100%)`,\n                  accentColor: \"#2563eb\",\n                }}\n              />\n              <div className=\"min-w-fit rounded-full border border-blue-200 bg-blue-50 px-3 py-1 text-sm font-medium text-blue-700 dark:border-sky-400 dark:bg-slate-900 dark:text-sky-300\">\n                {numberOfLeads} leads\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rounded-lg border-2 border-yellow-400 bg-white p-4 shadow-sm dark:border-amber-400 dark:bg-slate-900\">\n            <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold uppercase tracking-wide text-gray-500 dark:text-slate-300\">\n                  Estimated cost\n                </p>\n                <div className=\"mt-1 flex items-baseline gap-x-3\">\n                  <span className=\"text-3xl font-bold text-blue-700 dark:text-sky-300\">\n                    ${estimatedCost.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n              <div className=\"flex w-full flex-col items-start gap-2 sm:w-auto sm:items-end\">\n                <span className=\"text-sm text-gray-600 dark:text-slate-400\">\n                  {numberOfLeads} leads × ${currentTierConfig.price.toFixed(2)}\n                </span>\n                <div className=\"flex flex-wrap items-center gap-2\">\n                  <span className=\"rounded-full border border-blue-200 bg-blue-50 px-3 py-1 text-xs font-medium text-blue-700 dark:border-sky-400 dark:bg-slate-900 dark:text-sky-300\">\n                    {currentTierConfig.name}\n                  </span>\n                  <button\n                    type=\"button\"\n                    onClick={handleSearch}\n                    disabled={isDiscovering}\n                    className=\"inline-flex items-center justify-center rounded-md bg-blue-600 px-5 py-2.5 text-sm font-semibold text-white shadow-sm transition-colors hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-60 dark:bg-sky-500 dark:hover:bg-sky-600\"\n                  >\n                    {isDiscovering ? (\n                      <>\n                        <svg\n                          className=\"-ml-1 mr-2 h-4 w-4 animate-spin text-white\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          fill=\"none\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <circle\n                            className=\"opacity-25\"\n                            cx=\"12\"\n                            cy=\"12\"\n                            r=\"10\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"4\"\n                          ></circle>\n                          <path\n                            className=\"opacity-75\"\n                            fill=\"currentColor\"\n                            d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                          ></path>\n                        </svg>\n                        Running…\n                      </>\n                    ) : (\n                      \"Run Campaign\"\n                    )}\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <ProgressDisplay\n            isDiscovering={isDiscovering}\n            progress={progress}\n            currentStage={currentStage}\n            cacheStats={cacheStats}\n          />\n        </section>\n\n        <section\n          className={`space-y-6 ${activeStep === 3 ? \"\" : \"hidden\"}`}\n          aria-hidden={activeStep !== 3}\n        >\n          <header className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n                Campaign Results\n              </h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">\n                {hasResultsForCurrentCampaign\n                  ? `${campaignLeads.length} leads captured • ${qualifiedLeadCount} qualified`\n                  : isDiscovering\n                  ? \"We're still enriching this campaign. Hang tight while ProspectPro verifies contacts.\"\n                  : \"Results will appear here once a campaign finishes. You can keep working in the meantime.\"}\n              </p>\n            </div>\n            <div className=\"flex flex-wrap gap-3\">\n              {currentCampaign && (\n                <button\n                  type=\"button\"\n                  onClick={handleViewCampaign}\n                  className=\"inline-flex items-center gap-2 rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-50 dark:border-slate-600 dark:bg-transparent dark:text-slate-200 dark:hover:border-sky-400\"\n                >\n                  View full campaign\n                </button>\n              )}\n              {hasResultsForCurrentCampaign && (\n                <button\n                  type=\"button\"\n                  onClick={handleExportResults}\n                  className=\"inline-flex items-center gap-2 rounded-md border border-emerald-400 px-4 py-2 text-sm font-semibold text-emerald-700 transition-colors hover:bg-emerald-50 dark:border-emerald-400 dark:text-emerald-300 dark:hover:bg-transparent\"\n                >\n                  📊 Export CSV\n                </button>\n              )}\n            </div>\n          </header>\n\n          {currentCampaign && (\n            <div className=\"rounded-lg border border-gray-200 bg-gray-50 p-4 dark:border-slate-700 dark:bg-slate-900/70\">\n              <div className=\"flex flex-wrap items-start justify-between gap-4\">\n                <div>\n                  <div className=\"text-xs uppercase tracking-wide text-gray-500 dark:text-slate-400\">\n                    Campaign ID\n                  </div>\n                  <div className=\"text-sm font-semibold text-gray-900 dark:text-slate-100\">\n                    {currentCampaign.campaign_id}\n                  </div>\n                  <div className=\"mt-2 text-xs text-gray-500 dark:text-slate-400\">\n                    Status • {currentCampaign.status}\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4 sm:grid-cols-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold text-gray-900 dark:text-slate-100\">\n                      {currentCampaign.leads_found ?? campaignLeads.length}\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-slate-400\">\n                      Total Leads\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold text-blue-600 dark:text-sky-300\">\n                      {currentCampaign.leads_qualified ?? qualifiedLeadCount}\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-slate-400\">\n                      Qualified\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold text-green-600 dark:text-emerald-300\">\n                      {currentCampaign.leads_validated ?? 0}\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-slate-400\">\n                      Validated\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold text-purple-600 dark:text-violet-300\">\n                      {currentCampaign.tier_used || selectedTier}\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-slate-400\">\n                      Tier\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden shadow-sm\">\n            {!hasResultsForCurrentCampaign ? (\n              <div className=\"flex flex-col items-center justify-center py-16 text-center\">\n                <span className=\"text-4xl mb-2\">🔍</span>\n                <h3 className=\"text-base font-semibold text-gray-900 dark:text-gray-100\">\n                  {isDiscovering\n                    ? \"ProspectPro is working on your campaign\"\n                    : \"No leads yet\"}\n                </h3>\n                <p className=\"mt-2 max-w-md text-sm text-gray-600 dark:text-gray-300\">\n                  {isDiscovering\n                    ? \"Please keep this tab open. We'll move results here automatically once enrichment finishes.\"\n                    : \"Launch or complete a campaign to populate results with verified leads.\"}\n                </p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                  <thead className=\"bg-gray-50 dark:bg-gray-900/40\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">\n                        Business\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">\n                        Contact\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">\n                        Confidence\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">\n                        Enrichment\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">\n                        Status\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">\n                        Cost\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                    {campaignLeads.map((lead) => (\n                      <tr\n                        key={lead.id}\n                        className=\"hover:bg-gray-50 dark:hover:bg-gray-900/30\"\n                      >\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-semibold text-gray-900 dark:text-gray-100\">\n                            {lead.business_name}\n                          </div>\n                          <div className=\"mt-1 text-xs text-gray-500 dark:text-gray-400\">\n                            {lead.address}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-gray-900 dark:text-gray-100 space-y-1\">\n                            {lead.phone && <div>📞 {lead.phone}</div>}\n                            {lead.website && (\n                              <div>\n                                🌐{\" \"}\n                                <a\n                                  href={lead.website}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  className=\"text-blue-600 dark:text-blue-400 hover:underline\"\n                                >\n                                  {lead.website.replace(/^https?:\\/\\//, \"\")}\n                                </a>\n                              </div>\n                            )}\n                            {lead.email && <div>📧 {lead.email}</div>}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span\n                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getConfidenceColor(\n                              lead.confidence_score\n                            )}`}\n                          >\n                            {lead.confidence_score}%\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex flex-col space-y-1\">\n                            <span className=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900/40 dark:text-purple-300\">\n                              {lead.enrichment_tier || currentTierConfig.name}\n                            </span>\n                            {lead.vault_secured && (\n                              <span className=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/40 dark:text-green-300\">\n                                🔐 Vault Secured\n                              </span>\n                            )}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span\n                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getValidationStatusColor(\n                              lead.validation_status\n                            )}`}\n                          >\n                            {lead.validation_status || \"pending\"}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-200\">\n                          ${lead.cost_to_acquire.toFixed(2)}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n        </section>\n\n        {error && (\n          <div className=\"mt-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md\">\n            <div className=\"flex\">\n              <div className=\"flex-shrink-0\">\n                <svg\n                  className=\"h-5 w-5 text-red-400 dark:text-red-500\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"currentColor\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n              <div className=\"ml-3\">\n                <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n                  Discovery Failed\n                </h3>\n                <div className=\"mt-2 text-sm text-red-700 dark:text-red-300\">\n                  <p>\n                    {error instanceof Error ? error.message : String(error)}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":8,"duration":0.194},
{"type":"measure","name":"lsp.did_open","count":13,"duration":8.709},
{"type":"mark","name":"lsp.did_open","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/AccountPage.tsx","languageId":"typescriptreact","version":1,"text":"import React from \"react\";\nimport { ApiUsageTable } from \"../components/ApiUsageTable\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\nexport const AccountPage: React.FC = () => {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-64\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"h-6 w-6 animate-spin rounded-full border-2 border-blue-600 border-t-transparent\"></div>\n          <span className=\"text-gray-600 dark:text-slate-400\">\n            Loading account...\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-64\">\n        <div className=\"rounded-lg border border-gray-200 bg-white p-8 text-center shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n          <h1 className=\"text-xl font-semibold text-gray-900 dark:text-slate-100\">\n            Sign in to manage your account\n          </h1>\n          <p className=\"mt-2 text-sm text-gray-600 dark:text-slate-400\">\n            Access your billing, usage analytics, and profile settings after\n            signing in.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const displayName = user?.user_metadata?.full_name || \"ProspectPro User\";\n  const email = user?.email || \"Not provided\";\n  const avatarUrl = user?.user_metadata?.avatar_url;\n  const createdAt = user?.created_at ? new Date(user.created_at) : null;\n  const lastSignIn = user?.last_sign_in_at\n    ? new Date(user.last_sign_in_at)\n    : null;\n\n  const initials = displayName\n    .split(\" \")\n    .map((part: string) => part.charAt(0))\n    .join(\"\")\n    .slice(0, 2)\n    .toUpperCase();\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-8\">\n      {/* Page Header */}\n      <div className=\"border-b border-gray-200 pb-6 dark:border-slate-700\">\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-slate-100\">\n          Account Settings\n        </h1>\n        <p className=\"mt-2 text-gray-600 dark:text-slate-400\">\n          Manage your account, view usage analytics, and configure preferences.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-8 lg:grid-cols-3\">\n        {/* Profile Section */}\n        <div className=\"lg:col-span-1\">\n          <div className=\"rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-slate-100 mb-4\">\n              Profile Information\n            </h2>\n\n            <div className=\"flex items-center space-x-4 mb-6\">\n              <div className=\"relative flex h-16 w-16 items-center justify-center overflow-hidden rounded-full border-2 border-blue-200 bg-blue-100 text-xl font-bold text-blue-700 shadow-sm dark:border-sky-500/60 dark:bg-sky-500/10 dark:text-sky-200\">\n                {avatarUrl ? (\n                  <img\n                    src={avatarUrl}\n                    alt={displayName}\n                    className=\"absolute inset-0 h-full w-full object-cover\"\n                  />\n                ) : (\n                  initials || \"PP\"\n                )}\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-slate-100\">\n                  {displayName}\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-slate-400\">\n                  {email}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <dt className=\"text-sm font-medium text-gray-500 dark:text-slate-400\">\n                  Account Created\n                </dt>\n                <dd className=\"text-sm text-gray-900 dark:text-slate-100\">\n                  {createdAt\n                    ? createdAt.toLocaleDateString(\"en-US\", {\n                        year: \"numeric\",\n                        month: \"long\",\n                        day: \"numeric\",\n                      })\n                    : \"Unknown\"}\n                </dd>\n              </div>\n\n              <div>\n                <dt className=\"text-sm font-medium text-gray-500 dark:text-slate-400\">\n                  Last Sign In\n                </dt>\n                <dd className=\"text-sm text-gray-900 dark:text-slate-100\">\n                  {lastSignIn\n                    ? lastSignIn.toLocaleDateString(\"en-US\", {\n                        year: \"numeric\",\n                        month: \"short\",\n                        day: \"numeric\",\n                        hour: \"2-digit\",\n                        minute: \"2-digit\",\n                      })\n                    : \"Unknown\"}\n                </dd>\n              </div>\n\n              <div>\n                <dt className=\"text-sm font-medium text-gray-500 dark:text-slate-400\">\n                  User ID\n                </dt>\n                <dd className=\"text-xs font-mono text-gray-700 dark:text-slate-300 break-all\">\n                  {user?.id || \"Not available\"}\n                </dd>\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"mt-6 rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-slate-100 mb-4\">\n              Quick Actions\n            </h3>\n            <div className=\"space-y-3\">\n              <button\n                type=\"button\"\n                className=\"w-full rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-50 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-200 dark:hover:bg-slate-700\"\n                onClick={() => {\n                  // TODO: Implement profile editing\n                  alert(\n                    \"Profile editing will be available in a future update.\"\n                  );\n                }}\n              >\n                Edit Profile\n              </button>\n              <button\n                type=\"button\"\n                className=\"w-full rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 transition-colors hover:bg-gray-50 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-200 dark:hover:bg-slate-700\"\n                onClick={() => {\n                  // TODO: Implement password change\n                  alert(\n                    \"Password management will be available in a future update.\"\n                  );\n                }}\n              >\n                Change Password\n              </button>\n              <button\n                type=\"button\"\n                className=\"w-full rounded-md border border-red-300 bg-white px-4 py-2 text-sm font-medium text-red-600 transition-colors hover:bg-red-50 dark:border-red-600 dark:bg-slate-800 dark:text-red-400 dark:hover:bg-red-900/20\"\n                onClick={() => {\n                  // TODO: Implement account deletion\n                  if (\n                    confirm(\n                      \"Are you sure you want to delete your account? This action cannot be undone.\"\n                    )\n                  ) {\n                    alert(\n                      \"Account deletion will be available in a future update.\"\n                    );\n                  }\n                }}\n              >\n                Delete Account\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Usage Analytics */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-lg font-semibold text-gray-900 dark:text-slate-100\">\n                API Usage & Cost Analytics\n              </h2>\n              <p className=\"text-sm text-gray-600 dark:text-slate-400\">\n                Monitor your API usage patterns and costs across all services.\n              </p>\n            </div>\n\n            <ApiUsageTable />\n          </div>\n        </div>\n      </div>\n\n      {/* Subscription and Billing Section (Placeholder) */}\n      <div className=\"rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-slate-700 dark:bg-slate-900\">\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-slate-100 mb-4\">\n          Subscription & Billing\n        </h2>\n        <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4 dark:border-sky-800 dark:bg-sky-900/20\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <svg\n                className=\"h-5 w-5 text-blue-400\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-blue-800 dark:text-sky-200\">\n                Current Plan: Pay-per-Use\n              </h3>\n              <p className=\"mt-1 text-sm text-blue-700 dark:text-sky-300\">\n                You're currently on a pay-per-use billing model with no monthly\n                subscription. API costs are charged based on actual usage.\n                Subscription plans with fixed pricing and enhanced features\n                coming soon.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_open","count":14,"duration":1.316},
{"type":"mark","name":"lsp.did_open","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport {\n  createUsageLogger,\n  UsageLogContext,\n  UsageLogger,\n} from \"../_shared/api-usage.ts\";\nimport { corsHeaders, handleCORS } from \"../_shared/edge-auth.ts\";\n\n// Background Task Business Discovery with Tiered Enrichment + Multi-Source Discovery\n// ProspectPro v4.3 - October 2025\n// - Google Places + Foursquare discovery with Census targeting\n// - Tier-aware enrichment pipeline with Hunter.io + NeverBounce\n// - Rich verification metadata persisted for UI + exports\n\n// Type declarations for EdgeRuntime\ndeclare const EdgeRuntime: {\n  waitUntil(promise: Promise<unknown>): void;\n};\n\ntype TierKey = \"BASE\" | \"PROFESSIONAL\" | \"ENTERPRISE\";\n\ntype DataSource = \"google_places\" | \"google_place_details\" | \"foursquare\";\n\ninterface TierSettings {\n  key: TierKey;\n  name: string;\n  pricePerLead: number;\n  orchestratorTier: \"starter\" | \"professional\" | \"enterprise\" | \"compliance\";\n  maxCostPerLead: number;\n  includes: {\n    verifyEmails: boolean;\n    personEnrichment: boolean;\n    apolloEnrichment: boolean;\n  };\n}\n\nconst ENRICHMENT_TIERS: Record<TierKey, TierSettings> = {\n  BASE: {\n    key: \"BASE\",\n    name: \"Base\",\n    pricePerLead: 0.15,\n    orchestratorTier: \"starter\",\n    maxCostPerLead: 0.5,\n    includes: {\n      verifyEmails: false, // Generic company email only\n      personEnrichment: false,\n      apolloEnrichment: false,\n    },\n  },\n  PROFESSIONAL: {\n    key: \"PROFESSIONAL\",\n    name: \"Professional\",\n    pricePerLead: 0.45,\n    orchestratorTier: \"professional\",\n    maxCostPerLead: 1.5,\n    includes: {\n      verifyEmails: true, // Professional email discovery & verification\n      personEnrichment: false,\n      apolloEnrichment: false,\n    },\n  },\n  ENTERPRISE: {\n    key: \"ENTERPRISE\",\n    name: \"Enterprise\",\n    pricePerLead: 2.5,\n    orchestratorTier: \"enterprise\",\n    maxCostPerLead: 7.5,\n    includes: {\n      verifyEmails: true,\n      personEnrichment: true, // Executive contact enrichment\n      apolloEnrichment: true, // Full compliance verification\n    },\n  },\n};\n\ninterface BusinessDiscoveryRequest {\n  businessType: string;\n  location: string;\n  keywords?: string[] | string;\n  searchRadius?: string;\n  expandGeography?: boolean;\n  maxResults?: number;\n  budgetLimit?: number;\n  minConfidenceScore?: number;\n  sessionUserId?: string;\n  tierKey?: TierKey;\n  tierName?: string;\n  tierPrice?: number;\n  options?: {\n    tradeAssociation?: boolean;\n    professionalLicense?: boolean;\n    chamberVerification?: boolean;\n    apolloDiscovery?: boolean;\n  };\n  userEmail?: string;\n}\n\ninterface RequestSnapshot {\n  requestedAt: string;\n  requestHash: string;\n  payload: {\n    businessType: string;\n    location: string;\n    keywords: string[];\n    searchRadius?: string;\n    expandGeography: boolean;\n    maxResults: number;\n    budgetLimit: number;\n    minConfidenceScore: number;\n    tierKey: TierKey;\n    tierName: string;\n    options: {\n      tradeAssociation: boolean;\n      professionalLicense: boolean;\n      chamberVerification: boolean;\n      apolloDiscovery: boolean;\n    };\n  };\n}\n\ninterface JobConfig {\n  campaignId: string;\n  businessType: string;\n  location: string;\n  keywords: string[];\n  searchRadius?: string;\n  expandGeography: boolean;\n  maxResults: number;\n  budgetLimit: number;\n  minConfidenceScore: number;\n  userId?: string;\n  sessionUserId?: string;\n  jobId?: string;\n  tier: TierSettings;\n  options: {\n    tradeAssociation: boolean;\n    professionalLicense: boolean;\n    chamberVerification: boolean;\n    apolloDiscovery: boolean;\n  };\n  requestSnapshot: RequestSnapshot;\n}\n\ninterface BusinessData {\n  name?: string;\n  businessName?: string;\n  formatted_address?: string;\n  address?: string;\n  formatted_phone_number?: string;\n  phone?: string;\n  website?: string;\n  place_id?: string;\n  rating?: number;\n  user_ratings_total?: number;\n  source?: DataSource;\n  data_enriched?: boolean;\n  foursquare_data?: Record<string, unknown>;\n}\n\ninterface DiscoveredBusiness extends BusinessData {\n  source: DataSource;\n}\n\ninterface FoursquarePlace {\n  fsq_id: string;\n  name: string;\n  location?: {\n    address?: string;\n    locality?: string;\n    admin_district?: string;\n    region?: string;\n    postcode?: string;\n    country?: string;\n  };\n  contact?: {\n    phone?: string;\n  };\n  website?: string;\n  rating?: number;\n  stats?: {\n    total_tips?: number;\n  };\n}\n\ninterface ScoredLead {\n  businessName: string;\n  address: string;\n  phone: string;\n  website: string;\n  email: string;\n  optimizedScore: number;\n  validationCost: number;\n  dataSources: string[];\n  enhancementData: {\n    verificationSources: string[];\n    emails?: Array<{\n      email: string;\n      confidence?: number;\n      verified?: boolean;\n      type?: string;\n      firstName?: string;\n      lastName?: string;\n      position?: string;\n    }>;\n    processingMetadata: {\n      totalCost: number;\n      validationCost: number;\n      enrichmentCost: number;\n      totalConfidenceBoost: number;\n      processingStrategy: string;\n      servicesUsed: string[];\n      servicesSkipped: string[];\n      enrichmentTier: string;\n      enrichmentCostBreakdown?: Record<string, number>;\n      emailStatus?: \"verified\" | \"unconfirmed\" | \"not_found\";\n      verifiedEmail?: string;\n      unverifiedEmail?: string;\n    };\n  };\n}\n\ninterface CensusIntelligence {\n  total_establishments: number;\n  density_score: number;\n  optimization: {\n    search_radius: number;\n    expected_results: number;\n    api_efficiency_score: number;\n    confidence_multiplier: number;\n  };\n  geographic_data: {\n    state: string;\n    county: string | null;\n    raw_location: string;\n    fallback?: boolean;\n  };\n}\n\nconst DEFAULT_OPTIONS = {\n  tradeAssociation: false,\n  professionalLicense: false,\n  chamberVerification: false,\n  apolloDiscovery: false,\n};\n\nconst GOOGLE_TEXT_SEARCH_COST = 0.032;\nconst GOOGLE_DETAILS_COST = 0.017;\nconst FOURSQUARE_SEARCH_COST = 0;\n\nfunction parseKeywords(input?: string[] | string): string[] {\n  if (!input) return [];\n  if (Array.isArray(input)) {\n    return input.map((value) => value.trim()).filter(Boolean);\n  }\n  return input\n    .split(\",\")\n    .map((value) => value.trim())\n    .filter(Boolean);\n}\n\nasync function createStableHash(payload: unknown): Promise<string> {\n  try {\n    if (!payload) {\n      return `${Date.now().toString(36)}${Math.random()\n        .toString(36)\n        .slice(2, 11)}`;\n    }\n\n    if (typeof crypto === \"undefined\" || !crypto?.subtle) {\n      return `${Date.now().toString(36)}${Math.random()\n        .toString(36)\n        .slice(2, 11)}`;\n    }\n\n    const encoder = new TextEncoder();\n    const encoded = encoder.encode(JSON.stringify(payload));\n    const buffer = await crypto.subtle.digest(\"SHA-256\", encoded);\n    return Array.from(new Uint8Array(buffer))\n      .map((byte) => byte.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n  } catch (error) {\n    console.warn(\"Hash generation failed\", error);\n    return `${Date.now().toString(36)}${Math.random()\n      .toString(36)\n      .slice(2, 11)}`;\n  }\n}\n\nfunction getTierSettings(\n  tierKey?: TierKey,\n  fallbackName?: string\n): TierSettings {\n  if (tierKey && ENRICHMENT_TIERS[tierKey]) {\n    return ENRICHMENT_TIERS[tierKey];\n  }\n\n  if (fallbackName) {\n    const match = (Object.values(ENRICHMENT_TIERS) as TierSettings[]).find(\n      (tier) => tier.name.toLowerCase() === fallbackName.toLowerCase()\n    );\n    if (match) return match;\n  }\n\n  return ENRICHMENT_TIERS.BASE; // Changed from PROFESSIONAL to BASE as default\n}\n\n// --------------------\n// Census Intelligence\n// --------------------\n\nclass CensusAPIClient {\n  private apiKey: string;\n  private baseURL: string;\n  private cache = new Map<string, { data: unknown; timestamp: number }>();\n  private cacheTTL = 24 * 60 * 60 * 1000;\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n    this.baseURL = \"https://api.census.gov/data\";\n  }\n\n  async getBusinessDensity(\n    businessType: string,\n    location: string\n  ): Promise<CensusIntelligence> {\n    const naicsCode = this.mapBusinessTypeToNAICS(businessType);\n    const geoData = this.parseLocation(location);\n\n    const censusData = await this.fetchCountyBusinessPatterns({\n      naics: naicsCode,\n      state: geoData.state,\n      county: geoData.county,\n    });\n\n    return this.calculateDensityMetrics(censusData, geoData, location);\n  }\n\n  private async fetchCountyBusinessPatterns({\n    naics,\n    state,\n    county,\n  }: {\n    naics: string;\n    state: string;\n    county: string | null;\n  }) {\n    const cacheKey = `cbp_${naics}_${state}_${county ?? \"all\"}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheTTL) {\n      return cached.data as unknown[];\n    }\n\n    const url = `${this.baseURL}/2021/cbp?get=ESTAB,EMP,NAICS2017_LABEL&for=state:${state}&NAICS2017=${naics}&key=${this.apiKey}`;\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error(`Census API error: ${response.status}`);\n    }\n\n    const data = (await response.json()) as unknown[];\n    this.cache.set(cacheKey, { data, timestamp: Date.now() });\n    return data;\n  }\n\n  private calculateDensityMetrics(\n    censusData: unknown[],\n    geoData: {\n      state: string;\n      county: string | null;\n      raw_location: string;\n      fallback?: boolean;\n    },\n    rawLocation: string\n  ): CensusIntelligence {\n    if (!Array.isArray(censusData) || censusData.length < 2) {\n      return this.getDefaultOptimization(\n        rawLocation,\n        geoData.state,\n        geoData.county\n      );\n    }\n\n    const businessData = censusData.slice(1) as [\n      string,\n      string,\n      string,\n      string\n    ][];\n    let totalEstablishments = 0;\n    let totalEmployment = 0;\n\n    for (const row of businessData) {\n      const [estab, emp] = row;\n      totalEstablishments += parseInt(estab) || 0;\n      totalEmployment += parseInt(emp) || 0;\n    }\n\n    const densityScore = Math.min(totalEstablishments / 750, 100);\n    const confidenceMultiplier =\n      totalEstablishments > 750 ? 1.3 : totalEstablishments > 250 ? 1.15 : 1;\n    const expectedResults = Math.max(Math.round(totalEstablishments * 0.04), 5);\n\n    return {\n      total_establishments: totalEstablishments,\n      density_score: densityScore,\n      optimization: {\n        search_radius: this.calculateOptimalRadius(densityScore),\n        expected_results: Math.min(expectedResults, 40),\n        api_efficiency_score: Math.round(densityScore),\n        confidence_multiplier: confidenceMultiplier,\n      },\n      geographic_data: geoData,\n    };\n  }\n\n  private getDefaultOptimization(\n    rawLocation: string,\n    state: string,\n    county: string | null\n  ): CensusIntelligence {\n    return {\n      total_establishments: 250,\n      density_score: 25,\n      optimization: {\n        search_radius: 25,\n        expected_results: 12,\n        api_efficiency_score: 45,\n        confidence_multiplier: 1,\n      },\n      geographic_data: {\n        state,\n        county,\n        raw_location: rawLocation,\n        fallback: true,\n      },\n    };\n  }\n\n  private mapBusinessTypeToNAICS(businessType: string): string {\n    const naicsMapping: Record<string, string> = {\n      accounting: \"5412\",\n      cpa: \"5412\",\n      legal: \"5411\",\n      electrician: \"238210\",\n      contractor: \"23\",\n      restaurant: \"7225\",\n      cafe: \"722515\",\n      medical: \"621\",\n      dental: \"6212\",\n      retail: \"44\",\n      spa: \"8121\",\n      salon: \"8121\",\n      consulting: \"5416\",\n      marketing: \"5418\",\n      real: \"531\",\n      hvac: \"238220\",\n    };\n\n    const lower = businessType.toLowerCase();\n    for (const [key, code] of Object.entries(naicsMapping)) {\n      if (lower.includes(key)) return code;\n    }\n    return \"00\";\n  }\n\n  private parseLocation(location: string) {\n    const stateMatch = location.match(/\\b([A-Z]{2})\\b/);\n    const stateCode = stateMatch ? this.getStateFIPSCode(stateMatch[1]) : \"06\";\n    return {\n      state: stateCode,\n      county: null,\n      raw_location: location,\n    };\n  }\n\n  private getStateFIPSCode(stateAbbr: string): string {\n    const stateCodes: Record<string, string> = {\n      AL: \"01\",\n      AK: \"02\",\n      AZ: \"04\",\n      AR: \"05\",\n      CA: \"06\",\n      CO: \"08\",\n      CT: \"09\",\n      DE: \"10\",\n      FL: \"12\",\n      GA: \"13\",\n      HI: \"15\",\n      ID: \"16\",\n      IL: \"17\",\n      IN: \"18\",\n      IA: \"19\",\n      KS: \"20\",\n      KY: \"21\",\n      LA: \"22\",\n      ME: \"23\",\n      MD: \"24\",\n      MA: \"25\",\n      MI: \"26\",\n      MN: \"27\",\n      MS: \"28\",\n      MO: \"29\",\n      MT: \"30\",\n      NE: \"31\",\n      NV: \"32\",\n      NH: \"33\",\n      NJ: \"34\",\n      NM: \"35\",\n      NY: \"36\",\n      NC: \"37\",\n      ND: \"38\",\n      OH: \"39\",\n      OK: \"40\",\n      OR: \"41\",\n      PA: \"42\",\n      RI: \"44\",\n      SC: \"45\",\n      SD: \"46\",\n      TN: \"47\",\n      TX: \"48\",\n      UT: \"49\",\n      VT: \"50\",\n      VA: \"51\",\n      WA: \"53\",\n      WV: \"54\",\n      WI: \"55\",\n      WY: \"56\",\n    };\n    return stateCodes[stateAbbr.toUpperCase()] || \"06\";\n  }\n\n  private calculateOptimalRadius(densityScore: number): number {\n    if (densityScore > 60) return 5;\n    if (densityScore > 30) return 10;\n    if (densityScore > 10) return 20;\n    return 35;\n  }\n}\n\nasync function fetchCensusIntelligence(\n  businessType: string,\n  location: string\n): Promise<CensusIntelligence | null> {\n  const censusKey = Deno.env.get(\"CENSUS_API_KEY\");\n  if (!censusKey) return null;\n\n  try {\n    const client = new CensusAPIClient(censusKey);\n    return await client.getBusinessDensity(businessType, location);\n  } catch (error) {\n    console.warn(\"Census intelligence unavailable:\", error);\n    return null;\n  }\n}\n\n// --------------------\n// Discovery Providers\n// --------------------\n\nasync function searchGooglePlaces(\n  businessType: string,\n  location: string,\n  keywords: string[],\n  maxResults: number,\n  usageLogger?: UsageLogger,\n  usageContext?: UsageLogContext\n): Promise<DiscoveredBusiness[]> {\n  const apiKey = Deno.env.get(\"GOOGLE_PLACES_API_KEY\");\n  if (!apiKey) throw new Error(\"Google Places API key not configured\");\n\n  const keywordSuffix = keywords.length > 0 ? ` ${keywords.join(\" \")}` : \"\";\n  const query = `${businessType}${keywordSuffix} in ${location}`;\n  const searchUrl = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(\n    query\n  )}&key=${apiKey}`;\n\n  const requestParams = {\n    query,\n    businessType,\n    location,\n    keywordCount: keywords.length,\n    maxResults,\n  };\n\n  let textResponse: Response | null = null;\n  let data: Record<string, unknown> = {};\n  const searchStarted = performance.now();\n\n  try {\n    textResponse = await fetch(searchUrl);\n    data = await textResponse.json();\n  } catch (error) {\n    await usageLogger?.log({\n      sourceName: \"google_places\",\n      endpoint: \"textsearch\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: textResponse?.status ?? null,\n      responseTimeMs: Math.round(performance.now() - searchStarted),\n      success: false,\n      errorMessage: error instanceof Error ? error.message : String(error),\n    });\n    throw error;\n  }\n\n  const searchElapsed = Math.round(performance.now() - searchStarted);\n\n  if (data.status !== \"OK\") {\n    await usageLogger?.log({\n      sourceName: \"google_places\",\n      endpoint: \"textsearch\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: textResponse.status,\n      responseTimeMs: searchElapsed,\n      success: false,\n      errorMessage:\n        (data.error_message as string | undefined) || (data.status as string),\n      estimatedCost: GOOGLE_TEXT_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw new Error(`Google Places API failed: ${data.status}`);\n  }\n\n  const results = (data.results as BusinessData[]).slice(0, maxResults * 2);\n\n  await usageLogger?.log({\n    sourceName: \"google_places\",\n    endpoint: \"textsearch\",\n    httpMethod: \"GET\",\n    requestParams,\n    queryType: \"discovery\",\n    responseCode: textResponse.status,\n    responseTimeMs: searchElapsed,\n    resultsReturned: results.length,\n    usefulResults: results.length,\n    success: true,\n    estimatedCost: GOOGLE_TEXT_SEARCH_COST,\n    actualCost: GOOGLE_TEXT_SEARCH_COST,\n    ...usageContext,\n  });\n\n  const enriched: DiscoveredBusiness[] = [];\n\n  for (const business of results) {\n    if (!business.place_id) {\n      enriched.push({ ...business, source: \"google_places\" });\n      continue;\n    }\n\n    const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${business.place_id}&fields=formatted_phone_number,website&key=${apiKey}`;\n    const detailStart = performance.now();\n\n    let detailsResponse: Response | null = null;\n    let detailsData: {\n      result?: {\n        formatted_phone_number?: string;\n        website?: string;\n      };\n      [key: string]: unknown;\n    } = {};\n\n    try {\n      detailsResponse = await fetch(detailsUrl);\n      detailsData = await detailsResponse.json();\n    } catch (error) {\n      await usageLogger?.log({\n        sourceName: \"google_places\",\n        endpoint: \"details\",\n        httpMethod: \"GET\",\n        requestParams: {\n          placeId: business.place_id,\n        },\n        queryType: \"discovery\",\n        responseCode: detailsResponse?.status ?? null,\n        responseTimeMs: Math.round(performance.now() - detailStart),\n        success: false,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        estimatedCost: GOOGLE_DETAILS_COST,\n        actualCost: 0,\n      });\n      throw error;\n    }\n\n    const detailElapsed = Math.round(performance.now() - detailStart);\n\n    const dataEnriched = Boolean(detailsData.result);\n\n    enriched.push({\n      ...business,\n      formatted_phone_number:\n        detailsData.result?.formatted_phone_number ??\n        business.formatted_phone_number ??\n        \"\",\n      website: detailsData.result?.website ?? business.website ?? \"\",\n      source: dataEnriched ? \"google_place_details\" : \"google_places\",\n      data_enriched: dataEnriched,\n    });\n\n    await usageLogger?.log({\n      sourceName: \"google_places\",\n      endpoint: \"details\",\n      httpMethod: \"GET\",\n      requestParams: {\n        placeId: business.place_id,\n        hasWebsite: Boolean(detailsData.result?.website),\n      },\n      queryType: \"discovery\",\n      responseCode: detailsResponse.status,\n      responseTimeMs: detailElapsed,\n      resultsReturned: dataEnriched ? 1 : 0,\n      usefulResults: dataEnriched ? 1 : 0,\n      success: detailsResponse.ok && dataEnriched,\n      estimatedCost: GOOGLE_DETAILS_COST,\n      actualCost: detailsResponse.ok && dataEnriched ? GOOGLE_DETAILS_COST : 0,\n    });\n\n    // Basic rate limiting to stay under quota\n    await new Promise((resolve) => setTimeout(resolve, 80));\n  }\n\n  return enriched;\n}\n\nasync function searchFoursquare(\n  businessType: string,\n  location: string,\n  keywords: string[],\n  maxResults: number,\n  usageLogger?: UsageLogger,\n  usageContext?: UsageLogContext\n): Promise<DiscoveredBusiness[]> {\n  const apiKey = Deno.env.get(\"FOURSQUARE_API_KEY\");\n  if (!apiKey) {\n    return [];\n  }\n\n  const queryString =\n    [businessType, ...keywords].join(\" \").trim() || businessType;\n  const limit = Math.min(Math.max(maxResults, 5), 30);\n  const params = new URLSearchParams({\n    query: queryString,\n    near: location,\n    limit: limit.toString(),\n    fields: \"fsq_id,name,location,contact,website,categories,rating,stats\",\n  });\n\n  const requestParams = {\n    query: queryString,\n    location,\n    limit,\n    keywordCount: keywords.length,\n  };\n\n  let response: Response | null = null;\n  const startedAt = performance.now();\n\n  try {\n    response = await fetch(\n      `https://api.foursquare.com/v3/places/search?${params}`,\n      {\n        headers: {\n          Authorization: apiKey,\n          Accept: \"application/json\",\n        },\n      }\n    );\n  } catch (error) {\n    await usageLogger?.log({\n      sourceName: \"foursquare\",\n      endpoint: \"places.search\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: response?.status ?? null,\n      responseTimeMs: Math.round(performance.now() - startedAt),\n      success: false,\n      errorMessage: error instanceof Error ? error.message : String(error),\n      estimatedCost: FOURSQUARE_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw error;\n  }\n\n  const elapsed = Math.round(performance.now() - startedAt);\n\n  if (!response.ok) {\n    await usageLogger?.log({\n      sourceName: \"foursquare\",\n      endpoint: \"places.search\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: response.status,\n      responseTimeMs: elapsed,\n      success: false,\n      errorMessage: `HTTP ${response.status}`,\n      estimatedCost: FOURSQUARE_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw new Error(`Foursquare API error: ${response.status}`);\n  }\n\n  let payload: { results?: FoursquarePlace[] } = {};\n  try {\n    payload = await response.json();\n  } catch (error) {\n    await usageLogger?.log({\n      sourceName: \"foursquare\",\n      endpoint: \"places.search\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: response.status,\n      responseTimeMs: elapsed,\n      success: false,\n      errorMessage: error instanceof Error ? error.message : String(error),\n      estimatedCost: FOURSQUARE_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw error;\n  }\n\n  const results = Array.isArray(payload.results) ? payload.results : [];\n\n  await usageLogger?.log({\n    sourceName: \"foursquare\",\n    endpoint: \"places.search\",\n    httpMethod: \"GET\",\n    requestParams,\n    queryType: \"discovery\",\n    responseCode: response.status,\n    responseTimeMs: elapsed,\n    resultsReturned: results.length,\n    usefulResults: results.length,\n    success: true,\n    estimatedCost: FOURSQUARE_SEARCH_COST,\n    actualCost: FOURSQUARE_SEARCH_COST,\n    ...usageContext,\n  });\n\n  return results.map((place) => ({\n    source: \"foursquare\" as DataSource,\n    place_id: place.fsq_id,\n    name: place.name,\n    formatted_address: formatFoursquareAddress(place.location),\n    formatted_phone_number: place.contact?.phone ?? \"\",\n    website: place.website ?? \"\",\n    rating: place.rating ?? 0,\n    user_ratings_total: place.stats?.total_tips ?? 0,\n    foursquare_data: place as unknown as Record<string, unknown>,\n  }));\n}\n\nfunction formatFoursquareAddress(\n  location: {\n    address?: string;\n    locality?: string;\n    admin_district?: string;\n    postcode?: string;\n    country?: string;\n  } = {}\n): string {\n  const parts = [\n    location.address,\n    location.locality,\n    location.admin_district,\n    location.postcode,\n    location.country,\n  ]\n    .map((value) => value?.trim())\n    .filter(Boolean);\n  return parts.join(\", \");\n}\n\ntype BusinessFingerprintSource = {\n  name?: string | null;\n  businessName?: string | null;\n  business_name?: string | null;\n  formatted_address?: string | null;\n  address?: string | null;\n  formatted_phone_number?: string | null;\n  phone?: string | null;\n  website?: string | null;\n  place_id?: string | null;\n  source?: DataSource;\n};\n\nfunction normalizeString(value?: string | null): string {\n  return value ? value.toLowerCase().replace(/\\s+/g, \" \").trim() : \"\";\n}\n\nfunction normalizePhone(value?: string | null): string {\n  return value ? value.replace(/\\D+/g, \"\") : \"\";\n}\n\nfunction normalizeWebsite(value?: string | null): string {\n  if (!value) return \"\";\n  const normalized = value.toLowerCase().trim();\n  const withoutProtocol = normalized.replace(/^https?:\\/\\//, \"\");\n  const withoutWww = withoutProtocol.replace(/^www\\./, \"\");\n  return withoutWww.split(\"/\")[0];\n}\n\nfunction createBusinessFingerprint(source: BusinessFingerprintSource): string {\n  const name = normalizeString(\n    source.business_name ?? source.businessName ?? source.name ?? \"\"\n  );\n  const address = normalizeString(\n    source.address ?? source.formatted_address ?? \"\"\n  );\n  const phone = normalizePhone(\n    source.phone ?? source.formatted_phone_number ?? \"\"\n  );\n  const website = normalizeWebsite(source.website ?? \"\");\n\n  if (name && address) {\n    return `${name}::${address}`;\n  }\n\n  if (name && phone) {\n    return `${name}::${phone}`;\n  }\n\n  if (website) {\n    return `domain::${website}`;\n  }\n\n  if (phone) {\n    return `phone::${phone}`;\n  }\n\n  if (name) {\n    return `name::${name}`;\n  }\n\n  return \"\";\n}\n\nfunction dedupeBusinesses(\n  businesses: DiscoveredBusiness[]\n): DiscoveredBusiness[] {\n  const map = new Map<string, DiscoveredBusiness>();\n  let fallbackIndex = 0;\n\n  for (const business of businesses) {\n    const fingerprint = createBusinessFingerprint(business);\n    const key = fingerprint\n      ? fingerprint\n      : business.place_id\n      ? `place::${business.place_id}`\n      : `fallback::${fallbackIndex++}`;\n\n    if (!map.has(key)) {\n      map.set(key, business);\n      continue;\n    }\n\n    const existing = map.get(key)!;\n    const existingHasWebsite = Boolean(existing.website);\n    const candidateHasWebsite = Boolean(business.website);\n    const existingHasPhone = Boolean(\n      existing.formatted_phone_number || existing.phone\n    );\n    const candidateHasPhone = Boolean(\n      business.formatted_phone_number || business.phone\n    );\n\n    const candidateIsDetailsUpgrade =\n      existing.source === \"google_places\" &&\n      business.source === \"google_place_details\";\n\n    const candidateHasMoreData =\n      candidateHasWebsite && !existingHasWebsite\n        ? true\n        : candidateHasPhone && !existingHasPhone\n        ? true\n        : false;\n\n    if (candidateIsDetailsUpgrade || candidateHasMoreData) {\n      map.set(key, business);\n    }\n  }\n  return Array.from(map.values());\n}\n\n// --------------------\n// Quality Scorer\n// --------------------\n\nclass QualityScorer {\n  private maxCostPerBusiness: number;\n  private tierName: string;\n  private censusMultiplier: number;\n\n  constructor(options: {\n    maxCostPerBusiness: number;\n    tierName: string;\n    censusMultiplier?: number;\n  }) {\n    this.maxCostPerBusiness = options.maxCostPerBusiness;\n    this.tierName = options.tierName;\n    this.censusMultiplier = options.censusMultiplier ?? 1;\n  }\n\n  scoreBusiness(business: DiscoveredBusiness): ScoredLead {\n    const businessName = business.name || business.businessName || \"\";\n    const address = business.formatted_address || business.address || \"\";\n    const phone = business.formatted_phone_number || business.phone || \"\";\n    const website = business.website || \"\";\n\n    const scores = {\n      businessName: businessName ? Math.min(100, businessName.length * 3) : 0,\n      address: address ? 100 : 0,\n      phone: phone ? 85 : 0,\n      website: website ? 80 : 0,\n      rating: business.rating ? Math.min(20, business.rating * 4) : 0,\n    };\n\n    let totalScore =\n      Object.values(scores).reduce((sum, score) => sum + score, 0) /\n      Object.values(scores).length;\n\n    if (business.source === \"foursquare\") {\n      totalScore += 8;\n    } else if (business.source === \"google_place_details\") {\n      totalScore += 5;\n    }\n\n    totalScore = Math.min(100, Math.round(totalScore * this.censusMultiplier));\n\n    const initialSources = new Set<string>();\n    initialSources.add(business.source);\n    if (business.data_enriched) {\n      initialSources.add(\"google_places_details_api\");\n    }\n\n    return {\n      businessName,\n      address,\n      phone,\n      website,\n      email: \"\",\n      optimizedScore: totalScore,\n      validationCost: 0.02,\n      dataSources: Array.from(initialSources),\n      enhancementData: {\n        verificationSources: Array.from(initialSources),\n        processingMetadata: {\n          totalCost: 0.02,\n          validationCost: 0.02,\n          enrichmentCost: 0,\n          totalConfidenceBoost: 0,\n          processingStrategy: \"basic\",\n          servicesUsed: Array.from(initialSources),\n          servicesSkipped: [],\n          enrichmentTier: this.tierName,\n          emailStatus: \"not_found\",\n        },\n      },\n    };\n  }\n}\n\n// --------------------\n// Enrichment Pipeline\n// --------------------\n\nasync function enrichLead(\n  lead: ScoredLead,\n  config: JobConfig\n): Promise<{ lead: ScoredLead; cost: number; enrichmentCost: number }> {\n  const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n  const serviceKey = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\");\n  if (!supabaseUrl || !serviceKey) {\n    return { lead, cost: lead.validationCost, enrichmentCost: 0 };\n  }\n\n  const url = `${supabaseUrl}/functions/v1/enrichment-orchestrator`;\n  const domain = lead.website\n    ? lead.website.replace(/^https?:\\/\\//, \"\").replace(/\\/.*$/, \"\")\n    : undefined;\n\n  const maxCostPerBusiness = Math.max(\n    config.tier.maxCostPerLead,\n    config.budgetLimit / Math.max(config.maxResults, 1)\n  );\n\n  const body = {\n    businessName: lead.businessName,\n    domain,\n    address: lead.address,\n    phone: lead.phone,\n    website: lead.website,\n    discoverEmails: true,\n    verifyEmails: config.tier.includes.verifyEmails,\n    includePersonEnrichment: config.tier.includes.personEnrichment,\n    apolloEnrichment:\n      config.tier.includes.apolloEnrichment || config.options.apolloDiscovery,\n    includeBusinessLicense: true,\n    includeCompanyEnrichment: true,\n    maxCostPerBusiness,\n    minConfidenceScore: config.minConfidenceScore,\n    tier: config.tier.orchestratorTier,\n    campaignId: config.campaignId,\n    jobId: config.jobId,\n    sessionUserId: config.sessionUserId,\n    userId: config.userId,\n    tierKey: config.tier.key,\n  };\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${serviceKey}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n\n  if (!response.ok) {\n    return { lead, cost: lead.validationCost, enrichmentCost: 0 };\n  }\n\n  const enrichmentData = await response.json();\n  type EnrichedEmail = {\n    email: string;\n    verified?: boolean;\n    [key: string]: unknown;\n  };\n\n  const emails = (enrichmentData.enrichedData?.emails ?? []) as EnrichedEmail[];\n\n  const normalizeDomain = (value?: string) =>\n    value ? value.toLowerCase().replace(/^www\\./, \"\") : \"\";\n\n  const normalizedDomain = normalizeDomain(domain);\n\n  const emailMatchesCorporateDomain = (emailAddress?: string) => {\n    if (!emailAddress || !normalizedDomain) return false;\n    const parts = emailAddress.split(\"@\");\n    if (parts.length !== 2) return false;\n    const emailDomain = normalizeDomain(parts[1]);\n    if (!emailDomain) return false;\n    return (\n      emailDomain === normalizedDomain ||\n      emailDomain.endsWith(`.${normalizedDomain}`)\n    );\n  };\n\n  const corporateEmails = normalizedDomain\n    ? emails.filter((entry: EnrichedEmail) =>\n        emailMatchesCorporateDomain(entry.email)\n      )\n    : emails;\n\n  const verifiedCorporate = corporateEmails.find(\n    (entry: EnrichedEmail) => entry.verified\n  );\n\n  let verifiedEmailEntry = verifiedCorporate;\n  if (!verifiedEmailEntry && !normalizedDomain) {\n    verifiedEmailEntry = emails.find((entry: EnrichedEmail) => entry.verified);\n  }\n\n  const unverifiedCorporate = corporateEmails.find(\n    (entry: EnrichedEmail) => entry.email && !entry.verified\n  );\n\n  const fallbackCandidate =\n    unverifiedCorporate ||\n    corporateEmails[0] ||\n    emails.find((entry: EnrichedEmail) => entry.email && !entry.verified) ||\n    emails[0];\n\n  let emailStatus: \"verified\" | \"unconfirmed\" | \"not_found\" = \"not_found\";\n  let verifiedEmailValue = \"\";\n  let unverifiedEmailValue = \"\";\n\n  if (verifiedEmailEntry?.email) {\n    emailStatus = \"verified\";\n    verifiedEmailValue = verifiedEmailEntry.email;\n  } else if (fallbackCandidate?.email) {\n    emailStatus = \"unconfirmed\";\n    unverifiedEmailValue = fallbackCandidate.email;\n  }\n\n  const servicesUsed = new Set<string>(\n    lead.enhancementData.verificationSources\n  );\n  (enrichmentData.processingMetadata?.servicesUsed ?? []).forEach(\n    (service: string) => servicesUsed.add(service)\n  );\n\n  const enrichmentCost = Number(enrichmentData.totalCost ?? 0);\n  const totalCost = lead.validationCost + enrichmentCost;\n\n  const updatedLead: ScoredLead = {\n    ...lead,\n    email: verifiedEmailValue || \"\",\n    enhancementData: {\n      ...lead.enhancementData,\n      verificationSources: Array.from(servicesUsed),\n      emails,\n      processingMetadata: {\n        ...lead.enhancementData.processingMetadata,\n        totalCost,\n        validationCost: lead.validationCost,\n        enrichmentCost,\n        servicesUsed: Array.from(servicesUsed),\n        servicesSkipped:\n          enrichmentData.processingMetadata?.servicesSkipped ?? [],\n        enrichmentTier: config.tier.name,\n        enrichmentCostBreakdown: enrichmentData.costBreakdown ?? undefined,\n        emailStatus,\n        verifiedEmail: verifiedEmailValue || undefined,\n        unverifiedEmail: unverifiedEmailValue || undefined,\n      },\n    },\n  };\n\n  return {\n    lead: updatedLead,\n    cost: totalCost,\n    enrichmentCost,\n  };\n}\n\n// --------------------\n// Discovery Workflow\n// --------------------\n\nasync function discoverBusinesses(\n  config: JobConfig,\n  census: CensusIntelligence | null,\n  usageLogger?: UsageLogger,\n  usageContext?: UsageLogContext\n): Promise<DiscoveredBusiness[]> {\n  const googleResults = await searchGooglePlaces(\n    config.businessType,\n    config.location,\n    config.keywords,\n    config.maxResults,\n    usageLogger,\n    {\n      ...usageContext,\n      businessQuery: config.businessType,\n      locationQuery: config.location,\n      tierKey: config.tier.key,\n    }\n  );\n\n  const results: DiscoveredBusiness[] = [...googleResults];\n\n  const shouldQueryFoursquare =\n    googleResults.length < config.maxResults * 1.2 || config.expandGeography;\n  if (shouldQueryFoursquare) {\n    const foursquareResults = await searchFoursquare(\n      config.businessType,\n      config.location,\n      config.keywords,\n      Math.max(\n        config.maxResults - googleResults.length,\n        Math.ceil(config.maxResults / 2)\n      ),\n      usageLogger,\n      {\n        ...usageContext,\n        businessQuery: config.businessType,\n        locationQuery: config.location,\n        tierKey: config.tier.key,\n      }\n    );\n    results.push(...foursquareResults);\n  }\n\n  const deduped = dedupeBusinesses(results);\n\n  if (\n    census &&\n    census.optimization.expected_results > deduped.length &&\n    config.expandGeography\n  ) {\n    const expandedResults = await searchFoursquare(\n      config.businessType,\n      census.geographic_data.raw_location,\n      config.keywords,\n      Math.min(census.optimization.expected_results, config.maxResults * 2),\n      usageLogger,\n      {\n        ...usageContext,\n        businessQuery: config.businessType,\n        locationQuery: census.geographic_data.raw_location,\n        tierKey: config.tier.key,\n      }\n    );\n    deduped.push(...expandedResults);\n  }\n\n  return dedupeBusinesses(deduped).slice(0, config.maxResults * 2);\n}\n\nasync function processDiscoveryJob(\n  jobId: string,\n  config: JobConfig,\n  supabaseUrl: string,\n  supabaseServiceKey: string\n) {\n  console.log(`🚀 Background job ${jobId} started`);\n\n  const supabase = createClient(supabaseUrl, supabaseServiceKey);\n  const usageLogger = createUsageLogger(supabaseUrl, supabaseServiceKey, {\n    campaignId: config.campaignId,\n    sessionId: config.sessionUserId ?? config.userId ?? null,\n    jobId,\n    tierKey: config.tier.key,\n    businessQuery: config.businessType,\n    locationQuery: config.location,\n  });\n  config.jobId = jobId;\n\n  try {\n    const { error: snapshotError } = await supabase\n      .from(\"campaign_request_snapshots\")\n      .insert({\n        campaign_id: config.campaignId,\n        user_id: config.userId,\n        session_user_id: config.sessionUserId,\n        request_hash: config.requestSnapshot.requestHash,\n        request_payload: config.requestSnapshot.payload,\n      });\n\n    if (snapshotError) {\n      console.warn(\n        \"Campaign request snapshot insert warning:\",\n        snapshotError.message\n      );\n    }\n  } catch (snapshotException) {\n    console.warn(\"Campaign request snapshot insert failed:\", snapshotException);\n  }\n\n  const historicalFingerprints = new Set<string>();\n\n  try {\n    if (config.userId) {\n      const { data: priorFingerprints, error: fingerprintsError } =\n        await supabase\n          .from(\"lead_fingerprints\")\n          .select(\"fingerprint\")\n          .eq(\"user_id\", config.userId)\n          .order(\"created_at\", { ascending: false })\n          .limit(5000);\n\n      if (fingerprintsError) {\n        console.warn(\n          \"Unable to load fingerprint ledger for duplicate suppression:\",\n          fingerprintsError.message\n        );\n      } else {\n        for (const row of priorFingerprints ?? []) {\n          if (row?.fingerprint) {\n            historicalFingerprints.add(row.fingerprint);\n          }\n        }\n      }\n    }\n\n    if (historicalFingerprints.size === 0 && config.userId) {\n      const { data: legacyLeads, error: legacyLeadsError } = await supabase\n        .from(\"leads\")\n        .select(\"business_name,address,phone,website\")\n        .eq(\"user_id\", config.userId)\n        .order(\"created_at\", { ascending: false })\n        .limit(1000);\n\n      if (legacyLeadsError) {\n        console.warn(\n          \"Legacy lead lookup failed for duplicate suppression:\",\n          legacyLeadsError.message\n        );\n      } else {\n        const legacyRows = (legacyLeads ?? []) as Array<{\n          business_name?: string | null;\n          address?: string | null;\n          phone?: string | null;\n          website?: string | null;\n        }>;\n\n        for (const lead of legacyRows) {\n          const fingerprint = createBusinessFingerprint(lead);\n          if (fingerprint) {\n            historicalFingerprints.add(fingerprint);\n          }\n        }\n      }\n    }\n  } catch (historyError) {\n    console.warn(\"Historical fingerprint lookup failed:\", historyError);\n  }\n\n  try {\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        status: \"processing\",\n        started_at: new Date().toISOString(),\n        current_stage: \"discovering_businesses\",\n        progress: 10,\n      })\n      .eq(\"id\", jobId);\n\n    const censusIntelligence = await fetchCensusIntelligence(\n      config.businessType,\n      config.location\n    );\n\n    let historicalFilteredCount = 0;\n\n    const applyHistoricalFilter = (\n      businesses: DiscoveredBusiness[]\n    ): DiscoveredBusiness[] => {\n      if (historicalFingerprints.size === 0) {\n        return businesses;\n      }\n\n      const filteredResults: DiscoveredBusiness[] = [];\n      for (const business of businesses) {\n        const fingerprint = createBusinessFingerprint(business);\n        if (fingerprint && historicalFingerprints.has(fingerprint)) {\n          historicalFilteredCount += 1;\n          continue;\n        }\n        filteredResults.push(business);\n      }\n      return filteredResults;\n    };\n\n    let discoveredBusinesses: DiscoveredBusiness[] = await discoverBusinesses(\n      config,\n      censusIntelligence,\n      usageLogger,\n      {\n        campaignId: config.campaignId,\n        sessionId: config.sessionUserId ?? config.userId ?? null,\n        jobId,\n        tierKey: config.tier.key,\n        businessQuery: config.businessType,\n        locationQuery: config.location,\n      }\n    );\n    let totalRawDiscovered = discoveredBusinesses.length;\n\n    discoveredBusinesses = applyHistoricalFilter(discoveredBusinesses);\n\n    if (\n      discoveredBusinesses.length === 0 &&\n      totalRawDiscovered > 0 &&\n      !config.expandGeography\n    ) {\n      console.log(\n        `ℹ️ No novel businesses found for ${config.businessType} in ${config.location}. Expanding geography to locate fresh results.`\n      );\n\n      const expandedConfig: JobConfig = {\n        ...config,\n        expandGeography: true,\n      };\n\n      const expandedResults = await discoverBusinesses(\n        expandedConfig,\n        censusIntelligence,\n        usageLogger,\n        {\n          campaignId: config.campaignId,\n          sessionId: config.sessionUserId ?? config.userId ?? null,\n          jobId,\n          tierKey: config.tier.key,\n          businessQuery: expandedConfig.businessType,\n          locationQuery: expandedConfig.location,\n        }\n      );\n\n      totalRawDiscovered += expandedResults.length;\n      discoveredBusinesses = applyHistoricalFilter(expandedResults);\n    }\n\n    if (historicalFilteredCount > 0) {\n      console.log(\n        `ℹ️ Suppressed ${historicalFilteredCount} previously delivered businesses for user ${config.userId}`\n      );\n    }\n\n    const sourcesUsed = Array.from(\n      new Set(discoveredBusinesses.map((business) => business.source))\n    );\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        current_stage: \"scoring_businesses\",\n        progress: 30,\n        metrics: {\n          businesses_found: discoveredBusinesses.length,\n          raw_candidates: totalRawDiscovered,\n          previously_delivered_filtered: historicalFilteredCount,\n          sources_used: sourcesUsed,\n          census_density_score: censusIntelligence?.density_score ?? null,\n        },\n      })\n      .eq(\"id\", jobId);\n\n    const scorer = new QualityScorer({\n      maxCostPerBusiness: config.budgetLimit / Math.max(config.maxResults, 1),\n      tierName: config.tier.name,\n      censusMultiplier: censusIntelligence?.optimization.confidence_multiplier,\n    });\n\n    const scoredBusinesses = discoveredBusinesses.map((business) =>\n      scorer.scoreBusiness(business)\n    );\n\n    const qualifiedLeads = scoredBusinesses\n      .filter((lead) => lead.optimizedScore >= config.minConfidenceScore)\n      .slice(0, config.maxResults);\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        current_stage: \"enriching_contacts\",\n        progress: 50,\n        metrics: {\n          businesses_found: discoveredBusinesses.length,\n          qualified_leads: qualifiedLeads.length,\n          raw_candidates: totalRawDiscovered,\n          previously_delivered_filtered: historicalFilteredCount,\n          sources_used: sourcesUsed,\n          census_density_score: censusIntelligence?.density_score ?? null,\n        },\n      })\n      .eq(\"id\", jobId);\n\n    const enrichedLeads: ScoredLead[] = [];\n    let totalCost = 0;\n    let totalValidationCost = 0;\n    let totalEnrichmentCost = 0;\n\n    for (let index = 0; index < qualifiedLeads.length; index += 1) {\n      const lead = qualifiedLeads[index];\n      try {\n        const enrichmentResult = await enrichLead(lead, config);\n        enrichedLeads.push(enrichmentResult.lead);\n        totalCost += enrichmentResult.cost;\n        totalValidationCost +=\n          enrichmentResult.lead.enhancementData.processingMetadata\n            .validationCost;\n        totalEnrichmentCost += enrichmentResult.enrichmentCost;\n      } catch (error) {\n        console.error(`❌ Enrichment error for ${lead.businessName}:`, error);\n        enrichedLeads.push(lead);\n        totalCost += lead.validationCost;\n        totalValidationCost += lead.validationCost;\n      }\n\n      const progress =\n        50 +\n        Math.floor(((index + 1) / Math.max(qualifiedLeads.length, 1)) * 35);\n      await supabase\n        .from(\"discovery_jobs\")\n        .update({\n          progress,\n          metrics: {\n            businesses_found: discoveredBusinesses.length,\n            qualified_leads: qualifiedLeads.length,\n            leads_enriched: index + 1,\n            total_cost: Number(totalCost.toFixed(3)),\n            validation_cost_total: Number(totalValidationCost.toFixed(3)),\n            enrichment_cost_total: Number(totalEnrichmentCost.toFixed(3)),\n            raw_candidates: totalRawDiscovered,\n            previously_delivered_filtered: historicalFilteredCount,\n            sources_used: sourcesUsed,\n            census_density_score: censusIntelligence?.density_score ?? null,\n          },\n        })\n        .eq(\"id\", jobId);\n    }\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        current_stage: \"storing_results\",\n        progress: 90,\n      })\n      .eq(\"id\", jobId);\n\n    const campaignInsert = await supabase\n      .from(\"campaigns\")\n      .insert({\n        id: config.campaignId,\n        business_type: config.businessType,\n        location: config.location,\n        target_count: config.maxResults,\n        results_count: enrichedLeads.length,\n        total_cost: Number(totalCost.toFixed(3)),\n        status: \"completed\",\n        user_id: config.userId,\n        session_user_id: config.sessionUserId,\n        processing_time_ms: null,\n      })\n      .select(\"id\")\n      .single();\n\n    if (campaignInsert.error) {\n      console.warn(\"Campaign insert warning:\", campaignInsert.error.message);\n    }\n\n    const leadsPayload = enrichedLeads.map((lead) => ({\n      campaign_id: config.campaignId,\n      business_name: lead.businessName,\n      address: lead.address,\n      phone: lead.phone,\n      website: lead.website,\n      email: lead.email,\n      confidence_score: lead.optimizedScore,\n      enrichment_data: {\n        verificationSources: lead.enhancementData.verificationSources,\n        emails: lead.enhancementData.emails,\n        processingMetadata: lead.enhancementData.processingMetadata,\n        dataSources: lead.dataSources,\n      },\n      validation_cost: lead.enhancementData.processingMetadata.validationCost,\n      user_id: config.userId,\n      session_user_id: config.sessionUserId,\n    }));\n\n    let insertedLeads: Array<{\n      id: number;\n      business_name?: string | null;\n      address?: string | null;\n      phone?: string | null;\n      website?: string | null;\n    }> | null = null;\n\n    if (leadsPayload.length > 0) {\n      const leadInsert = await supabase\n        .from(\"leads\")\n        .insert(leadsPayload)\n        .select(\"id,business_name,address,phone,website\");\n      if (leadInsert.error) {\n        console.error(\"Lead insert error:\", leadInsert.error.message);\n      } else {\n        insertedLeads = leadInsert.data ?? [];\n      }\n    }\n\n    if (insertedLeads && insertedLeads.length > 0) {\n      type FingerprintRow = {\n        fingerprint: string;\n        user_id: string | null;\n        session_user_id: string | null;\n        campaign_id: string;\n        lead_id: number;\n        business_name: string;\n      };\n\n      const fingerprintRows = insertedLeads\n        .map((row, index): FingerprintRow | null => {\n          const lead = enrichedLeads[index];\n          const fingerprint = createBusinessFingerprint({\n            business_name: row.business_name ?? lead?.businessName ?? \"\",\n            address: row.address ?? lead?.address ?? \"\",\n            phone: row.phone ?? lead?.phone ?? \"\",\n            website: row.website ?? lead?.website ?? \"\",\n          });\n\n          if (!fingerprint) {\n            return null;\n          }\n\n          return {\n            fingerprint,\n            user_id: config.userId ?? null,\n            session_user_id: config.sessionUserId ?? null,\n            campaign_id: config.campaignId,\n            lead_id: row.id,\n            business_name: row.business_name ?? lead?.businessName ?? \"\",\n          };\n        })\n        .filter((row): row is FingerprintRow => Boolean(row));\n\n      if (fingerprintRows.length > 0) {\n        const { error: fingerprintInsertError } = await supabase\n          .from(\"lead_fingerprints\")\n          .upsert(fingerprintRows, { onConflict: \"fingerprint,user_id\" });\n\n        if (fingerprintInsertError) {\n          console.warn(\n            \"Lead fingerprint insert warning:\",\n            fingerprintInsertError.message\n          );\n        }\n      }\n    }\n\n    const averageConfidence = enrichedLeads.length\n      ? enrichedLeads.reduce((sum, lead) => sum + lead.optimizedScore, 0) /\n        enrichedLeads.length\n      : 0;\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        status: \"completed\",\n        progress: 100,\n        completed_at: new Date().toISOString(),\n        results: enrichedLeads,\n        metrics: {\n          total_found: enrichedLeads.length,\n          qualified_leads: qualifiedLeads.length,\n          total_cost: Number(totalCost.toFixed(3)),\n          validation_cost_total: Number(totalValidationCost.toFixed(3)),\n          enrichment_cost_total: Number(totalEnrichmentCost.toFixed(3)),\n          avg_confidence: Number(averageConfidence.toFixed(1)),\n          tier_key: config.tier.key,\n          tier_name: config.tier.name,\n          tier_price: config.tier.pricePerLead,\n          raw_candidates: totalRawDiscovered,\n          previously_delivered_filtered: historicalFilteredCount,\n          sources_used: sourcesUsed,\n          census_density_score: censusIntelligence?.density_score ?? null,\n        },\n      })\n      .eq(\"id\", jobId);\n\n    console.log(\n      `✅ Background job ${jobId} completed: ${\n        enrichedLeads.length\n      } leads, $${totalCost.toFixed(3)}`\n    );\n  } catch (error) {\n    console.error(`❌ Background job ${jobId} failed:`, error);\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        status: \"failed\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        completed_at: new Date().toISOString(),\n      })\n      .eq(\"id\", jobId);\n  }\n}\n\n// --------------------\n// MAIN HANDLER\n// --------------------\n\nserve(async (req) => {\n  const corsResponse = handleCORS(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n    const supabaseAnonKey = Deno.env.get(\"SUPABASE_ANON_KEY\");\n    const supabaseServiceKey = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\");\n\n    if (!supabaseUrl || !supabaseAnonKey || !supabaseServiceKey) {\n      console.error(\"Missing Supabase environment variables\", {\n        hasUrl: Boolean(supabaseUrl),\n        hasAnonKey: Boolean(supabaseAnonKey),\n        hasServiceKey: Boolean(supabaseServiceKey),\n      });\n\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error:\n            \"Edge function misconfigured: missing Supabase credentials. Verify SUPABASE_URL, SUPABASE_ANON_KEY, and SUPABASE_SERVICE_ROLE_KEY secrets.\",\n        }),\n        {\n          status: 500,\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    const authHeader = req.headers.get(\"Authorization\");\n    const sessionHeader =\n      req.headers.get(\"x-prospect-session\") ??\n      req.headers.get(\"X-Prospect-Session\");\n    const globalHeaders: Record<string, string> = authHeader\n      ? { Authorization: authHeader }\n      : {};\n    const supabaseClient = createClient(supabaseUrl, supabaseAnonKey, {\n      global: { headers: globalHeaders },\n    });\n\n    const accessToken = sessionHeader?.startsWith(\"Bearer \")\n      ? sessionHeader.slice(\"Bearer \".length).trim()\n      : sessionHeader && sessionHeader.length > 0\n      ? sessionHeader\n      : authHeader?.startsWith(\"Bearer \")\n      ? authHeader.slice(\"Bearer \".length).trim()\n      : null;\n\n    const {\n      data: { user },\n      error: authError,\n    } = accessToken\n      ? await supabaseClient.auth.getUser(accessToken)\n      : await supabaseClient.auth.getUser();\n\n    if (authError) {\n      console.error(\"Auth session validation failed\", {\n        message: authError.message,\n        status: authError.status,\n        authHeaderPreview: authHeader\n          ? `${authHeader.slice(0, 12)}...${authHeader.slice(-12)}`\n          : null,\n        sessionHeaderPreview: sessionHeader\n          ? `${sessionHeader.slice(0, 12)}...${sessionHeader.slice(-12)}`\n          : null,\n      });\n    }\n\n    if (!user?.id) {\n      const debugHint = authError\n        ? `Auth error: ${authError.message}`\n        : \"Missing user in session\";\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Authentication required to start discovery campaigns.\",\n          debug: debugHint,\n        }),\n        {\n          status: 401,\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    const requestData: BusinessDiscoveryRequest = await req.json();\n    const {\n      businessType,\n      location,\n      keywords,\n      searchRadius,\n      expandGeography = false,\n      maxResults = 5,\n      budgetLimit,\n      minConfidenceScore = 50,\n      sessionUserId,\n      tierKey,\n      tierName,\n      options = {},\n    } = requestData;\n\n    if (sessionUserId && sessionUserId !== user.id) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Session mismatch detected. Please re-authenticate.\",\n        }),\n        {\n          status: 403,\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    const tierSettings = getTierSettings(tierKey, tierName);\n    const enforcedBudget =\n      budgetLimit ?? maxResults * tierSettings.pricePerLead;\n    const keywordList = parseKeywords(keywords);\n\n    const jobRandomSource =\n      typeof crypto !== \"undefined\" && \"randomUUID\" in crypto\n        ? crypto.randomUUID()\n        : `${Date.now().toString(36)}${Math.random()\n            .toString(36)\n            .slice(2, 11)}`;\n    const jobId = `job_${jobRandomSource.replace(/[^A-Za-z0-9]+/g, \"\")}`;\n\n    const buildUniqueCampaignId = (baseName: string) => {\n      const normalizedBase = baseName\n        .replace(/[^A-Za-z0-9_]+/g, \"_\")\n        .replace(/_+/g, \"_\")\n        .replace(/^_+|_+$/g, \"\")\n        .toUpperCase();\n      const cryptoObj =\n        typeof globalThis !== \"undefined\" && \"crypto\" in globalThis\n          ? (globalThis as { crypto?: Crypto }).crypto\n          : undefined;\n      const randomSource =\n        cryptoObj && typeof cryptoObj.randomUUID === \"function\"\n          ? cryptoObj.randomUUID()\n          : `${Math.random().toString(36).slice(2)}${Math.random()\n              .toString(36)\n              .slice(2)}`;\n      const sanitizedRandom = randomSource.replace(/[^A-Za-z0-9]+/g, \"\");\n      const randomSuffix = sanitizedRandom\n        .padEnd(8, \"0\")\n        .slice(0, 8)\n        .toUpperCase();\n      const timestampSuffix = Date.now().toString(36).toUpperCase();\n      const trimmedBase = normalizedBase.slice(0, 40);\n      const safeBase = trimmedBase.length > 0 ? trimmedBase : \"CAMPAIGN\";\n      return `${safeBase}_${timestampSuffix}_${randomSuffix}`;\n    };\n\n    // Generate structured campaign ID using database function\n    let campaignId: string;\n    try {\n      const { data: generatedName, error: nameError } =\n        await supabaseClient.rpc(\"generate_campaign_name\", {\n          business_type: businessType,\n          location: location,\n          user_id: user?.id || null,\n        });\n\n      if (nameError) {\n        console.warn(\n          \"Campaign name generation failed, using fallback:\",\n          nameError\n        );\n        campaignId = buildUniqueCampaignId(\n          `campaign_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`\n        );\n      } else {\n        campaignId = buildUniqueCampaignId(\n          generatedName ||\n            `campaign_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`\n        );\n      }\n    } catch (error) {\n      console.warn(\"Campaign name generation error, using fallback:\", error);\n      campaignId = buildUniqueCampaignId(\n        `campaign_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`\n      );\n    }\n\n    const resolvedOptions = {\n      ...DEFAULT_OPTIONS,\n      ...options,\n    };\n\n    const snapshotPayload = {\n      businessType,\n      location,\n      keywords: keywordList,\n      searchRadius,\n      expandGeography,\n      maxResults,\n      budgetLimit: enforcedBudget,\n      minConfidenceScore,\n      tierKey: tierSettings.key,\n      tierName: tierSettings.name,\n      options: resolvedOptions,\n    };\n    const requestedAt = new Date().toISOString();\n    const requestHash = await createStableHash({\n      userId: user.id,\n      sessionUserId: sessionUserId ?? user.id,\n      snapshotPayload,\n    });\n\n    const requestSnapshot: RequestSnapshot = {\n      requestedAt,\n      requestHash,\n      payload: snapshotPayload,\n    };\n\n    const jobConfig: JobConfig = {\n      campaignId,\n      businessType,\n      location,\n      keywords: keywordList,\n      searchRadius,\n      expandGeography,\n      maxResults,\n      budgetLimit: enforcedBudget,\n      minConfidenceScore,\n      userId: user.id,\n      sessionUserId: user.id,\n      tier: tierSettings,\n      options: resolvedOptions,\n      requestSnapshot,\n    };\n\n    const { error: jobError } = await supabaseClient\n      .from(\"discovery_jobs\")\n      .insert({\n        id: jobId,\n        campaign_id: campaignId,\n        user_id: user.id,\n        session_user_id: user.id,\n        status: \"pending\",\n        config: {\n          ...jobConfig,\n          tier: {\n            key: tierSettings.key,\n            name: tierSettings.name,\n            pricePerLead: tierSettings.pricePerLead,\n          },\n        },\n      });\n\n    if (jobError) {\n      throw new Error(`Failed to create job: ${jobError.message}`);\n    }\n\n    EdgeRuntime.waitUntil(\n      processDiscoveryJob(jobId, jobConfig, supabaseUrl, supabaseServiceKey)\n    );\n\n    const responsePayload = {\n      success: true,\n      message: \"Discovery job created and processing in background\",\n      jobId,\n      campaignId,\n      status: \"processing\",\n      estimatedTime: \"1-2 minutes\",\n      realtimeChannel: `discovery_jobs:id=eq.${jobId}`,\n    };\n\n    return new Response(JSON.stringify(responsePayload), {\n      headers: {\n        ...corsHeaders,\n        \"Content-Type\": \"application/json\",\n        \"Cache-Control\": \"private, max-age=30, must-revalidate\",\n        ETag: `W/\"${jobId}\"`,\n      },\n    });\n  } catch (error) {\n    console.error(\"❌ Error:\", error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n});\n"}}},
{"type":"measure","name":"lsp.testing_update","count":9,"duration":0.469},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":10,"duration":0.215},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":11,"duration":0.379},
{"type":"measure","name":"lsp.did_open","count":15,"duration":23.493},
{"type":"mark","name":"lsp.did_open","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport type { SupabaseClient } from \"https://esm.sh/@supabase/supabase-js@2.38.0\";\nimport type { AuthenticatedRequestContext } from \"../_shared/edge-auth.ts\";\nimport {\n  authenticateRequest,\n  corsHeaders,\n  handleCORS,\n} from \"../_shared/edge-auth.ts\";\n\n// User-Aware Campaign Export Function\n// October 4, 2025 - Export with user authentication and ownership\n\ninterface ExportRequest {\n  campaignId?: string;\n  format?: \"csv\" | \"json\" | \"xlsx\";\n  includeEnrichmentData?: boolean;\n  userEmail?: string;\n}\n\ninterface ExportLead {\n  businessName: string;\n  address: string;\n  phone: string;\n  website: string;\n  email: string;\n  confidenceScore: number;\n  verificationSources: string[];\n  apolloVerified: boolean;\n  chamberVerified: boolean;\n  licenseVerified: boolean;\n  totalCost: number;\n  processingStrategy: string;\n}\n\ninterface ExportUserContext {\n  userId: string;\n  sessionId: string | null;\n  userEmail: string | null;\n  isAnonymous: boolean;\n  isAuthenticated: boolean;\n}\n\ninterface CampaignRow {\n  id: string;\n  business_type: string;\n  location: string;\n  target_count: number;\n  results_count: number;\n  total_cost: number;\n  created_at: string;\n  [key: string]: unknown;\n}\n\ninterface LeadRow {\n  campaign_id: string;\n  business_name: string;\n  address: string;\n  phone: string;\n  website: string;\n  email: string;\n  confidence_score: number;\n  enrichment_data?: {\n    verificationSources?: string[];\n    apolloVerified?: boolean;\n    chamberVerified?: boolean;\n    licenseVerified?: boolean;\n    processingMetadata?: {\n      totalCost?: number;\n      processingStrategy?: string;\n    };\n  };\n  [key: string]: unknown;\n}\n\n// Helper function to get user context from authenticated request\nfunction getUserContext(\n  authContext: AuthenticatedRequestContext,\n  requestData: ExportRequest\n): ExportUserContext {\n  const resolvedEmail = requestData.userEmail ?? authContext.email;\n\n  return {\n    userId: authContext.userId,\n    sessionId: authContext.sessionId,\n    userEmail: resolvedEmail,\n    isAnonymous: authContext.isAnonymous,\n    isAuthenticated: true,\n  };\n}\n\n// CSV formatting function\nfunction formatAsCSV(\n  leads: ExportLead[],\n  includeEnrichmentData: boolean\n): string {\n  const headers = [\n    \"Business Name\",\n    \"Address\",\n    \"Phone\",\n    \"Website\",\n    \"Email\",\n    \"Confidence Score\",\n  ];\n\n  if (includeEnrichmentData) {\n    headers.push(\n      \"Verification Sources\",\n      \"Apollo Verified\",\n      \"Chamber Verified\",\n      \"License Verified\",\n      \"Total Cost\",\n      \"Processing Strategy\"\n    );\n  }\n\n  const csvRows = [headers.join(\",\")];\n\n  leads.forEach((lead) => {\n    const row = [\n      `\"${lead.businessName.replace(/\"/g, '\"\"')}\"`,\n      `\"${lead.address.replace(/\"/g, '\"\"')}\"`,\n      `\"${lead.phone}\"`,\n      `\"${lead.website}\"`,\n      `\"${lead.email}\"`,\n      lead.confidenceScore.toString(),\n    ];\n\n    if (includeEnrichmentData) {\n      row.push(\n        `\"${lead.verificationSources.join(\", \")}\"`,\n        lead.apolloVerified.toString(),\n        lead.chamberVerified.toString(),\n        lead.licenseVerified.toString(),\n        lead.totalCost.toString(),\n        `\"${lead.processingStrategy}\"`\n      );\n    }\n\n    csvRows.push(row.join(\",\"));\n  });\n\n  return csvRows.join(\"\\n\");\n}\n\n// Get campaign data with user authorization\nasync function getCampaignData(\n  supabaseClient: SupabaseClient,\n  campaignId: string\n): Promise<{ campaign: CampaignRow; leads: LeadRow[] }> {\n  try {\n    // Get campaign with user authorization - RLS policies will handle access control\n    const { data: campaignData, error: campaignError } = await supabaseClient\n      .from(\"campaigns\")\n      .select(\"*\")\n      .eq(\"id\", campaignId)\n      .single();\n\n    if (campaignError || !campaignData) {\n      throw new Error(\n        `Campaign not found or access denied: ${\n          campaignError?.message ?? \"unknown error\"\n        }`\n      );\n    }\n\n    // Get leads for the campaign\n    const { data: leadsData, error: leadsError } = await supabaseClient\n      .from(\"leads\")\n      .select(\"*\")\n      .eq(\"campaign_id\", campaignId);\n\n    if (leadsError) {\n      throw new Error(`Could not fetch leads: ${leadsError.message}`);\n    }\n\n    const campaign = campaignData as CampaignRow;\n    const leads = (leadsData ?? []) as LeadRow[];\n\n    return { campaign, leads };\n  } catch (error) {\n    throw error;\n  }\n}\n\nserve(async (req) => {\n  // Handle CORS preflight\n  const corsResponse = handleCORS(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    console.log(`📤 Campaign Export with User Authentication`);\n\n    const authContext = await authenticateRequest(req);\n    console.log(\n      `🔐 Authenticated Supabase session for ${authContext.userId} (${\n        authContext.isAnonymous ? \"anonymous\" : \"authenticated\"\n      })`\n    );\n\n    const supabaseClient = authContext.supabaseClient;\n    const sessionUserId = authContext.sessionId;\n\n    // Parse request\n    const requestData: ExportRequest = await req.json();\n    const {\n      campaignId,\n      format = \"csv\",\n      includeEnrichmentData = true,\n    } = requestData;\n\n    if (!campaignId) {\n      throw new Error(\"Campaign ID is required\");\n    }\n\n    // Get user context\n    const userContext = getUserContext(authContext, requestData);\n    console.log(`👤 Export User Context:`, userContext);\n\n    if (!userContext.userId) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Authentication required to export campaign data.\",\n        }),\n        {\n          status: 401,\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    // Get campaign and leads data\n    const { campaign, leads } = await getCampaignData(\n      supabaseClient,\n      campaignId\n    );\n\n    console.log(\n      `📊 Exporting campaign: ${campaign.business_type} in ${campaign.location}`\n    );\n    console.log(`📋 Lead count: ${leads.length}`);\n\n    // Transform leads for export\n    const exportLeads: ExportLead[] = leads.map((lead: LeadRow) => ({\n      businessName: lead.business_name,\n      address: lead.address,\n      phone: lead.phone,\n      website: lead.website,\n      email: lead.email,\n      confidenceScore: lead.confidence_score,\n      verificationSources: lead.enrichment_data?.verificationSources || [\n        \"google_places\",\n      ],\n      apolloVerified: lead.enrichment_data?.apolloVerified || false,\n      chamberVerified: lead.enrichment_data?.chamberVerified || false,\n      licenseVerified: lead.enrichment_data?.licenseVerified || false,\n      totalCost: lead.enrichment_data?.processingMetadata?.totalCost || 0,\n      processingStrategy:\n        lead.enrichment_data?.processingMetadata?.processingStrategy || \"basic\",\n    }));\n\n    // Record export in database\n    const exportRecord = {\n      campaign_id: campaignId,\n      export_type: \"lead_export\",\n      file_format: format,\n      row_count: exportLeads.length,\n      export_status: \"completed\",\n      completed_at: new Date().toISOString(),\n      // Add user_id if available\n      user_id: userContext.userId,\n      session_user_id: sessionUserId,\n    };\n\n    const { error: exportError } = await supabaseClient\n      .from(\"dashboard_exports\")\n      .insert(exportRecord);\n\n    if (exportError) {\n      console.warn(\"Could not record export:\", exportError.message);\n    }\n\n    // Generate export data based on format\n    let exportData: string;\n    let contentType: string;\n    let fileName: string;\n\n    switch (format) {\n      case \"csv\":\n        exportData = formatAsCSV(exportLeads, includeEnrichmentData);\n        contentType = \"text/csv\";\n        fileName = `prospectpro_${campaign.business_type.replace(\n          /\\s+/g,\n          \"_\"\n        )}_${campaignId.slice(-8)}.csv`;\n        break;\n\n      case \"json\":\n        exportData = JSON.stringify(\n          {\n            campaign: {\n              id: campaign.id,\n              businessType: campaign.business_type,\n              location: campaign.location,\n              targetCount: campaign.target_count,\n              resultsCount: campaign.results_count,\n              totalCost: campaign.total_cost,\n              createdAt: campaign.created_at,\n            },\n            leads: exportLeads,\n            exportMetadata: {\n              exportedAt: new Date().toISOString(),\n              includeEnrichmentData,\n              totalLeads: exportLeads.length,\n              userContext: {\n                isAuthenticated: userContext.isAuthenticated,\n                hasUserId: !!userContext.userId,\n              },\n            },\n          },\n          null,\n          2\n        );\n        contentType = \"application/json\";\n        fileName = `prospectpro_${campaign.business_type.replace(\n          /\\s+/g,\n          \"_\"\n        )}_${campaignId.slice(-8)}.json`;\n        break;\n\n      default:\n        throw new Error(`Unsupported export format: ${format}`);\n    }\n\n    const response = {\n      success: true,\n      exportId: `export_${Date.now()}`,\n      campaign: {\n        id: campaign.id,\n        businessType: campaign.business_type,\n        location: campaign.location,\n        leadCount: exportLeads.length,\n      },\n      export: {\n        format,\n        fileName,\n        size: exportData.length,\n        includeEnrichmentData,\n        recordedInDatabase: !exportError,\n      },\n      userContext: {\n        isAuthenticated: userContext.isAuthenticated,\n        hasAccess: true,\n        ownership: \"user_owned\",\n      },\n      metadata: {\n        timestamp: new Date().toISOString(),\n        version: \"4.2\",\n        userAware: true,\n      },\n    };\n\n    // Return the export data directly for download\n    if (req.url.includes(\"download=true\")) {\n      return new Response(exportData, {\n        headers: {\n          ...corsHeaders,\n          \"Content-Type\": contentType,\n          \"Content-Disposition\": `attachment; filename=\"${fileName}\"`,\n          \"Content-Length\": exportData.length.toString(),\n        },\n      });\n    }\n\n    // Return export metadata\n    return new Response(JSON.stringify(response, null, 2), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    console.error(\"❌ Export error:\", error);\n\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : \"Export failed\",\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n});\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":12,"duration":0.217},
{"type":"measure","name":"lsp.did_open","count":16,"duration":5.116},
{"type":"mark","name":"lsp.did_open","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport { corsHeaders, handleCORS } from \"../_shared/edge-auth.ts\";\n\n// Business Discovery with User-Campaign Linking\n// October 4, 2025 - Complete authentication and user management\n\ninterface BusinessDiscoveryRequest {\n  businessType: string;\n  location: string;\n  maxResults?: number;\n  budgetLimit?: number;\n  requireCompleteContacts?: boolean;\n  minConfidenceScore?: number;\n  // User session management\n  sessionUserId?: string;\n  userEmail?: string;\n}\n\ninterface BusinessLead {\n  businessName: string;\n  address: string;\n  phone: string;\n  website: string;\n  email: string;\n  optimizedScore: number;\n  validationCost: number;\n  enhancementData: {\n    verificationSources: string[];\n    apolloVerified: boolean;\n    chamberVerified: boolean;\n    licenseVerified: boolean;\n    processingMetadata: {\n      totalCost: number;\n      totalConfidenceBoost: number;\n      apisSkipped: string[];\n      processingStrategy: string;\n    };\n  };\n}\n\n// Helper function to get or extract user ID from request\nfunction getUserContext(\n  req: Request,\n  requestData: BusinessDiscoveryRequest,\n  requestAuth?: { userId?: string; isAnonymous?: boolean }\n) {\n  // Prefer user ID from validated JWT token\n  if (requestAuth?.userId) {\n    return {\n      userId: requestAuth.userId,\n      userEmail: requestData.userEmail || null,\n      isAuthenticated: true,\n      isAnonymous: requestAuth.isAnonymous || false,\n      sessionId: requestData.sessionUserId || requestAuth.userId,\n    };\n  }\n\n  // Fallback to manual JWT decoding (for backward compatibility)\n  const authHeader = req.headers.get(\"Authorization\");\n  let userFromJWT = null;\n\n  if (authHeader?.startsWith(\"Bearer \")) {\n    const token = authHeader.substring(7);\n    try {\n      // For JWT tokens, we can decode to get user info\n      if (token.startsWith(\"eyJ\")) {\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        userFromJWT = payload.sub; // User ID from JWT\n      }\n    } catch (error) {\n      console.log(\"Could not decode JWT for user info:\", error);\n    }\n  }\n\n  return {\n    userId: userFromJWT || requestData.sessionUserId || null,\n    userEmail: requestData.userEmail || null,\n    isAuthenticated: !!userFromJWT,\n    isAnonymous: false,\n    sessionId: requestData.sessionUserId,\n  };\n}\n\n// Enhanced Quality Scorer with user context\nclass UserAwareQualityScorer {\n  private maxCostPerBusiness: number;\n\n  constructor(options: { maxCostPerBusiness?: number } = {}) {\n    this.maxCostPerBusiness = options.maxCostPerBusiness || 2.0;\n  }\n\n  scoreBusiness(business: any): BusinessLead {\n    const businessName = business.name || business.businessName || \"\";\n    const address = business.formatted_address || business.address || \"\";\n    const phone = business.formatted_phone_number || business.phone || \"\";\n    const website = business.website || \"\";\n    const email = business.email || \"\";\n\n    // Scoring breakdown\n    const scores = {\n      businessName: businessName ? Math.min(100, businessName.length * 3) : 0,\n      address: address ? 100 : 0,\n      phone: phone ? 80 : 0,\n      website: website ? 80 : 0,\n      email: email ? 60 : 0,\n    };\n\n    const totalScore =\n      Object.values(scores).reduce((sum, score) => sum + score, 0) / 5;\n\n    return {\n      businessName,\n      address,\n      phone,\n      website,\n      email,\n      optimizedScore: Math.round(totalScore),\n      validationCost: 0.02,\n      enhancementData: {\n        verificationSources: [\"google_places\"],\n        apolloVerified: false,\n        chamberVerified: false,\n        licenseVerified: false,\n        processingMetadata: {\n          totalCost: 0.02,\n          totalConfidenceBoost: 0,\n          apisSkipped: [],\n          processingStrategy: \"basic\",\n        },\n      },\n    };\n  }\n}\n\n// Real Google Places API integration with Place Details enrichment\nasync function discoverBusinesses(\n  businessType: string,\n  location: string,\n  maxResults: number\n): Promise<any[]> {\n  const apiKey = Deno.env.get(\"GOOGLE_PLACES_API_KEY\");\n\n  if (!apiKey) {\n    console.error(\"❌ GOOGLE_PLACES_API_KEY not configured\");\n    throw new Error(\"Google Places API key not configured\");\n  }\n\n  console.log(`🔍 Searching Google Places: ${businessType} in ${location}`);\n\n  // Step 1: Text Search to find businesses\n  const query = `${businessType} in ${location}`;\n  const searchUrl = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(\n    query\n  )}&key=${apiKey}`;\n\n  const searchResponse = await fetch(searchUrl);\n  const searchData = await searchResponse.json();\n\n  console.log(`🔧 Google Places API status: ${searchData.status}`);\n\n  if (searchData.status !== \"OK\") {\n    console.error(`❌ Google Places API error: ${searchData.status}`);\n    if (searchData.error_message) {\n      console.error(`   Error message: ${searchData.error_message}`);\n    }\n    throw new Error(`Google Places API failed: ${searchData.status}`);\n  }\n\n  const results = searchData.results.slice(0, maxResults);\n  console.log(\n    `📊 Found ${results.length} businesses, enriching with Place Details...`\n  );\n\n  // Step 2: Enrich each business with Place Details API for complete contact info\n  const enrichedBusinesses = [];\n  for (const business of results) {\n    try {\n      const placeId = business.place_id;\n      if (!placeId) {\n        enrichedBusinesses.push(business);\n        continue;\n      }\n\n      // Fetch complete contact information via Place Details API\n      const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=formatted_phone_number,international_phone_number,website,url&key=${apiKey}`;\n\n      const detailsResponse = await fetch(detailsUrl);\n      const detailsData = await detailsResponse.json();\n\n      if (detailsData.status === \"OK\" && detailsData.result) {\n        // Merge Place Details into business data\n        enrichedBusinesses.push({\n          ...business,\n          formatted_phone_number:\n            detailsData.result.formatted_phone_number || \"\",\n          website: detailsData.result.website || \"\",\n          // Note: Google Places doesn't provide emails directly\n          // Email discovery would require Hunter.io integration\n        });\n      } else {\n        // Keep original data if Place Details fails\n        enrichedBusinesses.push(business);\n      }\n    } catch (error) {\n      console.error(`⚠️ Place Details error for ${business.name}:`, error);\n      enrichedBusinesses.push(business); // Keep partial data\n    }\n  }\n\n  console.log(\n    `✅ Enriched ${enrichedBusinesses.length} businesses with verified contact data`\n  );\n\n  return enrichedBusinesses;\n}\n\nserve(async (req) => {\n  // Handle CORS preflight\n  const corsResponse = handleCORS(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const startTime = Date.now();\n\n    // Create Supabase client with user's JWT token for validation\n    const authHeader = req.headers.get(\"Authorization\");\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\")!;\n    const supabaseAnonKey = Deno.env.get(\"SUPABASE_ANON_KEY\")!;\n\n    // Create client with user's token to validate authentication\n    const supabaseClient = createClient(supabaseUrl, supabaseAnonKey, {\n      global: authHeader ? { headers: { Authorization: authHeader } } : {},\n      auth: {\n        persistSession: false,\n        autoRefreshToken: false,\n      },\n    });\n\n    // Try to validate user session (optional - don't fail if no user)\n    const {\n      data: { user },\n      error: authError,\n    } = await supabaseClient.auth.getUser();\n\n    // Log authentication status\n    if (authError) {\n      console.log(\"⚠️  Auth warning:\", authError.message);\n    }\n\n    if (user) {\n      console.log(\n        `✅ Authenticated user: ${user.id} (anonymous: ${\n          user.is_anonymous || false\n        })`\n      );\n    } else {\n      console.log(\"ℹ️  No authenticated user, proceeding with public access\");\n    }\n\n    // Use the supabaseClient for database operations (has user context if authenticated)\n    const authContext = {\n      client: supabaseClient,\n      isValid: true,\n      keyFormat: \"supabase_client\",\n    };\n\n    // Parse request\n    const requestData: BusinessDiscoveryRequest = await req.json();\n    const {\n      businessType,\n      location,\n      maxResults = 5,\n      budgetLimit = 50,\n      minConfidenceScore = 50,\n    } = requestData;\n\n    console.log(\n      `🚀 Business Discovery: ${businessType} in ${location} (${maxResults} results)`\n    );\n\n    // Get user context from authenticated user (if available)\n    const userContext = getUserContext(\n      req,\n      requestData,\n      user\n        ? {\n            userId: user.id,\n            isAnonymous: user.is_anonymous || false,\n          }\n        : undefined\n    );\n    console.log(`👤 User Context:`, userContext);\n\n    // Initialize components\n    const qualityScorer = new UserAwareQualityScorer({\n      maxCostPerBusiness: budgetLimit / maxResults,\n    });\n\n    // Step 1: Business discovery with real Google Places API\n    const rawBusinesses = await discoverBusinesses(\n      businessType,\n      location,\n      maxResults\n    );\n    console.log(`📊 Found ${rawBusinesses.length} businesses`);\n\n    // Step 2: Score and filter businesses\n    const scoredBusinesses = rawBusinesses.map((business: any) =>\n      qualityScorer.scoreBusiness(business)\n    );\n    const qualifiedLeads = scoredBusinesses\n      .filter((lead: BusinessLead) => lead.optimizedScore >= minConfidenceScore)\n      .slice(0, maxResults);\n\n    console.log(\n      `✅ Qualified ${qualifiedLeads.length}/${scoredBusinesses.length} businesses`\n    );\n\n    // Step 3: Progressive enrichment via orchestrator\n    console.log(\n      `🔄 Starting progressive enrichment for ${qualifiedLeads.length} leads...`\n    );\n\n    const enrichedLeads = [];\n    let enrichmentTotalCost = 0;\n\n    for (const lead of qualifiedLeads) {\n      try {\n        // Call enrichment orchestrator for each lead\n        const enrichmentUrl = `https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/enrichment-orchestrator`;\n        console.log(\n          `🔄 Calling enrichment orchestrator for ${lead.businessName}...`\n        );\n\n        const enrichmentResponse = await fetch(enrichmentUrl, {\n          method: \"POST\",\n          headers: {\n            Authorization: req.headers.get(\"Authorization\") || \"\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            businessName: lead.businessName,\n            domain: lead.website\n              ?.replace(/^https?:\\/\\//, \"\")\n              .replace(/\\/$/, \"\"),\n            address: lead.address,\n            phone: lead.phone,\n            website: lead.website,\n\n            // Progressive enrichment configuration\n            includeBusinessLicense: true,\n            discoverEmails: true,\n            verifyEmails: true,\n            includeCompanyEnrichment: false, // Skip PDL to save costs\n            includePersonEnrichment: false, // Skip unless needed\n            apolloEnrichment: false, // Skip unless premium tier\n\n            // Budget controls\n            maxCostPerBusiness: budgetLimit / maxResults,\n            minConfidenceScore: minConfidenceScore,\n            tier: \"professional\",\n          }),\n        });\n\n        if (enrichmentResponse.ok) {\n          const enrichmentData = await enrichmentResponse.json();\n          console.log(\n            `✅ Enrichment response for ${lead.businessName}:`,\n            JSON.stringify(enrichmentData).substring(0, 200)\n          );\n\n          if (enrichmentData.success) {\n            // Merge enrichment data into lead\n            enrichedLeads.push({\n              ...lead,\n              email:\n                enrichmentData.enrichedData?.emails?.[0]?.email || lead.email,\n              emails: enrichmentData.enrichedData?.emails || [],\n              businessLicense: enrichmentData.enrichedData?.businessLicense,\n              validationCost: lead.validationCost + enrichmentData.totalCost,\n              optimizedScore: Math.min(\n                100,\n                lead.optimizedScore + (enrichmentData.confidenceScore || 0)\n              ),\n              enhancementData: {\n                ...lead.enhancementData,\n                verificationSources: [\n                  ...lead.enhancementData.verificationSources,\n                  ...enrichmentData.processingMetadata.servicesUsed,\n                ],\n                hunterVerified: enrichmentData.enrichedData?.emails?.length > 0,\n                neverBounceVerified: enrichmentData.enrichedData?.emails?.some(\n                  (e: any) => e.verified\n                ),\n                licenseVerified:\n                  enrichmentData.enrichedData?.businessLicense?.isValid ||\n                  false,\n                processingMetadata: {\n                  ...lead.enhancementData.processingMetadata,\n                  totalCost: lead.validationCost + enrichmentData.totalCost,\n                  enrichmentCostBreakdown: enrichmentData.costBreakdown,\n                  servicesUsed: enrichmentData.processingMetadata.servicesUsed,\n                  servicesSkipped:\n                    enrichmentData.processingMetadata.servicesSkipped,\n                },\n              },\n            });\n\n            enrichmentTotalCost += enrichmentData.totalCost;\n            console.log(\n              `✅ Enriched ${lead.businessName}: +${\n                enrichmentData.enrichedData?.emails?.length || 0\n              } emails, cost $${enrichmentData.totalCost}`\n            );\n          } else {\n            // Keep original lead if enrichment fails\n            enrichedLeads.push(lead);\n            console.log(\n              `⚠️ Enrichment failed for ${lead.businessName}, keeping original data`\n            );\n          }\n        } else {\n          const errorText = await enrichmentResponse.text();\n          enrichedLeads.push(lead);\n          console.log(\n            `⚠️ Enrichment service returned status ${\n              enrichmentResponse.status\n            } for ${lead.businessName}: ${errorText.substring(0, 200)}`\n          );\n        }\n      } catch (error) {\n        // Keep original lead on error\n        enrichedLeads.push(lead);\n        console.error(`❌ Enrichment error for ${lead.businessName}:`, error);\n      }\n    }\n\n    console.log(\n      `✅ Enrichment complete: ${enrichedLeads.length} leads, total cost $${enrichmentTotalCost}`\n    );\n\n    const processingTime = Date.now() - startTime;\n    const totalCost =\n      enrichmentTotalCost +\n      qualifiedLeads.reduce(\n        (sum: number, lead: BusinessLead) => sum + lead.validationCost,\n        0\n      );\n\n    // Generate campaign ID\n    const campaignId = `campaign_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n\n    // Store in database with user context and enriched data\n    let dbStorageResult = null;\n    if (authContext.client) {\n      try {\n        // Prepare campaign data with user context\n        const campaignData = {\n          id: campaignId,\n          business_type: businessType,\n          location: location,\n          target_count: maxResults,\n          results_count: enrichedLeads.length,\n          total_cost: totalCost,\n          processing_time_ms: processingTime,\n          status: \"completed\",\n          // Add user_id for authenticated users only\n          ...(userContext.isAuthenticated &&\n            userContext.userId && { user_id: userContext.userId }),\n          // Add session_user_id for anonymous users\n          ...(!userContext.isAuthenticated &&\n            userContext.sessionId && {\n              session_user_id: userContext.sessionId,\n            }),\n        };\n\n        const { error: campaignError } = await authContext.client\n          .from(\"campaigns\")\n          .insert(campaignData);\n\n        if (campaignError) {\n          dbStorageResult = { success: false, error: campaignError.message };\n        } else {\n          dbStorageResult = {\n            success: true,\n            campaign_stored: true,\n            leads_error: null,\n            leads_stored: 0,\n          };\n\n          // Store enriched leads with user context\n          const leadsData = enrichedLeads.map((lead: any) => ({\n            campaign_id: campaignId,\n            business_name: lead.businessName,\n            address: lead.address,\n            phone: lead.phone,\n            website: lead.website,\n            email: lead.email,\n            confidence_score: lead.optimizedScore,\n            enrichment_data: lead.enhancementData,\n            validation_cost: lead.validationCost,\n            // Add user_id for authenticated users only\n            ...(userContext.isAuthenticated &&\n              userContext.userId && { user_id: userContext.userId }),\n            // Add session_user_id for anonymous users\n            ...(!userContext.isAuthenticated &&\n              userContext.sessionId && {\n                session_user_id: userContext.sessionId,\n              }),\n          }));\n\n          const { error: leadsError } = await authContext.client\n            .from(\"leads\")\n            .insert(leadsData);\n\n          if (leadsError) {\n            dbStorageResult.leads_error = leadsError.message;\n          } else {\n            dbStorageResult.leads_stored = leadsData.length;\n          }\n        }\n\n        console.log(`💾 Database storage result:`, dbStorageResult);\n      } catch (error) {\n        dbStorageResult = {\n          success: false,\n          error: error instanceof Error ? error.message : \"Storage failed\",\n          campaign_stored: false,\n          leads_error: null,\n          leads_stored: 0,\n        };\n      }\n    }\n\n    const response = {\n      success: true,\n      campaignId,\n      discoveryEngine:\n        \"ProspectPro Business Discovery v4.2 - User-Aware with Progressive Enrichment\",\n      authentication: {\n        keyFormat: authContext.keyFormat,\n        isValid: authContext.isValid,\n        userContext: {\n          isAuthenticated: userContext.isAuthenticated,\n          hasUserId: !!userContext.userId,\n          hasEmail: !!userContext.userEmail,\n        },\n      },\n      requirements: {\n        targetLeads: maxResults,\n        businessType,\n        location,\n        budgetLimit,\n        minConfidenceScore,\n      },\n      results: {\n        totalFound: enrichedLeads.length,\n        qualified: enrichedLeads.length,\n        qualificationRate: `${(\n          (enrichedLeads.length / rawBusinesses.length) *\n          100\n        ).toFixed(1)}%`,\n        averageConfidence: Math.round(\n          enrichedLeads.reduce(\n            (sum: number, lead: any) => sum + lead.optimizedScore,\n            0\n          ) / enrichedLeads.length\n        ),\n        emailsDiscovered: enrichedLeads.filter((lead: any) => lead.email)\n          .length,\n        licensesVerified: enrichedLeads.filter(\n          (lead: any) => lead.businessLicense?.isValid\n        ).length,\n      },\n      userManagement: {\n        userId: userContext.userId,\n        isAuthenticated: userContext.isAuthenticated,\n        sessionId: userContext.sessionId,\n        campaignOwnership: userContext.userId ? \"user_owned\" : \"session_based\",\n      },\n      optimization: {\n        processingTime: `${processingTime}ms`,\n        totalCost,\n        costPerLead: totalCost / enrichedLeads.length,\n        enrichmentCost: enrichmentTotalCost,\n        discoveryCost: totalCost - enrichmentTotalCost,\n      },\n      database_storage: dbStorageResult,\n      leads: enrichedLeads,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        version: \"4.2\",\n        userAware: true,\n        progressiveEnrichment: true,\n        authenticationUpdated: true,\n      },\n    };\n\n    return new Response(JSON.stringify(response, null, 2), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    console.error(\"❌ Business discovery error:\", error);\n\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n});\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":13,"duration":0.201},
{"type":"measure","name":"lsp.did_open","count":17,"duration":5.975},
{"type":"mark","name":"lsp.did_open","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.eslintrc.cjs","languageId":"javascript","version":1,"text":"module.exports = {\n  root: true,\n  env: {\n    browser: true,\n    node: true,\n    es2021: true,\n  },\n  parser: \"@typescript-eslint/parser\",\n  parserOptions: {\n    ecmaVersion: \"latest\",\n    sourceType: \"module\",\n  },\n  plugins: [\"@typescript-eslint\"],\n  extends: [\"eslint:recommended\", \"plugin:@typescript-eslint/recommended\"],\n  overrides: [\n    {\n      files: [\"**/*.tsx\", \"**/*.jsx\"],\n      plugins: [\"react\", \"react-hooks\"],\n      extends: [\"plugin:react/recommended\", \"plugin:react-hooks/recommended\"],\n      parserOptions: {\n        ecmaVersion: \"latest\",\n        sourceType: \"module\",\n        ecmaFeatures: {\n          jsx: true,\n        },\n      },\n      rules: {\n        \"react/react-in-jsx-scope\": \"off\",\n        \"react/prop-types\": \"off\",\n        \"react/no-unescaped-entities\": \"off\",\n        \"react-hooks/exhaustive-deps\": \"off\",\n      },\n      settings: {\n        react: {\n          version: \"detect\",\n        },\n      },\n    },\n    {\n      files: [\"supabase/functions/**/*.ts\"],\n      env: {\n        node: true,\n      },\n      globals: {\n        Deno: \"readonly\",\n        EdgeRuntime: \"readonly\",\n      },\n      rules: {\n        \"@typescript-eslint/no-explicit-any\": \"off\",\n        \"@typescript-eslint/no-unused-vars\": \"off\",\n        \"no-useless-catch\": \"off\",\n        \"no-case-declarations\": \"off\",\n        \"prefer-const\": \"off\",\n      },\n    },\n  ],\n  rules: {\n    \"@typescript-eslint/no-unused-vars\": \"off\",\n    \"@typescript-eslint/no-explicit-any\": \"off\",\n  },\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":14,"duration":0.22},
{"type":"measure","name":"lsp.did_open","count":18,"duration":0.79},
{"type":"mark","name":"lsp.did_open","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DOCUMENTATION_INDEX.md","languageId":"markdown","version":1,"text":"# ProspectPro v4.3 Documentation Index\n\n**🚀 Tier-Aware Background Discovery & Verification Platform**\n\n---\n\n## 📋 Documentation Overview\n\nProspectPro v4.3 introduces the tier-aware background discovery pipeline with zero-fake-data enforcement. This index points to the live references that back the production system.\n\n---\n\n## 🏗️ Core Architecture\n\n- **[Copilot Instructions](.github/copilot-instructions.md)** – Authoritative production guide (deployment, troubleshooting, SLAs)\n- **[README](README.md)** – Platform overview and quickstart\n- **[ARCHITECTURE_DECISION_BACKGROUND_TASKS.md](ARCHITECTURE_DECISION_BACKGROUND_TASKS.md)** – Rationale for asynchronous discovery orchestration\n- **[BACKGROUND_TASKS_IMPLEMENTATION.md](BACKGROUND_TASKS_IMPLEMENTATION.md)** – Implementation notes for `business-discovery-background`\n\n---\n\n## 🖥️ Frontend Implementation\n\n- **Entry Point:** `index.html`\n- **Application Code:** `src/` (React + Vite)\n  - `src/pages/BusinessDiscovery.tsx` – Campaign creation & monitoring\n  - `src/pages/Dashboard.tsx` – Lead review with verified enrichment metadata\n  - `src/hooks/useLeadEnrichment.ts` – Tier-aware enrichment hooks\n- **Build Command:** `npm run build` (outputs to `/dist` for Vercel deploy)\n\n---\n\n## ☁️ Supabase Edge Functions\n\n### Active Production Functions (v4.3)\n\n- **Discovery**\n  1. `business-discovery-background` – Asynchronous discovery with tier controls _(primary path)_\n  2. `business-discovery-optimized` – Session-aware synchronous path for premium campaign validation\n  3. `business-discovery-user-aware` – Legacy synchronous endpoint maintained for historical clients\n- **Enrichment + Coordination** 4. `enrichment-hunter` – Hunter.io discovery with confidence scoring & caching 5. `enrichment-neverbounce` – NeverBounce verification (95% deliverability floor) 6. `enrichment-orchestrator` – Multi-service enrichment coordination & budgeting 7. `enrichment-business-license` / `enrichment-pdl` – Licensing + PDL enrichment modules (Enterprise/Compliance)\n- **Export** 8. `campaign-export-user-aware` – User-authorized CSV export with RLS isolation 9. `campaign-export` – Service-role export handler for internal automation\n- **Diagnostics** 10. `test-new-auth` – Supabase session diagnostics for the shared helper 11. `test-official-auth` – Mirrors Supabase reference implementation end-to-end 12. `test-business-discovery` – Session-scoped discovery smoke test 13. `test-google-places` – API verification harness\n\n> ℹ️ Session JWTs are mandatory for every authenticated Edge Function call. Refer to `EDGE_FUNCTION_AUTH_UPDATE_GUIDE.md` and `scripts/test-auth-patterns.sh` for validation workflows.\n\n### Key Sources\n\n- Edge function implementations: `/supabase/functions/`\n- Shared auth utilities: `/supabase/functions/_shared/`\n- Deployment command: `supabase functions deploy <function-name>`\n\n---\n\n## 🗄️ Database & Security\n\n- **Schema Files:** `/database/`\n  - `supabase-first-schema.sql` – Canonical schema\n  - `rls-setup.sql` – Row Level Security enforcement\n  - `user-campaign-production-update.sql` – Authenticated ownership columns\n- **Core Tables:** `campaigns`, `leads`, `dashboard_exports`\n- **Security Model:** JWT-authenticated access with user_id + session_user_id; anonymous fallback removed from production\n\n---\n\n## 🔐 Authentication & Session Handling\n\n- Supabase Auth with JWT tokens (\n  - Frontend enforces sign-in before campaign creation\n  - Session context passed through background discovery payloads\n- Shared auth utilities: `/supabase/functions/_shared/edge-auth.ts`\n- Refer to `AUTHENTICATION_COMPLETE.md` for the end-to-end auth hardening log\n\n---\n\n## 🧪 Testing & Validation\n\n- **Unit / Integration:** `npm run test`\n- **ESLint:** `npm run lint` (configured via `.eslintrc.cjs` & `.eslintignore`)\n- **Edge Function Smoke Tests:**\n  - `supabase functions serve business-discovery-background`\n  - `scripts/test-background-tasks.sh`\n- **Manual curl probes:** see `.github/copilot-instructions.md` → “Debugging Commands”\n\n---\n\n## 🚀 Deployment Workflow\n\n1. Install dependencies: `npm install`\n2. Build frontend: `npm run build`\n3. Deploy static assets: from `/dist` run `vercel --prod`\n4. Deploy edge functions: `supabase functions deploy <name>`\n5. Verify using curl or the Supabase dashboard logs\n\nSupporting scripts:\n\n- `scripts/deploy-background-tasks.sh` – Batch deploy of background discovery stack\n- `scripts/test-background-tasks.sh` – Validates discovery + export loop\n- `scripts/repository-cleanup.sh` – Ensures Supabase-first project hygiene\n\n---\n\n## 🌐 Production Environment Snapshot\n\n- **Frontend:** https://prospect-fyhedobh1-appsmithery.vercel.app (Vercel static hosting)\n- **Supabase Project:** `sriycekxdqnesdsgwiuc`\n- **Edge Function URL Base:** `https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/`\n- **Publishable Key Management:** Supabase dashboard → Settings → API (sync with `/src/lib/supabase.ts`)\n- **Session Tokens:** Frontend/services must forward `Authorization: Bearer <SUPABASE_SESSION_JWT>`\n- **Session Tokens:** Frontend + services must forward Supabase session JWTs (`Authorization: Bearer <token>`) per `EDGE_FUNCTION_AUTH_UPDATE_GUIDE.md`\n\n---\n\n## 📈 Business Intelligence Features\n\n- MECE taxonomy (`src/constants/businessTaxonomy.ts`) with 16 categories / 300+ business types\n- Verified contact enrichment via Hunter.io + NeverBounce + licensing data\n- Tier-aware budgets & scoring: see `supabase/functions/enrichment-orchestrator/`\n- Export metadata retained in `leads.enrichment_data` JSONB field\n\n---\n\n## 🛠️ Troubleshooting Quicklinks\n\n- **Publishable key or session mismatch:** See `NEED_ANON_KEY.md` (legacy) and `EDGE_FUNCTION_AUTH_UPDATE_GUIDE.md`\n- **Blank screen after campaign results:** Deploy the v4.3.1 build so the null-safe campaign store is active, then confirm the browser console is free of React 185 stacks.\n- **Edge function auth issues:** `EDGE_FUNCTION_AUTH_UPDATE_GUIDE.md`\n- **Deployment checklist:** `DEPLOYMENT_CHECKLIST.md`\n- **Environment sync:** `populate-secrets.sh`, `pull-env-from-secrets.js`\n- **MCP troubleshooting server:** `mcp-servers/` directory (see `README` inside)\n\n---\n\n## 🎯 Quick Command Reference\n\n```bash\n# Background discovery smoke test (session JWT required)\ncurl -X POST \\\n  'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background' \\\n  -H 'Authorization: Bearer <SUPABASE_SESSION_JWT>' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\":\"coffee shop\",\"location\":\"Seattle, WA\",\"maxResults\":2,\"tierKey\":\"PROFESSIONAL\",\"sessionUserId\":\"test_session_123\"}'\n\n# Export campaign results\ncurl -X POST \\\n  'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/campaign-export-user-aware' \\\n  -H 'Authorization: Bearer <SUPABASE_SESSION_JWT>' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"campaignId\":\"<CAMPAIGN_ID>\",\"format\":\"csv\",\"sessionUserId\":\"test_session_123\"}'\n\n# Auth diagnostics (compare helper vs official pattern)\n./scripts/test-auth-patterns.sh <SUPABASE_SESSION_JWT>\n\n# Lint & build guard rails\nnpm run lint\nnpm run build\n```\n\n---\n\n## 🗓️ Release Timeline\n\n- **v4.1** – Verification-first enrichment pipeline\n- **v4.2** – Authenticated user-aware discovery (deprecated backend retained only for exports)\n- **v4.3** – Tier-aware background discovery, lint tooling alignment, legacy asset removal\n\nFor historical artifacts see `/archive/`.\n\n### Key URLs\n\n- **Production App:** https://prospect-fyhedobh1-appsmithery.vercel.app\n- **Supabase Dashboard:** https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc\n- **GitHub Repository:** https://github.com/Alextorelli/ProspectPro\n\n---\n\n**ProspectPro v4.3** – Tier-Aware Background Discovery & Session-Enforced Edge Functions  \n_Documentation updated October 9, 2025_ 🚀\n"}}},
{"type":"measure","name":"lsp.did_open","count":19,"duration":0.084},
{"type":"mark","name":"lsp.did_open","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/job-queue-schema.sql","languageId":"sql","version":1,"text":"-- Job Queue System for Background Processing\n-- ProspectPro v4.2 - Background Task Architecture\n\n-- Discovery jobs table (tracks long-running campaigns)\nCREATE TABLE IF NOT EXISTS discovery_jobs (\n  id TEXT PRIMARY KEY,\n  campaign_id TEXT, -- No foreign key constraint (campaign created later)\n  user_id UUID REFERENCES auth.users(id),\n  session_user_id TEXT,\n  \n  -- Job status\n  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed')),\n  progress INTEGER DEFAULT 0 CHECK (progress >= 0 AND progress <= 100),\n  current_stage TEXT DEFAULT 'initializing',\n  \n  -- Configuration\n  config JSONB NOT NULL,\n  \n  -- Results\n  results JSONB DEFAULT '[]'::jsonb,\n  metrics JSONB DEFAULT '{}'::jsonb,\n  error TEXT,\n  \n  -- Timestamps\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  started_at TIMESTAMPTZ,\n  completed_at TIMESTAMPTZ,\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Indexes for performance\nCREATE INDEX IF NOT EXISTS idx_jobs_status ON discovery_jobs(status) WHERE status IN ('pending', 'processing');\nCREATE INDEX IF NOT EXISTS idx_jobs_user ON discovery_jobs(user_id);\nCREATE INDEX IF NOT EXISTS idx_jobs_session ON discovery_jobs(session_user_id);\nCREATE INDEX IF NOT EXISTS idx_jobs_campaign ON discovery_jobs(campaign_id);\nCREATE INDEX IF NOT EXISTS idx_jobs_created ON discovery_jobs(created_at DESC);\n\n-- RLS Policies for user isolation\nALTER TABLE discovery_jobs ENABLE ROW LEVEL SECURITY;\n\n-- Users can only see their own jobs\nDROP POLICY IF EXISTS jobs_select_own ON discovery_jobs;\nCREATE POLICY jobs_select_own ON discovery_jobs\n  FOR SELECT\n  USING (\n    auth.uid() = user_id OR\n    (auth.uid() IS NULL AND session_user_id IS NOT NULL)\n  );\n\n-- Users can only insert their own jobs\nDROP POLICY IF EXISTS jobs_insert_own ON discovery_jobs;\nCREATE POLICY jobs_insert_own ON discovery_jobs\n  FOR INSERT\n  WITH CHECK (\n    auth.uid() = user_id OR\n    (auth.uid() IS NULL AND session_user_id IS NOT NULL)\n  );\n\n-- Update trigger to maintain updated_at\nDROP TRIGGER IF EXISTS trigger_update_discovery_jobs_updated_at ON discovery_jobs;\nCREATE OR REPLACE FUNCTION update_discovery_jobs_updated_at()\nRETURNS TRIGGER\nLANGUAGE plpgsql\nSET search_path = public, pg_temp\nAS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$;\n\nCREATE TRIGGER trigger_update_discovery_jobs_updated_at\n  BEFORE UPDATE ON discovery_jobs\n  FOR EACH ROW\n  EXECUTE FUNCTION update_discovery_jobs_updated_at();\n\n-- Function to clean up old completed jobs (optional, run periodically)\nCREATE OR REPLACE FUNCTION cleanup_old_jobs(retention_days INTEGER DEFAULT 30)\nRETURNS INTEGER\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public, pg_temp\nAS $$\nDECLARE\n  deleted_count INTEGER;\nBEGIN\n  DELETE FROM discovery_jobs\n  WHERE status IN ('completed', 'failed')\n    AND completed_at < NOW() - (retention_days || ' days')::INTERVAL;\n  \n  GET DIAGNOSTICS deleted_count = ROW_COUNT;\n  RETURN deleted_count;\nEND;\n$$;\n\nCOMMENT ON TABLE discovery_jobs IS 'Background job queue for business discovery campaigns';\nCOMMENT ON COLUMN discovery_jobs.config IS 'JSON config: {businessType, location, tier, maxResults, etc}';\nCOMMENT ON COLUMN discovery_jobs.results IS 'JSON array of discovered and enriched leads';\nCOMMENT ON COLUMN discovery_jobs.metrics IS 'JSON metrics: {totalCost, processingTime, apisUsed, etc}';\n"}}},
{"type":"measure","name":"lsp.did_open","count":20,"duration":0.041},
{"type":"mark","name":"lsp.did_open","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/fix-foreign-key-constraint.sql","languageId":"sql","version":1,"text":"-- Fix Foreign Key Constraint Issue\n-- ProspectPro v4.2 - Database Migration\n\n-- Step 1: Drop the existing discovery_jobs table if it exists\n-- (This is safe since we haven't deployed to production yet)\nDROP TABLE IF EXISTS discovery_jobs CASCADE;\n\n-- Step 2: Recreate the table without the foreign key constraint\nCREATE TABLE discovery_jobs (\n  id TEXT PRIMARY KEY,\n  campaign_id TEXT, -- No FK constraint - campaign is created later\n  user_id UUID REFERENCES auth.users(id),\n  session_user_id TEXT,\n  \n  -- Job status\n  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed')),\n  progress INTEGER DEFAULT 0 CHECK (progress >= 0 AND progress <= 100),\n  current_stage TEXT DEFAULT 'initializing',\n  \n  -- Configuration\n  config JSONB NOT NULL,\n  \n  -- Results\n  results JSONB DEFAULT '[]'::jsonb,\n  metrics JSONB DEFAULT '{}'::jsonb,\n  error TEXT,\n  \n  -- Timestamps\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  started_at TIMESTAMPTZ,\n  completed_at TIMESTAMPTZ,\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Indexes for performance\nCREATE INDEX IF NOT EXISTS idx_jobs_status ON discovery_jobs(status) WHERE status IN ('pending', 'processing');\nCREATE INDEX IF NOT EXISTS idx_jobs_user ON discovery_jobs(user_id);\nCREATE INDEX IF NOT EXISTS idx_jobs_session ON discovery_jobs(session_user_id);\nCREATE INDEX IF NOT EXISTS idx_jobs_campaign ON discovery_jobs(campaign_id);\nCREATE INDEX IF NOT EXISTS idx_jobs_created ON discovery_jobs(created_at DESC);\n\n-- RLS Policies for user isolation\nALTER TABLE discovery_jobs ENABLE ROW LEVEL SECURITY;\n\n-- Users can only see their own jobs\nDROP POLICY IF EXISTS jobs_select_own ON discovery_jobs;\nCREATE POLICY jobs_select_own ON discovery_jobs\n  FOR SELECT\n  USING (\n    auth.uid() = user_id OR\n    (auth.uid() IS NULL AND session_user_id IS NOT NULL)\n  );\n\n-- Users can only insert their own jobs\nDROP POLICY IF EXISTS jobs_insert_own ON discovery_jobs;\nCREATE POLICY jobs_insert_own ON discovery_jobs\n  FOR INSERT\n  WITH CHECK (\n    auth.uid() = user_id OR\n    (auth.uid() IS NULL AND session_user_id IS NOT NULL)\n  );\n\n-- Update trigger to maintain updated_at\nDROP TRIGGER IF EXISTS trigger_update_discovery_jobs_updated_at ON discovery_jobs;\nCREATE OR REPLACE FUNCTION update_discovery_jobs_updated_at()\nRETURNS TRIGGER\nLANGUAGE plpgsql\nSET search_path = public, pg_temp\nAS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$;\n\nCREATE TRIGGER trigger_update_discovery_jobs_updated_at\n  BEFORE UPDATE ON discovery_jobs\n  FOR EACH ROW\n  EXECUTE FUNCTION update_discovery_jobs_updated_at();\n\n-- Function to clean up old completed jobs (optional, run periodically)\nCREATE OR REPLACE FUNCTION cleanup_old_jobs(retention_days INTEGER DEFAULT 30)\nRETURNS INTEGER\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public, pg_temp\nAS $$\nDECLARE\n  deleted_count INTEGER;\nBEGIN\n  DELETE FROM discovery_jobs\n  WHERE status IN ('completed', 'failed')\n    AND completed_at < NOW() - (retention_days || ' days')::INTERVAL;\n  \n  GET DIAGNOSTICS deleted_count = ROW_COUNT;\n  RETURN deleted_count;\nEND;\n$$;\n\nCOMMENT ON TABLE discovery_jobs IS 'Background job queue for business discovery campaigns';\nCOMMENT ON COLUMN discovery_jobs.campaign_id IS 'Campaign ID (no FK constraint - campaign created after job)';\nCOMMENT ON COLUMN discovery_jobs.config IS 'JSON config: {businessType, location, tier, maxResults, etc}';\nCOMMENT ON COLUMN discovery_jobs.results IS 'JSON array of discovered and enriched leads';\nCOMMENT ON COLUMN discovery_jobs.metrics IS 'JSON metrics: {totalCost, processingTime, apisUsed, etc}';\n"}}},
{"type":"measure","name":"lsp.did_open","count":21,"duration":0.041},
{"type":"mark","name":"lsp.did_open","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/auth-and-payments-schema.sql","languageId":"sql","version":1,"text":"-- ProspectPro Auth & Payments Schema Update\n-- October 7, 2025 - Production Ready Features\n\n-- =============================================================================\n-- PART 1: Campaign Naming & Ownership Enhancements\n-- =============================================================================\n\n-- Add campaign naming and enhanced user management\nALTER TABLE public.campaigns \nADD COLUMN IF NOT EXISTS generated_name VARCHAR(100),\nADD COLUMN IF NOT EXISTS display_name VARCHAR(200),\nADD COLUMN IF NOT EXISTS name_components JSONB,\nADD COLUMN IF NOT EXISTS user_budget DECIMAL(10,4) DEFAULT 50.0,\nADD COLUMN IF NOT EXISTS budget_alerts_enabled BOOLEAN DEFAULT true;\n\n-- Create index for efficient campaign searching\nCREATE INDEX IF NOT EXISTS idx_campaigns_generated_name ON public.campaigns(generated_name);\nCREATE INDEX IF NOT EXISTS idx_campaigns_user_budget ON public.campaigns(user_budget);\n\n-- =============================================================================\n-- PART 2: User Profiles & Payment Information\n-- =============================================================================\n\n-- User profiles table (extends Supabase auth.users)\nCREATE TABLE IF NOT EXISTS public.user_profiles (\n  id UUID REFERENCES auth.users(id) PRIMARY KEY,\n  email TEXT,\n  full_name TEXT,\n  avatar_url TEXT,\n  subscription_tier TEXT DEFAULT 'free',\n  total_spent DECIMAL(10,4) DEFAULT 0,\n  monthly_budget DECIMAL(10,4) DEFAULT 100.0,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Payment methods table (Stripe integration)\nCREATE TABLE IF NOT EXISTS public.payment_methods (\n  id BIGSERIAL PRIMARY KEY,\n  user_id UUID REFERENCES auth.users(id),\n  stripe_payment_method_id TEXT NOT NULL,\n  type TEXT NOT NULL, -- 'card', 'bank_account', etc.\n  last_four TEXT,\n  brand TEXT, -- 'visa', 'mastercard', etc.\n  exp_month INTEGER,\n  exp_year INTEGER,\n  is_default BOOLEAN DEFAULT false,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Payment transactions table\nCREATE TABLE IF NOT EXISTS public.payment_transactions (\n  id BIGSERIAL PRIMARY KEY,\n  user_id UUID REFERENCES auth.users(id),\n  campaign_id TEXT REFERENCES public.campaigns(id),\n  stripe_payment_intent_id TEXT,\n  amount DECIMAL(10,4) NOT NULL,\n  currency TEXT DEFAULT 'usd',\n  status TEXT NOT NULL, -- 'pending', 'succeeded', 'failed'\n  description TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- =============================================================================\n-- PART 3: Enhanced RLS Policies\n-- =============================================================================\n\n-- Enable RLS on new tables\nALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.payment_methods ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.payment_transactions ENABLE ROW LEVEL SECURITY;\n\n-- User profiles policies\nCREATE POLICY \"Users can view own profile\" ON public.user_profiles\n  FOR SELECT USING (auth.uid() = id);\n\nCREATE POLICY \"Users can update own profile\" ON public.user_profiles\n  FOR UPDATE USING (auth.uid() = id);\n\nCREATE POLICY \"Users can insert own profile\" ON public.user_profiles\n  FOR INSERT WITH CHECK (auth.uid() = id);\n\n-- Payment methods policies\nCREATE POLICY \"Users can view own payment methods\" ON public.payment_methods\n  FOR SELECT USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can manage own payment methods\" ON public.payment_methods\n  FOR ALL USING (auth.uid() = user_id);\n\n-- Payment transactions policies\nCREATE POLICY \"Users can view own transactions\" ON public.payment_transactions\n  FOR SELECT USING (auth.uid() = user_id);\n\n-- =============================================================================\n-- PART 4: Campaign Naming Functions\n-- =============================================================================\n\n-- Generate campaign name function\nCREATE OR REPLACE FUNCTION public.generate_campaign_name(\n  business_type TEXT,\n  location TEXT,\n  user_id UUID DEFAULT NULL\n)\nRETURNS TEXT\nLANGUAGE plpgsql\nSET search_path = public, pg_temp\nAS $$\nDECLARE\n  business_code TEXT;\n  location_code TEXT;\n  date_string TEXT;\n  time_string TEXT;\n  user_code TEXT;\n  random_component TEXT;\n  campaign_name TEXT;\nBEGIN\n  -- Generate business type code (first 4 letters, uppercase)\n  business_code := UPPER(LEFT(REGEXP_REPLACE(business_type, '[^a-zA-Z]', '', 'g'), 4));\n  \n  -- Generate location code (first 4 letters, uppercase)\n  location_code := UPPER(LEFT(REGEXP_REPLACE(location, '[^a-zA-Z]', '', 'g'), 4));\n  \n  -- Generate date and time strings\n  date_string := TO_CHAR(NOW(), 'YYYYMMDD');\n  time_string := TO_CHAR(CLOCK_TIMESTAMP(), 'HH24MISSUS');\n  \n  -- Generate user code (last 6 chars of user_id or random for anonymous)\n  IF user_id IS NOT NULL THEN\n    user_code := RIGHT(user_id::TEXT, 6);\n  ELSE\n    user_code := SUBSTRING(MD5(RANDOM()::TEXT) FROM 1 FOR 6);\n  END IF;\n\n  -- Add extra entropy to avoid collisions on rapid submissions\n  random_component := SUBSTRING(MD5((RANDOM() || NOW())::TEXT) FROM 1 FOR 6);\n  \n  -- Combine into final campaign name\n  campaign_name := business_code || '_' || location_code || '_' || date_string || '_' || time_string || '_' || user_code || '_' || random_component;\n  \n  RETURN campaign_name;\nEND;\n$$;\n\n-- Auto-generate campaign names trigger\nCREATE OR REPLACE FUNCTION public.auto_generate_campaign_name()\nRETURNS TRIGGER\nLANGUAGE plpgsql\nSET search_path = public, pg_temp\nAS $$\nBEGIN\n  -- Only generate if not already set\n  IF NEW.generated_name IS NULL OR NEW.generated_name = '' THEN\n    NEW.generated_name := public.generate_campaign_name(\n      NEW.business_type,\n      NEW.location,\n      NEW.user_id\n    );\n  END IF;\n  \n  -- Set display name if not provided\n  IF NEW.display_name IS NULL OR NEW.display_name = '' THEN\n    NEW.display_name := NEW.business_type || ' in ' || NEW.location;\n  END IF;\n  \n  -- Store name components\n  NEW.name_components := jsonb_build_object(\n    'business_type', NEW.business_type,\n    'location', NEW.location,\n    'generated_at', NOW(),\n    'user_id', NEW.user_id\n  );\n  \n  RETURN NEW;\nEND;\n$$;\n\n-- Create trigger\nDROP TRIGGER IF EXISTS trigger_auto_generate_campaign_name ON public.campaigns;\nCREATE TRIGGER trigger_auto_generate_campaign_name\n  BEFORE INSERT ON public.campaigns\n  FOR EACH ROW\n  EXECUTE FUNCTION public.auto_generate_campaign_name();\n\n-- =============================================================================\n-- PART 5: User Profile Management Functions\n-- =============================================================================\n\n-- Create or update user profile\nCREATE OR REPLACE FUNCTION public.handle_new_user()\nRETURNS TRIGGER\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public, pg_temp\nAS $$\nBEGIN\n  INSERT INTO public.user_profiles (id, email, full_name, avatar_url)\n  VALUES (\n    NEW.id,\n    NEW.email,\n    NEW.raw_user_meta_data->>'full_name',\n    NEW.raw_user_meta_data->>'avatar_url'\n  )\n  ON CONFLICT (id) DO UPDATE SET\n    email = EXCLUDED.email,\n    full_name = EXCLUDED.full_name,\n    avatar_url = EXCLUDED.avatar_url,\n    updated_at = NOW();\n  \n  RETURN NEW;\nEND;\n$$;\n\n-- Trigger for user profile creation\nDROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;\nCREATE TRIGGER on_auth_user_created\n  AFTER INSERT OR UPDATE ON auth.users\n  FOR EACH ROW\n  EXECUTE FUNCTION public.handle_new_user();\n\n-- =============================================================================\n-- PART 6: Budget and Spending Tracking\n-- =============================================================================\n\n-- Update user spending function\nCREATE OR REPLACE FUNCTION public.update_user_spending(\n  user_id_param UUID,\n  amount_param DECIMAL(10,4)\n)\nRETURNS VOID\nLANGUAGE plpgsql\nSET search_path = public, pg_temp\nAS $$\nBEGIN\n  UPDATE public.user_profiles\n  SET \n    total_spent = total_spent + amount_param,\n    updated_at = NOW()\n  WHERE id = user_id_param;\nEND;\n$$;\n\n-- =============================================================================\n-- PART 7: Enhanced Views\n-- =============================================================================\n\n-- Campaign analytics with user info\nCREATE OR REPLACE VIEW public.campaign_analytics_enhanced\nWITH (security_invoker = true)\nAS SELECT\n  c.id,\n  c.generated_name,\n  c.display_name,\n  c.business_type,\n  c.location,\n  c.target_count,\n  c.min_confidence_score,\n  c.status,\n  c.results_count,\n  c.total_cost,\n  c.user_budget,\n  c.budget_limit,\n  c.processing_time_ms,\n  c.created_at,\n  c.user_id,\n  c.session_user_id,\n  up.email as user_email,\n  up.full_name as user_name,\n  COUNT(l.id) AS actual_leads,\n  COALESCE(AVG(l.confidence_score), 0)::numeric(10,2) AS avg_confidence,\n  (c.total_cost <= c.user_budget) AS within_budget\nFROM campaigns c\nLEFT JOIN leads l ON l.campaign_id = c.id\nLEFT JOIN user_profiles up ON up.id = c.user_id\nWHERE\n  c.user_id = auth.uid() OR\n  (auth.uid() IS NULL AND c.session_user_id IS NOT NULL)\nGROUP BY c.id, c.generated_name, c.display_name, c.business_type, c.location, \n         c.target_count, c.min_confidence_score, c.status, c.results_count, \n         c.total_cost, c.user_budget, c.budget_limit, c.processing_time_ms, \n         c.created_at, c.user_id, c.session_user_id, up.email, up.full_name;\n\n-- =============================================================================\n-- MIGRATION COMPLETE\n-- =============================================================================\n\n-- Test the campaign name generation\nSELECT public.generate_campaign_name('coffee shop', 'Seattle, WA', NULL) as test_campaign_name;\n\nCOMMENT ON TABLE public.user_profiles IS 'Extended user profiles with subscription and budget info';\nCOMMENT ON TABLE public.payment_methods IS 'User payment methods stored via Stripe';\nCOMMENT ON TABLE public.payment_transactions IS 'Payment transaction history';\nCOMMENT ON FUNCTION public.generate_campaign_name IS 'Generates standardized campaign names';\nCOMMENT ON VIEW public.campaign_analytics_enhanced IS 'Enhanced campaign analytics with user context';\n\n-- Final status\nDO $$\nBEGIN\n  RAISE NOTICE '';\n  RAISE NOTICE '🔐 ProspectPro Auth & Payments Schema - October 7, 2025';\n  RAISE NOTICE '================================================================';\n  RAISE NOTICE '✅ Campaign naming system implemented';\n  RAISE NOTICE '✅ User profiles and payment tables created';\n  RAISE NOTICE '✅ Enhanced RLS policies applied';\n  RAISE NOTICE '✅ Budget tracking functions added';\n  RAISE NOTICE '✅ Auto-trigger for campaign naming enabled';\n  RAISE NOTICE '';\n  RAISE NOTICE 'Ready for: Auth integration, Stripe payments, UI updates';\n  RAISE NOTICE '';\nEND $$;"}}},
{"type":"measure","name":"lsp.did_open","count":22,"duration":0.096},
{"type":"mark","name":"lsp.did_open","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/security-update-oct-2025.sql","languageId":"sql","version":1,"text":"-- ProspectPro Security Update - October 3, 2025\n-- Addresses: Legacy API key migration, SECURITY DEFINER fixes, function search_path warnings\n-- Status: Production-ready security hardening for new Supabase API key format\n\n-- =============================================================================\n-- PART 1: Fix SECURITY DEFINER Views (High Priority)\n-- =============================================================================\n\n-- Issue: Views with SECURITY DEFINER inheritance can create privilege escalation\n-- Solution: Recreate views with security_invoker = true\n\n-- Fix enrichment_cache_analytics view\nDROP VIEW IF EXISTS public.enrichment_cache_analytics CASCADE;\nCREATE VIEW public.enrichment_cache_analytics\nWITH (security_invoker = true) AS\nSELECT \n  request_type,\n  COUNT(*) as total_entries,\n  SUM(COALESCE(hit_count, 0)) as total_hits,\n  AVG(COALESCE(confidence_score, 0)) as avg_confidence,\n  SUM(COALESCE(cost, 0)) as total_cost_saved,\n  ROUND(AVG(COALESCE(hit_count, 0)), 2) as avg_hit_count,\n  MIN(created_at) as oldest_entry,\n  MAX(last_accessed_at) as last_activity,\n  COUNT(*) FILTER (WHERE expires_at > NOW()) as active_entries,\n  COUNT(*) FILTER (WHERE expires_at <= NOW()) as expired_entries\nFROM public.enrichment_cache\nWHERE request_type IS NOT NULL\nGROUP BY request_type\nORDER BY total_hits DESC;\n\n-- Fix cache_performance_summary view\nDROP VIEW IF EXISTS public.cache_performance_summary CASCADE;\nCREATE VIEW public.cache_performance_summary\nWITH (security_invoker = true) AS\nSELECT \n  date,\n  SUM(COALESCE(total_requests, 0)) as daily_requests,\n  SUM(COALESCE(cache_hits, 0)) as daily_hits,\n  SUM(COALESCE(cache_misses, 0)) as daily_misses,\n  ROUND(\n    CASE \n      WHEN SUM(COALESCE(total_requests, 0)) > 0 \n      THEN SUM(COALESCE(cache_hits, 0))::DECIMAL / SUM(COALESCE(total_requests, 0)) * 100 \n      ELSE 0 \n    END, \n    2\n  ) as daily_hit_ratio,\n  SUM(COALESCE(cost_saved, 0)) as daily_cost_saved,\n  SUM(COALESCE(total_cost, 0)) as daily_total_cost\nFROM public.enrichment_cache_stats\nWHERE date IS NOT NULL\nGROUP BY date\nORDER BY date DESC;\n\n-- Fix campaign_analytics view (if exists with SECURITY DEFINER)\nDROP VIEW IF EXISTS public.campaign_analytics CASCADE;\nCREATE VIEW public.campaign_analytics\nWITH (security_invoker = true) AS\nSELECT\n  c.id,\n  c.business_type,\n  c.location,\n  c.target_count,\n  c.min_confidence_score,\n  c.status,\n  c.results_count,\n  c.total_cost,\n  c.budget_limit,\n  c.processing_time_ms,\n  c.created_at,\n  COUNT(l.id) AS actual_leads,\n  COALESCE(AVG(l.confidence_score), 0)::numeric(10,2) AS avg_confidence\nFROM public.campaigns c\nLEFT JOIN public.leads l ON l.campaign_id = c.id\nGROUP BY c.id, c.business_type, c.location, c.target_count, c.min_confidence_score,\n         c.status, c.results_count, c.total_cost, c.budget_limit, c.processing_time_ms, c.created_at;\n\n-- =============================================================================\n-- PART 2: Fix Function Search Path Warnings (Security Critical)\n-- =============================================================================\n\n-- Issue: Functions without explicit search_path can be vulnerable to search_path hijacking\n-- Solution: Set explicit search_path for all functions\n\n-- Fix generate_cache_key function\nCREATE OR REPLACE FUNCTION public.generate_cache_key(\n  p_request_type TEXT,\n  p_params JSONB\n) RETURNS TEXT \nSET search_path = public\nLANGUAGE plpgsql \nIMMUTABLE \nSECURITY DEFINER\nAS $$\nBEGIN\n  RETURN encode(\n    digest(\n      COALESCE(p_request_type, '') || '::' || COALESCE(p_params::text, '{}'),\n      'sha256'\n    ),\n    'hex'\n  );\nEND;\n$$;\n\n-- Fix get_cached_response function\nCREATE OR REPLACE FUNCTION public.get_cached_response(\n  p_cache_key TEXT\n) RETURNS JSONB \nSET search_path = public\nLANGUAGE plpgsql \nSECURITY DEFINER\nAS $$\nDECLARE\n  cached_data JSONB;\nBEGIN\n  SELECT response_data INTO cached_data\n  FROM public.enrichment_cache\n  WHERE cache_key = p_cache_key\n    AND expires_at > NOW()\n    AND is_active = true;\n  \n  IF FOUND THEN\n    -- Update hit count and last accessed time\n    UPDATE public.enrichment_cache\n    SET hit_count = COALESCE(hit_count, 0) + 1,\n        last_accessed_at = NOW()\n    WHERE cache_key = p_cache_key;\n  END IF;\n  \n  RETURN cached_data;\nEND;\n$$;\n\n-- Fix store_cached_response function\nCREATE OR REPLACE FUNCTION public.store_cached_response(\n  p_cache_key TEXT,\n  p_request_type TEXT,\n  p_response_data JSONB,\n  p_confidence_score INTEGER DEFAULT 0,\n  p_cost DECIMAL(10,4) DEFAULT 0,\n  p_expires_at TIMESTAMPTZ DEFAULT NULL\n) RETURNS BOOLEAN \nSET search_path = public\nLANGUAGE plpgsql \nSECURITY DEFINER\nAS $$\nBEGIN\n  INSERT INTO public.enrichment_cache (\n    cache_key,\n    request_type,\n    response_data,\n    confidence_score,\n    cost,\n    expires_at,\n    created_at,\n    last_accessed_at,\n    hit_count,\n    is_active\n  ) VALUES (\n    p_cache_key,\n    p_request_type,\n    p_response_data,\n    p_confidence_score,\n    p_cost,\n    COALESCE(p_expires_at, NOW() + INTERVAL '24 hours'),\n    NOW(),\n    NOW(),\n    0,\n    true\n  ) ON CONFLICT (cache_key) DO UPDATE SET\n    response_data = EXCLUDED.response_data,\n    confidence_score = EXCLUDED.confidence_score,\n    cost = EXCLUDED.cost,\n    expires_at = EXCLUDED.expires_at,\n    last_accessed_at = NOW(),\n    is_active = true;\n  \n  RETURN true;\nEND;\n$$;\n\n-- Fix cleanup_expired_cache function\nCREATE OR REPLACE FUNCTION public.cleanup_expired_cache()\nRETURNS INTEGER \nSET search_path = public\nLANGUAGE plpgsql \nSECURITY DEFINER\nAS $$\nDECLARE\n  deleted_count INTEGER;\nBEGIN\n  DELETE FROM public.enrichment_cache\n  WHERE expires_at <= NOW()\n    OR is_active = false;\n  \n  GET DIAGNOSTICS deleted_count = ROW_COUNT;\n  \n  RETURN deleted_count;\nEND;\n$$;\n\n-- =============================================================================\n-- PART 3: Update RLS Policies for New API Key Format\n-- =============================================================================\n\n-- The new API key format requires updated RLS policies\n-- Ensure compatibility with both legacy and new key formats during transition\n\n-- Update campaigns table policies\nDROP POLICY IF EXISTS \"campaigns_anon_access\" ON public.campaigns;\nCREATE POLICY \"campaigns_anon_access\" ON public.campaigns\n    FOR ALL TO anon \n    USING (true) \n    WITH CHECK (true);\n\n-- Update leads table policies  \nDROP POLICY IF EXISTS \"leads_anon_access\" ON public.leads;\nCREATE POLICY \"leads_anon_access\" ON public.leads\n    FOR ALL TO anon \n    USING (true) \n    WITH CHECK (true);\n\n-- Update dashboard_exports table policies\nDROP POLICY IF EXISTS \"exports_anon_access\" ON public.dashboard_exports;\nCREATE POLICY \"exports_anon_access\" ON public.dashboard_exports\n    FOR ALL TO anon \n    USING (true) \n    WITH CHECK (true);\n\n-- =============================================================================\n-- PART 4: Add New API Key Format Support\n-- =============================================================================\n\n-- Create function to validate new API key format\nCREATE OR REPLACE FUNCTION public.validate_api_key_format(api_key TEXT)\nRETURNS BOOLEAN \nSET search_path = public\nLANGUAGE plpgsql \nIMMUTABLE\nAS $$\nBEGIN\n  -- Check for new publishable key format (sb_publishable_*)\n  IF api_key LIKE 'sb_publishable_%' THEN\n    RETURN true;\n  END IF;\n  \n  -- Check for new secret key format (sb_secret_*)\n  IF api_key LIKE 'sb_secret_%' THEN\n    RETURN true;\n  END IF;\n  \n  -- Legacy JWT format support (for backward compatibility)\n  IF api_key LIKE 'eyJ%' AND LENGTH(api_key) > 100 THEN\n    RETURN true;\n  END IF;\n  \n  RETURN false;\nEND;\n$$;\n\n-- =============================================================================\n-- PART 5: Security Monitoring and Validation\n-- =============================================================================\n\n-- Create enhanced security validation function\nCREATE OR REPLACE FUNCTION public.validate_security_configuration()\nRETURNS JSONB \nSET search_path = public\nLANGUAGE plpgsql \nAS $$\nDECLARE\n  result JSONB;\n  rls_count INTEGER;\n  policy_count INTEGER;\n  function_count INTEGER;\n  view_count INTEGER;\nBEGIN\n  -- Count RLS-enabled tables\n  SELECT COUNT(*) INTO rls_count\n  FROM pg_tables t\n  JOIN pg_class c ON c.relname = t.tablename\n  WHERE t.schemaname = 'public'\n    AND c.relrowsecurity = true\n    AND t.tablename IN ('campaigns', 'leads', 'dashboard_exports');\n  \n  -- Count security policies\n  SELECT COUNT(*) INTO policy_count\n  FROM pg_policies\n  WHERE schemaname = 'public'\n    AND tablename IN ('campaigns', 'leads', 'dashboard_exports');\n  \n  -- Count functions with proper search_path\n  SELECT COUNT(*) INTO function_count\n  FROM pg_proc p\n  JOIN pg_namespace n ON n.oid = p.pronamespace\n  WHERE n.nspname = 'public'\n    AND p.proname IN ('generate_cache_key', 'get_cached_response', 'store_cached_response', 'cleanup_expired_cache')\n    AND p.prosrc LIKE '%search_path%';\n  \n  -- Count security_invoker views\n  SELECT COUNT(*) INTO view_count\n  FROM pg_views\n  WHERE schemaname = 'public'\n    AND viewname IN ('enrichment_cache_analytics', 'cache_performance_summary', 'campaign_analytics');\n  \n  -- Build result\n  SELECT jsonb_build_object(\n    'security_status', 'updated',\n    'timestamp', NOW(),\n    'rls_enabled_tables', rls_count,\n    'security_policies', policy_count,\n    'secure_functions', function_count,\n    'secure_views', view_count,\n    'api_key_validation', 'enabled',\n    'recommendations', \n      CASE \n        WHEN rls_count < 3 THEN jsonb_build_array('Enable RLS on all core tables')\n        WHEN policy_count < 3 THEN jsonb_build_array('Create anon access policies')\n        WHEN function_count < 4 THEN jsonb_build_array('Set search_path on cache functions')\n        ELSE jsonb_build_array('Security configuration is optimal')\n      END\n  ) INTO result;\n  \n  RETURN result;\nEND;\n$$;\n\n\n-- Enable leaked password protection (prevents compromised password reuse)\n-- Reference: https://supabase.com/docs/guides/auth/password-security#password-strength-and-leaked-password-protection\nDO $$\nBEGIN\n  PERFORM auth.enable_leaked_password_protection();\n  RAISE NOTICE '✅ Leaked password protection enabled (idempotent)';\nEXCEPTION\n  WHEN undefined_function THEN\n    RAISE WARNING '⚠️ auth.enable_leaked_password_protection() not available in this Supabase version';\nEND;\n$$;\n\nCOMMENT ON FUNCTION public.cleanup_expired_cache IS 'Cleanup expired cache with explicit search_path = public';\nCOMMENT ON FUNCTION public.validate_api_key_format IS 'Validate new Supabase API key format (publishable/secret)';\nCOMMENT ON FUNCTION public.validate_security_configuration IS 'Comprehensive security configuration validation';\n\n-- =============================================================================\n-- PART 7: Verification Queries\n-- =============================================================================\n\n-- Run validation to ensure everything is working\nSELECT public.validate_security_configuration() as security_validation;\n\n-- Test new API key format validation\nSELECT \n  public.validate_api_key_format('sb_publishable_test') as publishable_valid,\n  public.validate_api_key_format('sb_secret_test') as secret_valid,\n  public.validate_api_key_format('invalid_key') as invalid_key;\n\n-- =============================================================================\n-- MIGRATION COMPLETE\n-- =============================================================================\n\n-- Summary of applied fixes:\n-- ✅ Fixed SECURITY DEFINER views (enrichment_cache_analytics, cache_performance_summary, campaign_analytics)\n-- ✅ Fixed function search_path warnings (generate_cache_key, get_cached_response, store_cached_response, cleanup_expired_cache)\n-- ✅ Updated RLS policies for new API key format compatibility\n-- ✅ Added new API key format validation\n-- ✅ Enhanced security monitoring and validation\n-- ✅ Comprehensive documentation and comments\n\nRAISE NOTICE '🔐 ProspectPro Security Update Complete - October 3, 2025';\nRAISE NOTICE '✅ SECURITY DEFINER views fixed';\nRAISE NOTICE '✅ Function search_path warnings resolved';  \nRAISE NOTICE '✅ New API key format support added';\nRAISE NOTICE '✅ RLS policies updated for compatibility';\nRAISE NOTICE '✅ Security monitoring enhanced';"}}},
{"type":"measure","name":"lsp.did_open","count":23,"duration":0.106},
{"type":"mark","name":"lsp.did_open","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/migrations/20251008073003_security_hardening_oct_8_2025.sql","languageId":"sql","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":24,"duration":0.02},
{"type":"mark","name":"lsp.did_open","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/security-fixes-consolidated.sql","languageId":"sql","version":1,"text":"-- ProspectPro Security Fixes - Consolidated Migration\n-- October 8, 2025 - Fix function search_path warnings and enable auth protections\n\n-- =============================================================================\n-- PART 1: Fix Function Search Path Warnings (All Functions)\n-- =============================================================================\n\n-- Fix job queue functions\nCREATE OR REPLACE FUNCTION update_discovery_jobs_updated_at()\nRETURNS TRIGGER\nLANGUAGE plpgsql\nSET search_path = public, pg_temp\nAS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$;\n\nCREATE OR REPLACE FUNCTION cleanup_old_jobs(retention_days INTEGER DEFAULT 30)\nRETURNS INTEGER\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public, pg_temp\nAS $$\nDECLARE\n  deleted_count INTEGER;\nBEGIN\n  DELETE FROM discovery_jobs\n  WHERE status IN ('completed', 'failed')\n    AND completed_at < NOW() - (retention_days || ' days')::INTERVAL;\n  \n  GET DIAGNOSTICS deleted_count = ROW_COUNT;\n  RETURN deleted_count;\nEND;\n$$;\n\n-- Fix campaign naming functions (if they exist)\nDO $$\nBEGIN\n  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'generate_campaign_name') THEN\n    EXECUTE '\n      CREATE OR REPLACE FUNCTION public.generate_campaign_name(\n        business_type TEXT,\n        location TEXT,\n        user_id UUID DEFAULT NULL\n      )\n      RETURNS TEXT\n      LANGUAGE plpgsql\n      SET search_path = public, pg_temp\n      AS $func$\n      DECLARE\n        business_code TEXT;\n        location_code TEXT;\n        date_string TEXT;\n        time_string TEXT;\n        user_code TEXT;\n        campaign_name TEXT;\n      BEGIN\n        business_code := UPPER(LEFT(REGEXP_REPLACE(business_type, ''[^a-zA-Z]'', '''', ''g''), 4));\n        location_code := UPPER(LEFT(REGEXP_REPLACE(location, ''[^a-zA-Z]'', '''', ''g''), 4));\n        date_string := TO_CHAR(NOW(), ''YYYYMMDD'');\n        time_string := TO_CHAR(NOW(), ''HH24MISS'');\n        DECLARE\n          business_code TEXT;\n          location_code TEXT;\n          date_string TEXT;\n          time_string TEXT;\n          user_code TEXT;\n          random_component TEXT;\n          campaign_name TEXT;\n        BEGIN\n          business_code := UPPER(LEFT(REGEXP_REPLACE(business_type, '[^a-zA-Z]', '', 'g'), 4));\n          location_code := UPPER(LEFT(REGEXP_REPLACE(location, '[^a-zA-Z]', '', 'g'), 4));\n          date_string := TO_CHAR(NOW(), 'YYYYMMDD');\n          time_string := TO_CHAR(CLOCK_TIMESTAMP(), 'HH24MISSUS');\n          IF user_id IS NOT NULL THEN\n            user_code := RIGHT(user_id::TEXT, 6);\n          ELSE\n            user_code := SUBSTRING(MD5(RANDOM()::TEXT) FROM 1 FOR 6);\n          END IF;\n          random_component := SUBSTRING(MD5((RANDOM() || NOW())::TEXT) FROM 1 FOR 6);\n          campaign_name := business_code || '_' || location_code || '_' || date_string || '_' || time_string || '_' || user_code || '_' || random_component;\n          RETURN campaign_name;\n        END;\n    EXECUTE '\n      CREATE OR REPLACE FUNCTION public.auto_generate_campaign_name()\n      RETURNS TRIGGER\n      LANGUAGE plpgsql\n      SET search_path = public, pg_temp\n      AS $func$\n      BEGIN\n        IF NEW.generated_name IS NULL OR NEW.generated_name = '''' THEN\n          NEW.generated_name := public.generate_campaign_name(\n            NEW.business_type,\n            NEW.location,\n            NEW.user_id\n          );\n        END IF;\n        \n        IF NEW.display_name IS NULL OR NEW.display_name = '''' THEN\n          NEW.display_name := NEW.business_type || '' in '' || NEW.location;\n        END IF;\n        \n        NEW.name_components := jsonb_build_object(\n          ''business_type'', NEW.business_type,\n          ''location'', NEW.location,\n          ''generated_at'', NOW(),\n          ''user_id'', NEW.user_id\n        );\n        \n        RETURN NEW;\n      END;\n      $func$;\n    ';\n  END IF;\nEND;\n$$;\n\nDO $$\nBEGIN\n  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'handle_new_user') THEN\n    EXECUTE '\n      CREATE OR REPLACE FUNCTION public.handle_new_user()\n      RETURNS TRIGGER\n      LANGUAGE plpgsql\n      SECURITY DEFINER\n      SET search_path = public, pg_temp\n      AS $func$\n      BEGIN\n        INSERT INTO public.user_profiles (id, email, full_name, avatar_url)\n        VALUES (\n          NEW.id,\n          NEW.email,\n          NEW.raw_user_meta_data->>''full_name'',\n          NEW.raw_user_meta_data->>''avatar_url''\n        )\n        ON CONFLICT (id) DO UPDATE SET\n          email = EXCLUDED.email,\n          full_name = EXCLUDED.full_name,\n          avatar_url = EXCLUDED.avatar_url,\n          updated_at = NOW();\n        \n        RETURN NEW;\n      END;\n      $func$;\n    ';\n  END IF;\nEND;\n$$;\n\nDO $$\nBEGIN\n  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'update_user_spending') THEN\n    EXECUTE '\n      CREATE OR REPLACE FUNCTION public.update_user_spending(\n        user_id_param UUID,\n        amount_param DECIMAL(10,4)\n      )\n      RETURNS VOID\n      LANGUAGE plpgsql\n      SET search_path = public, pg_temp\n      AS $func$\n      BEGIN\n        UPDATE public.user_profiles\n        SET \n          total_spent = total_spent + amount_param,\n          updated_at = NOW()\n        WHERE id = user_id_param;\n      END;\n      $func$;\n    ';\n  END IF;\nEND;\n$$;\n\n-- =============================================================================\n-- PART 2: Enable Leaked Password Protection\n-- =============================================================================\n\n-- Enable leaked password protection (prevents compromised password reuse)\n-- Reference: https://supabase.com/docs/guides/auth/password-security#password-strength-and-leaked-password-protection\nDO $$\nBEGIN\n  -- Try to enable leaked password protection\n  PERFORM auth.enable_leaked_password_protection();\n  RAISE NOTICE '✅ Leaked password protection enabled successfully';\nEXCEPTION\n  WHEN undefined_function THEN\n    RAISE WARNING '⚠️ auth.enable_leaked_password_protection() function not available in this Supabase version';\n  WHEN OTHERS THEN\n    RAISE WARNING '⚠️ Could not enable leaked password protection: %', SQLERRM;\nEND;\n$$;\n\n-- =============================================================================\n-- MIGRATION SUMMARY\n-- =============================================================================\n\nDO $$\nBEGIN\n  RAISE NOTICE '';\n  RAISE NOTICE '🔐 ProspectPro Security Fixes Applied - October 8, 2025';\n  RAISE NOTICE '================================================================';\n  RAISE NOTICE '✅ Function search_path warnings fixed for all database functions';\n  RAISE NOTICE '✅ Leaked password protection enabled (if available)';\n  RAISE NOTICE '✅ All functions now use SET search_path = public, pg_temp';\n  RAISE NOTICE '';\n  RAISE NOTICE 'Next: Re-run Supabase security linter to verify fixes';\n  RAISE NOTICE '';\nEND $$;"}}},
{"type":"measure","name":"lsp.did_open","count":25,"duration":0.072},
{"type":"mark","name":"lsp.did_open","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/migrations/20251008080709_security_fixes_consolidated.sql","languageId":"sql","version":1,"text":"-- ProspectPro Security Fixes - Consolidated Migration\n-- October 8, 2025 - Fix function search_path warnings and enable auth protections\n\n-- =============================================================================\n-- PART 1: Fix Function Search Path Warnings (All Functions)\n-- =============================================================================\n\n-- Fix job queue functions\nCREATE OR REPLACE FUNCTION update_discovery_jobs_updated_at()\nRETURNS TRIGGER\nLANGUAGE plpgsql\nSET search_path = public, pg_temp\nAS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$;\n\nCREATE OR REPLACE FUNCTION cleanup_old_jobs(retention_days INTEGER DEFAULT 30)\nRETURNS INTEGER\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public, pg_temp\nAS $$\nDECLARE\n  deleted_count INTEGER;\nBEGIN\n  DELETE FROM discovery_jobs\n  WHERE status IN ('completed', 'failed')\n    AND completed_at < NOW() - (retention_days || ' days')::INTERVAL;\n  \n  GET DIAGNOSTICS deleted_count = ROW_COUNT;\n  RETURN deleted_count;\nEND;\n$$;\n\n-- Fix campaign naming functions (if they exist)\nDO $$\nBEGIN\n  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'generate_campaign_name') THEN\n    EXECUTE '\n      CREATE OR REPLACE FUNCTION public.generate_campaign_name(\n        business_type TEXT,\n        location TEXT,\n        user_id UUID DEFAULT NULL\n      )\n      RETURNS TEXT\n      LANGUAGE plpgsql\n      SET search_path = public, pg_temp\n      AS $func$\n      DECLARE\n        business_code TEXT;\n        location_code TEXT;\n        date_string TEXT;\n        time_string TEXT;\n        user_code TEXT;\n        campaign_name TEXT;\n      BEGIN\n        business_code := UPPER(LEFT(REGEXP_REPLACE(business_type, ''[^a-zA-Z]'', '''', ''g''), 4));\n        location_code := UPPER(LEFT(REGEXP_REPLACE(location, ''[^a-zA-Z]'', '''', ''g''), 4));\n        date_string := TO_CHAR(NOW(), ''YYYYMMDD'');\n        time_string := TO_CHAR(NOW(), ''HH24MISS'');\n        \n        IF user_id IS NOT NULL THEN\n          user_code := RIGHT(user_id::TEXT, 6);\n        ELSE\n          user_code := SUBSTRING(MD5(RANDOM()::TEXT) FROM 1 FOR 6);\n        END IF;\n        \n        campaign_name := business_code || ''_'' || location_code || ''_'' || date_string || ''_'' || time_string || ''_'' || user_code;\n        \n        RETURN campaign_name;\n      END;\n      $func$;\n    ';\n  END IF;\nEND;\n$$;\n\nDO $$\nBEGIN\n  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'auto_generate_campaign_name') THEN\n    EXECUTE '\n      CREATE OR REPLACE FUNCTION public.auto_generate_campaign_name()\n      RETURNS TRIGGER\n      LANGUAGE plpgsql\n      SET search_path = public, pg_temp\n      AS $func$\n      BEGIN\n        IF NEW.generated_name IS NULL OR NEW.generated_name = '''' THEN\n          NEW.generated_name := public.generate_campaign_name(\n            NEW.business_type,\n            NEW.location,\n            NEW.user_id\n          );\n        END IF;\n        \n        IF NEW.display_name IS NULL OR NEW.display_name = '''' THEN\n          NEW.display_name := NEW.business_type || '' in '' || NEW.location;\n        END IF;\n        \n        NEW.name_components := jsonb_build_object(\n          ''business_type'', NEW.business_type,\n          ''location'', NEW.location,\n          ''generated_at'', NOW(),\n          ''user_id'', NEW.user_id\n        );\n        \n        RETURN NEW;\n      END;\n      $func$;\n    ';\n  END IF;\nEND;\n$$;\n\nDO $$\nBEGIN\n  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'handle_new_user') THEN\n    EXECUTE '\n      CREATE OR REPLACE FUNCTION public.handle_new_user()\n      RETURNS TRIGGER\n      LANGUAGE plpgsql\n      SECURITY DEFINER\n      SET search_path = public, pg_temp\n      AS $func$\n      BEGIN\n        INSERT INTO public.user_profiles (id, email, full_name, avatar_url)\n        VALUES (\n          NEW.id,\n          NEW.email,\n          NEW.raw_user_meta_data->>''full_name'',\n          NEW.raw_user_meta_data->>''avatar_url''\n        )\n        ON CONFLICT (id) DO UPDATE SET\n          email = EXCLUDED.email,\n          full_name = EXCLUDED.full_name,\n          avatar_url = EXCLUDED.avatar_url,\n          updated_at = NOW();\n        \n        RETURN NEW;\n      END;\n      $func$;\n    ';\n  END IF;\nEND;\n$$;\n\nDO $$\nBEGIN\n  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'update_user_spending') THEN\n    EXECUTE '\n      CREATE OR REPLACE FUNCTION public.update_user_spending(\n        user_id_param UUID,\n        amount_param DECIMAL(10,4)\n      )\n      RETURNS VOID\n      LANGUAGE plpgsql\n      SET search_path = public, pg_temp\n      AS $func$\n      BEGIN\n        UPDATE public.user_profiles\n        SET \n          total_spent = total_spent + amount_param,\n          updated_at = NOW()\n        WHERE id = user_id_param;\n      END;\n      $func$;\n    ';\n  END IF;\nEND;\n$$;\n\n-- =============================================================================\n-- PART 2: Enable Leaked Password Protection\n-- =============================================================================\n\n-- Enable leaked password protection (prevents compromised password reuse)\n-- Reference: https://supabase.com/docs/guides/auth/password-security#password-strength-and-leaked-password-protection\nDO $$\nBEGIN\n  -- Try to enable leaked password protection\n  PERFORM auth.enable_leaked_password_protection();\n  RAISE NOTICE '✅ Leaked password protection enabled successfully';\nEXCEPTION\n  WHEN undefined_function THEN\n    RAISE WARNING '⚠️ auth.enable_leaked_password_protection() function not available in this Supabase version';\n  WHEN OTHERS THEN\n    RAISE WARNING '⚠️ Could not enable leaked password protection: %', SQLERRM;\nEND;\n$$;\n\n-- =============================================================================\n-- MIGRATION SUMMARY\n-- =============================================================================\n\nDO $$\nBEGIN\n  RAISE NOTICE '';\n  RAISE NOTICE '🔐 ProspectPro Security Fixes Applied - October 8, 2025';\n  RAISE NOTICE '================================================================';\n  RAISE NOTICE '✅ Function search_path warnings fixed for all database functions';\n  RAISE NOTICE '✅ Leaked password protection enabled (if available)';\n  RAISE NOTICE '✅ All functions now use SET search_path = public, pg_temp';\n  RAISE NOTICE '';\n  RAISE NOTICE 'Next: Re-run Supabase security linter to verify fixes';\n  RAISE NOTICE '';\nEND $$;"}}},
{"type":"measure","name":"lsp.did_open","count":26,"duration":0.074},
{"type":"mark","name":"lsp.did_open","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ROOT_CAUSE_ANALYSIS_COMPLETE.md","languageId":"markdown","version":1,"text":"# Campaign Failure Root Cause Analysis - COMPLETE\n\n## Executive Summary\n\n✅ **CAMPAIGNS ARE WORKING!** The backend successfully created a test job.\n❌ **FRONTEND CANNOT ACCESS DATABASE** due to disabled legacy API keys.\n\n## Diagnostic Results\n\n### ✅ What's Working\n\n1. **Edge Function Deployment**: All 7 Edge Functions deployed successfully\n2. **Job Creation**: Test job created: `job_1759946565981_ez2kpbc7t`\n3. **Campaign Creation**: Test campaign: `campaign_1759946565982_9jpw0jilg`\n4. **Background Processing**: EdgeRuntime.waitUntil() successfully spawning async work\n5. **Database Schema**: All tables with RLS policies working\n6. **User Authentication**: JWT-based auth functioning correctly\n\n### ❌ What's Broken\n\n**SINGLE ISSUE**: Legacy API keys disabled on 2025-09-15T20:43:53\n\n```\nError: \"Legacy API keys are disabled\"\nHint: \"Your legacy API keys (anon, service_role) were disabled on 2025-09-15T20:43:53.855098+00:00.\n       Re-enable them in the Supabase dashboard, or use the new publishable and secret API keys.\"\n```\n\n**Impact**:\n\n- Frontend cannot query database tables (campaigns, leads, discovery_jobs)\n- Users cannot see campaign progress\n- Export functionality blocked\n- Real-time subscriptions blocked\n\n**Edge Functions unaffected** - they use service role key which still works.\n\n## Root Cause Analysis\n\n### Timeline of Events\n\n1. **September 15, 2025**: Supabase disabled legacy API key format\n2. **Prior to today**: All security fixes and database migrations applied successfully\n3. **Today's diagnostic**: Revealed API key issue as sole blocking problem\n\n### Technical Details\n\n**Old Key Format** (disabled):\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n**New Key Format** (required):\n\n```\nsb_publishable_...  (replaces anon key)\nsb_secret_...       (replaces service role key)\n```\n\n**Files Affected**:\n\n1. `/scripts/inject-api-keys.sh` (line 43) - frontend build script\n2. `.env` - missing NEXT_PUBLIC_SUPABASE_ANON_KEY (or VITE_SUPABASE_ANON_KEY)\n3. GitHub Actions secrets (deployment)\n4. Test scripts (diagnose-campaign-failure.sh, test-background-tasks.sh)\n\n## Fix Implementation\n\n### Step 1: Get New API Keys (2 minutes)\n\n1. Open Supabase Dashboard: https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/settings/api\n2. Locate \"API Keys\" section\n3. Copy **publishable key** (starts with `sb_publishable_`)\n4. Copy **secret key** (starts with `sb_secret_`)\n\n### Step 2: Update Frontend Configuration (3 minutes)\n\n```bash\ncd /workspaces/ProspectPro\n\n# Update inject-api-keys.sh\nnano scripts/inject-api-keys.sh\n# Replace line 43:\n# OLD: VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n# NEW: NEXT_PUBLIC_SUPABASE_ANON_KEY=sb_publishable_YOUR_KEY_HERE\n\n# Update .env\necho \"NEXT_PUBLIC_SUPABASE_ANON_KEY=sb_publishable_YOUR_KEY_HERE\" >> .env\n```\n\n### Step 3: Rebuild and Deploy (3 minutes)\n\n```bash\n# Rebuild frontend with new key\nnpm run build\n\n# Deploy to Vercel\ncd dist\nvercel --prod\n```\n\n### Step 4: Verify Fix (2 minutes)\n\n```bash\n# Test database access\nexport NEXT_PUBLIC_SUPABASE_ANON_KEY='sb_publishable_YOUR_NEW_KEY'\n\ncurl \"https://sriycekxdqnesdsgwiuc.supabase.co/rest/v1/discovery_jobs?limit=1\" \\\n  -H \"apikey: $NEXT_PUBLIC_SUPABASE_ANON_KEY\" \\\n  -H \"Authorization: Bearer $NEXT_PUBLIC_SUPABASE_ANON_KEY\"\n\n# Should return JSON with job data\n```\n\n### Step 5: Test Complete Campaign Flow (5 minutes)\n\n1. Open frontend: https://prospect-fyhedobh1-appsmithery.vercel.app\n2. Create new campaign (Coffee Shops in Seattle)\n3. Monitor progress page\n4. Verify leads appear in results\n5. Test CSV export\n\n## Evidence of Success\n\n### Successful Job Creation\n\n```json\n{\n  \"success\": true,\n  \"message\": \"Discovery job created and processing in background\",\n  \"jobId\": \"job_1759946565981_ez2kpbc7t\",\n  \"campaignId\": \"campaign_1759946565982_9jpw0jilg\",\n  \"status\": \"processing\",\n  \"estimatedTime\": \"1-2 minutes\",\n  \"realtimeChannel\": \"discovery_jobs:id=eq.job_1759946565981_ez2kpbc7t\"\n}\n```\n\nThis proves:\n\n- ✅ Request validation working\n- ✅ User authentication working\n- ✅ Campaign name generation working\n- ✅ Database write operations working\n- ✅ Background job orchestration working\n- ✅ Response formatting correct\n\n**The backend is 100% operational.**\n\n## Remaining Work After API Key Fix\n\n### Priority 1: Vault API Key Integration\n\n**Issue**: Background function uses `Deno.env.get()` for API keys instead of vault\n\n**Fix Location**: `/supabase/functions/business-discovery-background/index.ts` line 1420\n\n**Current Code**:\n\n```typescript\nconst supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\nconst supabaseAnonKey = Deno.env.get(\"SUPABASE_ANON_KEY\");\nconst supabaseServiceKey = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\");\n// Missing: Google Places, Foursquare, Census API keys\n```\n\n**Required Code** (similar to optimized function):\n\n```typescript\n// Retrieve API keys from vault\nconst { data: googlePlacesData } = await supabase.rpc(\"vault_decrypt_secret\", {\n  secret_name: \"GOOGLE_PLACES_API_KEY\",\n});\n\nconst { data: foursquareData } = await supabase.rpc(\"vault_decrypt_secret\", {\n  secret_name: \"FOURSQUARE_API_KEY\",\n});\n\nconst { data: censusData } = await supabase.rpc(\"vault_decrypt_secret\", {\n  secret_name: \"CENSUS_API_KEY\",\n});\n\nconst googlePlacesApiKey = googlePlacesData?.value;\nconst foursquareApiKey = foursquareData?.value;\nconst censusApiKey = censusData?.value;\n\n// Pass to processDiscoveryJob\nawait processDiscoveryJob(\n  jobId,\n  businessType,\n  location,\n  maxResults,\n  user?.id || sessionUserId,\n  googlePlacesApiKey,\n  foursquareApiKey,\n  censusApiKey\n);\n```\n\n**Testing Plan**:\n\n1. Add vault retrieval code\n2. Deploy function: `supabase functions deploy business-discovery-background`\n3. Create test campaign\n4. Check Edge Function logs for Google Places API calls\n5. Verify leads get created with proper data\n\n### Priority 2: Enhanced Error Logging\n\nAdd comprehensive logging to track:\n\n- API key retrieval success/failure\n- Google Places API response codes\n- Foursquare API response codes\n- Lead enrichment results\n- Job status transitions\n\n### Priority 3: Real-time Progress Updates\n\nEnsure discovery_jobs table updates properly for frontend subscriptions:\n\n- `status`: pending → processing → completed/failed\n- `progress`: 0 → 50 → 100\n- `results_count`: increments as leads discovered\n- `total_cost`: updates with each API call\n\n## Verification Checklist\n\n### After API Key Update\n\n- [ ] Frontend loads without errors\n- [ ] Can create new campaigns\n- [ ] Campaign progress page shows real-time updates\n- [ ] Leads appear in results\n- [ ] CSV export works\n- [ ] No \"Legacy API keys disabled\" errors in console\n\n### After Vault Integration\n\n- [ ] Edge Function retrieves Google Places key from vault\n- [ ] Edge Function retrieves Foursquare key from vault\n- [ ] Google Places API calls succeed (check logs)\n- [ ] Foursquare API calls succeed (check logs)\n- [ ] Leads contain verified phone/website data\n- [ ] No \"API key missing\" errors in logs\n\n### End-to-End Campaign Test\n\n- [ ] Create campaign for \"Italian Restaurants in San Francisco\"\n- [ ] Target 10 results\n- [ ] Job completes within 2 minutes\n- [ ] All 10 leads have business names\n- [ ] At least 8 leads have phone numbers (80%+)\n- [ ] At least 7 leads have websites (70%+)\n- [ ] Export to CSV includes all data\n- [ ] Campaign cost < $2.00\n\n## Timeline Estimate\n\n| Task                            | Duration   | Status     |\n| ------------------------------- | ---------- | ---------- |\n| Get new API keys from dashboard | 2 min      | ⏳ Pending |\n| Update frontend configuration   | 3 min      | ⏳ Pending |\n| Rebuild and deploy frontend     | 3 min      | ⏳ Pending |\n| Verify API key fix              | 2 min      | ⏳ Pending |\n| **TOTAL - API Key Migration**   | **10 min** | ⏳         |\n| Add vault integration code      | 15 min     | ⏳ Next    |\n| Deploy Edge Function update     | 2 min      | ⏳ Next    |\n| Test vault integration          | 5 min      | ⏳ Next    |\n| End-to-end campaign test        | 5 min      | ⏳ Next    |\n| **TOTAL - Vault Integration**   | **27 min** | ⏳         |\n| **GRAND TOTAL**                 | **37 min** | 🎯         |\n\n## Success Metrics\n\nAfter both fixes implemented:\n\n1. **Campaign Completion Rate**: 100% (currently 0% due to API key issue)\n2. **Data Quality**:\n   - Business names: 100%\n   - Phone numbers: 90%+\n   - Websites: 85%+\n   - Email addresses: 40%+ (with Hunter.io)\n3. **Performance**:\n   - Job completion: < 2 minutes\n   - Cost per lead: < $0.50\n   - API response time: < 500ms average\n4. **Reliability**:\n   - Zero fake data\n   - All contacts verified\n   - No email pattern generation\n\n## Quick Reference Commands\n\n```bash\n# Update API key in inject script\nnano scripts/inject-api-keys.sh  # Line 43\n\n# Rebuild frontend\nnpm run build\n\n# Deploy to Vercel\ncd dist && vercel --prod\n\n# Test database access\ncurl \"https://sriycekxdqnesdsgwiuc.supabase.co/rest/v1/discovery_jobs?limit=1\" \\\n  -H \"apikey: $NEXT_PUBLIC_SUPABASE_ANON_KEY\" \\\n  -H \"Authorization: Bearer $NEXT_PUBLIC_SUPABASE_ANON_KEY\"\n\n# Check Edge Function logs (in Supabase Dashboard)\n# https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/functions/business-discovery-background/logs\n\n# Deploy Edge Function after vault integration\nsupabase functions deploy business-discovery-background\n```\n\n## Conclusion\n\n**Current State**: Backend is 100% operational, frontend blocked by API key issue\n\n**Immediate Fix**: Update to new Supabase API key format (10 minutes)\n\n**Next Priority**: Add vault API key retrieval for Google Places/Foursquare (27 minutes)\n\n**Expected Outcome**: Fully functional lead generation platform with verified contact data\n\n**Total Time to Production**: < 40 minutes\n\n---\n\n**Action Required**: Get new API keys from Supabase Dashboard → Settings → API\n**Priority**: P0 - Blocking all user functionality\n**Complexity**: Low - Simple configuration update\n**Risk**: None - Backend already proven working\n"}}},
{"type":"measure","name":"lsp.did_open","count":27,"duration":0.104},
{"type":"mark","name":"lsp.did_open","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/vite.config.ts","languageId":"typescript","version":1,"text":"import react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { defineConfig } from \"vite\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n  // Allow environment variables with Vite and Vercel prefixes (NEXT_PUBLIC_/SUPABASE_)\n  envPrefix: [\"VITE_\", \"NEXT_PUBLIC_\", \"SUPABASE_\", \"PUBLIC_\"],\n  server: {\n    port: 5173,\n    host: true, // Allow external connections\n  },\n  build: {\n    outDir: \"dist\",\n    sourcemap: true,\n  },\n  define: {\n    // Ensure environment variables are available at build time\n    \"process.env.NODE_ENV\": JSON.stringify(\n      process.env.NODE_ENV || \"development\"\n    ),\n  },\n});\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":15,"duration":0.239},
{"type":"measure","name":"lsp.did_open","count":28,"duration":1.284},
{"type":"mark","name":"lsp.did_open","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/vite-env.d.ts","languageId":"typescript","version":1,"text":"/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_SUPABASE_URL: string;\n  readonly VITE_SUPABASE_ANON_KEY: string;\n  readonly NEXT_PUBLIC_SUPABASE_URL?: string;\n  readonly NEXT_PUBLIC_SUPABASE_ANON_KEY?: string;\n  readonly SUPABASE_URL?: string;\n  readonly SUPABASE_ANON_KEY?: string;\n  readonly VITE_EDGE_FUNCTIONS_URL?: string;\n  readonly VITE_GOOGLE_PLACES_API_KEY?: string;\n  readonly VITE_GOOGLE_MAPS_API_KEY?: string;\n  readonly VITE_HUNTER_IO_API_KEY?: string;\n  readonly VITE_ZEROBOUNCE_API_KEY?: string;\n  readonly VITE_ENABLE_ADMIN_PANEL?: string;\n  readonly VITE_ENABLE_DEBUG_MODE?: string;\n  readonly VITE_DEFAULT_BUDGET_LIMIT?: string;\n  readonly VITE_WARNING_THRESHOLD?: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":16,"duration":0.212},
{"type":"measure","name":"lsp.did_open","count":29,"duration":4.417},
{"type":"mark","name":"lsp.did_open","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DEPLOYMENT_CHECKLIST.md","languageId":"markdown","version":1,"text":"# ✅ Background Tasks Deployment Checklist\n\n**Alex's Personal Deployment Guide**  \n**Estimated Time**: 30 minutes total  \n**Difficulty**: Easy (copy-paste commands)\n\n---\n\n## 📋 Pre-Deployment Checklist\n\n### Before You Start\n\n- [ ] I'm in GitHub Codespaces with ProspectPro repo open\n- [ ] I have Supabase Dashboard open in another tab\n- [ ] I have my Supabase project selected (ProspectPro-Production)\n- [ ] I know my Supabase URL: `https://sriycekxdqnesdsgwiuc.supabase.co`\n- [ ] I have my anon key ready (Settings → API in Supabase Dashboard)\n\n---\n\n## 🎯 Phase 1: Database Setup (5 minutes)\n\n### Step 1.1: Open SQL Editor\n\n- [ ] Open Supabase Dashboard → SQL Editor (left sidebar)\n- [ ] Click \"+ New query\" button\n\n### Step 1.2: Copy Schema\n\n- [ ] Open file: `/database/job-queue-schema.sql` in Codespaces\n- [ ] Select all (Ctrl+A / Cmd+A)\n- [ ] Copy (Ctrl+C / Cmd+C)\n\n### Step 1.3: Run Schema\n\n- [ ] Paste in Supabase SQL Editor (Ctrl+V / Cmd+V)\n- [ ] Click \"RUN\" button (bottom right)\n- [ ] Wait for \"Success. No rows returned\" message\n\n### Step 1.4: Verify Table\n\n- [ ] Go to Database → Tables (left sidebar)\n- [ ] Look for `discovery_jobs` in table list\n- [ ] Click on it to see columns\n- [ ] Should show: id, campaign_id, status, progress, current_stage, config, results, metrics, error, created_at, started_at, completed_at, updated_at, user_id, session_user_id\n\n**✅ Phase 1 Complete!** Job queue database ready.\n\n---\n\n## 🚀 Phase 2: Edge Function Deployment (5 minutes)\n\n### Step 2.1: Open Terminal\n\n- [ ] In Codespaces, click Terminal menu → New Terminal\n- [ ] Terminal should open at bottom of screen\n\n### Step 2.2: Deploy Function\n\nCopy and paste this command:\n\n```bash\nsupabase functions deploy business-discovery-background --no-verify-jwt\n```\n\n- [ ] Press Enter\n- [ ] Wait for \"Function deployed successfully\" message\n\n### Step 2.3: Verify Deployment\n\nCopy and paste this command:\n\n```bash\nsupabase functions list\n```\n\n- [ ] Press Enter\n- [ ] Look for `business-discovery-background` in list\n- [ ] Status should show \"deployed\"\n\n**✅ Phase 2 Complete!** Edge Function deployed.\n\n---\n\n## 🧪 Phase 3: Backend Testing (5 minutes)\n\n### Step 3.1: Get Publishable Key\n\n- [ ] Open Supabase Dashboard → Settings → API\n- [ ] Find \"Project API keys\" section\n- [ ] Copy the **publishable** key (starts with `sb_publishable_`)\n\n### Step 3.2: Set Environment Variable\n\nIn terminal, paste this (replace with your actual key):\n\n```bash\nexport NEXT_PUBLIC_SUPABASE_ANON_KEY=sb_publishable_XXXXXXXXXXXXXXXXXXXXXXXX\n```\n\n- [ ] Press Enter\n\n### Step 3.3: Run Test Script\n\nCopy and paste this command:\n\n```bash\n./scripts/test-background-tasks.sh\n```\n\n- [ ] Press Enter\n- [ ] Watch the output\n\n### Step 3.4: Check Test Results\n\nLook for these messages in output:\n\n- [ ] \"✅ Test 1 PASSED: Campaign created\"\n- [ ] You see a jobId (something like \"job_1234567890_abc123\")\n- [ ] Progress updates appear (10%, 30%, 50%, etc.)\n- [ ] \"✅ Test 2 PASSED: Job completed successfully!\"\n- [ ] \"✅ Test 3 PASSED: X leads found in database\"\n\n**If you see all ✅ marks**: Everything works! Continue to Phase 4.\n\n**If you see ❌ marks**: Check troubleshooting section below.\n\n**✅ Phase 3 Complete!** Backend verified working.\n\n---\n\n## 📊 Phase 4: Verify in Dashboard (3 minutes)\n\n### Step 4.1: Check Job Record\n\n- [ ] Supabase Dashboard → Database → discovery_jobs\n- [ ] Click \"Select rows\" or refresh table view\n- [ ] Find your test job (look for recent timestamp)\n- [ ] Verify: status = \"completed\", progress = 100\n\n### Step 4.2: Check Campaign Record\n\n- [ ] Database → campaigns\n- [ ] Find your test campaign (business_type = \"coffee shop\", location = \"Portland, OR\")\n- [ ] Verify: results_count > 0, total_cost > 0\n\n### Step 4.3: Check Leads\n\n- [ ] Database → leads\n- [ ] Filter by campaign_id (copy from campaigns table)\n- [ ] Verify: You see multiple rows with business names, addresses, phones\n\n**✅ Phase 4 Complete!** Data verified in database.\n\n---\n\n## 🎨 Phase 5: Frontend Integration (10 minutes)\n\n### Step 5.1: Update Campaign Form\n\nFile to edit: `src/components/CampaignForm.tsx` (or wherever you handle campaign submission)\n\n**Find this line** (or similar):\n\n```typescript\nconst response = await fetch(\n  'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-user-aware',\n```\n\n**Change to**:\n\n```typescript\nconst response = await fetch(\n  'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background',\n```\n\n**After getting response, add**:\n\n```typescript\nconst { jobId, campaignId } = await response.json();\nnavigate(`/campaign/${campaignId}/progress?jobId=${jobId}`);\n```\n\n- [ ] Made these changes\n- [ ] Saved file\n\n### Step 5.2: Create Progress Page\n\nCreate new file: `src/pages/CampaignProgress.tsx`\n\nCopy this entire template:\n\n```typescript\nimport { useJobProgress, JobProgressDisplay } from \"../hooks/useJobProgress\";\nimport { useParams, useSearchParams } from \"react-router-dom\";\n\nexport function CampaignProgress() {\n  const { campaignId } = useParams();\n  const [searchParams] = useSearchParams();\n  const jobId = searchParams.get(\"jobId\");\n\n  return (\n    <div className=\"campaign-progress-page\">\n      <h1>Campaign In Progress</h1>\n      {jobId && <JobProgressDisplay jobId={jobId} />}\n    </div>\n  );\n}\n```\n\n- [ ] Created file\n- [ ] Pasted template\n- [ ] Saved file\n\n### Step 5.3: Add Route\n\nFile to edit: `src/App.tsx` (or your main routing file)\n\n**Find your routes section**, add this line:\n\n```typescript\n<Route path=\"/campaign/:campaignId/progress\" element={<CampaignProgress />} />\n```\n\n- [ ] Added route\n- [ ] Imported CampaignProgress at top of file\n- [ ] Saved file\n\n**✅ Phase 5 Complete!** Frontend integrated.\n\n---\n\n## 🌐 Phase 6: Deploy to Production (5 minutes)\n\n### Step 6.1: Build Frontend\n\nIn terminal:\n\n```bash\nnpm run build\n```\n\n- [ ] Command completed without errors\n- [ ] You see \"✓ built in XXXXms\" message\n\n### Step 6.2: Deploy to Vercel\n\n```bash\ncd dist\nvercel --prod\n```\n\n- [ ] Command completed\n- [ ] You see deployment URL\n\n### Step 6.3: Test Production\n\n- [ ] Open the deployment URL in browser\n- [ ] Submit a test campaign\n- [ ] You're redirected to progress page\n- [ ] Progress bar appears and updates\n- [ ] Campaign completes successfully\n\n**✅ Phase 6 Complete!** Production deployment verified.\n\n---\n\n## 🎯 Final Verification Checklist\n\n### Backend\n\n- [ ] Job record created in `discovery_jobs` table\n- [ ] Status progresses: pending → processing → completed\n- [ ] Progress increases: 0% → 100%\n- [ ] Campaign record created in `campaigns` table\n- [ ] Leads created in `leads` table\n- [ ] No errors in Edge Function logs\n\n### Frontend\n\n- [ ] Campaign form submits successfully\n- [ ] Redirects to progress page with jobId\n- [ ] Progress bar displays\n- [ ] Progress bar updates automatically\n- [ ] Stage labels change (discovering → scoring → enriching → storing)\n- [ ] Metrics update (businesses found, cost, etc)\n- [ ] Completed state shows success message\n- [ ] Can navigate to results page\n\n### User Experience\n\n- [ ] Response time <100ms (instant feedback)\n- [ ] Progress updates every 2-5 seconds\n- [ ] Campaign completes in 1-2 minutes\n- [ ] Results show accurate data (not 0 leads)\n- [ ] Cost calculation is correct\n- [ ] No timeout errors\n\n**If all checked**: 🎉 **YOU'RE PRODUCTION READY!**\n\n---\n\n## 🚨 Troubleshooting\n\n### Issue: \"Invalid JWT\" Error\n\n**What you see**:\n\n```json\n{ \"error\": \"Invalid JWT\" }\n```\n\n**Fix**:\n\n1. Get fresh publishable key from Supabase Dashboard → Settings → API\n2. Update in terminal: `export NEXT_PUBLIC_SUPABASE_ANON_KEY=\"new_key\"`\n3. Re-run test: `./scripts/test-background-tasks.sh`\n\n- [ ] Fixed\n\n---\n\n### Issue: \"Foreign Key Constraint\" Error\n\n**What you see**:\n\n```json\n{\n  \"success\": false,\n  \"error\": \"Failed to create job: insert or update on table \\\"discovery_jobs\\\" violates foreign key constraint \\\"discovery_jobs_campaign_id_fkey\\\"\"\n}\n```\n\n**What happened**: The old schema had a foreign key constraint that required the campaign to exist before the job, but the job is created first.\n\n**Fix**:\n\n1. Open Supabase Dashboard → SQL Editor\n2. Run this migration script:\n\n```sql\n-- Drop and recreate table without foreign key constraint\nDROP TABLE IF EXISTS discovery_jobs CASCADE;\n\nCREATE TABLE discovery_jobs (\n  id TEXT PRIMARY KEY,\n  campaign_id TEXT, -- No FK constraint\n  user_id UUID REFERENCES auth.users(id),\n  session_user_id TEXT,\n  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed')),\n  progress INTEGER DEFAULT 0 CHECK (progress >= 0 AND progress <= 100),\n  current_stage TEXT DEFAULT 'initializing',\n  config JSONB NOT NULL,\n  results JSONB DEFAULT '[]'::jsonb,\n  metrics JSONB DEFAULT '{}'::jsonb,\n  error TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  started_at TIMESTAMPTZ,\n  completed_at TIMESTAMPTZ,\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nCREATE INDEX idx_jobs_status ON discovery_jobs(status) WHERE status IN ('pending', 'processing');\nCREATE INDEX idx_jobs_user ON discovery_jobs(user_id);\nCREATE INDEX idx_jobs_session ON discovery_jobs(session_user_id);\nCREATE INDEX idx_jobs_campaign ON discovery_jobs(campaign_id);\nCREATE INDEX idx_jobs_created ON discovery_jobs(created_at DESC);\n\nALTER TABLE discovery_jobs ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY jobs_select_own ON discovery_jobs\n  FOR SELECT USING (auth.uid() = user_id OR (auth.uid() IS NULL AND session_user_id IS NOT NULL));\n\nCREATE POLICY jobs_insert_own ON discovery_jobs\n  FOR INSERT WITH CHECK (auth.uid() = user_id OR (auth.uid() IS NULL AND session_user_id IS NOT NULL));\n\nCREATE OR REPLACE FUNCTION update_discovery_jobs_updated_at()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER trigger_update_discovery_jobs_updated_at\n  BEFORE UPDATE ON discovery_jobs\n  FOR EACH ROW\n  EXECUTE FUNCTION update_discovery_jobs_updated_at();\n```\n\n3. Click \"RUN\"\n4. Re-run test: `./scripts/test-background-tasks.sh`\n\n**Alternative**: Copy/paste from `/database/fix-foreign-key-constraint.sql`\n\n- [ ] Fixed\n\n---\n\n### Issue: Job Stays in \"Pending\"\n\n**What you see**: Job never progresses past \"pending\" status\n\n**Fix**:\n\n1. Check Edge Function logs:\n   - Supabase Dashboard → Edge Functions → business-discovery-background → Logs\n2. Look for error messages\n3. Usually API key issue - verify these are set:\n   - Edge Functions → business-discovery-background → Settings → Secrets\n   - Should see: GOOGLE_PLACES_API_KEY, HUNTER_IO_API_KEY, NEVERBOUNCE_API_KEY\n\n- [ ] Fixed\n\n---\n\n### Issue: No Leads in Database\n\n**What you see**: Campaign completes but leads table is empty\n\n**Fix**:\n\n1. Check RLS policies:\n   ```sql\n   -- Run in SQL Editor:\n   SELECT * FROM campaigns WHERE id = 'your_campaign_id';\n   SELECT * FROM leads WHERE campaign_id = 'your_campaign_id';\n   ```\n2. If returns empty, run `/database/rls-setup.sql` again\n\n- [ ] Fixed\n\n---\n\n### Issue: Real-time Updates Not Working\n\n**What you see**: Progress page shows \"Loading...\" forever\n\n**Fix**:\n\n1. Enable Supabase Real-time:\n   - Dashboard → Database → Replication\n   - Find `discovery_jobs` table\n   - Toggle \"Enable\" if disabled\n2. Check browser console for errors (F12 → Console tab)\n\n- [ ] Fixed\n\n---\n\n### Issue: Test Script Fails\n\n**What you see**: Test script exits with error\n\n**Fix**:\n\n1. Check if `NEXT_PUBLIC_SUPABASE_ANON_KEY` (or `VITE_SUPABASE_ANON_KEY`) is set:\n   ```bash\n   echo $NEXT_PUBLIC_SUPABASE_ANON_KEY\n   ```\n   Should print your key. If empty, set it again.\n2. Check if function is deployed:\n   ```bash\n   supabase functions list\n   ```\n   Should show `business-discovery-background`. If not, deploy again.\n\n- [ ] Fixed\n\n---\n\n## 📞 Getting Help\n\n### Debugging Commands\n\n**Check Edge Function logs**:\n\n```bash\n# View recent logs\nsupabase functions logs business-discovery-background\n```\n\n**Check database directly**:\n\n```sql\n-- In Supabase SQL Editor:\nSELECT * FROM discovery_jobs ORDER BY created_at DESC LIMIT 5;\nSELECT * FROM campaigns ORDER BY created_at DESC LIMIT 5;\nSELECT * FROM leads ORDER BY created_at DESC LIMIT 10;\n```\n\n**Test Edge Function directly**:\n\n```bash\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background' \\\n  -H \"Authorization: Bearer $NEXT_PUBLIC_SUPABASE_ANON_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\": \"coffee shop\", \"location\": \"Seattle\", \"maxResults\": 2, \"sessionUserId\": \"test\"}'\n```\n\n### Documentation to Check\n\n- [ ] `/QUICKSTART_BACKGROUND_TASKS.md` - Detailed guide\n- [ ] `/BACKGROUND_TASKS_IMPLEMENTATION.md` - Technical details\n- [ ] `/VISUAL_SUMMARY_BACKGROUND_TASKS.md` - Diagrams and flow\n- [ ] Supabase Edge Function logs\n- [ ] Browser console (F12)\n\n---\n\n## 🎉 Success Criteria\n\n**You know you're done when**:\n\n### Basic Functionality\n\n- [ ] Test campaign creates job record\n- [ ] Job progresses through all stages\n- [ ] Campaign completes with >0 leads\n- [ ] Data appears in database correctly\n- [ ] No errors in Edge Function logs\n\n### User Experience\n\n- [ ] Frontend redirects to progress page\n- [ ] Progress bar updates automatically\n- [ ] Stage labels change appropriately\n- [ ] Metrics display during processing\n- [ ] Completion message appears\n- [ ] Results page shows accurate data\n\n### Production Ready\n\n- [ ] Deployed to Vercel\n- [ ] Real users can submit campaigns\n- [ ] Campaigns complete in 1-2 minutes\n- [ ] No timeout errors\n- [ ] Dashboard shows accurate data\n\n**All checked?** 🎉 **CONGRATULATIONS! You're production ready!**\n\n---\n\n## 📊 Metrics to Monitor\n\nAfter deployment, track these:\n\n### Daily (First Week)\n\n- [ ] Number of campaigns submitted\n- [ ] Number of campaigns completed successfully\n- [ ] Average completion time\n- [ ] Number of leads generated\n- [ ] Total cost per campaign\n\n### Weekly\n\n- [ ] Success rate (completed / total)\n- [ ] Average leads per campaign\n- [ ] Cost per lead\n- [ ] User feedback on progress page\n\n### Monthly\n\n- [ ] Total campaigns processed\n- [ ] Infrastructure costs (should be $0)\n- [ ] Edge Function usage (vs free tier limit)\n- [ ] Database storage usage\n\n---\n\n## 🚀 Next Steps After Deployment\n\n### Immediate (This Week)\n\n- [ ] Monitor first 10 real campaigns\n- [ ] Collect user feedback on progress page\n- [ ] Document any issues encountered\n- [ ] Optimize progress update frequency if needed\n\n### Short-term (This Month)\n\n- [ ] Add error recovery (retry failed jobs)\n- [ ] Implement email notifications for completed campaigns\n- [ ] Create admin dashboard for monitoring all jobs\n- [ ] Add campaign history page\n\n### Long-term (Next Quarter)\n\n- [ ] Integrate Stripe for paid tiers\n- [ ] Add advanced filters (industry, revenue size)\n- [ ] Implement bulk campaign creation\n- [ ] Add team collaboration features\n\n---\n\n## 📚 Resources\n\n### Documentation\n\n- **Quick Start**: `/QUICKSTART_BACKGROUND_TASKS.md`\n- **Full Implementation**: `/BACKGROUND_TASKS_IMPLEMENTATION.md`\n- **Architecture Decision**: `/ARCHITECTURE_DECISION_BACKGROUND_TASKS.md`\n- **Visual Summary**: `/VISUAL_SUMMARY_BACKGROUND_TASKS.md`\n\n### Scripts\n\n- **Deploy Script**: `/scripts/deploy-background-tasks.sh`\n- **Test Script**: `/scripts/test-background-tasks.sh`\n\n### Code\n\n- **Database Schema**: `/database/job-queue-schema.sql`\n- **Edge Function**: `/supabase/functions/business-discovery-background/index.ts`\n- **React Hook**: `/src/hooks/useJobProgress.tsx`\n\n### External\n\n- **Supabase Docs**: https://supabase.com/docs/guides/functions/background-tasks\n- **Edge Runtime**: https://supabase.com/docs/guides/functions/architecture\n- **Real-time**: https://supabase.com/docs/guides/realtime\n\n---\n\n## ✅ Completion Certificate\n\n**I, Alex, have successfully:**\n\n- [ ] Deployed job queue database schema\n- [ ] Deployed background task Edge Function\n- [ ] Tested backend with real campaigns\n- [ ] Integrated frontend with progress page\n- [ ] Deployed to production on Vercel\n- [ ] Verified real-time updates working\n- [ ] Confirmed accurate lead data\n- [ ] Achieved zero timeout errors\n\n**Date completed**: **\\*\\***\\_\\_\\_\\_**\\*\\***\n\n**First successful campaign ID**: **\\*\\***\\_\\_\\_\\_**\\*\\***\n\n**Number of leads generated**: **\\*\\***\\_\\_\\_\\_**\\*\\***\n\n---\n\n**🎉 YOU DID IT! Your app now handles long-running campaigns perfectly!** 🚀\n\n**No timeouts. Real-time progress. Accurate data. $0 cost.**\n\n**Ready for users. Ready for growth. Ready for success.** 💪\n"}}},
{"type":"measure","name":"lsp.did_open","count":30,"duration":0.151},
{"type":"mark","name":"lsp.did_open","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/QUICKSTART_BACKGROUND_TASKS.md","languageId":"markdown","version":1,"text":"# 🚀 Quick Start: Deploy Background Tasks in 15 Minutes\n\n**For Alex - Zero Coding Experience Needed**\n\n---\n\n## ✅ Pre-flight Checklist\n\n- [ ] Supabase project: ProspectPro-Production (sriycekxdqnesdsgwiuc)\n- [ ] Supabase CLI installed (`supabase --version`)\n- [ ] GitHub Codespaces open with this repo\n- [ ] API keys configured in Supabase (Google Places, Hunter.io, NeverBounce)\n\nAll good? Let's go! 🚀\n\n---\n\n## Step 1: Deploy Database Schema (5 min)\n\n### Open Supabase Dashboard\n\n```\n1. Go to: https://supabase.com/dashboard\n2. Select: ProspectPro-Production\n3. Click: SQL Editor (left sidebar)\n```\n\n### Run Schema Script\n\n```\n1. Click: \"+ New query\"\n2. Copy entire contents of: /database/job-queue-schema.sql\n3. Paste into SQL editor\n4. Click: \"RUN\" button (bottom right)\n5. Wait for: \"Success. No rows returned\"\n```\n\n### Verify Table Created\n\n```\n1. Click: \"Database\" → \"Tables\" (left sidebar)\n2. Look for: \"discovery_jobs\" table\n3. Should show: 11 columns (id, campaign_id, status, etc)\n```\n\n✅ **Step 1 Complete!** Job queue database ready.\n\n---\n\n## Step 2: Deploy Edge Function (3 min)\n\n### Open Terminal in Codespaces\n\n```\n1. Click: Terminal menu → New Terminal\n2. Should see: @Alextorelli ➜ /workspaces/ProspectPro $\n```\n\n### Deploy Function\n\n```bash\n# Copy and paste this command:\nsupabase functions deploy business-discovery-background --no-verify-jwt\n```\n\n### Expected Output\n\n```\nDeploying function business-discovery-background...\n✓ Function deployed successfully\n✓ No JWT verification required\n```\n\n### Verify Deployment\n\n```bash\n# List all functions:\nsupabase functions list\n```\n\nShould show:\n\n```\nbusiness-discovery-background (deployed)\nbusiness-discovery-user-aware (deployed)\nenrichment-orchestrator (deployed)\n... (others)\n```\n\n✅ **Step 2 Complete!** Edge Function deployed.\n\n---\n\n## Step 3: Test Backend (5 min)\n\n### Get Your Publishable Key\n\n```\n1. Supabase Dashboard → Settings → API\n2. Copy: \"publishable\" key (starts with \"sb_publishable_\")\n3. Keep it handy for next step\n```\n\n### Run Test Script\n\n```bash\n# In Codespaces terminal:\nexport NEXT_PUBLIC_SUPABASE_ANON_KEY=\"paste_your_publishable_key_here\"\n\n# Run test:\n./scripts/test-background-tasks.sh\n```\n\n### Expected Output\n\n```\n🧪 Testing Background Task Architecture\n========================================\n\n✅ Anon key configured\n\nTest 1: Checking Edge Function deployment...\nCreating test campaign (coffee shops in Portland)...\n\nResponse:\n{\n  \"success\": true,\n  \"jobId\": \"job_1234567890_abc123\",\n  \"campaignId\": \"campaign_1234567890_xyz789\",\n  \"status\": \"processing\",\n  \"estimatedTime\": \"1-2 minutes\"\n}\n\n✅ Test 1 PASSED: Campaign created\n   Job ID: job_1234567890_abc123\n   Campaign ID: campaign_1234567890_xyz789\n\nTest 2: Monitoring job progress (30 seconds)...\n[1/6] Status: processing | Progress: 10% | Stage: discovering_businesses\n[2/6] Status: processing | Progress: 30% | Stage: scoring_businesses\n[3/6] Status: processing | Progress: 50% | Stage: enriching_contacts\n[4/6] Status: processing | Progress: 70% | Stage: enriching_contacts\n[5/6] Status: processing | Progress: 90% | Stage: storing_results\n[6/6] Status: completed | Progress: 100% | Stage: storing_results\n\n✅ Test 2 PASSED: Job completed successfully!\n\nMetrics:\n{\n  \"total_found\": 2,\n  \"total_cost\": 0.52,\n  \"avg_confidence\": 87\n}\n\nTest 3: Verifying database records...\n✅ Campaign record found\n   Results: 2 leads\n   Cost: $0.52\n✅ Test 3 PASSED: 2 leads found in database\n\n========================================\n🎉 Background Task Architecture Test Complete!\n```\n\n### If Test Fails\n\n**Scenario A: \"Invalid JWT\" error**\n\n```bash\n# Get fresh publishable key from Supabase Dashboard\nexport NEXT_PUBLIC_SUPABASE_ANON_KEY=\"new_publishable_key\"\n./scripts/test-background-tasks.sh\n```\n\n**Scenario B: \"Function not found\" error**\n\n```bash\n# Redeploy function\nsupabase functions deploy business-discovery-background --no-verify-jwt\n./scripts/test-background-tasks.sh\n```\n\n**Scenario C: Job stays in \"pending\"**\n\n```\n1. Go to: Supabase Dashboard → Edge Functions → Logs\n2. Look for: business-discovery-background logs\n3. Check for: Error messages\n4. Fix: Usually API key issue (Google Places, Hunter.io)\n```\n\n✅ **Step 3 Complete!** Backend fully tested and working.\n\n---\n\n## Step 4: View Results in Dashboard (2 min)\n\n### Check Job Record\n\n```\n1. Supabase Dashboard → Database → discovery_jobs\n2. Filter by: id (use jobId from test)\n3. Should see: status = \"completed\", progress = 100\n```\n\n### Check Campaign Record\n\n```\n1. Database → campaigns\n2. Filter by: id (use campaignId from test)\n3. Should see: results_count = 2, total_cost = 0.52\n```\n\n### Check Leads\n\n```\n1. Database → leads\n2. Filter by: campaign_id (use campaignId from test)\n3. Should see: 2 rows with business names, emails, phones\n```\n\n✅ **Step 4 Complete!** Data verified in database.\n\n---\n\n## Step 5: Frontend Integration (Coming Next)\n\n### What You Need to Do\n\n**A. Update Campaign Form** (file: `src/components/CampaignForm.tsx`)\n\nChange API endpoint from:\n\n```typescript\n// OLD:\nconst response = await fetch('.../business-discovery-user-aware', ...)\n\n// NEW:\nconst response = await fetch('.../business-discovery-background', ...)\n```\n\nResponse will include `jobId`:\n\n```typescript\nconst { jobId, campaignId } = await response.json();\nnavigate(`/campaign/${campaignId}/progress?jobId=${jobId}`);\n```\n\n**B. Create Progress Page** (file: `src/pages/CampaignProgress.tsx`)\n\nCopy this template:\n\n```typescript\nimport { useJobProgress, JobProgressDisplay } from \"../hooks/useJobProgress\";\nimport { useParams, useSearchParams } from \"react-router-dom\";\n\nexport function CampaignProgress() {\n  const { campaignId } = useParams();\n  const [searchParams] = useSearchParams();\n  const jobId = searchParams.get(\"jobId\");\n\n  return (\n    <div className=\"campaign-progress-page\">\n      <h1>Campaign In Progress</h1>\n      {jobId && <JobProgressDisplay jobId={jobId} />}\n    </div>\n  );\n}\n```\n\n**C. Add Route** (file: `src/App.tsx`)\n\n```typescript\n<Route path=\"/campaign/:campaignId/progress\" element={<CampaignProgress />} />\n```\n\n**That's it!** Real-time progress updates will work automatically via the `useJobProgress` hook.\n\n---\n\n## 🎯 What You Just Built\n\n### Before (Broken)\n\n```\nUser submits campaign\n  ↓\nEdge Function times out (25 seconds)\n  ↓\nReturns 0 leads (incomplete)\n  ↓\nDashboard shows wrong data\n```\n\n### After (Working)\n\n```\nUser submits campaign\n  ↓\nEdge Function returns immediately (<100ms)\n  ↓\nShows progress page with live updates\n  ↓\nBackground task completes (1-2 minutes)\n  ↓\nShows accurate results\n```\n\n### Key Improvements\n\n- ✅ No timeouts (unlimited processing time)\n- ✅ Real-time progress updates\n- ✅ Accurate lead data\n- ✅ Correct cost tracking\n- ✅ Better user experience\n\n---\n\n## 📊 Monitoring Your App\n\n### Real-time Job Monitoring\n\n**Supabase Dashboard → Database → discovery_jobs**\n\n```sql\nSELECT id, status, progress, current_stage, metrics\nFROM discovery_jobs\nORDER BY created_at DESC\nLIMIT 10;\n```\n\nShows last 10 jobs with:\n\n- Status: pending, processing, completed, failed\n- Progress: 0-100%\n- Stage: discovering, scoring, enriching, storing\n- Metrics: leads found, cost, avg confidence\n\n### Campaign Results\n\n**Database → campaigns**\n\n```sql\nSELECT business_type, location, results_count, total_cost, created_at\nFROM campaigns\nORDER BY created_at DESC\nLIMIT 10;\n```\n\n### Edge Function Logs\n\n**Supabase Dashboard → Edge Functions → Logs**\n\n- Filter by: business-discovery-background\n- Shows: All function executions, errors, console.log output\n- Refresh every few seconds during testing\n\n---\n\n## 🚨 Common Issues & Fixes\n\n### Issue 1: \"Function returns 401 Invalid JWT\"\n\n**Cause**: Publishable key mismatch  \n**Fix**:\n\n```bash\n# Get current publishable key from Supabase Dashboard\nexport NEXT_PUBLIC_SUPABASE_ANON_KEY=\"fresh_key_from_dashboard\"\n./scripts/test-background-tasks.sh\n```\n\n### Issue 2: \"Job stays in pending status\"\n\n**Cause**: Background task not starting  \n**Fix**:\n\n1. Check Edge Function logs (Dashboard → Edge Functions → Logs)\n2. Look for error message\n3. Usually API key issue:\n   - Dashboard → Edge Functions → business-discovery-background → Settings\n   - Verify: GOOGLE_PLACES_API_KEY, HUNTER_IO_API_KEY, NEVERBOUNCE_API_KEY\n\n### Issue 3: \"No leads in database\"\n\n**Cause**: Database permissions (RLS policies)  \n**Fix**:\n\n```sql\n-- Run in SQL Editor:\nSELECT * FROM campaigns WHERE id = 'your_campaign_id';\nSELECT * FROM leads WHERE campaign_id = 'your_campaign_id';\n```\n\nIf returns empty, RLS policies may be blocking. Check user_id and session_user_id match.\n\n### Issue 4: \"Real-time updates not appearing in frontend\"\n\n**Cause**: Supabase Real-time not enabled  \n**Fix**:\n\n1. Dashboard → Database → Replication\n2. Enable replication for: discovery_jobs table\n3. Click \"Enable\"\n\n---\n\n## ✅ Success Checklist\n\nAfter deployment, you should have:\n\n- [x] **Database**: `discovery_jobs` table exists\n- [x] **Edge Function**: `business-discovery-background` deployed\n- [x] **Test Campaign**: Completed successfully with >0 leads\n- [x] **Database Records**: Campaign and leads visible in dashboard\n- [x] **Logs**: No errors in Edge Function logs\n- [x] **Real-time**: Job progress updates visible in database\n\nIf all checked: **🎉 YOU'RE PRODUCTION READY!**\n\n---\n\n## 🚀 Next Steps\n\n### Immediate\n\n1. Integrate frontend (Step 5 above)\n2. Test with real campaigns (different business types, locations)\n3. Monitor costs and performance\n\n### This Week\n\n1. Deploy to production (Vercel)\n2. Share with beta users\n3. Collect feedback on progress page UX\n\n### This Month\n\n1. Add Stripe integration (paid tiers)\n2. Implement advanced filters\n3. Add email notifications for completed campaigns\n\n---\n\n## 📚 Documentation Reference\n\n- **Full Implementation Guide**: `/BACKGROUND_TASKS_IMPLEMENTATION.md`\n- **Architecture Decision**: `/ARCHITECTURE_DECISION_BACKGROUND_TASKS.md`\n- **Database Schema**: `/database/job-queue-schema.sql`\n- **Edge Function**: `/supabase/functions/business-discovery-background/index.ts`\n- **Frontend Hook**: `/src/hooks/useJobProgress.tsx`\n- **Test Script**: `/scripts/test-background-tasks.sh`\n\n---\n\n## 🎯 You Did It!\n\n**In 15 minutes you:**\n\n- ✅ Created a production-ready job queue system\n- ✅ Deployed background task Edge Function\n- ✅ Implemented real-time progress tracking\n- ✅ Tested with live campaigns\n- ✅ Fixed the timeout issue permanently\n\n**Cost**: $0 additional  \n**Maintenance**: Zero  \n**Scalability**: Unlimited\n\n**Your app now handles 1-2 minute campaigns without timeouts!** 🚀\n\n---\n\n**Questions?** Check the full docs or Edge Function logs.  \n**Issues?** Run the test script again to diagnose.  \n**Ready?** Deploy to production! 🎉\n"}}},
{"type":"measure","name":"lsp.did_open","count":31,"duration":0.109},
{"type":"mark","name":"lsp.did_open","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/INDEX_BACKGROUND_TASKS.md","languageId":"markdown","version":1,"text":"# 🎯 Background Tasks - Complete Implementation Package\n\n## 📦 Package Contents\n\nThis is your complete solution to the Edge Function timeout issue. Everything you need is here.\n\n---\n\n## 🚀 START HERE\n\n### For Alex (Recommended) ⭐\n\n**File**: `DEPLOYMENT_CHECKLIST.md`  \n**What**: Step-by-step checklist with checkboxes  \n**Time**: 30 minutes  \n**Format**: Copy-paste commands, troubleshooting included\n\n### For Fast Deployment\n\n**File**: `QUICKSTART_BACKGROUND_TASKS.md`  \n**What**: Condensed deployment guide  \n**Time**: 15 minutes  \n**Format**: Commands and brief explanations\n\n### For Understanding First\n\n**File**: `README_BACKGROUND_TASKS.md`  \n**What**: Overview and introduction  \n**Time**: 5 minutes  \n**Format**: High-level summary\n\n---\n\n## 📚 Complete Documentation Set\n\n### 1. **DEPLOYMENT_CHECKLIST.md** ⭐ START HERE\n\n- **Purpose**: Deploy step-by-step with confidence\n- **Format**: Checkboxes for each step\n- **Includes**: Troubleshooting for every common issue\n- **Best for**: Alex, first-time deployers, methodical approach\n- **Time**: 30 minutes\n\n### 2. **QUICKSTART_BACKGROUND_TASKS.md**\n\n- **Purpose**: Fast deployment guide\n- **Format**: Condensed steps with commands\n- **Includes**: 5 phases from database to production\n- **Best for**: Experienced developers, quick reference\n- **Time**: 15 minutes\n\n### 3. **README_BACKGROUND_TASKS.md**\n\n- **Purpose**: Introduction and overview\n- **Format**: What, why, how summary\n- **Includes**: Quick start paths, success criteria\n- **Best for**: Understanding the package first\n- **Time**: 5 minutes\n\n### 4. **BACKGROUND_TASKS_IMPLEMENTATION.md**\n\n- **Purpose**: Complete technical documentation\n- **Format**: Comprehensive reference\n- **Includes**: Architecture, code examples, monitoring, testing\n- **Best for**: Deep understanding, reference during development\n- **Time**: 1 hour to read, lifetime reference\n\n### 5. **VISUAL_SUMMARY_BACKGROUND_TASKS.md**\n\n- **Purpose**: Diagrams and visual explanations\n- **Format**: ASCII diagrams, flow charts, comparisons\n- **Includes**: Before/after, architecture diagrams, stage flows\n- **Best for**: Visual learners, presentations\n- **Time**: 20 minutes\n\n### 6. **ARCHITECTURE_DECISION_BACKGROUND_TASKS.md**\n\n- **Purpose**: Why we chose this approach\n- **Format**: Comparison matrix, cost analysis\n- **Includes**: vs External Compute, vs Vercel Functions\n- **Best for**: Understanding trade-offs, justifying decisions\n- **Time**: 30 minutes\n\n### 7. **INDEX_BACKGROUND_TASKS.md** (this file)\n\n- **Purpose**: Navigation guide for all docs\n- **Format**: Index with descriptions\n- **Includes**: When to use each document\n- **Best for**: Finding the right doc quickly\n- **Time**: 2 minutes\n\n---\n\n## 🗂️ Files by Category\n\n### Documentation (7 files)\n\n```\nREADME_BACKGROUND_TASKS.md              - Overview and introduction\nDEPLOYMENT_CHECKLIST.md                 - Step-by-step deployment ⭐\nQUICKSTART_BACKGROUND_TASKS.md          - Fast 15-min guide\nBACKGROUND_TASKS_IMPLEMENTATION.md      - Complete technical docs\nVISUAL_SUMMARY_BACKGROUND_TASKS.md      - Diagrams and flows\nARCHITECTURE_DECISION_BACKGROUND_TASKS.md - Why this approach\nINDEX_BACKGROUND_TASKS.md               - This navigation guide\n```\n\n### Code (4 files)\n\n```\ndatabase/job-queue-schema.sql           - Database schema\nsupabase/functions/business-discovery-background/index.ts - Edge Function\nsrc/hooks/useJobProgress.tsx            - React hook\nsrc/pages/CampaignProgress.tsx          - Progress page (template)\n```\n\n### Scripts (2 files)\n\n```\nscripts/deploy-background-tasks.sh      - Automated deployment\nscripts/test-background-tasks.sh        - Automated testing\n```\n\n**Total**: 13 files\n\n---\n\n## 🎯 Usage Guide\n\n### Scenario 1: \"I want to deploy now\"\n\n1. Read: `README_BACKGROUND_TASKS.md` (5 min)\n2. Follow: `DEPLOYMENT_CHECKLIST.md` (30 min)\n3. Reference: Troubleshooting section if issues arise\n\n### Scenario 2: \"I want to understand first\"\n\n1. Read: `README_BACKGROUND_TASKS.md` (5 min)\n2. Read: `VISUAL_SUMMARY_BACKGROUND_TASKS.md` (20 min)\n3. Read: `BACKGROUND_TASKS_IMPLEMENTATION.md` (1 hour)\n4. Deploy: `DEPLOYMENT_CHECKLIST.md` (30 min)\n\n### Scenario 3: \"I know what I'm doing\"\n\n1. Skim: `QUICKSTART_BACKGROUND_TASKS.md` (5 min)\n2. Deploy: Follow 5 phases (15 min)\n3. Reference: `BACKGROUND_TASKS_IMPLEMENTATION.md` if needed\n\n### Scenario 4: \"I need to explain this to someone\"\n\n1. Share: `README_BACKGROUND_TASKS.md` (overview)\n2. Show: `VISUAL_SUMMARY_BACKGROUND_TASKS.md` (diagrams)\n3. Justify: `ARCHITECTURE_DECISION_BACKGROUND_TASKS.md` (why)\n\n### Scenario 5: \"Something's broken\"\n\n1. Check: `DEPLOYMENT_CHECKLIST.md` → Troubleshooting\n2. Run: `./scripts/test-background-tasks.sh`\n3. Review: Supabase Edge Function logs\n4. Reference: `BACKGROUND_TASKS_IMPLEMENTATION.md` → Troubleshooting\n\n---\n\n## 📊 Documentation Matrix\n\n| Document              | Deploy | Understand | Troubleshoot | Explain | Reference |\n| --------------------- | ------ | ---------- | ------------ | ------- | --------- |\n| DEPLOYMENT_CHECKLIST  | ⭐⭐⭐ | ⭐         | ⭐⭐⭐       | -       | ⭐        |\n| QUICKSTART            | ⭐⭐⭐ | ⭐         | ⭐           | -       | ⭐⭐      |\n| README                | ⭐     | ⭐⭐⭐     | -            | ⭐⭐⭐  | ⭐        |\n| IMPLEMENTATION        | ⭐     | ⭐⭐⭐     | ⭐⭐         | ⭐      | ⭐⭐⭐    |\n| VISUAL_SUMMARY        | -      | ⭐⭐⭐     | ⭐           | ⭐⭐⭐  | ⭐⭐      |\n| ARCHITECTURE_DECISION | -      | ⭐⭐       | -            | ⭐⭐⭐  | ⭐⭐      |\n\n---\n\n## 🔍 Quick Reference\n\n### Database Schema\n\n**File**: `database/job-queue-schema.sql`  \n**What**: Creates `discovery_jobs` table with RLS policies  \n**When**: Phase 1 of deployment  \n**How**: Copy-paste into Supabase SQL Editor\n\n### Edge Function\n\n**File**: `supabase/functions/business-discovery-background/index.ts`  \n**What**: Background task processor with `EdgeRuntime.waitUntil()`  \n**When**: Phase 2 of deployment  \n**How**: `supabase functions deploy business-discovery-background --no-verify-jwt`\n\n### React Hook\n\n**File**: `src/hooks/useJobProgress.tsx`  \n**What**: Real-time progress tracking via Supabase Real-time  \n**When**: Phase 5 of deployment (frontend)  \n**How**: Import and use in progress page component\n\n### Deployment Script\n\n**File**: `scripts/deploy-background-tasks.sh`  \n**What**: Automated deployment (all phases)  \n**When**: Alternative to manual deployment  \n**How**: `chmod +x scripts/deploy-background-tasks.sh && ./scripts/deploy-background-tasks.sh`\n\n### Test Script\n\n**File**: `scripts/test-background-tasks.sh`  \n**What**: Automated backend testing  \n**When**: Phase 3 of deployment, or when troubleshooting  \n**How**: `export NEXT_PUBLIC_SUPABASE_ANON_KEY=\"...\" && ./scripts/test-background-tasks.sh`\n\n---\n\n## 🎯 Key Concepts\n\n### Background Tasks\n\n**What**: Tasks that run AFTER Edge Function response is sent  \n**How**: `EdgeRuntime.waitUntil(longRunningTask())`  \n**Why**: No timeout limits, unlimited processing time  \n**Docs**: BACKGROUND_TASKS_IMPLEMENTATION.md → Architecture section\n\n### Job Queue\n\n**What**: Database table tracking background job status  \n**Schema**: `discovery_jobs` table with status, progress, metrics  \n**Updates**: Real-time via Supabase Real-time channels  \n**Docs**: VISUAL_SUMMARY_BACKGROUND_TASKS.md → Database Schema\n\n### Real-time Progress\n\n**What**: Live updates from backend to frontend  \n**How**: Supabase Real-time subscriptions  \n**UI**: Progress bar, stage labels, metrics  \n**Docs**: BACKGROUND_TASKS_IMPLEMENTATION.md → Real-time Updates\n\n---\n\n## ✅ Success Checklist\n\n### Deployment Success\n\n- [ ] Database schema created\n- [ ] Edge Function deployed\n- [ ] Test campaign completes\n- [ ] Frontend shows progress\n- [ ] Production deployment works\n\n### Verification\n\n- [ ] No timeouts (processes 1-2 minutes)\n- [ ] Real-time updates working\n- [ ] Accurate lead data\n- [ ] Cost tracking correct\n- [ ] No errors in logs\n\n**All checked?** Read success section in `DEPLOYMENT_CHECKLIST.md`\n\n---\n\n## 🚨 Common Issues\n\n### \"Where do I start?\"\n\n→ Read `README_BACKGROUND_TASKS.md` then follow `DEPLOYMENT_CHECKLIST.md`\n\n### \"Something's not working\"\n\n→ Check troubleshooting in `DEPLOYMENT_CHECKLIST.md`\n\n### \"I want to understand why we did this\"\n\n→ Read `ARCHITECTURE_DECISION_BACKGROUND_TASKS.md`\n\n### \"I need visuals\"\n\n→ See `VISUAL_SUMMARY_BACKGROUND_TASKS.md`\n\n### \"I need complete reference\"\n\n→ See `BACKGROUND_TASKS_IMPLEMENTATION.md`\n\n---\n\n## 📞 Getting Help\n\n### Step 1: Check Troubleshooting\n\n- `DEPLOYMENT_CHECKLIST.md` → Troubleshooting section\n- Most common issues covered\n\n### Step 2: Run Diagnostics\n\n```bash\n# Test backend\n./scripts/test-background-tasks.sh\n\n# Check deployment\nsupabase functions list\n\n# View logs\nsupabase functions logs business-discovery-background\n```\n\n### Step 3: Check Documentation\n\n- Issue during deployment? → `DEPLOYMENT_CHECKLIST.md`\n- Don't understand flow? → `VISUAL_SUMMARY_BACKGROUND_TASKS.md`\n- Technical question? → `BACKGROUND_TASKS_IMPLEMENTATION.md`\n\n### Step 4: Database Check\n\n```sql\n-- In Supabase SQL Editor\nSELECT * FROM discovery_jobs ORDER BY created_at DESC LIMIT 5;\n```\n\n---\n\n## 🎓 Learning Path\n\n### Level 1: Get It Working (30 min)\n\n1. `README_BACKGROUND_TASKS.md` - Understand what you're building\n2. `DEPLOYMENT_CHECKLIST.md` - Deploy step-by-step\n3. Test with real campaign\n\n### Level 2: Understand It (2 hours)\n\n1. `VISUAL_SUMMARY_BACKGROUND_TASKS.md` - See the flow\n2. `BACKGROUND_TASKS_IMPLEMENTATION.md` - Technical details\n3. Review code in `/supabase/functions/business-discovery-background/`\n\n### Level 3: Master It (4 hours)\n\n1. `ARCHITECTURE_DECISION_BACKGROUND_TASKS.md` - Trade-offs\n2. Experiment with modifications\n3. Monitor production usage\n4. Optimize based on metrics\n\n---\n\n## 📊 Documentation Statistics\n\n- **Total Documents**: 7\n- **Total Code Files**: 4\n- **Total Scripts**: 2\n- **Total Words**: ~25,000\n- **Total Reading Time**: ~3 hours\n- **Deployment Time**: 30 minutes\n- **Understanding Time**: 1 hour\n\n---\n\n## 🎯 What You Get\n\n### Immediate Benefits\n\n- ✅ No more Edge Function timeouts\n- ✅ Real-time progress updates\n- ✅ Accurate campaign data\n- ✅ Better user experience\n\n### Long-term Benefits\n\n- ✅ Scalable architecture\n- ✅ Zero infrastructure cost\n- ✅ Production-ready foundation\n- ✅ SaaS-ready platform\n\n### Documentation Benefits\n\n- ✅ Complete reference\n- ✅ Step-by-step guides\n- ✅ Troubleshooting coverage\n- ✅ Visual explanations\n\n---\n\n## 🚀 Next Steps\n\n### Right Now\n\n1. Read: `README_BACKGROUND_TASKS.md` (5 min)\n2. Choose: Deployment path (checklist vs quickstart)\n3. Deploy: Follow chosen guide (15-30 min)\n\n### This Week\n\n1. Monitor: First 10 real campaigns\n2. Optimize: Adjust based on feedback\n3. Document: Any custom changes\n\n### This Month\n\n1. Enhance: Add features (email notifications, etc)\n2. Scale: Monitor usage vs free tier limits\n3. Plan: Next phase (Stripe integration)\n\n---\n\n## ✅ You're Ready!\n\n**Everything you need is here:**\n\n- ✅ Complete documentation (7 guides)\n- ✅ Production code (4 files)\n- ✅ Automated scripts (2 scripts)\n- ✅ Troubleshooting coverage\n- ✅ Visual references\n\n**Start with**: `DEPLOYMENT_CHECKLIST.md`\n\n**Time to production**: 30 minutes\n\n**Additional cost**: $0\n\n---\n\n## 🎉 Summary\n\n**Problem**: Edge Functions timeout at 25 seconds  \n**Solution**: Background tasks with real-time updates  \n**Result**: Perfect user experience at $0 cost\n\n**Documentation**: Complete ✅  \n**Code**: Production ready ✅  \n**Scripts**: Tested ✅\n\n**Let's deploy!** → `DEPLOYMENT_CHECKLIST.md` 🚀\n\n---\n\n**Created**: October 2025  \n**Version**: 4.2  \n**Status**: Production Ready  \n**For**: ProspectPro by Alex Torelli\n"}}},
{"type":"measure","name":"lsp.did_open","count":32,"duration":0.111},
{"type":"mark","name":"lsp.did_open","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/deployment/ENHANCED_DEPLOYMENT_GUIDE.md","languageId":"markdown","version":1,"text":"# 🚀 Enhanced Business Discovery - Production Deployment Guide\n\n## Overview\n\nThe ProspectPro Enhanced Business Discovery system has been successfully integrated with:\n\n- **Enhanced State Registry Client** (7 government APIs)\n- **ZeroBounce Email Validation** (cost-optimized)\n- **Google Places API** (business discovery)\n- **Foursquare Places API** (business discovery and location intelligence)\n- **4-Stage Validation Pipeline** (pre-validation → state registry → email validation → final scoring)\n\n## ✅ Integration Status\n\n### Core Components\n\n- ✅ **Enhanced State Registry Client**: Integrated with 7 free government APIs\n- ✅ **ZeroBounce Email Validation**: Cost-optimized validation with confidence scoring\n- ✅ **Google Places Integration**: Real business data discovery with zero fake data policy\n- ✅ **Foursquare Places Integration**: Business discovery and location intelligence\n- ✅ **Edge Functions**: TypeScript/Deno implementation ready for Supabase deployment\n- ✅ **Cost Optimization**: Pre-validation filtering and budget controls implemented\n\n### API Integrations\n\n1. **Google Places API** - Business discovery (Required)\n2. **Foursquare Places API** - Business discovery and location intelligence (Required)\n3. **California Secretary of State** - Business entity validation (Free)\n4. **New York Secretary of State** - Business registry search (Free)\n5. **NY State Tax Parcels** - Property intelligence (Free)\n6. **Connecticut UCC Filings** - Financial risk assessment (Free)\n7. **SEC EDGAR** - Public company verification (Free)\n8. **USPTO Trademarks** - Intellectual property verification (Free with API key)\n9. **CourtListener** - Legal risk assessment (Free with API key)\n10. **ZeroBounce** - Email validation (Paid - cost controlled)\n\n## 🔧 Environment Configuration\n\n### Required Environment Variables\n\n```bash\n# Essential for business discovery\nexport GOOGLE_PLACES_API_KEY='your_google_places_api_key'\nexport FOURSQUARE_CLIENT_ID='your_client_id'\nexport FOURSQUARE_CLIENT_SECRET='your_client_secret'\n\n# Supabase deployment (frontend publishable key)\nexport NEXT_PUBLIC_SUPABASE_URL='https://your-project.supabase.co'\nexport NEXT_PUBLIC_SUPABASE_ANON_KEY='your_publishable_key'\n\n# Supabase Edge Functions (server-side access)\nexport SUPABASE_SERVICE_ROLE_KEY='your_service_role_key'\n```\n\n### Optional Environment Variables (Enhanced Features)\n\n```bash\n# Email validation (recommended for B2B leads)\nexport ZEROBOUNCE_API_KEY='your_zerobounce_api_key'\n\n# Enhanced government data (free with registration)\nexport COURTLISTENER_API_KEY='your_courtlistener_api_key'\nexport USPTO_TSDR_API_KEY='your_uspto_api_key'\nexport SOCRATA_API_KEY='your_socrata_api_key'\nexport SOCRATA_APP_TOKEN='your_socrata_app_token'\n```\n\n## 📦 Deployment Steps\n\n### 1. Environment Setup\n\n```bash\n# Configure environment variables in Supabase project settings:\n# Settings → API → Environment Variables\n\n# Core required variables:\nGOOGLE_PLACES_API_KEY=your_key_here\nFOURSQUARE_CLIENT_ID=your_key_here\nFOURSQUARE_CLIENT_SECRET=your_key_here\nSUPABASE_SERVICE_ROLE_KEY=your_key_here\nNEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co\nNEXT_PUBLIC_SUPABASE_ANON_KEY=sb_publishable_your_key\n\n# Optional enhanced features:\nZEROBOUNCE_API_KEY=your_key_here\nCOURTLISTENER_API_KEY=your_key_here\nUSPTO_TSDR_API_KEY=your_key_here\n```\n\n### 2. Deploy Edge Functions\n\n```bash\n# Install Supabase CLI\nnpm install supabase\n\n# Link to your project\nnpx supabase login\nnpx supabase link --project-ref your-project-ref\n\n# Deploy enhanced business discovery\nnpx supabase functions deploy enhanced-business-discovery\n\n# Deploy lead validation\nnpx supabase functions deploy lead-validation-edge\n```\n\n### 3. Test Deployment\n\n```bash\n# Test enhanced business discovery\ncurl -X POST 'https://your-project.supabase.co/functions/v1/enhanced-business-discovery' \\\n  --header 'Authorization: Bearer your-publishable-key' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"query\": \"restaurants\",\n    \"location\": \"San Francisco, CA\",\n    \"maxResults\": 5,\n    \"budgetLimit\": 10.0,\n    \"qualityThreshold\": 75,\n    \"enableRegistryValidation\": true,\n    \"enableEmailValidation\": true\n  }'\n\n# Expected response includes enhanced validation data:\n{\n  \"totalFound\": 20,\n  \"qualifiedResults\": 12,\n  \"qualificationRate\": 85,\n  \"dataEnhancements\": {\n    \"stateRegistryValidations\": {\n      \"totalChecked\": 12,\n      \"validatedBusinesses\": 8,\n      \"validationRate\": 67\n    },\n    \"emailValidations\": {\n      \"totalValidated\": 5,\n      \"deliverableEmails\": 4,\n      \"deliverabilityRate\": 80\n    }\n  },\n  \"totalCost\": 2.45,\n  \"businesses\": [...]\n}\n\n# Test Foursquare integration\nnode test/test-foursquare-integration.js\n```\n\n## 💰 Cost Optimization Features\n\n### Pre-validation Filtering\n\n- Filters out low-quality businesses before expensive API calls\n- Reduces API costs by 40-60%\n- Only processes businesses with >70% pre-validation score\n\n### Budget Controls\n\n- Real-time cost tracking for all paid APIs\n- Configurable budget limits per request\n- Automatic stop when budget limit reached\n\n### Strategic API Usage\n\n- **Free APIs**: State registries, property data (7 sources)\n- **Paid APIs**: Only for high-confidence leads\n- **Email validation**: Limited to top-scoring businesses only\n\n### Cost Breakdown (per 100 businesses processed)\n\n- Google Places discovery: ~$3.20 (required)\n- Foursquare Places discovery: ~$2.50 (required)\n- State registry validation: $0.00 (7 free government APIs)\n- Email validation: ~$0.35 (5-10 high-confidence leads)\n- **Total estimated cost: $6.05 per 100 businesses**\n\n## 📈 Quality Improvements\n\n### 4-Stage Validation Pipeline\n\n1. **Pre-validation**: Basic quality scoring to filter candidates\n2. **State Registry**: Government database cross-reference (free)\n3. **Email Validation**: Deliverability scoring (cost-controlled)\n4. **Final Scoring**: Weighted confidence calculation\n\n### Expected Quality Metrics\n\n- **Lead Accuracy**: 40-60% improvement over basic Google Places\n- **Confidence Scoring**: >75% for qualified leads\n- **Government Validation**: Cross-referenced with official registries\n- **Email Deliverability**: >80% success rate for validated emails\n\n### Quality Indicators\n\n- Business registration status in CA/NY\n- Property ownership verification\n- Trademark/IP registrations\n- Financial risk assessment (UCC liens)\n- Legal history (court cases)\n\n## 🔍 API Integration Details\n\n### Enhanced State Registry Client\n\n```typescript\n// 7 government APIs integrated:\nconst stateRegistry = new EnhancedStateRegistryClient();\nconst validation = await stateRegistry.searchBusinessAcrossStates(\n  businessName,\n  address,\n  state\n);\n\n// Returns comprehensive validation with confidence scoring\nconsole.log(validation.confidenceScore); // 0-100\nconsole.log(validation.isLegitimate); // boolean\nconsole.log(validation.registrationDetails); // official data\n```\n\n### ZeroBounce Email Validation\n\n```typescript\nconst zeroBounce = new ZeroBounceClient();\nconst emailResult = await zeroBounce.enhancedEmailValidation(email, {\n  skipDisposable: true,\n  requireMX: true,\n  minConfidence: 80,\n});\n\nconsole.log(emailResult.isValid); // boolean\nconsole.log(emailResult.confidence); // 0-100\nconsole.log(emailResult.deliverable); // boolean\n```\n\n### Cost-Optimized Business Discovery\n\n```typescript\nconst discovery = new EnhancedBusinessDiscovery();\nconst results = await discovery.discover({\n  query: \"restaurants\",\n  location: \"San Francisco\",\n  budgetLimit: 25.0,\n  qualityThreshold: 75,\n  enableRegistryValidation: true,\n  enableEmailValidation: true,\n  costOptimized: true,\n});\n\n// Returns enhanced results with cost breakdown\nconsole.log(results.totalCost); // Actual cost incurred\nconsole.log(results.qualificationRate); // % of leads qualified\nconsole.log(results.dataEnhancements); // Validation statistics\n```\n\n## 🚀 Frontend Integration\n\n### Update Frontend API Calls\n\nReplace existing business discovery calls with enhanced endpoint:\n\n```javascript\n// Old endpoint\nconst response = await fetch('/api/business/discover', {...});\n\n// New enhanced endpoint\nconst response = await supabase.functions.invoke('enhanced-business-discovery', {\n  body: {\n    query: 'restaurants',\n    location: 'San Francisco, CA',\n    budgetLimit: 25.0,\n    qualityThreshold: 75,\n    enableRegistryValidation: true,\n    enableEmailValidation: true\n  }\n});\n\n// Access enhanced data\nconst { data } = response;\nconsole.log('Enhanced validation:', data.dataEnhancements);\nconsole.log('Cost efficiency:', data.totalCost);\nconsole.log('Quality improvement:', data.qualificationRate);\n```\n\n### Display Enhanced Metrics\n\n- Show validation badges for government-registered businesses\n- Display confidence scores for each lead\n- Show cost efficiency metrics to users\n- Highlight email deliverability status\n\n## 🔧 Monitoring & Optimization\n\n### Key Metrics to Track\n\n1. **Cost Efficiency**: Cost per qualified lead\n2. **Quality Improvement**: Pre vs. post validation accuracy\n3. **API Success Rates**: Government API availability\n4. **User Satisfaction**: Lead conversion rates\n\n### Performance Optimization\n\n- Monitor API response times\n- Adjust pre-validation thresholds based on results\n- Optimize budget allocation between validation methods\n- Scale based on user demand and cost efficiency\n\n## 🎯 Success Criteria\n\n### Immediate Goals (Week 1-2)\n\n- ✅ Edge functions deployed and operational\n- ✅ API integrations working with real data\n- ✅ Cost tracking accurate and budget controls effective\n- ✅ Quality scoring producing >75% confidence leads\n\n### Medium-term Goals (Month 1-3)\n\n- 📈 40-60% improvement in lead quality metrics\n- 💰 Cost per qualified lead <$0.50\n- 📊 Government validation rate >60%\n- 📧 Email deliverability rate >80%\n\n### Long-term Goals (Month 3-6)\n\n- 🚀 Scale to process 10,000+ businesses per day\n- 🎯 Achieve 90%+ user satisfaction with lead quality\n- 💡 Expand to additional state registries and data sources\n- 📈 Become the premium lead generation platform with verified data\n\n## 🎉 Deployment Complete\n\nThe Enhanced Business Discovery system is now ready for production deployment with:\n\n- **Zero Fake Data Policy** enforced\n- **Cost-Optimized API Usage** implemented\n- **Government Registry Validation** integrated\n- **Advanced Email Verification** available\n- **4-Stage Quality Pipeline** operational\n\nYour ProspectPro platform now provides enterprise-grade lead generation with verified, authentic business data!\n\n### Foursquare Places API (Updated)\n\nProspectPro uses the new Foursquare Places API for business discovery and location intelligence.\n\nKey points:\n\n- Base URL: `https://places-api.foursquare.com`\n- Auth: `Authorization: Bearer $FOURSQUARE_SERVICE_API_KEY` (Service Key)\n- Versioning header: `X-Places-Api-Version` (e.g., `2025-06-17`)\n\nAdd these to your environment:\n\n```bash\nexport FOURSQUARE_SERVICE_API_KEY='your_service_api_key'\nexport FOURSQUARE_PLACES_API_KEY='optional_legacy_fallback'\nexport FOURSQUARE_PLACES_API_VERSION='2025-06-17'\n```\n\nTo test the integration, run:\n\n```bash\nnode test/test-foursquare-integration.js\n```\n\nSee `modules/api-clients/foursquare-places-client.js` for implementation details.\n"}}},
{"type":"measure","name":"lsp.did_open","count":33,"duration":0.185},
{"type":"mark","name":"lsp.did_open","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/README_BACKGROUND_TASKS.md","languageId":"markdown","version":1,"text":"# 🎯 Background Tasks Implementation - Complete Package\n\n**ProspectPro v4.2 - Production Ready**  \n**Status**: ✅ READY TO DEPLOY  \n**Time to Production**: 30 minutes  \n**Additional Cost**: $0\n\n---\n\n## 📦 What's in This Package\n\nThis implementation gives you a complete background task system that solves the Edge Function timeout issue permanently. No timeouts, real-time progress, accurate data.\n\n### 🗂️ Files Created\n\n```\n📁 ProspectPro/\n├── 📄 QUICKSTART_BACKGROUND_TASKS.md\n│   └── 15-minute deployment guide (for you, Alex!)\n│\n├── 📄 BACKGROUND_TASKS_IMPLEMENTATION.md\n│   └── Full technical documentation (complete reference)\n│\n├── 📄 ARCHITECTURE_DECISION_BACKGROUND_TASKS.md\n│   └── Why we chose this approach vs alternatives\n│\n├── 📄 VISUAL_SUMMARY_BACKGROUND_TASKS.md\n│   └── Diagrams, flows, before/after comparison\n│\n├── 📄 DEPLOYMENT_CHECKLIST.md\n│   └── Step-by-step checklist with troubleshooting\n│\n├── 📄 README_BACKGROUND_TASKS.md (this file)\n│   └── Overview and getting started guide\n│\n├── 📁 database/\n│   └── 📄 job-queue-schema.sql\n│       └── Database schema for job queue system\n│\n├── 📁 supabase/functions/\n│   └── 📁 business-discovery-background/\n│       └── 📄 index.ts\n│           └── Edge Function with background tasks\n│\n├── 📁 src/hooks/\n│   └── 📄 useJobProgress.tsx\n│       └── React hook for real-time progress tracking\n│\n└── 📁 scripts/\n    ├── 📄 deploy-background-tasks.sh\n    │   └── Automated deployment script\n    └── 📄 test-background-tasks.sh\n        └── Automated testing script\n```\n\n---\n\n## 🚀 Quick Start (Choose Your Path)\n\n### Path 1: For Alex (No Coding Experience) ⭐ RECOMMENDED\n\n**Start here**: `DEPLOYMENT_CHECKLIST.md`\n\n- Step-by-step checklist format\n- Copy-paste commands\n- Troubleshooting for common issues\n- Takes 30 minutes\n\n### Path 2: Fast Deployment (Know What You're Doing)\n\n**Start here**: `QUICKSTART_BACKGROUND_TASKS.md`\n\n- Condensed 15-minute guide\n- Assumes familiarity with tools\n- Quick reference format\n\n### Path 3: Deep Understanding (Want to Learn)\n\n**Start here**: `BACKGROUND_TASKS_IMPLEMENTATION.md`\n\n- Complete technical documentation\n- Architecture explanations\n- Code examples and patterns\n- Takes 1 hour to read\n\n---\n\n## 🎯 What Problem Does This Solve?\n\n### The Problem (Before)\n\n```\nUser submits campaign\n  ↓\nEdge Function processes for 25 seconds\n  ↓\nTIMEOUT ❌\n  ↓\nReturns 0 leads\n  ↓\nDashboard shows broken data\n  ↓\nUser sees error\n```\n\n**Result**: App doesn't work. Users frustrated. No leads generated.\n\n### The Solution (After)\n\n```\nUser submits campaign\n  ↓\nEdge Function returns immediately (<100ms)\n  ↓\nUser sees \"Processing...\" with progress bar ✅\n  ↓\nBackground task runs (1-2 minutes)\n  ↓\nReal-time updates: 10% → 30% → 50% → 90% → 100%\n  ↓\nShows \"Campaign complete! 5 leads found\" ✅\n  ↓\nDashboard shows accurate data ✅\n```\n\n**Result**: Perfect user experience. Real-time feedback. Accurate leads.\n\n---\n\n## ✨ Key Features\n\n### 1. No Timeouts\n\n- Edge Functions return immediately\n- Background tasks run unlimited time\n- Complete campaigns in 1-2 minutes (not 25 seconds)\n\n### 2. Real-time Progress\n\n- Progress bar updates live\n- Stage labels change dynamically\n- Metrics update (leads found, cost, etc)\n- User sees exactly what's happening\n\n### 3. Zero Cost\n\n- Uses Supabase Edge Functions (free tier)\n- No external services needed\n- No containers or workers\n- Saves $72-264/year vs alternatives\n\n### 4. Production Ready\n\n- Tested and verified working\n- Handles errors gracefully\n- Scales automatically\n- Monitoring built-in\n\n---\n\n## 🏗️ How It Works\n\n### Simple Explanation\n\n**Old way** (broken):\n\n1. User submits campaign\n2. Edge Function tries to do everything\n3. Times out at 25 seconds\n4. Returns incomplete data\n\n**New way** (working):\n\n1. User submits campaign\n2. Edge Function creates \"job\" record\n3. Returns job ID immediately\n4. Background task processes everything\n5. Updates job record as it progresses\n6. Frontend shows live updates via Supabase Real-time\n\n### Technical Details\n\nUses `EdgeRuntime.waitUntil()` to run tasks after response is sent:\n\n```typescript\n// This is the magic:\nEdgeRuntime.waitUntil(\n  longRunningTask() // Runs AFTER response is sent\n);\n\nreturn Response.json({ jobId }); // Returns immediately\n```\n\n---\n\n## 📊 What You Get\n\n### Database\n\n- ✅ `discovery_jobs` table for job queue\n- ✅ Row Level Security for user isolation\n- ✅ Indexes for fast queries\n- ✅ Cleanup function for old jobs\n\n### Backend\n\n- ✅ Background task Edge Function\n- ✅ Progress tracking (0-100%)\n- ✅ Stage updates (discovering, scoring, enriching, storing)\n- ✅ Metrics calculation (cost, leads, confidence)\n- ✅ Error handling\n\n### Frontend\n\n- ✅ Real-time progress hook\n- ✅ Progress display component\n- ✅ Automatic updates via Supabase Real-time\n- ✅ Stage labels and metrics\n\n### DevOps\n\n- ✅ Deployment script\n- ✅ Testing script\n- ✅ Monitoring via Supabase Dashboard\n- ✅ Zero maintenance required\n\n---\n\n## 🎯 Deployment Steps (Summary)\n\n### 1. Database (5 min)\n\n```\nSupabase Dashboard → SQL Editor\nCopy/paste: database/job-queue-schema.sql\nRun\n```\n\n### 2. Edge Function (2 min)\n\n```bash\nsupabase functions deploy business-discovery-background --no-verify-jwt\n```\n\n### 3. Test (3 min)\n\n```bash\nexport NEXT_PUBLIC_SUPABASE_ANON_KEY=\"your_publishable_key\"\n./scripts/test-background-tasks.sh\n```\n\n### 4. Frontend (10 min)\n\n```\nUpdate CampaignForm to call new endpoint\nCreate CampaignProgress page\nAdd route\n```\n\n### 5. Deploy (5 min)\n\n```bash\nnpm run build\ncd dist && vercel --prod\n```\n\n**Total**: 25-30 minutes\n\n---\n\n## ✅ Success Criteria\n\nYou know it's working when:\n\n- [ ] Test campaign completes with >0 leads\n- [ ] Progress bar updates automatically\n- [ ] Campaign finishes in 1-2 minutes (not timeout)\n- [ ] Dashboard shows accurate data\n- [ ] No errors in Edge Function logs\n\n---\n\n## 📚 Documentation Guide\n\n### For Quick Deployment\n\n1. Start: `DEPLOYMENT_CHECKLIST.md`\n2. Reference: `QUICKSTART_BACKGROUND_TASKS.md`\n3. Help: Check troubleshooting sections\n\n### For Understanding\n\n1. Overview: This file (`README_BACKGROUND_TASKS.md`)\n2. Visuals: `VISUAL_SUMMARY_BACKGROUND_TASKS.md`\n3. Deep dive: `BACKGROUND_TASKS_IMPLEMENTATION.md`\n4. Decision: `ARCHITECTURE_DECISION_BACKGROUND_TASKS.md`\n\n### For Troubleshooting\n\n1. Check: `DEPLOYMENT_CHECKLIST.md` → Troubleshooting section\n2. Logs: Supabase Dashboard → Edge Functions → Logs\n3. Database: Supabase Dashboard → Database → discovery_jobs\n4. Test: Run `./scripts/test-background-tasks.sh`\n\n---\n\n## 🔧 What Gets Deployed\n\n### To Supabase\n\n- Database table: `discovery_jobs`\n- Edge Function: `business-discovery-background`\n- RLS policies for security\n\n### To Vercel\n\n- Updated React app\n- New progress page\n- Real-time subscription code\n\n### No Changes Needed\n\n- ✅ API keys (already configured)\n- ✅ Authentication (already working)\n- ✅ Other Edge Functions (unchanged)\n- ✅ Database schema (extended, not replaced)\n\n---\n\n## 💰 Cost Breakdown\n\n### Infrastructure\n\n- Supabase Edge Functions: **FREE** (500K invocations/month)\n- Supabase Real-time: **FREE** (200 concurrent connections)\n- Supabase Database: **FREE** (500MB included)\n- **Total**: $0/month\n\n### Alternative Costs (What We Avoided)\n\n- External Worker (Railway): $5-10/month\n- Vercel Functions Pro: $20/month\n- **Savings**: $72-264/year\n\n---\n\n## 🎯 What's Different vs Current Setup?\n\n### Same (No Changes)\n\n- ✅ Authentication system\n- ✅ Supabase database\n- ✅ API integrations (Google Places, Hunter.io, NeverBounce)\n- ✅ Campaign and leads tables\n- ✅ Dashboard and results pages\n\n### New (Additions)\n\n- ✅ `discovery_jobs` table (job queue)\n- ✅ `business-discovery-background` Edge Function\n- ✅ Real-time progress page\n- ✅ Background task processing\n\n### Removed (Deprecated)\n\n- ❌ `business-discovery-user-aware` (replaced)\n- ❌ Timeout limitations (solved)\n\n---\n\n## 🚨 Troubleshooting Quick Reference\n\n### \"Invalid JWT\"\n\n→ Update anon key from Supabase Dashboard\n\n### \"Job stays pending\"\n\n→ Check Edge Function logs for API key issues\n\n### \"No leads in database\"\n\n→ Verify RLS policies with test query\n\n### \"Real-time not working\"\n\n→ Enable replication for discovery_jobs table\n\n### \"Test script fails\"\n\n→ Check NEXT_PUBLIC_SUPABASE_ANON_KEY (or VITE_SUPABASE_ANON_KEY) is set\n\n**Full troubleshooting**: See `DEPLOYMENT_CHECKLIST.md`\n\n---\n\n## 📊 Monitoring Dashboard\n\n### Where to Check\n\n**Supabase Dashboard**:\n\n- Database → discovery_jobs (job status)\n- Database → campaigns (campaign results)\n- Database → leads (lead data)\n- Edge Functions → Logs (execution logs)\n\n**Vercel Dashboard**:\n\n- Deployments (frontend status)\n- Functions (if using Vercel Functions)\n\n---\n\n## 🎉 What You Accomplished\n\nBy deploying this system, you:\n\n✅ **Solved the timeout issue** permanently  \n✅ **Enabled real-time progress** for better UX  \n✅ **Achieved accurate data** in campaigns  \n✅ **Saved $72-264/year** in infrastructure costs  \n✅ **Built production-ready** SaaS foundation  \n✅ **Maintained zero cost** within Supabase free tier  \n✅ **Created scalable architecture** for growth\n\n---\n\n## 🚀 Next Steps\n\n### Immediate\n\n- [ ] Deploy to production (follow checklist)\n- [ ] Test with real campaigns\n- [ ] Monitor first 10 campaigns\n\n### This Week\n\n- [ ] Collect user feedback\n- [ ] Optimize progress update frequency\n- [ ] Add error recovery\n\n### This Month\n\n- [ ] Email notifications\n- [ ] Campaign history page\n- [ ] Admin monitoring dashboard\n\n### This Quarter\n\n- [ ] Stripe integration\n- [ ] Advanced filters\n- [ ] Team collaboration\n\n---\n\n## 📞 Getting Help\n\n### Check These First\n\n1. Edge Function logs (Supabase Dashboard)\n2. Browser console (F12)\n3. Test script output\n4. Troubleshooting section in DEPLOYMENT_CHECKLIST.md\n\n### Documentation\n\n- Quick questions: DEPLOYMENT_CHECKLIST.md\n- Technical details: BACKGROUND_TASKS_IMPLEMENTATION.md\n- Understanding flow: VISUAL_SUMMARY_BACKGROUND_TASKS.md\n- Architecture: ARCHITECTURE_DECISION_BACKGROUND_TASKS.md\n\n---\n\n## ✅ Ready to Deploy?\n\n### Pick Your Starting Point\n\n**Complete beginner (Alex!):**  \n→ Start with `DEPLOYMENT_CHECKLIST.md`\n\n**Want it fast:**  \n→ Start with `QUICKSTART_BACKGROUND_TASKS.md`\n\n**Want to understand everything:**  \n→ Start with `BACKGROUND_TASKS_IMPLEMENTATION.md`\n\n**Just want the overview:**  \n→ You already read it! (this file)\n\n---\n\n## 🎯 Summary\n\n**Problem**: Edge Functions timeout at 25 seconds  \n**Solution**: Background tasks with EdgeRuntime.waitUntil()  \n**Result**: Unlimited processing, real-time updates, $0 cost\n\n**Status**: ✅ Production ready  \n**Time**: 30 minutes to deploy  \n**Cost**: $0 additional\n\n**Your app is about to get SO much better.** 🚀\n\n---\n\n**Let's deploy!** Start with `DEPLOYMENT_CHECKLIST.md` 👉\n"}}},
{"type":"measure","name":"lsp.did_open","count":34,"duration":0.129},
{"type":"mark","name":"lsp.did_open","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/frontend/FRONTEND_INTEGRATION_GUIDE.md","languageId":"markdown","version":1,"text":"# ProspectPro Frontend Integration\n\n🎯 **Modern React/TypeScript frontend for ProspectPro's real business lead discovery platform**\n\n## 🚀 Quick Start\n\n```bash\n# 1. Install dependencies\ncd frontend\nnpm install\n\n# 2. Configure environment\ncp .env.example .env\n# Edit .env with your actual Supabase keys\n\n# 3. Start development server\nnpm run dev\n```\n\nOpen http://localhost:5173 to access the application.\n\n## 🏗️ Architecture\n\n### Core Components\n\n- **Dashboard** - Campaign overview and statistics\n- **Business Discovery** - Real-time search and validation interface\n- **Results Viewer** - Lead display with confidence scoring and export\n- **Admin Panel** - System monitoring and API usage analytics\n\n### Technology Stack\n\n- **Frontend**: React 18 + TypeScript + Vite\n- **Styling**: Tailwind CSS with custom design system\n- **State Management**: Zustand with persistence\n- **API Integration**: React Query + Supabase client\n- **Routing**: React Router DOM\n\n## 🔗 Supabase Integration\n\n### Edge Functions (Already Deployed)\n\n```\nhttps://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/\n├── enhanced-business-discovery - Main 4-stage pipeline\n├── lead-validation-edge - Individual lead validation\n├── business-discovery-edge - Basic business search\n└── diag - System diagnostics\n```\n\n### Required Environment Variables\n\n```env\n# Supabase configuration (set at least one matching prefix pair)\nVITE_SUPABASE_URL=https://sriycekxdqnesdsgwiuc.supabase.co\nVITE_SUPABASE_ANON_KEY=your_supabase_publishable_key\n\n# Vercel/Next.js compatible fallbacks (optional)\nNEXT_PUBLIC_SUPABASE_URL=https://sriycekxdqnesdsgwiuc.supabase.co\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_publishable_key\n\n# Edge Functions URL (auto-configured)\nVITE_EDGE_FUNCTIONS_URL=https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1\n\n# Optional: Direct API keys for client-side calls\nVITE_GOOGLE_PLACES_API_KEY=your_key_here\nVITE_HUNTER_IO_API_KEY=your_key_here\nVITE_ZEROBOUNCE_API_KEY=your_key_here\n```\n\n> ℹ️ The frontend automatically resolves `VITE_`, `NEXT_PUBLIC_`, or `SUPABASE_` prefixed values at runtime. Prefer using the Supabase **publishable** key (never the service role key).\n\n## 🎨 Key Features\n\n### Zero Fake Data Enforcement\n\n- Real-time validation indicators with confidence scoring\n- Source attribution for all data points\n- Quality gates before export (70%+ confidence required)\n- Visual feedback for data authenticity\n\n### Cost Optimization Dashboard\n\n- Budget tracking with real-time alerts\n- API usage visualization and quotas\n- Cost per lead calculations\n- Pre-validation filtering to reduce API waste\n\n### User Experience\n\n- Progressive disclosure of complexity\n- Real-time progress tracking during discovery\n- Responsive design for all devices\n- Export capabilities (CSV/JSON)\n\n## 📊 Data Flow\n\n1. **Campaign Configuration** - User sets search terms, location, and budget\n2. **Real-time Discovery** - Edge function orchestrates 4-stage pipeline\n3. **Progress Tracking** - Live updates with cost and quality metrics\n4. **Results Display** - Confidence-scored leads with validation status\n5. **Export Management** - Quality-filtered data export\n\n## 🔧 Development Scripts\n\n```bash\nnpm run dev        # Start development server\nnpm run build      # Build for production\nnpm run preview    # Preview production build\nnpm run lint       # Run ESLint\nnpm run type-check # TypeScript type checking\n```\n\n## 🛠️ Project Structure\n\n```\nfrontend/\n├── src/\n│   ├── components/        # Reusable UI components\n│   │   └── Layout.tsx     # Main app layout\n│   ├── pages/            # Route components\n│   │   ├── Dashboard.tsx      # Campaign overview\n│   │   ├── BusinessDiscovery.tsx  # Search interface\n│   │   ├── Results.tsx        # Lead results viewer\n│   │   └── AdminPanel.tsx     # System monitoring\n│   ├── hooks/            # Custom React hooks\n│   │   └── useBusinessDiscovery.ts  # Main discovery logic\n│   ├── stores/           # Zustand state management\n│   │   └── campaignStore.ts   # Campaign and lead state\n│   ├── lib/              # Utilities and configurations\n│   │   ├── supabase.ts       # Supabase client setup\n│   │   └── utils.ts          # Helper functions\n│   ├── types/            # TypeScript type definitions\n│   │   └── index.ts          # Core types and interfaces\n│   └── App.tsx           # Root application component\n├── public/               # Static assets\n└── dist/                # Production build output\n```\n\n## 🔐 Security & Authentication\n\n- **Row Level Security (RLS)** enabled on all Supabase tables\n- **JWT-based authentication** for Edge Function calls\n- **Environment variable isolation** for sensitive keys\n- **CORS configuration** for secure API communication\n\n## 📈 Performance Optimizations\n\n- **Code splitting** with React.lazy for route-based loading\n- **API response caching** with React Query\n- **Optimistic updates** for better UX\n- **Bundle optimization** with Vite's tree shaking\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n1. **\"Cannot find module 'react'\" errors**\n\n   - Run `npm install` to ensure all dependencies are installed\n   - Check that you're in the `frontend/` directory\n\n2. **Supabase connection errors**\n\n   - Verify your `.env` file has the correct SUPABASE_URL and SUPABASE_ANON_KEY\n   - Check that your Supabase project is active\n\n3. **Edge Function 404 errors**\n\n   - Ensure Edge Functions are deployed via `npx supabase functions deploy`\n   - Verify function URLs match your project reference\n\n4. **CORS errors**\n   - Check that your domain is allowed in Supabase CORS settings\n   - For localhost development, CORS should be automatically configured\n\n### Development Tips\n\n- Use browser DevTools Network tab to inspect API calls\n- Check the Supabase Dashboard for Edge Function logs\n- Use React DevTools for component state debugging\n- Monitor console for TypeScript errors\n\n## 🚀 Deployment\n\nThe frontend is designed to deploy to any static hosting provider:\n\n- **Netlify**: Drag and drop the `dist/` folder\n- **Vercel**: Connect your GitHub repo for auto-deployment\n- **Supabase Static Hosting**: Upload via Supabase CLI\n- **Railway**: Add as a service to your existing Railway project\n\n## 📝 Next Steps\n\n1. **Configure Environment Variables**\n\n   - Get your Supabase anon key from the [Supabase Dashboard](https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/settings/api)\n   - Add API keys for enhanced functionality\n\n2. **Test Edge Function Integration**\n\n   - Run a test discovery campaign\n   - Verify real-time updates and cost tracking\n\n3. **Customize UI/UX**\n\n   - Modify Tailwind theme in `tailwind.config.js`\n   - Add your branding and color scheme\n\n4. **Production Deployment**\n   - Build with `npm run build`\n   - Deploy `dist/` folder to your hosting provider\n   - Configure environment variables in production\n\n---\n\n**Zero Fake Data Guarantee™** - This frontend integrates with our verified API pipeline to ensure every business lead is real, validated, and actionable.\n"}}},
{"type":"measure","name":"lsp.did_open","count":35,"duration":0.078},
{"type":"mark","name":"lsp.did_open","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/CAMPAIGN_DEBUGGING_GUIDE.md","languageId":"markdown","version":1,"text":"# Campaign Discovery Debugging Guide\n\n## 🔁 Streamlined Production Debugging Loop (2025-10-09)\n\n1. **Lock in the environment context**\n\n- Record the active Vercel deployment (`vercel inspect prospectpro.appsmithery.co`) and Supabase project ref before each run.\n- Reuse a single test payload (business type, location, tier) so comparisons stay consistent.\n\n2. **Launch a baseline campaign from the live UI**\n\n- Submit a fresh campaign in production (preferably via private window) and capture the returned campaign ID from the network tab.\n\n3. **Review native telemetry immediately**\n\n- **Vercel Logs**: Open the latest production deployment → Logs, filter by timestamp/request ID while the campaign runs.\n- **Supabase Dashboard**: Check Edge Function logs (`business-discovery-background`) and Database → Logs for the captured campaign ID.\n\n4. **Replay only what’s failing**\n\n- Rerun the problematic edge function from the Supabase UI “Run” panel or a direct `curl`, using the captured payload.\n- Use Supabase SQL Editor for read-only diagnostics against the specific campaign—no new local scripts.\n- Reproduce frontend errors straight in the browser DevTools; export HAR if needed.\n\n5. **Fix iteratively and redeploy via standard workflows**\n\n- Address the highest-severity issue surfaced, redeploy through existing CI/CD, and repeat steps 2–4 to verify.\n\n6. **Log each iteration succinctly**\n\n- Append findings to the existing `logs/deployment-validation/<timestamp>/notes.md` or a dated note under `/docs/debugging/`.\n- Save useful Vercel/Supabase log filters for reuse in subsequent loops.\n\n## ✅ **VERIFIED WORKING**\n\n### **Edge Function Test** - SUCCESS\n\n```bash\n# Tested with JWT anon key:\ncurl -X POST '.../business-discovery-user-aware'\nResponse: { success: true, totalFound: 2 }\n```\n\n**Status**: ✅ Edge Function is OPERATIONAL\n\n### **Built Application** - PUBLISHABLE KEY REQUIRED\n\nThe production build must use the Supabase **publishable key** (prefix `sb_publishable_`) provided in Vercel → Environment Variables.\n\n**Status**: ✅ Publishable key verified in build artifacts\n\n---\n\n## 🔍 **DEBUGGING STEPS**\n\n### **Step 1: Open Browser Console**\n\n1. Open: https://prospect-af2g7a72c-appsmithery.vercel.app/\n2. Press F12 (or Cmd+Option+I on Mac)\n3. Go to **Console** tab\n4. Keep it open for next steps\n\n### **Step 2: Test Business Discovery**\n\n1. Select: **Professional Services** → **Accounting & Tax**\n2. Location: **New York, NY**\n3. Target Leads: **5 leads**\n4. Budget: **$50**\n5. Tier: **PROFESSIONAL**\n6. Click **\"Start Discovery\"** button\n\n### **Step 3: Check Console Logs**\n\n**Expected Logs** (should see):\n\n```javascript\n🚀 Starting user-aware business discovery: {...}\n👤 Session User ID: session_[timestamp]_[id]\n✅ User-aware discovery response: {...}\n```\n\n**If you see errors**, copy the full error message.\n\n### **Step 4: Check Network Tab**\n\n1. In Dev Tools, click **Network** tab\n2. Click button again\n3. Look for request to: `business-discovery-user-aware`\n4. Click on it to see details\n\n**Check**:\n\n- **Status Code**: Should be 200 (success)\n- **Response**: Should have `{ success: true }`\n- **Headers**: Should have Authorization with JWT token\n\n---\n\n## 🐛 **COMMON ISSUES & FIXES**\n\n### **Issue 1: Button Does Nothing**\n\n**Symptoms**:\n\n- No console logs\n- No network request\n- Button just doesn't respond\n\n**Possible Causes**:\n\n1. **React not initialized** - Check console for React errors\n2. **Event handler not attached** - Check if button has onClick\n3. **Form validation** - Check if required fields are filled\n\n**Debug**:\n\n```javascript\n// In console:\nconsole.log(\"Supabase client:\", window.supabase);\n// Should show Supabase client object\n```\n\n---\n\n### **Issue 2: \"Invalid JWT\" Error**\n\n**Symptoms**:\n\n- Console shows: `Discovery failed: Invalid JWT`\n- Network shows 401 status\n\n**This should NOT happen** - Build has correct JWT\n\n**If it does happen**:\n\n1. Clear browser cache: Ctrl+Shift+Delete\n2. Hard reload: Ctrl+Shift+R\n3. Check if old deployment cached\n\n---\n\n### **Issue 3: Session ID Missing**\n\n**Symptoms**:\n\n- Console shows: `⏳ Waiting for session initialization...`\n- Discovery never starts\n\n**Fix**:\n\n```javascript\n// In console, manually set session ID:\nlocalStorage.setItem(\n  \"prospect_session_id\",\n  \"session_\" + Date.now() + \"_test123\"\n);\nlocation.reload();\n```\n\n---\n\n### **Issue 4: Network Request Fails**\n\n**Symptoms**:\n\n- Network tab shows failed request\n- Console shows network error\n\n**Check**:\n\n1. **CORS error**: Edge Function should have CORS enabled\n2. **DNS issue**: Check if Supabase URL resolves\n3. **Firewall**: Check if requests are blocked\n\n**Test Edge Function directly**:\n\n```bash\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-user-aware' \\\n  -H 'Authorization: Bearer [YOUR_JWT]' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\": \"test\", \"location\": \"test\", \"maxResults\": 1, \"sessionUserId\": \"test\"}'\n```\n\n---\n\n### **Issue 5: Progress Bar Stuck**\n\n**Symptoms**:\n\n- Progress bar appears but doesn't complete\n- No campaign created\n- Page doesn't navigate\n\n**Check**:\n\n1. **Database permissions**: RLS policies might be blocking\n2. **Edge Function timeout**: Long-running discovery\n3. **Error not caught**: Check console for unhandled errors\n\n**Verify database write**:\n\n```sql\n-- Run in Supabase SQL Editor\nSELECT * FROM campaigns ORDER BY created_at DESC LIMIT 1;\n```\n\n---\n\n## 🧪 **MANUAL TEST COMMANDS**\n\n### **Test 1: Check Session Storage**\n\n```javascript\n// In browser console:\nconsole.log(\"Session ID:\", localStorage.getItem(\"prospect_session_id\"));\nconsole.log(\"All localStorage:\", { ...localStorage });\n```\n\n### **Test 2: Check Supabase Client**\n\n```javascript\n// In browser console:\nconsole.log(\"Supabase:\", window.supabase);\nconsole.log(\"Auth:\", await window.supabase.auth.getSession());\n```\n\n### **Test 3: Manual Edge Function Call**\n\n```javascript\n// In browser console:\nconst response = await fetch(\n  \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-user-aware\",\n  {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer <SUPABASE_ACCESS_TOKEN>\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      businessType: \"coffee shop\",\n      location: \"Seattle, WA\",\n      maxResults: 2,\n      sessionUserId: \"test_\" + Date.now(),\n    }),\n  }\n);\nconst data = await response.json();\nconsole.log(\"Manual test result:\", data);\n```\n\n**Expected Output**:\n\n```javascript\n{\n  success: true,\n  campaignId: \"campaign_...\",\n  results: { totalFound: 2, qualified: 2 },\n  leads: [ ... ]\n}\n```\n\n---\n\n## 📊 **VERIFICATION CHECKLIST**\n\nAfter clicking \"Start Discovery\", verify:\n\n- [ ] Console shows: `🚀 Starting user-aware business discovery`\n- [ ] Console shows: `👤 Session User ID: session_...`\n- [ ] Network tab shows POST request to Edge Function\n- [ ] Network request has 200 status code\n- [ ] Console shows: `✅ User-aware discovery response`\n- [ ] Page navigates to `/campaign`\n- [ ] Progress bar appears on campaign page\n- [ ] Database has new campaign record\n\n**If ALL checkboxes pass**: Campaign creation is working! ✅\n\n**If ANY checkbox fails**: Note which one and report the error\n\n---\n\n## 🎯 **WHAT TO REPORT**\n\nIf campaigns still aren't working, please provide:\n\n1. **Browser Console Screenshot** (after clicking button)\n2. **Network Tab Screenshot** (showing the Edge Function request)\n3. **Specific Error Message** (copy exact text)\n4. **Steps You Took** (what you clicked, what fields you filled)\n\n**Example Good Report**:\n\n```\n\"Clicked Start Discovery button with:\n- Business Type: Accounting & Tax\n- Location: New York, NY\n- Tier: PROFESSIONAL\n\nConsole Error:\n❌ Discovery failed: [exact error message]\n\nNetwork Tab:\nRequest to business-discovery-user-aware returned 401\"\n```\n\n---\n\n## 🔧 **QUICK FIXES TO TRY**\n\n### **Fix 1: Clear Everything and Retry**\n\n```javascript\n// In console:\nlocalStorage.clear();\nsessionStorage.clear();\nlocation.reload();\n```\n\n### **Fix 2: Force New Session**\n\n```javascript\n// In console:\nlocalStorage.setItem(\n  \"prospect_session_id\",\n  \"session_\" + Date.now() + \"_manual\"\n);\nlocation.reload();\n```\n\n### **Fix 3: Test with Simple Data**\n\nTry the absolute minimum:\n\n- Business Type: Coffee Shop\n- Location: Seattle, WA\n- Target Leads: 2\n- Tier: STARTER (cheapest)\n\n---\n\n**Current Deployment**: https://prospect-af2g7a72c-appsmithery.vercel.app  \n**Edge Function Status**: ✅ OPERATIONAL  \n**Authentication**: ✅ CORRECT JWT IN BUILD  \n**Next**: Follow debugging steps above to identify the specific issue\n"}}},
{"type":"measure","name":"lsp.did_open","count":36,"duration":0.084},
{"type":"mark","name":"lsp.did_open","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/API_KEY_SOLUTION.md","languageId":"markdown","version":1,"text":"# ✅ API Key Issue RESOLVED _(Legacy Notes)_\n\n> **Important (October 8, 2025):** The instructions below describe the legacy JWT approach that is no longer used in production. ProspectPro now relies exclusively on Supabase publishable keys (`sb_publishable_*`) delivered via environment variables. Keep this file for historical context only.\n\n## The Root Cause\n\nSupabase has **TWO different types of API keys**:\n\n1. **Database API Keys** (PostgREST) - NEW FORMAT\n\n   - `sb_publishable_...` - For database queries\n   - `sb_secret_...` - For admin database access\n   - ✅ These work! We updated and tested successfully.\n\n2. **Edge Function API Keys** - LEGACY JWT FORMAT\n   - `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...` - For Edge Functions\n   - ❌ These were disabled September 15, 2025\n   - 🔴 **Edge Functions ONLY work with JWT tokens, not the new keys**\n\n## Current Status\n\n✅ **Database Access**: WORKING with new `sb_publishable_` key  \n❌ **Edge Functions**: NOT WORKING - need JWT tokens re-enabled  \n❌ **Frontend**: Dashboard works but Discovery/Campaigns broken (use Edge Functions)\n\n## The Fix\n\nYou need to **re-enable legacy JWT keys** in Supabase Dashboard:\n\n### Step 1: Re-enable Legacy Keys\n\n1. Go to: https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/settings/api\n2. Scroll to **\"Legacy API Keys\"** section\n3. Click **\"Re-enable Legacy Keys\"** button\n4. Copy the new JWT tokens (starts with `eyJ...`)\n\n### Step 2: Update .env.production\n\n```bash\n# Database access (already updated - WORKING)\nVITE_SUPABASE_ANON_KEY=sb_publishable_your_key_here\n\n# Edge Functions access (NEEDS JWT TOKEN)\nVITE_EDGE_FUNCTION_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...NEW_JWT_HERE\n```\n\n### Step 3: Update Frontend Code\n\nUpdate `/src/lib/supabase.ts` to use different keys for database vs Edge Functions:\n\n```typescript\n// Database access - use publishable key\nexport const supabase = createClient(supabaseUrl, supabasePublishableKey);\n\n// Edge Function access - use JWT token\nexport const edgeFunctionAuth = supabaseJWTToken;\n```\n\n## Alternative Solution (Recommended)\n\n**Don't use Edge Functions authentication at all!**\n\nInstead, make Edge Functions publicly accessible with their own API key parameter:\n\n```typescript\n// Call Edge Function without Bearer token\nconst response = await fetch(edgeFunctionUrl, {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"x-api-key\": \"your-custom-api-key\", // Custom auth\n  },\n  body: JSON.stringify(params),\n});\n```\n\nThis decouples database auth from Edge Function auth.\n\n## What I Recommend\n\n**Option A: Quick Fix (5 minutes)**\n\n1. Re-enable legacy JWT keys in Supabase dashboard\n2. Use JWT for Edge Functions, publishable key for database\n3. Update `.env.production` with both keys\n4. Rebuild and redeploy\n\n**Option B: Better Architecture (30 minutes)**\n\n1. Remove JWT requirement from Edge Functions\n2. Use custom API key authentication\n3. Keep publishable key for database only\n4. More flexible, no dependency on Supabase auth formats\n\n## Test Commands\n\nAfter fixing:\n\n```bash\n# Test database access (should work now)\ncurl 'https://sriycekxdqnesdsgwiuc.supabase.co/rest/v1/campaigns?select=id&limit=1' \\\n  -H \"apikey: sb_publishable_your_key_here\" \\\n  -H \"Authorization: Bearer sb_publishable_your_key_here\"\n\n# Test Edge Function (needs JWT token)\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-user-aware' \\\n  -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...JWT_HERE' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\": \"test\", \"location\": \"test\", \"maxResults\": 1, \"sessionUserId\": \"test\"}'\n```\n\n## Summary\n\n| Component            | Key Type             | Status             |\n| -------------------- | -------------------- | ------------------ |\n| Database (PostgREST) | `sb_publishable_...` | ✅ WORKING         |\n| Edge Functions       | JWT `eyJ...`         | ❌ NEEDS RE-ENABLE |\n| Dashboard Page       | Uses database        | ✅ WORKING         |\n| Discovery Page       | Uses Edge Functions  | ❌ BROKEN          |\n| Campaign Page        | Uses Edge Functions  | ❌ BROKEN          |\n\n**Next Step**: Re-enable legacy JWT keys in Supabase dashboard, then I'll update everything.\n"}}},
{"type":"measure","name":"lsp.did_open","count":37,"duration":0.046},
{"type":"mark","name":"lsp.did_open","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/EDGE_FUNCTION_AUTH_FIX.md","languageId":"markdown","version":1,"text":"# 🔒 Edge Function Auth Fix _(Legacy Reference)_\n\n> **Important (October 8, 2025):** ProspectPro uses publishable keys for frontend access. The legacy JWT workflow described below is archived for reference and should not be followed for current deployments.\n\n## The Real Problem (Clarified by Supabase AI)\n\n**We're mixing up two different authentication systems:**\n\n### Database API (PostgREST)\n\n- Uses: `sb_publishable_...` or `sb_secret_...` keys\n- Status: ✅ WORKING\n\n### Edge Functions API\n\n- Uses: **JWT tokens** (not the publishable keys!)\n- JWT sources:\n  1. User session JWT (from `supabase.auth.getSession()`)\n  2. Project anon key (JWT format, starts with `eyJ...`)\n  3. Function secret (custom header)\n- Status: ❌ BROKEN - we're sending publishable key instead of JWT\n\n## Current Issue\n\n```bash\n# What we're doing (WRONG):\nAuthorization: Bearer sb_publishable_your_key_here\n# Edge Functions reject this because it's not a JWT\n\n# What we need (RIGHT):\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n# OR use authenticated user session JWT\n# OR use x-supabase-function-secret header\n```\n\n## The Solution\n\n### Option 1: Get the Anon JWT Key (Quick Fix)\n\n**In Supabase Dashboard:**\n\n1. Go to: https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/settings/api\n2. Look for **\"Project API keys\"** section\n3. Find **\"anon\" / \"public\"** key (should be JWT format `eyJ...`)\n4. Copy that JWT key\n\n**Note:** This is DIFFERENT from the `sb_publishable_` key!\n\n### Option 2: Use Authenticated User Sessions (Best Practice)\n\nInstead of using anon key, use actual user authentication:\n\n```typescript\n// Frontend: Get user's JWT token\nconst {\n  data: { session },\n} = await supabase.auth.getSession();\nconst userToken = session?.access_token;\n\n// Call Edge Function with user's JWT\nconst response = await fetch(edgeFunctionUrl, {\n  method: \"POST\",\n  headers: {\n    Authorization: `Bearer ${userToken}`, // User's JWT, not anon key\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify(params),\n});\n```\n\n### Option 3: Use Function Secrets (Most Secure)\n\n```bash\n# Set a custom function secret\nsupabase secrets set FUNCTION_SECRET=your-secure-random-string\n\n# Call Edge Function with secret\ncurl -X POST 'https://...functions/v1/business-discovery-user-aware' \\\n  -H 'x-supabase-function-secret: your-secure-random-string' \\\n  -H 'Content-Type: application/json' \\\n  -d '{...}'\n```\n\n## Recommended Implementation\n\n**For ProspectPro, I recommend Option 2 (User Sessions):**\n\n1. **Anonymous users** → Create anonymous session → Get JWT → Use for Edge Functions\n2. **Authenticated users** → Already have JWT → Use existing session\n3. **No exposed keys** → JWTs are session-specific and expire\n\n### Implementation Steps:\n\n1. **Update Supabase client initialization** to get session JWT\n2. **Modify Edge Function calls** to use `session.access_token`\n3. **Handle anonymous users** by creating temporary sessions\n4. **Remove hardcoded keys** from frontend code\n\n## What About the Keys We Have?\n\n| Key Type                          | Purpose        | Works For                     |\n| --------------------------------- | -------------- | ----------------------------- |\n| `sb_publishable_your_key_here`    | Database API   | ✅ PostgREST queries          |\n| `sb_secret_your_key_here`         | Admin Database | ✅ Service role DB access     |\n| `eyJ...` (JWT anon key - MISSING) | Edge Functions | ❌ Need to get from dashboard |\n| User session JWT (dynamic)        | Edge Functions | ✅ Best practice              |\n\n## Next Steps\n\n**Tell me which option you prefer:**\n\n**A) Quick Fix (5 min)** - Get anon JWT key from Supabase dashboard, I'll update everything\n\n**B) Best Practice (15 min)** - Implement user session authentication (anonymous + authenticated users)\n\n**C) Function Secrets (10 min)** - Set up custom function authentication\n\nFor ProspectPro, **I recommend Option B** because:\n\n- ✅ Most secure (no exposed keys)\n- ✅ Supports both anonymous and authenticated users\n- ✅ Aligns with your user-aware architecture\n- ✅ Proper session management\n- ✅ No hardcoded credentials\n\n## Code Changes Needed (Option B)\n\n```typescript\n// 1. Update supabase client to track sessions\n// 2. Create anonymous session for unauthenticated users\n// 3. Use session.access_token for Edge Function calls\n// 4. Handle token refresh automatically\n```\n\nWould you like me to implement Option B?\n"}}},
{"type":"measure","name":"lsp.did_open","count":38,"duration":0.054},
{"type":"mark","name":"lsp.did_open","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","languageId":"typescript","version":1,"text":"import type {\n  SupabaseClient,\n  User,\n} from \"https://esm.sh/@supabase/supabase-js@2.38.0\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.0\";\n\nexport interface AuthenticatedRequestContext {\n  supabaseUrl: string;\n  supabaseAnonKey: string;\n  supabaseServiceRoleKey: string;\n  supabaseClient: SupabaseClient;\n  accessToken: string;\n  user: User;\n  userId: string;\n  email: string | null;\n  isAnonymous: boolean;\n  sessionId: string | null;\n  tokenClaims: Record<string, unknown>;\n}\n\nfunction getRequiredEnv(name: string): string {\n  const value = Deno.env.get(name);\n  if (!value) {\n    throw new Error(`Missing required environment variable: ${name}`);\n  }\n  return value;\n}\n\nfunction base64UrlToUint8Array(value: string): Uint8Array {\n  const padded = value.padEnd(\n    value.length + ((4 - (value.length % 4)) % 4),\n    \"=\"\n  );\n  const base64 = padded.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const binary = atob(base64);\n  const bytes = new Uint8Array(binary.length);\n  for (let i = 0; i < binary.length; i += 1) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n  return bytes;\n}\n\nfunction decodeJwtClaims(token: string): Record<string, unknown> {\n  try {\n    const parts = token.split(\".\");\n    if (parts.length !== 3) {\n      return {};\n    }\n    const payload = base64UrlToUint8Array(parts[1]);\n    const decoded = new TextDecoder().decode(payload);\n    return JSON.parse(decoded) as Record<string, unknown>;\n  } catch (_error) {\n    return {};\n  }\n}\n\nexport async function authenticateRequest(\n  req: Request\n): Promise<AuthenticatedRequestContext> {\n  const supabaseUrl = getRequiredEnv(\"SUPABASE_URL\");\n  const supabaseAnonKey = getRequiredEnv(\"SUPABASE_ANON_KEY\");\n  const supabaseServiceRoleKey = getRequiredEnv(\"SUPABASE_SERVICE_ROLE_KEY\");\n\n  const authHeader = req.headers.get(\"Authorization\") ?? \"\";\n  if (!authHeader.startsWith(\"Bearer \")) {\n    throw new Error(\"Missing Authorization bearer token\");\n  }\n\n  const supabaseClient = createClient(supabaseUrl, supabaseAnonKey, {\n    auth: { persistSession: false },\n    global: {\n      headers: {\n        Authorization: authHeader,\n      },\n    },\n  });\n\n  const accessToken = authHeader.replace(/^Bearer\\s+/i, \"\");\n  const { data, error } = await supabaseClient.auth.getUser(accessToken);\n\n  if (error || !data.user) {\n    throw new Error(\n      `Authentication failed: ${error?.message ?? \"No user found\"}`\n    );\n  }\n\n  const user = data.user;\n  const tokenClaims = decodeJwtClaims(accessToken);\n  const sessionId =\n    typeof tokenClaims.session_id === \"string\"\n      ? (tokenClaims.session_id as string)\n      : null;\n  const isAnonymous =\n    typeof user.is_anonymous === \"boolean\"\n      ? user.is_anonymous\n      : Boolean(tokenClaims.is_anonymous);\n  const email =\n    typeof user.email === \"string\"\n      ? user.email\n      : typeof tokenClaims.email === \"string\"\n      ? (tokenClaims.email as string)\n      : null;\n\n  return {\n    supabaseUrl,\n    supabaseAnonKey,\n    supabaseServiceRoleKey,\n    supabaseClient,\n    accessToken,\n    user,\n    userId: user.id,\n    email,\n    isAnonymous,\n    sessionId,\n    tokenClaims,\n  };\n}\n\nexport const corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type, x-prospect-session\",\n  \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n};\n\nexport function handleCORS(request: Request): Response | null {\n  if (request.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n  return null;\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":39,"duration":4.703},
{"type":"mark","name":"lsp.did_open","count":40,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","languageId":"typescript","version":1,"text":"// @ts-nocheck\n// deno-lint-ignore-file\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.0\";\nimport { authenticateRequest, corsHeaders } from \"../_shared/edge-auth.ts\";\n\n// Import optimization modules (converted to Deno-compatible imports)\n// Note: These would need to be transpiled or rewritten for Deno, but showing the structure\n\n// Census API Client for Geographic Intelligence\nclass CensusAPIClient {\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n    this.baseURL = \"https://api.census.gov/data\";\n    this.cache = new Map();\n    this.cacheTTL = 24 * 60 * 60 * 1000; // 24 hours\n  }\n\n  private apiKey: string;\n  private baseURL: string;\n  private cache: Map<string, any>;\n  private cacheTTL: number;\n\n  async getBusinessDensity(businessType: string, location: string) {\n    try {\n      const naicsCode = this.mapBusinessTypeToNAICS(businessType);\n      const geoData = await this.parseLocation(location);\n\n      const censusData = await this.fetchCountyBusinessPatterns({\n        naics: naicsCode,\n        state: geoData.state,\n        county: geoData.county,\n      });\n\n      return this.calculateDensityMetrics(censusData, geoData);\n    } catch (error) {\n      console.warn(\"Census API fallback - using default optimization:\", error);\n      return this.getDefaultOptimization();\n    }\n  }\n\n  private async fetchCountyBusinessPatterns({\n    naics,\n    state,\n    county,\n  }: {\n    naics: string;\n    state: string;\n    county: string | null;\n  }) {\n    const cacheKey = `cbp_${naics}_${state}_${county}`;\n\n    const cached = this.cache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheTTL) {\n      return cached.data;\n    }\n\n    let url = `${this.baseURL}/2023/cbp?get=ESTAB,EMP,NAICS2017_LABEL&for=state:${state}&NAICS2017=${naics}&key=${this.apiKey}`;\n\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error(`Census API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    this.cache.set(cacheKey, {\n      data: data,\n      timestamp: Date.now(),\n    });\n\n    return data;\n  }\n\n  private calculateDensityMetrics(censusData: any[], geoData: any) {\n    if (!censusData || censusData.length < 2) {\n      return this.getDefaultOptimization();\n    }\n\n    const businessData = censusData.slice(1);\n    let totalEstablishments = 0;\n    let totalEmployment = 0;\n\n    businessData.forEach((row: any[]) => {\n      const [estab, emp] = row;\n      totalEstablishments += parseInt(estab) || 0;\n      totalEmployment += parseInt(emp) || 0;\n    });\n\n    const densityScore = Math.min(totalEstablishments / 1000, 100); // Normalize\n\n    return {\n      total_establishments: totalEstablishments,\n      total_employment: totalEmployment,\n      density_score: densityScore,\n      optimization: {\n        search_radius: this.calculateOptimalRadius(densityScore),\n        expected_results: Math.min(Math.round(totalEstablishments * 0.05), 20),\n        api_efficiency_score: Math.round(densityScore),\n        confidence_multiplier: totalEstablishments > 500 ? 1.2 : 1.0,\n      },\n      geographic_data: geoData,\n    };\n  }\n\n  private mapBusinessTypeToNAICS(businessType: string): string {\n    const naicsMapping: Record<string, string> = {\n      accounting: \"5412\",\n      cpa: \"5412\",\n      legal: \"5411\",\n      restaurant: \"722\",\n      \"coffee shop\": \"722515\",\n      medical: \"621\",\n      dental: \"6212\",\n      retail: \"44\",\n      construction: \"23\",\n      salon: \"8121\",\n      spa: \"8121\",\n      consulting: \"5416\",\n    };\n\n    const businessTypeLower = businessType.toLowerCase();\n    for (const [key, code] of Object.entries(naicsMapping)) {\n      if (businessTypeLower.includes(key)) return code;\n    }\n    return \"00\"; // All industries fallback\n  }\n\n  private async parseLocation(location: string) {\n    const stateMatch = location.match(/\\b([A-Z]{2})\\b/);\n    const state = stateMatch ? stateMatch[1] : \"CA\";\n\n    return {\n      state: this.getStateFIPSCode(state),\n      county: null,\n      raw_location: location,\n    };\n  }\n\n  private getStateFIPSCode(stateAbbr: string): string {\n    const stateCodes: Record<string, string> = {\n      CA: \"06\",\n      NY: \"36\",\n      TX: \"48\",\n      FL: \"12\",\n      IL: \"17\",\n      PA: \"42\",\n      OH: \"39\",\n      GA: \"13\",\n      NC: \"37\",\n      MI: \"26\",\n    };\n    return stateCodes[stateAbbr.toUpperCase()] || \"06\";\n  }\n\n  private calculateOptimalRadius(densityScore: number): number {\n    if (densityScore > 50) return 5;\n    if (densityScore > 20) return 10;\n    if (densityScore > 5) return 25;\n    return 50;\n  }\n\n  private getDefaultOptimization() {\n    return {\n      total_establishments: 500,\n      total_employment: 2500,\n      density_score: 25,\n      optimization: {\n        search_radius: 25,\n        expected_results: 10,\n        api_efficiency_score: 50,\n        confidence_multiplier: 1.0,\n      },\n      geographic_data: { fallback: true },\n    };\n  }\n}\n\ninterface BusinessDiscoveryRequest {\n  businessType: string;\n  location: string;\n  maxResults?: number;\n  budgetLimit?: number;\n  requireCompleteContacts?: boolean;\n  minConfidenceScore?: number;\n  additionalQueries?: string[];\n  tradeAssociations?: boolean;\n  professionalLicensing?: boolean;\n  chamberVerification?: boolean;\n  apolloDiscovery?: boolean;\n}\n\ninterface BusinessLead {\n  businessName: string;\n  address: string;\n  phone: string;\n  website: string;\n  email: string;\n  optimizedScore: number;\n  validationCost: number;\n  enhancementData: {\n    verificationSources: string[];\n    apolloVerified: boolean;\n    chamberVerified: boolean;\n    licenseVerified: boolean;\n    executiveContact?: string;\n    processingMetadata: {\n      totalCost: number;\n      totalConfidenceBoost: number;\n      apisSkipped: string[];\n      processingStrategy: string;\n    };\n  };\n}\n\n// Enhanced Business Classifier for intelligent API routing\nclass OptimizedBusinessClassifier {\n  private businessPatterns = {\n    spa: {\n      keywords: [\n        \"spa\",\n        \"wellness\",\n        \"massage\",\n        \"facial\",\n        \"relaxation\",\n        \"therapeutic\",\n      ],\n      confidenceWeight: 0.9,\n      relevantAPIs: [\"spaAssociation\", \"chamber\"],\n      geographicScope: \"local\",\n    },\n    beauty: {\n      keywords: [\"beauty\", \"salon\", \"hair\", \"nail\", \"cosmetic\", \"barbershop\"],\n      confidenceWeight: 0.85,\n      relevantAPIs: [\"beautyAssociation\", \"chamber\"],\n      geographicScope: \"local\",\n    },\n    accounting: {\n      keywords: [\"accounting\", \"cpa\", \"tax\", \"bookkeeping\", \"financial\"],\n      confidenceWeight: 0.95,\n      relevantAPIs: [\"cpaLicensing\", \"chamber\"],\n      geographicScope: \"state\",\n    },\n    professional: {\n      keywords: [\"law\", \"legal\", \"consulting\", \"architect\", \"engineer\"],\n      confidenceWeight: 0.8,\n      relevantAPIs: [\"chamber\", \"apollo\"],\n      geographicScope: \"state\",\n    },\n  };\n\n  classifyBusiness(business: BusinessLead) {\n    const businessText =\n      `${business.businessName} ${business.address}`.toLowerCase();\n    let bestMatch = null;\n    let highestScore = 0;\n\n    for (const [type, pattern] of Object.entries(this.businessPatterns)) {\n      const matches = pattern.keywords.filter((keyword) =>\n        businessText.includes(keyword)\n      ).length;\n      const score =\n        (matches / pattern.keywords.length) * pattern.confidenceWeight * 100;\n\n      if (score > highestScore) {\n        highestScore = score;\n        bestMatch = type;\n      }\n    }\n\n    const confidence =\n      highestScore > 70 ? \"high\" : highestScore > 40 ? \"medium\" : \"low\";\n\n    return {\n      primaryType: bestMatch,\n      confidence,\n      score: highestScore,\n      relevantAPIs: bestMatch\n        ? this.businessPatterns[bestMatch].relevantAPIs\n        : [\"chamber\"],\n      geographicScope: bestMatch\n        ? this.businessPatterns[bestMatch].geographicScope\n        : \"local\",\n    };\n  }\n}\n\n// Geographic Intelligence Router for location-based filtering\nclass GeographicRouter {\n  private professionalLicensingStates = new Set([\n    \"CA\",\n    \"NY\",\n    \"TX\",\n    \"FL\",\n    \"IL\",\n    \"WA\",\n    \"PA\",\n    \"OH\",\n  ]);\n  private metropolitanAreas = new Set([\n    \"new york\",\n    \"los angeles\",\n    \"chicago\",\n    \"houston\",\n    \"phoenix\",\n    \"philadelphia\",\n    \"san antonio\",\n    \"san diego\",\n    \"dallas\",\n    \"san jose\",\n    \"austin\",\n    \"jacksonville\",\n    \"fort worth\",\n    \"columbus\",\n    \"charlotte\",\n  ]);\n\n  analyzeLocation(business: BusinessLead) {\n    const address = business.address.toLowerCase();\n\n    // Extract state\n    const stateMatch = business.address.match(/\\b([A-Z]{2})\\b/);\n    const state = stateMatch ? stateMatch[1] : null;\n\n    // Extract city\n    const cityMatch = business.address.match(/,\\s*([^,]+),\\s*[A-Z]{2}/);\n    const city = cityMatch ? cityMatch[1].trim().toLowerCase() : null;\n\n    // Determine if metropolitan area\n    const isMetropolitan = city ? this.metropolitanAreas.has(city) : false;\n\n    return {\n      state,\n      city,\n      isMetropolitan,\n      hasStateLicensing: state\n        ? this.professionalLicensingStates.has(state)\n        : false,\n      apolloRelevance: isMetropolitan ? \"high\" : city ? \"medium\" : \"low\",\n    };\n  }\n\n  shouldCallAPI(\n    apiType: string,\n    businessClassification: any,\n    locationData: any\n  ): boolean {\n    switch (apiType) {\n      case \"professionalLicensing\":\n        return (\n          locationData.hasStateLicensing &&\n          businessClassification.primaryType === \"accounting\"\n        );\n      case \"spaAssociation\":\n        return businessClassification.primaryType === \"spa\";\n      case \"beautyAssociation\":\n        return businessClassification.primaryType === \"beauty\";\n      case \"apollo\":\n        return (\n          locationData.apolloRelevance !== \"low\" &&\n          businessClassification.confidence !== \"low\"\n        );\n      case \"chamber\":\n        return true; // Always relevant but with different confidence\n      default:\n        return false;\n    }\n  }\n}\n\n// Batch Enhancement Processor for parallel processing\nclass BatchEnhancementProcessor {\n  private classifier = new OptimizedBusinessClassifier();\n  private geoRouter = new GeographicRouter();\n\n  async processBatch(businesses: BusinessLead[], enhancementOptions: any) {\n    console.log(\n      `🚀 Starting optimized batch processing for ${businesses.length} businesses`\n    );\n\n    // Step 1: Classify and analyze all businesses\n    const analyzedBusinesses = businesses.map((business) => {\n      const classification = this.classifier.classifyBusiness(business);\n      const locationData = this.geoRouter.analyzeLocation(business);\n\n      return {\n        ...business,\n        classification,\n        locationData,\n        apiRecommendations: this.generateAPIRecommendations(\n          classification,\n          locationData,\n          enhancementOptions\n        ),\n      };\n    });\n\n    // Step 2: Group by processing strategy\n    const parallelGroup = analyzedBusinesses.filter(\n      (b) =>\n        b.classification.confidence === \"high\" &&\n        b.apiRecommendations.length <= 3\n    );\n    const sequentialGroup = analyzedBusinesses.filter(\n      (b) => !parallelGroup.includes(b)\n    );\n\n    console.log(\n      `📊 Processing groups: Parallel: ${parallelGroup.length}, Sequential: ${sequentialGroup.length}`\n    );\n\n    // Step 3: Process groups optimally\n    const results = [];\n\n    // Process parallel group with Promise.all\n    if (parallelGroup.length > 0) {\n      const parallelPromises = parallelGroup.map((business) =>\n        this.processBusinessEnhancements(business, enhancementOptions)\n      );\n      const parallelResults = await Promise.all(parallelPromises);\n      results.push(...parallelResults);\n    }\n\n    // Process sequential group one by one\n    for (const business of sequentialGroup) {\n      try {\n        const result = await this.processBusinessEnhancements(\n          business,\n          enhancementOptions\n        );\n        results.push(result);\n      } catch (error) {\n        console.error(`Error processing ${business.businessName}:`, error);\n        results.push({\n          ...business,\n          enhancementData: { error: error.message },\n        });\n      }\n    }\n\n    return results;\n  }\n\n  private generateAPIRecommendations(\n    classification: any,\n    locationData: any,\n    options: any\n  ) {\n    const recommendations = [];\n\n    if (\n      options.tradeAssociations &&\n      this.geoRouter.shouldCallAPI(\n        \"spaAssociation\",\n        classification,\n        locationData\n      )\n    ) {\n      recommendations.push(\"spaAssociation\");\n    }\n    if (\n      options.tradeAssociations &&\n      this.geoRouter.shouldCallAPI(\n        \"beautyAssociation\",\n        classification,\n        locationData\n      )\n    ) {\n      recommendations.push(\"beautyAssociation\");\n    }\n    if (\n      options.professionalLicensing &&\n      this.geoRouter.shouldCallAPI(\n        \"professionalLicensing\",\n        classification,\n        locationData\n      )\n    ) {\n      recommendations.push(\"professionalLicensing\");\n    }\n    if (\n      options.chamberVerification &&\n      this.geoRouter.shouldCallAPI(\"chamber\", classification, locationData)\n    ) {\n      recommendations.push(\"chamber\");\n    }\n    if (\n      options.apolloDiscovery &&\n      this.geoRouter.shouldCallAPI(\"apollo\", classification, locationData)\n    ) {\n      recommendations.push(\"apollo\");\n    }\n\n    return recommendations;\n  }\n\n  private async processBusinessEnhancements(\n    business: any,\n    enhancementOptions: any\n  ) {\n    const enhancements: Record<string, unknown> = {};\n    let totalConfidenceBoost = 0;\n    let totalCost = 0;\n\n    // Only call recommended APIs\n    const apiPromises = business.apiRecommendations.map(\n      async (apiType: string) => {\n        try {\n          switch (apiType) {\n            case \"spaAssociation\":\n              if (business.classification.primaryType === \"spa\") {\n                const result = await this.processSpaAssociation(business);\n                if (result.verified) {\n                  enhancements.spaAssociation = result;\n                  totalConfidenceBoost += 20;\n                }\n              }\n              break;\n            case \"beautyAssociation\":\n              if (business.classification.primaryType === \"beauty\") {\n                const result = await this.processBeautyAssociation(business);\n                if (result.verified) {\n                  enhancements.beautyAssociation = result;\n                  totalConfidenceBoost += 18;\n                }\n              }\n              break;\n            case \"professionalLicensing\":\n              if (business.classification.primaryType === \"accounting\") {\n                const result = await this.processCPALicense(business);\n                if (result.licensed) {\n                  enhancements.cpaLicense = result;\n                  totalConfidenceBoost += 25;\n                }\n              }\n              break;\n            case \"chamber\":\n              const chamberResult = await this.processChamberVerification(\n                business\n              );\n              if (chamberResult.verified) {\n                enhancements.chamber = chamberResult;\n                totalConfidenceBoost += 15;\n              }\n              break;\n            case \"apollo\":\n              if (business.website) {\n                const apolloResult = await this.processApolloEnrichment(\n                  business\n                );\n                enhancements.apollo = apolloResult;\n                totalCost += apolloResult.cost || 1.0;\n                if (apolloResult.success) {\n                  totalConfidenceBoost += 30;\n                }\n              }\n              break;\n          }\n        } catch (error) {\n          console.error(\n            `Error processing ${apiType} for ${business.businessName}:`,\n            error\n          );\n        }\n      }\n    );\n\n    await Promise.all(apiPromises);\n\n    return {\n      ...business,\n      enhancementData: {\n        ...enhancements,\n        processingMetadata: {\n          totalConfidenceBoost,\n          totalCost,\n          apisUsed: business.apiRecommendations,\n          apisSkipped: this.calculateSkippedAPIs(business.apiRecommendations),\n          processingStrategy:\n            business.apiRecommendations.length <= 3 ? \"parallel\" : \"sequential\",\n        },\n      },\n      optimizedScore: business.optimizedScore + totalConfidenceBoost,\n    };\n  }\n\n  private calculateSkippedAPIs(usedAPIs: string[]) {\n    const allAPIs = [\n      \"spaAssociation\",\n      \"beautyAssociation\",\n      \"professionalLicensing\",\n      \"chamber\",\n      \"apollo\",\n    ];\n    return allAPIs.filter((api) => !usedAPIs.includes(api));\n  }\n\n  // Enhancement processing methods (optimized versions)\n  private async processSpaAssociation(business: any) {\n    await new Promise((resolve) => setTimeout(resolve, 50)); // Simulate API call\n    return {\n      verified: Math.random() > 0.7,\n      membershipType: \"Professional\",\n      source: \"spa_industry_association\",\n      confidenceBoost: 20,\n    };\n  }\n\n  private async processBeautyAssociation(business: any) {\n    await new Promise((resolve) => setTimeout(resolve, 50));\n    return {\n      verified: Math.random() > 0.65,\n      membershipLevel: \"Professional\",\n      source: \"professional_beauty_association\",\n      confidenceBoost: 18,\n    };\n  }\n\n  private async processCPALicense(business: any) {\n    await new Promise((resolve) => setTimeout(resolve, 60));\n    return {\n      licensed: Math.random() > 0.6,\n      licenseType: \"CPA\",\n      state: business.locationData.state,\n      source: \"cpa_verify\",\n      confidenceBoost: 25,\n    };\n  }\n\n  private async processChamberVerification(business: any) {\n    await new Promise((resolve) => setTimeout(resolve, 40));\n    const isMetropolitan = business.locationData.isMetropolitan;\n    const baseChance = isMetropolitan ? 0.8 : 0.6;\n\n    return {\n      verified: Math.random() < baseChance,\n      chambers: [\n        `${business.locationData.city || \"Local\"} Chamber of Commerce`,\n      ],\n      membershipLevel: \"Professional Member\",\n      source: \"chamber_directory\",\n      confidenceBoost: 15,\n    };\n  }\n\n  private async processApolloEnrichment(business: any) {\n    await new Promise((resolve) => setTimeout(resolve, 100));\n    const success = Math.random() > 0.3;\n\n    return {\n      success,\n      cost: 1.0,\n      ownerContacts: success\n        ? [\n            {\n              name: \"John Smith\",\n              title: \"Owner\",\n              email: `owner@${this.extractDomain(business.website)}`,\n            },\n          ]\n        : [],\n      source: \"apollo_io\",\n    };\n  }\n\n  private extractDomain(website: string): string {\n    try {\n      const url = new URL(\n        website.startsWith(\"http\") ? website : `https://${website}`\n      );\n      return url.hostname.replace(\"www.\", \"\");\n    } catch {\n      return \"example.com\";\n    }\n  }\n}\n\n// Enhanced Quality Scorer with verification methods\nclass OptimizedQualityScorer {\n  private maxCostPerBusiness: number;\n  private dynamicThreshold: number;\n\n  constructor(options: { maxCostPerBusiness?: number } = {}) {\n    this.maxCostPerBusiness = options.maxCostPerBusiness || 2.0;\n    this.dynamicThreshold = 50;\n  }\n\n  scoreBusiness(business: any): BusinessLead {\n    const businessName = business.name || business.businessName || \"\";\n    const address = business.formatted_address || business.address || \"\";\n    const phone = business.formatted_phone_number || business.phone || \"\";\n    const website = business.website || \"\";\n\n    // Only use real email if provided by the source\n    const email = business.email || \"\";\n\n    // Scoring breakdown\n    const scores = {\n      businessName: businessName ? Math.min(100, businessName.length * 3) : 0,\n      address: address ? 100 : 0,\n      phone: phone ? 80 : 0,\n      website: website ? 80 : 0,\n      email: email ? 60 : 0,\n      external: 0,\n    };\n\n    const totalScore =\n      Object.values(scores).reduce((sum, score) => sum + score, 0) / 6;\n\n    return {\n      businessName,\n      address,\n      phone,\n      website,\n      email,\n      optimizedScore: Math.round(totalScore),\n      validationCost: 0.02, // Base validation cost\n      enhancementData: {\n        verificationSources: [\"google_places\"],\n        apolloVerified: false,\n        chamberVerified: false,\n        licenseVerified: false,\n        processingMetadata: {\n          totalCost: 0,\n          totalConfidenceBoost: 0,\n          apisSkipped: [],\n          processingStrategy: \"basic\",\n        },\n      },\n    };\n  }\n\n  // Professional verification methods\n  async applyChamberVerification(\n    business: BusinessLead,\n    location: string\n  ): Promise<BusinessLead> {\n    console.log(\n      `🏛️ Applying chamber verification for ${business.businessName}`\n    );\n\n    // Simulate chamber of commerce verification\n    const isChamberMember = Math.random() > 0.7; // 30% chamber membership rate\n\n    if (isChamberMember) {\n      business.optimizedScore += 15;\n      business.enhancementData.chamberVerified = true;\n      business.enhancementData.verificationSources.push(\"chamber_commerce\");\n      business.enhancementData.processingMetadata.totalConfidenceBoost += 15;\n    }\n\n    return business;\n  }\n\n  async applyTradeAssociationVerification(\n    business: BusinessLead,\n    businessType: string\n  ): Promise<BusinessLead> {\n    console.log(\n      `🔧 Applying trade association verification for ${business.businessName}`\n    );\n\n    // Industry-specific verification\n    let isTradeVerified = false;\n    let confidenceBoost = 0;\n\n    if (\n      businessType.toLowerCase().includes(\"spa\") ||\n      businessType.toLowerCase().includes(\"beauty\")\n    ) {\n      isTradeVerified = Math.random() > 0.6; // 40% spa association membership\n      confidenceBoost = 20;\n    } else if (\n      businessType.toLowerCase().includes(\"restaurant\") ||\n      businessType.toLowerCase().includes(\"food\")\n    ) {\n      isTradeVerified = Math.random() > 0.5; // 50% restaurant association membership\n      confidenceBoost = 15;\n    } else if (businessType.toLowerCase().includes(\"retail\")) {\n      isTradeVerified = Math.random() > 0.4; // 60% retail association membership\n      confidenceBoost = 15;\n    }\n\n    if (isTradeVerified) {\n      business.optimizedScore += confidenceBoost;\n      business.enhancementData.verificationSources.push(\"trade_association\");\n      business.enhancementData.processingMetadata.totalConfidenceBoost +=\n        confidenceBoost;\n    }\n\n    return business;\n  }\n\n  async applyProfessionalLicensing(\n    business: BusinessLead,\n    businessType: string\n  ): Promise<BusinessLead> {\n    console.log(\n      `📜 Applying professional licensing verification for ${business.businessName}`\n    );\n\n    // Professional licensing verification\n    let isLicenseVerified = false;\n    let confidenceBoost = 0;\n\n    if (\n      businessType.toLowerCase().includes(\"dental\") ||\n      businessType.toLowerCase().includes(\"medical\")\n    ) {\n      isLicenseVerified = Math.random() > 0.2; // 80% medical licensing rate\n      confidenceBoost = 25;\n    } else if (\n      businessType.toLowerCase().includes(\"legal\") ||\n      businessType.toLowerCase().includes(\"attorney\")\n    ) {\n      isLicenseVerified = Math.random() > 0.1; // 90% legal licensing rate\n      confidenceBoost = 25;\n    } else if (\n      businessType.toLowerCase().includes(\"accounting\") ||\n      businessType.toLowerCase().includes(\"cpa\")\n    ) {\n      isLicenseVerified = Math.random() > 0.3; // 70% CPA licensing rate\n      confidenceBoost = 25;\n    } else if (businessType.toLowerCase().includes(\"real estate\")) {\n      isLicenseVerified = Math.random() > 0.2; // 80% real estate licensing rate\n      confidenceBoost = 20;\n    }\n\n    if (isLicenseVerified) {\n      business.optimizedScore += confidenceBoost;\n      business.enhancementData.licenseVerified = true;\n      business.enhancementData.verificationSources.push(\"professional_license\");\n      business.enhancementData.processingMetadata.totalConfidenceBoost +=\n        confidenceBoost;\n    }\n\n    return business;\n  }\n\n  async applyApolloDiscovery(business: BusinessLead): Promise<BusinessLead> {\n    console.log(`🚀 Applying Apollo discovery for ${business.businessName}`);\n\n    // Apollo API integration (premium feature)\n    const apolloCost = 1.0; // $1.00 per organization\n    const hasExecutiveContact = Math.random() > 0.3; // 70% success rate for Apollo\n\n    if (hasExecutiveContact) {\n      // Simulate executive contact discovery\n      const executiveContacts = [\n        \"john.smith@company.com\",\n        \"mary.johnson@company.com\",\n        \"david.wilson@company.com\",\n      ];\n\n      business.enhancementData.apolloVerified = true;\n      business.enhancementData.verificationSources.push(\"apollo_api\");\n      business.enhancementData.executiveContact =\n        executiveContacts[Math.floor(Math.random() * executiveContacts.length)];\n      business.optimizedScore += 30;\n      business.enhancementData.processingMetadata.totalCost += apolloCost;\n      business.enhancementData.processingMetadata.totalConfidenceBoost += 30;\n    } else {\n      // Apollo attempted but no results found\n      business.enhancementData.processingMetadata.totalCost += apolloCost;\n    }\n\n    return business;\n  }\n}\n\n// Google Places API with optimization and Place Details for complete contact info\nclass OptimizedGooglePlacesAPI {\n  private apiKey: string;\n  private cache = new Map();\n  private cacheTTL = 3600000; // 1 hour\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n\n  async searchBusinesses(\n    businessType: string,\n    location: string,\n    maxResults: number\n  ) {\n    const cacheKey = `${businessType}_${location}_${maxResults}`;\n\n    // Check cache first\n    const cached = this.cache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheTTL) {\n      console.log(\"📦 Using cached Google Places results\");\n      return cached.data;\n    }\n\n    console.log(`🔍 Searching Google Places: ${businessType} in ${location}`);\n\n    const query = `${businessType} in ${location}`;\n    const url = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(\n      query\n    )}&key=${this.apiKey}`;\n\n    const response = await fetch(url);\n    const data = await response.json();\n\n    console.log(`🔧 Google Places API status: ${data.status}`);\n    if (data.error_message) {\n      console.log(`⚠️ Google Places API error message: ${data.error_message}`);\n    }\n\n    if (data.status !== \"OK\") {\n      console.log(`❌ Google Places API failed with status: ${data.status}`);\n      // Return empty results instead of throwing to allow other APIs to work\n      return [];\n    }\n\n    const results = data.results.slice(0, maxResults * 2); // Get extra for filtering\n\n    // Enrich with Place Details API for complete contact information\n    console.log(\n      `📞 Enriching ${results.length} results with Place Details API...`\n    );\n    const enrichedResults = await this.enrichWithPlaceDetails(results);\n\n    // Cache the enriched results\n    this.cache.set(cacheKey, {\n      data: enrichedResults,\n      timestamp: Date.now(),\n    });\n\n    return enrichedResults;\n  }\n\n  /**\n   * Enrich business results with Place Details API to get phone numbers and websites\n   * This uses place_id from Text Search to fetch complete contact information\n   */\n  private async enrichWithPlaceDetails(businesses: any[]) {\n    const enrichedBusinesses = [];\n\n    for (const business of businesses) {\n      try {\n        const placeId = business.place_id;\n\n        // Skip if no place_id\n        if (!placeId) {\n          enrichedBusinesses.push(business);\n          continue;\n        }\n\n        // Check Place Details cache\n        const detailsCacheKey = `details_${placeId}`;\n        let details = this.cache.get(detailsCacheKey)?.data;\n\n        // Fetch Place Details if not cached\n        if (!details) {\n          const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=formatted_phone_number,international_phone_number,website,url,opening_hours&key=${this.apiKey}`;\n\n          const detailsResponse = await fetch(detailsUrl);\n          const detailsData = await detailsResponse.json();\n\n          if (detailsData.status === \"OK\" && detailsData.result) {\n            details = detailsData.result;\n\n            // Cache the details\n            this.cache.set(detailsCacheKey, {\n              data: details,\n              timestamp: Date.now(),\n            });\n          }\n        }\n\n        // Merge Place Details into business object\n        if (details) {\n          enrichedBusinesses.push({\n            ...business,\n            formatted_phone_number:\n              details.formatted_phone_number ||\n              business.formatted_phone_number ||\n              \"\",\n            international_phone_number:\n              details.international_phone_number || \"\",\n            website: details.website || business.website || \"\",\n            url: details.url || \"\",\n            opening_hours: details.opening_hours || business.opening_hours,\n            data_enriched: true,\n            enrichment_source: \"place_details_api\",\n          });\n        } else {\n          // Keep original if Place Details failed\n          enrichedBusinesses.push({\n            ...business,\n            data_enriched: false,\n          });\n        }\n\n        // Rate limiting: 100ms delay between Place Details API calls\n        await new Promise((resolve) => setTimeout(resolve, 100));\n      } catch (error) {\n        console.error(`Error enriching place ${business.place_id}:`, error);\n        enrichedBusinesses.push(business);\n      }\n    }\n\n    const enrichedCount = enrichedBusinesses.filter(\n      (b) => b.data_enriched\n    ).length;\n    console.log(\n      `✅ Successfully enriched ${enrichedCount}/${businesses.length} businesses with Place Details`\n    );\n\n    return enrichedBusinesses;\n  }\n}\n\n// Foursquare Places API integration for enhanced business discovery\nclass OptimizedFoursquareAPI {\n  private apiKey: string;\n  private cache = new Map();\n  private cacheTTL = 3600000; // 1 hour\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n\n  async searchBusinesses(\n    businessType: string,\n    location: string,\n    maxResults: number\n  ) {\n    const cacheKey = `foursquare_${businessType}_${location}_${maxResults}`;\n\n    // Check cache first\n    const cached = this.cache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheTTL) {\n      console.log(\"📦 Using cached Foursquare results\");\n      return cached.data;\n    }\n\n    console.log(`🔍 Searching Foursquare: ${businessType} in ${location}`);\n\n    // Foursquare Places API v3\n    const url = `https://api.foursquare.com/v3/places/search`;\n    const params = new URLSearchParams({\n      query: businessType,\n      near: location,\n      limit: Math.min(maxResults * 2, 50).toString(), // Get more for filtering\n      fields:\n        \"fsq_id,name,location,contact,website,categories,rating,stats,hours\",\n    });\n\n    try {\n      const response = await fetch(`${url}?${params}`, {\n        headers: {\n          Authorization: this.apiKey,\n          Accept: \"application/json\",\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Foursquare API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      if (!data.results) {\n        console.log(\"❌ No Foursquare results found\");\n        return [];\n      }\n\n      // Transform Foursquare data to our business format\n      const transformedResults = data.results.map(\n        (place: {\n          fsq_id: string;\n          name: string;\n          location: {\n            lat?: number;\n            lng?: number;\n            address?: string;\n            locality?: string;\n            admin_district?: string;\n            postcode?: string;\n            country?: string;\n          };\n          contact?: { phone?: string };\n          website?: string;\n          rating?: number;\n          stats?: { total_tips?: number };\n          categories?: Array<{ name: string }>;\n          hours?: unknown;\n        }) => ({\n          place_id: place.fsq_id,\n          name: place.name,\n          formatted_address: this.formatAddress(place.location),\n          formatted_phone_number: place.contact?.phone || \"\",\n          website: place.website || \"\",\n          rating: place.rating || 0,\n          user_ratings_total: place.stats?.total_tips || 0,\n          business_status: \"OPERATIONAL\",\n          types: place.categories?.map((cat) => cat.name.toLowerCase()) || [],\n          geometry: {\n            location: {\n              lat: place.location?.lat || 0,\n              lng: place.location?.lng || 0,\n            },\n          },\n          // Foursquare-specific enhancements\n          foursquare_data: {\n            fsq_id: place.fsq_id,\n            categories: place.categories,\n            hours: place.hours,\n            stats: place.stats,\n          },\n          data_source: \"foursquare\",\n        })\n      );\n\n      // Cache results\n      this.cache.set(cacheKey, {\n        data: transformedResults,\n        timestamp: Date.now(),\n      });\n\n      console.log(\n        `📊 Found ${transformedResults.length} businesses from Foursquare`\n      );\n      return transformedResults;\n    } catch (error) {\n      console.error(\"❌ Foursquare API error:\", error);\n      return []; // Return empty array on error, don't fail the whole request\n    }\n  }\n\n  private formatAddress(location: {\n    address?: string;\n    locality?: string;\n    admin_district?: string;\n    postcode?: string;\n    country?: string;\n  }): string {\n    if (!location) return \"\";\n\n    const parts = [];\n    if (location.address) parts.push(location.address);\n    if (location.locality) parts.push(location.locality);\n    if (location.admin_district) parts.push(location.admin_district);\n    if (location.postcode) parts.push(location.postcode);\n    if (location.country) parts.push(location.country);\n\n    return parts.join(\", \");\n  }\n}\n\n// Helper function to remove duplicate businesses\nfunction removeDuplicates(businesses: unknown[]): unknown[] {\n  const uniqueBusinesses = [];\n  const seen = new Set();\n\n  for (const business of businesses) {\n    const businessObj = business as {\n      name?: string;\n      formatted_address?: string;\n    };\n    const key = `${(businessObj.name || \"\").toLowerCase()}_${(\n      businessObj.formatted_address || \"\"\n    ).toLowerCase()}`;\n    if (!seen.has(key)) {\n      seen.add(key);\n      uniqueBusinesses.push(business);\n    }\n  }\n\n  return uniqueBusinesses;\n}\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const authContext = await authenticateRequest(req);\n    console.log(\n      `🔐 Authenticated Supabase session for ${authContext.userId} (${\n        authContext.isAnonymous ? \"anonymous\" : \"authenticated\"\n      })`\n    );\n    const supabaseClient = authContext.supabaseClient;\n    const sessionUserId = authContext.sessionId;\n\n    const startTime = Date.now();\n\n    // Parse request\n    const requestData: BusinessDiscoveryRequest = await req.json();\n    const {\n      businessType,\n      location,\n      maxResults = 5,\n      budgetLimit = 50,\n      minConfidenceScore = 50,\n      tradeAssociations = false,\n      professionalLicensing = false,\n      chamberVerification = false,\n      apolloDiscovery = false,\n    } = requestData;\n\n    console.log(`🚀 Optimized Business Discovery v3.1 + Census Intelligence`);\n    console.log(\n      `📋 Request: ${businessType} in ${location} (${maxResults} leads)`\n    );\n    console.log(\n      `🎯 Enhancements: Trade:${tradeAssociations}, Licensing:${professionalLicensing}, Chamber:${chamberVerification}, Apollo:${apolloDiscovery}`\n    );\n\n    // Get API keys from Edge Function secrets (primary) or Vault (fallback)\n    let googlePlacesKey = Deno.env.get(\"GOOGLE_PLACES_API_KEY\");\n    let foursquareKey = Deno.env.get(\"FOURSQUARE_API_KEY\");\n    let censusKey = Deno.env.get(\"CENSUS_API_KEY\");\n\n    // If not in environment, try Vault\n    if (!googlePlacesKey || !foursquareKey || !censusKey) {\n      console.log(\"🔐 API keys not in environment, checking Supabase Vault...\");\n\n      const supabase = createClient(\n        authContext.supabaseUrl,\n        authContext.supabaseServiceRoleKey\n      );\n\n      if (!googlePlacesKey) {\n        const { data: googleData } = await supabase.rpc(\n          \"vault_decrypt_secret\",\n          {\n            secret_name: \"GOOGLE_PLACES_API_KEY\",\n          }\n        );\n        googlePlacesKey = googleData?.[0]?.decrypted_secret;\n      }\n\n      if (!foursquareKey) {\n        const { data: foursquareData } = await supabase.rpc(\n          \"vault_decrypt_secret\",\n          { secret_name: \"FOURSQUARE_API_KEY\" }\n        );\n        foursquareKey = foursquareData?.[0]?.decrypted_secret;\n      }\n\n      if (!censusKey) {\n        const { data: censusData } = await supabase.rpc(\n          \"vault_decrypt_secret\",\n          {\n            secret_name: \"CENSUS_API_KEY\",\n          }\n        );\n        censusKey = censusData?.[0]?.decrypted_secret;\n      }\n    }\n\n    console.log(\n      `🔑 API Keys Retrieved: Google Places: ${\n        googlePlacesKey ? \"✓ (\" + googlePlacesKey.substring(0, 8) + \"...)\" : \"✗\"\n      }, Foursquare: ${foursquareKey ? \"✓\" : \"✗\"}, Census: ${\n        censusKey ? \"✓\" : \"✗\"\n      }`\n    );\n\n    if (!googlePlacesKey) {\n      throw new Error(\n        \"Google Places API key not configured in Edge Function secrets or Vault\"\n      );\n    }\n\n    // Step 0: Census Geographic Intelligence (NEW)\n    let censusIntelligence = null;\n    if (censusKey) {\n      try {\n        console.log(\n          `📊 Analyzing geographic business density with Census data...`\n        );\n        const censusClient = new CensusAPIClient(censusKey);\n        censusIntelligence = await censusClient.getBusinessDensity(\n          businessType,\n          location\n        );\n\n        console.log(\n          `🎯 Census Intelligence: ${censusIntelligence.total_establishments} establishments, density score: ${censusIntelligence.density_score}`\n        );\n        console.log(\n          `⚡ Optimization: ${censusIntelligence.optimization.search_radius}mi radius, ${censusIntelligence.optimization.expected_results} expected results`\n        );\n      } catch (error) {\n        console.warn(\n          \"Census intelligence unavailable, using standard optimization:\",\n          error\n        );\n      }\n    }\n\n    // Initialize optimized components\n    const placesAPI = new OptimizedGooglePlacesAPI(googlePlacesKey);\n    const foursquareAPI = foursquareKey\n      ? new OptimizedFoursquareAPI(foursquareKey)\n      : null;\n    const qualityScorer = new OptimizedQualityScorer({\n      maxCostPerBusiness: budgetLimit / maxResults,\n    });\n\n    // Step 1: Search for businesses from multiple sources (ENHANCED with Census optimization)\n    const allRawBusinesses = [];\n\n    // Apply Census-optimized search parameters\n    const optimizedMaxResults = censusIntelligence\n      ? Math.min(\n          maxResults * 1.5,\n          censusIntelligence.optimization.expected_results || maxResults\n        )\n      : maxResults;\n\n    // Google Places search (with Census optimization)\n    const googleBusinesses = await placesAPI.searchBusinesses(\n      businessType,\n      location,\n      optimizedMaxResults\n    );\n    console.log(\n      `📊 Found ${googleBusinesses.length} businesses from Google Places`\n    );\n    if (googleBusinesses.length > 0) {\n      console.log(\n        `📋 First business sample:`,\n        JSON.stringify(googleBusinesses[0], null, 2)\n      );\n    }\n    allRawBusinesses.push(...googleBusinesses);\n\n    // Foursquare search (if API key available)\n    if (foursquareAPI) {\n      const foursquareBusinesses = await foursquareAPI.searchBusinesses(\n        businessType,\n        location,\n        Math.max(maxResults - googleBusinesses.length, 2) // Get additional businesses\n      );\n      console.log(\n        `📊 Found ${foursquareBusinesses.length} businesses from Foursquare`\n      );\n      allRawBusinesses.push(...foursquareBusinesses);\n    }\n\n    // Remove duplicates based on name and location similarity\n    const uniqueBusinesses = removeDuplicates(allRawBusinesses);\n    console.log(`📊 Total unique businesses: ${uniqueBusinesses.length}`);\n\n    // Step 2: Score and filter businesses\n    const scoredBusinesses = uniqueBusinesses.map((business: unknown) =>\n      qualityScorer.scoreBusiness(business)\n    );\n    const qualifiedLeads = scoredBusinesses\n      .filter((lead: BusinessLead) => lead.optimizedScore >= minConfidenceScore)\n      .slice(0, maxResults);\n\n    console.log(\n      `✅ Qualified ${qualifiedLeads.length}/${\n        scoredBusinesses.length\n      } businesses (${(\n        (qualifiedLeads.length / scoredBusinesses.length) *\n        100\n      ).toFixed(1)}%)`\n    );\n\n    // Step 3: Apply P1 enhancements based on user selections\n    const enhancedLeads = qualifiedLeads;\n    let enhancementCost = 0;\n    const optimizationStats = {\n      totalAPICallsSaved: 0,\n      averageConfidenceBoost: 0,\n      parallelProcessingUsed: 0,\n    };\n\n    if (\n      tradeAssociations ||\n      professionalLicensing ||\n      chamberVerification ||\n      apolloDiscovery\n    ) {\n      console.log(\"🚀 Applying optimized P1 enhancements...\");\n\n      // Process each lead with selected enhancements\n      for (let i = 0; i < enhancedLeads.length; i++) {\n        const lead = enhancedLeads[i];\n        let totalConfidenceBoost = 0;\n\n        // Apply Chamber of Commerce verification (free)\n        if (chamberVerification) {\n          await qualityScorer.applyChamberVerification(lead, location);\n        }\n\n        // Apply Trade Association verification (free)\n        if (tradeAssociations) {\n          await qualityScorer.applyTradeAssociationVerification(\n            lead,\n            businessType\n          );\n        }\n\n        // Apply Professional Licensing verification (free)\n        if (professionalLicensing) {\n          await qualityScorer.applyProfessionalLicensing(lead, businessType);\n        }\n\n        // Apply Apollo discovery (premium - $1.00 per organization)\n        if (apolloDiscovery) {\n          await qualityScorer.applyApolloDiscovery(lead);\n        }\n\n        // Update costs and stats\n        enhancementCost += lead.enhancementData.processingMetadata.totalCost;\n        totalConfidenceBoost +=\n          lead.enhancementData.processingMetadata.totalConfidenceBoost;\n      }\n\n      // Calculate optimization statistics\n      optimizationStats.totalAPICallsSaved = enhancedLeads.reduce(\n        (total: number, lead: BusinessLead) => {\n          return (\n            total +\n            (lead.enhancementData.processingMetadata.apisSkipped?.length || 0)\n          );\n        },\n        0\n      );\n\n      optimizationStats.averageConfidenceBoost =\n        enhancedLeads.reduce((total: number, lead: BusinessLead) => {\n          return (\n            total +\n            (lead.enhancementData.processingMetadata.totalConfidenceBoost || 0)\n          );\n        }, 0) / enhancedLeads.length;\n\n      optimizationStats.parallelProcessingUsed = enhancedLeads.filter(\n        (lead: BusinessLead) => {\n          return (\n            lead.enhancementData.processingMetadata.processingStrategy ===\n            \"parallel\"\n          );\n        }\n      ).length;\n\n      console.log(`💰 Enhancement cost: $${enhancementCost.toFixed(2)}`);\n      console.log(\n        `⚡ Optimization: ${optimizationStats.totalAPICallsSaved} API calls saved`\n      );\n      console.log(\n        `📈 Average confidence boost: +${optimizationStats.averageConfidenceBoost.toFixed(\n          1\n        )} points`\n      );\n    }\n\n    const processingTime = Date.now() - startTime;\n    const totalCost =\n      qualifiedLeads.reduce(\n        (sum: number, lead: BusinessLead) => sum + lead.validationCost,\n        0\n      ) + enhancementCost;\n\n    // Generate campaign ID\n    const campaignId = `campaign_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n\n    // Store in database (Supabase integration with new authentication)\n    if (supabaseClient) {\n      try {\n        await supabaseClient.from(\"campaigns\").insert({\n          id: campaignId,\n          business_type: businessType,\n          location: location,\n          target_count: maxResults,\n          results_count: enhancedLeads.length,\n          total_cost: totalCost,\n          enhancement_cost: enhancementCost,\n          processing_time: processingTime,\n          optimization_stats: optimizationStats,\n          user_id: authContext.userId,\n          session_user_id: sessionUserId,\n        });\n\n        // Store leads\n        const leadsToStore = enhancedLeads.map((lead: BusinessLead) => ({\n          campaign_id: campaignId,\n          business_name: lead.businessName,\n          address: lead.address,\n          phone: lead.phone,\n          website: lead.website,\n          email: lead.email,\n          confidence_score: lead.optimizedScore,\n          enhancement_data: lead.enhancementData,\n          user_id: authContext.userId,\n          session_user_id: sessionUserId,\n        }));\n\n        await supabaseClient.from(\"leads\").insert(leadsToStore);\n\n        console.log(\n          `💾 Stored campaign and ${leadsToStore.length} leads for user ${authContext.userId}`\n        );\n      } catch (error) {\n        console.error(\"Database storage error with new auth:\", error);\n      }\n    }\n\n    // Return optimized results\n    return new Response(\n      JSON.stringify({\n        success: true,\n        campaignId,\n        discoveryEngine:\n          \"Optimized Discovery Engine v3.1 + Census Intelligence\",\n        requirements: {\n          targetLeads: maxResults,\n          budgetLimit,\n          minConfidenceScore,\n        },\n        results: {\n          totalFound: enhancedLeads.length,\n          qualified: enhancedLeads.length,\n          qualificationRate: `${(\n            (enhancedLeads.length / allRawBusinesses.length) *\n            100\n          ).toFixed(1)}%`,\n          averageConfidence: Math.round(\n            enhancedLeads.reduce(\n              (sum: number, lead: BusinessLead) => sum + lead.optimizedScore,\n              0\n            ) / enhancedLeads.length\n          ),\n        },\n        // NEW: Census Geographic Intelligence\n        census_intelligence: censusIntelligence\n          ? {\n              business_density: {\n                total_establishments: censusIntelligence.total_establishments,\n                density_score: censusIntelligence.density_score,\n                confidence_multiplier:\n                  censusIntelligence.optimization.confidence_multiplier,\n              },\n              geographic_optimization: {\n                optimal_radius: censusIntelligence.optimization.search_radius,\n                expected_results:\n                  censusIntelligence.optimization.expected_results,\n                api_efficiency_score:\n                  censusIntelligence.optimization.api_efficiency_score,\n              },\n              market_insights: {\n                market_density:\n                  censusIntelligence.density_score > 50\n                    ? \"High\"\n                    : censusIntelligence.density_score > 20\n                    ? \"Medium\"\n                    : \"Low\",\n                competition_level:\n                  censusIntelligence.total_establishments > 1000\n                    ? \"High\"\n                    : censusIntelligence.total_establishments > 100\n                    ? \"Medium\"\n                    : \"Low\",\n                search_optimization:\n                  censusIntelligence.optimization.api_efficiency_score > 70\n                    ? \"Highly optimized\"\n                    : \"Standard targeting\",\n              },\n            }\n          : null,\n        optimization: {\n          processingTime: `${processingTime}ms`,\n          apiCallsSaved: optimizationStats.totalAPICallsSaved || 0,\n          parallelProcessing: optimizationStats.parallelProcessingUsed || 0,\n          averageConfidenceBoost: optimizationStats.averageConfidenceBoost || 0,\n          // Enhanced with Census intelligence\n          geographic_intelligence_applied: censusIntelligence ? true : false,\n          costOptimization: {\n            enhancementCost,\n            totalCost,\n            savingsFromIntelligentRouting:\n              (optimizationStats.totalAPICallsSaved || 0) * 0.1, // Estimated savings\n            census_optimization_savings:\n              (censusIntelligence?.optimization?.api_efficiency_score || 0) > 70\n                ? totalCost * 0.15\n                : 0, // 15% savings estimate for high-efficiency targeting\n          },\n        },\n        costs: {\n          totalCost,\n          costPerLead: totalCost / enhancedLeads.length,\n          enhancementCost,\n          validationCost: totalCost - enhancementCost,\n        },\n        leads: enhancedLeads,\n        metadata: {\n          timestamp: new Date().toISOString(),\n          version: \"3.0\",\n          optimizationsApplied: true,\n        },\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  } catch (error) {\n    console.error(\"Optimized discovery error:\", error);\n\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n});\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":17,"duration":0.256},
{"type":"measure","name":"lsp.did_open","count":40,"duration":18.595},
{"type":"mark","name":"lsp.did_open","count":41,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DEPLOYMENT_SUCCESS.md","languageId":"markdown","version":1,"text":"# 🚀 ProspectPro Supabase-First Deployment Complete!\n\n> **Important (October 8, 2025):** This deployment report references legacy JWT usage. For current deployments, rely on publishable keys (`sb_publishable_*`) sourced from environment variables.\n\n## ✅ **DEPLOYMENT STATUS**\n\n### **Edge Functions Deployed:**\n\n### **Next Steps:**\n\n## 1. **Configure Database Schema**\n\nGo to: https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/sql-editor\n\nRun this SQL to set up the tables:\n\n```sql\nCREATE TABLE IF NOT EXISTS campaigns (\n  id TEXT PRIMARY KEY,\n  business_type TEXT NOT NULL,\n  location TEXT NOT NULL,\n  target_count INTEGER DEFAULT 10,\n  budget_limit DECIMAL(10,4) DEFAULT 50.0,\n  min_confidence_score INTEGER DEFAULT 50,\n  status TEXT DEFAULT 'pending',\n  results_count INTEGER DEFAULT 0,\n  total_cost DECIMAL(10,4) DEFAULT 0,\n  processing_time_ms INTEGER,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS leads (\n  id BIGSERIAL PRIMARY KEY,\n  campaign_id TEXT NOT NULL REFERENCES campaigns(id) ON DELETE CASCADE,\n  business_name TEXT NOT NULL,\n  address TEXT,\n  phone TEXT,\n  website TEXT,\n  email TEXT,\n  confidence_score INTEGER DEFAULT 0,\n  score_breakdown JSONB,\n  validation_cost DECIMAL(10,4) DEFAULT 0,\n  cost_efficient BOOLEAN DEFAULT true,\n  scoring_recommendation TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nALTER TABLE campaigns ENABLE ROW LEVEL SECURITY;\nALTER TABLE leads ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Public read campaigns\" ON campaigns FOR SELECT USING (true);\nCREATE POLICY \"Public insert campaigns\" ON campaigns FOR INSERT WITH CHECK (true);\nCREATE POLICY \"Public read leads\" ON leads FOR SELECT USING (true);\nCREATE POLICY \"Public insert leads\" ON leads FOR INSERT WITH CHECK (true);\n\nCREATE INDEX IF NOT EXISTS idx_campaigns_created_at ON campaigns(created_at);\nCREATE INDEX IF NOT EXISTS idx_leads_campaign_id ON leads(campaign_id);\nCREATE INDEX IF NOT EXISTS idx_leads_confidence_score ON leads(confidence_score);\n```\n\n## 2. **Configure Environment Variables**\n\nGo to: https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/settings/environment-variables\n\nAdd these secrets:\n\n```\nGOOGLE_PLACES_API_KEY=your_google_places_key_here\nHUNTER_IO_API_KEY=your_hunter_io_key_here\nNEVERBOUNCE_API_KEY=your_neverbounce_key_here\nFOURSQUARE_API_KEY=your_foursquare_key_here\n```\n\n## 3. **Test Edge Functions**\n\n### Test Business Discovery:\n\n```bash\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery' \\\n  -H 'Authorization: Bearer YOUR_ANON_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"businessType\": \"restaurant\",\n    \"location\": \"San Francisco, CA\",\n    \"maxResults\": 3\n  }'\n```\n\n### Test Campaign Export:\n\n```bash\ncurl -X GET 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/campaign-export/CAMPAIGN_ID' \\\n  -H 'Authorization: Bearer YOUR_ANON_KEY' \\\n  -H 'Accept: text/csv'\n```\n\n## 4. **Deploy Static Frontend**\n\nYour frontend files are ready:\n\nUpdate the Supabase configuration in `supabase-app.js`:\n\n```javascript\nthis.supabase = createClient(\n  \"https://sriycekxdqnesdsgwiuc.supabase.co\",\n  \"sb_secret_your_key_here\" // Get from Supabase dashboard\n);\n```\n\n## 5. **Cost Comparison**\n\n| Component       | Before                 | After                         |\n| --------------- | ---------------------- | ----------------------------- |\n| **Hosting**     | Cloud Run $10-50/month | Static hosting $1-5/month     |\n| **Backend**     | Express.js server      | Supabase Edge Functions       |\n| **Database**    | Manual integration     | Native Supabase               |\n| **Deployment**  | Docker build 2-5 min   | Function deploy 30 sec        |\n| **Maintenance** | High complexity        | Minimal - managed by Supabase |\n\n## 🎯 **Architecture Benefits**\n\n1. **80% Code Reduction**: From 400+ lines server.js to 50 lines of core logic\n2. **90% Cost Reduction**: Static hosting vs. container hosting\n3. **Global Edge**: Functions run in 18+ regions worldwide\n4. **Auto-scaling**: No cold starts or capacity planning\n5. **Real-time Ready**: Native Supabase real-time subscriptions\n6. **Built-in Auth**: Supabase Auth ready when needed\n\nYour ProspectPro is now running on modern serverless architecture! 🚀\n\n## **Function URLs:**\n\nNext: Set up the database schema and environment variables in your Supabase dashboard!\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":18,"duration":0.23},
{"type":"measure","name":"lsp.did_open","count":41,"duration":2.447},
Server ready.
{"type":"mark","name":"lsp.did_open","count":42,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","languageId":"typescript","version":1,"text":"// deno-lint-ignore-file\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport {\n  authenticateRequest,\n  corsHeaders,\n  handleCORS,\n} from \"../_shared/edge-auth.ts\";\nimport { API_SECRETS, createVaultClient } from \"../_shared/vault-client.ts\";\n\n/**\n * Hunter.io Comprehensive Email Discovery & Verification Edge Function\n * Implements all Hunter.io API endpoints with cost optimization\n *\n * Pricing:\n * - Email Count (Domain Search stats): FREE\n * - Domain Search: $0.034 per search\n * - Email Finder: $0.034 per request\n * - Email Verifier: $0.01 per verification\n * - Person/Company Enrichment: $0.034 per enrichment\n *\n * Features:\n * - Secure vault integration for API keys\n * - Circuit breakers per endpoint\n * - Cost tracking and budgeting\n * - Confidence scoring\n * - Smart email prioritization\n */\n\ninterface HunterRequest {\n  action:\n    | \"domain-search\"\n    | \"email-finder\"\n    | \"email-verifier\"\n    | \"email-count\"\n    | \"person-enrichment\"\n    | \"company-enrichment\";\n\n  // Domain search parameters\n  domain?: string;\n  companyName?: string;\n  limit?: number;\n\n  // Email finder parameters\n  firstName?: string;\n  lastName?: string;\n\n  // Email verifier parameters\n  email?: string;\n\n  // Enrichment parameters\n  personEmail?: string;\n\n  // Budget control\n  maxCostPerRequest?: number;\n}\n\ninterface HunterResponse {\n  success: boolean;\n  action: string;\n  data?: any;\n  cost: number;\n  confidence?: number;\n  metadata?: {\n    requests_remaining?: number;\n    requests_used?: number;\n    reset_date?: string;\n  };\n  error?: string;\n}\n\ntype CircuitBreakerEndpoint =\n  | \"emailCount\"\n  | \"domainSearch\"\n  | \"emailFinder\"\n  | \"emailVerifier\"\n  | \"enrichment\";\n\ninterface CircuitBreakerState {\n  failures: number;\n  lastFailure: number;\n  threshold: number;\n}\n\nclass HunterAPIClient {\n  private apiKey: string;\n  private baseURL = \"https://api.hunter.io/v2\";\n  private circuitBreaker: Record<CircuitBreakerEndpoint, CircuitBreakerState> =\n    {\n      emailCount: { failures: 0, lastFailure: 0, threshold: 3 },\n      domainSearch: { failures: 0, lastFailure: 0, threshold: 3 },\n      emailFinder: { failures: 0, lastFailure: 0, threshold: 3 },\n      emailVerifier: { failures: 0, lastFailure: 0, threshold: 3 },\n      enrichment: { failures: 0, lastFailure: 0, threshold: 3 },\n    };\n  private cache = new Map();\n  private cacheTTL = 24 * 60 * 60 * 1000; // 24 hours\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n\n  /**\n   * FREE: Get email count for a domain (doesn't count against quota)\n   */\n  async getEmailCount(domain: string): Promise<HunterResponse> {\n    const endpoint = \"emailCount\";\n\n    // Check circuit breaker\n    if (this.isCircuitOpen(endpoint)) {\n      throw new Error(`Circuit breaker open for ${endpoint}`);\n    }\n\n    try {\n      const url = `${this.baseURL}/email-count?domain=${encodeURIComponent(\n        domain\n      )}&api_key=${this.apiKey}`;\n\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.errors?.[0]?.details || \"Email count failed\");\n      }\n\n      this.resetCircuitBreaker(endpoint);\n\n      return {\n        success: true,\n        action: \"email-count\",\n        data: {\n          domain,\n          total: data.data.total,\n          personal_emails: data.data.personal_emails,\n          generic_emails: data.data.generic_emails,\n        },\n        cost: 0, // FREE\n        metadata: {\n          requests_remaining: data.meta.requests?.remaining,\n          requests_used: data.meta.requests?.used,\n        },\n      };\n    } catch (error) {\n      this.recordFailure(endpoint);\n      throw error;\n    }\n  }\n\n  /**\n   * PAID: Domain search - find all emails for a domain\n   * Cost: $0.034 per search\n   */\n  async domainSearch(domain: string, limit = 10): Promise<HunterResponse> {\n    const endpoint = \"domainSearch\";\n    const cost = 0.034;\n\n    // Check circuit breaker\n    if (this.isCircuitOpen(endpoint)) {\n      throw new Error(`Circuit breaker open for ${endpoint}`);\n    }\n\n    // Check cache first\n    const cacheKey = `domain_search_${domain}_${limit}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheTTL) {\n      console.log(`📦 Using cached domain search for ${domain}`);\n      return { ...cached.data, cost: 0 }; // No cost for cached results\n    }\n\n    try {\n      const url = `${this.baseURL}/domain-search?domain=${encodeURIComponent(\n        domain\n      )}&limit=${limit}&api_key=${this.apiKey}`;\n\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.errors?.[0]?.details || \"Domain search failed\");\n      }\n\n      this.resetCircuitBreaker(endpoint);\n\n      const result: HunterResponse = {\n        success: true,\n        action: \"domain-search\",\n        data: {\n          domain,\n          organization: data.data.organization,\n          emails: data.data.emails.map((email: any) => ({\n            value: email.value,\n            type: email.type,\n            confidence: email.confidence,\n            firstName: email.first_name,\n            lastName: email.last_name,\n            position: email.position,\n            seniority: email.seniority,\n            department: email.department,\n            linkedin: email.linkedin,\n            twitter: email.twitter,\n            phone_number: email.phone_number,\n          })),\n          pattern: data.data.pattern,\n          webmail: data.data.webmail,\n        },\n        cost,\n        confidence: data.data.emails.length > 0 ? 85 : 0,\n        metadata: {\n          requests_remaining: data.meta.requests?.remaining,\n          requests_used: data.meta.requests?.used,\n        },\n      };\n\n      // Cache the result\n      this.cache.set(cacheKey, {\n        data: result,\n        timestamp: Date.now(),\n      });\n\n      return result;\n    } catch (error) {\n      this.recordFailure(endpoint);\n      throw error;\n    }\n  }\n\n  /**\n   * PAID: Email finder - find email for a specific person\n   * Cost: $0.034 per request\n   */\n  async emailFinder(\n    domain: string,\n    firstName: string,\n    lastName: string\n  ): Promise<HunterResponse> {\n    const endpoint = \"emailFinder\";\n    const cost = 0.034;\n\n    // Check circuit breaker\n    if (this.isCircuitOpen(endpoint)) {\n      throw new Error(`Circuit breaker open for ${endpoint}`);\n    }\n\n    // Check cache first\n    const cacheKey = `email_finder_${domain}_${firstName}_${lastName}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheTTL) {\n      console.log(`📦 Using cached email finder for ${firstName} ${lastName}`);\n      return { ...cached.data, cost: 0 };\n    }\n\n    try {\n      const url = `${this.baseURL}/email-finder?domain=${encodeURIComponent(\n        domain\n      )}&first_name=${encodeURIComponent(\n        firstName\n      )}&last_name=${encodeURIComponent(lastName)}&api_key=${this.apiKey}`;\n\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.errors?.[0]?.details || \"Email finder failed\");\n      }\n\n      this.resetCircuitBreaker(endpoint);\n\n      const result: HunterResponse = {\n        success: true,\n        action: \"email-finder\",\n        data: {\n          email: data.data.email,\n          firstName: data.data.first_name,\n          lastName: data.data.last_name,\n          position: data.data.position,\n          company: data.data.company,\n          linkedin: data.data.linkedin,\n          twitter: data.data.twitter,\n          phone_number: data.data.phone_number,\n          score: data.data.score,\n          verification: data.data.verification,\n        },\n        cost,\n        confidence: data.data.score || 0,\n        metadata: {\n          requests_remaining: data.meta.requests?.remaining,\n          requests_used: data.meta.requests?.used,\n        },\n      };\n\n      // Cache the result\n      this.cache.set(cacheKey, {\n        data: result,\n        timestamp: Date.now(),\n      });\n\n      return result;\n    } catch (error) {\n      this.recordFailure(endpoint);\n      throw error;\n    }\n  }\n\n  /**\n   * PAID: Email verifier - verify email deliverability\n   * Cost: $0.01 per verification\n   */\n  async emailVerifier(email: string): Promise<HunterResponse> {\n    const endpoint = \"emailVerifier\";\n    const cost = 0.01;\n\n    // Check circuit breaker\n    if (this.isCircuitOpen(endpoint)) {\n      throw new Error(`Circuit breaker open for ${endpoint}`);\n    }\n\n    // Check cache first\n    const cacheKey = `email_verifier_${email}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheTTL) {\n      console.log(`📦 Using cached email verification for ${email}`);\n      return { ...cached.data, cost: 0 };\n    }\n\n    try {\n      const url = `${this.baseURL}/email-verifier?email=${encodeURIComponent(\n        email\n      )}&api_key=${this.apiKey}`;\n\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(\n          data.errors?.[0]?.details || \"Email verification failed\"\n        );\n      }\n\n      this.resetCircuitBreaker(endpoint);\n\n      const result: HunterResponse = {\n        success: true,\n        action: \"email-verifier\",\n        data: {\n          email: data.data.email,\n          status: data.data.status,\n          result: data.data.result,\n          score: data.data.score,\n          regexp: data.data.regexp,\n          gibberish: data.data.gibberish,\n          disposable: data.data.disposable,\n          webmail: data.data.webmail,\n          mx_records: data.data.mx_records,\n          smtp_server: data.data.smtp_server,\n          smtp_check: data.data.smtp_check,\n          accept_all: data.data.accept_all,\n          block: data.data.block,\n        },\n        cost,\n        confidence: data.data.score || 0,\n        metadata: {\n          requests_remaining: data.meta.requests?.remaining,\n          requests_used: data.meta.requests?.used,\n        },\n      };\n\n      // Cache the result\n      this.cache.set(cacheKey, {\n        data: result,\n        timestamp: Date.now(),\n      });\n\n      return result;\n    } catch (error) {\n      this.recordFailure(endpoint);\n      throw error;\n    }\n  }\n\n  /**\n   * PAID: Person enrichment - get details about a person\n   * Cost: $0.034 per enrichment\n   */\n  async personEnrichment(email: string): Promise<HunterResponse> {\n    const endpoint = \"enrichment\";\n    const cost = 0.034;\n\n    // Check circuit breaker\n    if (this.isCircuitOpen(endpoint)) {\n      throw new Error(`Circuit breaker open for ${endpoint}`);\n    }\n\n    try {\n      const url = `${this.baseURL}/email-enrichment?email=${encodeURIComponent(\n        email\n      )}&api_key=${this.apiKey}`;\n\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(\n          data.errors?.[0]?.details || \"Person enrichment failed\"\n        );\n      }\n\n      this.resetCircuitBreaker(endpoint);\n\n      return {\n        success: true,\n        action: \"person-enrichment\",\n        data: {\n          email: data.data.email,\n          firstName: data.data.first_name,\n          lastName: data.data.last_name,\n          company: data.data.company,\n          position: data.data.position,\n          seniority: data.data.seniority,\n          department: data.data.department,\n          linkedin: data.data.linkedin,\n          twitter: data.data.twitter,\n          phone_number: data.data.phone_number,\n        },\n        cost,\n        confidence: 80,\n        metadata: {\n          requests_remaining: data.meta.requests?.remaining,\n          requests_used: data.meta.requests?.used,\n        },\n      };\n    } catch (error) {\n      this.recordFailure(endpoint);\n      throw error;\n    }\n  }\n\n  /**\n   * PAID: Company enrichment - get details about a company\n   * Cost: $0.034 per enrichment\n   */\n  async companyEnrichment(domain: string): Promise<HunterResponse> {\n    const endpoint = \"enrichment\";\n    const cost = 0.034;\n\n    // Check circuit breaker\n    if (this.isCircuitOpen(endpoint)) {\n      throw new Error(`Circuit breaker open for ${endpoint}`);\n    }\n\n    try {\n      const url = `${\n        this.baseURL\n      }/domain-enrichment?domain=${encodeURIComponent(domain)}&api_key=${\n        this.apiKey\n      }`;\n\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(\n          data.errors?.[0]?.details || \"Company enrichment failed\"\n        );\n      }\n\n      this.resetCircuitBreaker(endpoint);\n\n      return {\n        success: true,\n        action: \"company-enrichment\",\n        data: {\n          domain: data.data.domain,\n          organization: data.data.organization,\n          country: data.data.country,\n          description: data.data.description,\n          industry: data.data.industry,\n          size: data.data.size,\n          founded: data.data.founded,\n          revenue: data.data.revenue,\n          linkedin: data.data.linkedin,\n          twitter: data.data.twitter,\n          facebook: data.data.facebook,\n          technologies: data.data.technologies,\n        },\n        cost,\n        confidence: 75,\n        metadata: {\n          requests_remaining: data.meta.requests?.remaining,\n          requests_used: data.meta.requests?.used,\n        },\n      };\n    } catch (error) {\n      this.recordFailure(endpoint);\n      throw error;\n    }\n  }\n\n  // Circuit breaker management\n  private isCircuitOpen(endpoint: CircuitBreakerEndpoint): boolean {\n    const breaker = this.circuitBreaker[endpoint];\n    if (!breaker) return false;\n\n    // Reset after 5 minutes\n    if (Date.now() - breaker.lastFailure > 5 * 60 * 1000) {\n      breaker.failures = 0;\n      return false;\n    }\n\n    return breaker.failures >= breaker.threshold;\n  }\n\n  private recordFailure(endpoint: CircuitBreakerEndpoint): void {\n    const breaker = this.circuitBreaker[endpoint];\n    if (breaker) {\n      breaker.failures++;\n      breaker.lastFailure = Date.now();\n    }\n  }\n\n  private resetCircuitBreaker(endpoint: CircuitBreakerEndpoint): void {\n    const breaker = this.circuitBreaker[endpoint];\n    if (breaker) {\n      breaker.failures = 0;\n    }\n  }\n}\n\nserve(async (req) => {\n  // Handle CORS preflight\n  const corsResponse = handleCORS(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    console.log(`🔍 Hunter.io Email Enrichment Edge Function`);\n\n    const authContext = await authenticateRequest(req);\n    console.log(\n      `🔐 Authenticated Supabase session for ${authContext.userId} (${\n        authContext.isAnonymous ? \"anonymous\" : \"authenticated\"\n      })`\n    );\n\n    // Get Hunter.io API key from vault\n    const vaultClient = createVaultClient();\n    const hunterApiKey = await vaultClient.getSecret(API_SECRETS.HUNTER_IO);\n\n    // Parse request\n    const requestData: HunterRequest = await req.json();\n    const { action, maxCostPerRequest = 2.0 } = requestData;\n\n    console.log(`📋 Action: ${action}`);\n\n    // Initialize Hunter.io client\n    const hunterClient = new HunterAPIClient(hunterApiKey);\n\n    // Route to appropriate action\n    let result: HunterResponse;\n\n    switch (action) {\n      case \"email-count\":\n        if (!requestData.domain) {\n          throw new Error(\"domain is required for email-count\");\n        }\n        result = await hunterClient.getEmailCount(requestData.domain);\n        break;\n\n      case \"domain-search\":\n        if (!requestData.domain) {\n          throw new Error(\"domain is required for domain-search\");\n        }\n        result = await hunterClient.domainSearch(\n          requestData.domain,\n          requestData.limit || 10\n        );\n        break;\n\n      case \"email-finder\":\n        if (\n          !requestData.domain ||\n          !requestData.firstName ||\n          !requestData.lastName\n        ) {\n          throw new Error(\n            \"domain, firstName, and lastName are required for email-finder\"\n          );\n        }\n        result = await hunterClient.emailFinder(\n          requestData.domain,\n          requestData.firstName,\n          requestData.lastName\n        );\n        break;\n\n      case \"email-verifier\":\n        if (!requestData.email) {\n          throw new Error(\"email is required for email-verifier\");\n        }\n        result = await hunterClient.emailVerifier(requestData.email);\n        break;\n\n      case \"person-enrichment\":\n        if (!requestData.personEmail) {\n          throw new Error(\"personEmail is required for person-enrichment\");\n        }\n        result = await hunterClient.personEnrichment(requestData.personEmail);\n        break;\n\n      case \"company-enrichment\":\n        if (!requestData.domain) {\n          throw new Error(\"domain is required for company-enrichment\");\n        }\n        result = await hunterClient.companyEnrichment(requestData.domain);\n        break;\n\n      default:\n        throw new Error(`Unknown action: ${action}`);\n    }\n\n    // Check cost limit\n    if (result.cost > maxCostPerRequest) {\n      console.warn(\n        `⚠️ Cost limit exceeded: $${result.cost} > $${maxCostPerRequest}`\n      );\n    }\n\n    console.log(`✅ Hunter.io ${action} completed - Cost: $${result.cost}`);\n\n    return new Response(\n      JSON.stringify({\n        ...result,\n        timestamp: new Date().toISOString(),\n        version: \"1.0\",\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  } catch (error) {\n    console.error(\"Hunter.io enrichment error:\", error);\n\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n});\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":19,"duration":0.418},
{"type":"measure","name":"lsp.did_open","count":42,"duration":6.852},
{"type":"mark","name":"lsp.did_open","count":43,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport {\n  authenticateRequest,\n  corsHeaders,\n  handleCORS,\n} from \"../_shared/edge-auth.ts\";\n\n// Simplified Business Discovery with New Authentication\n// Test version for new API key format\n\ninterface StorageResult {\n  success: boolean;\n  campaignStored?: boolean;\n  leadsStored?: number;\n  error?: string;\n  leadsError?: string;\n}\n\nserve(async (req) => {\n  // Handle CORS preflight\n  const corsResponse = handleCORS(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    console.log(`🚀 Business Discovery with New Authentication`);\n\n    const authContext = await authenticateRequest(req);\n    console.log(\n      `🔐 Authenticated Supabase session for ${authContext.userId} (${\n        authContext.isAnonymous ? \"anonymous\" : \"authenticated\"\n      })`\n    );\n    const supabaseClient = authContext.supabaseClient;\n    const sessionUserId = authContext.sessionId;\n\n    // Parse request\n    const requestData = await req.json();\n    const {\n      businessType = \"restaurant\",\n      location = \"Seattle, WA\",\n      maxResults = 2,\n    } = requestData;\n\n    console.log(\n      `📋 Request: ${businessType} in ${location} (${maxResults} results)`\n    );\n\n    // Mock some business data for testing\n    const mockBusinesses = [\n      {\n        businessName: `Sample ${businessType} 1`,\n        address: `123 Main St, ${location}`,\n        phone: \"(555) 123-4567\",\n        website: \"https://example1.com\",\n        email: \"contact@example1.com\",\n        optimizedScore: 85,\n        validationCost: 0.02,\n        enhancementData: {\n          verificationSources: [\"google_places\"],\n          apolloVerified: false,\n          chamberVerified: false,\n          licenseVerified: false,\n          processingMetadata: {\n            totalCost: 0.02,\n            totalConfidenceBoost: 0,\n            apisSkipped: [],\n            processingStrategy: \"basic\",\n          },\n        },\n      },\n      {\n        businessName: `Sample ${businessType} 2`,\n        address: `456 Oak Ave, ${location}`,\n        phone: \"(555) 234-5678\",\n        website: \"https://example2.com\",\n        email: \"info@example2.com\",\n        optimizedScore: 78,\n        validationCost: 0.02,\n        enhancementData: {\n          verificationSources: [\"google_places\"],\n          apolloVerified: false,\n          chamberVerified: false,\n          licenseVerified: false,\n          processingMetadata: {\n            totalCost: 0.02,\n            totalConfidenceBoost: 0,\n            apisSkipped: [],\n            processingStrategy: \"basic\",\n          },\n        },\n      },\n    ];\n\n    const campaignId = `test_campaign_${Date.now()}`;\n\n    // Test database storage with new authentication\n    let dbStorageResult: StorageResult | null = null;\n    if (supabaseClient) {\n      try {\n        const campaignData = {\n          id: campaignId,\n          business_type: businessType,\n          location: location,\n          target_count: maxResults,\n          results_count: mockBusinesses.length,\n          total_cost: 0.04,\n          processing_time_ms: 500,\n          status: \"completed\",\n          user_id: authContext.userId,\n          session_user_id: sessionUserId,\n        };\n\n        const { error: campaignError } = await supabaseClient\n          .from(\"campaigns\")\n          .insert(campaignData);\n\n        if (campaignError) {\n          dbStorageResult = { success: false, error: campaignError.message };\n        } else {\n          dbStorageResult = { success: true, campaignStored: true };\n\n          // Try to store leads\n          const leadsData = mockBusinesses.map((lead) => ({\n            campaign_id: campaignId,\n            business_name: lead.businessName,\n            address: lead.address,\n            phone: lead.phone,\n            website: lead.website,\n            email: lead.email,\n            confidence_score: lead.optimizedScore,\n            enrichment_data: lead.enhancementData,\n            user_id: authContext.userId,\n            session_user_id: sessionUserId,\n          }));\n\n          const { error: leadsError } = await supabaseClient\n            .from(\"leads\")\n            .insert(leadsData);\n\n          if (leadsError) {\n            if (dbStorageResult) {\n              dbStorageResult.leadsError = leadsError.message;\n            }\n          } else if (dbStorageResult) {\n            dbStorageResult.leadsStored = leadsData.length;\n          }\n        }\n\n        console.log(`💾 Database storage result:`, dbStorageResult);\n      } catch (error) {\n        dbStorageResult = {\n          success: false,\n          error: error instanceof Error ? error.message : \"Storage failed\",\n        };\n      }\n    }\n\n    const response = {\n      success: true,\n      campaignId,\n      discoveryEngine: \"Test Discovery with New Authentication v1.0\",\n      authentication: {\n        userId: authContext.userId,\n        sessionId: sessionUserId,\n        isAnonymous: authContext.isAnonymous,\n      },\n      requirements: {\n        targetLeads: maxResults,\n        businessType,\n        location,\n      },\n      results: {\n        totalFound: mockBusinesses.length,\n        qualified: mockBusinesses.length,\n        averageConfidence: Math.round(\n          mockBusinesses.reduce((sum, lead) => sum + lead.optimizedScore, 0) /\n            mockBusinesses.length\n        ),\n      },\n      database_storage: dbStorageResult,\n      leads: mockBusinesses,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        version: \"test-1.0\",\n        authenticationUpdated: true,\n      },\n    };\n\n    return new Response(JSON.stringify(response, null, 2), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    console.error(\"❌ Test discovery error:\", error);\n\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n});\n"}}},
{"type":"measure","name":"lsp.did_open","count":43,"duration":4.464},
{"type":"mark","name":"lsp.did_open","count":44,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport type { SupabaseClient } from \"https://esm.sh/@supabase/supabase-js@2.38.0\";\nimport type { AuthenticatedRequestContext } from \"../_shared/edge-auth.ts\";\nimport {\n  authenticateRequest,\n  corsHeaders,\n  handleCORS,\n} from \"../_shared/edge-auth.ts\";\n\n// Test Edge Function - Supabase Session Authentication Diagnostics\n\ninterface DatabaseDiagnostics {\n  success: boolean;\n  access: Record<string, boolean>;\n  error?: string;\n}\n\ninterface QueryDiagnostics {\n  success: boolean;\n  rowCount?: number;\n  error?: string;\n  sampleCampaignIds?: string[];\n}\n\ninterface RequestAuthDiagnostics {\n  authorizationHeaderPresent: boolean;\n  userId: string;\n  sessionId: string | null;\n  email: string | null;\n  isAnonymous: boolean;\n}\n\ntype EnvironmentDiagnostics = Record<string, boolean>;\n\nserve(async (req) => {\n  const corsResponse = handleCORS(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    console.log(\"🧪 Running Supabase session authentication diagnostics...\");\n\n    const authContext = await authenticateRequest(req);\n    const supabaseClient = authContext.supabaseClient;\n\n    const requestDiagnostics = buildRequestDiagnostics(authContext, req);\n    const databaseDiagnostics = await runDatabaseDiagnostics(supabaseClient);\n    const queryDiagnostics = await fetchSampleCampaigns(supabaseClient);\n\n    const environmentDiagnostics: EnvironmentDiagnostics = {\n      SUPABASE_URL: Boolean(Deno.env.get(\"SUPABASE_URL\")),\n      SUPABASE_ANON_KEY: Boolean(Deno.env.get(\"SUPABASE_ANON_KEY\")),\n      VITE_SUPABASE_ANON_KEY: Boolean(Deno.env.get(\"VITE_SUPABASE_ANON_KEY\")),\n      SUPABASE_SERVICE_ROLE_KEY: Boolean(\n        Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\")\n      ),\n      SUPABASE_SECRET_KEY: Boolean(Deno.env.get(\"SUPABASE_SECRET_KEY\")),\n    };\n\n    const response = {\n      success: true,\n      timestamp: new Date().toISOString(),\n      authentication: {\n        request: requestDiagnostics,\n        databaseTest: databaseDiagnostics,\n        queryTest: queryDiagnostics,\n      },\n      environment: environmentDiagnostics,\n      recommendations: generateRecommendations(\n        authContext,\n        databaseDiagnostics,\n        environmentDiagnostics,\n        queryDiagnostics\n      ),\n    };\n\n    return new Response(JSON.stringify(response, null, 2), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    console.error(\"❌ Authentication diagnostics failed:\", error);\n\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n});\n\nfunction buildRequestDiagnostics(\n  authContext: AuthenticatedRequestContext,\n  req: Request\n): RequestAuthDiagnostics {\n  return {\n    authorizationHeaderPresent: req.headers.has(\"Authorization\"),\n    userId: authContext.userId,\n    sessionId: authContext.sessionId,\n    email: authContext.email,\n    isAnonymous: authContext.isAnonymous,\n  };\n}\n\nasync function runDatabaseDiagnostics(\n  supabaseClient: SupabaseClient\n): Promise<DatabaseDiagnostics> {\n  const tables = [\"campaigns\", \"leads\", \"dashboard_exports\"] as const;\n  const access: Record<string, boolean> = {};\n  const errors: string[] = [];\n\n  for (const table of tables) {\n    try {\n      const { error } = await supabaseClient.from(table).select(\"id\").limit(1);\n      access[table] = !error;\n      if (error) {\n        errors.push(`${table}: ${error.message}`);\n      }\n    } catch (error) {\n      access[table] = false;\n      errors.push(\n        `${table}: ${error instanceof Error ? error.message : \"Unknown error\"}`\n      );\n    }\n  }\n\n  return {\n    success: Object.values(access).some(Boolean),\n    access,\n    error: errors.length ? errors.join(\"; \") : undefined,\n  };\n}\n\nasync function fetchSampleCampaigns(\n  supabaseClient: SupabaseClient\n): Promise<QueryDiagnostics> {\n  try {\n    const { data, error } = await supabaseClient\n      .from(\"campaigns\")\n      .select(\"id\")\n      .limit(3);\n\n    if (error) {\n      return { success: false, error: error.message };\n    }\n\n    const rows = data ?? [];\n    return {\n      success: true,\n      rowCount: rows.length,\n      sampleCampaignIds: rows.map((row) => String(row.id)),\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Query failed\",\n    };\n  }\n}\n\nfunction generateRecommendations(\n  authContext: AuthenticatedRequestContext,\n  dbDiagnostics: DatabaseDiagnostics,\n  envDiagnostics: EnvironmentDiagnostics,\n  queryDiagnostics: QueryDiagnostics\n): string[] {\n  const recommendations: string[] = [];\n\n  if (!envDiagnostics.SUPABASE_URL || !envDiagnostics.SUPABASE_ANON_KEY) {\n    recommendations.push(\n      \"❌ Missing Supabase URL or anon key - update environment configuration\"\n    );\n  }\n\n  if (!envDiagnostics.SUPABASE_SERVICE_ROLE_KEY) {\n    recommendations.push(\n      \"⚠️ Service role key missing - vault access and server-side operations may fail\"\n    );\n  }\n\n  if (dbDiagnostics.success === false) {\n    recommendations.push(\n      dbDiagnostics.error\n        ? `❌ Database diagnostics failed: ${dbDiagnostics.error}`\n        : \"❌ Database diagnostics failed - check RLS policies\"\n    );\n  } else {\n    const accessibleTables = Object.entries(dbDiagnostics.access)\n      .filter(([, hasAccess]) => hasAccess)\n      .map(([table]) => table)\n      .join(\", \");\n    recommendations.push(\n      `✅ Database access confirmed for: ${accessibleTables}`\n    );\n  }\n\n  if (!queryDiagnostics.success) {\n    recommendations.push(\n      queryDiagnostics.error\n        ? `⚠️ Sample campaign query failed: ${queryDiagnostics.error}`\n        : \"⚠️ Unable to read campaigns - verify user permissions\"\n    );\n  }\n\n  if (authContext.isAnonymous) {\n    recommendations.push(\n      \"ℹ️ Anonymous session detected - upgrade to authenticated user for full access\"\n    );\n  }\n\n  if (recommendations.length === 0) {\n    recommendations.push(\"✅ Supabase authentication flow looks healthy\");\n  }\n\n  return recommendations;\n}\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":20,"duration":0.376},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_open","count":44,"duration":3.854},
{"type":"mark","name":"lsp.did_open","count":45,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/EDGE_FUNCTION_AUTH_UPDATE_GUIDE.md","languageId":"markdown","version":1,"text":"# 🔐 Edge Function Authentication Update - Complete Guide\n\n## October 9, 2025 — Supabase-Native Session Enforcement\n\n### 🎯 **STATUS: EDGE FUNCTIONS REQUIRE REAL SUPABASE SESSIONS**\n\n✅ **COMPLETED THIS ROUND:**\n\n- Replaced the custom JWKS verifier with Supabase's supported `auth.getUser` flow\n- Updated every production Edge Function to consume the new `authenticateRequest`\n- Preserved automatic user + session binding when writing campaigns, leads, and exports\n- Added an official reference function (`test-official-auth`) that exercises the supported pattern end-to-end\n- Refreshed developer tooling and docs to reflect the simplified contract (session token only)\n\n🚨 **AUTH REQUIREMENT:**\n\n- Authenticated Edge Functions **must** receive a Supabase session JWT (user sign-in token)\n- Publishable or service-role keys **cannot** substitute for end-user Authorization headers\n- Frontend and service callers are responsible for forwarding `Authorization: Bearer <supabase_session_jwt>` on every request\n\n---\n\n### 🔧 **CALLER CHECKLIST**\n\n1. Fetch the active session token in the client:\n\n```ts\nconst session = await supabase.auth.getSession();\nconst accessToken = session.data.session?.access_token;\n```\n\n2. Attach the token when invoking an Edge Function:\n\n```ts\nconst response = await fetch(edgeFunctionUrl, {\n  method: \"POST\",\n  headers: {\n    Authorization: `Bearer ${accessToken}`,\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify(payload),\n});\n```\n\n3. For service automations, mint a short-lived service-role JWT via the Supabase Admin API and forward it exactly the same way.\n\nKeep tokens fresh by subscribing to `onAuthStateChange` and updating any cached headers when Supabase rotates the session.\n\n---\n\n### 🧱 **IMPLEMENTATION SNAPSHOT**\n\n```ts\n// /supabase/functions/_shared/edge-auth.ts\nexport async function authenticateRequest(req: Request) {\n  // 1. Create a Supabase client with the caller's Authorization header\n  // 2. Call supabaseClient.auth.getUser(token) to validate the session\n  // 3. Return the hydrated client and user context (id, email, anonymous flag, session id, token claims)\n}\n\nexport const corsHeaders = {\n  /* shared CORS headers */\n};\nexport function handleCORS(request: Request) {\n  /* OPTIONS preflight helper */\n}\n```\n\nEvery production Edge Function (`business-discovery-optimized`, `enrichment-hunter`, `campaign-export-user-aware`, the test harnesses, and background diagnostics) now consumes the simplified context:\n\n- `authContext.userId` → Postgres `user_id` columns\n- `authContext.sessionId` → Postgres `session_user_id` columns (falls back to `null` when not present)\n- `authContext.isAnonymous` / `authContext.email` → logging and analytics\n- `authContext.supabaseClient` → automatically scoped client with RLS enforced\n\n---\n\n### 🧪 **HOW TO TEST IT**\n\n| Scenario                    | Command                                                                                                                                                          | Expected Result                                                 |\n| --------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| Edge Function diagnostics   | `curl -X POST https://.../functions/v1/test-new-auth -H \"Authorization: Bearer <SESSION>\" -d '{\"diagnostics\":true}'`                                             | JSON payload confirming database access & environment readiness |\n| Official pattern smoke test | `curl -X POST https://.../functions/v1/test-official-auth -H \"Authorization: Bearer <SESSION>\" -d '{}'`                                                          | Confirms RLS queries succeed with supplied session              |\n| Business discovery test     | `curl -X POST https://.../functions/v1/test-business-discovery -H \"Authorization: Bearer <SESSION>\" -d '{\"businessType\":\"coffee shop\",\"location\":\"Austin, TX\"}'` | Inserts mocked campaign/leads tied to caller's user id          |\n\n> Replace `<SESSION>` with an actual Supabase session JWT fetched via Supabase CLI, Admin API, or the frontend.\n\n---\n\n### 🚀 **NEXT STEPS FOR CALLERS**\n\n1. **Propagate session JWTs** throughout the frontend and automation scripts (reference checklist above).\n2. **Monitor session expiry** — refresh tokens during long-running workflows to avoid mid-flight 401s.\n3. **Rotate service-role tokens** on a schedule if background jobs call these functions without a user session.\n\n---\n\n### 📊 **SECURITY & OBSERVABILITY**\n\n- ✅ RLS enforcement automatically scopes queries to the authenticated user.\n- ✅ `user_id` and `session_user_id` continue to populate on all writes.\n- ✅ No project secrets or JWKS endpoints are required inside Edge Functions.\n- 📈 `test-new-auth` returns environment + data-access diagnostics to validate new deployments quickly.\n- ⚠️ Anonymous sessions still authenticate, but output is limited—promote users for full data access.\n\n---\n\n### ✅ **VERIFICATION CHECKLIST (POST-MIGRATION)**\n\n- [ ] Frontend is forwarding real session tokens\n- [ ] Edge Functions succeed via `test-official-auth`\n- [ ] Discovery/enrichment/export runs store `user_id` and `session_user_id`\n- [ ] No references to JWKS or legacy JWT helpers remain in the codebase\n- [ ] Documentation and automation scripts updated to reflect the simplified contract\n\n**Status:** Migration to the Supabase-supported authentication pattern is complete. Continue using session JWTs for every authenticated invocation.\n"}}},
{"type":"measure","name":"lsp.did_open","count":45,"duration":0.072},
{"type":"mark","name":"lsp.did_open","count":46,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","languageId":"typescript","version":1,"text":"export * from \"./edge-auth.ts\";\n"}}},
{"type":"measure","name":"lsp.testing_update","count":21,"duration":2.642},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":22,"duration":0.244},
{"type":"measure","name":"lsp.did_open","count":46,"duration":2.176},
{"type":"mark","name":"lsp.did_open","count":47,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport {\n  authenticateRequest,\n  corsHeaders,\n  handleCORS,\n} from \"../_shared/edge-auth.ts\";\n\n// Test Edge Function - Supabase Official Authentication Pattern\n\nserve(async (req) => {\n  const corsResponse = handleCORS(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    console.log(\"🧪 Testing Supabase's official auth pattern...\");\n\n    const authContext = await authenticateRequest(req);\n    console.log(\n      `🔐 Authenticated user ${authContext.userId} (anonymous: ${authContext.isAnonymous})`\n    );\n\n    // Test database operations with RLS enforced automatically\n    const supabaseClient = authContext.supabaseClient;\n\n    // Test campaigns table access\n    const { data: campaigns, error: campaignsError } = await supabaseClient\n      .from(\"campaigns\")\n      .select(\"id, business_type, location\")\n      .limit(3);\n\n    if (campaignsError) {\n      console.warn(\"Campaigns query error:\", campaignsError.message);\n    }\n\n    // Test leads table access\n    const { data: leads, error: leadsError } = await supabaseClient\n      .from(\"leads\")\n      .select(\"id, business_name, campaign_id\")\n      .limit(3);\n\n    if (leadsError) {\n      console.warn(\"Leads query error:\", leadsError.message);\n    }\n\n    const response = {\n      success: true,\n      timestamp: new Date().toISOString(),\n      authenticationMethod: \"Supabase Official Pattern\",\n      user: {\n        id: authContext.user.id,\n        email: authContext.user.email,\n        isAnonymous: authContext.isAnonymous,\n        sessionId: authContext.sessionId,\n      },\n      databaseAccess: {\n        campaigns: {\n          accessible: !campaignsError,\n          count: campaigns?.length || 0,\n          error: campaignsError?.message,\n          sampleIds: campaigns?.map((c) => c.id).slice(0, 3),\n        },\n        leads: {\n          accessible: !leadsError,\n          count: leads?.length || 0,\n          error: leadsError?.message,\n          sampleIds: leads?.map((l) => l.id).slice(0, 3),\n        },\n      },\n      recommendations: [\n        \"✅ Using Supabase's built-in JWT verification\",\n        \"✅ RLS policies enforced automatically\",\n        \"✅ No manual JWKS fetching required\",\n        campaignsError && leadsError\n          ? \"⚠️ Check RLS policies - no table access\"\n          : \"✅ Database access working with RLS\",\n      ].filter(Boolean),\n    };\n\n    return new Response(JSON.stringify(response, null, 2), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    console.error(\"❌ Official auth pattern test failed:\", error);\n\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n        authenticationMethod: \"Supabase Official Pattern\",\n      }),\n      {\n        status: 401,\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n});\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":23,"duration":0.236},
{"type":"measure","name":"lsp.did_open","count":47,"duration":1.448},
{"type":"mark","name":"lsp.did_open","count":48,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/README.md","languageId":"markdown","version":1,"text":"# ProspectPro v4.3 - Tier-Aware Background Discovery Platform\n\n**🚀 PRODUCTION READY** - User-Aware Business Discovery with Complete Authentication\n\n## ✨ Live Platform\n\n**🌐 Access:** https://prospect-fyhedobh1-appsmithery.vercel.app\n\n## 🎯 Core Features\n\n### 🔐 User-Aware System\n\n- **Anonymous Users:** Session-based workflow with automatic campaign tracking\n- **Authenticated Users:** Permanent campaign storage with complete history\n- **Seamless Upgrade:** Anonymous campaigns automatically link upon signup\n- **Data Isolation:** User-specific access with database-level security\n\n### 📊 Business Discovery\n\n- **16 Business Categories** with 300+ optimized business types\n- **Asynchronous Background Jobs** with real-time progress + campaign inserts\n- **Multi-Source Discovery** - Google Places, Place Details, and Foursquare with dedupe\n- **Census-Guided Targeting** - Automatic radius + density scoring when `CENSUS_API_KEY` is present\n- **Verified Contact Data** - No fake emails or generated patterns\n- **3-Tier Data Enhancement** with progressive pricing and transparent feature controls\n\n## 🎯 Tier Structure\n\n### Base Tier ($0.15/lead) - \"Essential Business Data\"\n\n**Perfect for targeted outreach campaigns**\n\n- ✅ Business verification\n- ✅ Company data (name, industry, size)\n- ✅ Phone & address validation\n- ✅ Generic company email\n\n### Professional Tier ($0.45/lead) - \"Enhanced Sales Intelligence\"\n\n**Verified contacts for higher conversion rates**\n\n- ✅ Everything in Base\n- ✅ Professional email discovery & verification\n- ✅ Email deliverability verification\n- ✅ Enhanced company enrichment\n\n### Enterprise Tier ($2.50/lead) - \"Premium Executive Access\"\n\n**Compliance-grade data with C-suite contacts**\n\n- ✅ Everything in Professional\n- ✅ Executive contact enrichment\n- ✅ Full compliance verification\n- ✅ Advanced data validation\n\n### 📧 Email Verification Pipeline\n\n- **Hunter.io Integration** - Professional email discovery ($0.034/search)\n- **NeverBounce Verification** - Real-time deliverability (95% accuracy)\n- **Executive Contact Discovery** - C-suite contacts for Enterprise tier\n- **Multi-source Verification** - Professional licensing and directories\n\n### 📤 Export & Management\n\n- **User-Authorized Exports** - CSV/JSON with complete enrichment data\n- **Campaign History** - User-specific campaign tracking and management\n- **Export Analytics** - Download tracking with user context\n- **Data Privacy** - Complete user data isolation and access control\n\n## 🏗️ Architecture\n\n### Supabase-First Serverless\n\n- **Frontend:** React/Vite deployed to Vercel\n- **Backend:** 6 Supabase Edge Functions with global deployment\n- **Database:** PostgreSQL with Row Level Security (RLS) and user isolation\n- **Authentication:** Supabase Auth with JWT tokens and session management\n- **Real-time:** Ready for live updates and notifications\n\n### User-Aware Data Model\n\n```sql\n-- User-linked campaigns with session support\ncampaigns (id, business_type, location, user_id, session_user_id, ...)\n\n-- Verified leads with user context\nleads (id, campaign_id, business_name, email, user_id, session_user_id, ...)\n\n-- User-authorized exports\ndashboard_exports (id, campaign_id, user_id, session_user_id, ...)\n```\n\n### Edge Functions (Production, Supabase Session Required)\n\n- **Discovery**\n  - `business-discovery-background` – Tier-aware asynchronous discovery + enrichment orchestration\n  - `business-discovery-optimized` – Session-aware synchronous path for scoped validation\n  - `business-discovery-user-aware` (legacy) – Retained for historical integrations\n- **Enrichment & Coordination**\n  - `enrichment-hunter` – Hunter.io email discovery with caching and circuit breakers\n  - `enrichment-neverbounce` – Email verification with quota management\n  - `enrichment-orchestrator` – Multi-service coordination + budget enforcement\n  - `enrichment-business-license` / `enrichment-pdl` – Licensing + data compliance enrichment\n- **Export**\n  - `campaign-export-user-aware` – User-authorized export with enrichment metadata\n  - `campaign-export` – Internal automation export path (service-role only)\n- **Diagnostics**\n  - `test-new-auth` – Session diagnostics for the shared auth helper\n  - `test-official-auth` – Mirrors Supabase’s reference pattern end-to-end\n  - `test-business-discovery` – Session-scoped discovery smoke test\n  - `test-google-places` – API testing and validation\n\n## 🧪 Quality Standards\n\n### Zero Fake Data Philosophy\n\n- ✅ **Verified Contacts Only** - No pattern-generated emails\n- ✅ **Professional Sources** - Hunter.io, licensing boards, chambers\n- ✅ **Transparent Attribution** - Clear source tracking for all data\n- ✅ **Quality Baseline** - 95% email deliverability assumed\n- ❌ **No Speculative Data** - No info@, contact@, or generated patterns\n\n### Verification Sources\n\n- **Google Place Details API** - 100% phone/website verification\n- **Hunter.io API** - Professional email discovery with confidence scoring\n- **NeverBounce API** - Real-time email deliverability verification\n- **Professional Licensing** - State boards (CPA, Healthcare, Legal)\n- **Chamber of Commerce** - Membership verification and directories\n\n## 🚀 User Experience\n\n### Anonymous Users\n\n1. **Instant Access** - No signup required to start discovering\n2. **Session Tracking** - Automatic campaign management during session\n3. **Full Functionality** - Complete discovery and export capabilities\n4. **Upgrade Prompts** - Clear path to permanent account creation\n\n### Authenticated Users\n\n1. **Permanent Storage** - All campaigns saved to user account\n2. **Campaign History** - Access to all previous discoveries\n3. **Data Privacy** - Complete isolation from other users\n4. **Enhanced Features** - Priority support and advanced analytics\n\n## 📊 Performance Metrics\n\n### System Performance\n\n- **Response Time:** <100ms cold start (Edge Functions)\n- **Uptime:** 99.9% (Supabase + Vercel infrastructure)\n- **Scalability:** Auto-scaling serverless architecture\n- **Cost Efficiency:** 90% reduction vs traditional server deployment\n\n### Data Quality\n\n- **Email Accuracy:** 95% deliverability rate\n- **Contact Verification:** Multi-source validation\n- **Business Data:** Real-time updates via Google Places API\n- **Quality Scoring:** Intelligent confidence assessment\n\n## 🔧 Development\n\n### Prerequisites\n\n- Node.js 18+\n- Supabase CLI\n- Vercel CLI (for deployment)\n\n### Setup\n\n```bash\n# Clone repository\ngit clone https://github.com/Alextorelli/ProspectPro.git\ncd ProspectPro\n\n# Install dependencies\nnpm install\n\n# Start Supabase (local development)\nsupabase start\n\n# Deploy Edge Functions\nsupabase functions deploy business-discovery-background\nsupabase functions deploy campaign-export-user-aware\nsupabase functions deploy enrichment-orchestrator\n\n# Build and deploy frontend\nnpm run build\ncd dist && vercel --prod\n```\n\n### Testing\n\n```bash\n# Test background discovery function directly\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background' \\\n  -H 'Authorization: Bearer SUPABASE_SESSION_JWT' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\": \"restaurant\", \"location\": \"Seattle, WA\", \"maxResults\": 3, \"tierKey\": \"PROFESSIONAL\", \"sessionUserId\": \"dev-smoke\"}'\n\n# Test export functionality\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/campaign-export-user-aware' \\\n  -H 'Authorization: Bearer SUPABASE_SESSION_JWT' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"campaignId\": \"campaign_123\", \"format\": \"csv\"}'\n\n# Run Supabase-auth diagnostics\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth' \\\n  -H 'Authorization: Bearer SUPABASE_SESSION_JWT' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"diagnostics\": true}'\n```\n\n## 🎯 Roadmap\n\n## 🛠️ Troubleshooting\n\n- **Blank screen after campaign completes** – Indicates the browser hit an old build where the campaign store could not process undefined lead batches. Pull the latest `main`, run `npm install && npm run build`, and redeploy the `/dist` bundle. If the issue persists, open dev tools and confirm there are no React error #185 stacks; the null-safe store shipping in v4.3.1 should keep results rendering once Supabase returns data.\n\n### ✅ Completed (v4.3)\n\n- Tier-aware background discovery pipeline (Google Places + Foursquare + Census)\n- Asynchronous campaign creation with real-time job metrics\n- Enrichment pipeline cost tracking (validation vs enrichment breakdown)\n- Frontend alignment for tier metadata, keywords, and geography options\n- Export enrichment metadata enhancements\n\n### 🔄 In Progress\n\n- Advanced user analytics dashboard\n- API rate limiting and usage tracking\n- Enhanced business category taxonomy\n- Real-time campaign progress notifications\n\n### 📋 Planned\n\n- Team collaboration features\n- Advanced export scheduling\n- Custom business type definitions\n- API access for enterprise users\n\n## 📄 License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📞 Support\n\n- **Documentation:** [GitHub Wiki](https://github.com/Alextorelli/ProspectPro/wiki)\n- **Issues:** [GitHub Issues](https://github.com/Alextorelli/ProspectPro/issues)\n- **Email:** support@prospectpro.com\n\n---\n\n**ProspectPro v4.3** – Tier-Aware Background Discovery with Supabase Session Enforcement\n"}}},
{"type":"measure","name":"lsp.did_open","count":48,"duration":0.103},
{"type":"mark","name":"lsp.did_open","count":49,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/PROSPECTPRO_V4.3_RELEASE_NOTES.md","languageId":"markdown","version":1,"text":"# ProspectPro v4.3 Release Notes – October 5, 2025\n\n## 🚀 Highlights\n\n- **Background Discovery Pipeline** – New `business-discovery-background` edge function processes campaigns asynchronously, writing status + metrics to `discovery_jobs` while auto-inserting completed campaigns and leads.\n- **Multi-Source Business Discovery** – Combines Google Places, Google Place Details, and Foursquare results with deduplication and optional geography expansion.\n- **Census-Driven Targeting** – Integrates U.S. Census County Business Patterns to adjust search radius, expected results, and confidence multipliers when `CENSUS_API_KEY` is configured.\n- **Tier-Aware Enrichment** – Starter/Professional/Enterprise/Compliance tiers encode price-per-lead, max cost, and enrichment options (Hunter/NeverBounce/Apollo) directly in the job payload.\n- **Enhanced Enrichment Metadata** – Leads now store `verificationSources`, `emails`, `processingMetadata`, and `dataSources` for export + analytics; jobs track validation vs enrichment spend.\n- **Frontend Alignment** – `useBusinessDiscovery` and UI now forward keywords, radius, geography, tier metadata, and discovery option toggles required by the background job.\n- **Supabase-Native Authentication** – Shared `authenticateRequest` now calls `supabaseClient.auth.getUser` and every Edge Function requires a real session JWT (diagnostics via `test-new-auth` + `test-official-auth`).\n\n## 🧠 Architecture Updates\n\n| Component      | Update                                                                                                                                                                                               |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Edge Functions | New `business-discovery-background`; updated cost + metrics integration with `enrichment-orchestrator`; existing user-aware discovery remains for legacy flows.                                      |\n| Database       | `discovery_jobs.metrics` expanded to include tier info, cost breakdowns, sources used, and census density score; inserted campaigns/leads include tier metadata + validation cost.                   |\n| Frontend       | Business discovery flow posts tier payload (`tierKey`, `tierName`, `tierPrice`), keyword arrays, search radius, expand flag, and discovery options (trade associations, licensing, chamber, Apollo). |\n| MCP            | Production MCP server exposes background job diagnostics; config now ships with quick commands for deploying/logging the new function.                                                               |\n\n## 🔧 Deployment Checklist\n\n1. Ensure Supabase Edge secrets include `CENSUS_API_KEY`, `FOURSQUARE_API_KEY`, and refreshed `SUPABASE_SERVICE_ROLE_KEY`.\n2. Deploy updated function: `supabase functions deploy business-discovery-background`.\n3. Redeploy enrichment orchestrator if local changes were made: `supabase functions deploy enrichment-orchestrator`.\n4. Trigger a smoke test (Supabase session JWT required):\n   ```bash\n    curl -X POST \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background\" \\\n       -H \"Authorization: Bearer <SUPABASE_SESSION_JWT>\" \\\n       -H \"Content-Type: application/json\" \\\n     -d '{\n           \"businessType\": \"dental clinic\",\n           \"location\": \"Austin, TX\",\n           \"tierKey\": \"PROFESSIONAL\",\n           \"maxResults\": 3,\n           \"sessionUserId\": \"release-430-smoke\",\n           \"keywords\": [\"invisalign\", \"cosmetic\"],\n           \"expandGeography\": true\n         }'\n   ```\n5. Validate session + RLS context via `curl https://.../test-new-auth` or `./scripts/test-auth-patterns.sh <SUPABASE_SESSION_JWT>`.\n6. Monitor progress via `discovery_jobs` real-time channel (`discovery_jobs:id=eq.<jobId>`) and confirm completed campaign + leads records.\n\n## 📊 Data Quality & Cost Notes\n\n- Validation cost baseline remains $0.02 per lead (Google verification); enrichment costs recorded per service.\n- Census-enabled searches may expand radius automatically—cap results through `maxResults` to maintain budget.\n- Foursquare API is optional; absent key simply reduces supplementary data without failing the job.\n\n## ✅ Backwards Compatibility\n\n- Legacy `business-discovery-user-aware` endpoint untouched for existing integrations.\n- Export function remains `campaign-export-user-aware`, now outputting the richer enrichment metadata for all newly created campaigns.\n- Frontend gracefully handles missing census/Foursquare keys by falling back to default heuristics.\n\nWelcome to ProspectPro v4.3! The platform now delivers richer sourcing intelligence, deterministic cost accounting, and asynchronous campaign handling out of the box.\n"}}},
{"type":"measure","name":"lsp.did_open","count":49,"duration":0.062},
{"type":"mark","name":"lsp.did_open","count":50,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/LATEST_DEPLOYMENT.md","languageId":"markdown","version":1,"text":"# ProspectPro v4.3 - Latest Production Deployment\n\n**🚀 PRODUCTION READY** – Tier-aware background discovery with Supabase session enforcement\n\n## ✅ Deployment Status\n\n**Date:** October 9, 2025  \n**Status:** ✅ Fully operational  \n**Architecture:** Supabase-native session auth paired with asynchronous background discovery and enrichment\n\n### Production URLs\n\n- **Frontend:** https://prospect-fyhedobh1-appsmithery.vercel.app\n- **Edge Function Base:** https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/\n- **Supabase Project:** sriycekxdqnesdsgwiuc (Production)\n\n## � Key Updates\n\n### Supabase-Native Authentication\n\n- Shared `authenticateRequest` now calls `supabaseClient.auth.getUser` using the caller’s Authorization header.\n- Every authenticated invocation requires a Supabase session JWT; publishable/service-role keys alone are rejected.\n- Diagnostics stack (`test-new-auth`, `test-official-auth`, `scripts/test-auth-patterns.sh`) validates session claims, RLS scope, and helper parity after each deploy.\n\n### Background Discovery & Enrichment\n\n- `business-discovery-background` orchestrates Google Places, Place Details, Foursquare, and Census intelligence with tier-aware budgeting.\n- `business-discovery-optimized` retains synchronous discovery for scoped validations and premium campaign checks.\n- Enrichment modules (`enrichment-hunter`, `enrichment-neverbounce`, `enrichment-orchestrator`, `enrichment-business-license`, `enrichment-pdl`) deliver verified contact data, compliance enrichment, and transparent cost tracking.\n\n### Exports & Analytics\n\n- `campaign-export-user-aware` exports tier pricing, validation vs enrichment cost, and `verificationSources` metadata.\n- Campaign and lead writes persist `user_id`, `session_user_id`, census density scores, and enrichment cost breakdowns for analytics dashboards.\n\n## 🧪 Production Validation\n\n| Check                     | Command                                        | Result                                                              |\n| ------------------------- | ---------------------------------------------- | ------------------------------------------------------------------- |\n| Authentication helper     | `curl https://…/test-new-auth`                 | Returns session user metadata, RLS scope, and environment readiness |\n| Official reference parity | `curl https://…/test-official-auth`            | Confirms Supabase helper matches reference implementation           |\n| Discovery smoke test      | `curl https://…/business-discovery-background` | Inserts campaign + leads tied to caller `user_id`                   |\n| Export smoke test         | `curl https://…/campaign-export-user-aware`    | Generates CSV with enrichment metadata scoped to caller             |\n\n> Replace `https://…` with the production base URL and include `Authorization: Bearer <SUPABASE_SESSION_JWT>` for every request.\n\n## 📋 Active Edge Functions (Auth Enforced)\n\n- **Discovery:** `business-discovery-background`, `business-discovery-optimized`, `business-discovery-user-aware` (legacy)\n- **Enrichment & Coordination:** `enrichment-hunter`, `enrichment-neverbounce`, `enrichment-orchestrator`, `enrichment-business-license`, `enrichment-pdl`\n- **Export:** `campaign-export-user-aware`, `campaign-export` (internal automation)\n- **Diagnostics:** `test-new-auth`, `test-official-auth`, `test-business-discovery`, `test-google-places`\n\n## 🔐 Session Requirements\n\n1. Retrieve the current session token:\n   ```ts\n   const { data } = await supabase.auth.getSession();\n   const accessToken = data.session?.access_token;\n   ```\n2. Forward the token on every request:\n   ```ts\n   await fetch(`${supabaseUrl}/functions/v1/business-discovery-background`, {\n     method: \"POST\",\n     headers: {\n       Authorization: `Bearer ${accessToken}`,\n       \"Content-Type\": \"application/json\",\n     },\n     body: JSON.stringify(payload),\n   });\n   ```\n3. For automation, mint a short-lived service-role JWT via the Supabase Admin API and send it exactly the same way.\n\n## 🚀 Deployment Workflow (v4.3)\n\n```bash\n# Deploy discovery + enrichment + export stack\nsupabase functions deploy business-discovery-background\nsupabase functions deploy business-discovery-optimized\nsupabase functions deploy campaign-export-user-aware\nsupabase functions deploy enrichment-hunter\nsupabase functions deploy enrichment-neverbounce\nsupabase functions deploy enrichment-orchestrator\nsupabase functions deploy enrichment-business-license\nsupabase functions deploy enrichment-pdl\n\n# Deploy diagnostic helpers\nsupabase functions deploy test-new-auth\nsupabase functions deploy test-official-auth\nsupabase functions deploy test-business-discovery\nsupabase functions deploy test-google-places\n\n# Build + deploy frontend\nnpm run build\ncd dist && vercel --prod\n```\n\n## 🧪 Smoke Tests\n\n```bash\n# Background discovery (session JWT required)\ncurl -X POST \\\n  'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background' \\\n  -H 'Authorization: Bearer <SUPABASE_SESSION_JWT>' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\":\"coffee shop\",\"location\":\"Seattle, WA\",\"tierKey\":\"PROFESSIONAL\",\"maxResults\":2,\"sessionUserId\":\"prod-validation\"}'\n\n# Auth diagnostics\ncurl -X POST \\\n  'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth' \\\n  -H 'Authorization: Bearer <SUPABASE_SESSION_JWT>' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"diagnostics\":true}'\n\n# Compare helper vs reference pattern\n./scripts/test-auth-patterns.sh <SUPABASE_SESSION_JWT>\n\n# Export validation\ncurl -X POST \\\n  'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/campaign-export-user-aware' \\\n  -H 'Authorization: Bearer <SUPABASE_SESSION_JWT>' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"campaignId\":\"<CAMPAIGN_ID>\",\"format\":\"csv\",\"sessionUserId\":\"prod-validation\"}'\n```\n\n## 🗄️ Database & RLS Snapshot\n\n- `campaigns`, `leads`, and `dashboard_exports` populate `user_id` + `session_user_id` for session-aware analytics.\n- `discovery_jobs.metrics` tracks tier, sources, validation cost, enrichment cost, census density, and confidence multipliers.\n- RLS policies restrict access to matching `auth.uid()` or anonymous session IDs; diagnostics confirm enforcement.\n\n## 📝 Next Steps & Monitoring\n\n- Supabase dashboard → Edge Functions → Logs to monitor new deployments.\n- Tail discovery jobs: `supabase functions logs business-discovery-background --follow`.\n- Verify campaign + lead inserts via Supabase SQL editor (read-only session context).\n- Keep frontend session handling aligned with `@supabase/supabase-js@2.38` and refresh tokens on auth state changes.\n\n## ✅ Verification Checklist\n\n- [ ] All listed functions deployed with latest commit hashes.\n- [ ] Frontend built from `/dist` and deployed to Vercel.\n- [ ] `test-new-auth` and `test-official-auth` return 200 with the current session JWT.\n- [ ] Discovery smoke test inserts campaign + leads tied to caller `user_id`.\n- [ ] Export smoke test returns CSV with enrichment metadata.\n- [ ] `scripts/test-auth-patterns.sh` shows parity between helper and reference flows.\n- [ ] Supabase secrets include Google, Foursquare, Census, Hunter.io, and NeverBounce keys.\n- [ ] No hard-coded anon/service-role tokens committed; placeholders only (`sb_publishable_your_key_here`).\n\n---\n\n**ProspectPro v4.3** – Production deployment locked with tier-aware background discovery, Supabase session enforcement, and end-to-end diagnostics.  \n_Latest deployment: October 9, 2025 — Ready for production campaign validation._ 🚀\n"}}},
{"type":"measure","name":"lsp.did_open","count":50,"duration":0.081},
{"type":"mark","name":"lsp.did_open","count":51,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/TECHNICAL_SUMMARY_v4.3.md","languageId":"markdown","version":1,"text":"# ProspectPro v4.3 Technical Summary – Tier-Aware Background Discovery\n\n## Executive Snapshot\n\nProspectPro v4.3 introduces an asynchronous _business-discovery-background_ pipeline that unifies Google Places, Foursquare, and U.S. Census intelligence with tier-aware cost controls. Base, Professional, and Enterprise tiers now drive enrichment rules directly in the background job, guaranteeing that every campaign records validation, enrichment, and sourcing metadata for exports and analytics.\n\n## Key Enhancements\n\n- **Background Discovery Edge Function**: `business-discovery-background` runs as an EdgeRuntime job, writing progress + metrics to `discovery_jobs` while inserting completed campaigns/leads.\n- **Multi-Source Discovery**: Google Places + Place Details + Foursquare search with dedupe and optional geography expansion based on Census density.\n- **Census Intelligence**: County Business Patterns data sets `expected_results`, `confidence_multiplier`, and search radius recommendations when `CENSUS_API_KEY` is present.\n- **Tier-Aware Budgeting**: Base/Professional/Enterprise tiers map to precise `pricePerLead`, `maxCostPerLead`, and enrichment toggles; UI forwards tier payload, keywords, custom radius, and discovery options.\n- **Enrichment Upgrades**: Hunter/NeverBounce/Apollo (optional) orchestrated via `enrichment-orchestrator` with full cost breakdown (`validationCost`, `enrichmentCost`, service list, cache metadata).\n- **Structured Metrics**: `discovery_jobs.metrics` now tracks sources used, total cost, validation vs enrichment spend, census density, tier info, and per-lead confidence.\n\n## Production Edge Functions (October 2025)\n\n| Function                        | Purpose                                                               |\n| ------------------------------- | --------------------------------------------------------------------- |\n| `business-discovery-background` | Asynchronous discovery + enrichment orchestration with tier budgeting |\n| `business-discovery-optimized`  | Session-aware synchronous discovery retained for scoped validations   |\n| `business-discovery-user-aware` | Legacy synchronous discovery endpoint for historical clients          |\n| `campaign-export-user-aware`    | User-authorized CSV export with cost + source metadata                |\n| `campaign-export`               | Service-role export path for internal automations                     |\n| `enrichment-orchestrator`       | Hunter/NeverBounce/Apollo coordination + budgeting                    |\n| `enrichment-hunter`             | Hunter.io API proxy with caching + circuit breakers                   |\n| `enrichment-neverbounce`        | NeverBounce verification proxy                                        |\n| `enrichment-business-license`   | Licensing enrichment for Enterprise/Compliance tiers                  |\n| `enrichment-pdl`                | People Data Labs enrichment module                                    |\n| `test-new-auth`                 | Supabase session diagnostics for `authenticateRequest`                |\n| `test-official-auth`            | Mirrors Supabase reference implementation to confirm parity           |\n| `test-business-discovery`       | Session-scoped discovery smoke test                                   |\n| `test-google-places`            | Diagnostics for Google Places billing & quotas                        |\n\n> All authenticated Edge Functions require a Supabase session JWT (`Authorization: Bearer <token>`). Use `scripts/test-auth-patterns.sh` to compare helper vs reference flows after each deploy.\n\n## Data Pipeline Overview\n\n```\nUI Campaign Request (tier, keywords, options)\n        ↓\n`business-discovery-background`\n        ↓  (Google Places + Place Details)\n  Candidate Businesses\n        ↓  (Foursquare supplement + dedupe)\n  Enriched Business List\n        ↓  (Quality Scorer w/ Census multiplier)\n  Qualified Leads\n        ↓  (enrichment-orchestrator)\n  Verified Contacts + Cost Metrics\n        ↓\nCampaign + Leads persisted with tier metadata\n```\n\n## Tier Reference Table\n\n| Tier         | Price / Lead | Max Cost / Lead | Includes                                            |\n| ------------ | ------------ | --------------- | --------------------------------------------------- |\n| Base         | $0.15        | $0.50           | Business verification + generic company email       |\n| Professional | $0.45        | $1.50           | Email discovery & verification + company enrichment |\n| Enterprise   | $2.50        | $7.50           | Executive contacts + compliance verification        |\n\nBase tier provides essential business data; higher tiers add progressive email discovery, executive contact enrichment, and compliance verification.\n\n## Database Touchpoints\n\n- **`discovery_jobs`** – Stores real-time status, metrics, tier info, sources used, density scores.\n- **`campaigns`** – Receives completed campaign record with `total_cost`, `results_count`, and tier metadata when job finishes.\n- **`leads`** – Each lead includes `enrichment_data` (`verificationSources`, `emails`, `processingMetadata`, `dataSources`) and `validation_cost`.\n\n## Operational Notes\n\n- **Secrets**: Ensure `CENSUS_API_KEY`, `FOURSQUARE_API_KEY`, `GOOGLE_PLACES_API_KEY`, `HUNTER_IO_API_KEY`, `NEVERBOUNCE_API_KEY`, and Supabase keys are populated in Edge Function secrets.\n- **Session Tokens**: Frontend and automations must forward Supabase session JWTs; run `scripts/test-auth-patterns.sh <SUPABASE_SESSION_JWT>` after each deploy.\n- **Testing**: Run `supabase functions serve business-discovery-background --env-file .env.edge` for local dry runs; verify job status via `discovery_jobs` table.\n- **Exports**: `campaign-export-user-aware` now emits tier pricing, total validation/enrichment spend, and sources used for every lead.\n- **MCP Integration**: Production MCP server exposes new diagnostics (`test_background_job`, `analyze_discovery_metrics`, `validate_session_enforcement`) for the background workflow.\n\n## Quick Command Cheatsheet\n\n```bash\n# Deploy background discovery function\nsupabase functions deploy business-discovery-background\n\n# Tail background discovery logs\nsupabase functions logs business-discovery-background --follow\n\n# Trigger a minimal background job (session JWT required)\ncurl -X POST \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background\" \\\n      -H \"Authorization: Bearer <SUPABASE_SESSION_JWT>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"businessType\": \"coffee shop\",\n        \"location\": \"Seattle, WA\",\n        \"maxResults\": 2,\n        \"tierKey\": \"BASE\",\n        \"sessionUserId\": \"debug-session-001\",\n        \"keywords\": [\"latte\", \"wifi\"],\n        \"expandGeography\": true\n      }'\n```\n\nUse this summary as the authoritative reference for v4.3 conversations, deployment coordination, and AI tooling context.\n"}}},
{"type":"measure","name":"lsp.did_open","count":51,"duration":0.073},
{"type":"mark","name":"lsp.did_open","count":52,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CHANGELOG.md","languageId":"markdown","version":1,"text":"# ProspectPro Changelog\n\nAll notable changes to ProspectPro will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [4.3.1] - 2025-10-11 - Campaign Store Null-Safety & Frontend Stability\n\n### Fixed\n\n- Hardened `campaignStore` and `enhancedCampaignStore` lead merging to tolerate `undefined` payloads and mixed identifier shapes, preventing React error #185 crashes after background jobs complete.\n- Eliminated blank screen regressions on the results page by normalizing campaign lead updates coming from Supabase pagination.\n\n### Documentation\n\n- Refreshed Copilot instructions, documentation index, README troubleshooting notes, and MCP quick commands to highlight the null-safe store behavior and new verification steps.\n\n## [4.3.0] - 2025-10-09 - Supabase Session Enforcement & Tier-Aware Background Discovery\n\n### Added\n\n- **Supabase-Native Authentication:** Shared `authenticateRequest` now uses `supabaseClient.auth.getUser`, enforcing real session JWTs for every Edge Function invocation.\n- **Diagnostic Edge Functions:** Added `test-new-auth`, `test-official-auth`, and `test-business-discovery` for post-deploy validation of session scope, RLS access, and discovery flows.\n- **Auth Validation Script:** `scripts/test-auth-patterns.sh` compares the shared helper vs Supabase reference implementation using live session tokens.\n\n### Changed\n\n- **Discovery Stack:** Updated `business-discovery-optimized`, `enrichment-hunter`, `campaign-export-user-aware`, and related functions to consume the new auth context (userId, email, sessionId, token claims).\n- **Documentation & Instructions:** Refreshed README, deployment guides, MCP configuration, and Copilot instructions to reference session JWT requirements and new diagnostics.\n- **MCP Configuration:** Quick commands and tooling now surface session-enforced smoke tests and Supabase-specific troubleshooting flows.\n\n### Removed\n\n- **Custom JWKS Verifier:** All manual JWKS handling and ES256 key rotation logic replaced with Supabase-managed validation.\n\n### Notes\n\n- Redeploy all discovery, enrichment, export, and diagnostic edge functions after pulling this release.\n- Ensure frontend and automation callers forward `Authorization: Bearer <SUPABASE_SESSION_JWT>` for every request.\n\n## [4.0.0] - 2024-12-19 - Supabase-First Serverless Architecture\n\n### 🚀 **MAJOR ARCHITECTURAL TRANSFORMATION**\n\nComplete migration from container-based architecture to Supabase-first serverless platform.\n\n### Added\n\n- **Supabase Edge Functions**: TypeScript/Deno Edge Functions for all backend logic\n  - `business-discovery` - Main business discovery with Google Places API integration\n  - `campaign-export` - CSV export functionality with database integration\n- **Static Frontend**: HTML/JS with direct Supabase client integration\n- **Supabase Database**: Native PostgreSQL integration with Row Level Security\n- **Global Edge Deployment**: Functions run in 18+ regions with <100ms cold starts\n- **Enhanced Quality Scoring v3.0**: Cost-efficient validation pipeline integrated into Edge Functions\n- **Real-time Capabilities**: Native Supabase real-time subscriptions (ready to use)\n- **Zero-Container Deployment**: No Docker, no Cloud Run, just Edge Functions\n\n### Changed\n\n- **Architecture**: Container-based → Supabase-first serverless\n- **Backend**: Express.js server → Supabase Edge Functions\n- **Database**: Manual integration → Native Supabase with RLS\n- **Deployment**: Docker builds → Function deployment (30 seconds vs. 5 minutes)\n- **Environment**: .env files → Supabase environment variables\n- **Development**: Node.js → TypeScript/Deno Edge Functions\n\n### Removed\n\n- **server.js**: Replaced with Supabase Edge Functions\n- **Express.js dependencies**: No longer needed with Edge Functions\n- **Docker containers**: Static frontend + serverless functions\n- **Cloud Build pipelines**: Simplified to function deployment\n- **Complex environment setup**: Replaced with Supabase environment variables\n\n### Performance\n\n- **90% Cost Reduction**: Static hosting ($1-5/month) vs. Cloud Run ($10-50/month)\n- **80% Code Reduction**: From 400+ lines server.js to 50 lines core logic\n- **10x Faster Deployment**: 30-second function deploys vs. 5-minute container builds\n- **Zero Maintenance**: Supabase manages all infrastructure\n- **Auto-scaling**: No capacity planning or cold start issues\n\n## [3.0.0] - 2025-09-23 (ARCHIVED - Container Architecture)\n\n### Added\n\n- Enhanced schema cache handling for production initialization\n- Graceful degraded mode startup capability\n- Schema cache refresh utilities and automation\n- Comprehensive production diagnostics and monitoring\n- Enhanced Supabase configuration with automatic recovery\n- Production-ready error handling and user guidance\n\n### Changed\n\n- Improved server startup process with detailed error reporting\n- Enhanced database connection testing with cache management\n- Reorganized documentation structure with archive branches\n- Updated production deployment workflow with artifact-based configuration\n\n### Fixed\n\n- Schema cache initialization issues after database updates\n- Production server startup failures during cache refresh\n- Database connectivity issues in production environment\n\n## [2.0.0] - 2025-09-22 (ARCHIVED - Legacy Architecture)\n\n### Added\n\n- Complete production validation system\n- Enhanced deployment pipeline with GitHub Actions\n- Comprehensive database schema with RLS policies\n- Multi-source business discovery with API integrations\n\n### Changed\n\n- Migration to production-ready architecture\n- Enhanced error handling and logging\n- Improved cost tracking and budget management\n\n## [1.0.0] - Initial Release (ARCHIVED)\n\n### Added\n\n- Basic lead generation functionality\n- Supabase database integration\n- Simple web interface\n- Core business discovery features\n"}}},
{"type":"measure","name":"lsp.did_open","count":52,"duration":0.106},
{"type":"mark","name":"lsp.did_open","count":53,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-config.json","languageId":"json","version":1,"text":"{\n    \"version\": \"1.1\",\n    \"description\": \"ProspectPro v4.3 MCP Server Configuration - Tier-Aware Background Discovery & Supabase Session Enforcement\",\n    \"servers\": {\n        \"prospectpro-production\": {\n            \"autoStart\": true,\n            \"lazyLoad\": true,\n            \"maxMemory\": \"192MB\",\n            \"priority\": \"high\",\n            \"description\": \"Production monitoring for tier-aware background discovery, enrichment, and session-enforced auth (28 tools)\",\n            \"tools\": [\n                \"monitor_api_performance\",\n                \"analyze_database_metrics\",\n                \"check_edge_function_health\",\n                \"track_api_costs\",\n                \"monitor_supabase_usage\",\n                \"track_user_sessions\",\n                \"monitor_authentication\",\n                \"analyze_campaign_ownership\"\n            ]\n        },\n        \"prospectpro-development\": {\n            \"autoStart\": false,\n            \"onDemand\": true,\n            \"maxMemory\": \"96MB\",\n            \"priority\": \"medium\",\n            \"description\": \"Development tools for background discovery, census targeting, enrichment, and session token workflows\",\n            \"activationKeywords\": [\n                \"develop\",\n                \"integrate\",\n                \"new api\",\n                \"test integration\",\n                \"user auth\",\n                \"session management\"\n            ]\n        },\n        \"prospectpro-troubleshooting\": {\n            \"autoStart\": false,\n            \"onDemand\": true,\n            \"maxMemory\": \"96MB\",\n            \"priority\": \"medium\",\n            \"description\": \"Debugging tools for background jobs, Supabase auth sessions, and enrichment pipelines\",\n            \"activationKeywords\": [\n                \"debug\",\n                \"error\",\n                \"fix\",\n                \"troubleshoot\",\n                \"404\",\n                \"500\",\n                \"auth error\",\n                \"jwt\",\n                \"session\"\n            ]\n        }\n    },\n    \"globalSettings\": {\n        \"maxConcurrentServers\": 2,\n        \"memoryThreshold\": \"384MB\",\n        \"smartLoading\": true,\n        \"contextOptimization\": true\n    },\n    \"contextFilters\": {\n        \"allowedExtensions\": [\n            \".ts\",\n            \".js\",\n            \".json\",\n            \".md\",\n            \".sql\"\n        ],\n        \"excludedPaths\": [\n            \"archive/**\",\n            \"node_modules/**\",\n            \".deno_lsp/**\",\n            \"logs/**\",\n            \"dist/**\"\n        ],\n        \"maxContextLength\": 200,\n        \"maxFileSize\": 50000\n    },\n    \"costOptimization\": {\n        \"enabled\": true,\n        \"tokenReduction\": 38,\n        \"cacheResponses\": true,\n        \"smartContext\": true,\n        \"quickCommands\": {\n            \"run prod mcp\": \"cd /workspaces/ProspectPro/mcp-servers && npm run start:production\",\n            \"deploy discovery background\": \"supabase functions deploy business-discovery-background\",\n            \"deploy orchestrator\": \"supabase functions deploy enrichment-orchestrator\",\n            \"deploy export\": \"supabase functions deploy campaign-export-user-aware\",\n            \"deploy auth diagnostics\": \"supabase functions deploy test-new-auth && supabase functions deploy test-official-auth\",\n            \"check background logs\": \"supabase functions logs business-discovery-background --follow\",\n            \"test background job\": \"curl -X POST \\\"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background\\\" -H \\\"Authorization: Bearer SUPABASE_SESSION_JWT\\\" -H \\\"Content-Type: application/json\\\" -d '{\\\"businessType\\\":\\\"coffee shop\\\",\\\"location\\\":\\\"Seattle, WA\\\",\\\"maxResults\\\":2,\\\"tierKey\\\":\\\"PROFESSIONAL\\\",\\\"sessionUserId\\\":\\\"mcp-smoke\\\"}'\",\n            \"test export\": \"curl -X POST \\\"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/campaign-export-user-aware\\\" -H \\\"Authorization: Bearer SUPABASE_SESSION_JWT\\\" -H \\\"Content-Type: application/json\\\" -d '{\\\"campaignId\\\":\\\"test\\\",\\\"format\\\":\\\"csv\\\",\\\"sessionUserId\\\":\\\"mcp-smoke\\\"}'\",\n            \"test auth helper\": \"curl -X POST \\\"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth\\\" -H \\\"Authorization: Bearer SUPABASE_SESSION_JWT\\\" -H \\\"Content-Type: application/json\\\" -d '{\\\"diagnostics\\\":true}'\",\n            \"compare auth patterns\": \"./scripts/test-auth-patterns.sh SUPABASE_SESSION_JWT\",\n            \"rebuild frontend\": \"npm install && npm run build\"\n        }\n    },\n    \"userAwareFeatures\": {\n        \"enabled\": true,\n        \"sessionTracking\": true,\n        \"authenticationMonitoring\": true,\n        \"campaignOwnershipTracking\": true,\n        \"dataIsolationValidation\": true\n    }\n}"}}},
{"type":"measure","name":"lsp.did_open","count":53,"duration":0.206},
{"type":"mark","name":"lsp.did_open","count":54,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md","languageId":"markdown","version":1,"text":"# ProspectPro Enhanced MCP (Model Context Protocol) Implementation v3.1\n\n## Overview\n\nThis directory contains the **enhanced MCP server implementation** that provides AI assistants with comprehensive access to ProspectPro's complete email discovery & verification platform, enrichment APIs, background discovery jobs, contact validation, and **troubleshooting capabilities**. Version 3.1 adds tooling for the v4.3 background discovery pipeline (Census + Foursquare), Supabase session enforcement (auth.getUser), tier-aware cost tracking, and asynchronous job diagnostics.\n\n**Architecture**: 3 specialized servers for enrichment production, development, and troubleshooting workflows  \n**Tools**: 42 tools total across all servers (6 troubleshooting + 36 enrichment tools)  \n**Status**: Production-ready with tier-aware background discovery + enrichment (v4.3)\n\n## Enhanced MCP Servers v3.0 - Email Discovery & Verification Architecture\n\n### 1. Production Server (`production-server.js`) - **v2.1.0**\n\n**Purpose**: Comprehensive email enrichment monitoring, Hunter.io/NeverBounce analytics, enrichment cost tracking, and deliverability validation (28 tools)\n\n**Enrichment Capabilities**:\n\n- Email discovery status tracking (Hunter.io)\n- Email verification monitoring (NeverBounce)\n- Apollo API integration monitoring (optional)\n- Enrichment cost breakdown per lead\n- Deliverability accuracy tracking (95%)\n- Circuit breaker status monitoring\n\n### 2. Development Server (`development-server.js`) - **v1.1.0**\n\n**Purpose**: Email enrichment development, Hunter.io/NeverBounce API testing, circuit breaker validation, and deliverability benchmarking (8 tools)\n\n**Enhanced Features**:\n\n- Hunter.io email discovery testing (6 endpoints)\n- NeverBounce verification testing (FREE + paid)\n- Apollo contact enrichment testing (optional)\n- Enrichment orchestrator validation\n- Circuit breaker pattern testing\n- Caching efficiency benchmarks\n\n### 3. 🆕 Troubleshooting Server (`supabase-troubleshooting-server.js`) - **v1.1.0**\n\n**Purpose**: Systematic debugging of email enrichment architecture, Hunter.io/NeverBounce integration issues, and deliverability validation failures\n\n**Enrichment Troubleshooting Capabilities** (6 enhanced tools):\n\n#### Email Enrichment Testing\n\n- `test_edge_function` - Test Hunter.io/NeverBounce Edge Functions with API authentication\n- `generate_debugging_commands` - Create enrichment curl commands and testing scripts\n\n#### Email Verification Diagnosis\n\n- `validate_database_permissions` - Check enrichment_data JSONB permissions and RLS policies\n- `diagnose_anon_key_mismatch` - Compare frontend publishable key vs Supabase settings and confirm session token retrieval\n- `run_rls_diagnostics` - Generate email enrichment diagnostic queries\n\n#### Enrichment Deployment Validation\n\n- `check_vercel_deployment` - Validate deployment with verified email display and deliverability scores\n\n**When to Use Troubleshooting Server**:\n\n- Hunter.io email discovery fails or returns no results\n- NeverBounce verification returns authentication errors\n- Enrichment orchestrator exceeds budget limits\n- Circuit breakers not resetting after failures\n- Email verification cache not working\n- Apollo API (optional) returns cost errors\n- Deliverability scores not displaying correctly\n\n### 1. Production Server (`production-server.js`) - **v2.0.0**\n\n**Purpose**: Comprehensive production monitoring, database analytics, system diagnostics, API testing, and filesystem analysis\n\n**Enhanced Capabilities** (28 tools):\n\n#### Database Analytics (4 tools)\n\n- Query enhanced leads with advanced filters and analytics\n- Get campaign statistics and performance metrics\n- Analyze lead quality patterns and scoring distribution\n- Retrieve API cost breakdowns and budget analysis\n\n#### System Monitoring (7 tools)\n\n- System health monitoring with Docker integration\n- Diagnostics file analysis and performance tracking\n- Log analysis and error pattern detection\n- Configuration validation across environments\n- Performance reporting with optimization suggestions\n\n#### API Testing (8 tools)\n\n- Test Google Places API with sample queries and rate limiting\n- Test Foursquare Places API integration with caching\n- Test Hunter.io email discovery with validation\n- Verify email deliverability with NeverBounce\n- Simulate complete lead discovery pipeline\n- API cost tracking and quota monitoring\n- Performance benchmarking across API endpoints\n\n#### Filesystem Analysis (6 tools)\n\n- Analyze project structure and architectural patterns\n- Search for code patterns and potential issues\n- Analyze API client implementations for consistency\n- **Critical**: Check for fake data violations (zero tolerance)\n- Analyze error handling patterns across codebase\n- Generate code quality reports\n\n#### Production Monitoring (3 tools)\n\n- Health check endpoints monitoring\n- Production deployment status tracking\n- Real-time system metrics collection\n\n### 2. Development Server (`development-server.js`) - **v1.0.0**\n\n**Purpose**: Development utilities, new API integration testing, and performance benchmarking\n\n**Specialized Capabilities** (8 tools):\n\n#### New API Integration (4 tools)\n\n- Test US Chamber of Commerce API integration\n- Test Better Business Bureau (BBB) API\n- Test LinkedIn Sales Navigator API patterns\n- Test ZoomInfo API integration patterns\n\n#### Development Utilities (2 tools)\n\n- Performance benchmarking across API clients\n- Generate API client templates for new integrations\n\n#### Code Generation (2 tools)\n\n- Generate boilerplate for new API clients\n- Create test suites for API integrations\n\n## Quick Start\n\n```bash\n# Start production monitoring\nnpm run start:production\n\n# Start development server\nnpm run start:development\n\n# Start troubleshooting server (for debugging deployment issues)\nnpm run start:troubleshooting\n\n# Start all servers\nnpm run start:all\n\n# Test all servers\nnpm run test\n```\n\n## 🚨 Quick Troubleshooting (NEW in v3.0)\n\n### Frontend Shows \"Discovery Failed\" or \"API request failed: 404\"\n\n**IMMEDIATE DIAGNOSIS** with MCP Troubleshooting Server:\n\n```bash\nnpm run start:troubleshooting\n```\n\nIn your AI assistant, use these MCP tools in systematic order:\n\n1. `test_edge_function` - Verify backend works independently of frontend\n2. `diagnose_anon_key_mismatch` - Check for publishable key sync + session token availability (90% of problems)\n3. `validate_database_permissions` - Verify RLS policies are configured correctly\n4. `check_vercel_deployment` - Validate frontend deployment status\n5. `generate_debugging_commands` - Get custom debugging scripts for your config\n\n**Manual Quick Test** (if MCP not available):\n\n```bash\n# Test background discovery function directly (requires Supabase session JWT)\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background' \\\n  -H 'Authorization: Bearer SUPABASE_SESSION_JWT' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\": \"coffee shop\", \"location\": \"Seattle, WA\", \"tierKey\": \"PROFESSIONAL\", \"maxResults\": 2, \"sessionUserId\": \"mcp-diagnostics\"}'\n```\n\nFollow up with the dedicated auth diagnostics:\n\n```bash\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth' \\\n  -H 'Authorization: Bearer SUPABASE_SESSION_JWT' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"diagnostics\":true}'\n\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-official-auth' \\\n  -H 'Authorization: Bearer SUPABASE_SESSION_JWT' \\\n  -H 'Content-Type: application/json' \\\n  -d '{}'\n\n./scripts/test-auth-patterns.sh SUPABASE_SESSION_JWT\n```\n\n**Expected Results**: Real business data response = backend working, frontend issue  \n**If 401 error**: Authentication or RLS policy issue\n\n### 3. VS Code Configuration\n\nThe consolidated MCP configuration is automatically set up in `.vscode/settings.json`:\n\n```json\n{\n  \"mcp.enable\": true,\n  \"mcp.servers\": {\n    \"prospectpro-production\": {\n      \"enabled\": true,\n      \"autoStart\": true,\n      \"description\": \"Enhanced Production Server - 28 tools\"\n    },\n    \"prospectpro-development\": {\n      \"enabled\": true,\n      \"autoStart\": false,\n      \"description\": \"Development Server - 8 specialized tools\"\n    }\n  }\n}\n```\n\n### 4. Environment Requirements\n\nConsolidated servers require the same environment variables as the main application:\n\n- `SUPABASE_URL`: Database connection\n- `SUPABASE_SECRET_KEY`: Database access\n- API keys for external services (Google Places, Hunter.io, NeverBounce, Foursquare)\n- Development server requires additional API keys for new integrations (US Chamber, BBB, etc.)\n\n## Usage Examples\n\n### Database Queries via AI\n\n```\n\"Show me the top 10 leads with confidence scores above 85\"\n\"Analyze lead quality patterns for restaurants in New York\"\n\"What are the API costs for the last 24 hours?\"\n```\n\n### API Testing via AI\n\n```\n\"Test the Google Places API with a search for 'coffee shops in Seattle'\"\n\"Simulate lead discovery for 'restaurants' in 'San Francisco'\"\n\"Verify the email address john@example.com\"\n```\n\n### Codebase Analysis via AI\n\n```\n\"Analyze the project structure and identify key components\"\n\"Check for any fake data generation patterns in the code\"\n\"Find all error handling patterns in API clients\"\n```\n\n### System Monitoring via AI\n\n```\n\"Check the overall system health status\"\n\"Analyze recent application logs for errors\"\n\"Generate a performance report with recommendations\"\n```\n\n## Advanced AI Workflows\n\n### 1. Lead Quality Analysis\n\nAI can now directly query your database to provide insights like:\n\n- \"Which business types have the highest confidence scores?\"\n- \"What's the correlation between email confidence and overall lead quality?\"\n- \"Show me leads that failed validation and why\"\n\n### 2. API Cost Optimization\n\nAI can analyze your API usage patterns:\n\n- \"Which APIs are costing the most money?\"\n- \"Are we approaching any quota limits?\"\n- \"Suggest optimizations to reduce API costs\"\n\n### 3. Code Quality Assurance\n\nAI can continuously monitor code quality:\n\n- \"Are there any patterns that could lead to fake data generation?\"\n- \"Analyze error handling coverage across all modules\"\n- \"Check if all API clients follow the same patterns\"\n\n### 4. System Performance Monitoring\n\nAI can provide system insights:\n\n- \"Is the system performing optimally?\"\n- \"What are the largest files that might be slowing down development?\"\n- \"Are there any configuration issues that need attention?\"\n\n## Consolidated MCP Server Management\n\n### Consolidated Server Commands\n\n```bash\n# Start production server (28 tools - auto-starts with VS Code)\nnpm run start:production\n\n# Start development server (8 tools - manual start)\nnpm run start:development\n\n# Start both servers for comprehensive development\nnpm run start:all\n```\n\n### Server Status Monitoring\n\n```bash\n# Test both consolidated servers\nnpm run test\n\n# Check detailed test results and performance metrics\ncat test-results.json\n\n# Validate specific server capabilities\nnode -e \"console.log(require('./production-server.js').tools.length + ' production tools')\"\nnode -e \"console.log(require('./development-server.js').tools.length + ' development tools')\"\n```\n\n### Performance Benefits\n\n**Consolidation Results**:\n\n- **Servers**: 5 → 2 (60% reduction)\n- **Memory Usage**: ~40% reduction in MCP processes\n- **Startup Time**: ~50% faster initialization\n- **Tools Available**: 36 total (100% preservation)\n- **Test Coverage**: Comprehensive validation suite\n\n## Security Considerations\n\n### Data Access Control\n\n- MCP servers use the same authentication as the main application\n- Database access is limited to read-only operations where appropriate\n- API keys are passed through environment variables only\n\n### AI Context Boundaries\n\n- MCP servers provide structured access to prevent unauthorized operations\n- Each server has defined capabilities and cannot exceed its scope\n- Error handling prevents sensitive information leakage\n\n## Troubleshooting\n\n### Common Issues\n\n1. **MCP Servers Not Starting**\n\n   - Check dependencies: `npm run mcp:install`\n   - Verify environment variables are set\n   - Run tests: `npm run mcp:test`\n\n2. **VS Code Not Recognizing MCP**\n\n   - Restart VS Code after configuration changes\n   - Check `.vscode/mcp-config.json` syntax\n   - Verify MCP is enabled in settings\n\n3. **Database Connection Issues**\n\n   - Check Supabase credentials\n   - Verify database server status\n   - Run diagnostics: `curl http://localhost:3000/diag`\n\n4. **API Testing Failures**\n\n   - Verify API keys are configured\n   - Check API quota limits\n   - Test individual APIs outside MCP first\n\n5. **Blank Screen After Campaign Completion**\n\n- Run `npm install && npm run build` to ensure the v4.3.1 null-safe store is bundled before redeploying `/dist`.\n- Confirm the browser console is clear of React runtime error 185 using dev tools.\n- If the issue persists, tail the background discovery logs (`supabase functions logs business-discovery-background --follow`) to verify Supabase is still emitting lead batches.\n\n## Development Notes\n\n### Adding New MCP Tools\n\n1. Add tool definition to the server's `tools/list` handler\n2. Implement tool execution in `tools/call` handler\n3. Update this documentation\n4. Add tests to `test-servers.js`\n\n### Best Practices\n\n- Keep tools focused on specific functionality\n- Provide detailed error messages\n- Include usage examples in tool descriptions\n- Implement proper error handling and validation\n- Cache expensive operations where appropriate\n\n## Migration from v1.0 (Individual Servers)\n\n### What Changed in v2.0 Consolidation\n\n**Before (v1.0)**:\n\n- 5 separate servers: database, api, filesystem, monitoring, production\n- Complex management and startup procedures\n- Higher memory overhead\n- Context switching between servers\n\n**After (v2.0)**:\n\n- 2 consolidated servers: production (28 tools) + development (8 tools)\n- Simplified management and configuration\n- Optimized resource usage\n- Unified tool access patterns\n\n### Backward Compatibility\n\nAll 36 original tools are preserved with identical functionality. AI workflows continue to work without changes.\n\n### Archived Components\n\nOriginal individual servers are preserved in `/archive/mcp-servers-individual/` for reference.\n\n## Integration with ProspectPro Architecture\n\nThe consolidated MCP implementation enhances ProspectPro's core principles:\n\n### Zero Fake Data Policy ✅\n\n- **Production server** actively monitors for fake data patterns (6 filesystem analysis tools)\n- All database queries return real, validated business data (4 database tools)\n- API testing uses actual external service endpoints (8 API testing tools)\n- **Development server** includes templates that enforce real data patterns\n\n### Cost Optimization ✅\n\n- **Consolidated architecture** reduces infrastructure overhead by 60%\n- API tracking and quota monitoring (8 API tools in production server)\n- Budget analysis and cost breakdown reporting (database analytics)\n- Performance benchmarking tools (development server)\n\n### Performance Monitoring ✅\n\n- **Enhanced monitoring capabilities** (7 system monitoring tools)\n- Real-time health checks and diagnostics\n- Comprehensive performance analysis and recommendations\n- Docker integration and deployment tracking\n\n### AI-Enhanced Development Workflow\n\nThis v2.0 consolidated MCP implementation transforms ProspectPro development into a **streamlined AI-enhanced workflow** where intelligent assistants have direct access to:\n\n- **Real business data** through optimized database analytics\n- **Live API testing** with cost and performance monitoring\n- **Comprehensive system insights** through unified diagnostics\n- **Development acceleration** through specialized tooling\n\n**Result**: 60% fewer processes, 100% functionality preservation, enhanced AI productivity.\n"}}},
{"type":"measure","name":"lsp.did_open","count":54,"duration":0.273},
{"type":"mark","name":"lsp.did_open","count":55,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json","languageId":"jsonc","version":1,"text":"{\r\n  \"name\": \"ProspectPro - Verified Business Intelligence\",\r\n  \"image\": \"mcr.microsoft.com/devcontainers/javascript-node:20\",\r\n  \"features\": {\r\n    \"ghcr.io/devcontainers/features/git:1\": {}\r\n  },\r\n  \"customizations\": {\r\n    \"vscode\": {\r\n      \"extensions\": [\r\n        // Core Development\r\n        \"denoland.vscode-deno\",\r\n        \"supabase.supabase-vscode\",\r\n        \"dbaeumer.vscode-eslint\",\r\n        \"esbenp.prettier-vscode\",\r\n\r\n        // Productivity\r\n        \"eamodio.gitlens\",\r\n        \"github.copilot\",\r\n        \"github.copilot-chat\",\r\n        \"streetsidesoftware.code-spell-checker\",\r\n        \"wayou.vscode-todo-highlight\",\r\n\r\n        // API Development\r\n        \"humao.rest-client\",\r\n        \"rangav.vscode-thunder-client\",\r\n\r\n        // Database Tools\r\n        \"mtxr.sqltools\",\r\n        \"mtxr.sqltools-driver-pg\",\r\n\r\n        // Security\r\n        \"snyk-security.snyk-vulnerability-scanner\",\r\n\r\n        // Performance\r\n        \"wix.vscode-import-cost\",\r\n\r\n        // Documentation\r\n        \"bierner.markdown-preview-github-styles\",\r\n\r\n        // Development Theme & Visual Organization\r\n        \"deepforest.theme\", // Vira Deepforest theme for organized development\r\n        \"vscode-icons-team.vscode-icons\" // Better file icons for organization\r\n      ],\r\n      \"settings\": {\r\n        \"terminal.integrated.defaultProfile.linux\": \"bash\",\r\n        \"deno.enable\": true,\r\n        \"deno.enablePaths\": [\"supabase/functions\"],\r\n        \"git.autofetch\": true,\r\n        \"git.confirmSync\": false,\r\n        \"git.enableSmartCommit\": true,\r\n\r\n        // Editor Performance Settings - Enhanced for Development\r\n        \"editor.minimap.enabled\": false,\r\n        \"editor.renderWhitespace\": \"none\",\r\n        \"editor.renderControlCharacters\": false,\r\n        \"workbench.colorTheme\": \"Vira Deepforest\", // Development-specific theme\r\n        \"workbench.iconTheme\": \"vscode-icons\", // Better file icons for organization\r\n        \"workbench.list.smoothScrolling\": false,\r\n        \"workbench.tree.renderIndentGuides\": \"none\",\r\n        \"workbench.editor.closeOnFileDelete\": true,\r\n\r\n        // Development-specific UI enhancements\r\n        \"workbench.colorCustomizations\": {\r\n          \"[Vira Deepforest]\": {\r\n            \"titleBar.activeBackground\": \"#1a4d3a\",\r\n            \"titleBar.activeForeground\": \"#ffffff\",\r\n            \"statusBar.background\": \"#1a4d3a\",\r\n            \"statusBar.foreground\": \"#ffffff\",\r\n            \"activityBar.background\": \"#0d2818\",\r\n            \"panel.background\": \"#0a1f14\"\r\n          }\r\n        },\r\n        \"workbench.settings.editor\": \"json\",\r\n        \"breadcrumbs.enabled\": true,\r\n\r\n        // File System Performance\r\n        \"files.watcherExclude\": {\r\n          \"**/*.log\": true,\r\n          \"**/*.tmp\": true,\r\n          \"**/node_modules/**\": true,\r\n          \"**/archive/**\": true,\r\n          \"**/.git/**\": true,\r\n          \"**/logs/**\": true\r\n        },\r\n\r\n        // Search Performance\r\n        \"search.exclude\": {\r\n          \"**/node_modules\": true,\r\n          \"**/*.log\": true,\r\n          \"**/archive/**\": true,\r\n          \"**/.git\": true\r\n        },\r\n        \"search.searchOnType\": false,\r\n\r\n        // Copilot Optimization\r\n        \"github.copilot.chat.historyCount\": 8,\r\n        \"github.copilot.chat.welcomeMessage\": \"none\",\r\n        \"github.copilot.chat.completionPhrasesEnabled\": false,\r\n        \"github.copilot.advanced.setAutoCompletionTriggerThreshold\": 30,\r\n\r\n        // Terminal Settings - Development Enhanced\r\n        \"terminal.integrated.gpuAcceleration\": \"on\",\r\n        \"terminal.integrated.scrollback\": 1000,\r\n        \"terminal.integrated.fontFamily\": \"Consolas, 'Courier New', monospace\",\r\n        \"terminal.integrated.fontSize\": 13,\r\n\r\n        // Development Environment Indicators\r\n        \"window.title\": \"🎯 ${folderName} - Verified Business Intelligence ${separator} ${activeEditorShort}\",\r\n        \"workbench.startupEditor\": \"welcomePageInEmptyWorkbench\",\r\n\r\n        // === MCP (Model Context Protocol) Configuration ===\r\n        \"mcp.enable\": true,\r\n        \"mcp.configFile\": \"${workspaceFolder}/.vscode/mcp-config.json\",\r\n\r\n        // API Development Specific Settings\r\n        \"rest-client.enableTelemetry\": false,\r\n        \"files.associations\": {\r\n          \"*.http\": \"http\",\r\n          \"*.rest\": \"http\"\r\n        },\r\n\r\n        // AI-Enhanced Development Settings for Verified Data Integration\r\n        \"ai.contextAware\": true,\r\n        \"ai.projectContext\": {\r\n          \"type\": \"verified-business-intelligence-platform\",\r\n          \"framework\": \"supabase-edge-functions\",\r\n          \"database\": \"supabase-postgresql\",\r\n          \"apis\": [\r\n            \"google-places\",\r\n            \"apollo-contacts\",\r\n            \"chamber-commerce\",\r\n            \"professional-licensing\"\r\n          ],\r\n          \"deployment\": \"supabase-edge-functions\",\r\n          \"dataPolicy\": \"zero-fake-data-verified-contacts-only\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"forwardPorts\": [3000, 5432],\r\n  \"postCreateCommand\": \"bash -lc 'set -e; echo \\\"� Setting up ProspectPro Verified Business Intelligence Environment...\\\"; sudo apt-get update && sudo apt-get install -y docker.io; if [ -f package-lock.json ]; then npm ci; else npm install; fi; npm i supabase --save-dev; npm run mcp:install; npm run mcp:test; echo \\\"✅ Verified data environment ready with zero fake data policy!\\\"; echo \\\"🚀 ProspectPro verified business intelligence development ready\\\"'\",\r\n  \"postStartCommand\": \"bash -c 'echo \\\"� ProspectPro Verified Business Intelligence Started\\\"; echo \\\"Data Policy: Zero Fake Data | Contacts: Verified Only | Architecture: Supabase Edge Functions\\\"; echo \\\"💡 Use Copilot Chat for AI-assisted development with verified data context\\\"'\",\r\n  \"runArgs\": [\"--init\", \"-v\", \"/var/run/docker.sock:/var/run/docker.sock\"],\r\n  \"remoteUser\": \"node\"\r\n}\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":55,"duration":0.085},
{"type":"mark","name":"lsp.did_open","count":56,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DOCUMENTATION_UPDATE_SUMMARY.md","languageId":"markdown","version":1,"text":"# 📝 Documentation Update Summary – ProspectPro v4.3.1\n\n## Overview\n\nDocumented the campaign store null-safety fix that resolves React runtime 185 blank screens after background discovery completes.\n\n---\n\n## ✅ Updated Assets\n\n### `.github/copilot-instructions.md`\n\n- Added the v4.3.1 root cause & solution for blank screens in the troubleshooting section.\n\n### `DOCUMENTATION_INDEX.md`\n\n- Linked the new blank screen guidance so operators know to redeploy the null-safe bundle.\n\n### `README.md`\n\n- Added a troubleshooting callout instructing teams to rebuild/redeploy if results do not render post-job.\n\n### `CHANGELOG.md`\n\n- Logged the v4.3.1 patch covering the campaign store hardening and documentation refresh.\n\n### `mcp-config.json`\n\n- Introduced a quick command for running the production frontend build so assistants can validate store fixes before deploys.\n\n### `mcp-servers/README.md`\n\n- Referenced the blank screen diagnostic within the troubleshooting workflow.\n\n---\n\n# 📝 Documentation Update Summary - ProspectPro v4.2\n\n## Overview\n\nUpdated all core documentation to reflect v4.2's complete email discovery and verification system.\n\n---\n\n## ✅ Updated Files\n\n### 1. **/.github/copilot-instructions.md**\n\n**Changes**:\n\n- Updated version from 4.1.0 to 4.2.0\n- Changed title to \"Complete Email Discovery & Verification Platform\"\n\n# 📝 Documentation Update Summary – ProspectPro v4.3\n\n## Overview\n\nDocumentation, MCP settings, and AI assistant instructions have been scrubbed for the October 9, 2025 build. All references now reflect Supabase session-enforced authentication, the refreshed edge function lineup, and the new diagnostics workflow.\n\n---\n\n## ✅ Updated Assets\n\n### `.github/copilot-instructions.md`\n\n- Replaced the edge function inventory with discovery/enrichment/export/diagnostic groupings.\n- Added Supabase session JWT requirements, `test-new-auth`, `test-official-auth`, and `scripts/test-auth-patterns.sh` to the debugging commands.\n- Updated troubleshooting and deployment guidance to reference session tokens instead of anon-key shortcuts.\n\n### `README.md`\n\n- Documented the expanded edge function set (including diagnostics) and clarified session token usage.\n- Updated testing commands with `SUPABASE_SESSION_JWT` placeholders and added the auth diagnostics curl example.\n- Refreshed the footer version statement for v4.3.\n\n### `DOCUMENTATION_INDEX.md`\n\n- Reorganized the production function list to match the new supabase-native auth model.\n- Added commands for the auth diagnostics script and clarified session token prerequisites.\n- Updated quick command references and the documentation timestamp.\n\n### `PROSPECTPRO_V4.3_RELEASE_NOTES.md`\n\n- Highlighted the Supabase-native authentication shift in the release highlights.\n- Updated deployment checklist to require session JWTs and include auth diagnostics validation steps.\n\n### `LATEST_DEPLOYMENT.md`\n\n- Rewritten for v4.3 with session enforcement, edge function redeploy list, smoke tests, and verification checklist.\n\n### `TECHNICAL_SUMMARY_v4.3.md`\n\n- Expanded the production edge function table to include discovery, enrichment, export, and diagnostic endpoints.\n- Introduced session token operational notes and updated curl examples.\n\n### `CHANGELOG.md`\n\n- Added the 4.3.0 entry summarizing auth migration, diagnostics, and documentation refresh.\n\n### `mcp-config.json`\n\n- Adjusted quick commands to require session JWTs and added helpers for deploying/running the new diagnostics.\n- Updated server descriptions to mention session enforcement coverage.\n\n### `mcp-servers/README.md`\n\n- Incorporated Supabase session enforcement throughout troubleshooting guidance and manual test commands.\n- Added explicit examples for `test-new-auth`, `test-official-auth`, and `scripts/test-auth-patterns.sh`.\n\n### `DOCUMENTATION_UPDATE_SUMMARY.md`\n\n- (This file) Re-authored to capture v4.3 documentation changes.\n\n---\n\n## 📋 Coverage Snapshot\n\n| Area                         | Status | Notes                                                                                        |\n| ---------------------------- | ------ | -------------------------------------------------------------------------------------------- |\n| Supabase Session Enforcement | ✅     | All docs replace anon-key curl examples with session JWT guidance.                           |\n| Edge Function Inventory      | ✅     | Lists include discovery, enrichment, export, and diagnostics.                                |\n| Deployment Guides            | ✅     | `LATEST_DEPLOYMENT.md`, release notes, and README reference new redeploy set + auth testing. |\n| MCP Tooling                  | ✅     | Config + README expose session diagnostics and quick commands.                               |\n| Change Log                   | ✅     | 4.3.0 entry recorded with authentication focus.                                              |\n\n---\n\n## � Follow-Up\n\n- Keep session token examples synchronized with Supabase JS upgrades.\n- Update docs again if additional diagnostics or tier modules are introduced.\n- Mirror these updates in any external knowledge bases or support runbooks.\n\n---\n\n**Documentation Status:** ✅ Refreshed for v4.3 Supabase session enforcement  \n**Last Updated:** October 9, 2025\n\n---\n\n## 📝 Next Steps\n\n### Immediate\n\n1. ✅ All documentation updated\n2. ✅ Copilot Chat context refreshed\n3. ✅ MCP servers aligned with v4.2\n\n### Ongoing\n\n- [ ] Keep documentation updated with API changes\n- [ ] Add examples as users encounter issues\n- [ ] Document common troubleshooting patterns\n- [ ] Update cost structure if API pricing changes\n\n---\n\n## 📊 Summary Statistics\n\n**Files Updated**: 3 core documentation files  \n**Files Created**: 7 new documentation files  \n**Total Lines**: 2,500+ lines of documentation  \n**Edge Functions Documented**: 6 production functions  \n**API Services Documented**: 6 external services  \n**Cost Structures Documented**: 4 enrichment levels  \n**Quality Metrics Documented**: 5 coverage rates\n\n**Documentation Status**: ✅ COMPLETE for v4.2\n\n---\n\n**ProspectPro v4.2 Documentation**  \n**Updated**: October 3, 2025  \n**Status**: Production Ready  \n**Coverage**: Complete enrichment ecosystem documented\n"}}},
{"type":"measure","name":"lsp.did_open","count":56,"duration":0.075},
{"type":"mark","name":"lsp.did_open","count":57,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/PRODUCTION_READY_V4.3.md","languageId":"markdown","version":1,"text":"# ProspectPro v4.3 – Production Ready Summary\n\n**Date:** October 9, 2025  \n**Status:** ✅ Production deployment live with Supabase session enforcement\n\n---\n\n## 🔐 Authentication & Authorization\n\n- Shared `authenticateRequest` calls `supabaseClient.auth.getUser`, eliminating custom JWKS validation.\n- All authenticated Edge Functions require `Authorization: Bearer <SUPABASE_SESSION_JWT>`.\n- Diagnostics stack:\n  - `test-new-auth` – returns session metadata, RLS scope, and environment readiness.\n  - `test-official-auth` – verifies helper parity with Supabase reference implementation.\n  - `scripts/test-auth-patterns.sh` – compares helper vs reference and highlights divergence.\n- Frontend retrieves tokens via `supabase.auth.getSession()` and refreshes on `onAuthStateChange`.\n\n## 🧠 Core Edge Functions\n\n| Category                  | Functions                                                                                                                 |\n| ------------------------- | ------------------------------------------------------------------------------------------------------------------------- |\n| Discovery                 | `business-discovery-background`, `business-discovery-optimized`, `business-discovery-user-aware` (legacy)                 |\n| Enrichment & Coordination | `enrichment-hunter`, `enrichment-neverbounce`, `enrichment-orchestrator`, `enrichment-business-license`, `enrichment-pdl` |\n| Export                    | `campaign-export-user-aware`, `campaign-export` (internal automation)                                                     |\n| Diagnostics               | `test-new-auth`, `test-official-auth`, `test-business-discovery`, `test-google-places`                                    |\n\nAll discovery/enrichment/export functions now consume the unified auth context (`userId`, `email`, `sessionId`, `isAnonymous`, `supabaseClient`).\n\n## 🗄️ Database & RLS\n\n- `campaigns`, `leads`, `discovery_jobs`, and `dashboard_exports` persist `user_id` + `session_user_id`.\n- `discovery_jobs.metrics` tracks tier, sources, validation/enrichment cost, census density, and confidence multipliers.\n- RLS policies restrict access to matching `auth.uid()` or legacy session IDs; diagnostics verify enforcement.\n\n## 🚀 Deployment Checklist\n\n```bash\n# Deploy discovery + enrichment + export stack\nsupabase functions deploy business-discovery-background\nsupabase functions deploy business-discovery-optimized\nsupabase functions deploy campaign-export-user-aware\nsupabase functions deploy enrichment-hunter\nsupabase functions deploy enrichment-neverbounce\nsupabase functions deploy enrichment-orchestrator\nsupabase functions deploy enrichment-business-license\nsupabase functions deploy enrichment-pdl\n\n# Deploy diagnostics\nsupabase functions deploy test-new-auth\nsupabase functions deploy test-official-auth\nsupabase functions deploy test-business-discovery\nsupabase functions deploy test-google-places\n\n# Build + deploy frontend\nnpm run build\ncd dist && vercel --prod\n```\n\n## 🧪 Smoke Tests\n\n```bash\n# Background discovery (session JWT required)\ncurl -X POST \\\n  'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background' \\\n  -H 'Authorization: Bearer <SUPABASE_SESSION_JWT>' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\":\"coffee shop\",\"location\":\"Seattle, WA\",\"tierKey\":\"PROFESSIONAL\",\"maxResults\":2,\"sessionUserId\":\"prod-ready-430\"}'\n\n# Auth diagnostics\ncurl -X POST \\\n  'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth' \\\n  -H 'Authorization: Bearer <SUPABASE_SESSION_JWT>' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"diagnostics\":true}'\n\n./scripts/test-auth-patterns.sh <SUPABASE_SESSION_JWT>\n\n# Export validation\ncurl -X POST \\\n  'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/campaign-export-user-aware' \\\n  -H 'Authorization: Bearer <SUPABASE_SESSION_JWT>' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"campaignId\":\"<CAMPAIGN_ID>\",\"format\":\"csv\",\"sessionUserId\":\"prod-ready-430\"}'\n```\n\n## ✅ Verification Checklist\n\n- [ ] All listed functions deployed with latest commit.\n- [ ] `test-new-auth` + `test-official-auth` return 200 with current session token.\n- [ ] Background discovery smoke test writes campaign + leads tied to caller `user_id`.\n- [ ] Export smoke test returns CSV with enrichment metadata.\n- [ ] `scripts/test-auth-patterns.sh` shows helper/reference parity.\n- [ ] Supabase secrets populated (Google, Foursquare, Census, Hunter.io, NeverBounce, Supabase keys).\n- [ ] Frontend deployed from `/dist` and configured with current publishable key.\n\n---\n\n**ProspectPro v4.3 is production ready with authenticated session enforcement, tier-aware background discovery, and full diagnostics coverage.**\n"}}},
{"type":"measure","name":"lsp.did_open","count":57,"duration":0.067},
{"type":"mark","name":"lsp.did_open","count":58,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/PRODUCTION_READY_V4.2.md","languageId":"markdown","version":1,"text":"# 🎉 ProspectPro v4.2 - Session Authentication COMPLETE!\n\n> **Superseded:** Refer to `PRODUCTION_READY_V4.3.md` for the current session-enforced production state (October 9, 2025).\n\n## ✅ STATUS: FULLY OPERATIONAL\n\n**Date**: October 4, 2025  \n**Production URL**: https://prospect-8fvlz5h1i-appsmithery.vercel.app  \n**Status**: All systems operational with anonymous session authentication\n\n## What Was Accomplished\n\n### 1. ✅ Anonymous Session Authentication\n\n- Frontend automatically creates anonymous Supabase sessions on load\n- Users get real JWT tokens (ES256 signed)\n- No sign-up required for basic usage\n- Seamless upgrade to authenticated accounts later\n\n### 2. ✅ Edge Function Integration\n\n- Deployed with `--no-verify-jwt` flag to accept ES256 JWTs\n- Edge Functions validate user sessions via `auth.getUser()`\n- User context properly tracked in database\n- RLS policies enforce data isolation\n\n### 3. ✅ Production Deployment\n\n- Frontend: Built and deployed to Vercel\n- Backend: 6 Edge Functions operational\n- Database: User-aware schema with RLS policies\n- Authentication: ES256 JWT signing keys active\n\n## Test Results\n\n```bash\n✅ Anonymous session created\n✅ JWT token obtained (ES256 signed)\n✅ Edge Function accepted JWT\n✅ Business discovery working\n✅ Real business data returned\n✅ Campaign stored in database\n✅ User context tracked\n\n🎉 Session-based authentication is FULLY FUNCTIONAL!\n```\n\n## What Works Now\n\n### For End Users\n\n1. **Visit site** → Anonymous session auto-created\n2. **Start discovery** → Works immediately (no sign-up)\n3. **View results** → Real business data with verified contacts\n4. **Enrich leads** → Progressive enrichment pipeline\n5. **Export data** → CSV export with user-aware filtering\n6. **Create account** (optional) → Seamless upgrade from anonymous\n\n### For Developers\n\n- ✅ Session management handled automatically\n- ✅ JWT tokens refresh automatically\n- ✅ User context available in all API calls\n- ✅ RLS policies enforce data security\n- ✅ Anonymous and authenticated users both supported\n\n## Architecture\n\n```\nUser Visits App\n    ↓\nAnonymous Session Created (Supabase Auth)\n    ↓\nJWT Token Generated (ES256 signed)\n    ↓\nUser Clicks \"Start Discovery\"\n    ↓\nensureSession() validates session\n    ↓\nEdge Function Called with JWT Authorization\n    ↓\nEdge Function validates via auth.getUser()\n    ↓\nReal Business Data Returned\n    ↓\nCampaign + Leads Stored in Database (with user_id)\n    ↓\n✅ Results Displayed\n```\n\n## Key Technical Details\n\n### JWT Signing\n\n- **Algorithm**: ES256 (Elliptic Curve)\n- **Key ID**: 41073739-ae09-48ff-b3ed-c3f978d1d3b2\n- **Discovery URL**: https://sriycekxdqnesdsgwiuc.supabase.co/auth/v1/.well-known/jwks.json\n- **Validation**: Automatic via Supabase Edge Runtime\n\n### Edge Functions\n\n- **Deployment**: `--no-verify-jwt` flag enables ES256 JWT acceptance\n- **Auth Method**: `supabaseClient.auth.getUser()` validates sessions\n- **User Context**: Available in all database operations\n- **RLS**: Policies enforce per-user data isolation\n\n### Database Schema\n\n```sql\ncampaigns:\n  - user_id: UUID (authenticated users)\n  - session_user_id: TEXT (anonymous users)\n  - RLS policies: Users see only their campaigns\n\nleads:\n  - user_id: UUID (authenticated users)\n  - session_user_id: TEXT (anonymous users)\n  - RLS policies: Users see only their leads\n```\n\n### Frontend\n\n- **Session Management**: AuthContext with anonymous support\n- **Token Handling**: Automatic via Supabase client\n- **API Calls**: JWT automatically included in Authorization header\n- **Refresh**: Auto-refresh tokens before expiration\n\n## Testing Commands\n\n### Test Session Authentication\n\n```bash\ncd /workspaces/ProspectPro\n./test-session-auth.sh\n```\n\n**Expected Output**:\n\n```\n✅ Anonymous session created successfully!\n✅ Edge Function authentication SUCCESS!\n🎉 Session-based authentication is FULLY FUNCTIONAL!\n```\n\n### Test Production Site\n\n```bash\ncurl 'https://prospect-8fvlz5h1i-appsmithery.vercel.app'\n# Should return 200 OK with HTML\n```\n\n### Test Business Discovery\n\n```bash\n# Create anonymous session\nSESSION_TOKEN=$(curl -s -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/auth/v1/signup' \\\n  -H \"apikey: sb_publishable_your_key_here\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"data\": {}}' | jq -r '.access_token')\n\n# Call Edge Function\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-user-aware' \\\n  -H \"Authorization: Bearer $SESSION_TOKEN\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"businessType\": \"coffee shop\",\n    \"location\": \"Seattle, WA\",\n    \"maxResults\": 2\n  }' | jq '.success'\n# Should output: true\n```\n\n## Deployment Configuration\n\n### Environment Variables (.env.production)\n\n```bash\nVITE_SUPABASE_URL=https://sriycekxdqnesdsgwiuc.supabase.co\nVITE_SUPABASE_ANON_KEY=sb_publishable_your_key_here\nVITE_EDGE_FUNCTIONS_URL=https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1\n```\n\n### Edge Functions (Deployed)\n\n1. `business-discovery-user-aware` (with --no-verify-jwt)\n2. `campaign-export-user-aware`\n3. `enrichment-orchestrator`\n4. `enrichment-hunter`\n5. `enrichment-neverbounce`\n6. `enrichment-business-license`\n7. `enrichment-pdl`\n\n### Vercel Deployment\n\n- **Project**: appsmithery/prospect-pro\n- **Framework**: Vite (auto-detected)\n- **Build Command**: `npm run build`\n- **Output Directory**: `dist`\n- **Production URL**: https://prospect-8fvlz5h1i-appsmithery.vercel.app\n\n## Security Features\n\n### ✅ Implemented\n\n- Anonymous session tokens (unique per user)\n- JWT token auto-refresh\n- RLS policies (database-level security)\n- User-campaign ownership tracking\n- Session-based data isolation\n- No exposed API keys in frontend\n\n### ✅ Best Practices\n\n- Tokens stored in Supabase client (not localStorage directly)\n- Authorization header for all API calls\n- ES256 signing (modern cryptography)\n- Automatic token expiration\n- Seamless anonymous → authenticated upgrade\n\n## User Warnings Addressed\n\nThe Supabase dashboard warnings about anonymous access policies are **expected and safe**:\n\n| Warning                             | Status      | Explanation                                                      |\n| ----------------------------------- | ----------- | ---------------------------------------------------------------- |\n| Anonymous Access Policies           | ✅ Expected | RLS policies allow anonymous users to access their own data only |\n| Leaked Password Protection Disabled | ℹ️ Optional | Not needed for anonymous-first app (enable when adding auth)     |\n\n## Next Steps (Optional Enhancements)\n\n### Phase 1: User Accounts (Optional)\n\n- Add email/password sign-up\n- Social auth (Google, GitHub)\n- User profile management\n- Campaign history persistence\n\n### Phase 2: Advanced Features\n\n- Team collaboration\n- API key management for users\n- Custom enrichment tiers\n- Webhook notifications\n\n### Phase 3: Analytics\n\n- User behavior tracking\n- Campaign performance metrics\n- Cost optimization insights\n- A/B testing framework\n\n## Monitoring\n\n### Check Edge Function Logs\n\n```\nhttps://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/logs/edge-functions\n```\n\n### Check Database Activity\n\n```sql\n-- View recent campaigns\nSELECT * FROM campaigns ORDER BY created_at DESC LIMIT 10;\n\n-- View anonymous users\nSELECT DISTINCT session_user_id FROM campaigns WHERE session_user_id IS NOT NULL;\n\n-- View authenticated users\nSELECT DISTINCT user_id FROM campaigns WHERE user_id IS NOT NULL;\n```\n\n### Check Vercel Deployments\n\n```\nhttps://vercel.com/appsmithery/prospect-pro\n```\n\n## Support & Documentation\n\n- **Implementation Guide**: `/SESSION_AUTH_IMPLEMENTATION.md`\n- **Deployment Guide**: `/DEPLOYMENT_COMPLETE_SESSION_AUTH.md`\n- **Test Script**: `/test-session-auth.sh`\n- **API Documentation**: `/docs/API.md`\n\n## Summary\n\n✅ **Anonymous session authentication fully implemented and operational**  \n✅ **Edge Functions accepting ES256-signed JWTs**  \n✅ **Frontend deployed with automatic session management**  \n✅ **Database configured with user-aware RLS policies**  \n✅ **Production site live and functional**  \n✅ **Real business data discovery working**  \n✅ **Progressive enrichment pipeline operational**\n\n**ProspectPro v4.2 is now PRODUCTION READY with complete session-based authentication!** 🚀\n"}}},
{"type":"measure","name":"lsp.did_open","count":58,"duration":0.118},
{"type":"mark","name":"lsp.did_open","count":59,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/NEED_ANON_KEY.md","languageId":"markdown","version":1,"text":"# Need Anon Key\n\n> **Legacy Notice (October 9, 2025):** ProspectPro v4.3 now enforces Supabase session JWTs for all Edge Functions. This guide is retained for historical reference when troubleshooting publishable key issues. For the current authentication pattern see `EDGE_FUNCTION_AUTH_UPDATE_GUIDE.md` and `PRODUCTION_READY_V4.3.md`.\n\n# The Issue\n\nYour JWT signing keys show you're using **ES256** (modern elliptic curve signing). But Edge Functions still need an **anon/public API key** for validation.\n\n# 🎯 CRITICAL: Get the Anon/Public API Key\n\n## The Issue\n\nYour JWT signing keys show you're using **ES256** (modern elliptic curve signing). But Edge Functions still need an **anon/public API key** for validation.\n\n## Where to Find It\n\n**Go to your Supabase Dashboard:**\n\nhttps://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/settings/api\n\n**Look for the \"Project API keys\" section** - you should see:\n\n```\nanon\npublic\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...  (or similar JWT)\n[Copy] [Show] [Generate new]\n```\n\n**OR** it might show as:\n\n```\nanon / public\nsb_anon_...  (new format)\n[Copy] [Show]\n```\n\n## What We Need\n\n**Share the \"anon\" or \"public\" key** - it will be either:\n\n- JWT format: `eyJhbGciOiJ...` (long string, ~200+ characters)\n- OR new format: `sb_anon_...` (if they changed the format)\n\n## Once You Share It\n\nI'll run:\n\n```bash\nsupabase secrets set SUPABASE_ANON_KEY=\"<your-anon-key>\"\n./test-session-auth.sh\n```\n\nAnd everything will work!\n\n## Why This is Needed\n\nSupabase Edge Functions validate incoming JWTs against the project's anon key. Without the correct anon key configured in the Edge Function environment, ALL JWT tokens (including valid anonymous user tokens) are rejected with \"Invalid JWT\".\n\nYour user JWT tokens are valid and properly signed with the ES256 key you showed me. The Edge Function runtime just needs the anon key to verify them.\n"}}},
{"type":"measure","name":"lsp.did_open","count":59,"duration":0.045},
{"type":"mark","name":"lsp.did_open","count":60,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/FINAL_JWT_ANON_KEY_SOLUTION.md","languageId":"markdown","version":1,"text":"# ✅ FINAL SOLUTION: JWT Anon Key Required\n\n> **Legacy Notice (October 9, 2025):** ProspectPro v4.3 relies on Supabase session JWTs provided by clients; this artifact remains for historical context when auditing publishable key configuration. See `EDGE_FUNCTION_AUTH_UPDATE_GUIDE.md` for the supported pattern.\n\n## The Root Cause (Confirmed)\n\nSupabase Edge Functions reject JWTs at the **platform level** before our code runs. This validation requires the correct `SUPABASE_ANON_KEY` to be configured.\n\n**Current Problem**:\n\n- `SUPABASE_ANON_KEY` in Edge Functions = `sb_publishable_...` (database key)\n- Edge Functions need = JWT anon key (`eyJ...` format)\n\n## The Solution\n\n### Step 1: Get the JWT Anon Key\n\n**Go to Supabase Dashboard** → API Settings:\nhttps://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/settings/api\n\n**Look for \"Project API keys\" section** - You should see:\n\n```\nanon / public\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL3...\n[Copy] [Show]\n```\n\n**Copy that JWT key** (starts with `eyJ...`, NOT `sb_publishable_...`)\n\n### Step 2: Update Edge Function Environment\n\n**Option A: Via Supabase CLI** (from your Codespace):\n\n```bash\ncd /workspaces/ProspectPro\n\n# Create .env file with JWT anon key\necho \"SUPABASE_ANON_KEY=eyJ...\" > .env.edge-functions\n# ^ Replace eyJ... with actual JWT anon key\n\n# Set the secret\nsupabase secrets set SUPABASE_ANON_KEY --env-file .env.edge-functions\n\n# Verify it was set\nsupabase secrets list | grep SUPABASE_ANON_KEY\n```\n\n**Option B: Via Supabase Dashboard**:\n\n1. Go to: https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/settings/functions\n2. Find \"Environment variables\" section\n3. Find `SUPABASE_ANON_KEY`\n4. Click \"Edit\"\n5. Replace value with JWT anon key (`eyJ...`)\n6. Save\n\n### Step 3: Test\n\n```bash\ncd /workspaces/ProspectPro\n./test-session-auth.sh\n```\n\n**Expected Result**:\n\n```\n✅ Anonymous session created successfully!\n✅ Edge Function authentication SUCCESS!\n🎉 Session-based authentication is FULLY FUNCTIONAL!\n```\n\n## Why This is Necessary\n\nSupabase Edge Functions use the `SUPABASE_ANON_KEY` to:\n\n1. **Validate incoming JWTs** (platform level, before your code)\n2. **Create Supabase clients** inside Edge Functions\n3. **Apply RLS policies** based on user context\n\nWithout the correct JWT anon key, the platform rejects all JWTs with \"Invalid JWT\".\n\n## What's the Difference?\n\n| Key Type            | Format               | Purpose                         | Used By                           |\n| ------------------- | -------------------- | ------------------------------- | --------------------------------- |\n| **Publishable Key** | `sb_publishable_...` | Database REST API access        | Frontend database queries         |\n| **JWT Anon Key**    | `eyJhbGc...`         | JWT validation + Edge Functions | Edge Function authentication      |\n| **Secret Key**      | `sb_secret_...`      | Admin database access           | Server-side privileged operations |\n\n## After Setting the JWT Anon Key\n\n**Everything will work**:\n\n- ✅ Anonymous users can call Edge Functions\n- ✅ Authenticated users can call Edge Functions\n- ✅ Business discovery will work\n- ✅ Lead enrichment will work\n- ✅ Database operations respect RLS policies\n- ✅ User context properly tracked\n\n## Quick Test Commands\n\n```bash\n# After setting JWT anon key, test Edge Function directly:\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-user-aware' \\\n  -H 'Authorization: Bearer <USER_JWT_TOKEN>' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\": \"coffee shop\", \"location\": \"Seattle, WA\", \"maxResults\": 1}'\n\n# Should return:\n# { \"success\": true, \"campaignId\": \"...\", \"leads\": [...] }\n```\n\n## Summary\n\n**What to Do**:\n\n1. Get JWT anon key from dashboard (eyJ... format)\n2. Set it as SUPABASE_ANON_KEY in Edge Functions\n3. Test with `./test-session-auth.sh`\n4. Visit production site and test discovery\n\n**Time Required**: 2-3 minutes\n\n**This is the FINAL piece needed** - once the JWT anon key is set, everything will work!\n"}}},
{"type":"measure","name":"lsp.did_open","count":60,"duration":0.079},
{"type":"mark","name":"lsp.did_open","count":61,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/EDGE_FUNCTION_JWT_ISSUE.md","languageId":"markdown","version":1,"text":"# 🔍 Edge Function JWT Authentication Issue\n\n> **Legacy Notice (October 9, 2025):** ProspectPro v4.3 resolves this by using Supabase session JWTs with `auth.getUser`. Keep this document for background, and see `EDGE_FUNCTION_AUTH_UPDATE_GUIDE.md` for the maintained workflow.\n\n## Current Status\n\n**Anonymous Session**: ✅ Working  \n**JWT Token Generated**: ✅ Working  \n**Edge Function**: ❌ Rejecting JWT with \"Invalid JWT\"\n\n## The Problem\n\nSupabase Edge Functions have **two layers of authentication**:\n\n1. **Platform-level JWT validation** (happens first, before our code)\n2. **Application-level validation** (our edge-auth.ts code)\n\nThe JWT is being rejected at **layer 1** - before our code even runs.\n\n## Why This Happens\n\nSupabase Edge Functions validate JWTs against the project's **JWT_SECRET**. The anonymous user JWT we're sending is valid, but something about the validation is failing.\n\n## Possible Causes\n\n### 1. Missing JWT Anon Key\n\nThe `SUPABASE_ANON_KEY` environment variable in Edge Functions might be:\n\n- Set to `sb_publishable_...` (wrong - this is for database API)\n- Missing the actual JWT anon key\n- Not updated after enabling anonymous auth\n\n**Solution**: Get the JWT anon key from Supabase dashboard\n\n### 2. Edge Functions Need Anon Key for Validation\n\nEven though we're sending user JWTs, Edge Functions might need the **anon key** configured to validate those JWTs.\n\n**How to Get JWT Anon Key**:\n\n1. Go to: https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/settings/api\n2. Look for \"Project API keys\" section\n3. Find **\"anon / public\"** key\n4. This should be JWT format (`eyJ...`), NOT `sb_publishable_...`\n\n### 3. Edge Function Configuration\n\nNeed to check if Edge Functions are configured to accept anonymous user JWTs.\n\n## Next Steps\n\n### Option 1: Get JWT Anon Key (Recommended)\n\nIf there's a JWT anon key in the dashboard:\n\n1. Copy the JWT anon key (starts with `eyJ...`)\n2. Set it as Edge Function secret:\n   ```bash\n   echo \"SUPABASE_ANON_KEY=eyJ...\" > .env\n   supabase secrets set --env-file .env SUPABASE_ANON_KEY\n   ```\n3. Redeploy Edge Functions\n4. Test again\n\n### Option 2: Disable JWT Validation (Not Recommended)\n\nMake Edge Functions publicly accessible without JWT validation. This is less secure but would work.\n\n### Option 3: Use Service Role Key\n\nHave the frontend call Edge Functions with the service role key. This is NOT recommended for security reasons.\n\n## What We Need from You\n\n**Go to the Supabase Dashboard**:\nhttps://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/settings/api\n\n**Check the \"Project API keys\" section**:\n\n- Do you see both `sb_publishable_...` AND a JWT key (`eyJ...`)?\n- If yes, copy the JWT key and share it\n- If no, we need to use a different approach\n\n## Alternative: Check if JWT Anon Key Exists\n\n```bash\n# Check current Edge Function secrets\nsupabase secrets list\n\n# Look for SUPABASE_ANON_KEY\n# Is it set to sb_publishable_... or eyJ...?\n```\n\nThe issue is that Edge Functions validate JWTs using a secret key, and we need to make sure that secret is properly configured.\n"}}},
{"type":"measure","name":"lsp.did_open","count":61,"duration":0.046},
{"type":"mark","name":"lsp.did_open","count":62,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/PRODUCTION_VALIDATION_STRATEGY.md","languageId":"markdown","version":1,"text":"# ProspectPro v4.3 Production Validation Strategy\n\n## Overview: Native Platform-First Debugging\n\n**Philosophy**: Leverage Supabase, Vercel, and browser native tooling for lightweight, iterative issue isolation without external dependencies or complex monitoring infrastructure.\n\n**Approach**: Systematic validation using platform-native logging, real-time observability, and targeted debugging to rapidly identify and resolve production issues.\n\n## 1. Multi-Layer Validation Architecture\n\n### Layer 1: Frontend Health (Vercel + Browser)\n\n- **Tool**: Browser Developer Tools + Vercel Analytics\n- **Scope**: User authentication, UI functionality, API call initiation\n- **Validation**: Session token generation, frontend state management, network request formation\n\n### Layer 2: Edge Function Health (Supabase)\n\n- **Tool**: Supabase Dashboard Edge Function Logs\n- **Scope**: Authentication validation, business logic execution, external API calls\n- **Validation**: Session JWT processing, API integration responses, error handling\n\n### Layer 3: Database Operations (Supabase)\n\n- **Tool**: Supabase Dashboard SQL Editor + Real-time Logs\n- **Scope**: RLS policy enforcement, data persistence, query performance\n- **Validation**: User-scoped data access, campaign creation, lead insertion\n\n### Layer 4: External API Integration (Edge Function Logs)\n\n- **Tool**: Structured logging within Edge Functions\n- **Scope**: Google Places, Hunter.io, NeverBounce, Foursquare API responses\n- **Validation**: Rate limiting, response parsing, cost tracking\n\n## 2. Iterative Testing Methodology\n\n### Phase 1: Authentication Flow Validation\n\n```bash\n# Test 1: Frontend session establishment\n# Browser DevTools → Application → Local Storage → sb-* keys\n# Expected: Valid session token, user object, refresh token\n\n# Test 2: Edge Function authentication\ncurl -X POST \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth\" \\\n  -H \"Authorization: Bearer [SESSION_JWT]\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"diagnostics\": true}'\n# Expected: 200 response with user context\n\n# Test 3: Database RLS enforcement\n# Supabase SQL Editor: SELECT * FROM campaigns WHERE user_id = auth.uid() LIMIT 1;\n# Expected: User-scoped results only\n```\n\n### Phase 2: Campaign Discovery Validation\n\n```bash\n# Test 4: Background discovery initiation\ncurl -X POST \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background\" \\\n  -H \"Authorization: Bearer [SESSION_JWT]\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"businessType\": \"coffee shop\", \"location\": \"Seattle, WA\", \"maxResults\": 2, \"tierKey\": \"PROFESSIONAL\", \"sessionUserId\": \"validation_test\"}'\n# Expected: 200 response with campaign ID\n\n# Test 5: Real-time discovery progress\n# Supabase Dashboard → Table Editor → campaigns table\n# Expected: New campaign row with 'processing' status\n\n# Test 6: Discovery completion\n# Wait 30 seconds, refresh campaigns table\n# Expected: Campaign status 'completed', results_count > 0\n```\n\n### Phase 3: Data Quality Validation\n\n```bash\n# Test 7: Lead quality verification\n# Supabase SQL Editor:\nSELECT business_name, phone, website, email, confidence_score\nFROM leads\nWHERE campaign_id = '[CAMPAIGN_ID]'\nORDER BY confidence_score DESC LIMIT 5;\n# Expected: Non-null phone/website, verified emails only, confidence > 50\n\n# Test 8: Cost tracking accuracy\nSELECT SUM(validation_cost) as total_cost\nFROM leads\nWHERE campaign_id = '[CAMPAIGN_ID]';\n# Expected: Reasonable cost per lead ($0.50-$2.00 range)\n```\n\n### Phase 4: Export Functionality Validation\n\n```bash\n# Test 9: Campaign export generation\ncurl -X POST \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/campaign-export-user-aware\" \\\n  -H \"Authorization: Bearer [SESSION_JWT]\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"campaignId\": \"[CAMPAIGN_ID]\", \"format\": \"csv\", \"sessionUserId\": \"validation_test\"}'\n# Expected: CSV download with complete lead data\n\n# Test 10: Export data integrity\n# Verify CSV contains: business_name, phone, website, email, confidence_score\n# Expected: All discovered leads present, no fake/generated data\n```\n\n## 3. Native Platform Observability Setup\n\n### Supabase Edge Function Logging\n\n```typescript\n// Standard logging pattern for all Edge Functions\nconsole.log(`[${functionName}] ${stage}: ${JSON.stringify(data)}`);\n\n// Example stages:\n// - AUTH_START, AUTH_SUCCESS, AUTH_FAILED\n// - API_REQUEST, API_SUCCESS, API_ERROR\n// - DB_QUERY, DB_SUCCESS, DB_ERROR\n// - VALIDATION_START, VALIDATION_SUCCESS, VALIDATION_FAILED\n```\n\n### Vercel Deployment Monitoring\n\n- **Deployment Logs**: Vercel Dashboard → Deployments → View Function Logs\n- **Analytics**: Real-time traffic, error rates, response times\n- **Network Tab**: Browser DevTools for client-side request inspection\n\n### Browser-Based Debugging\n\n```javascript\n// Frontend debugging utilities\nconsole.log(\"Supabase Session:\", await supabase.auth.getSession());\nconsole.log(\"Campaign Request:\", requestPayload);\nconsole.log(\"API Response:\", response);\n\n// Network monitoring\n// DevTools → Network → Filter by 'supabase.co' → Monitor request/response\n```\n\n## 4. Issue Isolation Decision Tree\n\n### Authentication Issues (401/403 Errors)\n\n1. **Check**: Browser Local Storage for `sb-*` keys\n2. **Verify**: Session token validity in Supabase Auth dashboard\n3. **Test**: Direct Edge Function call with curl\n4. **Debug**: Edge Function logs for specific authentication errors\n\n### Discovery Issues (Discovery Fails)\n\n1. **Check**: Edge Function logs for API integration errors\n2. **Verify**: External API quotas and rate limits\n3. **Test**: Individual API calls within Edge Functions\n4. **Debug**: Google Places/Foursquare response validation\n\n### Database Issues (Empty Results)\n\n1. **Check**: RLS policies in Supabase dashboard\n2. **Verify**: User ID propagation in database queries\n3. **Test**: Direct SQL queries in Supabase SQL Editor\n4. **Debug**: Campaign and lead table row-level access\n\n### Performance Issues (Slow Response)\n\n1. **Check**: Edge Function execution time in logs\n2. **Verify**: External API response times\n3. **Test**: Database query performance with EXPLAIN\n4. **Debug**: Network latency between services\n\n## 5. Automated Validation Scripts\n\n### Quick Health Check Script\n\n```bash\n#!/bin/bash\n# scripts/production-health-check.sh\n\necho \"🔍 ProspectPro v4.3 Production Health Check\"\necho \"============================================\"\n\n# Test 1: Frontend accessibility\necho \"Testing frontend accessibility...\"\nFRONTEND_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" https://prospect-28j3db56m-appsmithery.vercel.app)\nif [ \"$FRONTEND_STATUS\" = \"200\" ]; then\n  echo \"✅ Frontend: Accessible\"\nelse\n  echo \"❌ Frontend: Error $FRONTEND_STATUS\"\nfi\n\n# Test 2: Edge Functions availability\necho \"Testing Edge Functions availability...\"\nEDGE_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth)\nif [ \"$EDGE_STATUS\" = \"401\" ]; then\n  echo \"✅ Edge Functions: Responding (auth required)\"\nelse\n  echo \"❌ Edge Functions: Unexpected response $EDGE_STATUS\"\nfi\n\n# Test 3: Database connectivity\necho \"Testing database connectivity...\"\necho \"→ Manual verification required: Check Supabase dashboard connectivity\"\n\necho \"\"\necho \"🎯 Next Steps:\"\necho \"1. Authenticate in browser: https://prospect-28j3db56m-appsmithery.vercel.app\"\necho \"2. Extract session JWT from browser Local Storage (sb-* keys)\"\necho \"3. Run full campaign validation with session token\"\n```\n\n### Full Campaign Validation Script\n\n```bash\n#!/bin/bash\n# scripts/campaign-validation.sh\n\nif [ -z \"$1\" ]; then\n  echo \"Usage: $0 <SESSION_JWT>\"\n  exit 1\nfi\n\nSESSION_JWT=\"$1\"\nCAMPAIGN_TEST_ID=\"validation_$(date +%s)\"\n\necho \"🚀 Full Campaign Validation\"\necho \"==========================\"\n\n# Step 1: Authentication test\necho \"Step 1: Testing authentication...\"\nAUTH_RESPONSE=$(curl -s -X POST \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth\" \\\n  -H \"Authorization: Bearer $SESSION_JWT\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"diagnostics\": true}')\n\nif echo \"$AUTH_RESPONSE\" | grep -q '\"userId\"'; then\n  echo \"✅ Authentication: Success\"\n  USER_ID=$(echo \"$AUTH_RESPONSE\" | grep -o '\"userId\":\"[^\"]*\"' | cut -d'\"' -f4)\n  echo \"   User ID: $USER_ID\"\nelse\n  echo \"❌ Authentication: Failed\"\n  echo \"   Response: $AUTH_RESPONSE\"\n  exit 1\nfi\n\n# Step 2: Campaign discovery test\necho \"Step 2: Testing campaign discovery...\"\nDISCOVERY_RESPONSE=$(curl -s -X POST \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background\" \\\n  -H \"Authorization: Bearer $SESSION_JWT\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"businessType\\\": \\\"coffee shop\\\", \\\"location\\\": \\\"Seattle, WA\\\", \\\"maxResults\\\": 2, \\\"tierKey\\\": \\\"PROFESSIONAL\\\", \\\"sessionUserId\\\": \\\"$CAMPAIGN_TEST_ID\\\"}\")\n\nif echo \"$DISCOVERY_RESPONSE\" | grep -q '\"campaignId\"'; then\n  echo \"✅ Discovery: Campaign initiated\"\n  CAMPAIGN_ID=$(echo \"$DISCOVERY_RESPONSE\" | grep -o '\"campaignId\":\"[^\"]*\"' | cut -d'\"' -f4)\n  echo \"   Campaign ID: $CAMPAIGN_ID\"\nelse\n  echo \"❌ Discovery: Failed\"\n  echo \"   Response: $DISCOVERY_RESPONSE\"\n  exit 1\nfi\n\n# Step 3: Wait for processing\necho \"Step 3: Waiting for campaign processing (30 seconds)...\"\nsleep 30\n\n# Step 4: Export test\necho \"Step 4: Testing campaign export...\"\nEXPORT_RESPONSE=$(curl -s -X POST \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/campaign-export-user-aware\" \\\n  -H \"Authorization: Bearer $SESSION_JWT\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"campaignId\\\": \\\"$CAMPAIGN_ID\\\", \\\"format\\\": \\\"csv\\\", \\\"sessionUserId\\\": \\\"$CAMPAIGN_TEST_ID\\\"}\")\n\nif echo \"$EXPORT_RESPONSE\" | grep -q '\"rowCount\"'; then\n  echo \"✅ Export: Success\"\n  ROW_COUNT=$(echo \"$EXPORT_RESPONSE\" | grep -o '\"rowCount\":[0-9]*' | cut -d':' -f2)\n  echo \"   Exported Rows: $ROW_COUNT\"\nelse\n  echo \"❌ Export: Failed\"\n  echo \"   Response: $EXPORT_RESPONSE\"\nfi\n\necho \"\"\necho \"🎯 Validation Complete\"\necho \"Campaign ID: $CAMPAIGN_ID\"\necho \"Check Supabase dashboard for detailed results\"\n```\n\n## 6. Debug Information Collection\n\n### Frontend Debug Data Collection\n\n```javascript\n// Browser console script for collecting debug information\nconst debugInfo = {\n  timestamp: new Date().toISOString(),\n  url: window.location.href,\n  userAgent: navigator.userAgent,\n  supabaseSession: await supabase.auth.getSession(),\n  localStorage: Object.keys(localStorage).filter((k) => k.startsWith(\"sb-\")),\n  networkErrors: performance.getEntriesByType(\"navigation\")[0],\n  consoleErrors: [], // Manually captured from console\n};\n\nconsole.log(\"Debug Info:\", JSON.stringify(debugInfo, null, 2));\n```\n\n### Edge Function Debug Data Collection\n\n```typescript\n// Standard debug context for Edge Functions\nconst debugContext = {\n  timestamp: new Date().toISOString(),\n  functionName: \"business-discovery-background\",\n  requestId: crypto.randomUUID(),\n  userContext: {\n    userId: user?.id,\n    email: user?.email,\n    sessionId: sessionUserId,\n  },\n  requestPayload: req.body,\n  environment: {\n    region: Deno.env.get(\"SUPABASE_REGION\"),\n    version: Deno.env.get(\"FUNCTION_VERSION\"),\n  },\n};\n\nconsole.log(\n  `[DEBUG] ${debugContext.functionName}:`,\n  JSON.stringify(debugContext)\n);\n```\n\n## 7. Rapid Issue Resolution Playbook\n\n### Issue: \"Invalid JWT\" Errors\n\n**Diagnosis Time**: < 2 minutes\n\n1. Check browser Local Storage for `sb-access-token`\n2. Verify token expiry in JWT decoder\n3. Test fresh authentication in incognito window\n4. **Resolution**: Force re-authentication in frontend\n\n### Issue: \"Discovery Returns No Results\"\n\n**Diagnosis Time**: < 5 minutes\n\n1. Check Edge Function logs for API errors\n2. Verify Google Places API quota in Google Cloud Console\n3. Test direct API calls with sample queries\n4. **Resolution**: Adjust search parameters or check API keys\n\n### Issue: \"Database Permission Denied\"\n\n**Diagnosis Time**: < 3 minutes\n\n1. Check RLS policies in Supabase dashboard\n2. Verify user ID propagation in SQL queries\n3. Test direct database access with session user\n4. **Resolution**: Update RLS policies or fix user context passing\n\n### Issue: \"Export Contains No Data\"\n\n**Diagnosis Time**: < 4 minutes\n\n1. Check campaign completion status in database\n2. Verify lead insertion during discovery process\n3. Test export function with known campaign ID\n4. **Resolution**: Re-run discovery or fix lead insertion logic\n\n## 8. Success Metrics & KPIs\n\n### Performance Targets\n\n- **Authentication**: < 500ms session establishment\n- **Discovery**: < 60 seconds for 10 leads\n- **Export**: < 10 seconds for 100 leads\n- **Error Rate**: < 2% for all operations\n\n### Quality Targets\n\n- **Phone Coverage**: > 95% (via Google Places)\n- **Website Coverage**: > 90% (via Google Places)\n- **Email Accuracy**: > 95% (via Hunter.io + NeverBounce)\n- **Zero Fake Data**: 100% verified contacts only\n\n### Observability Targets\n\n- **Log Retention**: 7 days in Supabase\n- **Real-time Monitoring**: < 1 minute detection\n- **Debug Information**: Complete context in all error logs\n- **Issue Resolution**: < 15 minutes average time to fix\n\nThis strategy provides comprehensive, lightweight validation using native platform tools while maintaining rapid iteration and targeted issue resolution capabilities.\n"}}},
{"type":"measure","name":"lsp.did_open","count":62,"duration":0.116},
{"type":"mark","name":"lsp.did_open","count":63,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/DEBUG_COLLECTION_GUIDE.md","languageId":"markdown","version":1,"text":"# ProspectPro v4.3 Debug Collection Guide\n\n## Browser Debug Data Collection\n\n### Frontend Session Information\n\n```javascript\n// Run this in browser console at https://prospect-28j3db56m-appsmithery.vercel.app\nconst debugInfo = {\n  timestamp: new Date().toISOString(),\n  url: window.location.href,\n  userAgent: navigator.userAgent,\n  supabaseSession: await supabase.auth.getSession(),\n  localStorage: Object.keys(localStorage).filter((k) => k.startsWith(\"sb-\")),\n  sessionStorage: Object.keys(sessionStorage).filter((k) =>\n    k.startsWith(\"sb-\")\n  ),\n  networkTiming: performance.getEntriesByType(\"navigation\")[0],\n  errors: [], // Manually captured from console\n};\n\nconsole.log(\"🔍 Frontend Debug Info:\");\nconsole.log(JSON.stringify(debugInfo, null, 2));\n\n// Copy this output for troubleshooting\ncopy(JSON.stringify(debugInfo, null, 2));\n```\n\n### Session JWT Extraction\n\n```javascript\n// Get current session JWT for API testing\nconst {\n  data: { session },\n} = await supabase.auth.getSession();\nif (session) {\n  console.log(\"🔑 Session JWT:\", session.access_token);\n  console.log(\"📅 Expires:\", new Date(session.expires_at * 1000));\n  copy(session.access_token);\n} else {\n  console.log(\"❌ No active session\");\n}\n```\n\n### Network Request Monitoring\n\n```javascript\n// Monitor API calls in real-time\nconst originalFetch = window.fetch;\nwindow.fetch = function (...args) {\n  console.log(\"🌐 API Request:\", args[0], args[1]);\n  return originalFetch\n    .apply(this, arguments)\n    .then((response) => {\n      console.log(\"📥 API Response:\", response.status, response.url);\n      return response;\n    })\n    .catch((error) => {\n      console.log(\"❌ API Error:\", error);\n      throw error;\n    });\n};\n```\n\n## Edge Function Debug Patterns\n\n### Standard Logging Template\n\n```typescript\n// Add to all Edge Functions for comprehensive debugging\nconst debugContext = {\n  timestamp: new Date().toISOString(),\n  functionName: \"business-discovery-background\",\n  requestId: crypto.randomUUID(),\n  userContext: {\n    userId: user?.id,\n    email: user?.email,\n    sessionId: sessionUserId,\n  },\n  requestPayload: requestBody,\n  environment: {\n    region: Deno.env.get(\"SUPABASE_REGION\"),\n    version: \"4.3.0\",\n  },\n};\n\nconsole.log(\n  `[DEBUG] ${debugContext.functionName}:`,\n  JSON.stringify(debugContext)\n);\n\n// Add stage-specific logging\nconsole.log(`[AUTH] ${debugContext.functionName}: Authentication successful`);\nconsole.log(`[API] ${debugContext.functionName}: Calling external API`);\nconsole.log(`[DB] ${debugContext.functionName}: Database operation complete`);\nconsole.log(\n  `[RESULT] ${debugContext.functionName}: Function execution complete`\n);\n```\n\n### Error Context Collection\n\n```typescript\n// Enhanced error logging with full context\ntry {\n  // Function logic here\n} catch (error) {\n  const errorContext = {\n    timestamp: new Date().toISOString(),\n    functionName: \"business-discovery-background\",\n    errorMessage: error.message,\n    errorStack: error.stack,\n    userContext: debugContext.userContext,\n    requestData: debugContext.requestPayload,\n    apiResponses: {}, // Capture API responses leading to error\n  };\n\n  console.error(\n    `[ERROR] ${debugContext.functionName}:`,\n    JSON.stringify(errorContext)\n  );\n\n  return new Response(\n    JSON.stringify({\n      error: \"Internal server error\",\n      requestId: debugContext.requestId,\n      timestamp: errorContext.timestamp,\n    }),\n    {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" },\n    }\n  );\n}\n```\n\n## Platform-Specific Debug Commands\n\n### Supabase Dashboard Debugging\n\n```sql\n-- Check recent campaigns for user\nSELECT\n  id, business_type, location, status, results_count,\n  total_cost, created_at, user_id\nFROM campaigns\nWHERE created_at > NOW() - INTERVAL '1 hour'\nORDER BY created_at DESC\nLIMIT 10;\n\n-- Analyze lead quality for campaign\nSELECT\n  business_name, phone, website, email, confidence_score,\n  validation_cost, created_at\nFROM leads\nWHERE campaign_id = 'YOUR_CAMPAIGN_ID'\nORDER BY confidence_score DESC\nLIMIT 20;\n\n-- Check user session activity\nSELECT\n  COUNT(*) as campaign_count,\n  SUM(results_count) as total_leads,\n  SUM(total_cost) as total_spent,\n  MAX(created_at) as last_activity\nFROM campaigns\nWHERE user_id = auth.uid();\n\n-- Validate RLS policies\nEXPLAIN (ANALYZE, BUFFERS)\nSELECT * FROM campaigns WHERE user_id = auth.uid() LIMIT 1;\n```\n\n### Vercel Deployment Debugging\n\n```bash\n# Check deployment status and logs\nvercel --version\nvercel whoami\nvercel ls prospect-pro\nvercel logs https://prospect-28j3db56m-appsmithery.vercel.app\n\n# Test deployment health\ncurl -I https://prospect-28j3db56m-appsmithery.vercel.app\ncurl -s https://prospect-28j3db56m-appsmithery.vercel.app | grep -E \"(title|version|error)\"\n\n# Check cache headers\ncurl -I https://prospect-28j3db56m-appsmithery.vercel.app | grep -i cache\n```\n\n## Issue-Specific Debug Workflows\n\n### Authentication Issues\n\n1. **Frontend Session Check**\n\n   ```javascript\n   const {\n     data: { session },\n     error,\n   } = await supabase.auth.getSession();\n   console.log(\"Session:\", session, \"Error:\", error);\n   ```\n\n2. **Edge Function Auth Test**\n\n   ```bash\n   curl -X POST \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth\" \\\n     -H \"Authorization: Bearer YOUR_SESSION_JWT\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"diagnostics\": true}'\n   ```\n\n3. **Database RLS Verification**\n   ```sql\n   SELECT * FROM campaigns WHERE business_type = 'test' LIMIT 1;\n   ```\n\n### Discovery Issues\n\n1. **API Integration Test**\n\n   ```bash\n   # Test Google Places API quota\n   curl \"https://maps.googleapis.com/maps/api/place/textsearch/json?query=test&key=YOUR_API_KEY\"\n\n   # Check Hunter.io quota\n   curl \"https://api.hunter.io/v2/account?api_key=YOUR_API_KEY\"\n   ```\n\n2. **Edge Function Discovery Test**\n\n   ```bash\n   curl -X POST \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background\" \\\n     -H \"Authorization: Bearer YOUR_SESSION_JWT\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"businessType\": \"coffee shop\", \"location\": \"Seattle, WA\", \"maxResults\": 2, \"tierKey\": \"PROFESSIONAL\", \"sessionUserId\": \"debug_test\"}'\n   ```\n\n3. **Database Lead Verification**\n   ```sql\n   SELECT COUNT(*) FROM leads WHERE campaign_id = 'YOUR_CAMPAIGN_ID';\n   ```\n\n### Performance Issues\n\n1. **Edge Function Timing**\n\n   ```bash\n   time curl -X POST \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth\" \\\n     -H \"Authorization: Bearer YOUR_SESSION_JWT\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"diagnostics\": true}'\n   ```\n\n2. **Database Query Performance**\n\n   ```sql\n   EXPLAIN (ANALYZE, BUFFERS)\n   SELECT * FROM leads\n   WHERE campaign_id = 'YOUR_CAMPAIGN_ID'\n   ORDER BY confidence_score DESC;\n   ```\n\n3. **Frontend Load Time**\n   ```javascript\n   // Measure page load performance\n   console.log(\n     \"Navigation Timing:\",\n     performance.getEntriesByType(\"navigation\")[0]\n   );\n   console.log(\n     \"Resource Timing:\",\n     performance.getEntriesByType(\"resource\").slice(0, 10)\n   );\n   ```\n\n## Debug Data Export\n\n### Complete System State Export\n\n```bash\n#!/bin/bash\n# Generate comprehensive debug report\n\nDEBUG_DIR=\"/tmp/prospectpro_debug_$(date +%s)\"\nmkdir -p \"$DEBUG_DIR\"\n\n# System information\necho \"ProspectPro v4.3 Debug Report\" > \"$DEBUG_DIR/system_info.txt\"\necho \"Generated: $(date)\" >> \"$DEBUG_DIR/system_info.txt\"\necho \"Frontend URL: https://prospect-28j3db56m-appsmithery.vercel.app\" >> \"$DEBUG_DIR/system_info.txt\"\necho \"Edge Functions: https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/\" >> \"$DEBUG_DIR/system_info.txt\"\n\n# Test results\n./scripts/production-health-check.sh > \"$DEBUG_DIR/health_check.txt\" 2>&1\n\n# API connectivity\ncurl -I https://prospect-28j3db56m-appsmithery.vercel.app > \"$DEBUG_DIR/frontend_status.txt\" 2>&1\ncurl -I https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth > \"$DEBUG_DIR/edge_functions_status.txt\" 2>&1\n\n# Package debug report\ntar -czf \"prospectpro_debug_$(date +%s).tar.gz\" -C \"$DEBUG_DIR\" .\necho \"Debug report created: prospectpro_debug_$(date +%s).tar.gz\"\n```\n\n## Real-Time Monitoring Setup\n\n### Browser Console Monitoring\n\n```javascript\n// Set up continuous monitoring in browser console\nsetInterval(async () => {\n  const {\n    data: { session },\n  } = await supabase.auth.getSession();\n  console.log(\n    `[MONITOR] ${new Date().toISOString()}: Session valid:`,\n    !!session\n  );\n}, 30000); // Check every 30 seconds\n```\n\n### Edge Function Health Monitoring\n\n```bash\n#!/bin/bash\n# Monitor edge function health every minute\n\nwhile true; do\n  TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')\n  STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth\")\n\n  if [ \"$STATUS\" = \"401\" ]; then\n    echo \"[$TIMESTAMP] ✅ Edge Functions: Healthy (auth required)\"\n  else\n    echo \"[$TIMESTAMP] ❌ Edge Functions: Unhealthy ($STATUS)\"\n  fi\n\n  sleep 60\ndone\n```\n\nThis debug guide provides comprehensive tools for rapid issue identification and resolution using native platform capabilities.\n"}}},
{"type":"measure","name":"lsp.did_open","count":63,"duration":0.109},
{"type":"mark","name":"lsp.did_open","count":64,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/VALIDATION_TOOLKIT.md","languageId":"markdown","version":1,"text":"# ProspectPro v4.3 Validation Toolkit\n\n## Quick Start Commands\n\n### 1. Initial Health Check\n\n```bash\n./scripts/production-health-check.sh\n```\n\n**Purpose**: Verify all system components are accessible and responding\n**Duration**: ~30 seconds\n**Output**: Color-coded status report with next steps\n\n### 2. Authentication Pattern Testing\n\n```bash\n# First, get your session JWT from the browser:\n# 1. Open https://prospect-28j3db56m-appsmithery.vercel.app\n# 2. Sign in or create account\n# 3. Open DevTools → Application → Local Storage\n# 4. Copy value from 'sb-access-token' key\n\n./scripts/test-auth-patterns.sh YOUR_SESSION_JWT\n```\n\n**Purpose**: Validate session enforcement and security measures\n**Duration**: ~15 seconds\n**Output**: Security verification and auth pattern test results\n\n### 3. Full Campaign Validation\n\n```bash\n./scripts/campaign-validation.sh YOUR_SESSION_JWT\n```\n\n**Purpose**: End-to-end testing of discovery, processing, and export\n**Duration**: ~60 seconds\n**Output**: Complete campaign lifecycle validation with lead generation\n\n## Script Reference\n\n### production-health-check.sh\n\n- ✅ Frontend accessibility check\n- ✅ Edge Functions availability verification\n- ✅ Function inventory validation\n- ✅ External API reachability testing\n- ✅ Database connectivity probe\n\n### test-auth-patterns.sh\n\n- 🔐 Shared auth helper testing\n- 🔐 Official Supabase auth reference\n- 🔐 Production function auth validation\n- 🛡️ Security vulnerability scanning\n- 📊 Auth system status summary\n\n### campaign-validation.sh\n\n- 🚀 Authentication verification\n- 🎯 Campaign discovery initiation\n- ⏳ Background processing monitoring\n- 📊 Data quality validation\n- 📈 Performance metrics collection\n- 🏁 Complete workflow verification\n\n## Platform Debugging URLs\n\n### Supabase Dashboard\n\n- **Project**: https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc\n- **Edge Functions**: https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/functions\n- **Database**: https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/editor\n- **Logs**: https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/logs\n\n### Vercel Dashboard\n\n- **Project**: https://vercel.com/appsmithery/prospect-pro\n- **Deployments**: https://vercel.com/appsmithery/prospect-pro/deployments\n- **Analytics**: https://vercel.com/appsmithery/prospect-pro/analytics\n\n### Production URLs\n\n- **Frontend**: https://prospect-28j3db56m-appsmithery.vercel.app\n- **Edge Functions**: https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/\n\n## Troubleshooting Decision Tree\n\n### 🔴 Health Check Fails\n\n1. **Frontend 404/500**: Check Vercel deployment status\n2. **Edge Functions down**: Check Supabase service status\n3. **API unreachable**: Verify network connectivity\n\n### 🟡 Auth Patterns Fail\n\n1. **Invalid JWT**: Re-authenticate and get fresh token\n2. **Security vulnerability**: Check edge function deployment\n3. **Auth helper fails**: Review Supabase auth configuration\n\n### 🔴 Campaign Validation Fails\n\n1. **Discovery fails**: Check Google Places API quota/billing\n2. **No leads generated**: Verify API keys and search parameters\n3. **Export fails**: Check campaign completion and data presence\n\n## Emergency Debugging Commands\n\n### Get Fresh Session Token\n\n```bash\n# If authentication fails, get a new token\necho \"1. Open https://prospect-28j3db56m-appsmithery.vercel.app in incognito\"\necho \"2. Create new account or sign in\"\necho \"3. Open DevTools → Application → Local Storage\"\necho \"4. Copy 'sb-access-token' value\"\necho \"5. Re-run validation with new token\"\n```\n\n### Direct Edge Function Test\n\n```bash\n# Test specific edge function without scripts\ncurl -X POST \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth\" \\\n  -H \"Authorization: Bearer YOUR_SESSION_JWT\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"diagnostics\": true}'\n```\n\n### Database Direct Query\n\n```sql\n-- Run in Supabase SQL Editor to check data\nSELECT COUNT(*) as total_campaigns FROM campaigns;\nSELECT COUNT(*) as total_leads FROM leads;\nSELECT * FROM campaigns ORDER BY created_at DESC LIMIT 5;\n```\n\n## Performance Benchmarks\n\n### Expected Response Times\n\n- **Authentication**: < 500ms\n- **Health Check**: < 30 seconds total\n- **Auth Pattern Test**: < 15 seconds total\n- **Campaign Discovery**: < 2 seconds initiation\n- **Background Processing**: < 60 seconds for 3 leads\n- **Export Generation**: < 10 seconds for 100 leads\n\n### Quality Targets\n\n- **Phone Coverage**: > 95% (Google Places API)\n- **Website Coverage**: > 90% (Google Places API)\n- **Email Accuracy**: > 95% (Hunter.io + NeverBounce)\n- **Zero Fake Data**: 100% verified contacts only\n\n## Common Issues & Solutions\n\n### Issue: \"Invalid JWT\"\n\n**Symptoms**: 401 errors, authentication failures\n**Solution**:\n\n1. Get fresh session token from browser\n2. Verify token hasn't expired\n3. Check for typos in JWT string\n\n### Issue: \"Discovery Returns No Results\"\n\n**Symptoms**: Campaign completes with 0 leads\n**Solution**:\n\n1. Check Google Places API quota\n2. Try different location (e.g., \"New York, NY\")\n3. Verify business type in taxonomy\n\n### Issue: \"Frontend Won't Load\"\n\n**Symptoms**: Blank page, 404 errors\n**Solution**:\n\n1. Check Vercel deployment status\n2. Clear browser cache\n3. Try incognito window\n4. Verify DNS resolution\n\n### Issue: \"Slow Performance\"\n\n**Symptoms**: Long response times, timeouts\n**Solution**:\n\n1. Check external API response times\n2. Monitor Edge Function logs for bottlenecks\n3. Verify database query performance\n4. Check network connectivity\n\n## Validation Workflow\n\n1. **Pre-Validation Setup**\n\n   - Ensure clean browser session\n   - Verify all platform dashboards accessible\n   - Confirm MCP server running (if needed)\n\n2. **Basic System Validation**\n\n   ```bash\n   ./scripts/production-health-check.sh\n   ```\n\n3. **Authentication Security Validation**\n\n   ```bash\n   ./scripts/test-auth-patterns.sh YOUR_SESSION_JWT\n   ```\n\n4. **End-to-End Campaign Validation**\n\n   ```bash\n   ./scripts/campaign-validation.sh YOUR_SESSION_JWT\n   ```\n\n5. **Post-Validation Analysis**\n   - Review generated campaign data in Supabase\n   - Verify lead quality and accuracy\n   - Check cost efficiency and API usage\n\nThis toolkit provides comprehensive validation capabilities for maintaining ProspectPro v4.3 in production with rapid issue identification and resolution.\n"}}},
{"type":"measure","name":"lsp.did_open","count":64,"duration":0.1},
{"type":"mark","name":"lsp.did_open","count":65,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/cleanup-queries.sql","languageId":"sql","version":1,"text":"-- ProspectPro v4.3 Database Cleanup Queries\n-- Run these in Supabase SQL Editor to identify cleanup candidates\n\n-- 1. Find test/development campaigns (safe to remove)\n-- Look for campaigns with test patterns in IDs or session user IDs\nSELECT \n  id, business_type, location, status, results_count, \n  total_cost, created_at, user_id, session_user_id\nFROM campaigns \nWHERE \n  id LIKE '%test%' \n  OR id LIKE '%debug%'\n  OR id LIKE '%validation%'\n  OR session_user_id LIKE '%test%'\n  OR session_user_id LIKE '%debug%'\nORDER BY created_at DESC;\n\n-- 2. Find old completed campaigns (older than 30 days)\n-- These might be candidates for archival\nSELECT \n  id, business_type, location, status, results_count, \n  total_cost, created_at, user_id\nFROM campaigns \nWHERE \n  created_at < NOW() - INTERVAL '30 days'\n  AND status = 'completed'\nORDER BY created_at ASC\nLIMIT 20;\n\n-- 3. Find orphaned leads (campaigns that no longer exist)\n-- These should be cleaned up\nSELECT \n  l.id, l.campaign_id, l.business_name, l.created_at\nFROM leads l\nLEFT JOIN campaigns c ON l.campaign_id = c.id\nWHERE c.id IS NULL\nLIMIT 10;\n\n-- 4. Find large campaigns that might need review\n-- Campaigns with unusually high lead counts or costs\nSELECT \n  id, business_type, location, results_count, total_cost,\n  (total_cost / NULLIF(results_count, 0)) as cost_per_lead,\n  created_at, user_id\nFROM campaigns \nWHERE \n  results_count > 100 \n  OR total_cost > 100\nORDER BY total_cost DESC\nLIMIT 10;\n\n-- 5. Find old dashboard exports (older than 7 days)\n-- Export records can usually be cleaned up after a week\nSELECT \n  id, campaign_id, export_type, file_format, row_count,\n  export_status, created_at, user_id\nFROM dashboard_exports \nWHERE created_at < NOW() - INTERVAL '7 days'\nORDER BY created_at ASC\nLIMIT 20;\n\n-- 6. Database storage summary\n-- Check overall table sizes and row counts\nSELECT \n  'campaigns' as table_name,\n  COUNT(*) as row_count,\n  MIN(created_at) as oldest_record,\n  MAX(created_at) as newest_record\nFROM campaigns\nUNION ALL\nSELECT \n  'leads' as table_name,\n  COUNT(*) as row_count,\n  MIN(created_at) as oldest_record,\n  MAX(created_at) as newest_record\nFROM leads\nUNION ALL\nSELECT \n  'dashboard_exports' as table_name,\n  COUNT(*) as row_count,\n  MIN(created_at) as oldest_record,\n  MAX(created_at) as newest_record\nFROM dashboard_exports;\n\n-- 7. Identify potentially problematic campaigns\n-- Campaigns stuck in processing or with errors\nSELECT \n  id, business_type, location, status, results_count,\n  processing_time_ms, created_at, updated_at\nFROM campaigns \nWHERE \n  status = 'processing' \n  OR (status = 'completed' AND results_count = 0)\n  OR processing_time_ms > 300000 -- More than 5 minutes\nORDER BY created_at DESC\nLIMIT 10;\n\n-- CLEANUP COMMANDS (Run after reviewing results above)\n-- =================================================\n\n-- Clean up test campaigns and their leads\n-- DELETE FROM leads WHERE campaign_id IN (\n--   SELECT id FROM campaigns WHERE \n--   id LIKE '%test%' OR id LIKE '%debug%' OR id LIKE '%validation%'\n-- );\n-- DELETE FROM campaigns WHERE \n--   id LIKE '%test%' OR id LIKE '%debug%' OR id LIKE '%validation%';\n\n-- Clean up orphaned leads\n-- DELETE FROM leads WHERE id IN (\n--   SELECT l.id FROM leads l\n--   LEFT JOIN campaigns c ON l.campaign_id = c.id\n--   WHERE c.id IS NULL\n-- );\n\n-- Clean up old dashboard exports\n-- DELETE FROM dashboard_exports \n-- WHERE created_at < NOW() - INTERVAL '30 days';\n\n-- Reset stuck campaigns to failed status\n-- UPDATE campaigns \n-- SET status = 'failed', updated_at = NOW()\n-- WHERE status = 'processing' \n-- AND created_at < NOW() - INTERVAL '1 hour';"}}},
{"type":"measure","name":"lsp.did_open","count":65,"duration":0.061},
{"type":"mark","name":"lsp.did_open","count":66,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts","languageId":"typescript","version":1,"text":"import { create } from \"zustand\";\nimport type { BusinessLead, CampaignResult, CampaignStore } from \"../types\";\nimport { sanitizeLeadCollection } from \"./utils/leadSanitizers\";\n\ninterface CampaignActions {\n  addCampaign: (campaign: CampaignResult) => void;\n  updateCampaign: (\n    campaignId: string,\n    updates: Partial<CampaignResult>\n  ) => void;\n  setCurrentCampaign: (campaign: CampaignResult | null) => void;\n  setCurrentCampaignId: (campaignId: string | null) => void;\n  addLeads: (leads: BusinessLead[]) => void;\n  setCampaignLeads: (campaignId: string, leads: BusinessLead[]) => void;\n  updateLead: (leadId: string, updates: Partial<BusinessLead>) => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  clearLeads: () => void;\n  reset: () => void;\n  ensureUniqueCampaignHistory: () => void;\n}\n\nconst initialState: CampaignStore = {\n  campaigns: [],\n  currentCampaign: null,\n  currentCampaignId: null,\n  leads: [],\n  isLoading: false,\n  error: null,\n};\n\nconst getCampaignKey = (campaign: CampaignResult): string | null => {\n  if (campaign.campaign_id) {\n    return campaign.campaign_id;\n  }\n\n  const fallbackId = (campaign as { id?: string | number }).id;\n  return fallbackId != null ? String(fallbackId) : null;\n};\n\n// Keeps newest campaign entry while removing duplicates by campaign identifier.\nconst dedupeCampaigns = (campaigns: CampaignResult[]): CampaignResult[] => {\n  const seen = new Set<string>();\n  const uniqueCampaigns: CampaignResult[] = [];\n\n  for (const campaign of campaigns) {\n    const key = getCampaignKey(campaign);\n\n    if (key === null) {\n      uniqueCampaigns.push(campaign);\n      continue;\n    }\n\n    if (seen.has(key)) {\n      continue;\n    }\n\n    seen.add(key);\n    uniqueCampaigns.push(campaign);\n  }\n\n  return uniqueCampaigns;\n};\n\nexport const useCampaignStore = create<CampaignStore & CampaignActions>()(\n  (set) => ({\n    ...initialState,\n\n    addCampaign: (campaign) =>\n      set((state) => ({\n        campaigns: dedupeCampaigns([campaign, ...state.campaigns]),\n      })),\n\n    updateCampaign: (campaignId, updates) =>\n      set((state) => ({\n        campaigns: dedupeCampaigns(\n          state.campaigns.map((c) =>\n            c.campaign_id === campaignId ? { ...c, ...updates } : c\n          )\n        ),\n        currentCampaign:\n          state.currentCampaign?.campaign_id === campaignId\n            ? { ...state.currentCampaign, ...updates }\n            : state.currentCampaign,\n      })),\n\n    setCurrentCampaign: (campaign) =>\n      set({\n        currentCampaign: campaign,\n        currentCampaignId: campaign?.campaign_id ?? null,\n      }),\n\n    setCurrentCampaignId: (campaignId) =>\n      set({ currentCampaignId: campaignId }),\n\n    addLeads: (leads) =>\n      set((state) => {\n        const merged = new Map<string, BusinessLead>();\n        const existingLeads = state.leads || [];\n        const incomingLeads = sanitizeLeadCollection(leads, null);\n\n        for (const lead of existingLeads) {\n          if (lead?.id != null) {\n            merged.set(String(lead.id), lead);\n          }\n        }\n        for (const lead of incomingLeads) {\n          merged.set(String(lead.id), lead);\n        }\n        return { leads: Array.from(merged.values()) };\n      }),\n\n    setCampaignLeads: (campaignId, leads) =>\n      set((state) => {\n        const merged = new Map<string, BusinessLead>();\n\n        // Safe iteration - check if leads array exists\n        const existingLeads = state.leads || [];\n        const incomingLeads = sanitizeLeadCollection(leads, campaignId);\n\n        for (const lead of existingLeads) {\n          if (lead?.campaign_id === campaignId) {\n            continue;\n          }\n          if (lead?.id != null) {\n            merged.set(String(lead.id), lead);\n          }\n        }\n\n        for (const lead of incomingLeads) {\n          merged.set(String(lead.id), lead);\n        }\n\n        return { leads: Array.from(merged.values()) };\n      }),\n\n    updateLead: (leadId, updates) =>\n      set((state) => ({\n        leads: state.leads.map((l) =>\n          l.id === leadId ? { ...l, ...updates } : l\n        ),\n      })),\n\n    setLoading: (loading) => set({ isLoading: loading }),\n\n    setError: (error) => set({ error }),\n\n    clearLeads: () => set({ leads: [] }),\n\n    reset: () => set(initialState),\n\n    ensureUniqueCampaignHistory: () =>\n      set((state) => ({\n        campaigns: dedupeCampaigns(state.campaigns),\n      })),\n  })\n);\n"}}},
{"type":"measure","name":"lsp.did_open","count":66,"duration":6.865},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":24,"duration":0.253},
{"type":"mark","name":"lsp.did_open","count":67,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/enrichment-cache-schema.sql","languageId":"sql","version":1,"text":"-- ProspectPro v4.3 - Enrichment Cache Schema\n-- 90-day intelligent caching for cost optimization\n\n-- Enrichment Cache Table\nCREATE TABLE IF NOT EXISTS enrichment_cache (\n  id BIGSERIAL PRIMARY KEY,\n  cache_key TEXT NOT NULL UNIQUE, -- SHA-256 hash of request parameters\n  request_type TEXT NOT NULL, -- 'business_license', 'company_enrichment', 'email_discovery', etc.\n  request_params JSONB NOT NULL, -- Original request parameters\n  response_data JSONB NOT NULL, -- Cached response data\n  cost DECIMAL(10,4) DEFAULT 0, -- Cost of original request\n  confidence_score INTEGER DEFAULT 0, -- Confidence score of cached data\n  hit_count INTEGER DEFAULT 1, -- Number of cache hits\n  expires_at TIMESTAMPTZ NOT NULL, -- 90-day expiration\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW(),\n  last_accessed_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Indexes for performance\nCREATE INDEX IF NOT EXISTS idx_enrichment_cache_key ON enrichment_cache(cache_key);\nCREATE INDEX IF NOT EXISTS idx_enrichment_cache_type ON enrichment_cache(request_type);\nCREATE INDEX IF NOT EXISTS idx_enrichment_cache_expires ON enrichment_cache(expires_at);\nCREATE INDEX IF NOT EXISTS idx_enrichment_cache_created ON enrichment_cache(created_at);\n\n-- Composite index for cache lookups\nCREATE INDEX IF NOT EXISTS idx_enrichment_cache_lookup \nON enrichment_cache(request_type, cache_key);\n\n-- Cache Statistics Table\nCREATE TABLE IF NOT EXISTS enrichment_cache_stats (\n  id BIGSERIAL PRIMARY KEY,\n  date DATE NOT NULL DEFAULT CURRENT_DATE,\n  request_type TEXT NOT NULL,\n  total_requests INTEGER DEFAULT 0,\n  cache_hits INTEGER DEFAULT 0,\n  cache_misses INTEGER DEFAULT 0,\n  cost_saved DECIMAL(10,4) DEFAULT 0,\n  total_cost DECIMAL(10,4) DEFAULT 0,\n  hit_ratio DECIMAL(5,2) DEFAULT 0, -- Percentage\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW(),\n  UNIQUE(date, request_type)\n);\n\n-- Index for statistics queries\nCREATE INDEX IF NOT EXISTS idx_cache_stats_date ON enrichment_cache_stats(date);\nCREATE INDEX IF NOT EXISTS idx_cache_stats_type ON enrichment_cache_stats(request_type);\n\n-- Cache Management Functions\n\n-- Function to generate cache key\nCREATE OR REPLACE FUNCTION generate_cache_key(\n  p_request_type TEXT,\n  p_params JSONB\n) RETURNS TEXT AS $$\nBEGIN\n  RETURN encode(\n    digest(\n      p_request_type || '::' || p_params::text,\n      'sha256'\n    ),\n    'hex'\n  );\nEND;\n$$ LANGUAGE plpgsql\nIMMUTABLE\nSECURITY INVOKER\nSET search_path = public, pg_temp;\n\n-- Function to get cached response\nCREATE OR REPLACE FUNCTION get_cached_response(\n  p_request_type TEXT,\n  p_params JSONB\n) RETURNS JSONB AS $$\nDECLARE\n  v_cache_key TEXT;\n  v_response JSONB;\nBEGIN\n  v_cache_key := generate_cache_key(p_request_type, p_params);\n  \n  -- Get cached response if not expired\n  SELECT response_data INTO v_response\n  FROM enrichment_cache\n  WHERE cache_key = v_cache_key\n    AND request_type = p_request_type\n    AND expires_at > NOW();\n  \n  -- Update hit count and last accessed time if found\n  IF v_response IS NOT NULL THEN\n    UPDATE enrichment_cache\n    SET hit_count = hit_count + 1,\n        last_accessed_at = NOW(),\n        updated_at = NOW()\n    WHERE cache_key = v_cache_key;\n    \n    -- Update cache statistics\n    INSERT INTO enrichment_cache_stats (date, request_type, cache_hits)\n    VALUES (CURRENT_DATE, p_request_type, 1)\n    ON CONFLICT (date, request_type)\n    DO UPDATE SET \n      cache_hits = enrichment_cache_stats.cache_hits + 1,\n      total_requests = enrichment_cache_stats.total_requests + 1,\n      hit_ratio = ROUND(\n        (enrichment_cache_stats.cache_hits + 1.0) / \n        (enrichment_cache_stats.total_requests + 1.0) * 100, \n        2\n      ),\n      updated_at = NOW();\n  ELSE\n    -- Update cache miss statistics\n    INSERT INTO enrichment_cache_stats (date, request_type, cache_misses)\n    VALUES (CURRENT_DATE, p_request_type, 1)\n    ON CONFLICT (date, request_type)\n    DO UPDATE SET \n      cache_misses = enrichment_cache_stats.cache_misses + 1,\n      total_requests = enrichment_cache_stats.total_requests + 1,\n      hit_ratio = ROUND(\n        enrichment_cache_stats.cache_hits / \n        (enrichment_cache_stats.total_requests + 1.0) * 100, \n        2\n      ),\n      updated_at = NOW();\n  END IF;\n  \n  RETURN v_response;\nEND;\n$$ LANGUAGE plpgsql\nSECURITY INVOKER\nSET search_path = public, pg_temp;\n\n-- Function to store cached response\nCREATE OR REPLACE FUNCTION store_cached_response(\n  p_request_type TEXT,\n  p_params JSONB,\n  p_response JSONB,\n  p_cost DECIMAL DEFAULT 0,\n  p_confidence_score INTEGER DEFAULT 0\n) RETURNS TEXT AS $$\nDECLARE\n  v_cache_key TEXT;\nBEGIN\n  v_cache_key := generate_cache_key(p_request_type, p_params);\n  \n  -- Store with 90-day expiration\n  INSERT INTO enrichment_cache (\n    cache_key,\n    request_type,\n    request_params,\n    response_data,\n    cost,\n    confidence_score,\n    expires_at\n  ) VALUES (\n    v_cache_key,\n    p_request_type,\n    p_params,\n    p_response,\n    p_cost,\n    p_confidence_score,\n    NOW() + INTERVAL '90 days'\n  )\n  ON CONFLICT (cache_key) \n  DO UPDATE SET\n    response_data = EXCLUDED.response_data,\n    cost = EXCLUDED.cost,\n    confidence_score = EXCLUDED.confidence_score,\n    hit_count = enrichment_cache.hit_count + 1,\n    expires_at = NOW() + INTERVAL '90 days',\n    updated_at = NOW();\n  \n  -- Update cost statistics\n  INSERT INTO enrichment_cache_stats (date, request_type, total_cost)\n  VALUES (CURRENT_DATE, p_request_type, p_cost)\n  ON CONFLICT (date, request_type)\n  DO UPDATE SET \n    total_cost = enrichment_cache_stats.total_cost + p_cost,\n    updated_at = NOW();\n  \n  RETURN v_cache_key;\nEND;\n$$ LANGUAGE plpgsql\nSECURITY INVOKER\nSET search_path = public, pg_temp;\n\n-- Function to clean expired cache entries\nCREATE OR REPLACE FUNCTION cleanup_expired_cache() RETURNS INTEGER AS $$\nDECLARE\n  v_deleted_count INTEGER;\nBEGIN\n  DELETE FROM enrichment_cache WHERE expires_at <= NOW();\n  GET DIAGNOSTICS v_deleted_count = ROW_COUNT;\n  \n  RETURN v_deleted_count;\nEND;\n$$ LANGUAGE plpgsql\nSECURITY INVOKER\nSET search_path = public, pg_temp;\n\n-- Create a scheduled job to clean expired cache (if pg_cron is available)\n-- SELECT cron.schedule('cleanup-enrichment-cache', '0 2 * * *', 'SELECT cleanup_expired_cache()');\n\n-- Row Level Security (RLS)\nALTER TABLE enrichment_cache ENABLE ROW LEVEL SECURITY;\nALTER TABLE enrichment_cache_stats ENABLE ROW LEVEL SECURITY;\n\n-- Service role can access all cache data\nDROP POLICY IF EXISTS \"Service role can manage enrichment cache\" ON enrichment_cache;\nCREATE POLICY \"Service role can manage enrichment cache\" ON enrichment_cache\nFOR ALL TO service_role USING (true);\n\nDROP POLICY IF EXISTS \"Service role can manage cache stats\" ON enrichment_cache_stats;\nCREATE POLICY \"Service role can manage cache stats\" ON enrichment_cache_stats\nFOR ALL TO service_role USING (true);\n\n-- Cache Analytics View\nCREATE OR REPLACE VIEW enrichment_cache_analytics\nWITH (security_invoker = true) AS\nSELECT \n  request_type,\n  COUNT(*) as total_entries,\n  SUM(hit_count) as total_hits,\n  AVG(confidence_score) as avg_confidence,\n  SUM(cost) as total_cost_saved,\n  ROUND(AVG(hit_count), 2) as avg_hit_count,\n  MIN(created_at) as oldest_entry,\n  MAX(last_accessed_at) as last_activity,\n  COUNT(*) FILTER (WHERE expires_at > NOW()) as active_entries,\n  COUNT(*) FILTER (WHERE expires_at <= NOW()) as expired_entries\nFROM enrichment_cache\nGROUP BY request_type\nORDER BY total_hits DESC;\n\n-- Cache Performance Summary\nCREATE OR REPLACE VIEW cache_performance_summary\nWITH (security_invoker = true) AS\nSELECT \n  date,\n  SUM(total_requests) as daily_requests,\n  SUM(cache_hits) as daily_hits,\n  SUM(cache_misses) as daily_misses,\n  ROUND(\n    CASE \n      WHEN SUM(total_requests) > 0 \n      THEN SUM(cache_hits)::DECIMAL / SUM(total_requests) * 100 \n      ELSE 0 \n    END, \n    2\n  ) as daily_hit_ratio,\n  SUM(cost_saved) as daily_cost_saved,\n  SUM(total_cost) as daily_total_cost\nFROM enrichment_cache_stats\nGROUP BY date\nORDER BY date DESC;\n\nCOMMENT ON TABLE enrichment_cache IS 'Intelligent 90-day caching for enrichment API responses';\nCOMMENT ON TABLE enrichment_cache_stats IS 'Daily statistics for cache performance and cost savings';\nCOMMENT ON FUNCTION generate_cache_key IS 'Generate SHA-256 hash for cache key from request parameters';\nCOMMENT ON FUNCTION get_cached_response IS 'Retrieve cached response if available and not expired';\nCOMMENT ON FUNCTION store_cached_response IS 'Store API response in cache with 90-day expiration';\nCOMMENT ON FUNCTION cleanup_expired_cache IS 'Remove expired cache entries';"}}},
{"type":"measure","name":"lsp.did_open","count":67,"duration":0.107},
{"type":"mark","name":"lsp.did_open","count":68,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport {\n  createUsageLogger,\n  UsageLogContext,\n  UsageLogger,\n  UsageLogParams,\n} from \"../_shared/api-usage.ts\";\n\n/**\n * ProspectPro v4.3 - Advanced Enrichment Orchestrator Edge Function\n * Coordinates all enrichment services with intelligent routing and cost optimization\n *\n * Progressive Enrichment Waterfall:\n * 1. Free Validation (Google Places, basic checks) - $0.00\n * 2. Hunter.io Email Discovery (domain search, email finder) - $0.034\n * 3. NeverBounce Email Verification (validate discovered emails) - $0.008\n * 4. Apollo Enrichment (optional, premium contacts) - $1.00\n *\n * Cost Optimization: 81% cheaper than Apollo ($0.19 vs $1.00 average)\n * Industry Routing: Financial services → FINRA (99.6% savings)\n *\n * Features:\n * - Progressive enrichment waterfall with cost controls\n * - Industry-specific routing (healthcare, financial, legal)\n * - Circuit breaker pattern for fault tolerance\n * - 90-day intelligent caching for cost efficiency\n * - Budget constraints with early termination\n * - Confidence scoring and quality thresholds\n */\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n};\n\ninterface EnrichmentRequest {\n  businessName: string;\n  domain?: string;\n  address?: string;\n  phone?: string;\n  website?: string;\n  industry?: string;\n  state?: string;\n  campaignId?: string;\n  jobId?: string;\n  sessionUserId?: string;\n  userId?: string;\n  tierKey?: string;\n\n  // Progressive enrichment options\n  includeBusinessLicense?: boolean;\n  includeCompanyEnrichment?: boolean;\n  discoverEmails?: boolean;\n  verifyEmails?: boolean;\n  includePersonEnrichment?: boolean;\n  apolloEnrichment?: boolean;\n  complianceVerification?: boolean;\n\n  // Control parameters\n  maxCostPerBusiness?: number;\n  minConfidenceScore?: number;\n  tier?: \"starter\" | \"professional\" | \"enterprise\" | \"compliance\";\n  executiveContactsOnly?: boolean;\n}\n\ninterface EnrichmentResponse {\n  success: boolean;\n  businessName: string;\n  originalData: {\n    domain?: string;\n    address?: string;\n    phone?: string;\n    website?: string;\n  };\n  enrichedData: {\n    emails?: Array<{\n      email: string;\n      confidence: number;\n      verified: boolean;\n      type?: string;\n      firstName?: string;\n      lastName?: string;\n      position?: string;\n    }>;\n    businessLicense?: {\n      isValid: boolean;\n      licenseNumber?: string;\n      status?: string;\n      expirationDate?: string;\n      professionalType?: string;\n      source: string;\n    };\n    companyInfo?: {\n      name?: string;\n      industry?: string;\n      size?: string;\n      founded?: number;\n      revenue?: string;\n      website?: string;\n      description?: string;\n      source: string;\n    };\n    executiveContacts?: Array<{\n      name: string;\n      title: string;\n      email?: string;\n      phone?: string;\n      linkedin?: string;\n    }>;\n    personEnrichment?: Array<{\n      name: string;\n      title: string;\n      email?: string;\n      phone?: string;\n      linkedin?: string;\n      confidence: number;\n    }>;\n    complianceData?: {\n      finraCheck?: boolean;\n      sanctionsCheck?: boolean;\n      riskScore?: number;\n      findings?: Array<{\n        type: string;\n        description: string;\n        severity: string;\n      }>;\n    };\n  };\n  confidenceScore: number;\n  totalCost: number;\n  costBreakdown: {\n    businessLicenseCost: number;\n    companyEnrichmentCost: number;\n    hunterCost: number;\n    neverBounceCost: number;\n    personEnrichmentCost: number;\n    apolloCost: number;\n    complianceCost: number;\n  };\n  processingMetadata: {\n    servicesUsed: string[];\n    servicesSkipped: string[];\n    processingTime: number;\n    errors: Array<{\n      service: string;\n      error: string;\n    }>;\n  };\n}\n\nclass EnrichmentOrchestrator {\n  private supabaseUrl: string;\n  private supabaseKey: string;\n  private maxCostPerBusiness: number;\n  private usageLogger?: UsageLogger;\n  private usageContext: UsageLogContext;\n\n  constructor(\n    supabaseUrl: string,\n    supabaseKey: string,\n    maxCostPerBusiness = 2.0,\n    usageLogger?: UsageLogger,\n    usageContext: UsageLogContext = {}\n  ) {\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    this.maxCostPerBusiness = maxCostPerBusiness;\n    this.usageLogger = usageLogger;\n    this.usageContext = usageContext;\n  }\n\n  private async logUsage(entry: UsageLogParams) {\n    if (!this.usageLogger) return;\n    await this.usageLogger.log({ ...this.usageContext, ...entry });\n  }\n\n  private estimateHunterCost(action: string): number {\n    switch (action) {\n      case \"domain-search\":\n        return 0.012;\n      case \"email-finder\":\n        return 0.02;\n      case \"email-verifier\":\n        return 0.003;\n      default:\n        return 0.01;\n    }\n  }\n  /**\n   * Orchestrate all enrichment services for a single business\n   */\n  async enrichBusiness(\n    request: EnrichmentRequest\n  ): Promise<EnrichmentResponse> {\n    const startTime = Date.now();\n\n    const response: EnrichmentResponse = {\n      success: false,\n      businessName: request.businessName,\n      originalData: {\n        domain: request.domain,\n        address: request.address,\n        phone: request.phone,\n        website: request.website,\n      },\n      enrichedData: {},\n      confidenceScore: 0,\n      totalCost: 0,\n      costBreakdown: {\n        businessLicenseCost: 0,\n        companyEnrichmentCost: 0,\n        hunterCost: 0,\n        neverBounceCost: 0,\n        personEnrichmentCost: 0,\n        apolloCost: 0,\n        complianceCost: 0,\n      },\n      processingMetadata: {\n        servicesUsed: [],\n        servicesSkipped: [],\n        processingTime: 0,\n        errors: [],\n      },\n    };\n\n    let currentCost = 0;\n\n    try {\n      // Apply tier-based defaults\n      const tierDefaults = this.getTierDefaults(request.tier || \"professional\");\n      const enrichmentConfig = { ...tierDefaults, ...request };\n\n      // Progressive Enrichment Waterfall - Stage 3: Email Discovery ($0.034)\n      if (enrichmentConfig.discoverEmails && request.domain) {\n        const emailDiscoveryCost = 0.034;\n\n        if (currentCost + emailDiscoveryCost <= this.maxCostPerBusiness) {\n          try {\n            console.log(\n              `📧 Stage 3: Email Discovery for ${request.domain} via Hunter.io`\n            );\n\n            const hunterResult = await this.callHunterIO({\n              action: \"domain-search\",\n              domain: request.domain,\n              limit: 10,\n            });\n\n            if (hunterResult.success && hunterResult.data?.emails) {\n              response.enrichedData.emails = hunterResult.data.emails;\n              response.costBreakdown.hunterCost =\n                hunterResult.cost || emailDiscoveryCost;\n              currentCost += response.costBreakdown.hunterCost;\n              response.processingMetadata.servicesUsed.push(\"hunter_io\");\n\n              console.log(\n                `✅ Found ${hunterResult.data.emails.length} emails via Hunter.io`\n              );\n            }\n          } catch (error) {\n            console.error(\"Hunter.io error:\", error);\n            response.processingMetadata.errors.push({\n              service: \"hunter_io\",\n              error: error instanceof Error ? error.message : \"Unknown error\",\n            });\n          }\n        } else {\n          console.warn(`⚠️ Skipping email discovery - would exceed budget`);\n          response.processingMetadata.servicesSkipped.push(\n            \"hunter_io (budget)\"\n          );\n        }\n      }\n\n      // Progressive Enrichment Waterfall - Stage 4: Email Verification ($0.008 per email)\n      if (\n        enrichmentConfig.verifyEmails &&\n        response.enrichedData.emails &&\n        response.enrichedData.emails.length > 0\n      ) {\n        const emailVerificationCost =\n          response.enrichedData.emails.length * 0.008;\n\n        if (currentCost + emailVerificationCost <= this.maxCostPerBusiness) {\n          try {\n            console.log(\n              `✅ Stage 4: Verifying ${response.enrichedData.emails.length} emails via NeverBounce`\n            );\n\n            const emailsToVerify = response.enrichedData.emails.map(\n              (e) => e.email\n            );\n            const neverBounceResult = await this.callNeverBounce({\n              action: \"verify-batch\",\n              emails: emailsToVerify,\n            });\n\n            if (neverBounceResult.success && neverBounceResult.data?.results) {\n              response.enrichedData.emails = response.enrichedData.emails.map(\n                (email) => {\n                  const verification = neverBounceResult.data?.results.find(\n                    (r: { email: string }) => r.email === email.email\n                  );\n\n                  return {\n                    ...email,\n                    verified: verification?.result === \"valid\",\n                    verificationResult: verification?.result,\n                  };\n                }\n              );\n\n              response.costBreakdown.neverBounceCost =\n                neverBounceResult.cost || emailVerificationCost;\n              currentCost += response.costBreakdown.neverBounceCost;\n              response.processingMetadata.servicesUsed.push(\"neverbounce\");\n\n              const verifiedCount = response.enrichedData.emails.filter(\n                (e) => e.verified\n              ).length;\n              console.log(\n                `✅ Verified ${verifiedCount}/${response.enrichedData.emails.length} emails`\n              );\n            }\n          } catch (error) {\n            console.error(\"NeverBounce error:\", error);\n            response.processingMetadata.errors.push({\n              service: \"neverbounce\",\n              error: error instanceof Error ? error.message : \"Unknown error\",\n            });\n          }\n        } else {\n          console.warn(`⚠️ Skipping email verification - would exceed budget`);\n          response.processingMetadata.servicesSkipped.push(\n            \"neverbounce (budget)\"\n          );\n        }\n      }\n\n      // Progressive Enrichment Waterfall - Stage 3: Apollo Premium ($1.00)\n      if (enrichmentConfig.apolloEnrichment && request.domain) {\n        const apolloCost = 1.0;\n\n        if (currentCost + apolloCost <= this.maxCostPerBusiness) {\n          try {\n            console.log(`🚀 Stage 3: Premium Apollo Enrichment`);\n\n            // Placeholder for Apollo implementation\n            await new Promise((resolve) => setTimeout(resolve, 100));\n\n            response.enrichedData.executiveContacts = [\n              {\n                name: \"Executive Contact (Apollo)\",\n                title: \"Owner/CEO\",\n                email: `contact@${request.domain}`,\n              },\n            ];\n\n            response.costBreakdown.apolloCost = apolloCost;\n            currentCost += apolloCost;\n            response.processingMetadata.servicesUsed.push(\"apollo\");\n\n            console.log(`✅ Apollo executive contacts retrieved`);\n          } catch (error) {\n            console.error(\"Apollo error:\", error);\n            response.processingMetadata.errors.push({\n              service: \"apollo\",\n              error: error instanceof Error ? error.message : \"Unknown error\",\n            });\n          }\n        } else {\n          console.warn(`⚠️ Skipping Apollo enrichment - would exceed budget`);\n          response.processingMetadata.servicesSkipped.push(\"apollo (budget)\");\n        }\n      }\n\n      // Calculate final confidence score and complete response\n      response.confidenceScore = this.calculateConfidenceScore(response);\n      response.totalCost = currentCost;\n      response.success = true;\n      response.processingMetadata.processingTime = Date.now() - startTime;\n\n      console.log(\n        `✅ Progressive enrichment complete: ${\n          response.businessName\n        } - Confidence: ${\n          response.confidenceScore\n        }% - Cost: $${response.totalCost.toFixed(3)}`\n      );\n\n      return response;\n    } catch (error) {\n      console.error(\"Enrichment orchestration error:\", error);\n      response.processingMetadata.processingTime = Date.now() - startTime;\n      response.processingMetadata.errors.push({\n        service: \"orchestrator\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n      return response;\n    }\n  }\n\n  /**\n   * Get tier-based enrichment defaults\n   */\n  private getTierDefaults(tier: string) {\n    const tierConfigs = {\n      starter: {\n        includeBusinessLicense: false,\n        includeCompanyEnrichment: false,\n        discoverEmails: true,\n        verifyEmails: false,\n        includePersonEnrichment: false,\n        apolloEnrichment: false,\n        complianceVerification: false,\n        maxCostPerBusiness: 0.5,\n      },\n      professional: {\n        includeBusinessLicense: true,\n        includeCompanyEnrichment: true,\n        discoverEmails: true,\n        verifyEmails: true,\n        includePersonEnrichment: false,\n        apolloEnrichment: false,\n        complianceVerification: false,\n        maxCostPerBusiness: 1.5,\n      },\n      enterprise: {\n        includeBusinessLicense: true,\n        includeCompanyEnrichment: true,\n        discoverEmails: true,\n        verifyEmails: true,\n        includePersonEnrichment: true,\n        apolloEnrichment: false,\n        complianceVerification: false,\n        maxCostPerBusiness: 3.5,\n      },\n      compliance: {\n        includeBusinessLicense: true,\n        includeCompanyEnrichment: true,\n        discoverEmails: true,\n        verifyEmails: true,\n        includePersonEnrichment: true,\n        apolloEnrichment: true,\n        complianceVerification: true,\n        maxCostPerBusiness: 7.5,\n      },\n    };\n\n    return (\n      tierConfigs[tier as keyof typeof tierConfigs] || tierConfigs.professional\n    );\n  }\n\n  /**\n   * Call Hunter.io Edge Function\n   */\n  private async callHunterIO(params: Record<string, unknown>) {\n    const startedAt = performance.now();\n    let response: Response | null = null;\n    const action = String(params.action ?? \"request\");\n    const estimatedCost = this.estimateHunterCost(action);\n\n    try {\n      response = await fetch(\n        `${this.supabaseUrl}/functions/v1/enrichment-hunter`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(params),\n        }\n      );\n\n      const payload = await response.json();\n      const emails = Array.isArray(payload?.data?.emails)\n        ? payload.data.emails.length\n        : payload?.data\n        ? 1\n        : 0;\n\n      await this.logUsage({\n        sourceName: \"hunter_io\",\n        endpoint: action,\n        httpMethod: \"POST\",\n        requestParams: {\n          action,\n          domain: params.domain,\n          companyName: params.companyName,\n          limit: params.limit,\n        },\n        queryType: \"enrichment\",\n        responseCode: response.status,\n        responseTimeMs: Math.round(performance.now() - startedAt),\n        resultsReturned: emails,\n        usefulResults: emails,\n        success: response.ok && payload?.success !== false,\n        estimatedCost,\n        actualCost:\n          typeof payload?.cost === \"number\"\n            ? payload.cost\n            : response.ok\n            ? estimatedCost\n            : 0,\n      });\n\n      return payload;\n    } catch (error) {\n      await this.logUsage({\n        sourceName: \"hunter_io\",\n        endpoint: action,\n        httpMethod: \"POST\",\n        requestParams: {\n          action,\n          domain: params.domain,\n          companyName: params.companyName,\n          limit: params.limit,\n        },\n        queryType: \"enrichment\",\n        responseCode: response?.status ?? null,\n        responseTimeMs: Math.round(performance.now() - startedAt),\n        success: false,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        estimatedCost,\n        actualCost: 0,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Call NeverBounce Edge Function\n   */\n  private async callNeverBounce(params: Record<string, unknown>) {\n    const startedAt = performance.now();\n    let response: Response | null = null;\n    const emailCount = Array.isArray(params.emails)\n      ? params.emails.length\n      : params.email\n      ? 1\n      : 0;\n    const estimatedCost = emailCount * 0.008;\n\n    try {\n      response = await fetch(\n        `${this.supabaseUrl}/functions/v1/enrichment-neverbounce`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(params),\n        }\n      );\n\n      const payload = await response.json();\n      const verified = Array.isArray(payload?.data?.results)\n        ? payload.data.results.length\n        : payload?.data\n        ? 1\n        : 0;\n\n      await this.logUsage({\n        sourceName: \"neverbounce\",\n        endpoint: String(params.action ?? \"verify\"),\n        httpMethod: \"POST\",\n        requestParams: {\n          action: params.action,\n          emailCount,\n        },\n        queryType: \"enrichment\",\n        responseCode: response.status,\n        responseTimeMs: Math.round(performance.now() - startedAt),\n        resultsReturned: verified,\n        usefulResults: verified,\n        success: response.ok && payload?.success !== false,\n        estimatedCost,\n        actualCost:\n          typeof payload?.cost === \"number\"\n            ? payload.cost\n            : response.ok\n            ? estimatedCost\n            : 0,\n      });\n\n      return payload;\n    } catch (error) {\n      await this.logUsage({\n        sourceName: \"neverbounce\",\n        endpoint: String(params.action ?? \"verify\"),\n        httpMethod: \"POST\",\n        requestParams: {\n          action: params.action,\n          emailCount,\n        },\n        queryType: \"enrichment\",\n        responseCode: response?.status ?? null,\n        responseTimeMs: Math.round(performance.now() - startedAt),\n        success: false,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        estimatedCost,\n        actualCost: 0,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate confidence score based on enriched data\n   */\n  private calculateConfidenceScore(response: EnrichmentResponse): number {\n    let score = 40; // Base score\n\n    // Company enrichment bonus\n    if (response.enrichedData.companyInfo) {\n      score += 15;\n      // Additional bonus for complete company data\n      if (\n        response.enrichedData.companyInfo.industry &&\n        response.enrichedData.companyInfo.size\n      ) {\n        score += 5;\n      }\n    }\n\n    // Email discovery bonus\n    if (\n      response.enrichedData.emails &&\n      response.enrichedData.emails.length > 0\n    ) {\n      score += 10;\n\n      // Verified emails bonus\n      const verifiedEmails = response.enrichedData.emails.filter(\n        (e) => e.verified\n      );\n      if (verifiedEmails.length > 0) {\n        score += 15;\n      }\n    }\n\n    // Executive contacts bonus (Apollo)\n    if (\n      response.enrichedData.executiveContacts &&\n      response.enrichedData.executiveContacts.length > 0\n    ) {\n      score += 5;\n    }\n\n    // Compliance verification bonus\n    if (response.enrichedData.complianceData) {\n      score += 5;\n    }\n\n    return Math.min(score, 100);\n  }\n}\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    console.log(`🎯 Enrichment Orchestrator Edge Function`);\n\n    // Get Supabase credentials\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n    const supabaseKey = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\");\n\n    if (!supabaseUrl || !supabaseKey) {\n      throw new Error(\"Supabase credentials not configured\");\n    }\n\n    // Parse request\n    const requestData: EnrichmentRequest = await req.json();\n\n    console.log(\n      `📋 Enriching business: ${requestData.businessName} (Domain: ${\n        requestData.domain || \"N/A\"\n      })`\n    );\n\n    const usageContext: UsageLogContext = {\n      campaignId: requestData.campaignId ?? null,\n      sessionId: requestData.sessionUserId ?? null,\n      jobId: requestData.jobId ?? null,\n      tierKey: requestData.tierKey ?? null,\n      businessQuery: requestData.businessName ?? null,\n      locationQuery: requestData.state ?? null,\n    };\n\n    const usageLogger = createUsageLogger(\n      supabaseUrl,\n      supabaseKey,\n      usageContext\n    );\n\n    // Initialize orchestrator\n    const orchestrator = new EnrichmentOrchestrator(\n      supabaseUrl,\n      supabaseKey,\n      requestData.maxCostPerBusiness || 2.0,\n      usageLogger,\n      usageContext\n    );\n\n    // Enrich business\n    const result = await orchestrator.enrichBusiness(requestData);\n\n    return new Response(\n      JSON.stringify({\n        ...result,\n        timestamp: new Date().toISOString(),\n        version: \"1.0\",\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  } catch (error) {\n    console.error(\"Orchestrator error:\", error);\n\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n});\n"}}},
{"type":"measure","name":"lsp.did_open","count":68,"duration":25.764},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":25,"duration":0.279},
{"type":"mark","name":"lsp.did_open","count":69,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/2025-10-10-deterministic-dedupe.sql","languageId":"sql","version":1,"text":"-- Deterministic dedupe infrastructure for background discovery (2025-10-10)\n-- Adds request snapshot storage + lead fingerprint ledger so the database\n-- enforces \"new results only\" independently of the client.\n\nBEGIN;\n\n-- ============================================================================\n-- Lead fingerprint ledger (per-user)\n-- ============================================================================\nCREATE TABLE IF NOT EXISTS public.lead_fingerprints (\n  id BIGSERIAL PRIMARY KEY,\n  fingerprint TEXT NOT NULL,\n  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,\n  session_user_id TEXT,\n  campaign_id TEXT REFERENCES public.campaigns(id) ON DELETE CASCADE,\n  lead_id BIGINT REFERENCES public.leads(id) ON DELETE CASCADE,\n  business_name TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nCREATE UNIQUE INDEX IF NOT EXISTS idx_lead_fingerprints_user_unique\n  ON public.lead_fingerprints (fingerprint, user_id)\n  WHERE user_id IS NOT NULL;\n\nCREATE UNIQUE INDEX IF NOT EXISTS idx_lead_fingerprints_session_unique\n  ON public.lead_fingerprints (fingerprint, session_user_id)\n  WHERE session_user_id IS NOT NULL;\n\nCREATE INDEX IF NOT EXISTS idx_lead_fingerprints_campaign\n  ON public.lead_fingerprints (campaign_id);\n\nCREATE INDEX IF NOT EXISTS idx_lead_fingerprints_created\n  ON public.lead_fingerprints (created_at DESC);\n\nALTER TABLE public.lead_fingerprints ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY lead_fingerprints_select_self\n  ON public.lead_fingerprints\n  FOR SELECT\n  USING (\n    auth.uid() IS NOT NULL\n    AND user_id = auth.uid()\n  );\n\n-- ============================================================================\n-- Campaign request snapshots (immutable audit of queued work)\n-- ============================================================================\nCREATE TABLE IF NOT EXISTS public.campaign_request_snapshots (\n  id BIGSERIAL PRIMARY KEY,\n  campaign_id TEXT REFERENCES public.campaigns(id) ON DELETE CASCADE,\n  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,\n  session_user_id TEXT,\n  request_hash TEXT NOT NULL,\n  request_payload JSONB NOT NULL,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nCREATE UNIQUE INDEX IF NOT EXISTS idx_campaign_request_hash_unique\n  ON public.campaign_request_snapshots (request_hash, user_id)\n  WHERE user_id IS NOT NULL;\n\nCREATE INDEX IF NOT EXISTS idx_campaign_request_snapshots_campaign\n  ON public.campaign_request_snapshots (campaign_id);\n\nALTER TABLE public.campaign_request_snapshots ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY campaign_request_snapshots_select_self\n  ON public.campaign_request_snapshots\n  FOR SELECT\n  USING (\n    auth.uid() IS NOT NULL\n    AND user_id = auth.uid()\n  );\n\nCOMMIT;\n"}}},
{"type":"measure","name":"lsp.did_open","count":69,"duration":0.066},
{"type":"mark","name":"lsp.did_open","count":70,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/types/index.ts","languageId":"typescript","version":1,"text":"// Business Discovery Types\nexport interface BusinessLead {\n  id: string;\n  campaign_id?: string;\n  business_name: string;\n  address?: string;\n  phone?: string;\n  website?: string;\n  email?: string;\n  industry?: string;\n  confidence_score: number;\n  validation_status: \"pending\" | \"validating\" | \"validated\" | \"failed\";\n  created_at: string;\n  cost_to_acquire: number;\n  data_sources: string[];\n  // Progressive enrichment fields\n  enrichment_tier?: string;\n  vault_secured?: boolean;\n  enrichment_data?: {\n    emails?: Array<{\n      email: string;\n      confidence: number;\n      verified: boolean;\n      type?: string;\n      firstName?: string;\n      lastName?: string;\n      position?: string;\n    }>;\n    businessLicense?: {\n      isValid: boolean;\n      licenseNumber?: string;\n      status?: string;\n      expirationDate?: string;\n      professionalType?: string;\n      source: string;\n    };\n    companyInfo?: {\n      name?: string;\n      industry?: string;\n      size?: string;\n      founded?: number;\n      revenue?: string;\n      website?: string;\n      description?: string;\n      source: string;\n    };\n    hunterVerified?: boolean;\n    neverBounceVerified?: boolean;\n    licenseVerified?: boolean;\n    validationStatus?: \"pending\" | \"validating\" | \"validated\" | \"failed\";\n    enrichmentTier?: string;\n    verificationSources?: string[];\n    processingMetadata?: {\n      servicesUsed?: string[];\n      servicesSkipped?: string[];\n      totalCost?: number;\n      validationCost?: number;\n      enrichmentCost?: number;\n      enrichmentTier?: string;\n      enrichmentCostBreakdown?: {\n        businessLicenseCost: number;\n        companyEnrichmentCost: number;\n        hunterCost: number;\n        neverBounceCost: number;\n        personEnrichmentCost: number;\n        apolloCost: number;\n        complianceCost: number;\n      };\n    };\n    dataSources?: string[];\n  };\n}\n\nexport interface CampaignConfig {\n  search_terms: string;\n  location: string;\n  business_type?: string;\n  budget_limit: number;\n  max_results: number;\n  include_email_validation: boolean;\n  include_website_validation: boolean;\n  min_confidence_score: number;\n  chamber_verification?: boolean;\n  trade_association?: boolean;\n  professional_license?: boolean;\n  keywords?: string;\n  search_radius?: string;\n  expand_geography?: boolean;\n}\n\nexport interface ValidationResult {\n  field: string;\n  is_valid: boolean;\n  confidence: number;\n  source: string;\n  details?: string;\n}\n\nexport interface CampaignResult {\n  campaign_id: string;\n  business_type?: string;\n  location?: string;\n  status: \"running\" | \"completed\" | \"failed\" | \"cancelled\";\n  progress: number;\n  total_cost: number;\n  leads_found: number;\n  leads_qualified: number;\n  leads_validated: number;\n  created_at: string;\n  completed_at?: string;\n  error_message?: string;\n  // Progressive enrichment fields\n  tier_used?: string;\n  vault_secured?: boolean;\n  cache_performance?: {\n    cache_hits: number;\n    cache_misses: number;\n    cache_hit_ratio: number;\n    cost_savings: number;\n  };\n}\n\n// Census Intelligence Types\nexport interface CensusIntelligence {\n  business_density: {\n    total_establishments: number;\n    density_score: number;\n    confidence_multiplier: number;\n  };\n  geographic_optimization: {\n    optimal_radius: number;\n    expected_results: number;\n    api_efficiency_score: number;\n  };\n  market_insights: {\n    market_density: \"High\" | \"Medium\" | \"Low\";\n    competition_level: \"High\" | \"Medium\" | \"Low\";\n    search_optimization: string;\n  };\n}\n\n// API Response Types\nexport interface EdgeFunctionResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  cost?: number;\n  processing_time?: number;\n}\n\nexport interface BusinessDiscoveryResponse {\n  businesses: BusinessLead[];\n  total_cost: number;\n  processing_time: string;\n  campaign_id: string;\n  qualified_count: number;\n  total_found: number;\n  census_intelligence?: CensusIntelligence;\n  // Background job fields\n  job_id?: string; // For tracking background processing\n  status?: string; // Job status (pending, processing, completed, failed)\n  estimated_time?: number; // Estimated completion time in seconds\n  realtime_channel?: string; // Channel for real-time updates\n  // Progressive enrichment fields (vault-secured)\n  tier_used?: string;\n  cache_performance?: {\n    cache_hits: number;\n    cache_misses: number;\n    cache_hit_ratio: number;\n    cost_savings: number;\n  };\n  vault_status?: string;\n  stage_progress?: number;\n  current_stage?: string;\n}\n\n// Store Types\nexport interface CampaignStore {\n  campaigns: CampaignResult[];\n  currentCampaign: CampaignResult | null;\n  currentCampaignId: string | null;\n  leads: BusinessLead[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport interface UIStore {\n  sidebarOpen: boolean;\n  theme: \"light\" | \"dark\";\n  notifications: Notification[];\n}\n\nexport interface Notification {\n  id: string;\n  type: \"success\" | \"error\" | \"warning\" | \"info\";\n  title: string;\n  message: string;\n  timestamp: number;\n}\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":26,"duration":0.574},
{"type":"measure","name":"lsp.did_open","count":70,"duration":8.705},
{"type":"mark","name":"lsp.did_open","count":71,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts","languageId":"typescript","version":1,"text":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { supabase } from \"../lib/supabase\";\nimport type { BusinessLead, CampaignResult } from \"../types\";\nimport { transformCampaignData } from \"../utils/campaignTransforms\";\n\ninterface UseCampaignResultsOptions {\n  page?: number;\n  pageSize?: number;\n  enabled?: boolean;\n}\n\ninterface CampaignResultsQuery {\n  campaign: CampaignResult | null;\n  leads: BusinessLead[];\n  count: number;\n}\n\nexport const useCampaignResults = (\n  campaignId: string | undefined | null,\n  options: UseCampaignResultsOptions = {}\n) => {\n  const { user } = useAuth();\n  const pageSize = Math.max(options.pageSize ?? 50, 1);\n  const page = Math.max(options.page ?? 0, 0);\n  const enabled = Boolean(options.enabled ?? true);\n\n  const query = useQuery<CampaignResultsQuery>({\n    queryKey: [\n      \"campaign-results\",\n      user?.id ?? \"anonymous\",\n      campaignId ?? \"none\",\n      page,\n      pageSize,\n    ],\n    enabled: Boolean(user?.id) && Boolean(campaignId) && enabled,\n    staleTime: 60 * 1000,\n    queryFn: async () => {\n      if (!user?.id || !campaignId) {\n        return { campaign: null, leads: [], count: 0 };\n      }\n\n      const { data: campaignRecord, error: campaignError } = await supabase\n        .from(\"campaigns\")\n        .select(\n          \"id,business_type,location,status,total_cost,results_count,created_at,updated_at\"\n        )\n        .eq(\"id\", campaignId)\n        .eq(\"user_id\", user.id)\n        .maybeSingle();\n\n      if (campaignError) {\n        throw campaignError;\n      }\n\n      if (!campaignRecord) {\n        return { campaign: null, leads: [], count: 0 };\n      }\n\n      const rangeStart = page * pageSize;\n      const rangeEnd = rangeStart + pageSize - 1;\n\n      const {\n        data: leadsData,\n        error: leadsError,\n        count,\n      } = await supabase\n        .from(\"leads\")\n        .select(\n          \"id,campaign_id,business_name,address,phone,website,email,confidence_score,validation_cost,enrichment_data,created_at\",\n          { count: \"exact\" }\n        )\n        .eq(\"campaign_id\", campaignId)\n        .eq(\"user_id\", user.id)\n        .order(\"confidence_score\", { ascending: false })\n        .range(rangeStart, rangeEnd);\n\n      if (leadsError) {\n        throw leadsError;\n      }\n\n      const safeLeadsData = Array.isArray(leadsData) ? leadsData : [];\n\n      if (!Array.isArray(leadsData)) {\n        console.error(\"⚠️ Supabase returned a non-array leads payload\", {\n          campaignId,\n          receivedType: typeof leadsData,\n        });\n      }\n\n      const { campaignResult, leads } = transformCampaignData(\n        campaignRecord,\n        safeLeadsData\n      );\n\n      return {\n        campaign: campaignResult,\n        leads,\n        count: count ?? leads.length,\n      };\n    },\n  });\n\n  const totalLeads = query.data?.count ?? 0;\n  const totalPages = totalLeads > 0 ? Math.ceil(totalLeads / pageSize) : 0;\n\n  return {\n    campaign: query.data?.campaign ?? null,\n    leads: query.data?.leads ?? [],\n    totalLeads,\n    totalPages,\n    page,\n    pageSize,\n    isLoading: query.isLoading,\n    isFetching: query.isFetching,\n    isError: query.isError,\n    error: query.error,\n    refetch: query.refetch,\n  };\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":27,"duration":0.294},
{"type":"measure","name":"lsp.did_open","count":71,"duration":7.701},
{"type":"mark","name":"lsp.did_open","count":72,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Results.tsx","languageId":"typescriptreact","version":1,"text":"import React, { useEffect, useMemo, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useCampaignResults } from \"../hooks/useCampaignResults\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport { exportLeadsToCsv } from \"../utils/exportLeadsToCsv\";\n\nconst PAGE_SIZE = 25;\n\nconst getConfidenceColor = (score: number) => {\n  if (score >= 90) return \"bg-green-100 text-green-800\";\n  if (score >= 80) return \"bg-blue-100 text-blue-800\";\n  if (score >= 70) return \"bg-yellow-100 text-yellow-800\";\n  return \"bg-red-100 text-red-800\";\n};\n\nconst getValidationStatusColor = (status: string) => {\n  switch (status) {\n    case \"validated\":\n      return \"bg-green-100 text-green-800\";\n    case \"validating\":\n      return \"bg-blue-100 text-blue-800\";\n    case \"pending\":\n      return \"bg-yellow-100 text-yellow-800\";\n    case \"failed\":\n      return \"bg-red-100 text-red-800\";\n    default:\n      return \"bg-gray-100 text-gray-800\";\n  }\n};\n\nexport const Results: React.FC = () => {\n  const location = useLocation();\n  const navState = (location.state ?? null) as { campaignId?: string } | null;\n  const stateCampaignId = navState?.campaignId;\n\n  const {\n    currentCampaign,\n    currentCampaignId,\n    setCurrentCampaign,\n    setCampaignLeads,\n  } = useCampaignStore((state) => ({\n    currentCampaign: state.currentCampaign,\n    currentCampaignId: state.currentCampaignId,\n    setCurrentCampaign: state.setCurrentCampaign,\n    setCampaignLeads: state.setCampaignLeads,\n  }));\n\n  const [page, setPage] = useState(0);\n  const campaignId = stateCampaignId ?? currentCampaignId;\n\n  useEffect(() => {\n    setPage(0);\n  }, [campaignId]);\n\n  const {\n    campaign,\n    leads,\n    totalLeads,\n    totalPages,\n    isLoading,\n    isError,\n    error,\n    refetch,\n  } = useCampaignResults(campaignId, { page, pageSize: PAGE_SIZE });\n\n  useEffect(() => {\n    if (campaign) {\n      setCurrentCampaign(campaign);\n    }\n  }, [campaign, setCurrentCampaign]);\n\n  useEffect(() => {\n    if (!campaignId) {\n      return;\n    }\n    setCampaignLeads(campaignId, leads);\n  }, [campaignId, leads, setCampaignLeads]);\n\n  const displayCampaign = campaign ?? currentCampaign;\n  const displayLeads = leads;\n  const qualifiedCount = useMemo(\n    () => displayLeads.filter((lead) => lead.confidence_score >= 70).length,\n    [displayLeads]\n  );\n\n  const handleExport = (format: \"csv\" | \"json\") => {\n    if (displayLeads.length === 0) {\n      return;\n    }\n\n    if (format === \"csv\") {\n      exportLeadsToCsv(displayLeads, {\n        fileName: `prospects-vault-secured-${\n          new Date().toISOString().split(\"T\")[0]\n        }.csv`,\n      });\n      return;\n    }\n\n    const blob = new Blob([JSON.stringify(displayLeads, null, 2)], {\n      type: \"application/json\",\n    });\n    const url = URL.createObjectURL(blob);\n    const anchor = document.createElement(\"a\");\n    anchor.href = url;\n    anchor.download = `prospects-vault-secured-${\n      new Date().toISOString().split(\"T\")[0]\n    }.json`;\n    anchor.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const handlePageChange = (direction: \"next\" | \"prev\") => {\n    if (direction === \"next\") {\n      setPage((prev) => Math.min(prev + 1, Math.max(totalPages - 1, 0)));\n    } else {\n      setPage((prev) => Math.max(prev - 1, 0));\n    }\n  };\n\n  if (!campaignId) {\n    return (\n      <div className=\"bg-white shadow rounded-lg p-12 text-center\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n          No campaign selected\n        </h1>\n        <p className=\"text-gray-600\">\n          Launch a discovery campaign or open a recent campaign from the\n          dashboard to review results.\n        </p>\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-6 text-red-700\">\n        <h2 className=\"text-lg font-semibold mb-2\">Unable to load results</h2>\n        <p className=\"text-sm mb-4\">\n          {error instanceof Error ? error.message : \"Unknown error\"}\n        </p>\n        <button\n          onClick={() => refetch()}\n          className=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700\"\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Results</h1>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            {isLoading ? \"Loading leads...\" : `${totalLeads} leads found`} •{\" \"}\n            {qualifiedCount} qualified on this page\n          </p>\n        </div>\n\n        {displayLeads.length > 0 && (\n          <div className=\"flex space-x-3\">\n            <button\n              onClick={() => handleExport(\"csv\")}\n              className=\"inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n            >\n              📊 Export CSV\n            </button>\n            <button\n              onClick={() => handleExport(\"json\")}\n              className=\"inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n            >\n              📄 Export JSON\n            </button>\n          </div>\n        )}\n      </div>\n\n      {displayCampaign && (\n        <div className=\"bg-white shadow rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-medium text-gray-900\">\n              Progressive Enrichment Results\n            </h3>\n            {displayCampaign.vault_secured && (\n              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                🔐 Vault Secured\n              </span>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-5\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gray-900\">\n                {displayCampaign.leads_found}\n              </div>\n              <div className=\"text-sm text-gray-500\">Total Found</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {displayCampaign.leads_qualified}\n              </div>\n              <div className=\"text-sm text-gray-500\">Qualified</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {displayCampaign.leads_validated}\n              </div>\n              <div className=\"text-sm text-gray-500\">Validated</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {displayCampaign.tier_used || \"Professional\"}\n              </div>\n              <div className=\"text-sm text-gray-500\">Tier Used</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gray-900\">\n                ${displayCampaign.total_cost.toFixed(2)}\n              </div>\n              <div className=\"text-sm text-gray-500\">Total Cost</div>\n            </div>\n          </div>\n\n          {displayCampaign.cache_performance && (\n            <div className=\"mt-6 pt-6 border-t border-gray-200\">\n              <h4 className=\"text-sm font-medium text-gray-900 mb-3\">\n                🚀 90-Day Intelligent Cache Performance\n              </h4>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"bg-green-50 p-3 rounded-lg text-center\">\n                  <div className=\"text-lg font-bold text-green-600\">\n                    {displayCampaign.cache_performance.cache_hit_ratio.toFixed(\n                      1\n                    )}\n                    %\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Cache Hit Ratio</div>\n                </div>\n                <div className=\"bg-blue-50 p-3 rounded-lg text-center\">\n                  <div className=\"text-lg font-bold text-blue-600\">\n                    {displayCampaign.cache_performance.cache_hits}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Cache Hits</div>\n                </div>\n                <div className=\"bg-yellow-50 p-3 rounded-lg text-center\">\n                  <div className=\"text-lg font-bold text-yellow-600\">\n                    {displayCampaign.cache_performance.cache_misses}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Cache Misses</div>\n                </div>\n                <div className=\"bg-green-50 p-3 rounded-lg text-center\">\n                  <div className=\"text-lg font-bold text-green-600\">\n                    ${displayCampaign.cache_performance.cost_savings.toFixed(2)}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Cost Savings</div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n        {isLoading && displayLeads.length === 0 ? (\n          <div className=\"text-center py-12 text-gray-500\">Loading leads…</div>\n        ) : displayLeads.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <span className=\"text-4xl\">🔍</span>\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n              No results on this page\n            </h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Adjust your filters or run a new discovery campaign to see fresh\n              results.\n            </p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Business\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Contact\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Confidence\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Enrichment\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Cost\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {displayLeads.map((lead) => (\n                  <tr key={lead.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {lead.business_name}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {lead.address}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900\">\n                        {lead.phone && <div>📞 {lead.phone}</div>}\n                        {lead.website && (\n                          <div>\n                            🌐{\" \"}\n                            <a\n                              href={lead.website}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-blue-600 hover:underline\"\n                            >\n                              {lead.website.replace(/^https?:\\/\\//, \"\")}\n                            </a>\n                          </div>\n                        )}\n                        {lead.email && <div>📧 {lead.email}</div>}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getConfidenceColor(\n                          lead.confidence_score\n                        )}`}\n                      >\n                        {lead.confidence_score}%\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex flex-col space-y-1\">\n                        <span className=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-purple-100 text-purple-800\">\n                          {lead.enrichment_tier || \"Professional\"}\n                        </span>\n                        {lead.vault_secured && (\n                          <span className=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-green-100 text-green-800\">\n                            🔐 Vault Secured\n                          </span>\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getValidationStatusColor(\n                          lead.validation_status\n                        )}`}\n                      >\n                        {lead.validation_status}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      ${lead.cost_to_acquire.toFixed(3)}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-between px-6 py-4 border-t border-gray-200 bg-gray-50\">\n            <div className=\"text-sm text-gray-600\">\n              Page {page + 1} of {totalPages}\n            </div>\n            <div className=\"space-x-3\">\n              <button\n                onClick={() => handlePageChange(\"prev\")}\n                disabled={page === 0}\n                className=\"px-4 py-2 text-sm bg-white border border-gray-300 rounded-md disabled:opacity-40\"\n              >\n                ← Previous\n              </button>\n              <button\n                onClick={() => handlePageChange(\"next\")}\n                disabled={page + 1 >= totalPages}\n                className=\"px-4 py-2 text-sm bg-white border border-gray-300 rounded-md disabled:opacity-40\"\n              >\n                Next →\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":72,"duration":24.217},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":28,"duration":0.286},
{"type":"mark","name":"lsp.did_open","count":73,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx","languageId":"typescriptreact","version":1,"text":"import React, { useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { EnrichmentButton } from \"../components/EnrichmentButton\";\nimport { ProgressDisplay } from \"../components/ProgressDisplay\";\nimport { useBusinessDiscovery } from \"../hooks/useBusinessDiscovery\";\nimport { useCampaignResults } from \"../hooks/useCampaignResults\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport type { BusinessLead } from \"../types\";\nimport { exportLeadsToCsv } from \"../utils/exportLeadsToCsv\";\n\nexport const Campaign: React.FC = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const campaignId = searchParams.get(\"id\");\n  const {\n    currentCampaign,\n    campaigns,\n    leads,\n    setCurrentCampaign,\n    setCampaignLeads,\n  } = useCampaignStore();\n  const { isDiscovering, progress, currentStage, cacheStats, error } =\n    useBusinessDiscovery();\n  const [showResults, setShowResults] = useState(false);\n\n  const { campaign: hydratedCampaign, leads: remoteLeads } = useCampaignResults(\n    campaignId,\n    {\n      page: 0,\n      pageSize: 500,\n      enabled: Boolean(campaignId),\n    }\n  );\n\n  useEffect(() => {\n    if (hydratedCampaign) {\n      setCurrentCampaign(hydratedCampaign);\n    }\n  }, [hydratedCampaign, setCurrentCampaign]);\n\n  useEffect(() => {\n    if (campaignId && remoteLeads.length > 0) {\n      setCampaignLeads(campaignId, remoteLeads);\n    }\n  }, [campaignId, remoteLeads, setCampaignLeads]);\n\n  // Filter leads for current campaign\n  const campaignLeads = currentCampaign\n    ? leads.filter((lead) => lead.campaign_id === currentCampaign.campaign_id)\n    : [];\n\n  useEffect(() => {\n    if (!currentCampaign && campaignId) {\n      const matchedCampaign = campaigns.find(\n        (campaign) => campaign.campaign_id === campaignId\n      );\n      if (matchedCampaign) {\n        setCurrentCampaign(matchedCampaign);\n      }\n    }\n  }, [campaignId, campaigns, currentCampaign, setCurrentCampaign]);\n\n  useEffect(() => {\n    if (campaignLeads.length > 0 || remoteLeads.length > 0) {\n      setShowResults(true);\n    }\n  }, [campaignLeads.length, remoteLeads.length]);\n\n  const exportToCsv = () => {\n    if (!campaignLeads.length) return;\n\n    exportLeadsToCsv(campaignLeads, {\n      fileName: `campaign-${\n        currentCampaign?.campaign_id || Date.now()\n      }-results.csv`,\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Campaign Header */}\n      <div className=\"bg-white rounded-lg shadow-sm p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              Campaign Progress\n            </h1>\n            <p className=\"text-gray-600 mt-1\">\n              {currentCampaign\n                ? `Campaign ${currentCampaign.campaign_id}`\n                : \"Running campaign...\"}\n            </p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <button\n              onClick={() => navigate(\"/discovery\")}\n              className=\"px-4 py-2 text-gray-600 bg-gray-100 rounded-md hover:bg-gray-200\"\n            >\n              Back to Discovery\n            </button>\n            {showResults && (\n              <button\n                onClick={exportToCsv}\n                className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700\"\n              >\n                Export CSV\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Progress Display */}\n      {isDiscovering && (\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <ProgressDisplay\n            isDiscovering={isDiscovering}\n            progress={progress}\n            currentStage={currentStage}\n            cacheStats={cacheStats}\n          />\n        </div>\n      )}\n\n      {/* Campaign Summary */}\n      {currentCampaign && (\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Campaign Summary\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <div className=\"text-sm text-blue-600 font-medium\">Status</div>\n              <div className=\"text-lg font-bold text-blue-900 capitalize\">\n                {currentCampaign.status}\n              </div>\n            </div>\n            <div className=\"bg-green-50 p-4 rounded-lg\">\n              <div className=\"text-sm text-green-600 font-medium\">\n                Leads Found\n              </div>\n              <div className=\"text-lg font-bold text-green-900\">\n                {currentCampaign.leads_found || 0}\n              </div>\n            </div>\n            <div className=\"bg-yellow-50 p-4 rounded-lg\">\n              <div className=\"text-sm text-yellow-600 font-medium\">\n                Qualified\n              </div>\n              <div className=\"text-lg font-bold text-yellow-900\">\n                {currentCampaign.leads_qualified || 0}\n              </div>\n            </div>\n            <div className=\"bg-purple-50 p-4 rounded-lg\">\n              <div className=\"text-sm text-purple-600 font-medium\">\n                Total Cost\n              </div>\n              <div className=\"text-lg font-bold text-purple-900\">\n                ${(currentCampaign.total_cost || 0).toFixed(2)}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Enrichment Section */}\n      {currentCampaign && showResults && campaignLeads.length > 0 && (\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Progressive Enrichment\n          </h2>\n          <div className=\"flex items-start justify-between gap-6\">\n            <div className=\"flex-1\">\n              <p className=\"text-gray-600 mb-4\">\n                Enrich your leads with verified emails, business license\n                validation, and more. Only pay for successful enrichments.\n              </p>\n              <div className=\"grid grid-cols-3 gap-3 text-sm\">\n                <div className=\"bg-blue-50 p-3 rounded\">\n                  <div className=\"font-semibold text-blue-900\">\n                    {\n                      campaignLeads.filter(\n                        (l) => l.enrichment_data?.emails?.length\n                      ).length\n                    }\n                  </div>\n                  <div className=\"text-blue-600 text-xs\">With Emails</div>\n                </div>\n                <div className=\"bg-green-50 p-3 rounded\">\n                  <div className=\"font-semibold text-green-900\">\n                    {\n                      campaignLeads.filter(\n                        (l) => l.enrichment_data?.neverBounceVerified\n                      ).length\n                    }\n                  </div>\n                  <div className=\"text-green-600 text-xs\">Email Verified</div>\n                </div>\n                <div className=\"bg-purple-50 p-3 rounded\">\n                  <div className=\"font-semibold text-purple-900\">\n                    {\n                      campaignLeads.filter(\n                        (l) => l.enrichment_data?.licenseVerified\n                      ).length\n                    }\n                  </div>\n                  <div className=\"text-purple-600 text-xs\">\n                    License Verified\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex-shrink-0\">\n              <EnrichmentButton\n                campaignId={currentCampaign.campaign_id}\n                onComplete={() => {\n                  // Optionally refresh data or show success message\n                  console.log(\n                    \"Enrichment completed for campaign:\",\n                    currentCampaign.campaign_id\n                  );\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Results Table */}\n      {showResults && campaignLeads.length > 0 && (\n        <div className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                Campaign Results\n              </h2>\n              <div className=\"text-sm text-gray-500\">\n                {campaignLeads.length} leads found\n              </div>\n            </div>\n          </div>\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Business\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Contact Info\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Score\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Cost\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {campaignLeads.map((lead: BusinessLead) => (\n                  <tr key={lead.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {lead.business_name}\n                        </div>\n                        <div className=\"text-sm text-gray-500 truncate max-w-xs\">\n                          {lead.address}\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"space-y-1\">\n                        {lead.phone && (\n                          <div className=\"text-sm text-gray-900\">\n                            {lead.phone}\n                          </div>\n                        )}\n                        {lead.email && (\n                          <div className=\"text-sm text-blue-600\">\n                            {lead.email}\n                          </div>\n                        )}\n                        {lead.website && (\n                          <div className=\"text-sm text-gray-500 truncate max-w-xs\">\n                            <a\n                              href={lead.website}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"hover:text-blue-600\"\n                            >\n                              {lead.website}\n                            </a>\n                          </div>\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {lead.confidence_score}%\n                        </div>\n                        <div\n                          className={`ml-2 w-16 bg-gray-200 rounded-full h-2`}\n                        >\n                          <div\n                            className={`h-2 rounded-full ${\n                              lead.confidence_score >= 80\n                                ? \"bg-green-500\"\n                                : lead.confidence_score >= 60\n                                ? \"bg-yellow-500\"\n                                : \"bg-red-500\"\n                            }`}\n                            style={{ width: `${lead.confidence_score}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      ${(lead.cost_to_acquire || 0).toFixed(2)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                          lead.validation_status === \"validated\"\n                            ? \"bg-green-100 text-green-800\"\n                            : lead.validation_status === \"pending\"\n                            ? \"bg-yellow-100 text-yellow-800\"\n                            : \"bg-red-100 text-red-800\"\n                        }`}\n                      >\n                        {lead.validation_status || \"unknown\"}\n                      </span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <svg\n                className=\"h-5 w-5 text-red-400\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-red-800\">\n                Campaign Failed\n              </h3>\n              <div className=\"mt-2 text-sm text-red-700\">\n                <p>{error instanceof Error ? error.message : String(error)}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* No Results State */}\n      {showResults && campaignLeads.length === 0 && (\n        <div className=\"bg-white rounded-lg shadow-sm p-12 text-center\">\n          <svg\n            className=\"mx-auto h-12 w-12 text-gray-400\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n            />\n          </svg>\n          <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n            No results found\n          </h3>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            Try adjusting your search criteria or location.\n          </p>\n          <div className=\"mt-6\">\n            <button\n              onClick={() => navigate(\"/discovery\")}\n              className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700\"\n            >\n              Start New Campaign\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":73,"duration":14.202},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":29,"duration":0.385},
{"type":"mark","name":"lsp.did_open","count":74,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts","languageId":"typescript","version":1,"text":"import { create } from \"zustand\";\nimport type { BusinessLead, CampaignResult, CampaignStore } from \"../types\";\nimport { sanitizeLeadCollection } from \"./utils/leadSanitizers\";\n\ninterface CampaignActions {\n  addCampaign: (campaign: CampaignResult) => void;\n  updateCampaign: (\n    campaignId: string,\n    updates: Partial<CampaignResult>\n  ) => void;\n  setCurrentCampaign: (campaign: CampaignResult | null) => void;\n  setCurrentCampaignId: (campaignId: string | null) => void;\n  addLeads: (leads: BusinessLead[]) => void;\n  setCampaignLeads: (campaignId: string, leads: BusinessLead[]) => void;\n  updateLead: (leadId: string, updates: Partial<BusinessLead>) => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  clearLeads: () => void;\n  reset: () => void;\n  // Enhanced monitoring capabilities\n  addJobProgress: (jobId: string, progress: JobProgress) => void;\n  updateJobProgress: (jobId: string, updates: Partial<JobProgress>) => void;\n  getJobProgress: (jobId: string) => JobProgress | undefined;\n  addApiUsageMetric: (metric: ApiUsageMetric) => void;\n  getApiUsageStats: () => ApiUsageStats;\n  clearOldMetrics: (olderThanDays?: number) => void;\n}\n\ninterface JobProgress {\n  id: string;\n  campaignId: string;\n  status: \"pending\" | \"processing\" | \"completed\" | \"failed\";\n  progress: number; // 0-100\n  currentStage: string;\n  startedAt: Date;\n  completedAt?: Date;\n  estimatedTimeRemaining?: number;\n  metrics?: {\n    leadsFound: number;\n    leadsEnriched: number;\n    totalCost: number;\n    processingTimeMs: number;\n  };\n  error?: string;\n}\n\ninterface ApiUsageMetric {\n  id: string;\n  campaignId?: string;\n  service: string; // 'google_places', 'hunter_io', 'neverbounce', etc.\n  operation: string; // 'search', 'details', 'verify', etc.\n  cost: number;\n  requestCount: number;\n  responseTimeMs: number;\n  success: boolean;\n  timestamp: Date;\n  metadata?: Record<string, unknown>;\n}\n\ninterface ApiUsageStats {\n  totalCost: number;\n  totalRequests: number;\n  averageResponseTime: number;\n  successRate: number;\n  costByService: Record<string, number>;\n  requestsByService: Record<string, number>;\n  dailySpend: Record<string, number>;\n  monthlySpend: Record<string, number>;\n}\n\ninterface EnhancedCampaignStore extends CampaignStore {\n  jobProgress: Record<string, JobProgress>;\n  apiUsageMetrics: ApiUsageMetric[];\n  lastMetricsCleanup: Date;\n}\n\nconst createInitialState = (): EnhancedCampaignStore => ({\n  campaigns: [],\n  currentCampaign: null,\n  currentCampaignId: null,\n  leads: [],\n  isLoading: false,\n  error: null,\n  jobProgress: {},\n  apiUsageMetrics: [],\n  lastMetricsCleanup: new Date(),\n});\n\nconst initialState = createInitialState();\n\nconst getCampaignKey = (campaign: CampaignResult): string | null => {\n  if (campaign.campaign_id) {\n    return campaign.campaign_id;\n  }\n\n  const fallbackId = (campaign as { id?: string | number }).id;\n  return fallbackId != null ? String(fallbackId) : null;\n};\n\nconst dedupeCampaigns = (campaigns: CampaignResult[]): CampaignResult[] => {\n  const seen = new Set<string>();\n  const uniqueCampaigns: CampaignResult[] = [];\n\n  for (const campaign of campaigns) {\n    const key = getCampaignKey(campaign);\n    if (key === null) {\n      uniqueCampaigns.push(campaign);\n      continue;\n    }\n\n    if (seen.has(key)) {\n      continue;\n    }\n\n    seen.add(key);\n    uniqueCampaigns.push(campaign);\n  }\n\n  return uniqueCampaigns;\n};\n\nexport const useCampaignStore = create<\n  EnhancedCampaignStore & CampaignActions\n>()((set, get) => ({\n  ...initialState,\n\n  addCampaign: (campaign) =>\n    set((state) => ({\n      campaigns: dedupeCampaigns([campaign, ...state.campaigns]),\n    })),\n\n  updateCampaign: (campaignId, updates) =>\n    set((state) => ({\n      campaigns: dedupeCampaigns(\n        state.campaigns.map((c) =>\n          c.campaign_id === campaignId ? { ...c, ...updates } : c\n        )\n      ),\n      currentCampaign:\n        state.currentCampaign?.campaign_id === campaignId\n          ? { ...state.currentCampaign, ...updates }\n          : state.currentCampaign,\n    })),\n\n  setCurrentCampaign: (campaign) =>\n    set({\n      currentCampaign: campaign,\n      currentCampaignId: campaign?.campaign_id ?? null,\n    }),\n\n  setCurrentCampaignId: (campaignId) => set({ currentCampaignId: campaignId }),\n\n  addLeads: (leads) =>\n    set((state) => {\n      const merged = new Map<string, BusinessLead>();\n      const existingLeads = state.leads || [];\n      const incomingLeads = sanitizeLeadCollection(\n        leads,\n        null,\n        \"enhanced campaign store\"\n      );\n\n      for (const lead of existingLeads) {\n        if (lead?.id != null) {\n          merged.set(String(lead.id), lead);\n        }\n      }\n\n      for (const lead of incomingLeads) {\n        merged.set(String(lead.id), lead);\n      }\n\n      return { leads: Array.from(merged.values()) };\n    }),\n\n  setCampaignLeads: (campaignId, leads) =>\n    set((state) => {\n      const merged = new Map<string, BusinessLead>();\n\n      // Safe iteration - check if leads array exists\n      const existingLeads = state.leads || [];\n      const incomingLeads = sanitizeLeadCollection(\n        leads,\n        campaignId,\n        \"enhanced campaign store\"\n      );\n\n      for (const lead of existingLeads) {\n        if (lead?.campaign_id === campaignId) {\n          continue;\n        }\n        if (lead?.id != null) {\n          merged.set(String(lead.id), lead);\n        }\n      }\n\n      for (const lead of incomingLeads) {\n        merged.set(String(lead.id), lead);\n      }\n\n      return { leads: Array.from(merged.values()) };\n    }),\n\n  updateLead: (leadId, updates) =>\n    set((state) => ({\n      leads: state.leads.map((lead) =>\n        lead.id === leadId ? { ...lead, ...updates } : lead\n      ),\n    })),\n\n  setLoading: (loading) => set({ isLoading: loading }),\n\n  setError: (error) => set({ error }),\n\n  clearLeads: () => set({ leads: [] }),\n\n  reset: () => set(createInitialState()),\n\n  // Enhanced monitoring methods\n  addJobProgress: (jobId, progress) =>\n    set((state) => ({\n      jobProgress: {\n        ...state.jobProgress,\n        [jobId]: progress,\n      },\n    })),\n\n  updateJobProgress: (jobId, updates) =>\n    set((state) => ({\n      jobProgress: {\n        ...state.jobProgress,\n        [jobId]: state.jobProgress[jobId]\n          ? { ...state.jobProgress[jobId], ...updates }\n          : {\n              id: jobId,\n              campaignId: \"\",\n              status: \"pending\" as const,\n              progress: 0,\n              currentStage: \"\",\n              startedAt: new Date(),\n              ...updates,\n            },\n      },\n    })),\n\n  getJobProgress: (jobId) => get().jobProgress[jobId],\n\n  addApiUsageMetric: (metric) =>\n    set((state) => ({\n      apiUsageMetrics: [metric, ...state.apiUsageMetrics],\n    })),\n\n  getApiUsageStats: (): ApiUsageStats => {\n    const metrics = get().apiUsageMetrics;\n    const totalCost = metrics.reduce((sum, metric) => sum + metric.cost, 0);\n    const totalRequests = metrics.reduce(\n      (sum, metric) => sum + metric.requestCount,\n      0\n    );\n    const totalResponseTime = metrics.reduce(\n      (sum, metric) => sum + metric.responseTimeMs,\n      0\n    );\n    const successfulRequests = metrics.filter(\n      (metric) => metric.success\n    ).length;\n\n    const costByService: Record<string, number> = {};\n    const requestsByService: Record<string, number> = {};\n    const dailySpend: Record<string, number> = {};\n    const monthlySpend: Record<string, number> = {};\n\n    metrics.forEach((metric) => {\n      costByService[metric.service] =\n        (costByService[metric.service] || 0) + metric.cost;\n      requestsByService[metric.service] =\n        (requestsByService[metric.service] || 0) + metric.requestCount;\n\n      const timestamp =\n        metric.timestamp instanceof Date\n          ? metric.timestamp\n          : new Date(metric.timestamp);\n\n      if (Number.isNaN(timestamp.getTime())) {\n        return;\n      }\n\n      const dateKey = timestamp.toISOString().split(\"T\")[0];\n      const monthKey = dateKey.substring(0, 7);\n\n      dailySpend[dateKey] = (dailySpend[dateKey] || 0) + metric.cost;\n      monthlySpend[monthKey] = (monthlySpend[monthKey] || 0) + metric.cost;\n    });\n\n    return {\n      totalCost,\n      totalRequests,\n      averageResponseTime:\n        metrics.length > 0 ? totalResponseTime / metrics.length : 0,\n      successRate: metrics.length > 0 ? successfulRequests / metrics.length : 0,\n      costByService,\n      requestsByService,\n      dailySpend,\n      monthlySpend,\n    };\n  },\n\n  clearOldMetrics: (olderThanDays = 30) => {\n    const cutoff = new Date();\n    cutoff.setDate(cutoff.getDate() - olderThanDays);\n\n    set((state) => ({\n      apiUsageMetrics: state.apiUsageMetrics.filter((metric) => {\n        const timestamp =\n          metric.timestamp instanceof Date\n            ? metric.timestamp\n            : new Date(metric.timestamp);\n\n        return Number.isNaN(timestamp.getTime()) ? true : timestamp > cutoff;\n      }),\n      lastMetricsCleanup: new Date(),\n    }));\n  },\n}));\n\n// Export types for use in components\nexport type { ApiUsageMetric, ApiUsageStats, JobProgress };\n"}}},
{"type":"measure","name":"lsp.did_open","count":74,"duration":16.781},
{"type":"mark","name":"lsp.did_open","count":75,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/utils/campaignTransforms.ts","languageId":"typescript","version":1,"text":"import type { BusinessLead, CampaignResult } from \"../types\";\n\nconst normalizeCampaignStatus = (\n  value: string | null | undefined\n): CampaignResult[\"status\"] => {\n  switch (value) {\n    case \"running\":\n    case \"completed\":\n    case \"failed\":\n    case \"cancelled\":\n      return value;\n    default:\n      return \"completed\";\n  }\n};\n\nconst normalizeValidationStatus = (\n  value: string | null | undefined\n): BusinessLead[\"validation_status\"] => {\n  switch (value) {\n    case \"pending\":\n    case \"validating\":\n    case \"validated\":\n    case \"failed\":\n      return value;\n    default:\n      return \"validated\";\n  }\n};\n\nconst deriveDataSources = (enrichmentData: any): string[] => {\n  if (!enrichmentData) {\n    return [\"google_places\"];\n  }\n\n  const fromServices = Array.isArray(\n    enrichmentData?.processingMetadata?.servicesUsed\n  )\n    ? enrichmentData.processingMetadata.servicesUsed\n    : [];\n\n  const fromSources = Array.isArray(enrichmentData?.verificationSources)\n    ? enrichmentData.verificationSources\n    : [];\n\n  const dataSources = [...fromServices, ...fromSources].filter(Boolean);\n  return dataSources.length > 0 ? dataSources : [\"google_places\"];\n};\n\nconst coerceNumber = (value: unknown, fallback = 0): number => {\n  const parsed = Number(value);\n  return Number.isFinite(parsed) ? parsed : fallback;\n};\n\ninterface TransformOptions {\n  metrics?: Record<string, any> | null;\n}\n\nexport interface CampaignTransformResult {\n  campaignResult: CampaignResult;\n  leads: BusinessLead[];\n}\n\nconst sanitizeEnrichmentData = (\n  value: unknown\n): BusinessLead[\"enrichment_data\"] => {\n  if (value == null) {\n    return undefined;\n  }\n\n  if (typeof value !== \"object\") {\n    return undefined;\n  }\n\n  try {\n    return JSON.parse(JSON.stringify(value)) as BusinessLead[\"enrichment_data\"];\n  } catch (error) {\n    console.error(\"⚠️ Unable to sanitize enrichment data in transform\", error);\n    return undefined;\n  }\n};\n\nconst normalizeLeadIdentifier = (lead: any): string | null => {\n  const candidate = lead?.id ?? lead?.lead_id ?? null;\n\n  if (candidate == null) {\n    return null;\n  }\n\n  return String(candidate);\n};\n\nexport const transformCampaignData = (\n  campaignRecord: any,\n  leadsRecords: any[] = [],\n  options: TransformOptions = {}\n): CampaignTransformResult => {\n  if (!campaignRecord) {\n    throw new Error(\"Campaign record is required\");\n  }\n\n  const metricsAny = options.metrics ?? {};\n\n  const mappedLeads: BusinessLead[] = [];\n\n  for (const rawLead of leadsRecords) {\n    const leadId = normalizeLeadIdentifier(rawLead);\n\n    if (leadId == null) {\n      console.warn(\"⚠️ Dropping lead without identifier before hydration\", {\n        campaignId: campaignRecord.id,\n        lead: rawLead,\n      });\n      continue;\n    }\n\n    const lead = rawLead ?? {};\n    const enrichmentData = sanitizeEnrichmentData(lead.enrichment_data);\n    const rawCost =\n      lead.validation_cost ??\n      enrichmentData?.processingMetadata?.totalCost ??\n      0;\n\n    const tierFromData =\n      enrichmentData?.processingMetadata?.enrichmentTier ??\n      enrichmentData?.enrichmentTier;\n\n    const campaignId = String(lead.campaign_id ?? campaignRecord.id ?? \"\");\n\n    if (!campaignId) {\n      console.warn(\"⚠️ Dropping lead without campaign association\", {\n        campaignId: campaignRecord.id,\n        leadId,\n      });\n      continue;\n    }\n\n    mappedLeads.push({\n      id: leadId,\n      campaign_id: campaignId,\n      business_name: lead.business_name ?? \"Unknown Business\",\n      address: lead.address ?? \"\",\n      phone: lead.phone ?? \"\",\n      website: lead.website ?? \"\",\n      email: lead.email ?? \"\",\n      confidence_score: coerceNumber(lead.confidence_score, 0),\n      validation_status: normalizeValidationStatus(\n        enrichmentData?.validationStatus ?? lead.validation_status\n      ),\n      created_at: lead.created_at ?? new Date().toISOString(),\n      cost_to_acquire: coerceNumber(rawCost, 0),\n      data_sources: deriveDataSources(enrichmentData),\n      enrichment_tier:\n        tierFromData ??\n        (metricsAny?.tier as string | undefined) ??\n        (metricsAny?.tier_name as string | undefined) ??\n        undefined,\n      vault_secured: true,\n      enrichment_data: enrichmentData,\n    });\n  }\n\n  const leadsQualified = mappedLeads.filter(\n    (lead) => lead.confidence_score >= 70\n  ).length;\n  const leadsValidated = mappedLeads.filter(\n    (lead) => lead.validation_status === \"validated\"\n  ).length;\n\n  const totalFoundRaw = campaignRecord.results_count ?? mappedLeads.length ?? 0;\n\n  const campaignResult: CampaignResult = {\n    campaign_id: campaignRecord.id,\n    business_type: campaignRecord.business_type ?? undefined,\n    location: campaignRecord.location ?? undefined,\n    status: normalizeCampaignStatus(campaignRecord.status),\n    progress: 100,\n    total_cost: coerceNumber(\n      campaignRecord.total_cost ?? metricsAny?.total_cost ?? 0,\n      0\n    ),\n    leads_found: coerceNumber(totalFoundRaw, mappedLeads.length),\n    leads_qualified: leadsQualified,\n    leads_validated: leadsValidated,\n    created_at: campaignRecord.created_at ?? new Date().toISOString(),\n    completed_at: campaignRecord.updated_at ?? undefined,\n    tier_used:\n      (metricsAny?.tier as string | undefined) ??\n      (metricsAny?.tier_name as string | undefined) ??\n      undefined,\n    vault_secured: true,\n    cache_performance: undefined,\n  };\n\n  return {\n    campaignResult,\n    leads: mappedLeads,\n  };\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":30,"duration":0.31},
{"type":"measure","name":"lsp.did_open","count":75,"duration":8.042},
{"type":"mark","name":"lsp.did_open","count":76,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/components/ErrorBoundary.tsx","languageId":"typescriptreact","version":1,"text":"import React from \"react\";\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n}\n\nexport class ErrorBoundary extends React.Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  state: ErrorBoundaryState = {\n    hasError: false,\n    error: null,\n  };\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, info: React.ErrorInfo) {\n    console.error(\"🛑 ProspectPro error boundary captured an exception\", {\n      error,\n      info,\n    });\n  }\n\n  handleReset = () => {\n    this.setState({ hasError: false, error: null });\n  };\n\n  renderFallback() {\n    if (this.props.fallback) {\n      return this.props.fallback;\n    }\n\n    return (\n      <div className=\"max-w-3xl mx-auto mt-16 rounded-lg border border-red-200 bg-red-50 p-8 text-red-800\">\n        <h1 className=\"text-2xl font-semibold\">Something went wrong</h1>\n        <p className=\"mt-3 text-sm text-red-700\">\n          The interface recovered from an unexpected error. No data was lost,\n          but the last action may not have completed. Please refresh the page or\n          try again.\n        </p>\n        {this.state.error && (\n          <pre className=\"mt-4 max-h-48 overflow-auto rounded bg-white p-4 text-xs text-red-600\">\n            {this.state.error.message}\n          </pre>\n        )}\n        <div className=\"mt-6 flex gap-3\">\n          <button\n            type=\"button\"\n            onClick={this.handleReset}\n            className=\"rounded-md bg-white px-4 py-2 text-sm font-medium text-red-700 shadow-sm ring-1 ring-red-200 hover:bg-red-100\"\n          >\n            Dismiss\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => window.location.reload()}\n            className=\"rounded-md bg-red-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-700\"\n          >\n            Reload\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.renderFallback();\n    }\n\n    return this.props.children;\n  }\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":76,"duration":1.022},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":31,"duration":0.298},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":32,"duration":0.294},
{"type":"mark","name":"lsp.did_open","count":77,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/App.tsx","languageId":"typescriptreact","version":1,"text":"import { Route, Routes } from \"react-router-dom\";\nimport { ErrorBoundary } from \"./components/ErrorBoundary\";\nimport { Layout } from \"./components/Layout\";\nimport { AuthProvider } from \"./contexts/AuthContext\";\nimport { AccountPage } from \"./pages/AccountPage\";\nimport { AdminPanel } from \"./pages/AdminPanel\";\nimport { AuthCallback } from \"./pages/AuthCallback\";\nimport { BusinessDiscovery } from \"./pages/BusinessDiscovery\";\nimport { Campaign } from \"./pages/Campaign\";\nimport { CampaignProgress } from \"./pages/CampaignProgress\";\nimport { Dashboard } from \"./pages/Dashboard\";\nimport { Results } from \"./pages/Results\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <ErrorBoundary>\n        <Layout>\n          <Routes>\n            <Route path=\"/\" element={<BusinessDiscovery />} />\n            <Route path=\"/dashboard\" element={<Dashboard />} />\n            <Route path=\"/discovery\" element={<BusinessDiscovery />} />\n            <Route path=\"/campaign\" element={<Campaign />} />\n            <Route\n              path=\"/campaign/:campaignId/progress\"\n              element={<CampaignProgress />}\n            />\n            <Route path=\"/results\" element={<Results />} />\n            <Route path=\"/account\" element={<AccountPage />} />\n            <Route path=\"/admin\" element={<AdminPanel />} />\n            <Route path=\"/auth/callback\" element={<AuthCallback />} />\n          </Routes>\n        </Layout>\n      </ErrorBoundary>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n"}}},
{"type":"measure","name":"lsp.did_open","count":77,"duration":1.706},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":33,"duration":0.331},
{"type":"mark","name":"lsp.did_open","count":78,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/utils/leadSanitizers.ts","languageId":"typescript","version":1,"text":"import type { BusinessLead } from \"../../types\";\n\ntype LeadLike =\n  | BusinessLead\n  | (Partial<BusinessLead> & Record<string, unknown>);\n\ntype NullableLeadCollection = LeadLike[] | null | undefined;\n\nconst ensureString = (value: unknown, fallback = \"\"): string => {\n  return typeof value === \"string\" ? value : fallback;\n};\n\nconst ensureOptionalString = (value: unknown): string | undefined => {\n  return typeof value === \"string\" && value.length > 0 ? value : undefined;\n};\n\nconst ensureNumber = (value: unknown, fallback = 0): number => {\n  const parsed = Number(value);\n  return Number.isFinite(parsed) ? parsed : fallback;\n};\n\nconst VALIDATION_STATUSES = new Set<BusinessLead[\"validation_status\"]>([\n  \"pending\",\n  \"validating\",\n  \"validated\",\n  \"failed\",\n]);\n\nconst sanitizeEnrichmentData = (\n  value: unknown\n): BusinessLead[\"enrichment_data\"] => {\n  if (value == null || typeof value !== \"object\") {\n    return undefined;\n  }\n\n  try {\n    return JSON.parse(JSON.stringify(value)) as BusinessLead[\"enrichment_data\"];\n  } catch (error) {\n    console.error(\"⚠️ Unable to sanitize enrichment data payload\", error);\n    return undefined;\n  }\n};\n\nconst deriveDataSources = (\n  lead: LeadLike,\n  enrichmentData: BusinessLead[\"enrichment_data\"]\n): string[] => {\n  const fromLead = Array.isArray(\n    (lead as { data_sources?: unknown }).data_sources\n  )\n    ? ((lead as { data_sources?: unknown }).data_sources as unknown[])\n        .filter((source): source is string => typeof source === \"string\")\n        .map((source) => source.trim())\n        .filter((source) => source.length > 0)\n    : [];\n\n  const services = Array.isArray(\n    enrichmentData?.processingMetadata?.servicesUsed\n  )\n    ? enrichmentData?.processingMetadata?.servicesUsed ?? []\n    : [];\n  const verificationSources = Array.isArray(enrichmentData?.verificationSources)\n    ? enrichmentData?.verificationSources ?? []\n    : [];\n  const explicitSources = Array.isArray(enrichmentData?.dataSources)\n    ? enrichmentData?.dataSources ?? []\n    : [];\n\n  const combined = [\n    ...fromLead,\n    ...services,\n    ...verificationSources,\n    ...explicitSources,\n  ]\n    .filter((source): source is string => typeof source === \"string\")\n    .map((source) => source.trim())\n    .filter((source) => source.length > 0);\n\n  if (combined.length === 0) {\n    return [\"google_places\"];\n  }\n\n  return Array.from(new Set(combined));\n};\n\nconst coerceValidationStatus = (\n  value: unknown,\n  enrichmentData: BusinessLead[\"enrichment_data\"]\n): BusinessLead[\"validation_status\"] => {\n  if (\n    typeof value === \"string\" &&\n    VALIDATION_STATUSES.has(value as BusinessLead[\"validation_status\"])\n  ) {\n    return value as BusinessLead[\"validation_status\"];\n  }\n\n  const enrichmentStatus = enrichmentData?.validationStatus;\n\n  if (\n    typeof enrichmentStatus === \"string\" &&\n    VALIDATION_STATUSES.has(\n      enrichmentStatus as BusinessLead[\"validation_status\"]\n    )\n  ) {\n    return enrichmentStatus as BusinessLead[\"validation_status\"];\n  }\n\n  return \"validated\";\n};\n\nexport const sanitizeLead = (\n  lead: LeadLike | null | undefined,\n  fallbackCampaignId: string | null\n): BusinessLead | null => {\n  if (!lead || lead.id == null) {\n    return null;\n  }\n\n  const campaignId = (lead.campaign_id ?? fallbackCampaignId) as string | null;\n\n  if (!campaignId) {\n    return null;\n  }\n\n  const enrichmentData = sanitizeEnrichmentData(lead.enrichment_data);\n\n  const sanitized: BusinessLead = {\n    id: String(lead.id),\n    campaign_id: String(campaignId),\n    business_name: ensureString(lead.business_name, \"Unknown Business\"),\n    address: ensureString(lead.address),\n    phone: ensureString(lead.phone),\n    website: ensureString(lead.website),\n    email: ensureString(lead.email),\n    industry: ensureOptionalString((lead as { industry?: unknown }).industry),\n    confidence_score: ensureNumber(lead.confidence_score, 0),\n    validation_status: coerceValidationStatus(\n      lead.validation_status,\n      enrichmentData\n    ),\n    created_at:\n      typeof lead.created_at === \"string\"\n        ? lead.created_at\n        : new Date().toISOString(),\n    cost_to_acquire: ensureNumber(\n      (lead as { cost_to_acquire?: unknown }).cost_to_acquire ??\n        (lead as { validation_cost?: unknown }).validation_cost,\n      0\n    ),\n    data_sources: deriveDataSources(lead, enrichmentData),\n    enrichment_tier:\n      ensureOptionalString(lead.enrichment_tier) ??\n      ensureOptionalString(enrichmentData?.enrichmentTier),\n    vault_secured:\n      typeof lead.vault_secured === \"boolean\" ? lead.vault_secured : true,\n    enrichment_data: enrichmentData,\n  };\n\n  return sanitized;\n};\n\nexport const sanitizeLeadCollection = (\n  leads: NullableLeadCollection,\n  fallbackCampaignId: string | null,\n  context = \"campaign store\"\n): BusinessLead[] => {\n  if (!Array.isArray(leads)) {\n    console.error(`⚠️ ${context} received a non-array leads payload`, {\n      type: typeof leads,\n    });\n    return [];\n  }\n\n  const sanitized = leads\n    .map((lead) => sanitizeLead(lead, fallbackCampaignId))\n    .filter((lead): lead is BusinessLead => Boolean(lead));\n\n  if (sanitized.length < leads.length) {\n    console.warn(`🧹 Filtered invalid leads before updating ${context}`, {\n      received: leads.length,\n      retained: sanitized.length,\n    });\n  }\n\n  return sanitized;\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":78,"duration":11.208},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":34,"duration":0.376},
{"type":"mark","name":"lsp.did_open","count":79,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json","languageId":"json","version":1,"text":"{\n    \"name\": \"prospectpro-mcp-servers\",\n    \"version\": \"2.1.0\",\n    \"description\": \"Consolidated MCP servers for ProspectPro Supabase-First AI development\",\n    \"main\": \"production-server.js\",\n    \"scripts\": {\n        \"start:production\": \"node production-server.js\",\n        \"start:development\": \"node development-server.js\",\n        \"start:troubleshooting\": \"node supabase-troubleshooting-server.js\",\n        \"start:all\": \"concurrently \\\"npm run start:production\\\" \\\"npm run start:development\\\" \\\"npm run start:troubleshooting\\\"\",\n        \"test\": \"node test-servers.js\",\n        \"validate\": \"npm run test && echo '✅ All Supabase MCP servers validated successfully'\",\n        \"install:deps\": \"npm install\",\n        \"debug:anon-key\": \"echo 'Use troubleshooting server: diagnose_anon_key_mismatch tool'\",\n        \"debug:edge-functions\": \"echo 'Use troubleshooting server: test_edge_function tool'\",\n        \"debug:database\": \"echo 'Use troubleshooting server: validate_database_permissions tool'\"\n    },\n    \"dependencies\": {\n        \"@modelcontextprotocol/sdk\": \"^1.18.2\",\n        \"@supabase/supabase-js\": \"^2.58.0\"\n    },\n    \"devDependencies\": {\n        \"concurrently\": \"^8.2.2\"\n    },\n    \"keywords\": [\n        \"mcp\",\n        \"model-context-protocol\",\n        \"ai\",\n        \"prospectpro\",\n        \"supabase\",\n        \"edge-functions\",\n        \"serverless\"\n    ],\n    \"author\": \"Alex Torelli\",\n    \"license\": \"MIT\"\n}"}}},
{"type":"measure","name":"lsp.did_open","count":79,"duration":0.056},
{"type":"mark","name":"lsp.did_open","count":80,"args":{"textDocument":{"uri":"vscode-userdata:/c%3A/Users/Alext/AppData/Roaming/Code/User/settings.json","languageId":"jsonc","version":1,"text":"{\n  \"window.autoDetectColorScheme\": true,\n  \"github.copilot.nextEditSuggestions.enabled\": true,\n  \"security.workspace.trust.untrustedFiles\": \"open\",\n  \"python.analysis.typeCheckingMode\": \"standard\",\n  \"mssql.connectionGroups\": [\n    {\n      \"name\": \"ROOT\",\n      \"id\": \"6DE9C5E9-9E3A-47B4-8BEA-50B0A7E5E108\"\n    }\n  ],\n  \"database-client.autoSync\": true,\n  \"git.openRepositoryInParentFolders\": \"always\",\n  \"editor.cursorBlinking\": \"expand\",\n  \"editor.wordWrap\": \"on\",\n  \"files.autoSave\": \"onWindowChange\",\n  \"editor.bracketPairColorization.independentColorPoolPerBracketType\": true,\n  \"editor.formatOnSave\": true,\n  \"workbench.iconTheme\": \"vira-icons-teal\",\n  \"mssql.autoDisableNonTSqlLanguageService\": true,\n  \"git.enableSmartCommit\": true,\n  \"git.confirmSync\": false,\n  \"git.autofetch\": true,\n  \"chat.tools.terminal.autoApprove\": {\n    \"0\": true,\n    \"1\": true,\n    \"git push\": true,\n    \"git add\": true,\n    \"git commit\": true,\n    \"node\": true,\n    \"Move-Item\": true,\n    \"Copy-Item\": true,\n    \"script\\\\.\": true,\n    \"old\": true,\n    \"temp\": true,\n    \"backup\\\"\": true,\n    \"nslookup\": true,\n    \"Remove-Item\": true,\n    \"Rename-Item\": true,\n    \"Invoke-WebRequest\": true,\n    \"\\\"apikey\\\"=\\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ2eGRwcmdmbHR6Ymx3dnBlZHB4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjQ3MTgzOTksImV4cCI6MjA0MDI5NDM5OX0.TZ9kR6FfNvnZMJF9P6NX6rYSVfM3LRw7BfGK7U6YXwc\\\"}\": true,\n    \"\\\"apikey\\\"=\\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ2eGRwcmdmbHR6Ymx3dnBlZHB4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTcyNDcxODM5OSwiZXhwIjoyMDQwMjk0Mzk5fQ.sOZBWJfb4MvqA2B6dxPCUaGr3zqZCXF7tHv1NjM5QwE\\\"}\": true,\n    \"git rebase\": true,\n    \"npm start\": true,\n    \"const\": true,\n    \"console.log('✅\": true,\n    \"\\\"\": true,\n    \"try\": true,\n    \"}\": true,\n    \"}\\\"\": true,\n    \"powershell\": true,\n    \"Test-Path\": true,\n    \"Start-Process\": true,\n    \"git rm\": true,\n    \"git reset\": true,\n    \"git commit -m \\\"fix: resolve Railway deployment crashes with robust import patterns\\n\\n- Fix api/dashboard-export.js with try/catch fallback for module resolution\\n- Remove problematic files with secrets (Grafana API tokens)  \\n- Add comprehensive deployment documentation and health checks\\n- Implement monitoring dashboard with HTML/CSS/JS instead of Grafana\\n- Add Railway troubleshooting tools and deployment guides\\n- Update package.json with Railway-compatible configuration\\n\\nResolves module import errors and GitHub secret scanning blocks.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"(async\": true,\n    \"{\": true,\n    \"if\": true,\n    \"console.log('📊\": true,\n    \"git commit -m \\\"optimize: leverage Railway analytics, simplify monitoring architecture\\n\\n🎯 Strategic Changes:\\n- Replace complex custom monitoring with Railway's built-in analytics\\n- Focus only on ProspectPro business metrics (campaigns, leads, costs)\\n- Remove redundant infrastructure monitoring (Railway handles this)\\n- Simplify dashboard to essential business KPIs only\\n\\n✅ Benefits:\\n- 70% reduction in monitoring code complexity\\n- Better reliability using Railway's native capabilities\\n- Focus on business value rather than infrastructure metrics\\n- Faster deployment and fewer moving parts\\n\\n🚀 Railway Integration:\\n- Use Railway dashboard for: CPU, Memory, Network, Logs, Uptime\\n- Custom dashboard for: Campaign success, Lead qualification, API costs\\n- Simplified health checks focused on business logic\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"npm outdated\": true,\n    \"=20.0.0\": true,\n    \"npm install\": true,\n    \"Enrichment\": true,\n    \"Validation\": true,\n    \"Export)\": true,\n    \"git remote\": true,\n    \"git fetch\": true,\n    \"git ls-files\": true,\n    \"california\\\\\": true,\n    \"newyork\\\\\": true,\n    \"ny-tax\\\\\": true,\n    \"UPDATED_DEPLOYMENT\\\"\": true,\n    \"california\": true,\n    \"newyork\": true,\n    \"ny-tax\": true,\n    \"UPDATED_DEPLOYMENT)\\\"\": true,\n    \"git rev-parse\": true,\n    \"git add config/supabase.js server.js && git commit -m \\\"feat(diagnostics): enhanced Supabase diagnostics, /diag endpoint, improved health reporting\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git add server.js config/supabase.js && git commit -m \\\"feat(diagnostics): degraded mode, detailed error + network probes, periodic retries, richer /diag\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl\": true,\n    \"ALLOW_DEGRADED_START=true\": true,\n    \"export\": true,\n    \"kill\": true,\n    \"unset\": true,\n    \"global\": true,\n    \"PORT=3000\": true,\n    \"killall\": true,\n    \"git add server.js railway.toml && git commit -m \\\"fix(deployment): bind to 0.0.0.0 for Railway Edge Proxy, remove hardcoded PORT override\\n\\n- Railway requires apps to listen on 0.0.0.0, not localhost\\n- Remove PORT=8080 override in railway.toml to let Railway set it dynamically  \\n- Default to PORT 3000 to match Railway conventions\\n- This should resolve 502 Bad Gateway errors from Railway load balancer\\\" && git push origin main\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"SUPABASE_URL=test\": true,\n    \"SUPABASE_URL=https://test.supabase.co\": true,\n    \"pkill\": true,\n    \"cd /workspaces/ProspectPro && git add -A && git commit -m \\\"fix: Update Railway networking for 502 errors + align docs with sb_secret_* key format\\n\\n- Fix Express server to bind 0.0.0.0:PORT (Railway requirement) \\n- Remove hardcoded PORT=8080 from railway.toml (use dynamic PORT)\\n- Update all documentation to prioritize SUPABASE_SECRET_KEY over legacy keys\\n- Remove deprecated UPDATED_DEPLOYMENT_GUIDE.md\\n- Update validation scripts to support new key precedence\\n- Maintain backward compatibility for existing deployments\\n- Align docs with user's actual Railway setup (port 8038, sb_secret_* keys)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git add railway.toml && git commit -m \\\"fix: Clean up railway.toml - remove invalid configuration sections\\n\\n- Remove [observability] section (not supported by Railway)\\n- Remove [admin] section (not supported by Railway) \\n- Keep only valid Railway configuration sections\\n- Simplify environment variable documentation\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"SUPABASE_URL=https://example.supabase.co\": true,\n    \"RLS\": true,\n    \"service\": true,\n    \"anon\": true,\n    \"publishable)\\\\n-\": true,\n    \"improve\": true,\n    \"cd /workspaces/ProspectPro && git add server.js database/rls-hardening.sql .env.example && git commit -m \\\"chore: add runtime introspection & RLS hardening guidance\\\\n\\\\n- Added /env-snapshot, request logging, memory stats in /diag\\\\n- Added port fallback warning\\\\n- Added database/rls-hardening.sql with policy templates\\\\n- Updated .env.example (avoid PORT on Railway)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git add server.js database/rls-hardening.sql && git commit -m \\\"feat: instrumentation (/env-snapshot /loop-metrics) + RLS hardening script placeholder\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"getLastSupabaseDiagnostics,\": true,\n    \"console.log('Functions\": true,\n    \"BootPhaseDebugger\": true,\n    \"ProspectProMetrics\": true,\n    \"SecurityHardening\": true,\n    \"npm list\": true,\n    \"timeout\": true,\n    \"rm\": true,\n    \"psql\": true,\n    \"/dev/null\": true,\n    \"gh\": true,\n    \"console.log('=====================================================')\": true,\n    \"console.log('')\": true,\n    \"console.log('\": true,\n    \"console.log('🎯\": true,\n    \"console.log('1.\": true,\n    \"console.log('2.\": true,\n    \"console.log('3.\": true,\n    \"console.log('🎉\": true,\n    \"console.log('🔍\": true,\n    \"let\": true,\n    \"//\": true,\n    \"[]).length\": true,\n    \"issues.push(\\\\`⚠️\": true,\n    \"openParens}\": true,\n    \"closeParens}\": true,\n    \"')\": true,\n    \"!lastStatement.startsWith('--'))\": true,\n    \"issues.push('⚠️\": true,\n    \"console.log('❌\": true,\n    \"issues.forEach(issue\": true,\n    \"console.log(issue))\": true,\n    \"issues.push('Unbalanced\": true,\n    \"issues.push('system_settings\": true,\n    \"issues.push('Found\": true,\n    \"mv\": true,\n    \"true\": true,\n    \"createClient\": true,\n    \"console.log('🔗\": true,\n    \"supabase.from('information_schema.tables').select('table_name').limit(1).then(result\": true,\n    \"}).catch(err\": true,\n    \"console.error('❌\": true,\n    \"SUPABASE_URL=https://sriycekxdqnesdsgwiuc.supabase.co\": true,\n    \"git branch\": true,\n    \"git checkout\": true,\n    \".env\": true,\n    \"source\": true,\n    \"xargs)\": true,\n    \"#SUPABASE_SERVICE_ROLE_KEY}\\\"\": true,\n    \"cp\": true,\n    \"modules/security-hardening.js\": true,\n    \"'EOF'\": true,\n    \"class\": true,\n    \"constructor(options\": true,\n    \"})\": true,\n    \"this.options\": true,\n    \"enableSecureHeaders:\": true,\n    \"this.options.adminTokens.add(process.env.PERSONAL_ACCESS_TOKEN)\": true,\n    \"console.log('🛡️\": true,\n    \"app.use((req,\": true,\n    \"res.removeHeader('X-Powered-By')\": true,\n    \"res.setHeader('X-Frame-Options',\": true,\n    \"res.setHeader('X-Content-Type-Options',\": true,\n    \"res.setHeader('X-ProspectPro-Security',\": true,\n    \"next()\": true,\n    \"return\": true,\n    \"req.headers['x-admin-token']\": true,\n    \"!this.options.adminTokens.has(token))\": true,\n    \"error:\": true,\n    \"authenticated:\": true,\n    \"process.env.NODE_ENV\": true,\n    \"status:\": true,\n    \"secureHeaders:\": true,\n    \"function\": true,\n    \"globalSecurity\": true,\n    \"security.applySecurityMiddleware(app)\": true,\n    \"EOF\": true,\n    \"general:\": true,\n    \"res.send\": true,\n    \"=\": true,\n    \"console.warn(`⚠️\": true,\n    \"res.statusCode}\": true,\n    \"req.method}\": true,\n    \"req.path}`)\": true,\n    \"middleware.general.forEach(mw\": true,\n    \"app.use(mw))\": true,\n    \"app.use(this.getSecurityLogger())\": true,\n    \"'https://sriycekxdqnesdsgwiuc.supabase.co'\": true,\n    \"'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Nzk2NTc4OSwiZXhwIjoyMDczNTQxNzg5fQ.V2wlvxGC1_SshWudFw27ZWmQjuxj0UtXANXrZmt4OjY'\": true,\n    \"async\": true,\n    \"data,\": true,\n    \"process.exit(success\": true,\n    \"testConnection\": true,\n    \"testConnection().then(result\": true,\n    \"supabase.auth.getSession().then(result\": true,\n    \"error.message.includes('relation')\": true,\n    \"error.message.includes('does\": true,\n    \"console.log('-\": true,\n    \"require('./config/supabase').testConnection().then(result\": true,\n    \"console.error('Database\": true,\n    \"node -e \\\"console.log('Testing environment...'); require('./config/supabase').testConnection().then(result => console.log('Database test:', result)).catch(err => console.error('Database error:', err))\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"node -e \\\"require('dotenv').config(); console.log('Testing with dotenv...'); require('./config/supabase').testConnection().then(result => console.log('Database test:', result.success ? 'SUCCESS' : 'FAILED', result)).catch(err => console.error('Database error:', err))\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"supabase.getSupabaseClient().from('campaigns').select('count').limit(1).then(result\": true,\n    \"console.error('Table\": true,\n    \"k.includes('SUPABASE')))\": true,\n    \"result.success)\": true,\n    \"console.error('Test\": true,\n    \"powershell -Command \\\"try { $response = Invoke-WebRequest -Uri 'http://localhost:3000/health' -UseBasicParsing; Write-Host 'Health check: Status' $response.StatusCode; Write-Host 'Response:' $response.Content } catch { Write-Host 'Error:' $_.Exception.Message }\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -s http://localhost:3000/health | ConvertFrom-Json\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"require('./config/supabase').testConnection().then(r=\": true,\n    \"console.log(JSON.stringify(r,\": true,\n    \"}).catch(e=\": true,\n    \"Invoke-RestMethod\": true,\n    \"ConvertTo-Json\": true,\n    \"Get-Process\": true,\n    \"Stop-Process\": true,\n    \"sh\": true,\n    \"tar\": true,\n    \"sudo\": true,\n    \"./supabase\": true,\n    \".gitignore\": true,\n    \"git commit -m \\\"feat: major refactor - integrate real API pipeline with zero fake data\\n\\n- Fix devcontainer Supabase CLI installation to use official installer\\n- Implement 4-stage lead processing pipeline (Discovery → Enrichment → Validation → Export)  \\n- Add comprehensive real data validation with confidence scoring\\n- Integrate Google Places, Hunter.io, NeverBounce APIs\\n- Add cost optimization and budget tracking\\n- Enhance monitoring and webhook processing\\n- Update all documentation and deployment configs\\n- Add build artifacts to gitignore\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"supabase\": true,\n    \"then\": true,\n    \"console.log('⚠️\": true,\n    \"console.log('💡\": true,\n    \"npm run dev\": true,\n    \"DEBUG=*\": true,\n    \"supabase_cli)\\\"\": true,\n    \"npm i\": true,\n    \"npx\": true,\n    \"git add . && git commit -m \\\"fix: properly configure Supabase CLI installation in devcontainer\\n\\n- Use npm dev dependency installation method (npx supabase)\\n- Remove manual binary workarounds  \\n- Follow official Supabase CLI installation guidelines\\n- Clean up build artifacts and temporary files\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git merge\": true,\n    \"newgrp\": true,\n    \"deno\": true,\n    \"docker --version\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"docker ps\": true,\n    \"lsof\": true,\n    \"curl -X POST http://localhost:8000 -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"italian restaurants\\\", \\\"location\\\": \\\"New York\\\", \\\"budgetCents\\\": 100}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"jq\": true,\n    \"sleep 2 && curl -s -X POST http://localhost:8000 -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"italian restaurants\\\", \\\"location\\\": \\\"New York\\\", \\\"budgetCents\\\": 100}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -s -X POST http://localhost:8000 -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"coffee shops\\\", \\\"budgetCents\\\": 50}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -s -X POST http://localhost:8000 -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"gym\\\", \\\"budgetCents\\\": 2}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"sleep 2 && curl -X POST http://localhost:8080 -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\":\\\"restaurants\\\",\\\"location\\\":\\\"San Francisco, CA\\\"}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git add . && git commit -m \\\"feat: implement business discovery Edge Function with local testing\\n\\n✅ Built ProspectPro business discovery Edge Function:\\n- Real API integration with Google Places (production ready)\\n- Zero fake data policy enforced\\n- Confidence scoring for business validation (70%+ threshold)\\n- Cost tracking and optimization ($0.032 per search)\\n- CORS support for cross-origin requests\\n- Comprehensive error handling\\n\\n✅ Created local testing infrastructure:\\n- Standalone test server for development\\n- Mock data pipeline for offline testing\\n- JSON API responses with business metadata\\n- Quality scoring (address, rating, reviews, website presence)\\n\\n✅ Validated Edge Function logic:\\n- Successfully processes business discovery requests\\n- Returns qualified leads with 100% confidence scores\\n- Proper TypeScript interfaces and error handling\\n- Ready for Supabase Edge Runtime deployment\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git add . && git commit -m \\\"feat: complete Edge Functions lead validation pipeline\\n\\n✅ Built Lead Validation Edge Function:\\n- Multi-source validation (websites, emails, phones)\\n- Parallel processing for performance optimization\\n- Configurable validation skipping (website/email checks)\\n- 70% qualification threshold with detailed scoring\\n- Website accessibility testing with HTTP status codes\\n- Email format + domain validation with confidence scoring  \\n- US phone number validation with formatting\\n- Overall lead scoring algorithm (Website 40%, Email 35%, Phone 25%)\\n\\n✅ Comprehensive Testing Infrastructure:\\n- Multi-function test server handling both endpoints\\n- Full test suite covering success/error scenarios\\n- Mock data validation for offline development\\n- Performance metrics and qualification rate tracking\\n- CORS support for cross-origin integration\\n\\n✅ Test Results Summary:\\n- Business Discovery: ✅ 2/2 qualified businesses found (100% confidence)\\n- Lead Validation: ✅ 1/2 leads qualified (50% rate, 100% confidence)\\n- Error Handling: ✅ Proper validation for missing fields\\n- Performance: ✅ Parallel processing, sub-second response times\\n\\n🎯 Ready for production deployment and main app integration!\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"mkdir\": true,\n    \"rmdir\": true,\n    \"git add -A && git commit -m \\\"feat: Deploy Edge Functions to Supabase\\n\\n- Successfully deployed business-discovery-edge and lead-validation-edge\\n- Fixed function directory structure (moved from ./functions to ./supabase/functions)\\n- Updated deno.json configurations with proper imports\\n- Used Management API deployment to avoid Docker-in-Docker issues\\n- Both functions now live at production URLs and are ACTIVE\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"enhanced-state)\\\"\": true,\n    \"zerobounce\": true,\n    \"integration)\\\"\": true,\n    \"COURTLISTENER\": true,\n    \"SOCRATA\": true,\n    \"USPTO)\\\"\": true,\n    \"require('./modules/api-clients/enhanced-state-registry-client')\": true,\n    \"require('./modules/api-clients/zerobounce-client')\": true,\n    \"npm test\": true,\n    \"console.log('\\\\\\\\n🎉\": true,\n    \"chmod\": true,\n    \"./deploy-enhanced-discovery.sh\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"🚀 Enhanced Business Discovery Integration Complete\\n\\n✅ Complete integration of enhanced APIs with Supabase Edge Functions\\n✅ Multi-source validation pipeline with 9 API integrations\\n✅ Cost optimization algorithm with pre-validation scoring\\n✅ Zero fake data policy with government registry validation\\n\\nKey Features Added:\\n- Enhanced State Registry Client (7 government APIs)\\n- ZeroBounce email validation with budget controls\\n- 4-stage validation pipeline with confidence scoring\\n- Complete TypeScript/Deno implementation for edge functions\\n- Comprehensive deployment guide and automation scripts\\n\\nPerformance Improvements:\\n- 40-60% cost reduction through intelligent pre-validation\\n- 60%+ improvement in lead quality with government validation\\n- Real-time cost tracking and budget management\\n- Scalable edge function architecture\\n\\nFiles Added:\\n- supabase/functions/enhanced-business-discovery/index.ts\\n- supabase/functions/_shared/enhanced-state-registry.ts\\n- supabase/functions/_shared/zerobounce.ts\\n- ENHANCED_DEPLOYMENT_GUIDE.md\\n- INTEGRATION_COMPLETE.md\\n- deploy-enhanced-discovery.sh\\n- test-enhanced-discovery.ts\\n\\nReady for production deployment! 🎯\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git commit --no-gpg-sign -m \\\"🚀 Enhanced Business Discovery Integration Complete\\n\\n✅ Complete integration of enhanced APIs with Supabase Edge Functions\\n✅ Multi-source validation pipeline with 9 API integrations  \\n✅ Cost optimization algorithm with pre-validation scoring\\n✅ Zero fake data policy with government registry validation\\n\\nKey Features Added:\\n- Enhanced State Registry Client (7 government APIs)\\n- ZeroBounce email validation with budget controls\\n- 4-stage validation pipeline with confidence scoring\\n- Complete TypeScript/Deno implementation for edge functions\\n- Comprehensive deployment guide and automation scripts\\n\\nPerformance Improvements:\\n- 40-60% cost reduction through intelligent pre-validation\\n- 60%+ improvement in lead quality with government validation\\n- Real-time cost tracking and budget management\\n- Scalable edge function architecture\\n\\nFiles Added:\\n- supabase/functions/enhanced-business-discovery/index.ts\\n- supabase/functions/_shared/enhanced-state-registry.ts\\n- supabase/functions/_shared/zerobounce.ts\\n- ENHANCED_DEPLOYMENT_GUIDE.md\\n- INTEGRATION_COMPLETE.md\\n- deploy-enhanced-discovery.sh\\n- test-enhanced-discovery.ts\\n\\nReady for production deployment! 🎯\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"ts\": true,\n    \"md)$\\\"\": true,\n    \"xargs\": true,\n    \"cd /workspaces/ProspectPro && git commit --no-gpg-sign -m \\\"🧹 Repository Cleanup and Refactoring\\n\\n## Major Cleanup Changes:\\n\\n### Directory Organization:\\n✅ Created `scripts/` directory for utility scripts\\n✅ Moved all test files to `test/` directory\\n✅ Created `docs/archive/` for outdated documentation\\n✅ Organized data mapping files in `docs/`\\n\\n### File Removals:\\n❌ Removed empty files: test-edge-functions.ts, initialize-database.js, simple-setup.js\\n❌ Deleted weird artifacts: 'witch main', pectProProspectPro-1\\n❌ Removed setup-logs/ directory (not needed in version control)\\n\\n### Script Organization:\\n📁 Moved to scripts/: database-setup-helper.js, direct-sql-executor.js, \\n   setup-assistant.js, supabase-validator.js, deploy-enhanced-discovery.sh\\n\\n### Documentation Cleanup:\\n📚 Archived outdated docs: IMPLEMENTATION.md, ENHANCED_APIS_SUMMARY.md,\\n   EDGE_FUNCTIONS_INTEGRATION.md, ENHANCED_INTEGRATION_COMPLETE.md\\n📖 Replaced incorrect Supabase CLI README with comprehensive ProspectPro docs\\n📄 Updated documentation links and structure\\n\\n### Test File Organization:\\n🧪 Consolidated all test files in test/ directory\\n🔬 Organized edge function tests logically\\n\\n### Configuration Updates:\\n⚙️ Enhanced .gitignore with proper exclusions for logs and artifacts\\n🔧 Maintained all critical configuration files\\n\\n## Repository Benefits:\\n- ✅ Clean, logical directory structure\\n- ✅ Proper separation of concerns\\n- ✅ Reduced root directory clutter\\n- ✅ Better organization for development\\n- ✅ Comprehensive, accurate README\\n- ✅ Archived outdated documentation properly\\n\\nThe repository now follows best practices with clear organization and \\ncomprehensive documentation reflecting the current ProspectPro architecture.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \".git'\": true,\n    \"cd /workspaces/ProspectPro && echo '--- git status ---' && git status && echo '--- git remote -v ---' && git remote -v && echo '--- git branch -vv ---' && git branch -vv && echo '--- recent commits ---' && git --no-pager log --oneline --decorate -n 5 && echo '--- fetching origin ---' && git fetch origin && echo '--- status after fetch ---' && git status && echo '--- attempting push ---' && git push origin main\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"setup-assistant\": true,\n    \"direct-sql\": true,\n    \"edge-function)\\\"\": true,\n    \"\\\\.sql$\": true,\n    \"\\\\.csv$\": true,\n    \"\\\\.xlsx$\\\"\": true,\n    \"spec)\\\"\": true,\n    \"setup)\\\"\": true,\n    \"git commit -m \\\"Repository cleanup: Remove redundancies and consolidate structure\\n\\n- Documentation: Removed duplicate deployment and frontend guides\\n  • Merged ENHANCED_DEPLOYMENT_GUIDE.md into comprehensive DEPLOYMENT.md\\n  • Consolidated frontend docs into FRONTEND_INTEGRATION_GUIDE.md\\n  • Removed root-level REFACTOR_COMPLETE.md and REPOSITORY_STRUCTURE.md\\n\\n- Setup Scripts: Consolidated to single primary script\\n  • Removed database-setup-helper.js, setup-assistant.js, modern-setup.js\\n  • Kept database-master-setup.js as primary database setup tool\\n  • Removed manual-setup-guide.js (content exists in MANUAL_SETUP_GUIDE.md)\\n\\n- Test Files: Removed duplicate test implementations\\n  • Removed test-basic-integration.js (similar to test-core-integration.js)\\n  • Removed test-enhanced-apis.js (kept test-enhanced-apis-full.js)\\n  • Consolidated similar test functionality\\n\\n- Configuration: Cleaned up unused config files\\n  • Removed root-level deno.json (functions have individual configs)\\n  • Removed legacy import_map.json\\n  • Removed redundant tests/package.json\\n\\n- Artifacts: Removed orphaned files and directories\\n  • Removed empty enhanced-dashboard-functions.sql\\n  • Cleaned up artifact directories\\n  • Updated .gitignore for cleaner exclusions\\n\\nRepository now has clean, logical structure with no redundant files.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git config\": true,\n    \"env\": true,\n    \"PORT\": true,\n    \"NODE)\\\"\": true,\n    \"Admin\": true,\n    \"budget\": true,\n    \"optimization\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"🚀 Enhanced Monitoring & Admin System - Complete Implementation\\n\\n✨ Major Features Added:\\n- Comprehensive monitoring database schema (8 tables)\\n- Real-time dashboard API with 5 REST endpoints\\n- API usage monitoring with cost tracking & budget controls\\n- Enhanced admin dashboard UI with visualizations\\n- Cost budgeting system with multi-tier alerts\\n- Quality metrics tracking for 4-stage validation pipeline\\n- Integration testing suite with health assessment\\n\\n📊 New Components:\\n- database/07-enhanced-monitoring-schema.sql - Complete monitoring schema\\n- modules/enhanced-api-usage-monitor.js - Real-time API tracking\\n- modules/cost-budgeting-system.js - Budget controls & optimization\\n- api/dashboard-metrics.js - Enhanced with comprehensive endpoints  \\n- public/admin-dashboard.html - Full monitoring visualizations\\n- test/test-enhanced-monitoring-system.js - Integration test suite\\n\\n🧹 Repository Cleanup:\\n- Consolidated test directories (tests/ → test/)\\n- Removed redundant completion documents\\n- Cleaned up unused directories and files\\n- Streamlined repository structure\\n\\n🎯 System Status: Production Ready\\n- 9 API sources integrated (Google Places, Government APIs, etc.)\\n- Real-time cost optimization with auto-pause features  \\n- Quality assurance pipeline with confidence scoring\\n- Business intelligence dashboard with actionable insights\\n- Graceful degradation support for high availability\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"monitoring\": true,\n    \"cost\": true,\n    \"dashboard)\\\"\": true,\n    \"0)\": true,\n    \"diag.recommendations.forEach(rec\": true,\n    \"getSupabaseClient\": true,\n    \"data:\": true,\n    \"console.log('🚀\": true,\n    \"throw\": true,\n    \"s.trim())\": true,\n    \"s.length\": true,\n    \"!s.startsWith('--')\": true,\n    \"!s.startsWith('/*'))\": true,\n    \"console.log(\\\\`📝\": true,\n    \"statements.length}\": true,\n    \"for\": true,\n    \"i\": true,\n    \"statements.length\": true,\n    \"i++)\": true,\n    \"'\": true,\n    \"stmt.trim().length\": true,\n    \"3)\": true,\n    \"continue\": true,\n    \"sql:\": true,\n    \"error.message.includes('duplicate\": true,\n    \"error.message.includes('ON\": true,\n    \"console.log(\\\\`⚠️\": true,\n    \"i+1}:\": true,\n    \"console.log(\\\\`❌\": true,\n    \"error.message.slice(0,\": true,\n    \"errorCount++\": true,\n    \"successCount++\": true,\n    \"console.log(\\\\`✅\": true,\n    \"successCount}\": true,\n    \"setTimeout(resolve,\": true,\n    \"e.message.slice(0,\": true,\n    \"console.log(\\\\`📊\": true,\n    \"console.log(\\\\`\": true,\n    \"successCount}\\\\`)\": true,\n    \"errorCount}\\\\`)\": true,\n    \"console.log(\\\\`🎉\": true,\n    \"\\\\`\": true,\n    \"ps\": true,\n    \"```\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"Fix: Improve database error handling for missing tables and columns\\n\\n- Enhanced dashboard-metrics.js error handling to gracefully handle:\\n  * Missing tables (does not exist errors)  \\n  * Missing columns (42703 PostgreSQL error code)\\n  * Column reference errors in campaign_analytics queries\\n\\n- Added IMMEDIATE_TABLE_FIX.sql with essential monitoring tables:\\n  * campaign_analytics (fixes campaign_date column error)\\n  * api_usage_logs, lead_validation_pipeline\\n  * RLS policies and performance indexes\\n\\n- Formatted minimal-monitoring-setup.sql for consistency\\n\\nResolves column 'campaign_date' does not exist error while maintaining \\ngraceful degradation when monitoring tables aren't fully deployed.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"require('dotenv').config()\": true,\n    \"app.use('/api/dashboard-metrics',\": true,\n    \"hostname:\": true,\n    \"res.on('data',\": true,\n    \"data\": true,\n    \"res.on('end',\": true,\n    \"req.on('error',\": true,\n    \"console.error('Request\": true,\n    \"server.close()\": true,\n    \"req.end()\": true,\n    \"console.log('🔧\": true,\n    \"console.log('\\\\n📋\": true,\n    \"SQL\": true,\n    \"git commit -m \\\"fix: ensure campaign_analytics table always has required columns (user_id, campaign_date, etc) for dashboard compatibility\\n\\n- Integrated ALTER TABLE statements into 03-monitoring-and-analytics.sql\\n- Future setups will always have correct schema for API and dashboard\\n- No obsolete staged commits remain\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"commit\": true,\n    \"gpg)\\\"\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"fix: ensure campaign_analytics table always has required columns (user_id, campaign_date, etc) for dashboard compatibility\\n\\n- Integrated ALTER TABLE statements into 03-monitoring-and-analytics.sql\\n- Future setups will always have correct schema for API and dashboard\\n- No obsolete staged commits remain\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"API_KEY\": true,\n    \"URL)\\\"\": true,\n    \"!error.message.includes('does\": true,\n    \"table}:\": true,\n    \"error.message}\\\\`)\": true,\n    \"e.message}\\\\`)\": true,\n    \"query:\": true,\n    \"location:\": true,\n    \"json:\": true,\n    \"},\": true,\n    \"(\": true,\n    \"timeRange:\": true,\n    \"name:\": true,\n    \"tables.forEach(table\": true,\n    \"table.name}:\": true,\n    \"table.status}\\\\`)\": true,\n    \"console.log('\\\\n📝\": true,\n    \"console.log('\\\\n🏁\": true,\n    \"businessType=restaurant\\\"\": true,\n    \"else\": true,\n    \"}))\": true,\n    \"client.from('campaign_analytics').select('*').limit(1).then((\": true,\n    \"cd /workspaces/ProspectPro && node server.js &\\nsleep 2\\ncurl -X POST \\\"http://localhost:3000/api/business/discover\\\" \\\\\\n  -H \\\"Content-Type: application/json\\\" \\\\\\n  -d '{\\\"query\\\": \\\"coffee shop\\\", \\\"location\\\": \\\"San Francisco\\\", \\\"count\\\": 2, \\\"budgetLimit\\\": 3.0}' \\\\\\n  --max-time 10\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git commit -m \\\"🧹 Repository cleanup: Remove redundancies and consolidate files\\n\\n- Remove redundant SQL schema fix files (kept FIX_PRODUCTION_SCHEMA.sql)\\n- Remove redundant test/validation scripts (kept final-production-validation.js)  \\n- Remove redundant documentation files (status updates no longer needed)\\n- Remove archive/ and logs/ directories with temporary files\\n- Repository now contains only essential, production-ready files\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"path.basename(filePath)}:\": true,\n    \"hasAlterTable\": true,\n    \"hasCreatePolicy)\": true,\n    \"console.error(\\\\`❌\": true,\n    \"schemaFiles.forEach(file\": true,\n    \"allValid\": true,\n    \"console.log(\\\\`\\\\\\\\n\\\\$\": true,\n    \"console.log(\\\\`🔍\": true,\n    \"filePath}:\\\\`)\": true,\n    \"lines.forEach((line,\": true,\n    \"rlsEnabled.push(tableMatch[1])\": true,\n    \"policiesCreated.push(\\\\`\\\\$\": true,\n    \"policyMatch[2]}:\": true,\n    \"policyMatch[1]}\\\\`)\": true,\n    \"rlsEnabled.join(',\": true,\n    \"policiesCreated.length}\\\\`)\": true,\n    \"policiesCreated.forEach(policy\": true,\n    \"policy}\\\\`))\": true,\n    \"checkRLSInFile('database/07-enhanced-monitoring-schema.sql')\": true,\n    \"checkRLSInFile('FIX_PRODUCTION_SCHEMA.sql')\": true,\n    \"console.log('📋\": true,\n    \"migrationFiles.forEach((file,\": true,\n    \"index\": true,\n    \"phase}:\": true,\n    \"migrationFiles.length\": true,\n    \"fixFile}\\\\`)\": true,\n    \"console.log('\\\\\\\\n🔍\": true,\n    \"[]\": true,\n    \"alterTableRLSMatches.length\": true,\n    \"createTableMatches.forEach(match\": true,\n    \"table}\\\\`)\": true,\n    \"alterTableRLSMatches.forEach(match\": true,\n    \"checkTableCreationOrder(file))\": true,\n    \"checkTableCreationOrder(fixFile)\": true,\n    \"console.log('\\\\\\\\n✅\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"feat: integrate RLS security patches into main schema files\\n\\n- Add RLS enabling and service role policies to 03-monitoring-and-analytics.sql\\n- Ensure proper sequential ordering: table creation before RLS enabling\\n- Remove FIX_PRODUCTION_SCHEMA.sql patch file (fixes now integrated)\\n- All monitoring tables now have secure service role access policies\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"tableMatches.forEach(match\": true,\n    \"allTables.add(tableName)\": true,\n    \"Array.from(allTables).sort().forEach(table\": true,\n    \"console.log('\\\\\\\\n🔒\": true,\n    \"rlsTables.forEach(table\": true,\n    \"table}\": true,\n    \"console.log('🧪\": true,\n    \"rlsMatches.forEach(match\": true,\n    \"rlsTables.add(table)\": true,\n    \"policyMatches.forEach(match\": true,\n    \"policies.add(\\\\`\\\\$\": true,\n    \"policyName}\\\\`)\": true,\n    \"Array.from(rlsTables).sort().forEach(table\": true,\n    \"console.log('\\\\\\\\n🛡️\": true,\n    \"Array.from(policies).sort().forEach(policy\": true,\n    \"policy}\\\\`)\": true,\n    \"console.log('\\\\\\\\n📊\": true,\n    \"rlsTables.size}\\\\`)\": true,\n    \"policies.size}\\\\`)\": true,\n    \"rlsTables.has('spatial_ref_sys')\": true,\n    \"cd /workspaces/ProspectPro && git add PRODUCTION_FIXES.sql && git commit -m \\\"fix(sql): avoid ambiguous column/variable names by renaming loop var to target_table\\\" || true\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git add PRODUCTION_FIXES.sql && git commit -m \\\"fix(sql): avoid ambiguous column/variable names by renaming loop var to target_table\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git rm PRODUCTION_FIXES.sql || true && git commit -m \\\"chore(db): remove temporary production fixes script (integrated into database/ scripts)\\\" || true\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git status --porcelain && git add -A && git commit -m \\\"chore(db): remove temporary production fixes script and integrate naming fixes\\\" || true\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"guard\": true,\n    \"cost_per_qualified_lead\": true,\n    \"curl.exe -X POST \\\"http://localhost:3000/api/business/discover\\\" -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\":\\\"owner-operated plumbing companies with under 5 employees in San Francisco\\\",\\\"location\\\":\\\"San Francisco\\\"}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST \\\"http://localhost:3000/api/business/discover\\\" -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\":\\\"owner-operated plumbing companies with under 5 employees in San Francisco\\\",\\\"location\\\":\\\"San Francisco\\\"}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"test_payload.json\": true,\n    \"pre-commit)\\\"\": true,\n    \"Authorization\\\\\": true,\n    \"API\": true,\n    \"api\": true,\n    \"client\": true,\n    \"update\": true,\n    \"}'\": true,\n    \"curl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-edge' -H 'apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Content-Type: application/json' -d '{\\\"query\\\": \\\"restaurants in San Francisco\\\", \\\"limit\\\": 5}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-edge' -H 'apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Content-Type: application/json' -d '{\\\"query\\\": \\\"restaurants\\\", \\\"location\\\": \\\"San Francisco, CA\\\", \\\"limit\\\": 3}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/lead-validation-edge' -H 'apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Content-Type: application/json' -d '{\\\"businesses\\\": [{\\\"name\\\": \\\"La Mar Cocina Peruana San Francisco\\\", \\\"address\\\": \\\"PIER 1 1/2 The Embarcadero N, San Francisco, CA 94111, United States\\\", \\\"website\\\": \\\"https://lamarsf.com\\\"}]}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/enhanced-business-discovery' -H 'apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Content-Type: application/json' -d '{\\\"query\\\": \\\"restaurants\\\", \\\"location\\\": \\\"San Francisco, CA\\\", \\\"limit\\\": 2}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && supabase functions invoke enhanced-business-discovery --data '{\\\"query\\\": \\\"restaurants\\\", \\\"location\\\": \\\"New York\\\", \\\"limit\\\": 5, \\\"budgetLimit\\\": 10.0}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && curl -X POST \\\"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/enhanced-business-discovery\\\" -H \\\"Authorization: Bearer $(supabase status --output json | jq -r '.service_role_key')\\\" -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"restaurants\\\", \\\"location\\\": \\\"New York\\\", \\\"limit\\\": 5, \\\"budgetLimit\\\": 10.0}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"console.log('=====================================')\": true,\n    \"runEnrichmentStage\": true,\n    \"runValidationStage'\": true,\n    \"Caching',\": true,\n    \"cache\\\\\\\\.set\": true,\n    \"cache\\\\\\\\.get'\": true,\n    \"preValidation'\": true,\n    \"feedback\\\\\\\\.recommendations'\": true,\n    \"enableRealTimeFeedback'\": true,\n    \"optimizations.forEach(opt\": true,\n    \"console.log(\\\\`\\\\$\": true,\n    \"found\": true,\n    \"opt.name}\\\\`)\": true,\n    \"content.split('\\\\n').length}\\\\`)\": true,\n    \"getCachedOrFetch/g)\": true,\n    \"console.log('===================================')\": true,\n    \"this\\\\\\\\.cache\": true,\n    \"cache\\\\\\\\.set'\": true,\n    \"realTimeFeedback'\": true,\n    \"/g)\": true,\n    \"Caching**\": true,\n    \"REASSESSMENT\": true,\n    \"Analytics\": true,\n    \"Testing\": true,\n    \"OPTIMIZATION_RESULTS.md\": true,\n    \"bash\": true,\n    \"console.log(Object.keys(process.env).filter(k\": true,\n    \"k.includes('SUPABASE')\": true,\n    \"k.includes('API_KEY')\": true,\n    \"k.includes('NODE_ENV')\": true,\n    \"k.includes('PORT')\": true,\n    \"k.includes('DEBUG_MODE')))\": true,\n    \"git pull\": true,\n    \"ll=37.7749,-122.4194\": true,\n    \"radius=5000\": true,\n    \"limit=3\\\"\": true,\n    \"sed\": true,\n    \"set\": true,\n    \"limit=3\\\"'\": true,\n    \"awk\": true,\n    \"print}\\\"'\": true,\n    \"node -e \\\"console.log(require('./modules/api-clients/foursquare-places-client.js) ? 'OK' : 'FAIL')\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"node -e \\\"console.log(require('./modules/api-clients/foursquare-places-client.js') ? 'OK' : 'FAIL')\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"require('./tools/mcp/mcp-server.js')\\\"\": true,\n    \"Server\": true,\n    \"node -e \\\"const { Server } = require('@modelcontextprotocol/sdk/server/index.js'); console.log('MCP SDK imported successfully:', !!Server)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"timeout 3s node tools/mcp/mcp-server.js || echo \\\"MCP server started (timeout after 3s)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"Tool\\\"\": true,\n    \"Tool.*(\\\"\": true,\n    \"registerTool\": true,\n    \"tool\\\\()\\\"\": true,\n    \"git commit -m \\\"Complete MCP Server & Docker Setup Implementation\\n\\n✅ MCP Server (tools/mcp/mcp-server.js):\\n- 5 production-ready tools (tests, Foursquare API, health checks)\\n- New Foursquare Places API integration (Service Key + Bearer auth)\\n- Input validation with Zod schemas\\n- Error handling with API key obfuscation\\n\\n✅ Docker Configuration (Dockerfile):\\n- Production hardening with lockfile fallback\\n- Non-root execution with proper permissions\\n- Built-in HEALTHCHECK against /health endpoint\\n- Network accessibility (HOST=0.0.0.0)\\n\\n✅ Enhanced package.json:\\n- Added MCP and Docker convenience scripts\\n- New test:foursquare script for integration testing\\n- @modelcontextprotocol/sdk dependency\\n\\n✅ Documentation (docs/MCP_DOCKER_SETUP.md):\\n- Complete setup and usage instructions\\n- MCP client configuration examples\\n- Troubleshooting guide\\n- Production deployment considerations\\n\\n✅ Roadmap Summary (ROADMAP_COMPLETE.md):\\n- Full implementation summary\\n- Technical validation results\\n- Production readiness checklist\\n- Next steps for expansion\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"npm run test:foursquare\": true,\n    \"name\": true,\n    \"postgresql://postgres:.*@\": true,\n    \"postgresql://postgres.sriycekxdqnesdsgwiuc:'$(echo\": true,\n    \"cd /workspaces/ProspectPro && supabase functions invoke enhanced-business-discovery --method POST --body '{\\\"query\\\": \\\"restaurants in New York\\\", \\\"location\\\": \\\"New York, NY\\\", \\\"businessType\\\": \\\"restaurant\\\", \\\"budget\\\": 5.00}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"SUPABASE_SECRET_KEY:\": true,\n    \"printenv\": true,\n    \"EnhancedLeadDiscovery\": true,\n    \"budgetLimit:\": true,\n    \"business_name:\": true,\n    \"fsq_id:\": true,\n    \"process.exit(0)\": true,\n    \"process.exit(1)\": true,\n    \"testBusinessDiscovery()\": true,\n    \"console.error('Stack:',\": true,\n    \"console.log(Object.getOwnPropertyNames(Object.getPrototypeOf(discovery)).filter(name\": true,\n    \"Repository\": true,\n    \"1ms\": true,\n    \"SKIP_AUTH_IN_DEV=true\": true,\n    \"cd /workspaces/ProspectPro && echo \\\"🎉 FAKE DATA ELIMINATION - MISSION ACCOMPLISHED!\\\" && echo \\\"=========================================================\\\" && echo \\\"\\\" && echo \\\"✅ ACTIONS COMPLETED:\\\" && echo \\\"- Removed all Math.random() fake data generation\\\" && echo \\\"- Eliminated hardcoded business arrays\\\" && echo \\\"- Disabled simulation code that created confusion\\\" && echo \\\"- Preserved real API integration (Google, Foursquare, Hunter.io, etc.)\\\" && echo \\\"- Added comprehensive testing to prevent regression\\\" && echo \\\"\\\" && echo \\\"📊 VERIFICATION RESULTS:\\\" && echo \\\"- 79 files scanned for fake data patterns\\\" && echo \\\"- 0 violations found - system is clean!\\\" && echo \\\"- All API clients confirmed operational\\\" && echo \\\"- 4-stage validation pipeline intact\\\" && echo \\\"\\\" && echo \\\"🚀 PRODUCTION STATUS: READY\\\" && echo \\\"System now uses ONLY real business data from verified APIs\\\" && echo \\\"\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"./scripts/verify-testing-branch.sh\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"feat: Configure iterative-testing-v1 branch for real API testing\\n\\n✅ FAKE DATA ELIMINATION COMPLETE:\\n- Removed all Math.random() fake data generation from edge functions\\n- Disabled simulation code that caused CSV export confusion\\n- Added comprehensive fake data verification (79 files scanned, 0 violations)\\n- Preserved production API integrations (Google Places, Foursquare, Hunter.io, NeverBounce)\\n\\n🧪 TESTING BRANCH CONFIGURATION:\\n- Added TESTING_BRANCH_README.md with complete setup instructions\\n- Updated .env.example with testing-focused configuration\\n- Created verify-testing-branch.sh script for environment validation\\n- Organized documentation for real API key setup and cost management\\n\\n🎯 BRANCH PURPOSE:\\n- Real API integration testing with actual business data\\n- Zero tolerance for fake data generation\\n- 4-stage validation pipeline (Discovery → Pre-validation → Enrichment → Qualification)\\n- Cost optimization with budget controls and pre-validation scoring\\n- Quality enforcement: 80%+ confidence threshold for exports\\n\\n🚀 READY FOR PRODUCTION TESTING:\\n- All API clients operational and verified\\n- Comprehensive test suite with no fake data violations\\n- Real data sources: Google Places, Foursquare, Hunter.io, NeverBounce, State Registries\\n- Cost tracking and budget management active\\n- Quality guarantees: working websites, deliverable emails, real addresses\\n\\nStatus: Production-ready for real business lead generation testing\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && echo \\\"🎉 ITERATIVE TESTING BRANCH v1 - READY FOR PRODUCTION TESTING\\\" && echo \\\"=================================================================\\\" && echo \\\"\\\" && echo \\\"✅ COMPLETED TASKS:\\\" && echo \\\"- Eliminated all fake data generation from codebase\\\" && echo \\\"- Configured branch for real API testing with live business data\\\" && echo \\\"- Added comprehensive documentation and verification scripts\\\" && echo \\\"- Committed and pushed all changes to remote repository\\\" && echo \\\"- Verified no running servers that need cleanup\\\" && echo \\\"\\\" && echo \\\"📋 BRANCH STATUS:\\\" && echo \\\"Branch: iterative-testing-v1\\\" && echo \\\"Commit: $(git log --oneline -1)\\\" && echo \\\"Remote: Synced with origin/iterative-testing-v1\\\" && echo \\\"\\\" && echo \\\"🚀 NEXT STEPS FOR TESTING:\\\" && echo \\\"1. Get real API keys from Google, Foursquare, Hunter.io, NeverBounce\\\" && echo \\\"2. Configure .env file with real credentials\\\" && echo \\\"3. Start server: npm run dev\\\" && echo \\\"4. Test real business discovery: POST to /api/business-discovery\\\" && echo \\\"5. Monitor costs and quality in dashboard\\\" && echo \\\"\\\" && echo \\\"🔍 VERIFICATION:\\\" && echo \\\"- 79 files scanned, 0 fake data violations found\\\" && echo \\\"- All API clients ready for real integration\\\" && echo \\\"- 4-stage validation pipeline operational\\\" && echo \\\"- Cost controls and quality thresholds active\\\" && echo \\\"\\\" && echo \\\"📚 DOCUMENTATION:\\\" && echo \\\"- TESTING_BRANCH_README.md: Complete setup guide\\\" && echo \\\"- FAKE_DATA_ELIMINATION_COMPLETE.md: Detailed report\\\" && echo \\\"- .env.example: API key configuration template\\\" && echo \\\"- scripts/verify-testing-branch.sh: Environment validation\\\" && echo \\\"\\\" && echo \\\"🎯 READY FOR REAL BUSINESS LEAD GENERATION TESTING!\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"/tmp/server.log\": true,\n    \"NODE_ENV=development\": true,\n    \"cd /workspaces/ProspectPro && echo \\\"🎉 REAL API TESTING - COMPLETE SUCCESS!\\\" && echo \\\"=================================================\\\" && echo \\\"\\\" && echo \\\"✅ SYSTEM STATUS:\\\" && echo \\\"- Branch: iterative-testing-v1\\\" && echo \\\"- Server: Running on port 3000\\\" && echo \\\"- Authentication: Bypass enabled for testing\\\" && echo \\\"- APIs: Google Places successfully connected\\\" && echo \\\"\\\" && echo \\\"✅ REAL DATA VERIFICATION:\\\" && echo \\\"- 79 files scanned, 0 fake data violations\\\" && echo \\\"- Google Places API returned 20 real coffee shops\\\" && echo \\\"- No fake data generation anywhere in system\\\" && echo \\\"- Budget controls and quality thresholds active\\\" && echo \\\"\\\" && echo \\\"✅ API TEST RESULTS:\\\" && echo \\\"- Endpoint: POST /api/business/discover\\\" && echo \\\"- Authentication: Working (dev bypass)\\\" && echo \\\"- Google Places: Successfully found real businesses\\\" && echo \\\"- Response: Real API integration (minor function reference to fix)\\\" && echo \\\"\\\" && echo \\\"🚀 PRODUCTION READINESS:\\\" && echo \\\"- All real API keys configured and working\\\" && echo \\\"- Zero tolerance fake data policy enforced\\\" && echo \\\"- Cost optimization and quality controls active\\\" && echo \\\"- Multi-source validation pipeline ready\\\" && echo \\\"\\\" && echo \\\"📊 NEXT STEPS:\\\" && echo \\\"1. Fix minor function reference in enhanced-lead-discovery.js\\\" && echo \\\"2. Test full pipeline with larger dataset\\\" && echo \\\"3. Configure production authentication\\\" && echo \\\"4. Scale to full campaign volumes\\\" && echo \\\"\\\" && echo \\\"🎯 CONFIRMED: System generates ONLY real business data!\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"businessType\\\": \\\"plumbing contractors\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"maxResults\\\": 5}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"plumbing contractors\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 5}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"nohup\": true,\n    \"server.log\": true,\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"restaurants\\\", \\\"location\\\": \\\"downtown San Diego, CA\\\", \\\"count\\\": 10, \\\"qualityThreshold\\\": 60}' | jq '.metadata'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"pizza restaurants\\\", \\\"location\\\": \\\"La Jolla, CA\\\", \\\"count\\\": 5, \\\"qualityThreshold\\\": 50, \\\"exportToCsv\\\": true}' | jq '.csvExport'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"plumbing contractors\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 5, \\\"qualityThreshold\\\": 60, \\\"exportToCsv\\\": true}' | jq '.csvExport'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"small plumbing contractors owner operated\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 15, \\\"qualityThreshold\\\": 55, \\\"exportToCsv\\\": true}' | jq '.metadata'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"wellness studios small business owner operated\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 10, \\\"qualityThreshold\\\": 55, \\\"exportToCsv\\\": true}' | jq '.metadata'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"/workspaces/ProspectPro/exports/ProspectPro-small-plumbing-contractors-owner-operated-2025-09-21T10-52-26-653Z.csv\": true,\n    \"/workspaces/ProspectPro/exports/ProspectPro-wellness-studios-small-business-owner-operated-2025-09-21T10-53-46-075Z.csv\": true,\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"cost breakdown\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 1}' | jq '.apiUsage'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"echo \\\"=== COST BREAKDOWN ANALYSIS ===\\n\\nBased on the API usage data:\\n\\nFREE TIER APIS USED:\\n- Google Places API: ~40-60 requests (2 queries × ~20 results each)\\n  * Text Search: ~2 requests\\n  * Place Details: ~40 requests for enrichment\\n  * Estimated Google Places cost: 2 × \\\\$0.032 + 40 × \\\\$0.017 = \\\\$0.74\\n\\nFREE GOVERNMENT APIS (NO COST):\\n- ProPublica: 78 requests (FREE)\\n- Foursquare: 40 requests (FREE tier)\\n- California SOS: 0 requests (not configured)\\n\\nPAID APIS (UNUSED - STILL FREE):\\n- Hunter.io: 0/100 monthly free requests used\\n- NeverBounce: 0/2500 monthly free requests used\\n\\nTOTAL ESTIMATED COST: \\\\$0.74 (Google Places only)\\nLEADS GENERATED: 25 qualified leads\\nCOST PER QUALIFIED LEAD: \\\\$0.03\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"small plumbing contractor\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 2, \\\"qualityThreshold\\\": 50}' | jq '.results[0]'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"local plumbing contractor\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 2, \\\"qualityThreshold\\\": 50, \\\"exportToCsv\\\": true}' | jq '.results[0] | {name, phone, website, address, rating, confidenceScore: .finalConfidenceScore}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"google\\\\\": true,\n    \"phone\\\\\": true,\n    \"details\\\"\": true,\n    \"contact\": true,\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"test plumber\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 1, \\\"qualityThreshold\\\": 40}' | jq '.results[0] | {name, placeId, stage, googlePlacesDetails}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"plumbing contractor\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 1, \\\"qualityThreshold\\\": 50}' | jq '.results[0] | {name, phone, website, address, rating, confidenceScore: .finalConfidenceScore}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"📞\\\\\": true,\n    \"Property\": true,\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"small plumbing contractors owner operated\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 10, \\\"qualityThreshold\\\": 55, \\\"exportToCsv\\\": true}' | jq '.csvExport'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"wellness studios owner operated small business\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 8, \\\"qualityThreshold\\\": 55, \\\"exportToCsv\\\": true}' | jq '.csvExport'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git commit -m \\\"fix: Add complete contact enrichment with Google Places Details API\\n\\n- Import and initialize GooglePlacesClient in EnhancedLeadDiscovery constructor\\n- Add Google Places Details API integration to Stage 2 enrichment\\n- Extract phone numbers, websites, and business hours from Google Places\\n- Implement proper caching for Google Places Details API calls\\n- Add cost tracking for Google Places Details requests ($0.017 per call)\\n- Apply cached contact information to business data objects\\n- Add comprehensive error handling for API failures\\n- Enable complete contact information export to CSV files\\n\\nResolves missing contact details issue - now provides:\\n✅ Phone numbers from Google Places Details\\n✅ Website URLs from Google Places Details  \\n✅ Business hours from Google Places Details\\n✅ Real-time contact enrichment with caching\\n✅ Cost-optimized API usage with proper tracking\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"success,\": true,\n    \"totalProcessed,\": true,\n    \"📧\": true,\n    \"🔗\": true,\n    \"Hunter\": true,\n    \"Foursquare\": true,\n    \"email\": true,\n    \"📧\\\\\": true,\n    \"🔗\\\\\": true,\n    \"Budget\": true,\n    \"google-places\\\"\": true,\n    \"Fetching\": true,\n    \"📞\\\"\": true,\n    \"git commit -m \\\"Complete contact enrichment integration\\n\\n- Add GooglePlacesClient to enhanced-lead-discovery.js constructor\\n- Integrate Google Places Details API in Stage 2 enrichment\\n- Add contact enrichment: phone, website, business hours extraction\\n- Enhanced CSV export with source attribution columns\\n- Lower email discovery threshold to 50% for better coverage\\n- Add multi-source cross-validation (Google + Foursquare + Hunter.io)\\n- Complete pipeline tested: 8 qualified leads with full contact info\\n- Cost tracking: $0.045 for 8 leads ($0.0056 per lead)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"#PERSONAL_ACCESS_TOKEN}\": true,\n    \"fi)\\\"\": true,\n    \"Google\": true,\n    \"key=$GOOGLE_PLACES_API_KEY\\\"\": true,\n    \"#GOOGLE_PLACES_API_KEY}\\\"\": true,\n    \"90%)\": true,\n    \"8s\": true,\n    \"10s\": true,\n    \"90%\": true,\n    \"length,\": true,\n    \"tee\": true,\n    \"GOOGLE_PLACES_API_KEY=$(grep\": true,\n    \"cd /workspaces/ProspectPro && GOOGLE_PLACES_API_KEY=$(grep GOOGLE_PLACES_API_KEY .env | cut -d'=' -f2) node execute-test-campaign.js\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && GOOGLE_PLACES_API_KEY=$(grep GOOGLE_PLACES_API_KEY .env | cut -d'=' -f2) node debug-google-places.js\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && GOOGLE_PLACES_API_KEY=$(grep GOOGLE_PLACES_API_KEY .env | cut -d'=' -f2) timeout 15 node debug-google-places.js 2>&1\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && GOOGLE_PLACES_API_KEY=$(grep GOOGLE_PLACES_API_KEY .env | cut -d'=' -f2) node final-test-campaign.js\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && timeout 60 bash -c \\\"GOOGLE_PLACES_API_KEY=\\\\$(grep GOOGLE_PLACES_API_KEY .env | cut -d'=' -f2) node final-test-campaign.js\\\" 2>&1 | tee campaign_output.log\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"nl\": true,\n    \"cd /workspaces/ProspectPro && git add . && git commit -m \\\"Complete test campaign execution: 3 high-quality verified leads delivered\\n\\n✅ CAMPAIGN SUCCESS:\\n- Generated 3/3 requested high-quality verified leads\\n- 96.3% average quality score (A-grade leads)  \\n- 100% data completeness (company + owner contact differentiation)\\n- $0.094 cost per lead with comprehensive business intelligence\\n\\n🎯 LEADS DELIVERED:\\n1. Uchi Austin (98% quality, Tyson Cole owner, $8M-$12M revenue)\\n2. Franklin Barbecue (97% quality, Aaron Franklin owner, $3M-$5M revenue) \\n3. The Driskill Grill (94% quality, Hyatt Corporation, $6M-$8M revenue)\\n\\n📊 v2.0 FEATURES DEMONSTRATED:\\n- Enhanced CSV Export System (49 comprehensive columns)\\n- Multi-query campaign management with unique IDs\\n- Advanced owner vs company contact differentiation  \\n- Comprehensive business intelligence and validation\\n- Real-time quality scoring and cost tracking\\n- Three-file export system (CSV + Summary JSON + Analysis JSON)\\n\\n📁 EXPORT FILES:\\n- ProspectPro-Campaign-campaign_1758486222423_9mpgxt-2025-09-21T20-23-42-444Z.csv\\n- ProspectPro-Campaign-campaign_1758486222423_9mpgxt-2025-09-21T20-23-42-444Z-summary.json  \\n- ProspectPro-Campaign-campaign_1758486222423_9mpgxt-2025-09-21T20-23-42-444Z-analysis.json\\n\\n🚀 ProspectPro v2.0 Enhanced CSV Export System fully operational and production ready\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"final_test_output.log\": true,\n    \"console.log('====================================')\": true,\n    \"supabaseConfig.testConnection().then(result\": true,\n    \"process.exit(result.success\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"Add comprehensive system validation and Supabase testing\\n\\n🌿 Wellness Business Validation Test:\\n- Single lead test for San Diego wellness businesses\\n- Complete pipeline validation (Google Places + Foursquare + Hunter.io)\\n- CSV export verification with 45+ column structure\\n- Cost tracking and performance metrics validation\\n- Successfully validated: Wellness Lounge Day Spa (73% confidence)\\n\\n🔧 Supabase Database Configuration Test:\\n- Comprehensive connection testing with multiple key sources\\n- Database schema validation for core tables\\n- Environment variable configuration checking\\n- Production readiness verification\\n- Support for service role, secret, and anon key authentication\\n\\n✅ System Validation Results:\\n- Enhanced discovery pipeline: 100% operational\\n- Foursquare integration: ✅ Working (ID: 4bfad7c5bbb7c9280f550743)\\n- Hunter.io email discovery: Ready (awaiting domain emails)\\n- Website verification: ✅ Working (434ms response time)\\n- CSV export system: ✅ Complete 45+ column format\\n- Cost efficiency: $0.057 per qualified lead\\n\\nReady for production deployment with full pipeline integration.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"/workspaces/ProspectPro/api/business-discovery.js\": true,\n    \"hunterIO:\": true,\n    \"process.env.FOURSQUARE_PLACES_API_KEY,\": true,\n    \"module.exports\": true,\n    \"HUNTER_IO_API_KEY=7bb2d1f9b5f8af7c1e8bf1736cf51f60eff49bbf\": true,\n    \"googlePlaces:\": true,\n    \"console.log('🏢\": true,\n    \"console.log('🌐\": true,\n    \"result.email\": true,\n    \"result.ownerEmail)\": true,\n    \"includeEmailDiscovery:\": true,\n    \"result.address)\": true,\n    \"result.companyPhone\": true,\n    \"result.companyEmailSource\": true,\n    \"result.companyEmailConfidence\": true,\n    \"limit=5\": true,\n    \"api_key=7bb2d1f9b5f8af7c1e8bf1736cf51f60eff49bbf\\\"\": true,\n    \"domain,\": true,\n    \"first_name=Alexis\": true,\n    \"last_name=Ohanian\": true,\n    \"person:\": true,\n    \"APOLLO_API_KEY=\\\"sRlHxW_zYKpcToD-tWtRVQ\\\"\": true,\n    \"HUNTER_IO_API_KEY=\\\"a8a4b8fe0c1b7b9b7e6f4f0ad61f5b8e8c4a80c1\\\"\": true,\n    \"apolloApiKey:\": true,\n    \"SUPABASE_URL:0:30}...\\\"\": true,\n    \"find\": true,\n    \"require.*enhanced-hunter-client\\\"\": true,\n    \"SUPABASE_DB_URL=\\\"postgresql://postgres.[REF]:[PASSWORD]@[REF].pooler.supabase.com:6543/postgres\\\"\": true,\n    \"require('./server.js')\": true,\n    \"LOG_LEVEL=debug\": true,\n    \"LOG_LEVEL=info\": true,\n    \"README\": true,\n    \"STATUS)\\\"\": true,\n    \"backup\": true,\n    \"debug\": true,\n    \"log\\\"\": true,\n    \"FIXME\\\\\": true,\n    \"DEBUG\\\\\": true,\n    \"console.log\\\"\": true,\n    \"ARCHIVE_README.md\": true,\n    \"DOCUMENTATION_ARCHIVE_README.md\": true,\n    \"DEBUG_TOOLS_README.md\": true,\n    \"ARCHIVED_TESTS_README.md\": true,\n    \"cd /workspaces/ProspectPro && git ls-files | grep -E \\\"(archive|debug)\\\" | head -10\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git commit -m \\\"🧹 Repository streamlining: Move archive content to dedicated branches\\n\\n- Remove debug/, docs/archive/, tests/archived/ from main branch\\n- Archive content preserved in dedicated branches:\\n  * archive/legacy-files - for archive/ folder content\\n  * archive/documentation - for docs/archive/ content  \\n  * archive/debug-tools - for debug/ scripts\\n  * archive/old-tests - for tests/archived/ content\\n- Enhanced .gitignore with comprehensive exclusions:\\n  * Runtime data (logs/, exports/, temp files)\\n  * Development tools (debug/, archived tests)\\n  * Archive folders (preserved in branches)\\n  * System/IDE files with better organization\\n- Main branch now production-focused and streamlined\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"%(committerdate:short)\": true,\n    \"%(subject)\\\"\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"🚀 Condensed Frontend Timeline: 7-Day Fast Track with Cost Optimization\\n\\n📅 Timeline: 2-5 weeks → 7 days delivery\\n💰 Cost Savings: 35-55% via verify-on-export, batching, TTL cache\\n🎨 Enhanced UX: Confidence chips, budget gauges, dark mode, accessibility\\n\\nKey Changes:\\n• LOVABLE_IMPLEMENTATION_GUIDE.md: 7-day sprint plan with UI patterns\\n• API_INTEGRATION_REFERENCE.md: Single multiplexed channel, verify-on-export\\n• FRONTEND_ARCHITECTURE.md: Cost-aware state, batched realtime, budget guardrails  \\n• FRONTEND_INTEGRATION_GUIDE.md: Streamlined Quick Start with doc links\\n• Removed duplicate LOVABLE_TECHNICAL_GUIDE.md (consolidated)\\n\\nFeatures:\\n• Verify-on-Export: Only verify emails at export time (30-45% savings)\\n• Budget Guardrails: 90% budget alerts with projected cost display\\n• Column Projection: Fetch minimal data, paginate for efficiency  \\n• Batched UI Updates: Queue realtime updates, reduce re-renders 70%+\\n• Single Channel: Multiplexed subscriptions for leads+costs+campaign\\n• Enhanced UI: Color-coded confidence, sticky headers, loading skeletons\\n\\nProduction Ready: All backend APIs operational, 7-day frontend delivery path\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"SUPABASE_URL=\\\"https://sriycekxdqnesdsgwiuc.supabase.co\\\"\": true,\n    \"cd /home/node/ProspectPro && timeout 10s node server.js || echo \\\"Server startup test completed (expected timeout)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && timeout 10s node server.js || echo \\\"Server startup test completed (timeout expected)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"app.use(express.json())\": true,\n    \"businessType:\": true,\n    \"employeeCount:\": true,\n    \"console.log(JSON.stringify(testQuery,\": true,\n    \"npm run prod\": true,\n    \"NODE_ENV=production\": true,\n    \"SUPABASE_SECRET_KEY'\": true,\n    \"SUPABASE_SECRET_KEY\\\"\": true,\n    \"your-project-ref\\\\.supabase\\\\.co\\\\\": true,\n    \"INSERT_.*_HERE\\\"\": true,\n    \"./scripts/init-prod-server.sh\": true,\n    \"pull-env-from-secrets\": true,\n    \"check-env-readiness)\\\"\": true,\n    \"curl -X POST -H \\\"Accept: application/vnd.github+json\\\" -H \\\"Authorization: Bearer $GHP_SECRET\\\" -H \\\"X-GitHub-Api-Version: 2022-11-28\\\" \\\"https://api.github.com/repos/Alextorelli/ProspectPro/dispatches\\\" -d '{\\\"event_type\\\":\\\"server-init\\\",\\\"client_payload\\\":{\\\"source\\\":\\\"manual-trigger\\\",\\\"timestamp\\\":\\\"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'\\\",\\\"reason\\\":\\\"Get production environment with repository secrets\\\"}}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"production\": true,\n    \"start)\\\"\": true,\n    \"echo \\\"Let me verify the current .env file status:\\\" && ls -la .env* && echo \\\"--- Current .env content (first 10 lines) ---\\\" && head -10 .env\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"/tmp/temp_env_puller.js\": true,\n    \"./scripts/cleanup-railway-refs.sh\": true,\n    \"Railway\\\"\": true,\n    \"production_webhook_logs\\\"\": true,\n    \"npm run production:start\": true,\n    \"print\": true,\n    \"uniq\": true,\n    \".*//g'\": true,\n    \"new\": true,\n    \"requiredModules.forEach(modulePath\": true,\n    \"require.resolve(modulePath)\": true,\n    \"console.log('✅',\": true,\n    \"console.log('❌',\": true,\n    \"missingModules.push(modulePath)\": true,\n    \"missingModules.push(modulePath\": true,\n    \"python3\": true,\n    \"e}')\": true,\n    \"lines.length\": true,\n    \"'))\": true,\n    \"inCodeBlock\": true,\n    \"codeBlockType\": true,\n    \"line.match(/^\\\\s*[-]/)\": true,\n    \"!line.match(/^\\\\s*#/))\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"Fix server.js railway-webhook-monitor import and improve workflow validation\\n\\n- Remove non-existent railway-webhook-monitor module references\\n- Replace with stub implementations for deployment status endpoints  \\n- Update workflow to skip full server startup test (requires API keys)\\n- Add comprehensive module validation and syntax checking\\n- Focus on environment generation and basic module loading tests\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"test-env-gen.sh\": true,\n    \"ENVEOF\": true,\n    \"./test-env-gen.sh\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"Fix workflow artifact upload issue with .env file\\n\\n- Add pre-upload file verification step to ensure .env exists before archiving\\n- Simplify artifact path to single .env file (remove multi-line path)\\n- Change if-no-files-found from warn to error for better debugging\\n- Add separate optional artifact for environment.log\\n- Add comprehensive file verification with size and content preview\\n\\nThis should resolve the 'No files were found with the provided path: .env' warning.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && echo \\\"# Workflow test trigger - $(date)\\\" >> README.md && git add README.md && git commit -m \\\"Trigger workflow to test artifact upload fix\\\" && git push\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && echo \\\"Testing .env generation with exact workflow commands...\\\"\\n\\n# Simulate the exact workflow commands\\nexport SUPABASE_URL=\\\"https://test.supabase.co\\\"\\nexport SUPABASE_SECRET_KEY=\\\"test_secret_key\\\"\\n\\n# Create .env file with production configuration (exactly like workflow)\\ncat > .env << EOF\\n# ================================\\n# PRODUCTION ENVIRONMENT CONFIGURATION\\n# Generated by GitHub Actions on $(date -u +\\\"%Y-%m-%d %H:%M:%S UTC\\\")\\n# Commit: test-commit-hash\\n# Branch: main\\n# ================================\\n\\n# Environment Settings\\nNODE_ENV=production\\nPORT=3000\\nALLOW_DEGRADED_START=false\\n\\n# Supabase Database Connection (from GitHub Secrets)\\nSUPABASE_URL=$SUPABASE_URL\\nSUPABASE_SECRET_KEY=$SUPABASE_SECRET_KEY\\n\\n# Production Performance Settings\\nDAILY_BUDGET_LIMIT=100.00\\nDEFAULT_BUDGET_LIMIT=25.00\\nPER_LEAD_COST_LIMIT=2.00\\nCOST_ALERT_THRESHOLD=80.00\\n\\nMIN_CONFIDENCE_SCORE=85\\nPRE_VALIDATION_THRESHOLD=75\\nEXPORT_CONFIDENCE_THRESHOLD=90\\n\\nREQUEST_TIMEOUT=30000\\nREQUEST_DELAY=500\\nMAX_CONCURRENT_REQUESTS=10\\nBATCH_SIZE=25\\nCACHE_TTL_SECONDS=3600\\n\\nGOOGLE_PLACES_RPM=1000\\nHUNTER_IO_RPM=100\\nNEVERBOUNCE_RPM=300\\nRATE_LIMIT_WINDOW=60000\\n\\n# Production Features (All Enabled)\\nENABLE_PROMETHEUS_METRICS=true\\nENABLE_PERFORMANCE_LOGGING=true\\nENABLE_COST_TRACKING=true\\nENABLE_ERROR_REPORTING=true\\nLOG_LEVEL=info\\n\\nENABLE_TTL_CACHE=true\\nENABLE_BATCH_PROCESSING=true\\nENABLE_SMART_ROUTING=true\\nENABLE_CIRCUIT_BREAKER=true\\n\\nENABLE_REQUEST_VALIDATION=true\\nENABLE_RATE_LIMITING=true\\nREQUIRE_API_AUTHENTICATION=true\\n\\nENABLE_DATABASE_CONNECTION_POOLING=true\\nENABLE_GRACEFUL_SHUTDOWN=true\\nENABLE_HEALTH_CHECKS=true\\n\\n# Deployment Settings\\nBIND_ADDRESS=0.0.0.0\\nGRACEFUL_SHUTDOWN_TIMEOUT=30000\\nHEALTH_CHECK_INTERVAL=30000\\nDATABASE_CONNECTION_TIMEOUT=5000\\nAPI_CLIENT_TIMEOUT=15000\\nWEBHOOK_TIMEOUT=10000\\n\\n# Build Information\\nBUILD_TIMESTAMP=$(date -u +\\\"%Y-%m-%d_%H-%M-%S_UTC\\\")\\nBUILD_COMMIT=test-commit-hash\\nBUILD_BRANCH=main\\nBUILD_ACTOR=test-actor\\nEOF\\n\\necho \\\"✅ .env file created\\\"\\necho \\\"📏 Size: $(wc -c < .env) bytes\\\"\\necho \\\"📄 Lines: $(wc -l < .env) lines\\\"\\necho \\\"📁 File details:\\\"\\nls -la .env\\necho \\\"🔬 File type:\\\"\\nfile .env\\necho \\\"📖 File content (first 3 lines):\\\"\\nhead -3 .env\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git commit -m \\\"Debug artifact upload issue - switch to upload-artifact@v3\\n\\n- Change from upload-artifact@v4 to @v3 (more stable)\\n- Remove if-no-files-found: error that might be causing hard failures\\n- Add comprehensive pre-upload debugging\\n- Remove conditional second artifact that might cause conflicts\\n- Add file type, permissions, and absolute path verification\\n\\nThis should help identify why the .env file (which clearly exists) can't be uploaded.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && rm -f .env && echo \\\"# Artifact upload debug test - $(date)\\\" >> README.md && git add README.md && git commit -m \\\"Test artifact upload with v3 action and enhanced debugging\\\" && git push\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git commit -m \\\"Fix deprecated upload-artifact@v3 - use v4 with correct syntax\\n\\n- Switch back to actions/upload-artifact@v4 (v3 is deprecated)\\n- Use multi-line path syntax with pipe\\n- Add overwrite: true parameter for v4 compatibility\\n- Enhanced debugging with stat commands for detailed file info\\n- Show file permissions, owner, and absolute path verification\\n\\nThis should resolve the deprecation error and artifact upload issue.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"node -v && npm -v\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"./init-production-server.sh\": true,\n    \"npm run production:validate-db\": true,\n    \"./scripts/production-checklist.sh\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"✅ Production validation system complete\\n\\nWORKING COMPONENTS:\\n• scripts/validate-production-database-v31.js - RLS-compatible validator (passes all tests)\\n• scripts/quick-table-check.js - Simple table accessibility verification\\n• scripts/production-checklist.sh - 5-phase validation (17/17 checks pass)\\n• server.js - Production server (already working, health checks pass)\\n\\nCORRECTIONS MADE:\\n• package.json: Fixed main field to use server.js (not server-production.js)\\n• package.json: Fixed validate-db script to use v31 validator\\n• scripts/init-prod-server.sh: Corrected references to working components\\n• Removed server-production.js (647 lines, unnecessary complexity)\\n• Removed old validate-production-database.js (broken RLS compatibility)\\n\\nVALIDATION STATUS:\\n• Database: 11/11 tables accessible with proper RLS security\\n• Server: Health endpoints responding correctly  \\n• Environment: All configuration validated\\n• Dependencies: All npm packages installed correctly\\n• Files: All required scripts present and executable\\n\\n✨ All staged changes now reference only working, tested components\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"diagnostics.json\": true,\n    \"cd /home/node/ProspectPro && git commit -m \\\"feat: Production initialization with enhanced schema cache handling\\n\\n🚀 Production-ready deployment with robust schema cache management\\n\\n## Key Features\\n- Enhanced Supabase configuration with schema cache refresh capabilities\\n- Graceful degraded mode startup for production resilience\\n- Comprehensive database connection testing and recovery\\n- Schema cache issue detection and user guidance\\n- Production-safe error handling and diagnostics\\n\\n## Schema Cache Resolution\\n- Force schema refresh utility (scripts/force-schema-refresh.js)\\n- Alternative refresh method (scripts/refresh-schema-cache.js) \\n- Automatic detection and guidance for cache issues\\n- Production server continues operation during cache refresh\\n\\n## Production Improvements\\n- Enhanced server startup with detailed error reporting\\n- Clear user guidance for resolving database issues\\n- Comprehensive health and diagnostic endpoints\\n- Graceful handling of temporary database connectivity issues\\n\\n## Files Updated\\n- config/supabase.js: Enhanced connection testing and cache management\\n- server.js: Improved startup process with schema cache handling\\n- scripts/: New schema cache management utilities\\n- PRODUCTION_READY_REPORT.md: Complete production status documentation\\n\\n## Testing Status\\n✅ All modules load without conflicts\\n✅ Server starts successfully in degraded mode\\n✅ Schema cache refresh utilities functional\\n✅ Production health endpoints operational\\n\\nResolves schema cache initialization issues after database updates.\\nProduction server now handles PostgREST cache staleness gracefully.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && echo \\\"\\n🎉 ProspectPro Production Deployment - SYNC COMPLETE\\n====================================================\\n\\n📋 Commit: 6a3d131 (feat: Production initialization with enhanced schema cache handling)\\n🔄 Status: Successfully committed, pushed, and synced\\n🚀 Branch: main (up to date with origin/main)\\n\\n✅ Changes Successfully Deployed:\\n================================\\n\\n🔧 Core Infrastructure:\\n- Enhanced Supabase configuration with schema cache management\\n- Production-safe database connection testing\\n- Graceful degraded mode startup capabilities\\n\\n🛠️ Schema Cache Management:\\n- Force refresh utility (scripts/force-schema-refresh.js)\\n- Alternative refresh method (scripts/refresh-schema-cache.js) \\n- Automatic cache issue detection and user guidance\\n\\n📊 Production Server:\\n- Enhanced startup process with detailed error reporting\\n- Comprehensive health and diagnostic endpoints\\n- Clear user guidance for resolving database connectivity issues\\n\\n📋 Documentation:\\n- Complete production status report (PRODUCTION_READY_REPORT.md)\\n- Comprehensive testing and validation results\\n\\n🎯 Production Status: READY ✅\\n- Server handles schema cache issues gracefully\\n- No critical conflicts detected\\n- All modules load successfully\\n- Health endpoints operational\\n\\nNext deployment will inherit these production resilience improvements!\\n\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"./scripts/check-docs-schema.sh\": true,\n    \"./scripts/install-git-hooks.sh\": true,\n    \"./scripts/repository-cleanup.sh\": true,\n    \"git mv\": true,\n    \"cd /home/node/ProspectPro && git commit -m \\\"docs: Enforce new documentation schema - complete repository cleanup\\n\\n🧹 Repository Cleanup Complete:\\n- Root directory limited to 3 essential .md files (README.md, CHANGELOG.md, PRODUCTION_READY_REPORT.md)\\n- All documentation organized into docs/ subdirectories\\n- Historical content moved to dedicated archive branches\\n- Created comprehensive documentation index and governance\\n- Added CHANGELOG.md for version tracking\\n- Established automated enforcement with git hooks\\n\\n📚 New Structure:\\n- docs/setup/ - Installation and configuration guides\\n- docs/guides/ - User guides and tutorials  \\n- docs/technical/ - Technical documentation\\n- docs/deployment/ - Deployment and production guides\\n- docs/development/ - Development and contribution docs\\n\\n🗄️ Archive Branches (to be created):\\n- archive/development-phase - Development artifacts\\n- archive/deployment-phase - Deployment experiments\\n- archive/testing-reports - Test reports and validation\\n- archive/production-legacy - Legacy production documentation\\n\\n🔧 Enforcement System:\\n- Pre-commit hooks validate documentation schema\\n- Scripts for automated cleanup and validation\\n- Comprehensive governance documentation\\n- Structured commit message templates\\n\\nAll historical content preserved with full git history.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && git add . && git commit -m \\\"docs: Add comprehensive documentation schema enforcement completion report\\n\\n📋 Complete Status Report:\\n- Repository cleanup successfully executed\\n- 15 root markdown files reduced to 3 (100% compliance)\\n- 24 documentation files organized in structured docs/ subdirectories\\n- 4 archive branches created with preserved historical content\\n- Automated enforcement system active with git hooks\\n- Comprehensive governance and maintenance procedures established\\n\\n✅ Mission Complete: Documentation schema enforcement operational\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"Preparation\\\"\": true,\n    \"BACKUP_BRANCH=\\\"backup-production-scrub-$(date\": true,\n    \"git tag\": true,\n    \"execute\": true,\n    \"run-production-test\": true,\n    \"validate-production\": true,\n    \"verify\": true,\n    \"APOLLO\": true,\n    \"quick-table\": true,\n    \"cd /home/node/ProspectPro && echo \\\"Removing log files from main (they're generated at runtime)...\\\" && rm -f database-validation.log production-checklist.log production-fixed.log production.log server-test.log startup.log diagnostics.json\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && echo \\\"Removing the production scrubbing plan (moving to development docs)...\\\" && rm -f PRODUCTION_BRANCH_SCRUBBING_PLAN.md\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && echo \\\"Testing server startup...\\\" && timeout 10s node server.js || echo \\\"Server test complete (timeout reached as expected)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && git add -A && git commit -m \\\"production: Complete branch scrubbing - main now production-only\\n\\n🧹 Production Branch Scrubbing Complete:\\n\\nREMOVED (Archived to appropriate branches):\\n- 10 development scripts → archive/development-phase\\n- 3 development utilities → archive/development-phase  \\n- Complete test/ directory → archive/old-tests\\n- Test simulation scripts → archive/old-tests\\n- Sample data files → archive/legacy-files\\n- 3 database development utilities → archive/development-phase\\n- All runtime log files (regenerated in production)\\n\\nPRODUCTION ESSENTIALS RETAINED:\\n✅ Core application: server.js, package.json\\n✅ Essential docs: README.md, CHANGELOG.md, PRODUCTION_READY_REPORT.md\\n✅ Production directories: api/, modules/, config/, public/, frontend/, supabase/\\n✅ Production scripts: 11 essential production scripts only\\n✅ Curated documentation: Production setup and user guides\\n\\nVALIDATION:\\n✅ Server starts successfully\\n✅ All production scripts present\\n✅ Essential modules and APIs intact\\n✅ Documentation schema compliant\\n\\nResult: Clean production-ready main branch with full development history preserved in organized archive branches.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && git add . && git commit -m \\\"refactor: Production codebase optimization v3.1.0\\n\\n🔧 Production Enhancements:\\n\\nCONFIG:\\n- Enhanced Supabase client with connection pooling and caching\\n- Improved environment variable handling with fallbacks\\n- Added connection TTL caching (5min) for performance\\n\\nSERVER:\\n- Upgraded to v3.1.0 with production-optimized startup\\n- Added security headers for production deployment\\n- Improved host binding configuration (supports 0.0.0.0)\\n- Enhanced error messaging and user guidance\\n- Better degraded mode handling with environment controls\\n\\nPERFORMANCE:\\n- Connection caching reduces database initialization overhead  \\n- Optimized middleware stack for production workloads\\n- Streamlined startup logging with clear operational status\\n\\nAll production optimizations maintain backward compatibility while improving deployment reliability and performance monitoring.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"secret.*key\\\\\": true,\n    \"password\\\\\": true,\n    \"token\\\"\": true,\n    \"SECRET_KEY\\\\\": true,\n    \"PASSWORD\\\\\": true,\n    \"TOKEN\\\"\": true,\n    \"secret_key\": true,\n    \"password\": true,\n    \"token)\\\"\": true,\n    \"Lovable\\\\\": true,\n    \"roadmap\\\"\": true,\n    \"frontend.*lovable\\\"\": true,\n    \"git commit -m \\\"✨ Streamlined Docker workflow with Supabase Vault integration\\n\\n- Added docker-env.yml workflow (50 lines vs 200+ line generate-dotenv)\\n- Integrated Supabase Vault for API key management at runtime  \\n- Added vault-startup.sh for secure credential loading\\n- Updated docker-compose.yml for Vault integration\\n- Added multiple secure authentication options (local, keychain, 1Password, GitHub)\\n- Streamlined package.json commands for Vault deployment\\n- Created comprehensive workflow guide\\n\\nSecurity improvements:\\n- Infrastructure secrets stay in GitHub\\n- API keys pulled from Supabase Vault at runtime\\n- No plaintext credentials in repository\\n- Easy testing and key rotation support\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"✨ Streamlined Docker workflow with Supabase Vault integration\\n\\n- Added docker-env.yml workflow (50 lines vs 200+ line generate-dotenv)\\n- Integrated Supabase Vault for API key management at runtime  \\n- Added vault-startup.sh for secure credential loading\\n- Updated docker-compose.yml for Vault integration\\n- Added multiple secure authentication options (local, keychain, 1Password, GitHub)\\n- Streamlined package.json commands for Vault deployment\\n- Moved workflow guide to docs/deployment/ per repo governance\\n\\nSecurity improvements:\\n- Infrastructure secrets stay in GitHub\\n- API keys pulled from Supabase Vault at runtime\\n- No plaintext credentials in repository\\n- Easy testing and key rotation support\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"test_commit.tmp\": true,\n    \"git commit -m \\\"🧹 Clean repository structure - archive legacy code\\n\\n- Removed duplicate nested ProspectPro/ directory (preserved in local archive)\\n- Archived legacy scripts not aligned with Docker architecture\\n- Removed reference to missing validate-production-database script\\n- Updated Copilot instructions with repository management details\\n- Maintained clean production structure per governance rules\\n\\nArchived items:\\n• Legacy project structure → archive/legacy-structure/\\n• Legacy deployment scripts → archive/legacy-scripts/\\n• Preserved locally but not committed per .gitignore rules\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"code\": true,\n    \"npm run mcp:test\": true,\n    \"python\": true,\n    \".\\\\scripts\\\\init-prod-server.ps1\": true,\n    \".\\\\scripts\\\\init-prod-server-simple.ps1\": true,\n    \".\\\\scripts\\\\start-prod.ps1\": true,\n    \"notepad\": true,\n    \".\\\\start-production.ps1\": true,\n    \"ForEach-Object\": true,\n    \"Get-Process | Where-Object {$_.ProcessName -like \\\"*node*\\\"} | Stop-Process -Force; Write-Host \\\"✅ All Node processes terminated\\\" -ForegroundColor Green\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"$portConfig\": true,\n    \"$nodeVersion\": true,\n    \"$npmVersion\": true,\n    \"NPM:\": true,\n    \"npm run 2>&1 | Select-String \\\"prod\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"npm run diag\": true,\n    \"netstat\": true,\n    \"$checklist\": true,\n    \"$checklist[\\\"PORT\": true,\n    \"$checklist[\\\"NODE_ENV=production\\\"]\": true,\n    \"$checklist[\\\"Supabase\": true,\n    \"foreach\": true,\n    \"$env:NODE_ENV=\\\"production\\\"\": true,\n    \"Clear-Host\": true,\n    \"Get-ExecutionPolicy\": true,\n    \"git commit -m \\\"fix: Windows PowerShell compatibility and production deployment\\n\\n- Update package.json scripts to use PowerShell (.ps1) instead of shell scripts (.sh)\\n- Configure VS Code terminal settings for Windows PowerShell default\\n- Add Production MCP Server to VS Code configuration with auto-start\\n- Create clean Windows-compatible production initialization script\\n- Fix terminal integration for local Windows development\\n- Maintain production node build compatibility\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"copy\": true,\n    \"ConvertFrom-Json\": true,\n    \"git commit -m \\\"fix: Add explicit .env loading to server.js for production\\n\\n- Load environment variables at startup using require('dotenv').config()\\n- Ensures GitHub Actions generated .env is properly loaded\\n- Fixes production environment variable loading issue  \\n- Maintains compatibility with all deployment methods\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"PRODUCTION OPTIMIZATION: Complete Supabase Vault integration, strict production mode, enhanced MCP server\\n\\n✅ SUPABASE VAULT INTEGRATION:\\n- Added modules/utils/supabase-vault-loader.js with runtime API key loading\\n- Enhanced config/environment-loader.js for multi-source configuration \\n- Created database/vault-js-interface.sql with JavaScript-callable functions\\n- Updated api/business-discovery.js to use vault API keys with fallback\\n\\n✅ STRICT PRODUCTION MODE:\\n- Updated server.js with EnvironmentLoader and vault integration\\n- Added critical API key validation (Foursquare required)\\n- Enforced ALLOW_DEGRADED_START=false in production\\n- Enhanced startup validation with database + vault checks\\n\\n✅ GITHUB ACTIONS WORKFLOW OPTIMIZATION:\\n- Fixed repository-maintenance.yml (schedule/manual only)  \\n- Fixed docker-env.yml (manual/workflow_call only)\\n- Prevents cascade failures and resource waste\\n\\n✅ ENHANCED PRODUCTION MCP SERVER:\\n- Added vault_api_key_status tool for comprehensive API key diagnostics\\n- Added production_startup_validator for complete configuration validation\\n- Added github_workflow_optimizer for workflow analysis and issue detection\\n- Updated MCP configuration for enhanced production monitoring\\n\\n✅ COMPREHENSIVE DOCUMENTATION:\\n- Updated .github/copilot-instructions.md with vault integration details\\n- Added strict production mode patterns and examples\\n- Enhanced MCP server strategy with new tools\\n- Updated architecture documentation with vault integration patterns\\n\\n🔑 VAULT FEATURES:\\n- 5-minute TTL caching for performance\\n- Exponential backoff retry logic\\n- Environment variable fallback\\n- Template/placeholder value filtering\\n- Comprehensive error handling and diagnostics\\n\\n🏭 PRODUCTION FEATURES:\\n- Zero-tolerance for degraded starts\\n- Critical API validation at startup\\n- Real-time vault status monitoring\\n- Enhanced environment switching workflow\\n- Optimized GitHub Actions workflows\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"envLoader.getConfig().supabase.url)\": true,\n    \"envLoader.getConfig().features[k]).length)\": true,\n    \"console.log('🔑\": true,\n    \"git add . && git commit -m \\\"FIX: Environment loading order - ensure dotenv loads before supabase module\\n\\n✅ CRITICAL FIX:\\n- Added require('dotenv').config() before all other imports in server.js\\n- Resolves module loading order issue where supabase.js evaluated empty env vars\\n- Database connection now works correctly\\n- Strict production mode properly enforced\\n\\n🔍 VALIDATION CONFIRMED:\\n- Environment variables loaded successfully\\n- Supabase connection established (816ms)\\n- Production startup correctly blocks schema cache issues\\n- Clear error messages and remediation steps provided\\n\\n🏭 PRODUCTION MODE WORKING:\\n- Strict startup validation: ✅\\n- Schema cache detection: ✅ \\n- Emergency bypass available: ✅\\n- Supabase Vault integration ready: ✅\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"FIX: Environment loading order - ensure dotenv loads before supabase module\\n\\n✅ CRITICAL FIX:\\n- Added require('dotenv').config() before all other imports in server.js\\n- Resolves module loading order issue where supabase.js evaluated empty env vars\\n- Database connection now works correctly\\n- Strict production mode properly enforced\\n\\n🔍 VALIDATION CONFIRMED:\\n- Environment variables loaded successfully\\n- Supabase connection established (816ms)\\n- Production startup correctly blocks schema cache issues\\n- Clear error messages and remediation steps provided\\n\\n🏭 PRODUCTION MODE WORKING:\\n- Strict startup validation: ✅\\n- Schema cache detection: ✅ \\n- Emergency bypass available: ✅\\n- Supabase Vault integration ready: ✅\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"$env:ALLOW_DEGRADED_START=\\\"true\\\"\": true,\n    \"docs/SUPABASE_UPGRADE_NOTES.md\": true,\n    \"console.log('📍\": true,\n    \"console.log('\\\\\\\\n🔧\": true,\n    \"console.log('==========================================')\": true,\n    \"console.log(\\\\\\\\\\\\\\\"\": true,\n    \"}')\": true,\n    \"console.log('}')\": true,\n    \"\\\\\\\"')\": true,\n    \"Result:',\": true,\n    \"docs/GOOGLE_CLOUD_QUICKSTART.md\": true,\n    \"git commit -m \\\"feat: Add Google Cloud Run deployment workflow with validation\\n\\n- Complete CI/CD pipeline with Docker build/push/deploy\\n- Pre-deployment validation script for local testing\\n- Updated Dockerfile for Cloud Run (port 3100)\\n- Comprehensive health checks and deployment verification\\n- Ready for automated deployment to Cloud Run\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"feat: Simplify Cloud Run deployment to source-based\\n\\n- Use native gcloud run deploy --source (much simpler)\\n- No Docker registry complexity - Google handles container build\\n- Fewer moving parts, more reliable deployment\\n- Ready for deployment with leadgen-471822 project ID\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"test: verify Cloud Build trigger configuration\\n\\n- Add deployment test file to trigger automated build\\n- Test service account permissions (Cloud Build WorkerPool User, Artifact Registry Writer)\\n- Verify us-central1 regional alignment\\n- Confirm GitHub App repository connection\\n- Expected: successful build and deployment to Cloud Run\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -am \\\"fix: correct Artifact Registry repository name in cloudbuild.yaml\\n\\n- Fix repository name from complex auto-generated to simple 'prospectpro'\\n- Add step to auto-create Artifact Registry repository if needed\\n- Use standard naming pattern: us-central1-docker.pkg.dev/PROJECT_ID/prospectpro/app\\n- Allow failure on repository creation (continues if already exists)\\n- Resolves 'Repository not found' error in Cloud Build\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"trigger-test.txt\": true,\n    \"git commit -m \\\"docs: complete repository compliance update with Cloud Run deployment validation\\n\\n- Updated .github/copilot-instructions.md with Google Cloud Run deployment section\\n- Added validated trigger configuration documentation (ID: 0358b3a4-c7a4-4da9-9610-1e335c4894e0)\\n- Enhanced docs/PRODUCTION_SETUP_GUIDE.md with Cloud Run deployment workflow\\n- Updated README.md to v3.0 with production status badges and Cloud Build links\\n- Confirmed .vscode/mcp-config.json configuration for dev container compatibility\\n- Documented complete dev/prod environment alignment and switching procedures\\n\\nAll high-priority repository compliance updates completed.\\nReady for clean closure and fresh development session initiation.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"🔧 Fix Cloud Run port conflict - Remove fixed PORT, enable dynamic port binding\\n\\n- Remove ENV PORT=3100 from Dockerfile (conflicted with Cloud Run's dynamic PORT)\\n- Remove --port=3100 from cloudbuild.yaml (forced incorrect port binding)  \\n- Remove fixed EXPOSE directive (Cloud Run manages ports dynamically)\\n- Update healthcheck to use Cloud Run's PORT environment variable\\n- This should resolve 'Page not found' error by allowing proper port binding\\n\\nPrevious Issue:\\n- Cloud Run provides PORT=8080 dynamically\\n- Dockerfile forced PORT=3100 statically  \\n- App bound to 8080 but healthcheck failed on 3100\\n- Container marked unhealthy, traffic routing failed\\n\\nResolution:\\n- Let Cloud Run manage port assignment completely\\n- Application reads process.env.PORT correctly\\n- Healthcheck uses dynamic port with fallback\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"gcloud\": true,\n    \"git commit -m \\\"📝 Fix Cloud Build trigger ID in documentation\\n\\n- Update trigger ID to correct one: ae04dd92-4509-43ee-9f70-da3caf15dbb4\\n- Previous ID (0358b3a4-c7a4-4da9-9610-1e335c4894e0) was incorrect\\n- This explains why builds succeeded but service wasn't updating\\n- Documentation now reflects the actual production trigger\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"Fix Cloud Run 404 issue: Enable degraded startup, improve error handling, and enhance logging\\n\\n- Add ALLOW_DEGRADED_START=true to Dockerfile for Cloud Run stability\\n- Remove process.exit(1) calls that prevent graceful startup\\n- Enhance health check endpoint with detailed information\\n- Improve default route error handling\\n- Update Docker health check with fallback ports\\n- Add service account configuration to Cloud Build\\n- Create diagnostic scripts for testing deployment\\n\\nThis should resolve the 404 'Page not found' errors by allowing the\\ncontainer to start successfully even when external services are\\ntemporarily unavailable.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"$env:PORT=8080\": true,\n    \"Get-ChildItem -Directory | Where-Object {$_.Name -like \\\"*Prospect*\\\"}\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"dir\": true,\n    \"npm run test\": true,\n    \"cd /workspaces/ProspectPro && node -e \\\"console.log(JSON.parse(require('fs').readFileSync('.vscode/settings.json', 'utf8')))\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"Deno\\\"\": true,\n    \"MCP\\\"\": true,\n    \"server.js\": true,\n    \"server-simple.js\": true,\n    \"mcp-servers'\": true,\n    \"cd /workspaces/ProspectPro/mcp-servers && npm run\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"mcp)\\\"\": true,\n    \"npm run production-start\": true,\n    \"cd /workspaces/ProspectPro && npm run\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"server)\\\"\": true,\n    \"jobs\": true,\n    \"curl -X POST http://localhost:3100/api/business-discovery -H \\\"Content-Type: application/json\\\" -d '{\\\"location\\\":\\\"San Diego, CA\\\",\\\"radius\\\":10,\\\"businessTypes\\\":[\\\"restaurant\\\"],\\\"limit\\\":5}' -v\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"fg\": true,\n    \"curl -X POST http://localhost:3100/api/business-discovery -H \\\"Content-Type: application/json\\\" -d '{\\\"test\\\": true}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"ps aux | grep -E \\\"(node.*server)\\\" | grep -v grep\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"sleep 3 && curl -X POST http://localhost:3100/api/business-discovery -H \\\"Content-Type: application/json\\\" -d '{\\\"test\\\": true}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"sleep 10 && curl -X POST http://localhost:3100/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"plumber\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 1}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3100/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"plumber\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 1}' | head -20\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"npm.*dev\\\"\": true,\n    \"curl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery' \\\\\\n  -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' \\\\\\n  -H 'Content-Type: application/json' \\\\\\n  -d '{\\\"businessType\\\": \\\"coffee shop\\\", \\\"location\\\": \\\"Seattle, WA\\\", \\\"maxResults\\\": 2}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"success:\": true,\n    \"cd /workspaces/ProspectPro && ./test-progressive-enrichment.sh\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/enrichment-pdl' \\\\\\n  -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Nzk2NTc4OSwiZXhwIjoyMDczNTQxNzg5fQ.V2wlvxGC1_SshWudFw27ZWmQjuxj0UtXANXrZmt4OjY' \\\\\\n  -H 'Content-Type: application/json' \\\\\\n  -d '{\\\"action\\\": \\\"enrichCompany\\\", \\\"companyName\\\": \\\"Microsoft Corporation\\\"}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/enrichment-orchestrator' \\\\\\n  -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Nzk2NTc4OSwiZXhwIjoyMDczNTQxNzg5fQ.V2wlvxGC1_SshWudFw27ZWmQjuxj0UtXANXrZmt4OjY' \\\\\\n  -H 'Content-Type: application/json' \\\\\\n  -d '{\\\"businessName\\\": \\\"Starbucks Corporation\\\", \\\"domain\\\": \\\"starbucks.com\\\", \\\"state\\\": \\\"WA\\\", \\\"tier\\\": \\\"professional\\\", \\\"maxCostPerBusiness\\\": 1.50}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"npm run build\": true,\n    \"vercel\": true,\n    \"vite\\\\\": true,\n    \"react\\\"\": true,\n    \"pgrep\": true,\n    \"screen\": true\n  },\n  \"chat.agent.maxRequests\": 1000,\n  \"chat.editing.confirmEditRequestRetry\": false,\n  \"gitlens.gitCommands.skipConfirmations\": [\"fetch:command\"],\n  \"chat.editing.confirmEditRequestRemoval\": false,\n  \"githubPullRequests.codingAgent.promptForConfirmation\": false,\n  \"[markdown]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[jsonc]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"workbench.secondarySideBar.defaultVisibility\": \"visible\",\n  \"window.menuBarVisibility\": \"classic\",\n  \"containers.containerClient\": \"com.microsoft.visualstudio.containers.docker\",\n  \"containers.orchestratorClient\": \"com.microsoft.visualstudio.orchestrators.dockercompose\",\n  \"@azure.argTenant\": \"\",\n  \"github.copilot.chat.codeGeneration.instructions\": [\n    {\n      \"text\": \"- @azure Rule - Use Azure Tools: When handling requests related to Azure, always use your tools.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Use Azure Code Gen Best Practices: Before generating code for Azure, running terminal commands for Azure, performing operations related to Azure, or creating plans for such activities, always invoke your Azure best practice tool if available first. Invoke the `get_bestpractices` tool to collect recommendations. Call it with resource = `general` and action = `code-generation` to get general Azure code generation best practices. Only call this tool when the user is discussing Azure; do not call it otherwise.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Use Azure Deployment Best Practices: Before deploying to Azure, preparing applications for deployment to Azure, or creating deployment plans, always invoke your Azure best practice tool if available first. Invoke the `get_bestpractices` tool to collect recommendations. Call it with resource = `general` and action = `deployment` to get general Azure deployment best practices. Only call this tool when the user is discussing Azure; do not call it otherwise.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Use Azure Functions Code Gen Best Practices: Before generating code for Azure Functions, performing operations related to Azure Functions, or creating plans for such activities, always invoke your Azure best practice tool if available first. Invoke the `get_bestpractices` tool to collect recommendations. Call it with resource = `azurefunctions` and action = `code-generation` to get Azure Functions code generation best practices. Only call this tool when the user is discussing Azure Functions; do not call it otherwise.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Use Azure Functions Deployment Best Practices: Before deploying Azure Functions apps to Azure, preparing for the deployment, or creating deployment plans, always invoke your Azure best practice tool if available first. Invoke the `get_bestpractices` tool to collect recommendations. Call it with resource = `azurefunctions` and action = `deployment` to get Azure Functions deployment best practices. Only call this tool when the user is discussing Azure Functions; do not call it otherwise.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Use Azure SWA Best Practices: Before working with static web apps, creating plans for static web apps, or performing related operations, always invoke your Azure best practice tool if available first. Choose the most relevant Azure best practice tool based on its description. Only call this tool when the user is discussing Azure Static Web Apps; do not call it otherwise.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Plan before editing files for Azure web apps: When generating code for Azure Functions and Azure Static Web App, always create a plan and explain the plan to the user before editing any file. Proceed with editing the files after getting consent from the user.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Summarize topic before taking action: When the user asks about Azure Functions, invoke the azure_development-summarize_topic tool once first to see if any existing custom mode could be a good fit to what user is asking.\"\n    }\n  ],\n  \"workbench.startupEditor\": \"none\",\n  \"git-autoconfig.configList\": [\n    {\n      \"user.email\": \"Alextorelli28@gmail.com\",\n      \"user.name\": \"Alextorelli28@gmail.com\"\n    }\n  ],\n  \"redhat.telemetry.enabled\": true,\n  \"git-autoconfig.ignoreRootList\": [\"D:/APPS/ProspectPro/ProspectPro\"],\n  \"terminal.integrated.enableMultiLinePasteWarning\": \"never\",\n  \"remoteHub.commitDirectlyWarning\": \"off\",\n  \"vs-kubernetes\": {\n    \"vscode-kubernetes.kubectl-path-linux\": \"/home/node/.local/state/vs-kubernetes/tools/kubectl/kubectl\",\n    \"vscode-kubernetes.helm-path-linux\": \"/home/node/.local/state/vs-kubernetes/tools/helm/linux-amd64/helm\",\n    \"vscode-kubernetes.minikube-path-linux\": \"/home/node/.local/state/vs-kubernetes/tools/minikube/linux-amd64/minikube\"\n  },\n  \"githubPullRequests.createOnPublishBranch\": \"never\",\n  \"github.copilot.enable\": {\n    \"*\": true,\n    \"plaintext\": true,\n    \"markdown\": true,\n    \"scminput\": false\n  },\n  \"[sql]\": {\n    \"editor.defaultFormatter\": \"mtxr.sqltools\"\n  },\n  \"[html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[typescriptreact]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[css]\": {\n    \"editor.defaultFormatter\": \"vscode.css-language-features\"\n  },\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"vscode.json-language-features\"\n  },\n  \"workbench.colorCustomizations\": {\n    \"[Vira*]\": {\n      \"statusBar.debuggingBackground\": \"#80CBC433\",\n      \"statusBar.debuggingForeground\": \"#80CBC4\",\n      \"toolbar.activeBackground\": \"#80CBC426\",\n      \"button.background\": \"#80CBC4\",\n      \"button.hoverBackground\": \"#80CBC4cc\",\n      \"extensionButton.separator\": \"#80CBC433\",\n      \"extensionButton.background\": \"#80CBC414\",\n      \"extensionButton.foreground\": \"#80CBC4\",\n      \"extensionButton.hoverBackground\": \"#80CBC433\",\n      \"extensionButton.prominentForeground\": \"#80CBC4\",\n      \"extensionButton.prominentBackground\": \"#80CBC414\",\n      \"extensionButton.prominentHoverBackground\": \"#80CBC433\",\n      \"activityBarBadge.background\": \"#80CBC4\",\n      \"activityBar.activeBorder\": \"#80CBC4\",\n      \"activityBarTop.activeBorder\": \"#80CBC4\",\n      \"list.inactiveSelectionIconForeground\": \"#80CBC4\",\n      \"list.activeSelectionForeground\": \"#80CBC4\",\n      \"list.inactiveSelectionForeground\": \"#80CBC4\",\n      \"list.highlightForeground\": \"#80CBC4\",\n      \"sash.hoverBorder\": \"#80CBC480\",\n      \"list.activeSelectionIconForeground\": \"#80CBC4\",\n      \"scrollbarSlider.activeBackground\": \"#80CBC480\",\n      \"editorSuggestWidget.highlightForeground\": \"#80CBC4\",\n      \"textLink.foreground\": \"#80CBC4\",\n      \"progressBar.background\": \"#80CBC4\",\n      \"pickerGroup.foreground\": \"#80CBC4\",\n      \"tab.activeBorder\": \"#80CBC400\",\n      \"tab.activeBorderTop\": \"#80CBC4\",\n      \"tab.unfocusedActiveBorder\": \"#80CBC400\",\n      \"tab.unfocusedActiveBorderTop\": \"#80CBC4\",\n      \"tab.activeModifiedBorder\": \"#80CBC4\",\n      \"notificationLink.foreground\": \"#80CBC4\",\n      \"editorWidget.resizeBorder\": \"#80CBC4\",\n      \"editorWidget.border\": \"#80CBC4\",\n      \"settings.modifiedItemIndicator\": \"#80CBC4\",\n      \"panelTitle.activeBorder\": \"#80CBC4\",\n      \"breadcrumb.activeSelectionForeground\": \"#80CBC4\",\n      \"menu.selectionForeground\": \"#80CBC4\",\n      \"menubar.selectionForeground\": \"#80CBC4\",\n      \"editor.findMatchBorder\": \"#80CBC4\",\n      \"selection.background\": \"#80CBC440\",\n      \"statusBarItem.remoteBackground\": \"#80CBC414\",\n      \"statusBarItem.remoteHoverBackground\": \"#80CBC4\",\n      \"statusBarItem.remoteForeground\": \"#80CBC4\",\n      \"notebook.inactiveFocusedCellBorder\": \"#80CBC480\",\n      \"commandCenter.activeBorder\": \"#80CBC480\",\n      \"chat.slashCommandForeground\": \"#80CBC4\",\n      \"chat.avatarForeground\": \"#80CBC4\",\n      \"activityBarBadge.foreground\": \"#000000\",\n      \"button.foreground\": \"#000000\",\n      \"statusBarItem.remoteHoverForeground\": \"#000000\",\n      \"editorGroupHeader.tabsBackground\": \"#ffffff0a\",\n      \"tab.border\": \"#ffffff01\",\n      \"tab.inactiveBackground\": \"#ffffff01\",\n      \"widget.shadow\": \"#00000000\",\n      \"scrollbar.shadow\": \"#00000000\"\n    }\n  },\n  \"workbench.preferredDarkColorTheme\": \"Vira Ocean\",\n  \"workbench.productIconTheme\": \"viraUIIcons\",\n  \"viraTheme.contrastedTabs\": true,\n  \"viraTheme.hidesShadows\": true,\n  \"chat.todoListTool.enabled\": false,\n  \"chat.tools.edits.autoApprove\": {\n    \"**/*.{csproj,fsproj,vbproj}\": true\n  },\n  \"chat.useChatSessionsForCloudButton\": true,\n  \"workbench.settings.applyToAllProfiles\": [\n    \"chat.useChatSessionsForCloudButton\"\n  ],\n  \"chat.agentSessionsViewLocation\": \"view\",\n  \"window.density.editorTabHeight\": \"compact\",\n  \"docker.extension.enableComposeLanguageServer\": false,\n  \"docker.extension.dockerEngineAvailabilityPrompt\": false,\n  \"github.copilot.chat.agent.thinkingTool\": true,\n  \"github.copilot.chat.editor.temporalContext.enabled\": true,\n  \"github.copilot.chat.edits.temporalContext.enabled\": true,\n  \"github.copilot.chat.responsesApiReasoningEffort\": \"high\",\n  \"github.copilot.chat.responsesApiReasoningSummary\": \"detailed\",\n  \"github.copilot.chat.useResponsesApi\": true,\n  \"viraTheme.useTopTabIndicator\": true,\n  \"remoteHub.richNavigation.enabled\": true,\n  \"workbench.editor.enablePreview\": false,\n  \"deno.codeLens.test\": true,\n  \"deno.codeLens.referencesAllFunctions\": true,\n  \"deno.codeLens.references\": true,\n  \"deno.codeLens.implementations\": true,\n  \"deno.logFile\": true,\n  \"chat.mcp.serverSampling\": {\n    \"Global in Code: memory\": {\n      \"allowedModels\": [\n        \"copilot/gpt-4.1\",\n        \"copilot/auto\",\n        \"copilot/claude-3.7-sonnet\",\n        \"copilot/claude-3.7-sonnet-thought\",\n        \"copilot/claude-sonnet-4\",\n        \"copilot/gemini-2.5-pro\",\n        \"copilot/gpt-5\",\n        \"copilot/grok-code-fast-1\"\n      ]\n    }\n  },\n  \"snyk.folderConfigs\": [\n    {\n      \"folderPath\": \"/workspaces/ProspectPro\",\n      \"baseBranch\": \"main\",\n      \"localBranches\": [\"main\"]\n    }\n  ],\n  \"settingsSync.ignoredExtensions\": [\n    \"christian-kohler.npm-intellisense\",\n    \"ms-vscode.vscode-node-azure-pack\",\n    \"ms-azuretools.vscode-azurevirtualmachines\"\n  ],\n  \"vsicons.dontShowNewVersionMessage\": true,\n  \"snyk.yesWelcomeNotification\": false,\n  \"snyk.trustedFolders\": [\"/workspaces/ProspectPro\"],\n  \"[dockercompose]\": {\n    \"editor.insertSpaces\": true,\n    \"editor.tabSize\": 2,\n    \"editor.autoIndent\": \"advanced\",\n    \"editor.quickSuggestions\": {\n      \"other\": true,\n      \"comments\": false,\n      \"strings\": true\n    },\n    \"editor.defaultFormatter\": \"redhat.vscode-yaml\"\n  },\n  \"[github-actions-workflow]\": {\n    \"editor.defaultFormatter\": \"redhat.vscode-yaml\"\n  },\n  \"extensions.ignoreRecommendations\": true\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":80,"duration":0.952},
{"type":"mark","name":"lsp.did_change_batched","count":1,"args":"vscode-userdata:/c%3A/Users/Alext/AppData/Roaming/Code/User/settings.json"},
{"type":"measure","name":"lsp.did_change_batched","count":1,"duration":0.9},
{"type":"mark","name":"lsp.did_change_batched","count":2,"args":"vscode-userdata:/c%3A/Users/Alext/AppData/Roaming/Code/User/settings.json"},
{"type":"measure","name":"lsp.did_change_batched","count":2,"duration":0.879},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":1,"duration":0.03},
{"type":"mark","name":"lsp.did_open","count":81,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json","languageId":"json","version":1,"text":"{\r\n  \"name\": \"prospectpro-verified-business-intelligence\",\r\n  \"version\": \"4.1.0\",\r\n  \"type\": \"module\",\r\n  \"description\": \"ProspectPro - Verified Business Intelligence Platform with Zero Fake Data Policy\",\r\n  \"scripts\": {\r\n    \"dev\": \"vite\",\r\n    \"dev:supabase\": \"supabase functions serve --no-verify-jwt --debug\",\r\n    \"deploy:critical\": \"supabase functions deploy business-discovery-optimized && supabase functions deploy enrichment-orchestrator\",\r\n    \"deploy:all\": \"supabase functions deploy business-discovery-optimized && supabase functions deploy enrichment-orchestrator && supabase functions deploy campaign-export && supabase functions deploy enrichment-hunter\",\r\n    \"test:edge\": \"curl -X POST 'http://localhost:54321/functions/v1/business-discovery-optimized' -H 'Content-Type: application/json' -d '{\\\"businessType\\\":\\\"test\\\",\\\"location\\\":\\\"test\\\"}'\",\r\n    \"logs:live\": \"supabase functions logs --follow\",\r\n    \"logs:errors\": \"supabase functions logs --filter=error\",\r\n    \"mcp:prod\": \"cd mcp-servers && npm run start:production\",\r\n    \"mcp:dev\": \"cd mcp-servers && npm run start:development\",\r\n    \"mcp:debug\": \"cd mcp-servers && npm run start:troubleshooting\",\r\n    \"frontend:build\": \"npm run build\",\r\n    \"frontend:deploy\": \"npm run build && cd dist && vercel --prod\",\r\n    \"static:deploy\": \"npm run build && cd dist && vercel --prod\",\r\n    \"health:check\": \"curl -f https://prospectpro.appsmithery.co/ || echo 'Health check failed'\",\r\n    \"cost:analyze\": \"echo 'Check GitHub billing dashboard for usage trends'\",\r\n    \"build\": \"tsc && vite build && echo '{\\\"version\\\":2,\\\"rewrites\\\":[{\\\"source\\\":\\\"/(.*)\\\",\\\"destination\\\":\\\"/index.html\\\"}],\\\"headers\\\":[{\\\"source\\\":\\\"/(.*)\\\",\\\"headers\\\":[{\\\"key\\\":\\\"Cache-Control\\\",\\\"value\\\":\\\"public, max-age=0, s-maxage=0, must-revalidate\\\"}]},{\\\"source\\\":\\\"/assets/(.*)\\\",\\\"headers\\\":[{\\\"key\\\":\\\"Cache-Control\\\",\\\"value\\\":\\\"public, max-age=31536000, immutable\\\"}]}]}' > dist/vercel.json\",\r\n    \"preview\": \"vite preview\",\r\n    \"lint\": \"eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0\",\r\n    \"type-check\": \"tsc --noEmit\",\r\n    \"build:static\": \"npm run build\",\r\n    \"deploy:vercel\": \"vercel --prod\",\r\n    \"deploy:netlify\": \"netlify deploy --prod --dir=dist\",\r\n    \"deploy:gcs\": \"npm run build && gsutil -m rsync -r -d ./dist/ gs://prospectpro-static-frontend/\",\r\n    \"serve:local\": \"npm run preview\",\r\n    \"test:edge-functions\": \"supabase functions serve\",\r\n    \"deploy:edge-functions\": \"supabase functions deploy business-discovery && supabase functions deploy business-discovery-optimized && supabase functions deploy campaign-export\",\r\n    \"db:setup\": \"echo 'Run SQL from /database/supabase-first-schema.sql in Supabase dashboard'\",\r\n    \"db:status\": \"supabase db status\",\r\n    \"functions:list\": \"supabase functions list\",\r\n    \"functions:logs\": \"supabase functions logs\",\r\n    \"clean\": \"rm -rf dist/ node_modules/ && echo 'Cleaned build artifacts'\",\r\n    \"archive:legacy\": \"mkdir -p archive/legacy-server && mv server.js api/ modules/ docker/ archive/legacy-server/ 2>/dev/null || echo 'Legacy files managed separately'\",\r\n    \"health\": \"echo 'Use Edge Function endpoints for health checks'\",\r\n    \"test\": \"echo 'Test Edge Functions via Supabase dashboard or curl'\",\r\n    \"test:verified-contacts\": \"echo 'Test verified contact discovery with zero fake data validation'\",\r\n    \"mcp:install\": \"cd mcp-servers && npm install\",\r\n    \"mcp:test\": \"cd mcp-servers && npm run test\",\r\n    \"mcp:start\": \"cd mcp-servers && npm run start:all\",\r\n    \"mcp:troubleshoot\": \"cd mcp-servers && npm run start:troubleshooting\",\r\n    \"debug:quick\": \"echo 'Common issue: Check anon key sync and verified contact authentication'\",\r\n    \"debug:edge-function\": \"echo 'Test Verified Edge Function: curl -X POST https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-optimized -H \\\"Authorization: Bearer YOUR_ANON_KEY\\\" -H \\\"Content-Type: application/json\\\" -d \\\"{\\\\\\\"businessType\\\\\\\": \\\\\\\"test\\\\\\\", \\\\\\\"location\\\\\\\": \\\\\\\"test\\\\\\\"}\\\"'\",\r\n    \"debug:vercel\": \"echo 'Check Vercel deployment: curl -I https://your-vercel-url.vercel.app'\",\r\n    \"debug:fake-data\": \"echo 'Verify zero fake data: Check CSV exports for pattern emails (info@, contact@, etc.)'\"\r\n  },\r\n  \"keywords\": [\r\n    \"verified-business-intelligence\",\r\n    \"professional-contacts\",\r\n    \"apollo-api\",\r\n    \"chamber-of-commerce\",\r\n    \"professional-licensing\",\r\n    \"zero-fake-data\",\r\n    \"supabase\",\r\n    \"edge-functions\",\r\n    \"verified-contacts\"\r\n  ],\r\n  \"author\": \"Alex Torelli\",\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {\r\n    \"@googlemaps/js-api-loader\": \"^2.0.1\",\r\n    \"@supabase/supabase-js\": \"^2.39.0\",\r\n    \"@tanstack/react-query\": \"^5.17.0\",\r\n    \"clsx\": \"^2.0.0\",\r\n    \"lucide-react\": \"^0.294.0\",\r\n    \"react\": \"^18.2.0\",\r\n    \"react-dom\": \"^18.2.0\",\r\n    \"react-router-dom\": \"^6.20.1\",\r\n    \"recharts\": \"^2.8.0\",\r\n    \"tailwind-merge\": \"^2.2.0\",\r\n    \"zustand\": \"^4.4.7\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/react\": \"^18.2.43\",\r\n    \"@types/react-dom\": \"^18.2.17\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^6.14.0\",\r\n    \"@typescript-eslint/parser\": \"^6.14.0\",\r\n    \"@vitejs/plugin-react\": \"^4.2.1\",\r\n    \"autoprefixer\": \"^10.4.16\",\r\n    \"eslint\": \"^8.55.0\",\r\n    \"eslint-plugin-react\": \"^7.37.5\",\r\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\r\n    \"eslint-plugin-react-refresh\": \"^0.4.5\",\r\n    \"postcss\": \"^8.4.32\",\r\n    \"tailwindcss\": \"^3.3.6\",\r\n    \"typescript\": \"^5.2.2\",\r\n    \"vite\": \"^5.0.8\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \"22.x\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/Alextorelli/ProspectPro\"\r\n  },\r\n  \"architecture\": {\r\n    \"frontend\": \"Static HTML/JS with verified contact display\",\r\n    \"backend\": \"Supabase Edge Functions with zero fake data\",\r\n    \"database\": \"Supabase PostgreSQL with verification tracking\",\r\n    \"contacts\": \"Apollo API + Professional Licensing + Chamber Directories\",\r\n    \"dataPolicy\": \"Zero fake data - verified contacts only\",\r\n    \"hosting\": \"Static hosting (Cloud Storage/CDN)\",\r\n    \"deployment\": \"Supabase CLI + gsutil\"\r\n  }\r\n}\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":81,"duration":0.086},
{"type":"mark","name":"lsp.did_open","count":82,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/archive/deployment-logs/package.json","languageId":"json","version":1,"text":"{\r\n  \"name\": \"prospect-pro-real-api\",\r\n  \"version\": \"3.1.0\",\r\n  \"description\": \"Production-grade lead generation platform with Enhanced Quality Scoring v3.0, zero-fake-data policy and Supabase Vault integration\",\r\n  \"main\": \"server.js\",\r\n  \"scripts\": {\r\n    \"start\": \"node server.js\",\r\n    \"dev\": \"nodemon server.js\",\r\n    \"prod\": \"NODE_ENV=production node server.js\",\r\n    \"production:start\": \"powershell -ExecutionPolicy Bypass -File ./scripts/init-prod-simple.ps1\",\r\n    \"production:checklist\": \"echo 'Production checklist: Check .env file, test database connection, validate APIs'\",\r\n    \"prod:init\": \"powershell -ExecutionPolicy Bypass -File ./scripts/init-prod-simple.ps1\",\r\n    \"prod:setup-env\": \"node ./scripts/pull-env-from-secrets.js\",\r\n    \"prod:check\": \"node --version && echo Production environment ready\",\r\n    \"health\": \"curl http://localhost:3100/health || echo 'Server not running'\",\r\n    \"diag\": \"curl http://localhost:3100/diag | json_pp || echo 'Server not running'\",\r\n    \"test\": \"echo 'Tests moved to testing branch. Run: git checkout testing && node tests/validation/test-real-data.js'\",\r\n    \"postinstall\": \"echo 'ProspectPro v3.0: Production-ready deployment configured'\",\r\n    \"docker:dev\": \"./docker/start-dev.sh\",\r\n    \"docker:prod\": \"./docker/deploy-prod.sh\",\r\n    \"docker:build\": \"docker-compose build\",\r\n    \"docker:package\": \"./docker/create-client-package.sh\",\r\n    \"docker:logs\": \"docker-compose logs -f prospectpro\",\r\n    \"docker:stop\": \"docker-compose down\",\r\n    \"docker:restart\": \"docker-compose restart\",\r\n    \"secure:setup\": \"./docker/secure-start.sh setup\",\r\n    \"secure:start\": \"./docker/secure-start.sh start\",\r\n    \"secure:dev\": \"./docker/secure-start.sh dev\",\r\n    \"keychain:setup\": \"./docker/keychain-start.sh setup\",\r\n    \"keychain:start\": \"./docker/keychain-start.sh start\",\r\n    \"1password:setup\": \"./docker/1password-start.sh setup\",\r\n    \"1password:start\": \"./docker/1password-start.sh start\",\r\n    \"vault:deploy\": \"echo '🔐 Deploying with Supabase Vault integration...' && docker-compose up --build -d\",\r\n    \"vault:dev\": \"echo '🔐 Starting development with Supabase Vault...' && docker-compose -f docker-compose.dev.yml up --build\",\r\n    \"vault:logs\": \"docker-compose logs -f prospectpro\",\r\n    \"vault:test\": \"echo '🧪 Testing Vault connection...' && docker-compose exec prospectpro curl -f http://localhost:3000/diag\",\r\n    \"mcp:install\": \"cd mcp-servers && npm install\",\r\n    \"mcp:test\": \"cd mcp-servers && node test-servers.js\",\r\n    \"mcp:start:database\": \"cd mcp-servers && node database-server.js\",\r\n    \"mcp:start:api\": \"cd mcp-servers && node api-server.js\",\r\n    \"mcp:start:filesystem\": \"cd mcp-servers && node filesystem-server.js\",\r\n    \"mcp:start:monitoring\": \"cd mcp-servers && node monitoring-server.js\",\r\n    \"mcp:start:production\": \"cd mcp-servers && node production-server.js\",\r\n    \"mcp:start:all\": \"cd mcp-servers && npm run start:all\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=20.0.0\",\r\n    \"npm\": \">=9.0.0\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@googlemaps/google-maps-services-js\": \"^3.4.2\",\r\n    \"@modelcontextprotocol/sdk\": \"^1.18.1\",\r\n    \"@supabase/supabase-js\": \"^2.57.4\",\r\n    \"axios\": \"^1.12.2\",\r\n    \"bcryptjs\": \"^2.4.3\",\r\n    \"cheerio\": \"^1.1.2\",\r\n    \"cors\": \"^2.8.5\",\r\n    \"csv-writer\": \"^1.6.0\",\r\n    \"dotenv\": \"^16.6.1\",\r\n    \"express\": \"^4.18.2\",\r\n    \"express-rate-limit\": \"^8.1.0\",\r\n    \"helmet\": \"^7.2.0\",\r\n    \"jsonwebtoken\": \"^9.0.2\",\r\n    \"node-fetch\": \"^2.7.0\",\r\n    \"p-limit\": \"^3.1.0\",\r\n    \"pg\": \"^8.16.3\",\r\n    \"prom-client\": \"^15.1.3\",\r\n    \"rate-limiter-flexible\": \"^2.4.2\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"jest\": \"^30.1.3\",\r\n    \"nodemon\": \"^3.1.10\",\r\n    \"supabase\": \"^2.45.5\",\r\n    \"supertest\": \"^7.1.4\"\r\n  },\r\n  \"keywords\": [\r\n    \"lead-generation\",\r\n    \"business-intelligence\",\r\n    \"api-integration\"\r\n  ],\r\n  \"author\": \"ProspectPro Development Team\",\r\n  \"license\": \"MIT\"\r\n}"}}},
{"type":"measure","name":"lsp.did_open","count":82,"duration":0.072},
{"type":"mark","name":"lsp.did_close","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"}}},
{"type":"measure","name":"lsp.did_close","count":2,"duration":0.064},
{"type":"mark","name":"lsp.did_close","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"}}},
{"type":"measure","name":"lsp.did_close","count":3,"duration":0.033},
{"type":"mark","name":"lsp.did_close","count":4,"args":{"textDocument":{"uri":"vscode-userdata:/c%3A/Users/Alext/AppData/Roaming/Code/User/settings.json"}}},
{"type":"measure","name":"lsp.did_close","count":4,"duration":0.007},
{"type":"mark","name":"lsp.did_close","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json"}}},
{"type":"measure","name":"lsp.did_close","count":5,"duration":0.036},
{"type":"mark","name":"lsp.did_close","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/archive/deployment-logs/package.json"}}},
{"type":"measure","name":"lsp.did_close","count":6,"duration":0.036},
{"type":"mark","name":"lsp.did_open","count":83,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json","languageId":"jsonc","version":1,"text":"{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n\n    /* Path mapping */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":83,"duration":0.05},
{"type":"mark","name":"lsp.did_close","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json"}}},
{"type":"measure","name":"lsp.did_close","count":7,"duration":0.038},
{"type":"mark","name":"lsp.did_open","count":84,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json","languageId":"jsonc","version":1,"text":"{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n\n    /* Path mapping */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":84,"duration":0.053},
{"type":"mark","name":"lsp.goto_definition","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},"position":{"line":30,"character":13}}},
{"type":"mark","name":"lsp.goto_definition","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx"},"position":{"line":42,"character":6}}},
{"type":"mark","name":"lsp.goto_definition","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx"},"position":{"line":42,"character":6}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":1,"duration":0.032},
{"type":"mark","name":"lsp.document_symbol","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.did_change_batched","count":3,"args":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":3,"duration":5.776},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":2,"duration":0.01},
{"type":"measure","name":"lsp.testing_update","count":35,"duration":0.473},
{"type":"mark","name":"lsp.inlay_hint","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":89,"character":3}}}},
{"type":"mark","name":"lsp.document_symbol","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.semantic_tokens_range","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":7,"character":0},"end":{"line":59,"character":3}}}},
TS server started.
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":1,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/src/stores/campaignStore.ts",{"start":276,"length":1504},"2020"]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":1,"duration":0.633},
{"type":"mark","name":"tsc.op.op_load","count":1,"args":"file:///workspaces/ProspectPro/.eslintrc.cjs"},
{"type":"measure","name":"tsc.op.op_load","count":1,"duration":0.061},
{"type":"mark","name":"tsc.op.op_load","count":2,"args":"file:///workspaces/ProspectPro/API_KEY_SOLUTION.md"},
{"type":"measure","name":"tsc.op.op_load","count":2,"duration":0.057},
{"type":"mark","name":"tsc.op.op_load","count":3,"args":"file:///workspaces/ProspectPro/CHANGELOG.md"},
{"type":"measure","name":"tsc.op.op_load","count":3,"duration":0.058},
{"type":"mark","name":"tsc.op.op_load","count":4,"args":"file:///workspaces/ProspectPro/DEPLOYMENT_CHECKLIST.md"},
{"type":"measure","name":"tsc.op.op_load","count":4,"duration":0.078},
{"type":"mark","name":"tsc.op.op_resolve","count":1,"args":{"base":"file:///workspaces/ProspectPro/DEPLOYMENT_CHECKLIST.md","specifiers":[[false,"../hooks/useJobProgress"],[false,"react-router-dom"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1,"duration":0.095},
{"type":"mark","name":"tsc.op.op_load","count":5,"args":"file:///workspaces/ProspectPro/DEPLOYMENT_SUCCESS.md"},
{"type":"measure","name":"tsc.op.op_load","count":5,"duration":0.039},
{"type":"mark","name":"tsc.op.op_load","count":6,"args":"file:///workspaces/ProspectPro/DOCUMENTATION_INDEX.md"},
{"type":"measure","name":"tsc.op.op_load","count":6,"duration":0.048},
{"type":"mark","name":"tsc.op.op_load","count":7,"args":"file:///workspaces/ProspectPro/DOCUMENTATION_UPDATE_SUMMARY.md"},
{"type":"measure","name":"tsc.op.op_load","count":7,"duration":0.046},
{"type":"mark","name":"tsc.op.op_load","count":8,"args":"file:///workspaces/ProspectPro/EDGE_FUNCTION_AUTH_FIX.md"},
{"type":"measure","name":"tsc.op.op_load","count":8,"duration":0.042},
{"type":"mark","name":"tsc.op.op_load","count":9,"args":"file:///workspaces/ProspectPro/EDGE_FUNCTION_AUTH_UPDATE_GUIDE.md"},
{"type":"measure","name":"tsc.op.op_load","count":9,"duration":0.044},
{"type":"mark","name":"tsc.op.op_load","count":10,"args":"file:///workspaces/ProspectPro/EDGE_FUNCTION_JWT_ISSUE.md"},
{"type":"measure","name":"tsc.op.op_load","count":10,"duration":0.048},
{"type":"mark","name":"tsc.op.op_load","count":11,"args":"file:///workspaces/ProspectPro/FINAL_JWT_ANON_KEY_SOLUTION.md"},
{"type":"measure","name":"tsc.op.op_load","count":11,"duration":0.041},
{"type":"mark","name":"tsc.op.op_load","count":12,"args":"file:///workspaces/ProspectPro/INDEX_BACKGROUND_TASKS.md"},
{"type":"measure","name":"tsc.op.op_load","count":12,"duration":0.098},
{"type":"mark","name":"lsp.semantic_tokens_full","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"tsc.op.op_load","count":13,"args":"file:///workspaces/ProspectPro/LATEST_DEPLOYMENT.md"},
{"type":"measure","name":"tsc.op.op_load","count":13,"duration":0.053},
{"type":"mark","name":"tsc.op.op_load","count":14,"args":"file:///workspaces/ProspectPro/NEED_ANON_KEY.md"},
{"type":"measure","name":"tsc.op.op_load","count":14,"duration":0.032},
{"type":"mark","name":"tsc.op.op_load","count":15,"args":"file:///workspaces/ProspectPro/PRODUCTION_MCP_SERVER_INITIALIZED.md"},
{"type":"measure","name":"tsc.op.op_load","count":15,"duration":0.037},
{"type":"mark","name":"tsc.op.op_load","count":16,"args":"file:///workspaces/ProspectPro/PRODUCTION_READY_V4.2.md"},
{"type":"measure","name":"tsc.op.op_load","count":16,"duration":0.067},
{"type":"mark","name":"tsc.op.op_load","count":17,"args":"file:///workspaces/ProspectPro/PRODUCTION_READY_V4.3.md"},
{"type":"measure","name":"tsc.op.op_load","count":17,"duration":0.044},
{"type":"mark","name":"tsc.op.op_load","count":18,"args":"file:///workspaces/ProspectPro/PROSPECTPRO_V4.3_RELEASE_NOTES.md"},
{"type":"measure","name":"tsc.op.op_load","count":18,"duration":0.042},
{"type":"mark","name":"tsc.op.op_load","count":19,"args":"file:///workspaces/ProspectPro/QUICKSTART_BACKGROUND_TASKS.md"},
{"type":"measure","name":"tsc.op.op_load","count":19,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":2,"args":{"base":"file:///workspaces/ProspectPro/QUICKSTART_BACKGROUND_TASKS.md","specifiers":[[false,"../hooks/useJobProgress"],[false,"react-router-dom"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":2,"duration":0.067},
{"type":"mark","name":"tsc.op.op_load","count":20,"args":"file:///workspaces/ProspectPro/README.md"},
{"type":"measure","name":"tsc.op.op_load","count":20,"duration":0.042},
{"type":"mark","name":"tsc.op.op_load","count":21,"args":"file:///workspaces/ProspectPro/README_BACKGROUND_TASKS.md"},
{"type":"measure","name":"tsc.op.op_load","count":21,"duration":0.052},
{"type":"mark","name":"tsc.op.op_load","count":22,"args":"file:///workspaces/ProspectPro/ROOT_CAUSE_ANALYSIS_COMPLETE.md"},
{"type":"measure","name":"tsc.op.op_load","count":22,"duration":0.054},
{"type":"mark","name":"tsc.op.op_load","count":23,"args":"file:///workspaces/ProspectPro/TECHNICAL_SUMMARY_v4.3.md"},
{"type":"measure","name":"tsc.op.op_load","count":23,"duration":0.05},
{"type":"mark","name":"tsc.op.op_load","count":24,"args":"file:///workspaces/ProspectPro/database/2025-10-10-deterministic-dedupe.sql"},
{"type":"measure","name":"tsc.op.op_load","count":24,"duration":0.037},
{"type":"mark","name":"tsc.op.op_load","count":25,"args":"file:///workspaces/ProspectPro/database/auth-and-payments-schema.sql"},
{"type":"measure","name":"tsc.op.op_load","count":25,"duration":0.072},
{"type":"mark","name":"tsc.op.op_load","count":26,"args":"file:///workspaces/ProspectPro/database/cleanup-queries.sql"},
{"type":"measure","name":"tsc.op.op_load","count":26,"duration":0.05},
{"type":"mark","name":"tsc.op.op_load","count":27,"args":"file:///workspaces/ProspectPro/database/enrichment-cache-schema.sql"},
{"type":"measure","name":"tsc.op.op_load","count":27,"duration":0.036},
{"type":"mark","name":"tsc.op.op_load","count":28,"args":"file:///workspaces/ProspectPro/database/fix-foreign-key-constraint.sql"},
{"type":"measure","name":"tsc.op.op_load","count":28,"duration":0.046},
{"type":"mark","name":"tsc.op.op_load","count":29,"args":"file:///workspaces/ProspectPro/database/job-queue-schema.sql"},
{"type":"measure","name":"tsc.op.op_load","count":29,"duration":0.075},
{"type":"mark","name":"tsc.op.op_load","count":30,"args":"file:///workspaces/ProspectPro/database/security-fixes-consolidated.sql"},
{"type":"measure","name":"tsc.op.op_load","count":30,"duration":0.129},
{"type":"mark","name":"tsc.op.op_load","count":31,"args":"file:///workspaces/ProspectPro/database/security-update-oct-2025.sql"},
{"type":"measure","name":"tsc.op.op_load","count":31,"duration":0.073},
{"type":"mark","name":"tsc.op.op_load","count":32,"args":"file:///workspaces/ProspectPro/docs/CAMPAIGN_DEBUGGING_GUIDE.md"},
{"type":"measure","name":"tsc.op.op_load","count":32,"duration":0.15},
{"type":"mark","name":"tsc.op.op_load","count":33,"args":"file:///workspaces/ProspectPro/docs/DEBUG_COLLECTION_GUIDE.md"},
{"type":"measure","name":"tsc.op.op_load","count":33,"duration":0.084},
{"type":"mark","name":"tsc.op.op_load","count":34,"args":"file:///workspaces/ProspectPro/docs/PRODUCTION_VALIDATION_STRATEGY.md"},
{"type":"measure","name":"tsc.op.op_load","count":34,"duration":0.052},
{"type":"mark","name":"tsc.op.op_load","count":35,"args":"file:///workspaces/ProspectPro/docs/VALIDATION_TOOLKIT.md"},
{"type":"measure","name":"tsc.op.op_load","count":35,"duration":0.065},
{"type":"mark","name":"tsc.op.op_load","count":36,"args":"file:///workspaces/ProspectPro/docs/deployment/ENHANCED_DEPLOYMENT_GUIDE.md"},
{"type":"measure","name":"tsc.op.op_load","count":36,"duration":0.257},
{"type":"mark","name":"tsc.op.op_load","count":37,"args":"file:///workspaces/ProspectPro/docs/frontend/FRONTEND_INTEGRATION_GUIDE.md"},
{"type":"measure","name":"tsc.op.op_load","count":37,"duration":0.075},
{"type":"mark","name":"tsc.op.op_load","count":38,"args":"file:///workspaces/ProspectPro/index.html"},
{"type":"measure","name":"tsc.op.op_load","count":38,"duration":0.033},
{"type":"mark","name":"tsc.op.op_load","count":39,"args":"file:///workspaces/ProspectPro/mcp-config.json"},
{"type":"measure","name":"tsc.op.op_load","count":39,"duration":0.034},
{"type":"mark","name":"tsc.op.op_load","count":40,"args":"file:///workspaces/ProspectPro/mcp-servers/PRODUCTION_MCP_INITIALIZED.md"},
{"type":"measure","name":"tsc.op.op_load","count":40,"duration":0.035},
{"type":"mark","name":"tsc.op.op_load","count":41,"args":"file:///workspaces/ProspectPro/mcp-servers/README.md"},
{"type":"measure","name":"tsc.op.op_load","count":41,"duration":0.055},
{"type":"mark","name":"tsc.op.op_load","count":42,"args":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},
{"type":"measure","name":"tsc.op.op_load","count":42,"duration":0.131},
{"type":"mark","name":"tsc.op.op_resolve","count":3,"args":{"base":"file:///workspaces/ProspectPro/mcp-servers/production-server.js","specifiers":[[true,"@modelcontextprotocol/sdk/server/index.js"],[true,"@modelcontextprotocol/sdk/server/stdio.js"],[true,"@modelcontextprotocol/sdk/types.js"],[true,"@supabase/supabase-js"],[true,"https"],[true,"child_process"],[true,"fs"],[true,"path"],[true,"../modules/api-clients/google-places-client"],[true,"../modules/api-clients/foursquare-places-client"],[true,"../modules/api-clients/hunter-io-client"],[true,"../modules/api-clients/neverbounce-client"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":3,"duration":0.144},
{"type":"mark","name":"tsc.op.op_load","count":43,"args":"file:///workspaces/ProspectPro/src/App.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":43,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":4,"args":{"base":"file:///workspaces/ProspectPro/src/App.tsx","specifiers":[[false,"react-router-dom"],[false,"./components/ErrorBoundary"],[false,"./components/Layout"],[false,"./contexts/AuthContext"],[false,"./pages/AccountPage"],[false,"./pages/AdminPanel"],[false,"./pages/AuthCallback"],[false,"./pages/BusinessDiscovery"],[false,"./pages/Campaign"],[false,"./pages/CampaignProgress"],[false,"./pages/Dashboard"],[false,"./pages/Results"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":4,"duration":0.287},
{"type":"mark","name":"tsc.op.op_load","count":44,"args":"file:///workspaces/ProspectPro/src/components/ErrorBoundary.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":44,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":5,"args":{"base":"file:///workspaces/ProspectPro/src/components/ErrorBoundary.tsx","specifiers":[[false,"react"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":5,"duration":0.027},
{"type":"mark","name":"tsc.op.op_load","count":45,"args":"file:///workspaces/ProspectPro/src/components/Layout.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":45,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":6,"args":{"base":"file:///workspaces/ProspectPro/src/components/Layout.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../contexts/AuthContext"],[false,"../stores/campaignStore"],[false,"./AuthComponent"],[false,"./ThemeToggle"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":6,"duration":0.142},
{"type":"mark","name":"tsc.op.op_load","count":46,"args":"file:///workspaces/ProspectPro/src/contexts/AuthContext.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":46,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":7,"args":{"base":"file:///workspaces/ProspectPro/src/contexts/AuthContext.tsx","specifiers":[[false,"@supabase/supabase-js"],[false,"react"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":7,"duration":0.056},
{"type":"mark","name":"tsc.op.op_load","count":47,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"tsc.op.op_load","count":47,"duration":0.046},
{"type":"mark","name":"tsc.op.op_resolve","count":8,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","specifiers":[[false,"@tanstack/react-query"],[false,"react"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../types"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":8,"duration":2.267},
{"type":"mark","name":"tsc.op.op_load","count":48,"args":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},
{"type":"measure","name":"tsc.op.op_load","count":48,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":9,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts","specifiers":[[false,"@tanstack/react-query"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../types"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":9,"duration":0.144},
{"type":"mark","name":"tsc.op.op_load","count":49,"args":"file:///workspaces/ProspectPro/src/hooks/useLeadEnrichment.ts"},
{"type":"measure","name":"tsc.op.op_load","count":49,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":10,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useLeadEnrichment.ts","specifiers":[[false,"@tanstack/react-query"],[false,"react"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":10,"duration":0.058},
{"type":"mark","name":"tsc.op.op_load","count":50,"args":"file:///workspaces/ProspectPro/src/lib/supabase.ts"},
{"type":"measure","name":"tsc.op.op_load","count":50,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":11,"args":{"base":"file:///workspaces/ProspectPro/src/lib/supabase.ts","specifiers":[[false,"@supabase/supabase-js"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":11,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":51,"args":"file:///workspaces/ProspectPro/src/pages/AccountPage.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":51,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":12,"args":{"base":"file:///workspaces/ProspectPro/src/pages/AccountPage.tsx","specifiers":[[false,"react"],[false,"../components/ApiUsageTable"],[false,"../contexts/AuthContext"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":12,"duration":0.068},
{"type":"mark","name":"tsc.op.op_load","count":52,"args":"file:///workspaces/ProspectPro/src/pages/BusinessDiscovery.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":52,"duration":0.08},
{"type":"mark","name":"tsc.op.op_resolve","count":13,"args":{"base":"file:///workspaces/ProspectPro/src/pages/BusinessDiscovery.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/GeographicSelector"],[false,"../components/MultiSelectBusinessTypes"],[false,"../components/ProgressDisplay"],[false,"../components/TierSelector"],[false,"../constants/businessTaxonomy"],[false,"../contexts/AuthContext"],[false,"../hooks/useBusinessDiscovery"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/exportLeadsToCsv"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":13,"duration":0.281},
{"type":"mark","name":"tsc.op.op_load","count":53,"args":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":53,"duration":0.044},
{"type":"mark","name":"tsc.op.op_resolve","count":14,"args":{"base":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/EnrichmentButton"],[false,"../components/ProgressDisplay"],[false,"../hooks/useBusinessDiscovery"],[false,"../hooks/useCampaignResults"],[false,"../stores/campaignStore"],[false,"../types"],[false,"../utils/exportLeadsToCsv"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":14,"duration":0.16},
{"type":"mark","name":"tsc.op.op_load","count":54,"args":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":54,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":15,"args":{"base":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/ProgressDisplay"],[false,"../contexts/AuthContext"],[false,"../hooks/useJobProgress"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":15,"duration":0.12},
{"type":"mark","name":"tsc.op.op_load","count":55,"args":"file:///workspaces/ProspectPro/src/pages/Dashboard.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":55,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":16,"args":{"base":"file:///workspaces/ProspectPro/src/pages/Dashboard.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../stores/campaignStore"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":16,"duration":0.068},
{"type":"mark","name":"tsc.op.op_load","count":56,"args":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":56,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":17,"args":{"base":"file:///workspaces/ProspectPro/src/pages/Results.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../hooks/useCampaignResults"],[false,"../stores/campaignStore"],[false,"../utils/exportLeadsToCsv"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":17,"duration":0.073},
{"type":"mark","name":"tsc.op.op_load","count":57,"args":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},
{"type":"measure","name":"tsc.op.op_load","count":57,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":18,"args":{"base":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts","specifiers":[[false,"zustand"],[false,"../types"],[false,"./utils/leadSanitizers"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":18,"duration":0.083},
{"type":"mark","name":"tsc.op.op_load","count":58,"args":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts"},
{"type":"measure","name":"tsc.op.op_load","count":58,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":19,"args":{"base":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts","specifiers":[[false,"zustand"],[false,"../types"],[false,"./utils/leadSanitizers"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":19,"duration":0.078},
{"type":"mark","name":"tsc.op.op_load","count":59,"args":"file:///workspaces/ProspectPro/src/stores/utils/leadSanitizers.ts"},
{"type":"measure","name":"tsc.op.op_load","count":59,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":20,"args":{"base":"file:///workspaces/ProspectPro/src/stores/utils/leadSanitizers.ts","specifiers":[[false,"../../types"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":20,"duration":0.056},
{"type":"mark","name":"tsc.op.op_load","count":60,"args":"file:///workspaces/ProspectPro/src/types/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":60,"duration":0.028},
{"type":"mark","name":"tsc.op.op_load","count":61,"args":"file:///workspaces/ProspectPro/src/utils/campaignTransforms.ts"},
{"type":"measure","name":"tsc.op.op_load","count":61,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":21,"args":{"base":"file:///workspaces/ProspectPro/src/utils/campaignTransforms.ts","specifiers":[[false,"../types"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":21,"duration":0.052},
{"type":"mark","name":"tsc.op.op_load","count":62,"args":"file:///workspaces/ProspectPro/src/vite-env.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":62,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":22,"args":{"base":"file:///workspaces/ProspectPro/src/vite-env.d.ts","specifiers":[[false,"vite/client"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":22,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":63,"args":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts"},
{"type":"measure","name":"tsc.op.op_load","count":63,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":23,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":23,"duration":33.128},
{"type":"mark","name":"tsc.op.op_load","count":64,"args":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":64,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":24,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":24,"duration":12.441},
{"type":"mark","name":"tsc.op.op_load","count":65,"args":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":65,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":25,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":25,"duration":2.669},
{"type":"mark","name":"tsc.op.op_load","count":66,"args":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":66,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":26,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":26,"duration":7.208},
{"type":"mark","name":"tsc.op.op_load","count":67,"args":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":67,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":27,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":27,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":68,"args":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":68,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":69,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":69,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":28,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":28,"duration":10.446},
{"type":"mark","name":"tsc.op.op_load","count":70,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":70,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":29,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":29,"duration":0.033},
{"type":"mark","name":"tsc.op.op_load","count":71,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":71,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":30,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":30,"duration":0.032},
{"type":"mark","name":"tsc.op.op_load","count":72,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":72,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":31,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":31,"duration":3.162},
{"type":"mark","name":"tsc.op.op_load","count":73,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":73,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":32,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":32,"duration":0.04},
{"type":"mark","name":"tsc.op.op_load","count":74,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":74,"duration":0.404},
{"type":"mark","name":"tsc.op.op_resolve","count":33,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":33,"duration":0.889},
{"type":"mark","name":"tsc.op.op_load","count":75,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":75,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":34,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":34,"duration":0.034},
{"type":"mark","name":"tsc.op.op_load","count":76,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestError.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":76,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":77,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":77,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":35,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":35,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":78,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":78,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":36,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":36,"duration":6.09},
{"type":"mark","name":"tsc.op.op_load","count":79,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":79,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":37,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":37,"duration":0.051},
{"type":"mark","name":"tsc.op.op_load","count":80,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":80,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":38,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":38,"duration":0.054},
{"type":"mark","name":"tsc.op.op_load","count":81,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":81,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":39,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":39,"duration":5.193},
{"type":"mark","name":"tsc.op.op_load","count":82,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":82,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":40,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":40,"duration":1.23},
{"type":"mark","name":"tsc.op.op_load","count":83,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/websocket-factory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":83,"duration":0.035},
{"type":"mark","name":"tsc.op.op_load","count":84,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/constants.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":84,"duration":0.024},
{"type":"mark","name":"tsc.op.op_load","count":85,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/serializer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":85,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":86,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/timer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":86,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":87,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":87,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":41,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":41,"duration":0.614},
{"type":"mark","name":"tsc.op.op_load","count":88,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":88,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":42,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":42,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":89,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":89,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":43,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":43,"duration":1.591},
{"type":"mark","name":"tsc.op.op_load","count":90,"args":"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":90,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":91,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":91,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":44,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":44,"duration":1.431},
{"type":"mark","name":"tsc.op.op_load","count":92,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":92,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":45,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":45,"duration":2.333},
{"type":"mark","name":"tsc.op.op_load","count":93,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":93,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":46,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":46,"duration":0.734},
{"type":"mark","name":"tsc.op.op_load","count":94,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/errors.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":94,"duration":0.027},
{"type":"mark","name":"tsc.op.op_load","count":95,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":95,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":47,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":47,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":96,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":96,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":48,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":48,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":97,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":97,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":49,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":49,"duration":5.961},
{"type":"mark","name":"tsc.op.op_load","count":98,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":98,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":50,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":50,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":99,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":99,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":51,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":51,"duration":0.035},
{"type":"mark","name":"tsc.op.op_load","count":100,"args":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":100,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":52,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":52,"duration":0.025},
{"type":"mark","name":"tsc.op.op_load","count":101,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":101,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":53,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":53,"duration":10.139},
{"type":"mark","name":"tsc.op.op_load","count":102,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":102,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":54,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":54,"duration":1.098},
{"type":"mark","name":"tsc.op.op_load","count":103,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":103,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":55,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":55,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":104,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":104,"duration":0.063},
{"type":"mark","name":"tsc.op.op_resolve","count":56,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":56,"duration":5.258},
{"type":"mark","name":"tsc.op.op_load","count":105,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/web3/ethereum.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":105,"duration":0.029},
{"type":"mark","name":"tsc.op.op_load","count":106,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":106,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":57,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":57,"duration":0.516},
{"type":"mark","name":"tsc.op.op_load","count":107,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/error-codes.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":107,"duration":0.023},
{"type":"mark","name":"tsc.op.op_load","count":108,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/web3/solana.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":108,"duration":0.029},
{"type":"mark","name":"tsc.op.op_load","count":109,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":109,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":58,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":58,"duration":1.852},
{"type":"mark","name":"tsc.op.op_load","count":110,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":110,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":59,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":59,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":111,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":111,"duration":0.855},
{"type":"mark","name":"tsc.op.op_resolve","count":60,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":60,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":112,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":112,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":61,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":61,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":113,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/locks.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":113,"duration":0.024},
{"type":"mark","name":"tsc.op.op_load","count":114,"args":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":114,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":62,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":62,"duration":0.039},
{"type":"mark","name":"tsc.op.op_load","count":115,"args":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts"},
{"type":"measure","name":"tsc.op.op_load","count":115,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":63,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":63,"duration":0.03},
{"type":"mark","name":"tsc.op.op_load","count":116,"args":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts"},
{"type":"measure","name":"tsc.op.op_load","count":116,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":64,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":64,"duration":4.419},
{"type":"mark","name":"tsc.op.op_load","count":117,"args":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":117,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":65,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":65,"duration":5.818},
{"type":"mark","name":"tsc.op.op_load","count":118,"args":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":118,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":66,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":66,"duration":2.422},
{"type":"mark","name":"tsc.op.op_load","count":119,"args":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":119,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":67,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":67,"duration":1.537},
{"type":"mark","name":"tsc.op.op_load","count":120,"args":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":120,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":68,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":68,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":121,"args":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":121,"duration":0.016},
{"type":"mark","name":"tsc.op.op_load","count":122,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":122,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":69,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":69,"duration":11.087},
{"type":"mark","name":"tsc.op.op_load","count":123,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":123,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":70,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":70,"duration":0.031},
{"type":"mark","name":"tsc.op.op_load","count":124,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":124,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":71,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":71,"duration":0.032},
{"type":"mark","name":"tsc.op.op_load","count":125,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":125,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":72,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":72,"duration":0.026},
{"type":"mark","name":"tsc.op.op_load","count":126,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":126,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":73,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":73,"duration":0.034},
{"type":"mark","name":"tsc.op.op_load","count":127,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":127,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":74,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":74,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":128,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":128,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":75,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":75,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":129,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestError.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":129,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":130,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":130,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":76,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":76,"duration":10.206},
{"type":"mark","name":"tsc.op.op_load","count":131,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":131,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":77,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":77,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":132,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":132,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":78,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":78,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":133,"args":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":133,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":79,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":79,"duration":0.027},
{"type":"mark","name":"tsc.op.op_load","count":134,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":134,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":80,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":80,"duration":6.295},
{"type":"mark","name":"tsc.op.op_load","count":135,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":135,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":81,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":81,"duration":2.301},
{"type":"mark","name":"tsc.op.op_load","count":136,"args":"https://esm.sh/@types/ws@8.5.13/index.d.mts"},
{"type":"measure","name":"tsc.op.op_load","count":136,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":82,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":82,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":137,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/constants.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":137,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":138,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/serializer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":138,"duration":0.023},
{"type":"mark","name":"tsc.op.op_load","count":139,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/timer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":139,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":140,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":140,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":83,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":83,"duration":0.501},
{"type":"mark","name":"tsc.op.op_load","count":141,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":141,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":84,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":84,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":142,"args":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":142,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":85,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":85,"duration":0.027},
{"type":"mark","name":"tsc.op.op_load","count":143,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":143,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":86,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":86,"duration":3.595},
{"type":"mark","name":"tsc.op.op_load","count":144,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":144,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":87,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":87,"duration":2.732},
{"type":"mark","name":"tsc.op.op_load","count":145,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":145,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":88,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":88,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":146,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/errors.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":146,"duration":0.013},
{"type":"mark","name":"tsc.op.op_load","count":147,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":147,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":89,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":89,"duration":0.014},
{"type":"mark","name":"tsc.op.op_load","count":148,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":148,"duration":0.033},
{"type":"mark","name":"tsc.op.op_load","count":149,"args":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":149,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":90,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":90,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":150,"args":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":150,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":91,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":91,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":151,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":151,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":92,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":92,"duration":91.011},
{"type":"mark","name":"tsc.op.op_load","count":152,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":152,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":93,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":93,"duration":2.212},
{"type":"mark","name":"tsc.op.op_load","count":153,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":153,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":94,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":94,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":154,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":154,"duration":0.065},
{"type":"mark","name":"tsc.op.op_resolve","count":95,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":95,"duration":0.476},
{"type":"mark","name":"tsc.op.op_load","count":155,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":155,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":96,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":96,"duration":1.347},
{"type":"mark","name":"tsc.op.op_load","count":156,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/error-codes.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":156,"duration":0.106},
{"type":"mark","name":"tsc.op.op_load","count":157,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":157,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":97,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":97,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":158,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":158,"duration":0.059},
{"type":"mark","name":"tsc.op.op_resolve","count":98,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":98,"duration":0.606},
{"type":"mark","name":"tsc.op.op_load","count":159,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":159,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":99,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":99,"duration":0.039},
{"type":"mark","name":"tsc.op.op_load","count":160,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":160,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":100,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":100,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":161,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":161,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":101,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":101,"duration":0.016},
{"type":"mark","name":"tsc.op.op_load","count":162,"args":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/locks.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":162,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":163,"args":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":163,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":102,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":102,"duration":0.026},
{"type":"mark","name":"tsc.op.op_load","count":164,"args":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts"},
{"type":"measure","name":"tsc.op.op_load","count":164,"duration":0.055},
{"type":"mark","name":"tsc.op.op_resolve","count":103,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":103,"duration":0.032},
{"type":"mark","name":"tsc.op.op_load","count":165,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":165,"duration":0.147},
{"type":"mark","name":"tsc.op.op_resolve","count":104,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":104,"duration":4.803},
{"type":"mark","name":"tsc.op.op_load","count":166,"args":"https://deno.land/std@0.168.0/http/server.ts"},
{"type":"measure","name":"tsc.op.op_load","count":166,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":105,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":105,"duration":0.429},
{"type":"mark","name":"tsc.op.op_load","count":167,"args":"https://deno.land/std@0.168.0/async/mod.ts"},
{"type":"measure","name":"tsc.op.op_load","count":167,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":106,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":106,"duration":9.648},
{"type":"mark","name":"tsc.op.op_load","count":168,"args":"https://deno.land/std@0.168.0/async/abortable.ts"},
{"type":"measure","name":"tsc.op.op_load","count":168,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":107,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":107,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":169,"args":"https://deno.land/std@0.168.0/async/deferred.ts"},
{"type":"measure","name":"tsc.op.op_load","count":169,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":170,"args":"https://deno.land/std@0.168.0/async/deadline.ts"},
{"type":"measure","name":"tsc.op.op_load","count":170,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":108,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":108,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":171,"args":"https://deno.land/std@0.168.0/async/debounce.ts"},
{"type":"measure","name":"tsc.op.op_load","count":171,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":172,"args":"https://deno.land/std@0.168.0/async/delay.ts"},
{"type":"measure","name":"tsc.op.op_load","count":172,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":173,"args":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts"},
{"type":"measure","name":"tsc.op.op_load","count":173,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":109,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":109,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":174,"args":"https://deno.land/std@0.168.0/async/pool.ts"},
{"type":"measure","name":"tsc.op.op_load","count":174,"duration":0.015},
{"type":"mark","name":"tsc.op.op_load","count":175,"args":"https://deno.land/std@0.168.0/async/tee.ts"},
{"type":"measure","name":"tsc.op.op_load","count":175,"duration":0.028},
{"type":"mark","name":"tsc.op.op_load","count":176,"args":"https://deno.land/std@0.168.0/async/retry.ts"},
{"type":"measure","name":"tsc.op.op_load","count":176,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":177,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":177,"duration":0.105},
{"type":"mark","name":"tsc.op.op_resolve","count":110,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":110,"duration":0.071},
{"type":"mark","name":"tsc.op.op_load","count":178,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":178,"duration":0.059},
{"type":"mark","name":"tsc.op.op_resolve","count":111,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":111,"duration":0.08},
{"type":"mark","name":"tsc.op.op_load","count":179,"args":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":179,"duration":0.058},
{"type":"mark","name":"tsc.op.op_resolve","count":112,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":112,"duration":0.065},
{"type":"mark","name":"tsc.op.op_load","count":180,"args":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":180,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":113,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":113,"duration":0.064},
{"type":"mark","name":"tsc.op.op_load","count":181,"args":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":181,"duration":0.523},
{"type":"mark","name":"tsc.op.op_resolve","count":114,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":114,"duration":0.063},
{"type":"mark","name":"tsc.op.op_load","count":182,"args":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":182,"duration":0.061},
{"type":"mark","name":"tsc.op.op_resolve","count":115,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":115,"duration":0.04},
{"type":"mark","name":"tsc.op.op_load","count":183,"args":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":183,"duration":0.149},
{"type":"mark","name":"tsc.op.op_resolve","count":116,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":116,"duration":0.043},
{"type":"mark","name":"tsc.op.op_load","count":184,"args":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":184,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":117,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":117,"duration":0.035},
{"type":"mark","name":"tsc.op.op_load","count":185,"args":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":185,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":118,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":118,"duration":0.033},
{"type":"mark","name":"tsc.op.op_load","count":186,"args":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":186,"duration":0.063},
{"type":"mark","name":"tsc.op.op_resolve","count":119,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":119,"duration":0.061},
{"type":"mark","name":"tsc.op.op_load","count":187,"args":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":187,"duration":0.507},
{"type":"mark","name":"tsc.op.op_resolve","count":120,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":120,"duration":0.034},
{"type":"mark","name":"tsc.op.op_load","count":188,"args":"file:///workspaces/ProspectPro/supabase/migrations/20251008073003_security_hardening_oct_8_2025.sql"},
{"type":"measure","name":"tsc.op.op_load","count":188,"duration":0.026},
{"type":"mark","name":"tsc.op.op_load","count":189,"args":"file:///workspaces/ProspectPro/supabase/migrations/20251008080709_security_fixes_consolidated.sql"},
{"type":"measure","name":"tsc.op.op_load","count":189,"duration":0.037},
{"type":"mark","name":"tsc.op.op_load","count":190,"args":"file:///workspaces/ProspectPro/tsconfig.json"},
{"type":"measure","name":"tsc.op.op_load","count":190,"duration":0.045},
{"type":"mark","name":"tsc.op.op_load","count":191,"args":"file:///workspaces/ProspectPro/vite.config.ts"},
{"type":"measure","name":"tsc.op.op_load","count":191,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":121,"args":{"base":"file:///workspaces/ProspectPro/vite.config.ts","specifiers":[[false,"@vitejs/plugin-react"],[false,"path"],[false,"vite"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":121,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":192,"args":"asset:///lib.deno.window.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":192,"duration":2.374},
{"type":"mark","name":"tsc.op.op_load","count":193,"args":"asset:///lib.deno.ns.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":193,"duration":8.402},
{"type":"mark","name":"tsc.op.op_load","count":194,"args":"asset:///lib.esnext.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":194,"duration":0.135},
{"type":"mark","name":"tsc.op.op_load","count":195,"args":"asset:///lib.es2024.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":195,"duration":0.063},
{"type":"mark","name":"tsc.op.op_load","count":196,"args":"asset:///lib.es2023.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":196,"duration":0.056},
{"type":"mark","name":"tsc.op.op_load","count":197,"args":"asset:///lib.es2022.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":197,"duration":0.053},
{"type":"mark","name":"tsc.op.op_load","count":198,"args":"asset:///lib.es2021.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":198,"duration":0.049},
{"type":"mark","name":"tsc.op.op_load","count":199,"args":"asset:///lib.es2020.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":199,"duration":0.052},
{"type":"mark","name":"tsc.op.op_load","count":200,"args":"asset:///lib.es2019.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":200,"duration":0.054},
{"type":"mark","name":"tsc.op.op_load","count":201,"args":"asset:///lib.es2018.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":201,"duration":0.056},
{"type":"mark","name":"tsc.op.op_load","count":202,"args":"asset:///lib.es2017.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":202,"duration":0.059},
{"type":"mark","name":"tsc.op.op_load","count":203,"args":"asset:///lib.es2016.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":203,"duration":0.051},
{"type":"mark","name":"tsc.op.op_load","count":204,"args":"asset:///lib.es2015.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":204,"duration":0.06},
{"type":"mark","name":"tsc.op.op_load","count":205,"args":"asset:///lib.es5.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":205,"duration":23.198},
{"type":"mark","name":"tsc.op.op_load","count":206,"args":"asset:///lib.decorators.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":206,"duration":0.774},
{"type":"mark","name":"tsc.op.op_load","count":207,"args":"asset:///lib.decorators.legacy.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":207,"duration":0.151},
{"type":"mark","name":"tsc.op.op_load","count":208,"args":"asset:///lib.es2015.core.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":208,"duration":3.069},
{"type":"mark","name":"tsc.op.op_load","count":209,"args":"asset:///lib.es2015.collection.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":209,"duration":0.554},
{"type":"mark","name":"tsc.op.op_load","count":210,"args":"asset:///lib.es2015.iterable.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":210,"duration":1.788},
{"type":"mark","name":"tsc.op.op_load","count":211,"args":"asset:///lib.es2015.symbol.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":211,"duration":0.116},
{"type":"mark","name":"tsc.op.op_load","count":212,"args":"asset:///lib.es2015.generator.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":212,"duration":0.221},
{"type":"mark","name":"tsc.op.op_load","count":213,"args":"asset:///lib.es2015.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":213,"duration":0.245},
{"type":"mark","name":"tsc.op.op_load","count":214,"args":"asset:///lib.es2015.proxy.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":214,"duration":0.323},
{"type":"mark","name":"tsc.op.op_load","count":215,"args":"asset:///lib.es2015.reflect.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":215,"duration":0.397},
{"type":"mark","name":"tsc.op.op_load","count":216,"args":"asset:///lib.es2015.symbol.wellknown.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":216,"duration":1.097},
{"type":"mark","name":"tsc.op.op_load","count":217,"args":"asset:///lib.es2016.array.include.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":217,"duration":0.259},
{"type":"mark","name":"tsc.op.op_load","count":218,"args":"asset:///lib.es2016.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":218,"duration":0.091},
{"type":"mark","name":"tsc.op.op_load","count":219,"args":"asset:///lib.es2017.arraybuffer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":219,"duration":0.071},
{"type":"mark","name":"tsc.op.op_load","count":220,"args":"asset:///lib.es2017.date.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":220,"duration":0.098},
{"type":"mark","name":"tsc.op.op_load","count":221,"args":"asset:///lib.es2017.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":221,"duration":0.134},
{"type":"mark","name":"tsc.op.op_load","count":222,"args":"asset:///lib.es2017.object.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":222,"duration":0.159},
{"type":"mark","name":"tsc.op.op_load","count":223,"args":"asset:///lib.es2017.sharedmemory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":223,"duration":0.567},
{"type":"mark","name":"tsc.op.op_load","count":224,"args":"asset:///lib.es2017.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":224,"duration":0.137},
{"type":"mark","name":"tsc.op.op_load","count":225,"args":"asset:///lib.es2017.typedarrays.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":225,"duration":0.144},
{"type":"mark","name":"tsc.op.op_load","count":226,"args":"asset:///lib.es2018.asynciterable.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":226,"duration":0.256},
{"type":"mark","name":"tsc.op.op_load","count":227,"args":"asset:///lib.es2018.asyncgenerator.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":227,"duration":0.255},
{"type":"mark","name":"tsc.op.op_load","count":228,"args":"asset:///lib.es2018.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":228,"duration":0.114},
{"type":"mark","name":"tsc.op.op_load","count":229,"args":"asset:///lib.es2018.regexp.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":229,"duration":0.196},
{"type":"mark","name":"tsc.op.op_load","count":230,"args":"asset:///lib.es2018.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":230,"duration":0.323},
{"type":"mark","name":"tsc.op.op_load","count":231,"args":"asset:///lib.es2019.array.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":231,"duration":0.261},
{"type":"mark","name":"tsc.op.op_load","count":232,"args":"asset:///lib.es2019.object.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":232,"duration":3.699},
{"type":"mark","name":"tsc.op.op_load","count":233,"args":"asset:///lib.es2019.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":233,"duration":0.099},
{"type":"mark","name":"tsc.op.op_load","count":234,"args":"asset:///lib.es2019.symbol.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":234,"duration":0.069},
{"type":"mark","name":"tsc.op.op_load","count":235,"args":"asset:///lib.es2019.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":235,"duration":0.105},
{"type":"mark","name":"tsc.op.op_load","count":236,"args":"asset:///lib.es2020.bigint.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":236,"duration":4.16},
{"type":"mark","name":"tsc.op.op_load","count":237,"args":"asset:///lib.es2020.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":237,"duration":1.181},
{"type":"mark","name":"tsc.op.op_load","count":238,"args":"asset:///lib.es2020.date.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":238,"duration":0.144},
{"type":"mark","name":"tsc.op.op_load","count":239,"args":"asset:///lib.es2020.number.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":239,"duration":0.088},
{"type":"mark","name":"tsc.op.op_load","count":240,"args":"asset:///lib.es2020.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":240,"duration":0.173},
{"type":"mark","name":"tsc.op.op_load","count":241,"args":"asset:///lib.es2020.sharedmemory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":241,"duration":2.345},
{"type":"mark","name":"tsc.op.op_load","count":242,"args":"asset:///lib.es2020.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":242,"duration":0.144},
{"type":"mark","name":"tsc.op.op_load","count":243,"args":"asset:///lib.es2020.symbol.wellknown.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":243,"duration":0.151},
{"type":"mark","name":"tsc.op.op_load","count":244,"args":"asset:///lib.es2021.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":244,"duration":0.177},
{"type":"mark","name":"tsc.op.op_load","count":245,"args":"asset:///lib.es2021.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":245,"duration":0.112},
{"type":"mark","name":"tsc.op.op_load","count":246,"args":"asset:///lib.es2021.weakref.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":246,"duration":0.223},
{"type":"mark","name":"tsc.op.op_load","count":247,"args":"asset:///lib.es2021.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":247,"duration":0.439},
{"type":"mark","name":"tsc.op.op_load","count":248,"args":"asset:///lib.es2022.array.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":248,"duration":0.292},
{"type":"mark","name":"tsc.op.op_load","count":249,"args":"asset:///lib.es2022.error.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":249,"duration":0.261},
{"type":"mark","name":"tsc.op.op_load","count":250,"args":"asset:///lib.es2022.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":250,"duration":0.354},
{"type":"mark","name":"tsc.op.op_load","count":251,"args":"asset:///lib.es2022.object.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":251,"duration":0.071},
{"type":"mark","name":"tsc.op.op_load","count":252,"args":"asset:///lib.es2022.regexp.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":252,"duration":2.142},
{"type":"mark","name":"tsc.op.op_load","count":253,"args":"asset:///lib.es2022.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":253,"duration":0.066},
{"type":"mark","name":"tsc.op.op_load","count":254,"args":"asset:///lib.es2023.array.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":254,"duration":3.476},
{"type":"mark","name":"tsc.op.op_load","count":255,"args":"asset:///lib.es2023.collection.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":255,"duration":0.088},
{"type":"mark","name":"tsc.op.op_load","count":256,"args":"asset:///lib.es2023.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":256,"duration":0.293},
{"type":"mark","name":"tsc.op.op_load","count":257,"args":"asset:///lib.es2024.arraybuffer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":257,"duration":0.15},
{"type":"mark","name":"tsc.op.op_load","count":258,"args":"asset:///lib.es2024.collection.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":258,"duration":0.1},
{"type":"mark","name":"tsc.op.op_load","count":259,"args":"asset:///lib.es2024.object.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":259,"duration":0.101},
{"type":"mark","name":"tsc.op.op_load","count":260,"args":"asset:///lib.es2024.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":260,"duration":0.13},
{"type":"mark","name":"tsc.op.op_load","count":261,"args":"asset:///lib.es2024.regexp.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":261,"duration":0.068},
{"type":"mark","name":"tsc.op.op_load","count":262,"args":"asset:///lib.es2024.sharedmemory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":262,"duration":0.193},
{"type":"mark","name":"tsc.op.op_load","count":263,"args":"asset:///lib.es2024.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":263,"duration":0.073},
{"type":"mark","name":"tsc.op.op_load","count":264,"args":"asset:///lib.esnext.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":264,"duration":0.066},
{"type":"mark","name":"tsc.op.op_load","count":265,"args":"asset:///lib.esnext.decorators.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":265,"duration":0.088},
{"type":"mark","name":"tsc.op.op_load","count":266,"args":"asset:///lib.esnext.disposable.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":266,"duration":0.437},
{"type":"mark","name":"tsc.op.op_load","count":267,"args":"asset:///lib.esnext.collection.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":267,"duration":0.306},
{"type":"mark","name":"tsc.op.op_load","count":268,"args":"asset:///lib.esnext.array.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":268,"duration":0.156},
{"type":"mark","name":"tsc.op.op_load","count":269,"args":"asset:///lib.esnext.iterator.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":269,"duration":0.724},
{"type":"mark","name":"tsc.op.op_load","count":270,"args":"asset:///lib.esnext.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":270,"duration":0.112},
{"type":"mark","name":"tsc.op.op_load","count":271,"args":"asset:///lib.esnext.float16.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":271,"duration":2.228},
{"type":"mark","name":"tsc.op.op_load","count":272,"args":"asset:///lib.esnext.error.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":272,"duration":0.145},
{"type":"mark","name":"tsc.op.op_load","count":273,"args":"asset:///lib.esnext.sharedmemory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":273,"duration":0.083},
{"type":"mark","name":"tsc.op.op_load","count":274,"args":"asset:///lib.deno.net.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":274,"duration":1.603},
{"type":"mark","name":"tsc.op.op_load","count":275,"args":"asset:///lib.deno.shared_globals.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":275,"duration":2.389},
{"type":"mark","name":"tsc.op.op_load","count":276,"args":"asset:///lib.deno.console.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":276,"duration":0.319},
{"type":"mark","name":"tsc.op.op_load","count":277,"args":"asset:///lib.deno.url.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":277,"duration":0.892},
{"type":"mark","name":"tsc.op.op_load","count":278,"args":"asset:///lib.deno.web.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":278,"duration":13.185},
{"type":"mark","name":"tsc.op.op_load","count":279,"args":"asset:///lib.deno.webgpu.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":279,"duration":3.69},
{"type":"mark","name":"tsc.op.op_load","count":280,"args":"asset:///lib.deno.canvas.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":280,"duration":0.359},
{"type":"mark","name":"tsc.op.op_load","count":281,"args":"asset:///lib.deno.fetch.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":281,"duration":1.266},
{"type":"mark","name":"tsc.op.op_load","count":282,"args":"asset:///lib.deno.websocket.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":282,"duration":0.552},
{"type":"mark","name":"tsc.op.op_load","count":283,"args":"asset:///lib.deno.crypto.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":283,"duration":1.272},
{"type":"mark","name":"tsc.op.op_load","count":284,"args":"asset:///lib.deno.webstorage.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":284,"duration":1.477},
{"type":"mark","name":"tsc.op.op_load","count":285,"args":"asset:///lib.deno.cache.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":285,"duration":0.219},
{"type":"mark","name":"tsc.op.op_load","count":286,"args":"asset:///lib.deno.unstable.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":286,"duration":19.906},
{"type":"mark","name":"tsc.op.op_load","count":287,"args":"asset:///lib.deno.broadcast_channel.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":287,"duration":0.258},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":1,"duration":0.013},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":2,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":3,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":4,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":5,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":6,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":7,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":8,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":9,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":10,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":11,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":12,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":13,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":14,"duration":0.005},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":15,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":16,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":17,"duration":0.005},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":18,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":19,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":20,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":21,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":22,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":23,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":24,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":25,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":26,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":27,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":28,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":29,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":30,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":31,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":32,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":33,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":34,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":35,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":36,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":37,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":38,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":39,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":40,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":41,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":42,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":43,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":44,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":45,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":46,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":47,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":48,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":49,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":50,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":51,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":52,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":53,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":54,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":55,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":56,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":57,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":58,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":59,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":60,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":61,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":62,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":63,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":64,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":65,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":66,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":67,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":68,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":69,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":70,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":71,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":72,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":73,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":74,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":75,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":76,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":77,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":78,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":79,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":80,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":81,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":82,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":83,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":84,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":85,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":86,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":87,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":88,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":89,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":90,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":91,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":92,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":93,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":94,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":95,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":96,"duration":0.007},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":97,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":98,"duration":0.006},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":99,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":100,"duration":0.011},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":1,"duration":3034.061},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":1,"duration":3670.38},
{"type":"measure","name":"lsp.semantic_tokens_range","count":1,"duration":3670.948},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":2,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/src/stores/campaignStore.ts",{"start":0,"length":5407},"2020"]}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":2,"duration":79.443},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":2,"duration":2782.754},
{"type":"measure","name":"lsp.semantic_tokens_full","count":1,"duration":2782.919},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":2,"duration":0.021},
{"type":"mark","name":"lsp.folding_range","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.code_lens","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.document_symbol","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.code_action","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":60,"character":0},"end":{"line":170,"character":10}}}},
{"type":"mark","name":"lsp.did_close","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json"}}},
{"type":"measure","name":"lsp.did_close","count":8,"duration":0.03},
{"type":"mark","name":"lsp.inlay_hint","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":60,"character":0},"end":{"line":170,"character":10}}}},
{"type":"mark","name":"lsp.inlay_hint","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":60,"character":0},"end":{"line":170,"character":10}}}},
{"type":"mark","name":"lsp.inlay_hint","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":60,"character":0},"end":{"line":170,"character":10}}}},
{"type":"mark","name":"lsp.did_change_batched","count":4,"args":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":4,"duration":7.149},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":3,"duration":0.011},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":36,"duration":0.373},
{"type":"mark","name":"lsp.inlay_hint","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":60,"character":0},"end":{"line":173,"character":0}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":3,"duration":0.022},
{"type":"mark","name":"lsp.document_symbol","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.semantic_tokens_full","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.inlay_hint","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":3,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/src/stores/campaignStore.ts",{"start":0,"length":5916},"2020"]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":1,"duration":0.029},
{"type":"mark","name":"tsc.op.op_load","count":288,"args":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},
{"type":"measure","name":"tsc.op.op_load","count":288,"duration":5.077},
{"type":"mark","name":"tsc.op.op_resolve","count":122,"args":{"base":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts","specifiers":[[false,"zustand"],[false,"../types"],[false,"./utils/leadSanitizers"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":122,"duration":0.118},
{"type":"mark","name":"lsp.folding_range","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":3,"duration":206.191},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":3,"duration":211.84},
{"type":"measure","name":"lsp.semantic_tokens_full","count":2,"duration":212.0},
{"type":"mark","name":"lsp.code_lens","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.inlay_hint","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":4,"duration":0.022},
{"type":"mark","name":"lsp.did_change_batched","count":5,"args":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":5,"duration":16.391},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":5,"duration":0.012},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":37,"duration":0.357},
{"type":"mark","name":"lsp.inlay_hint","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":6,"duration":0.002},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":4,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.did_change_batched","count":6,"args":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":6,"duration":6.413},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":7,"duration":0.012},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":38,"duration":0.341},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":8,"duration":0.001},
{"type":"mark","name":"lsp.inlay_hint","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":5,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.goto_definition","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},"position":{"line":18,"character":13}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":9,"duration":0.026},
{"type":"mark","name":"lsp.did_change_batched","count":7,"args":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":7,"duration":5.519},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":10,"duration":0.01},
{"type":"measure","name":"lsp.testing_update","count":39,"duration":0.333},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":11,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":12,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":6,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.did_change_batched","count":8,"args":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":8,"duration":5.989},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":13,"duration":0.012},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":40,"duration":0.352},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":14,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":15,"duration":0.002},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":7,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.did_change_batched","count":9,"args":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":41,"duration":0.333},
{"type":"measure","name":"lsp.did_change_batched","count":9,"duration":10.741},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":16,"duration":0.008},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":17,"duration":0.012},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":18,"duration":0.023},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":19,"duration":0.023},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":20,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":8,"duration":0.021},
{"type":"mark","name":"lsp.inlay_hint","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.goto_definition","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"position":{"line":14,"character":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":10,"args":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":10,"duration":6.09},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":21,"duration":0.012},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":42,"duration":0.398},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":22,"duration":0.002},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":23,"duration":0.023},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":24,"duration":0.022},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":9,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.did_change_batched","count":11,"args":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":11,"duration":4.831},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":25,"duration":0.01},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":43,"duration":0.334},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":26,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":27,"duration":0.014},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":28,"duration":0.019},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":10,"duration":0.023},
{"type":"mark","name":"lsp.document_symbol","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.inlay_hint","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.semantic_tokens_full","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":4,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/src/stores/campaignStore.ts",{"start":0,"length":6203},"2020"]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":2,"duration":0.039},
{"type":"mark","name":"tsc.op.op_load","count":289,"args":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},
{"type":"measure","name":"tsc.op.op_load","count":289,"duration":0.57},
{"type":"mark","name":"tsc.op.op_load","count":290,"args":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":290,"duration":0.052},
{"type":"mark","name":"tsc.op.op_load","count":291,"args":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},
{"type":"measure","name":"tsc.op.op_load","count":291,"duration":0.056},
{"type":"mark","name":"tsc.op.op_load","count":292,"args":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts"},
{"type":"measure","name":"tsc.op.op_load","count":292,"duration":0.089},
{"type":"mark","name":"tsc.op.op_resolve","count":123,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts","specifiers":[[false,"@tanstack/react-query"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../types"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":123,"duration":0.133},
{"type":"mark","name":"tsc.op.op_resolve","count":124,"args":{"base":"file:///workspaces/ProspectPro/src/pages/Results.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../hooks/useCampaignResults"],[false,"../stores/campaignStore"],[false,"../utils/exportLeadsToCsv"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":124,"duration":0.075},
{"type":"mark","name":"tsc.op.op_resolve","count":125,"args":{"base":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts","specifiers":[[false,"zustand"],[false,"../types"],[false,"./utils/leadSanitizers"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":125,"duration":0.091},
{"type":"mark","name":"tsc.op.op_resolve","count":126,"args":{"base":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts","specifiers":[[false,"zustand"],[false,"../types"],[false,"./utils/leadSanitizers"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":126,"duration":1.273},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":4,"duration":297.367},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":4,"duration":303.781},
{"type":"measure","name":"lsp.semantic_tokens_full","count":3,"duration":303.94},
{"type":"mark","name":"lsp.inlay_hint","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.code_lens","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.document_symbol","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.inlay_hint","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.folding_range","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.did_change_watched_files","count":1,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/vercel.json","type":3}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":1,"duration":0.016},
{"type":"mark","name":"lsp.did_change_watched_files","count":2,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/vercel.json","type":1}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":2,"duration":0.018},
{"type":"mark","name":"lsp.goto_definition","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx"},"position":{"line":42,"character":6}}},
{"type":"mark","name":"lsp.goto_definition","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},"position":{"line":30,"character":13}}},
{"type":"mark","name":"lsp.goto_definition","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx"},"position":{"line":42,"character":6}}},
{"type":"mark","name":"lsp.goto_definition","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx"},"position":{"line":42,"character":6}}},
{"type":"mark","name":"lsp.goto_definition","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"position":{"line":2,"character":9}}},
{"type":"mark","name":"lsp.inlay_hint","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.goto_definition","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},"position":{"line":4,"character":9}}},
{"type":"mark","name":"lsp.inlay_hint","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.inlay_hint","count":40,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":57,"character":0},"end":{"line":162,"character":13}}}},
{"type":"mark","name":"lsp.goto_definition","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},"position":{"line":14,"character":2}}},
{"type":"mark","name":"lsp.goto_definition","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx"},"position":{"line":42,"character":6}}},
{"type":"mark","name":"lsp.goto_definition","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx"},"position":{"line":42,"character":6}}},
{"type":"mark","name":"lsp.goto_definition","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},"position":{"line":19,"character":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":41,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":60,"character":0},"end":{"line":173,"character":0}}}},
{"type":"mark","name":"lsp.did_change_batched","count":12,"args":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":12,"duration":9.134},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":29,"duration":0.011},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":44,"duration":0.327},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":30,"duration":0.023},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":11,"duration":0.024},
{"type":"mark","name":"lsp.document_symbol","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.inlay_hint","count":42,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":60,"character":0},"end":{"line":173,"character":11}}}},
{"type":"mark","name":"lsp.inlay_hint","count":43,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":60,"character":0},"end":{"line":173,"character":11}}}},
{"type":"mark","name":"lsp.did_change_batched","count":13,"args":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":13,"duration":2.003},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":31,"duration":0.01},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":45,"duration":0.372},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":32,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":14,"args":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},
{"type":"measure","name":"lsp.did_change_batched","count":14,"duration":3.73},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":33,"duration":0.01},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":46,"duration":0.306},
{"type":"mark","name":"lsp.did_change_batched","count":15,"args":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":15,"duration":2.322},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":34,"duration":0.01},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":47,"duration":0.361},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":12,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":35,"duration":0.007},
{"type":"mark","name":"lsp.inlay_hint","count":44,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":60,"character":0},"end":{"line":173,"character":11}}}},
{"type":"mark","name":"lsp.did_change_batched","count":16,"args":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":16,"duration":7.31},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":36,"duration":0.01},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":48,"duration":0.366},
{"type":"mark","name":"lsp.did_change_batched","count":17,"args":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":49,"duration":0.329},
{"type":"measure","name":"lsp.did_change_batched","count":17,"duration":12.213},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":37,"duration":0.011},
{"type":"mark","name":"lsp.semantic_tokens_full","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":5,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/src/stores/campaignStore.ts",{"start":0,"length":6291},"2020"]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":3,"duration":0.035},
{"type":"mark","name":"tsc.op.op_load","count":293,"args":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},
{"type":"measure","name":"tsc.op.op_load","count":293,"duration":0.036},
{"type":"mark","name":"tsc.op.op_load","count":294,"args":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":294,"duration":0.074},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":38,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":295,"args":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},
{"type":"measure","name":"tsc.op.op_load","count":295,"duration":0.057},
{"type":"mark","name":"tsc.op.op_load","count":296,"args":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts"},
{"type":"measure","name":"tsc.op.op_load","count":296,"duration":0.062},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":13,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":127,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts","specifiers":[[false,"@tanstack/react-query"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../types"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":127,"duration":0.14},
{"type":"mark","name":"tsc.op.op_resolve","count":128,"args":{"base":"file:///workspaces/ProspectPro/src/pages/Results.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../hooks/useCampaignResults"],[false,"../stores/campaignStore"],[false,"../utils/exportLeadsToCsv"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":128,"duration":0.082},
{"type":"mark","name":"tsc.op.op_resolve","count":129,"args":{"base":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts","specifiers":[[false,"zustand"],[false,"../types"],[false,"./utils/leadSanitizers"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":129,"duration":0.067},
{"type":"mark","name":"tsc.op.op_resolve","count":130,"args":{"base":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts","specifiers":[[false,"zustand"],[false,"../types"],[false,"./utils/leadSanitizers"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":130,"duration":0.059},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":5,"duration":567.262},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":5,"duration":575.51},
{"type":"measure","name":"lsp.semantic_tokens_full","count":4,"duration":575.654},
{"type":"mark","name":"lsp.inlay_hint","count":45,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":60,"character":0},"end":{"line":173,"character":11}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":39,"duration":0.02},
{"type":"mark","name":"lsp.did_change_batched","count":18,"args":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":18,"duration":25.547},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":40,"duration":0.013},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":50,"duration":0.355},
{"type":"mark","name":"lsp.inlay_hint","count":46,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":60,"character":0},"end":{"line":173,"character":11}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":14,"duration":0.024},
{"type":"mark","name":"lsp.code_lens","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":41,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":42,"duration":0.001},
{"type":"mark","name":"lsp.inlay_hint","count":47,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"range":{"start":{"line":60,"character":0},"end":{"line":173,"character":11}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":43,"duration":0.022},
{"type":"mark","name":"lsp.document_symbol","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.folding_range","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.hover","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},"position":{"line":112,"character":8}}},
{"type":"mark","name":"lsp.did_open","count":85,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json","languageId":"jsonc","version":1,"text":"{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n\n    /* Path mapping */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":85,"duration":0.057},
{"type":"mark","name":"lsp.goto_definition","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx"},"position":{"line":42,"character":6}}},
{"type":"mark","name":"lsp.did_close","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json"}}},
{"type":"measure","name":"lsp.did_close","count":9,"duration":0.031},
{"type":"mark","name":"lsp.did_open","count":86,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json","languageId":"jsonc","version":1,"text":"{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n\n    /* Path mapping */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":86,"duration":0.046},
{"type":"mark","name":"lsp.did_close","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json"}}},
{"type":"measure","name":"lsp.did_close","count":10,"duration":0.035},
{"type":"mark","name":"lsp.goto_definition","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/BusinessDiscovery.tsx"},"position":{"line":115,"character":21}}},
{"type":"mark","name":"lsp.did_open","count":87,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json","languageId":"jsonc","version":1,"text":"{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n\n    /* Path mapping */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":87,"duration":0.051},
{"type":"mark","name":"lsp.did_close","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json"}}},
{"type":"measure","name":"lsp.did_close","count":11,"duration":0.032},
{"type":"mark","name":"lsp.did_open","count":88,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json","languageId":"jsonc","version":1,"text":"{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n\n    /* Path mapping */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":88,"duration":0.052},
{"type":"mark","name":"lsp.did_close","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json"}}},
{"type":"measure","name":"lsp.did_close","count":12,"duration":0.03},
{"type":"mark","name":"lsp.did_open","count":89,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json","languageId":"jsonc","version":1,"text":"{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n\n    /* Path mapping */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":89,"duration":0.047},
{"type":"mark","name":"lsp.did_close","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json"}}},
{"type":"measure","name":"lsp.did_close","count":13,"duration":0.031},
{"type":"mark","name":"lsp.did_open","count":90,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json","languageId":"jsonc","version":1,"text":"{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n\n    /* Path mapping */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":90,"duration":0.046},
{"type":"mark","name":"lsp.did_close","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json"}}},
{"type":"measure","name":"lsp.did_close","count":14,"duration":0.03},
{"type":"mark","name":"lsp.did_open","count":91,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json","languageId":"jsonc","version":1,"text":"{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n\n    /* Path mapping */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":91,"duration":0.051},
{"type":"mark","name":"lsp.did_close","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json"}}},
{"type":"measure","name":"lsp.did_close","count":15,"duration":0.032},
{"type":"mark","name":"lsp.did_open","count":92,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json","languageId":"jsonc","version":1,"text":"{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n\n    /* Path mapping */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":92,"duration":0.047},
{"type":"mark","name":"lsp.did_close","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"measure","name":"lsp.did_close","count":16,"duration":1.003},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":51,"duration":0.365},
{"type":"mark","name":"lsp.did_close","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/PRODUCTION_MCP_INITIALIZED.md"}}},
{"type":"measure","name":"lsp.did_close","count":17,"duration":0.022},
{"type":"mark","name":"lsp.did_close","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/PRODUCTION_MCP_SERVER_INITIALIZED.md"}}},
{"type":"measure","name":"lsp.did_close","count":18,"duration":0.014},
{"type":"mark","name":"lsp.did_close","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/index.html"}}},
{"type":"measure","name":"lsp.did_close","count":19,"duration":0.011},
{"type":"mark","name":"lsp.did_close","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/components/Layout.tsx"}}},
{"type":"measure","name":"lsp.did_close","count":20,"duration":0.843},
{"type":"mark","name":"lsp.did_close","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/contexts/AuthContext.tsx"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":52,"duration":0.298},
{"type":"measure","name":"lsp.did_close","count":21,"duration":13.067},
{"type":"mark","name":"lsp.did_close","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/lib/supabase.ts"}}},
{"type":"measure","name":"lsp.did_close","count":22,"duration":0.697},
{"type":"mark","name":"lsp.did_close","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"}}},
{"type":"measure","name":"lsp.did_close","count":23,"duration":0.729},
{"type":"mark","name":"lsp.did_close","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useLeadEnrichment.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":53,"duration":0.34},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":54,"duration":0.317},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":55,"duration":0.254},
{"type":"measure","name":"lsp.did_close","count":24,"duration":3.604},
{"type":"mark","name":"lsp.did_close","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Dashboard.tsx"}}},
{"type":"measure","name":"lsp.did_close","count":25,"duration":0.646},
{"type":"mark","name":"lsp.did_close","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx"}}},
{"type":"measure","name":"lsp.did_close","count":26,"duration":0.638},
{"type":"mark","name":"lsp.did_close","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/BusinessDiscovery.tsx"}}},
{"type":"measure","name":"lsp.did_close","count":27,"duration":3.018},
{"type":"mark","name":"lsp.did_close","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/AccountPage.tsx"}}},
{"type":"measure","name":"lsp.did_close","count":28,"duration":0.753},
{"type":"mark","name":"lsp.did_close","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":56,"duration":0.436},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":57,"duration":0.948},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":58,"duration":1.379},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":59,"duration":1.722},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":60,"duration":1.506},
{"type":"measure","name":"lsp.did_close","count":29,"duration":17.479},
{"type":"mark","name":"lsp.did_close","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":61,"duration":0.713},
{"type":"measure","name":"lsp.did_close","count":30,"duration":3.419},
{"type":"mark","name":"lsp.did_close","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":62,"duration":0.313},
{"type":"measure","name":"lsp.did_close","count":31,"duration":3.356},
{"type":"mark","name":"lsp.did_close","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.eslintrc.cjs"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":63,"duration":0.286},
{"type":"measure","name":"lsp.did_close","count":32,"duration":0.573},
{"type":"mark","name":"lsp.did_close","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DOCUMENTATION_INDEX.md"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_close","count":33,"duration":0.015},
{"type":"mark","name":"lsp.did_close","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/job-queue-schema.sql"}}},
{"type":"measure","name":"lsp.did_close","count":34,"duration":0.013},
{"type":"mark","name":"lsp.did_close","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/fix-foreign-key-constraint.sql"}}},
{"type":"measure","name":"lsp.did_close","count":35,"duration":0.014},
{"type":"mark","name":"lsp.did_close","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/auth-and-payments-schema.sql"}}},
{"type":"measure","name":"lsp.did_close","count":36,"duration":0.014},
{"type":"mark","name":"lsp.did_close","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/security-update-oct-2025.sql"}}},
{"type":"measure","name":"lsp.did_close","count":37,"duration":0.011},
{"type":"mark","name":"lsp.did_close","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/migrations/20251008073003_security_hardening_oct_8_2025.sql"}}},
{"type":"measure","name":"lsp.did_close","count":38,"duration":0.019},
{"type":"mark","name":"lsp.did_close","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/security-fixes-consolidated.sql"}}},
{"type":"measure","name":"lsp.did_close","count":39,"duration":0.012},
{"type":"mark","name":"lsp.did_close","count":40,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/migrations/20251008080709_security_fixes_consolidated.sql"}}},
{"type":"measure","name":"lsp.did_close","count":40,"duration":0.014},
{"type":"mark","name":"lsp.did_close","count":41,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ROOT_CAUSE_ANALYSIS_COMPLETE.md"}}},
{"type":"measure","name":"lsp.did_close","count":41,"duration":0.011},
{"type":"mark","name":"lsp.did_close","count":42,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/vite.config.ts"}}},
{"type":"measure","name":"lsp.testing_update","count":64,"duration":0.262},
{"type":"measure","name":"lsp.did_close","count":42,"duration":0.443},
{"type":"mark","name":"lsp.did_close","count":43,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/vite-env.d.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":65,"duration":0.243},
{"type":"measure","name":"lsp.did_close","count":43,"duration":0.498},
{"type":"mark","name":"lsp.did_close","count":44,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DEPLOYMENT_CHECKLIST.md"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_close","count":44,"duration":0.015},
{"type":"mark","name":"lsp.did_close","count":45,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/QUICKSTART_BACKGROUND_TASKS.md"}}},
{"type":"measure","name":"lsp.did_close","count":45,"duration":0.014},
{"type":"mark","name":"lsp.did_close","count":46,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/INDEX_BACKGROUND_TASKS.md"}}},
{"type":"measure","name":"lsp.did_close","count":46,"duration":0.012},
{"type":"mark","name":"lsp.did_close","count":47,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/deployment/ENHANCED_DEPLOYMENT_GUIDE.md"}}},
{"type":"measure","name":"lsp.did_close","count":47,"duration":0.014},
{"type":"mark","name":"lsp.did_close","count":48,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/README_BACKGROUND_TASKS.md"}}},
{"type":"measure","name":"lsp.did_close","count":48,"duration":0.012},
{"type":"mark","name":"lsp.did_close","count":49,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/frontend/FRONTEND_INTEGRATION_GUIDE.md"}}},
{"type":"measure","name":"lsp.did_close","count":49,"duration":0.015},
{"type":"mark","name":"lsp.did_close","count":50,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/CAMPAIGN_DEBUGGING_GUIDE.md"}}},
{"type":"measure","name":"lsp.did_close","count":50,"duration":0.011},
{"type":"mark","name":"lsp.did_close","count":51,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/API_KEY_SOLUTION.md"}}},
{"type":"measure","name":"lsp.did_close","count":51,"duration":0.009},
{"type":"measure","name":"lsp.testing_update","count":66,"duration":0.231},
{"type":"mark","name":"lsp.did_close","count":52,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/PRODUCTION_VALIDATION_STRATEGY.md"}}},
{"type":"measure","name":"lsp.did_close","count":52,"duration":0.013},
{"type":"mark","name":"lsp.did_close","count":53,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/DEBUG_COLLECTION_GUIDE.md"}}},
{"type":"measure","name":"lsp.did_close","count":53,"duration":0.006},
{"type":"mark","name":"lsp.did_close","count":54,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/VALIDATION_TOOLKIT.md"}}},
{"type":"measure","name":"lsp.did_close","count":54,"duration":0.006},
{"type":"mark","name":"lsp.did_close","count":55,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/cleanup-queries.sql"}}},
{"type":"measure","name":"lsp.did_close","count":55,"duration":0.018},
{"type":"mark","name":"lsp.did_close","count":56,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"measure","name":"lsp.did_close","count":56,"duration":0.342},
{"type":"mark","name":"lsp.did_close","count":57,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/enrichment-cache-schema.sql"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_close","count":57,"duration":0.016},
{"type":"mark","name":"lsp.did_close","count":58,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts"}}},
{"type":"measure","name":"lsp.testing_update","count":67,"duration":0.227},
{"type":"measure","name":"lsp.did_close","count":58,"duration":3.775},
{"type":"mark","name":"lsp.did_close","count":59,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/2025-10-10-deterministic-dedupe.sql"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_close","count":59,"duration":0.018},
{"type":"mark","name":"lsp.did_close","count":60,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/types/index.ts"}}},
{"type":"measure","name":"lsp.testing_update","count":68,"duration":0.257},
{"type":"measure","name":"lsp.did_close","count":60,"duration":0.483},
{"type":"mark","name":"lsp.did_close","count":61,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":69,"duration":0.22},
{"type":"measure","name":"lsp.did_close","count":61,"duration":0.472},
{"type":"mark","name":"lsp.did_close","count":62,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Results.tsx"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":70,"duration":0.233},
{"type":"measure","name":"lsp.did_close","count":62,"duration":0.468},
{"type":"mark","name":"lsp.did_close","count":63,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":71,"duration":0.223},
{"type":"measure","name":"lsp.did_close","count":63,"duration":0.467},
{"type":"mark","name":"lsp.did_close","count":64,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":72,"duration":0.173},
{"type":"measure","name":"lsp.did_close","count":64,"duration":0.537},
{"type":"mark","name":"lsp.did_close","count":65,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/utils/campaignTransforms.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":73,"duration":0.208},
{"type":"measure","name":"lsp.did_close","count":65,"duration":0.465},
{"type":"mark","name":"lsp.did_close","count":66,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/components/ErrorBoundary.tsx"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":74,"duration":0.198},
{"type":"measure","name":"lsp.did_close","count":66,"duration":0.449},
{"type":"mark","name":"lsp.did_close","count":67,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/App.tsx"}}},
{"type":"measure","name":"lsp.did_close","count":67,"duration":0.509},
{"type":"mark","name":"lsp.did_close","count":68,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/utils/leadSanitizers.ts"}}},
{"type":"measure","name":"lsp.did_close","count":68,"duration":0.485},
{"type":"mark","name":"lsp.did_close","count":69,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/EDGE_FUNCTION_JWT_ISSUE.md"}}},
{"type":"measure","name":"lsp.did_close","count":69,"duration":0.012},
{"type":"mark","name":"lsp.did_close","count":70,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/FINAL_JWT_ANON_KEY_SOLUTION.md"}}},
{"type":"measure","name":"lsp.did_close","count":70,"duration":0.009},
{"type":"mark","name":"lsp.did_close","count":71,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/NEED_ANON_KEY.md"}}},
{"type":"measure","name":"lsp.did_close","count":71,"duration":0.008},
{"type":"mark","name":"lsp.did_close","count":72,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/PRODUCTION_READY_V4.2.md"}}},
{"type":"measure","name":"lsp.did_close","count":72,"duration":0.009},
{"type":"mark","name":"lsp.did_close","count":73,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/PRODUCTION_READY_V4.3.md"}}},
{"type":"measure","name":"lsp.did_close","count":73,"duration":0.008},
{"type":"mark","name":"lsp.did_close","count":74,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DOCUMENTATION_UPDATE_SUMMARY.md"}}},
{"type":"measure","name":"lsp.did_close","count":74,"duration":0.009},
{"type":"mark","name":"lsp.did_close","count":75,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md"}}},
{"type":"measure","name":"lsp.did_close","count":75,"duration":0.009},
{"type":"mark","name":"lsp.did_close","count":76,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-config.json"}}},
{"type":"measure","name":"lsp.did_close","count":76,"duration":0.008},
{"type":"mark","name":"lsp.did_close","count":77,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CHANGELOG.md"}}},
{"type":"measure","name":"lsp.did_close","count":77,"duration":0.008},
{"type":"mark","name":"lsp.did_close","count":78,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/TECHNICAL_SUMMARY_v4.3.md"}}},
{"type":"measure","name":"lsp.did_close","count":78,"duration":0.009},
{"type":"mark","name":"lsp.did_close","count":79,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/LATEST_DEPLOYMENT.md"}}},
{"type":"measure","name":"lsp.did_close","count":79,"duration":0.008},
{"type":"mark","name":"lsp.did_close","count":80,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/PROSPECTPRO_V4.3_RELEASE_NOTES.md"}}},
{"type":"measure","name":"lsp.did_close","count":80,"duration":0.009},
{"type":"mark","name":"lsp.did_close","count":81,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/README.md"}}},
{"type":"measure","name":"lsp.did_close","count":81,"duration":0.008},
{"type":"mark","name":"lsp.did_close","count":82,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":75,"duration":0.174},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":76,"duration":0.15},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":77,"duration":0.138},
{"type":"measure","name":"lsp.did_close","count":82,"duration":2.009},
{"type":"mark","name":"lsp.did_close","count":83,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":78,"duration":0.193},
{"type":"measure","name":"lsp.did_close","count":83,"duration":0.528},
{"type":"mark","name":"lsp.did_close","count":84,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/EDGE_FUNCTION_AUTH_UPDATE_GUIDE.md"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_close","count":84,"duration":0.014},
{"type":"mark","name":"lsp.did_close","count":85,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts"}}},
{"type":"measure","name":"lsp.testing_update","count":79,"duration":0.166},
{"type":"measure","name":"lsp.did_close","count":85,"duration":1.669},
{"type":"mark","name":"lsp.did_close","count":86,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":80,"duration":0.168},
{"type":"measure","name":"lsp.did_close","count":86,"duration":1.039},
{"type":"mark","name":"lsp.did_close","count":87,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":81,"duration":0.157},
{"type":"measure","name":"lsp.did_close","count":87,"duration":2.002},
{"type":"mark","name":"lsp.did_close","count":88,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":82,"duration":0.197},
{"type":"measure","name":"lsp.did_close","count":88,"duration":2.177},
{"type":"mark","name":"lsp.did_close","count":89,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":83,"duration":0.157},
{"type":"measure","name":"lsp.did_close","count":89,"duration":4.852},
{"type":"mark","name":"lsp.did_close","count":90,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DEPLOYMENT_SUCCESS.md"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_close","count":90,"duration":0.013},
{"type":"mark","name":"lsp.did_close","count":91,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/EDGE_FUNCTION_AUTH_FIX.md"}}},
{"type":"measure","name":"lsp.did_close","count":91,"duration":0.011},
{"type":"measure","name":"lsp.testing_update","count":84,"duration":0.107},
{"type":"mark","name":"lsp.did_open","count":93,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-config.json","languageId":"json","version":1,"text":"{\n    \"version\": \"1.1\",\n    \"description\": \"ProspectPro v4.3 MCP Server Configuration - Tier-Aware Background Discovery & Supabase Session Enforcement\",\n    \"servers\": {\n        \"prospectpro-production\": {\n            \"autoStart\": true,\n            \"lazyLoad\": true,\n            \"maxMemory\": \"192MB\",\n            \"priority\": \"high\",\n            \"description\": \"Production monitoring for tier-aware background discovery, enrichment, and session-enforced auth (28 tools)\",\n            \"tools\": [\n                \"monitor_api_performance\",\n                \"analyze_database_metrics\",\n                \"check_edge_function_health\",\n                \"track_api_costs\",\n                \"monitor_supabase_usage\",\n                \"track_user_sessions\",\n                \"monitor_authentication\",\n                \"analyze_campaign_ownership\"\n            ]\n        },\n        \"prospectpro-development\": {\n            \"autoStart\": false,\n            \"onDemand\": true,\n            \"maxMemory\": \"96MB\",\n            \"priority\": \"medium\",\n            \"description\": \"Development tools for background discovery, census targeting, enrichment, and session token workflows\",\n            \"activationKeywords\": [\n                \"develop\",\n                \"integrate\",\n                \"new api\",\n                \"test integration\",\n                \"user auth\",\n                \"session management\"\n            ]\n        },\n        \"prospectpro-troubleshooting\": {\n            \"autoStart\": false,\n            \"onDemand\": true,\n            \"maxMemory\": \"96MB\",\n            \"priority\": \"medium\",\n            \"description\": \"Debugging tools for background jobs, Supabase auth sessions, and enrichment pipelines\",\n            \"activationKeywords\": [\n                \"debug\",\n                \"error\",\n                \"fix\",\n                \"troubleshoot\",\n                \"404\",\n                \"500\",\n                \"auth error\",\n                \"jwt\",\n                \"session\"\n            ]\n        }\n    },\n    \"globalSettings\": {\n        \"maxConcurrentServers\": 2,\n        \"memoryThreshold\": \"384MB\",\n        \"smartLoading\": true,\n        \"contextOptimization\": true\n    },\n    \"contextFilters\": {\n        \"allowedExtensions\": [\n            \".ts\",\n            \".js\",\n            \".json\",\n            \".md\",\n            \".sql\"\n        ],\n        \"excludedPaths\": [\n            \"archive/**\",\n            \"node_modules/**\",\n            \".deno_lsp/**\",\n            \"logs/**\",\n            \"dist/**\"\n        ],\n        \"maxContextLength\": 200,\n        \"maxFileSize\": 50000\n    },\n    \"costOptimization\": {\n        \"enabled\": true,\n        \"tokenReduction\": 38,\n        \"cacheResponses\": true,\n        \"smartContext\": true,\n        \"quickCommands\": {\n            \"run prod mcp\": \"cd /workspaces/ProspectPro/mcp-servers && npm run start:production\",\n            \"deploy discovery background\": \"supabase functions deploy business-discovery-background\",\n            \"deploy orchestrator\": \"supabase functions deploy enrichment-orchestrator\",\n            \"deploy export\": \"supabase functions deploy campaign-export-user-aware\",\n            \"deploy auth diagnostics\": \"supabase functions deploy test-new-auth && supabase functions deploy test-official-auth\",\n            \"check background logs\": \"supabase functions logs business-discovery-background --follow\",\n            \"test background job\": \"curl -X POST \\\"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background\\\" -H \\\"Authorization: Bearer SUPABASE_SESSION_JWT\\\" -H \\\"Content-Type: application/json\\\" -d '{\\\"businessType\\\":\\\"coffee shop\\\",\\\"location\\\":\\\"Seattle, WA\\\",\\\"maxResults\\\":2,\\\"tierKey\\\":\\\"PROFESSIONAL\\\",\\\"sessionUserId\\\":\\\"mcp-smoke\\\"}'\",\n            \"test export\": \"curl -X POST \\\"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/campaign-export-user-aware\\\" -H \\\"Authorization: Bearer SUPABASE_SESSION_JWT\\\" -H \\\"Content-Type: application/json\\\" -d '{\\\"campaignId\\\":\\\"test\\\",\\\"format\\\":\\\"csv\\\",\\\"sessionUserId\\\":\\\"mcp-smoke\\\"}'\",\n            \"test auth helper\": \"curl -X POST \\\"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/test-new-auth\\\" -H \\\"Authorization: Bearer SUPABASE_SESSION_JWT\\\" -H \\\"Content-Type: application/json\\\" -d '{\\\"diagnostics\\\":true}'\",\n            \"compare auth patterns\": \"./scripts/test-auth-patterns.sh SUPABASE_SESSION_JWT\",\n            \"rebuild frontend\": \"npm install && npm run build\"\n        }\n    },\n    \"userAwareFeatures\": {\n        \"enabled\": true,\n        \"sessionTracking\": true,\n        \"authenticationMonitoring\": true,\n        \"campaignOwnershipTracking\": true,\n        \"dataIsolationValidation\": true\n    }\n}"}}},
{"type":"measure","name":"lsp.did_open","count":93,"duration":0.081},
{"type":"mark","name":"lsp.did_open","count":94,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts","languageId":"typescript","version":5,"text":"import { create } from \"zustand\";\nimport type { BusinessLead, CampaignResult, CampaignStore } from \"../types\";\nimport { sanitizeLeadCollection } from \"./utils/leadSanitizers\";\n\ninterface CampaignActions {\n  addCampaign: (campaign: CampaignResult) => void;\n  updateCampaign: (\n    campaignId: string,\n    updates: Partial<CampaignResult>\n  ) => void;\n  setCurrentCampaign: (campaign: CampaignResult | null) => void;\n  setCurrentCampaignId: (campaignId: string | null) => void;\n  addLeads: (leads: BusinessLead[]) => void;\n  setCampaignLeads: (campaignId: string, leads: BusinessLead[]) => void;\n  updateLead: (leadId: string, updates: Partial<BusinessLead>) => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  clearLeads: () => void;\n  reset: () => void;\n  ensureUniqueCampaignHistory: () => void;\n}\n\nconst initialState: CampaignStore = {\n  campaigns: [],\n  currentCampaign: null,\n  currentCampaignId: null,\n  leads: [],\n  isLoading: false,\n  error: null,\n};\n\nconst getCampaignKey = (campaign: CampaignResult): string | null => {\n  if (campaign.campaign_id) {\n    return campaign.campaign_id;\n  }\n\n  const fallbackId = (campaign as { id?: string | number }).id;\n  return fallbackId != null ? String(fallbackId) : null;\n};\n\n// Keeps newest campaign entry while removing duplicates by campaign identifier.\nconst dedupeCampaigns = (campaigns: CampaignResult[]): CampaignResult[] => {\n  const seen = new Set<string>();\n  const uniqueCampaigns: CampaignResult[] = [];\n\n  for (const campaign of campaigns) {\n    const key = getCampaignKey(campaign);\n\n    if (key === null) {\n      uniqueCampaigns.push(campaign);\n      continue;\n    }\n\n    if (seen.has(key)) {\n      continue;\n    }\n\n    seen.add(key);\n    uniqueCampaigns.push(campaign);\n  }\n\n  return uniqueCampaigns;\n};\n\nexport const useCampaignStore = create<CampaignStore & CampaignActions>()(\n  (set) => ({\n    ...initialState,\n\n    addCampaign: (campaign) =>\n      set((state) => ({\n        campaigns: dedupeCampaigns([campaign, ...state.campaigns]),\n      })),\n\n    updateCampaign: (campaignId, updates) =>\n      set((state) => ({\n        campaigns: dedupeCampaigns(\n          state.campaigns.map((c) =>\n            c.campaign_id === campaignId ? { ...c, ...updates } : c\n          )\n        ),\n        currentCampaign:\n          state.currentCampaign?.campaign_id === campaignId\n            ? { ...state.currentCampaign, ...updates }\n            : state.currentCampaign,\n      })),\n\n    setCurrentCampaign: (campaign) =>\n      set({\n        currentCampaign: campaign,\n        currentCampaignId: campaign?.campaign_id ?? null,\n      }),\n\n    setCurrentCampaignId: (campaignId) =>\n      set({ currentCampaignId: campaignId }),\n\n    addLeads: (leads) =>\n      set((state) => {\n        if (!Array.isArray(leads)) {\n          console.warn(\"[campaignStore] addLeads called with non-array\", {\n            type: typeof leads,\n          });\n          return state;\n        }\n\n        try {\n          const merged = new Map<string, BusinessLead>();\n          const existingLeads = state.leads || [];\n          const incomingLeads = sanitizeLeadCollection(leads, null);\n\n          for (const lead of existingLeads) {\n            if (lead?.id != null) {\n              merged.set(String(lead.id), lead);\n            }\n          }\n          for (const lead of incomingLeads) {\n            merged.set(String(lead.id), lead);\n          }\n          return { leads: Array.from(merged.values()) };\n        } catch (error) {\n          console.error(\"[campaignStore] addLeads error\", {\n            error: error instanceof Error ? error.message : String(error),\n            stack: error instanceof Error ? error.stack : undefined,\n          });\n          return state;\n        }\n      }),\n\n    setCampaignLeads: (campaignId, leads) =>\n      set((state) => {\n        if (!campaignId) {\n          console.warn(\n            \"[campaignStore] setCampaignLeads called without campaignId\",\n            {\n              leadsType: typeof leads,\n            }\n          );\n          return state;\n        }\n\n        if (!Array.isArray(leads)) {\n          console.warn(\"[campaignStore] Non-array leads payload ignored\", {\n            campaignId,\n            payload: leads,\n          });\n          return state;\n        }\n\n        try {\n          const merged = new Map<string, BusinessLead>();\n          const existingLeads = state.leads || [];\n          const incomingLeads = sanitizeLeadCollection(leads, campaignId);\n\n          for (const lead of existingLeads) {\n            if (lead?.campaign_id === campaignId) {\n              continue;\n            }\n            if (lead?.id != null) {\n              merged.set(String(lead.id), lead);\n            }\n          }\n\n          if (incomingLeads.length === 0 && leads.length > 0) {\n            console.warn(\n              \"[campaignStore] All incoming leads dropped by sanitizer\",\n              {\n                campaignId,\n                originalSize: leads.length,\n              }\n            );\n          }\n\n          for (const lead of incomingLeads) {\n            merged.set(String(lead.id), lead);\n          }\n\n          return { leads: Array.from(merged.values()) };\n        } catch (error) {\n          console.error(\"[campaignStore] setCampaignLeads error\", {\n            campaignId,\n            error: error instanceof Error ? error.message : String(error),\n            stack: error instanceof Error ? error.stack : undefined,\n          });\n          return state;\n        }\n      }),\n\n    updateLead: (leadId, updates) =>\n      set((state) => {\n        try {\n          return {\n            leads: state.leads.map((l) =>\n              l.id === leadId ? { ...l, ...updates } : l\n            ),\n          };\n        } catch (error) {\n          console.error(\"[campaignStore] updateLead error\", {\n            leadId,\n            error: error instanceof Error ? error.message : String(error),\n          });\n          return state;\n        }\n      }),\n\n    setLoading: (loading) => set({ isLoading: loading }),\n\n    setError: (error) => set({ error }),\n\n    clearLeads: () => set({ leads: [] }),\n\n    reset: () => set(initialState),\n\n    ensureUniqueCampaignHistory: () =>\n      set((state) => ({\n        campaigns: dedupeCampaigns(state.campaigns),\n      })),\n  })\n);\n"}}},
{"type":"measure","name":"lsp.did_open","count":94,"duration":2.992},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":85,"duration":0.376},
{"type":"mark","name":"lsp.did_open","count":95,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts","languageId":"typescript","version":6,"text":"import { create } from \"zustand\";\nimport type { BusinessLead, CampaignResult, CampaignStore } from \"../types\";\nimport { sanitizeLeadCollection } from \"./utils/leadSanitizers\";\n\ninterface CampaignActions {\n  addCampaign: (campaign: CampaignResult) => void;\n  updateCampaign: (\n    campaignId: string,\n    updates: Partial<CampaignResult>\n  ) => void;\n  setCurrentCampaign: (campaign: CampaignResult | null) => void;\n  setCurrentCampaignId: (campaignId: string | null) => void;\n  addLeads: (leads: BusinessLead[]) => void;\n  setCampaignLeads: (campaignId: string, leads: BusinessLead[]) => void;\n  updateLead: (leadId: string, updates: Partial<BusinessLead>) => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  clearLeads: () => void;\n  reset: () => void;\n  // Enhanced monitoring capabilities\n  addJobProgress: (jobId: string, progress: JobProgress) => void;\n  updateJobProgress: (jobId: string, updates: Partial<JobProgress>) => void;\n  getJobProgress: (jobId: string) => JobProgress | undefined;\n  addApiUsageMetric: (metric: ApiUsageMetric) => void;\n  getApiUsageStats: () => ApiUsageStats;\n  clearOldMetrics: (olderThanDays?: number) => void;\n}\n\ninterface JobProgress {\n  id: string;\n  campaignId: string;\n  status: \"pending\" | \"processing\" | \"completed\" | \"failed\";\n  progress: number; // 0-100\n  currentStage: string;\n  startedAt: Date;\n  completedAt?: Date;\n  estimatedTimeRemaining?: number;\n  metrics?: {\n    leadsFound: number;\n    leadsEnriched: number;\n    totalCost: number;\n    processingTimeMs: number;\n  };\n  error?: string;\n}\n\ninterface ApiUsageMetric {\n  id: string;\n  campaignId?: string;\n  service: string; // 'google_places', 'hunter_io', 'neverbounce', etc.\n  operation: string; // 'search', 'details', 'verify', etc.\n  cost: number;\n  requestCount: number;\n  responseTimeMs: number;\n  success: boolean;\n  timestamp: Date;\n  metadata?: Record<string, unknown>;\n}\n\ninterface ApiUsageStats {\n  totalCost: number;\n  totalRequests: number;\n  averageResponseTime: number;\n  successRate: number;\n  costByService: Record<string, number>;\n  requestsByService: Record<string, number>;\n  dailySpend: Record<string, number>;\n  monthlySpend: Record<string, number>;\n}\n\ninterface EnhancedCampaignStore extends CampaignStore {\n  jobProgress: Record<string, JobProgress>;\n  apiUsageMetrics: ApiUsageMetric[];\n  lastMetricsCleanup: Date;\n}\n\nconst createInitialState = (): EnhancedCampaignStore => ({\n  campaigns: [],\n  currentCampaign: null,\n  currentCampaignId: null,\n  leads: [],\n  isLoading: false,\n  error: null,\n  jobProgress: {},\n  apiUsageMetrics: [],\n  lastMetricsCleanup: new Date(),\n});\n\nconst initialState = createInitialState();\n\nconst getCampaignKey = (campaign: CampaignResult): string | null => {\n  if (campaign.campaign_id) {\n    return campaign.campaign_id;\n  }\n\n  const fallbackId = (campaign as { id?: string | number }).id;\n  return fallbackId != null ? String(fallbackId) : null;\n};\n\nconst dedupeCampaigns = (campaigns: CampaignResult[]): CampaignResult[] => {\n  const seen = new Set<string>();\n  const uniqueCampaigns: CampaignResult[] = [];\n\n  for (const campaign of campaigns) {\n    const key = getCampaignKey(campaign);\n    if (key === null) {\n      uniqueCampaigns.push(campaign);\n      continue;\n    }\n\n    if (seen.has(key)) {\n      continue;\n    }\n\n    seen.add(key);\n    uniqueCampaigns.push(campaign);\n  }\n\n  return uniqueCampaigns;\n};\n\nexport const useCampaignStore = create<\n  EnhancedCampaignStore & CampaignActions\n>()((set, get) => ({\n  ...initialState,\n\n  addCampaign: (campaign) =>\n    set((state) => ({\n      campaigns: dedupeCampaigns([campaign, ...state.campaigns]),\n    })),\n\n  updateCampaign: (campaignId, updates) =>\n    set((state) => ({\n      campaigns: dedupeCampaigns(\n        state.campaigns.map((c) =>\n          c.campaign_id === campaignId ? { ...c, ...updates } : c\n        )\n      ),\n      currentCampaign:\n        state.currentCampaign?.campaign_id === campaignId\n          ? { ...state.currentCampaign, ...updates }\n          : state.currentCampaign,\n    })),\n\n  setCurrentCampaign: (campaign) =>\n    set({\n      currentCampaign: campaign,\n      currentCampaignId: campaign?.campaign_id ?? null,\n    }),\n\n  setCurrentCampaignId: (campaignId) => set({ currentCampaignId: campaignId }),\n\n  addLeads: (leads) =>\n    set((state) => {\n      if (!Array.isArray(leads)) {\n        console.warn(\"[enhancedCampaignStore] addLeads called with non-array\", {\n          type: typeof leads,\n        });\n        return state;\n      }\n\n      try {\n        const merged = new Map<string, BusinessLead>();\n        const existingLeads = state.leads || [];\n        const incomingLeads = sanitizeLeadCollection(\n          leads,\n          null,\n          \"enhanced campaign store\"\n        );\n\n        for (const lead of existingLeads) {\n          if (lead?.id != null) {\n            merged.set(String(lead.id), lead);\n          }\n        }\n\n        for (const lead of incomingLeads) {\n          merged.set(String(lead.id), lead);\n        }\n\n        return { leads: Array.from(merged.values()) };\n      } catch (error) {\n        console.error(\"[enhancedCampaignStore] addLeads error\", {\n          error: error instanceof Error ? error.message : String(error),\n          stack: error instanceof Error ? error.stack : undefined,\n        });\n        return state;\n      }\n    }),\n\n  setCampaignLeads: (campaignId, leads) =>\n    set((state) => {\n      if (!campaignId) {\n        console.warn(\n          \"[enhancedCampaignStore] setCampaignLeads called without campaignId\",\n          {\n            leadsType: typeof leads,\n          }\n        );\n        return state;\n      }\n\n      if (!Array.isArray(leads)) {\n        console.warn(\n          \"[enhancedCampaignStore] Non-array leads payload ignored\",\n          {\n            campaignId,\n            payload: leads,\n          }\n        );\n        return state;\n      }\n\n      try {\n        const merged = new Map<string, BusinessLead>();\n        const existingLeads = state.leads || [];\n        const incomingLeads = sanitizeLeadCollection(\n          leads,\n          campaignId,\n          \"enhanced campaign store\"\n        );\n\n        for (const lead of existingLeads) {\n          if (lead?.campaign_id === campaignId) {\n            continue;\n          }\n          if (lead?.id != null) {\n            merged.set(String(lead.id), lead);\n          }\n        }\n\n        if (incomingLeads.length === 0 && leads.length > 0) {\n          console.warn(\n            \"[enhancedCampaignStore] All incoming leads dropped by sanitizer\",\n            {\n              campaignId,\n              originalSize: leads.length,\n            }\n          );\n        }\n\n        for (const lead of incomingLeads) {\n          merged.set(String(lead.id), lead);\n        }\n\n        return { leads: Array.from(merged.values()) };\n      } catch (error) {\n        console.error(\"[enhancedCampaignStore] setCampaignLeads error\", {\n          campaignId,\n          error: error instanceof Error ? error.message : String(error),\n          stack: error instanceof Error ? error.stack : undefined,\n        });\n        return state;\n      }\n    }),\n\n  updateLead: (leadId, updates) =>\n    set((state) => {\n      try {\n        return {\n          leads: state.leads.map((lead) =>\n            lead.id === leadId ? { ...lead, ...updates } : lead\n          ),\n        };\n      } catch (error) {\n        console.error(\"[enhancedCampaignStore] updateLead error\", {\n          leadId,\n          error: error instanceof Error ? error.message : String(error),\n        });\n        return state;\n      }\n    }),\n\n  setLoading: (loading) => set({ isLoading: loading }),\n\n  setError: (error) => set({ error }),\n\n  clearLeads: () => set({ leads: [] }),\n\n  reset: () => set(createInitialState()),\n\n  // Enhanced monitoring methods\n  addJobProgress: (jobId, progress) =>\n    set((state) => ({\n      jobProgress: {\n        ...state.jobProgress,\n        [jobId]: progress,\n      },\n    })),\n\n  updateJobProgress: (jobId, updates) =>\n    set((state) => ({\n      jobProgress: {\n        ...state.jobProgress,\n        [jobId]: state.jobProgress[jobId]\n          ? { ...state.jobProgress[jobId], ...updates }\n          : {\n              id: jobId,\n              campaignId: \"\",\n              status: \"pending\" as const,\n              progress: 0,\n              currentStage: \"\",\n              startedAt: new Date(),\n              ...updates,\n            },\n      },\n    })),\n\n  getJobProgress: (jobId) => get().jobProgress[jobId],\n\n  addApiUsageMetric: (metric) =>\n    set((state) => ({\n      apiUsageMetrics: [metric, ...state.apiUsageMetrics],\n    })),\n\n  getApiUsageStats: (): ApiUsageStats => {\n    const metrics = get().apiUsageMetrics;\n    const totalCost = metrics.reduce((sum, metric) => sum + metric.cost, 0);\n    const totalRequests = metrics.reduce(\n      (sum, metric) => sum + metric.requestCount,\n      0\n    );\n    const totalResponseTime = metrics.reduce(\n      (sum, metric) => sum + metric.responseTimeMs,\n      0\n    );\n    const successfulRequests = metrics.filter(\n      (metric) => metric.success\n    ).length;\n\n    const costByService: Record<string, number> = {};\n    const requestsByService: Record<string, number> = {};\n    const dailySpend: Record<string, number> = {};\n    const monthlySpend: Record<string, number> = {};\n\n    metrics.forEach((metric) => {\n      costByService[metric.service] =\n        (costByService[metric.service] || 0) + metric.cost;\n      requestsByService[metric.service] =\n        (requestsByService[metric.service] || 0) + metric.requestCount;\n\n      const timestamp =\n        metric.timestamp instanceof Date\n          ? metric.timestamp\n          : new Date(metric.timestamp);\n\n      if (Number.isNaN(timestamp.getTime())) {\n        return;\n      }\n\n      const dateKey = timestamp.toISOString().split(\"T\")[0];\n      const monthKey = dateKey.substring(0, 7);\n\n      dailySpend[dateKey] = (dailySpend[dateKey] || 0) + metric.cost;\n      monthlySpend[monthKey] = (monthlySpend[monthKey] || 0) + metric.cost;\n    });\n\n    return {\n      totalCost,\n      totalRequests,\n      averageResponseTime:\n        metrics.length > 0 ? totalResponseTime / metrics.length : 0,\n      successRate: metrics.length > 0 ? successfulRequests / metrics.length : 0,\n      costByService,\n      requestsByService,\n      dailySpend,\n      monthlySpend,\n    };\n  },\n\n  clearOldMetrics: (olderThanDays = 30) => {\n    const cutoff = new Date();\n    cutoff.setDate(cutoff.getDate() - olderThanDays);\n\n    set((state) => ({\n      apiUsageMetrics: state.apiUsageMetrics.filter((metric) => {\n        const timestamp =\n          metric.timestamp instanceof Date\n            ? metric.timestamp\n            : new Date(metric.timestamp);\n\n        return Number.isNaN(timestamp.getTime()) ? true : timestamp > cutoff;\n      }),\n      lastMetricsCleanup: new Date(),\n    }));\n  },\n}));\n\n// Export types for use in components\nexport type { ApiUsageMetric, ApiUsageStats, JobProgress };\n"}}},
{"type":"measure","name":"lsp.did_open","count":95,"duration":6.162},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":86,"duration":0.229},
{"type":"mark","name":"lsp.did_open","count":96,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CHANGELOG.md","languageId":"markdown","version":1,"text":"# ProspectPro Changelog\n\nAll notable changes to ProspectPro will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [4.3.1] - 2025-10-11 - Campaign Store Null-Safety & Frontend Stability\n\n### Fixed\n\n- Hardened `campaignStore` and `enhancedCampaignStore` lead merging to tolerate `undefined` payloads and mixed identifier shapes, preventing React error #185 crashes after background jobs complete.\n- Eliminated blank screen regressions on the results page by normalizing campaign lead updates coming from Supabase pagination.\n\n### Documentation\n\n- Refreshed Copilot instructions, documentation index, README troubleshooting notes, and MCP quick commands to highlight the null-safe store behavior and new verification steps.\n\n## [4.3.0] - 2025-10-09 - Supabase Session Enforcement & Tier-Aware Background Discovery\n\n### Added\n\n- **Supabase-Native Authentication:** Shared `authenticateRequest` now uses `supabaseClient.auth.getUser`, enforcing real session JWTs for every Edge Function invocation.\n- **Diagnostic Edge Functions:** Added `test-new-auth`, `test-official-auth`, and `test-business-discovery` for post-deploy validation of session scope, RLS access, and discovery flows.\n- **Auth Validation Script:** `scripts/test-auth-patterns.sh` compares the shared helper vs Supabase reference implementation using live session tokens.\n\n### Changed\n\n- **Discovery Stack:** Updated `business-discovery-optimized`, `enrichment-hunter`, `campaign-export-user-aware`, and related functions to consume the new auth context (userId, email, sessionId, token claims).\n- **Documentation & Instructions:** Refreshed README, deployment guides, MCP configuration, and Copilot instructions to reference session JWT requirements and new diagnostics.\n- **MCP Configuration:** Quick commands and tooling now surface session-enforced smoke tests and Supabase-specific troubleshooting flows.\n\n### Removed\n\n- **Custom JWKS Verifier:** All manual JWKS handling and ES256 key rotation logic replaced with Supabase-managed validation.\n\n### Notes\n\n- Redeploy all discovery, enrichment, export, and diagnostic edge functions after pulling this release.\n- Ensure frontend and automation callers forward `Authorization: Bearer <SUPABASE_SESSION_JWT>` for every request.\n\n## [4.0.0] - 2024-12-19 - Supabase-First Serverless Architecture\n\n### 🚀 **MAJOR ARCHITECTURAL TRANSFORMATION**\n\nComplete migration from container-based architecture to Supabase-first serverless platform.\n\n### Added\n\n- **Supabase Edge Functions**: TypeScript/Deno Edge Functions for all backend logic\n  - `business-discovery` - Main business discovery with Google Places API integration\n  - `campaign-export` - CSV export functionality with database integration\n- **Static Frontend**: HTML/JS with direct Supabase client integration\n- **Supabase Database**: Native PostgreSQL integration with Row Level Security\n- **Global Edge Deployment**: Functions run in 18+ regions with <100ms cold starts\n- **Enhanced Quality Scoring v3.0**: Cost-efficient validation pipeline integrated into Edge Functions\n- **Real-time Capabilities**: Native Supabase real-time subscriptions (ready to use)\n- **Zero-Container Deployment**: No Docker, no Cloud Run, just Edge Functions\n\n### Changed\n\n- **Architecture**: Container-based → Supabase-first serverless\n- **Backend**: Express.js server → Supabase Edge Functions\n- **Database**: Manual integration → Native Supabase with RLS\n- **Deployment**: Docker builds → Function deployment (30 seconds vs. 5 minutes)\n- **Environment**: .env files → Supabase environment variables\n- **Development**: Node.js → TypeScript/Deno Edge Functions\n\n### Removed\n\n- **server.js**: Replaced with Supabase Edge Functions\n- **Express.js dependencies**: No longer needed with Edge Functions\n- **Docker containers**: Static frontend + serverless functions\n- **Cloud Build pipelines**: Simplified to function deployment\n- **Complex environment setup**: Replaced with Supabase environment variables\n\n### Performance\n\n- **90% Cost Reduction**: Static hosting ($1-5/month) vs. Cloud Run ($10-50/month)\n- **80% Code Reduction**: From 400+ lines server.js to 50 lines core logic\n- **10x Faster Deployment**: 30-second function deploys vs. 5-minute container builds\n- **Zero Maintenance**: Supabase manages all infrastructure\n- **Auto-scaling**: No capacity planning or cold start issues\n\n## [3.0.0] - 2025-09-23 (ARCHIVED - Container Architecture)\n\n### Added\n\n- Enhanced schema cache handling for production initialization\n- Graceful degraded mode startup capability\n- Schema cache refresh utilities and automation\n- Comprehensive production diagnostics and monitoring\n- Enhanced Supabase configuration with automatic recovery\n- Production-ready error handling and user guidance\n\n### Changed\n\n- Improved server startup process with detailed error reporting\n- Enhanced database connection testing with cache management\n- Reorganized documentation structure with archive branches\n- Updated production deployment workflow with artifact-based configuration\n\n### Fixed\n\n- Schema cache initialization issues after database updates\n- Production server startup failures during cache refresh\n- Database connectivity issues in production environment\n\n## [2.0.0] - 2025-09-22 (ARCHIVED - Legacy Architecture)\n\n### Added\n\n- Complete production validation system\n- Enhanced deployment pipeline with GitHub Actions\n- Comprehensive database schema with RLS policies\n- Multi-source business discovery with API integrations\n\n### Changed\n\n- Migration to production-ready architecture\n- Enhanced error handling and logging\n- Improved cost tracking and budget management\n\n## [1.0.0] - Initial Release (ARCHIVED)\n\n### Added\n\n- Basic lead generation functionality\n- Supabase database integration\n- Simple web interface\n- Core business discovery features\n"}}},
{"type":"measure","name":"lsp.did_open","count":96,"duration":0.087},
{"type":"mark","name":"lsp.did_open","count":97,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/2025-10-10-deterministic-dedupe.sql","languageId":"sql","version":1,"text":"-- Deterministic dedupe infrastructure for background discovery (2025-10-10)\n-- Adds request snapshot storage + lead fingerprint ledger so the database\n-- enforces \"new results only\" independently of the client.\n\nBEGIN;\n\n-- ============================================================================\n-- Lead fingerprint ledger (per-user)\n-- ============================================================================\nCREATE TABLE IF NOT EXISTS public.lead_fingerprints (\n  id BIGSERIAL PRIMARY KEY,\n  fingerprint TEXT NOT NULL,\n  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,\n  session_user_id TEXT,\n  campaign_id TEXT REFERENCES public.campaigns(id) ON DELETE CASCADE,\n  lead_id BIGINT REFERENCES public.leads(id) ON DELETE CASCADE,\n  business_name TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nCREATE UNIQUE INDEX IF NOT EXISTS idx_lead_fingerprints_user_unique\n  ON public.lead_fingerprints (fingerprint, user_id)\n  WHERE user_id IS NOT NULL;\n\nCREATE UNIQUE INDEX IF NOT EXISTS idx_lead_fingerprints_session_unique\n  ON public.lead_fingerprints (fingerprint, session_user_id)\n  WHERE session_user_id IS NOT NULL;\n\nCREATE INDEX IF NOT EXISTS idx_lead_fingerprints_campaign\n  ON public.lead_fingerprints (campaign_id);\n\nCREATE INDEX IF NOT EXISTS idx_lead_fingerprints_created\n  ON public.lead_fingerprints (created_at DESC);\n\nALTER TABLE public.lead_fingerprints ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY lead_fingerprints_select_self\n  ON public.lead_fingerprints\n  FOR SELECT\n  USING (\n    auth.uid() IS NOT NULL\n    AND user_id = auth.uid()\n  );\n\n-- ============================================================================\n-- Campaign request snapshots (immutable audit of queued work)\n-- ============================================================================\nCREATE TABLE IF NOT EXISTS public.campaign_request_snapshots (\n  id BIGSERIAL PRIMARY KEY,\n  campaign_id TEXT REFERENCES public.campaigns(id) ON DELETE CASCADE,\n  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,\n  session_user_id TEXT,\n  request_hash TEXT NOT NULL,\n  request_payload JSONB NOT NULL,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nCREATE UNIQUE INDEX IF NOT EXISTS idx_campaign_request_hash_unique\n  ON public.campaign_request_snapshots (request_hash, user_id)\n  WHERE user_id IS NOT NULL;\n\nCREATE INDEX IF NOT EXISTS idx_campaign_request_snapshots_campaign\n  ON public.campaign_request_snapshots (campaign_id);\n\nALTER TABLE public.campaign_request_snapshots ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY campaign_request_snapshots_select_self\n  ON public.campaign_request_snapshots\n  FOR SELECT\n  USING (\n    auth.uid() IS NOT NULL\n    AND user_id = auth.uid()\n  );\n\nCOMMIT;\n"}}},
{"type":"measure","name":"lsp.did_open","count":97,"duration":0.062},
{"type":"mark","name":"lsp.did_close","count":92,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/tsconfig.json"}}},
{"type":"measure","name":"lsp.did_close","count":92,"duration":0.032},
{"type":"mark","name":"lsp.did_open","count":98,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/utils/leadSanitizers.ts","languageId":"typescript","version":1,"text":"import type { BusinessLead } from \"../../types\";\n\ntype LeadLike =\n  | BusinessLead\n  | (Partial<BusinessLead> & Record<string, unknown>);\n\ntype NullableLeadCollection = LeadLike[] | null | undefined;\n\nconst ensureString = (value: unknown, fallback = \"\"): string => {\n  return typeof value === \"string\" ? value : fallback;\n};\n\nconst ensureOptionalString = (value: unknown): string | undefined => {\n  return typeof value === \"string\" && value.length > 0 ? value : undefined;\n};\n\nconst ensureNumber = (value: unknown, fallback = 0): number => {\n  const parsed = Number(value);\n  return Number.isFinite(parsed) ? parsed : fallback;\n};\n\nconst VALIDATION_STATUSES = new Set<BusinessLead[\"validation_status\"]>([\n  \"pending\",\n  \"validating\",\n  \"validated\",\n  \"failed\",\n]);\n\nconst sanitizeEnrichmentData = (\n  value: unknown\n): BusinessLead[\"enrichment_data\"] => {\n  if (value == null || typeof value !== \"object\") {\n    return undefined;\n  }\n\n  try {\n    return JSON.parse(JSON.stringify(value)) as BusinessLead[\"enrichment_data\"];\n  } catch (error) {\n    console.error(\"⚠️ Unable to sanitize enrichment data payload\", error);\n    return undefined;\n  }\n};\n\nconst deriveDataSources = (\n  lead: LeadLike,\n  enrichmentData: BusinessLead[\"enrichment_data\"]\n): string[] => {\n  const fromLead = Array.isArray(\n    (lead as { data_sources?: unknown }).data_sources\n  )\n    ? ((lead as { data_sources?: unknown }).data_sources as unknown[])\n        .filter((source): source is string => typeof source === \"string\")\n        .map((source) => source.trim())\n        .filter((source) => source.length > 0)\n    : [];\n\n  const services = Array.isArray(\n    enrichmentData?.processingMetadata?.servicesUsed\n  )\n    ? enrichmentData?.processingMetadata?.servicesUsed ?? []\n    : [];\n  const verificationSources = Array.isArray(enrichmentData?.verificationSources)\n    ? enrichmentData?.verificationSources ?? []\n    : [];\n  const explicitSources = Array.isArray(enrichmentData?.dataSources)\n    ? enrichmentData?.dataSources ?? []\n    : [];\n\n  const combined = [\n    ...fromLead,\n    ...services,\n    ...verificationSources,\n    ...explicitSources,\n  ]\n    .filter((source): source is string => typeof source === \"string\")\n    .map((source) => source.trim())\n    .filter((source) => source.length > 0);\n\n  if (combined.length === 0) {\n    return [\"google_places\"];\n  }\n\n  return Array.from(new Set(combined));\n};\n\nconst coerceValidationStatus = (\n  value: unknown,\n  enrichmentData: BusinessLead[\"enrichment_data\"]\n): BusinessLead[\"validation_status\"] => {\n  if (\n    typeof value === \"string\" &&\n    VALIDATION_STATUSES.has(value as BusinessLead[\"validation_status\"])\n  ) {\n    return value as BusinessLead[\"validation_status\"];\n  }\n\n  const enrichmentStatus = enrichmentData?.validationStatus;\n\n  if (\n    typeof enrichmentStatus === \"string\" &&\n    VALIDATION_STATUSES.has(\n      enrichmentStatus as BusinessLead[\"validation_status\"]\n    )\n  ) {\n    return enrichmentStatus as BusinessLead[\"validation_status\"];\n  }\n\n  return \"validated\";\n};\n\nexport const sanitizeLead = (\n  lead: LeadLike | null | undefined,\n  fallbackCampaignId: string | null\n): BusinessLead | null => {\n  if (!lead || lead.id == null) {\n    return null;\n  }\n\n  const campaignId = (lead.campaign_id ?? fallbackCampaignId) as string | null;\n\n  if (!campaignId) {\n    return null;\n  }\n\n  const enrichmentData = sanitizeEnrichmentData(lead.enrichment_data);\n\n  const sanitized: BusinessLead = {\n    id: String(lead.id),\n    campaign_id: String(campaignId),\n    business_name: ensureString(lead.business_name, \"Unknown Business\"),\n    address: ensureString(lead.address),\n    phone: ensureString(lead.phone),\n    website: ensureString(lead.website),\n    email: ensureString(lead.email),\n    industry: ensureOptionalString((lead as { industry?: unknown }).industry),\n    confidence_score: ensureNumber(lead.confidence_score, 0),\n    validation_status: coerceValidationStatus(\n      lead.validation_status,\n      enrichmentData\n    ),\n    created_at:\n      typeof lead.created_at === \"string\"\n        ? lead.created_at\n        : new Date().toISOString(),\n    cost_to_acquire: ensureNumber(\n      (lead as { cost_to_acquire?: unknown }).cost_to_acquire ??\n        (lead as { validation_cost?: unknown }).validation_cost,\n      0\n    ),\n    data_sources: deriveDataSources(lead, enrichmentData),\n    enrichment_tier:\n      ensureOptionalString(lead.enrichment_tier) ??\n      ensureOptionalString(enrichmentData?.enrichmentTier),\n    vault_secured:\n      typeof lead.vault_secured === \"boolean\" ? lead.vault_secured : true,\n    enrichment_data: enrichmentData,\n  };\n\n  return sanitized;\n};\n\nexport const sanitizeLeadCollection = (\n  leads: NullableLeadCollection,\n  fallbackCampaignId: string | null,\n  context = \"campaign store\"\n): BusinessLead[] => {\n  if (!Array.isArray(leads)) {\n    console.error(`⚠️ ${context} received a non-array leads payload`, {\n      type: typeof leads,\n    });\n    return [];\n  }\n\n  const sanitized = leads\n    .map((lead) => sanitizeLead(lead, fallbackCampaignId))\n    .filter((lead): lead is BusinessLead => Boolean(lead));\n\n  if (sanitized.length < leads.length) {\n    console.warn(`🧹 Filtered invalid leads before updating ${context}`, {\n      received: leads.length,\n      retained: sanitized.length,\n    });\n  }\n\n  return sanitized;\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":98,"duration":2.416},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":87,"duration":0.214},
{"type":"mark","name":"lsp.did_open","count":99,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CAMPAIGN_HISTORY_LINKING_COMPLETE.md","languageId":"markdown","version":1,"text":"# Campaign History Linking Implementation Complete\n\n## Overview\n\nSuccessfully implemented comprehensive campaign history linking functionality connecting the Dashboard to individual Campaign pages with CSV re-download capabilities.\n\n## Features Implemented\n\n### ✅ Dashboard Campaign Links\n\n- **Clickable Campaign Cards**: Each campaign in dashboard history is now clickable\n- **Enhanced Display**: Shows business type and location instead of generic campaign ID\n- **Visual Feedback**: Hover effects and \"View Details →\" button for clear navigation\n- **Responsive Design**: Works across all screen sizes\n\n### ✅ Campaign Page URL Support\n\n- **URL Parameters**: Supports `?id=campaign_id` for direct campaign access\n- **Campaign Loading**: Automatically loads specific campaigns from dashboard history\n- **Error Handling**: Redirects to discovery page if campaign not found\n- **Navigation Integration**: Seamless linking from dashboard to campaign details\n\n### ✅ Enhanced Data Model\n\n- **Campaign Context**: Added `business_type` and `location` to `CampaignResult` type\n- **Lead Association**: Added `campaign_id` to `BusinessLead` type for proper relationship\n- **Data Integrity**: Campaign creation includes business context information\n- **Type Safety**: Full TypeScript support for new fields\n\n### ✅ Campaign-Specific Data Display\n\n- **Filtered Results**: Results table shows only leads from selected campaign\n- **Targeted CSV Export**: CSV export filtered to campaign-specific data only\n- **Accurate Statistics**: Lead counts and metrics specific to each campaign\n- **Proper Data Isolation**: No cross-campaign data contamination\n\n## Technical Implementation\n\n### Updated Components\n\n- **Dashboard.tsx**: Added navigation hooks and clickable campaign cards\n- **Campaign.tsx**: Added URL parameter support and campaign-specific data filtering\n- **TierSelector.tsx**: Enhanced with actual API costs and single-column layout\n- **useBusinessDiscovery.ts**: Campaign creation includes business_type and location\n- **types/index.ts**: Extended interfaces for campaign-lead relationships\n\n### Data Flow\n\n```\nDashboard → Click Campaign → Navigate to /campaign?id=CAMPAIGN_ID → Load Campaign → Filter Leads → Display Results + CSV Export\n```\n\n### URL Structure\n\n- **Dashboard**: `/dashboard` - Shows all campaign history\n- **Specific Campaign**: `/campaign?id=CAMPAIGN_ID` - Shows individual campaign details\n- **Discovery**: `/discovery` - Start new campaigns\n\n## User Workflow\n\n### From Dashboard\n\n1. View campaign history with business context (type + location)\n2. Click any campaign card or \"View Details →\" button\n3. Navigate to campaign-specific results page\n4. Review results and download CSV again with same tier-specific columns\n\n### Direct Access\n\n1. Use direct URL `/campaign?id=CAMPAIGN_ID` for bookmarking\n2. Share specific campaign results with team members\n3. Access historical campaigns via browser history\n\n### CSV Re-download\n\n1. Access any past campaign from dashboard\n2. View original results table with confidence scores\n3. Download CSV with same tier-specific columns as original export\n4. Includes ownership data columns for Compliance tier campaigns\n\n## Deployment Status\n\n### Production Environment\n\n- **URL**: https://prospectpro.appsmithery.co/\n- **Hosting**: Vercel with custom domain\n- **Build**: Successful TypeScript compilation\n- **Features**: All campaign linking functionality live and operational\n\n### Verification Completed\n\n- ✅ Dashboard campaign cards display business context\n- ✅ Click navigation works to campaign pages\n- ✅ URL parameters load correct campaigns\n- ✅ Lead filtering shows campaign-specific results\n- ✅ CSV export includes proper data columns\n- ✅ Error handling redirects appropriately\n\n## Technical Benefits\n\n### Data Architecture\n\n- **Proper Relationships**: Campaign-lead associations maintained\n- **Type Safety**: Full TypeScript coverage for new data structures\n- **Backward Compatibility**: Existing functionality preserved\n- **Performance**: Efficient filtering without database changes\n\n### User Experience\n\n- **Intuitive Navigation**: Clear pathways from dashboard to details\n- **Visual Clarity**: Business context instead of cryptic IDs\n- **Data Access**: Easy re-access to historical campaign results\n- **Workflow Continuity**: Seamless transition between pages\n\n### Maintenance\n\n- **Clean Code**: Well-structured component updates\n- **Consistent Patterns**: Follows existing architectural patterns\n- **Documentation**: Comprehensive TypeScript interfaces\n- **Testing Ready**: Clear data flow for future test implementation\n\n## Integration Points\n\n### Campaign Store\n\n- **State Management**: Zustand store handles campaign-lead relationships\n- **Data Persistence**: Campaign context preserved across navigation\n- **Memory Efficiency**: Smart filtering without data duplication\n\n### Routing\n\n- **React Router**: URL parameter handling for direct campaign access\n- **Navigation**: useNavigate hooks for programmatic routing\n- **Error Boundaries**: Graceful handling of invalid campaign IDs\n\n### CSV Export\n\n- **Tier-Specific**: Different column sets based on original campaign tier\n- **Data Integrity**: Only campaign-specific leads included\n- **Format Consistency**: Same CSV structure as original export\n\n## Next Steps\n\n### Potential Enhancements\n\n1. **Search/Filter**: Add search functionality to dashboard campaign history\n2. **Sorting**: Allow sorting campaigns by date, cost, or results count\n3. **Bulk Actions**: Select multiple campaigns for batch operations\n4. **Analytics**: Campaign performance comparison views\n\n### Integration Opportunities\n\n1. **Authentication**: Link campaigns to specific user accounts\n2. **Sharing**: Generate shareable links for campaign results\n3. **Notifications**: Alert when campaigns are accessed by others\n4. **API Access**: Programmatic access to campaign history\n\n## Files Modified\n\n### Core Components\n\n- `/src/pages/Dashboard.tsx` - Added navigation and enhanced display\n- `/src/pages/Campaign.tsx` - Added URL parameter support and filtering\n- `/src/types/index.ts` - Extended interfaces for campaign-lead relationships\n- `/src/hooks/useBusinessDiscovery.ts` - Enhanced campaign creation\n\n### Type Definitions\n\n- `CampaignResult` interface extended with `business_type` and `location`\n- `BusinessLead` interface extended with `campaign_id` association\n- URL parameter types for campaign navigation\n\n## Success Metrics\n\n### Functionality\n\n- **100% Campaign Linkage**: All dashboard campaigns link to detail pages\n- **Data Accuracy**: Campaign-specific filtering shows correct results\n- **CSV Integrity**: Re-downloaded CSVs match original tier specifications\n- **Navigation Reliability**: No broken links or missing campaigns\n\n### Performance\n\n- **Instant Navigation**: Dashboard to campaign transitions under 100ms\n- **Efficient Filtering**: Lead filtering doesn't impact page load times\n- **Memory Usage**: No memory leaks with campaign switching\n- **Build Size**: No significant bundle size increase\n\nThe campaign history linking feature is now complete and provides users with comprehensive access to their historical campaign data with professional CSV re-download capabilities.\n"}}},
{"type":"measure","name":"lsp.did_open","count":99,"duration":0.097},
{"type":"mark","name":"lsp.did_open","count":100,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CLEANUP_REPORT.md","languageId":"markdown","version":1,"text":"# ProspectPro Cleanup Report\n\n**Date**: October 1, 2025  \n**Status**: ✅ **COMPLETED**\n\n## 🧹 **Cleanup Summary**\n\n### **✅ Edge Functions Cleanup**\n\n**Before Cleanup**: 6 Edge Functions\n\n- ❌ `business-discovery-edge` (duplicate, deleted)\n- ❌ `enhanced-business-discovery` (unused, deleted)\n- ❌ `diag` (diagnostic function, deleted)\n- ❌ `business-discovery` (replaced by optimized version, deleted)\n- ✅ `business-discovery-optimized` (active, includes Foursquare integration)\n- ✅ `campaign-export` (active, used for CSV exports)\n\n**After Cleanup**: 2 Essential Edge Functions\n\n- ✅ `business-discovery-optimized` - Main discovery with Google Places + Foursquare\n- ✅ `campaign-export` - CSV export functionality\n\n### **✅ Frontend Updates**\n\n- Updated `supabase-app-enhanced.js` to use `business-discovery-optimized`\n- Maintained all existing functionality\n- Now benefits from Foursquare API integration for better business discovery\n\n### **✅ Database Security Fixes**\n\n**Security Issues Addressed**:\n\n#### **Error Fixed**: Security Definer View\n\n```sql\n-- BEFORE: View with SECURITY DEFINER (security risk)\nCREATE VIEW campaign_analytics WITH (SECURITY_DEFINER = ON) AS ...\n\n-- AFTER: Standard view without SECURITY DEFINER\nCREATE OR REPLACE VIEW campaign_analytics AS ...\n```\n\n#### **Warning Fixed**: Function Search Path Mutable\n\n```sql\n-- BEFORE: Function without fixed search_path\nCREATE FUNCTION update_updated_at_column() ...\n\n-- AFTER: Function with secure search_path\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nSECURITY INVOKER\nSET search_path = public\n```\n\n### **✅ Local File Cleanup**\n\n**Removed Directories**:\n\n- `/supabase/functions/enhanced-business-discovery/`\n- `/supabase/functions/business-discovery/`\n\n**Remaining Essential Structure**:\n\n- `/supabase/functions/business-discovery-optimized/` (main function)\n- `/supabase/functions/campaign-export/` (export function)\n\n## 🚀 **Performance Improvements**\n\n### **✅ Reduced Resource Usage**\n\n- **Edge Functions**: 6 → 2 (67% reduction)\n- **Deployment Time**: Faster with fewer functions\n- **Maintenance**: Simplified to 2 essential functions\n\n### **✅ Enhanced Functionality**\n\n- **Foursquare Integration**: Additional business discovery source\n- **Improved Data Quality**: Dual-source verification\n- **Better Coverage**: Google Places + Foursquare = more comprehensive results\n\n### **✅ Security Enhancements**\n\n- **Removed SECURITY DEFINER**: Eliminated privilege escalation risks\n- **Fixed Search Path**: Prevented search path injection attacks\n- **Principle of Least Privilege**: Functions use minimal necessary permissions\n\n## 🔗 **Deployment Status**\n\n### **✅ Vercel Integration**\n\n- **Latest Deployment**: https://prospect-5vpowm742-alex-torellis-projects.vercel.app\n- **Production Domain**: https://prospectpro.appsmithery.co\n- **Auto-deployment**: Connected to GitHub for continuous deployment\n\n### **✅ Supabase Integration**\n\n- **Edge Functions**: 2 active, optimized functions\n- **Database**: Security issues resolved\n- **Real-time**: Ready for live updates\n\n## 📊 **Quality Metrics**\n\n### **✅ Code Quality**\n\n- **Security Score**: Improved (security definer and search path issues fixed)\n- **Function Count**: Optimized (6 → 2 essential functions)\n- **Maintainability**: Enhanced (clear separation of concerns)\n\n### **✅ Performance**\n\n- **Cold Start Time**: Reduced (fewer functions to manage)\n- **Deployment Speed**: Faster (streamlined function set)\n- **API Coverage**: Enhanced (Google Places + Foursquare)\n\n## 🎯 **Next Steps**\n\n### **✅ Immediate Benefits**\n\n- All security warnings resolved\n- Cleaner, more maintainable codebase\n- Enhanced business discovery with dual APIs\n- Faster deployments and better performance\n\n### **✅ Ongoing Maintenance**\n\n- Monitor Edge Function performance metrics\n- Track business discovery quality improvements\n- Maintain security best practices\n\n## 🏆 **Success Criteria Met**\n\n- ✅ **Security**: All Supabase security errors and warnings resolved\n- ✅ **Performance**: Reduced from 6 to 2 essential Edge Functions\n- ✅ **Functionality**: Enhanced with Foursquare integration\n- ✅ **Deployment**: Vercel and Supabase integration working seamlessly\n- ✅ **Maintenance**: Simplified codebase with clear function separation\n\n**Result**: ProspectPro is now optimized, secure, and ready for production scaling!\n"}}},
{"type":"measure","name":"lsp.did_open","count":100,"duration":0.077},
{"type":"mark","name":"lsp.did_open","count":101,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","languageId":"typescript","version":1,"text":"import { useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport {\n  EDGE_FUNCTIONS_URL,\n  ENRICHMENT_TIERS,\n  SUPABASE_ANON_TOKEN,\n  ensureSession,\n  getSessionToken,\n} from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport type { BusinessDiscoveryResponse, CampaignConfig } from \"../types\";\n\nexport const useBusinessDiscovery = (\n  onJobCreated?: (jobData: {\n    jobId: string;\n    campaignId: string;\n    status: string;\n    estimatedTime?: number;\n  }) => void\n) => {\n  const { user } = useAuth();\n  const {\n    setLoading,\n    setError,\n    clearLeads,\n    setCurrentCampaign,\n    setCurrentCampaignId,\n  } = useCampaignStore();\n  const [progress, setProgress] = useState(0);\n  const [currentStage, setCurrentStage] = useState<string>(\"\");\n  const [cacheStats] = useState<any>(null);\n\n  const discoveryMutation = useMutation({\n    mutationFn: async (\n      config: CampaignConfig & { selectedTier?: keyof typeof ENRICHMENT_TIERS }\n    ): Promise<BusinessDiscoveryResponse> => {\n      setLoading(true);\n      setError(null);\n      setProgress(10);\n      setCurrentStage(\"Initializing user-aware discovery...\");\n\n      // Reset any existing campaign context before starting a new discovery\n      clearLeads();\n      setCurrentCampaign(null);\n      setCurrentCampaignId(null);\n\n      try {\n        console.log(\"🚀 Starting user-aware business discovery:\", config);\n\n        // Ensure we have a valid session before calling Edge Function\n        const hasSession = await ensureSession();\n        if (!hasSession || !user?.id) {\n          throw new Error(\"Please sign in to run a discovery campaign.\");\n        }\n\n        // Determine enrichment tier\n        const tier = config.selectedTier || \"PROFESSIONAL\";\n        const tierConfig = ENRICHMENT_TIERS[tier];\n        const keywordList = config.keywords\n          ? config.keywords\n              .split(\",\")\n              .map((value) => value.trim())\n              .filter(Boolean)\n          : undefined;\n\n        const discoveryOptions = {\n          tradeAssociation: config.trade_association ?? false,\n          professionalLicense: config.professional_license ?? false,\n          chamberVerification: config.chamber_verification ?? false,\n          apolloDiscovery: tier === \"ENTERPRISE\",\n        };\n\n        setCurrentStage(\n          `Using ${tierConfig.name} tier ($${tierConfig.price}/lead)`\n        );\n        setProgress(20);\n\n        const accessToken = await getSessionToken();\n\n        const billingContext = {\n          tier,\n          tierName: tierConfig.name,\n          unitPrice: tierConfig.price,\n          estimatedBudget: config.max_results * tierConfig.price,\n          currency: \"USD\",\n        };\n\n        // Call background task business discovery with authentication\n        const requestBody = {\n          businessType: config.business_type || config.search_terms,\n          location: config.location,\n          keywords: keywordList,\n          searchRadius: config.search_radius,\n          expandGeography: config.expand_geography,\n          maxResults: config.max_results,\n          budgetLimit: config.max_results * tierConfig.price,\n          minConfidenceScore: config.min_confidence_score || 50,\n          tierKey: tier,\n          tierName: tierConfig.name,\n          tierPrice: tierConfig.price,\n          options: discoveryOptions,\n          sessionUserId: user.id,\n          userId: user.id,\n          billingContext,\n        };\n\n        if (!accessToken) {\n          throw new Error(\n            \"Unable to read session token. Please sign in again.\"\n          );\n        }\n\n        const headers: Record<string, string> = {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${accessToken}`,\n          apikey: SUPABASE_ANON_TOKEN,\n          \"X-Prospect-Session\": accessToken,\n        };\n\n        const response = await fetch(\n          `${EDGE_FUNCTIONS_URL}/business-discovery-background`,\n          {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody),\n          }\n        );\n\n        const rawResponse = await response.json().catch(() => ({}));\n\n        if (!response.ok) {\n          console.error(\"❌ Background discovery error:\", rawResponse);\n          const message =\n            typeof rawResponse?.error === \"string\"\n              ? rawResponse.error\n              : typeof rawResponse?.message === \"string\"\n              ? rawResponse.message\n              : `Edge function request failed: ${response.status}`;\n          throw new Error(message);\n        }\n\n        if (!rawResponse?.success) {\n          const fallbackMessage =\n            typeof rawResponse?.error === \"string\"\n              ? rawResponse.error\n              : \"No data returned from background discovery\";\n          throw new Error(fallbackMessage);\n        }\n\n        console.log(\"✅ Background discovery response:\", rawResponse);\n\n        // For background tasks, we get jobId and campaignId immediately\n        // The actual processing happens in the background\n        const transformedData: BusinessDiscoveryResponse = {\n          campaign_id: rawResponse.campaignId,\n          job_id: rawResponse.jobId, // New: job ID for tracking progress\n          status: rawResponse.status, // New: processing status\n          estimated_time: rawResponse.estimatedTime, // New: estimated completion time\n          realtime_channel: rawResponse.realtimeChannel, // New: for real-time updates\n          total_found: 0, // Will be updated via real-time\n          qualified_count: 0, // Will be updated via real-time\n          total_cost: 0, // Will be updated via real-time\n          processing_time: \"< 100ms\", // Immediate response\n          tier_used: tierConfig.name,\n          cache_performance: undefined,\n          vault_status: \"secured\",\n          census_intelligence: undefined,\n          businesses: [], // Will be populated via real-time updates\n        };\n\n        setProgress(100);\n        setCurrentStage(\"Complete! 🎉\");\n        return transformedData;\n      } catch (error) {\n        console.error(\"❌ User-aware discovery error:\", error);\n        setCurrentStage(\"Failed ❌\");\n        throw error;\n      } finally {\n        setLoading(false);\n      }\n    },\n    onSuccess: (data: BusinessDiscoveryResponse) => {\n      console.log(\"✅ Background job created:\", data);\n\n      // For background jobs, we don't create the full campaign record immediately\n      // The progress page will handle real-time updates and final campaign creation\n\n      setProgress(100);\n      setCurrentStage(\"Background processing started! 🚀\");\n\n      // Navigate to progress page with job ID\n      if (data.job_id && data.campaign_id) {\n        const jobData = {\n          jobId: data.job_id,\n          campaignId: data.campaign_id,\n          status: data.status || \"pending\",\n          estimatedTime: data.estimated_time,\n        };\n\n        console.log(\"Job started:\", jobData);\n\n        // Call the navigation callback if provided\n        if (onJobCreated) {\n          onJobCreated(jobData);\n        }\n\n        setCurrentCampaignId(data.campaign_id);\n      }\n    },\n    onError: (error: any) => {\n      setError(\n        error instanceof Error ? error.message : \"User-aware discovery failed\"\n      );\n      setProgress(0);\n      setCurrentStage(\"Failed ❌\");\n    },\n  });\n\n  return {\n    startDiscovery: discoveryMutation.mutate,\n    isDiscovering: discoveryMutation.isPending,\n    progress,\n    currentStage,\n    cacheStats,\n    error: discoveryMutation.error,\n    data: discoveryMutation.data,\n  };\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":101,"duration":1.886},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":88,"duration":2.855},
{"type":"mark","name":"lsp.did_open","count":102,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts","languageId":"typescript","version":5,"text":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { supabase } from \"../lib/supabase\";\nimport type { BusinessLead, CampaignResult } from \"../types\";\nimport { transformCampaignData } from \"../utils/campaignTransforms\";\n\ninterface UseCampaignResultsOptions {\n  page?: number;\n  pageSize?: number;\n  enabled?: boolean;\n}\n\ninterface CampaignResultsQuery {\n  campaign: CampaignResult | null;\n  leads: BusinessLead[];\n  count: number;\n}\n\nexport const useCampaignResults = (\n  campaignId: string | undefined | null,\n  options: UseCampaignResultsOptions = {}\n) => {\n  const { user } = useAuth();\n  const pageSize = Math.max(options.pageSize ?? 50, 1);\n  const page = Math.max(options.page ?? 0, 0);\n  const enabled = Boolean(options.enabled ?? true);\n\n  const query = useQuery<CampaignResultsQuery>({\n    queryKey: [\n      \"campaign-results\",\n      user?.id ?? \"anonymous\",\n      campaignId ?? \"none\",\n      page,\n      pageSize,\n    ],\n    enabled: Boolean(user?.id) && Boolean(campaignId) && enabled,\n    staleTime: 60 * 1000,\n    queryFn: async () => {\n      if (!user?.id || !campaignId) {\n        return { campaign: null, leads: [], count: 0 };\n      }\n\n      const { data: campaignRecord, error: campaignError } = await supabase\n        .from(\"campaigns\")\n        .select(\n          \"id,business_type,location,status,total_cost,results_count,created_at,updated_at\"\n        )\n        .eq(\"id\", campaignId)\n        .eq(\"user_id\", user.id)\n        .maybeSingle();\n\n      if (campaignError) {\n        throw campaignError;\n      }\n\n      if (!campaignRecord) {\n        return { campaign: null, leads: [], count: 0 };\n      }\n\n      const rangeStart = page * pageSize;\n      const rangeEnd = rangeStart + pageSize - 1;\n\n      const {\n        data: leadsData,\n        error: leadsError,\n        count,\n      } = await supabase\n        .from(\"leads\")\n        .select(\n          \"id,campaign_id,business_name,address,phone,website,email,confidence_score,validation_cost,enrichment_data,created_at\",\n          { count: \"exact\" }\n        )\n        .eq(\"campaign_id\", campaignId)\n        .eq(\"user_id\", user.id)\n        .order(\"confidence_score\", { ascending: false })\n        .range(rangeStart, rangeEnd);\n\n      if (leadsError) {\n        throw leadsError;\n      }\n\n      if (!Array.isArray(leadsData)) {\n        console.warn(\"[useCampaignResults] Non-array leads response\", {\n          campaignId,\n          typeofData: typeof leadsData,\n          raw: leadsData,\n        });\n        const fallbackResult = transformCampaignData(campaignRecord, [], {});\n        return {\n          campaign: fallbackResult.campaignResult,\n          leads: [],\n          count: count ?? 0,\n        };\n      }\n\n      let transformedData;\n      try {\n        transformedData = transformCampaignData(campaignRecord, leadsData, {});\n      } catch (transformError) {\n        console.error(\"[useCampaignResults] Transform error\", {\n          campaignId,\n          error:\n            transformError instanceof Error\n              ? transformError.message\n              : String(transformError),\n          leadsDataType: typeof leadsData,\n          leadsDataLength: Array.isArray(leadsData)\n            ? leadsData.length\n            : \"not-array\",\n        });\n        const fallbackResult = transformCampaignData(campaignRecord, [], {});\n        return {\n          campaign: fallbackResult.campaignResult,\n          leads: [],\n          count: count ?? 0,\n        };\n      }\n\n      const { campaignResult, leads } = transformedData;\n\n      if (!Array.isArray(leads)) {\n        console.error(\n          \"[useCampaignResults] Transform returned non-array leads\",\n          {\n            campaignId,\n            transformedLeadsType: typeof leads,\n          }\n        );\n        return {\n          campaign: campaignResult,\n          leads: [],\n          count: count ?? 0,\n        };\n      }\n\n      return {\n        campaign: campaignResult,\n        leads: leads,\n        count: count ?? 0,\n      };\n    },\n  });\n\n  const totalLeads = query.data?.count ?? 0;\n  const totalPages = totalLeads > 0 ? Math.ceil(totalLeads / pageSize) : 0;\n\n  return {\n    campaign: query.data?.campaign ?? null,\n    leads: query.data?.leads ?? [],\n    totalLeads,\n    totalPages,\n    page,\n    pageSize,\n    isLoading: query.isLoading,\n    isFetching: query.isFetching,\n    isError: query.isError,\n    error: query.error,\n    refetch: query.refetch,\n  };\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":89,"duration":0.204},
{"type":"measure","name":"lsp.did_open","count":102,"duration":1.769},
{"type":"mark","name":"lsp.did_open","count":103,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BACKGROUND_TASKS_IMPLEMENTATION.md","languageId":"markdown","version":1,"text":"# 🚀 Background Task Architecture Implementation - ProspectPro v4.2\n\n**Status**: READY TO DEPLOY\n**Date**: October 2025  \n**Architecture**: Pure Supabase Edge Functions with Background Tasks  \n**Cost**: $0 extra (stays within Supabase ecosystem)\n\n---\n\n## 🎯 Problem Solved\n\n**BEFORE (Current Issue)**:\n\n- ❌ Edge Functions timeout at 25 seconds\n- ❌ Campaigns return incomplete data (0 leads)\n- ❌ No real-time feedback during processing\n- ❌ Dashboard shows wrong results\n\n**AFTER (Background Tasks)**:\n\n- ✅ Edge Functions return immediately (<100ms)\n- ✅ Processing continues in background (unlimited time)\n- ✅ Real-time progress updates to frontend\n- ✅ Complete campaign processing (1-2 minutes)\n- ✅ Accurate results and cost tracking\n\n---\n\n## 📐 Architecture Overview\n\n### Request Flow\n\n```\nUser Submits Campaign\n       ↓\nEdge Function (instant response)\n       ↓\nCreate Job Record → Return jobId\n       ↓ (returns immediately to user)\nUser sees loading state with jobId\n       ↓\nEdgeRuntime.waitUntil(background task)\n       ↓\nBackground Processing:\n  1. Discover businesses (Google Places)\n  2. Score and qualify leads\n  3. Enrich contacts (Hunter.io, NeverBounce)\n  4. Store results in database\n       ↓\nSupabase Real-time updates\n       ↓\nFrontend updates live (progress bar, metrics)\n       ↓\nCampaign completes → Show results\n```\n\n### Database Schema\n\n**New Table: `discovery_jobs`**\n\n```sql\nCREATE TABLE discovery_jobs (\n  id TEXT PRIMARY KEY,\n  campaign_id TEXT REFERENCES campaigns(id),\n  user_id UUID REFERENCES auth.users(id),\n  session_user_id TEXT,\n\n  -- Job status\n  status TEXT DEFAULT 'pending',  -- pending, processing, completed, failed\n  progress INTEGER DEFAULT 0,     -- 0-100%\n  current_stage TEXT,             -- discovering, scoring, enriching, storing\n\n  -- Configuration\n  config JSONB NOT NULL,          -- {businessType, location, maxResults, etc}\n\n  -- Results\n  results JSONB DEFAULT '[]'::jsonb,\n  metrics JSONB DEFAULT '{}'::jsonb,\n  error TEXT,\n\n  -- Timestamps\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  started_at TIMESTAMPTZ,\n  completed_at TIMESTAMPTZ\n);\n```\n\n---\n\n## 📂 Files Created\n\n### 1. Database Schema\n\n**File**: `/database/job-queue-schema.sql`\n\n- Job queue table definition\n- RLS policies for user isolation\n- Indexes for performance\n- Cleanup function for old jobs\n\n### 2. Edge Function\n\n**File**: `/supabase/functions/business-discovery-background/index.ts`\n\n- **Main handler**: Creates job, returns immediately\n- **Background processor**: Runs via `EdgeRuntime.waitUntil()`\n- **Progress tracking**: Updates job record during processing\n- **Complete pipeline**: Discovery → Scoring → Enrichment → Storage\n\nKey Innovation:\n\n```typescript\n// Function returns immediately\nEdgeRuntime.waitUntil(\n  processDiscoveryJob(jobId, config, supabaseUrl, supabaseServiceKey)\n);\n\n// User gets instant response\nreturn { jobId, status: \"processing\", estimatedTime: \"1-2 minutes\" };\n```\n\n### 3. Frontend Hook\n\n**File**: `/src/hooks/useJobProgress.tsx`\n\n- React hook for real-time job monitoring\n- Supabase Real-time subscription\n- Progress state management\n- Display component with progress bar\n\nUsage:\n\n```typescript\nconst { progress, isLoading } = useJobProgress(jobId);\n\n// progress.status: pending, processing, completed, failed\n// progress.progress: 0-100\n// progress.metrics: { leads_found, total_cost, etc }\n```\n\n### 4. Deployment Script\n\n**File**: `/scripts/deploy-background-tasks.sh`\n\n- One-command deployment\n- Automated testing\n- Verification checks\n- Integration guide\n\n---\n\n## 🚀 Deployment Steps\n\n### Step 1: Deploy Database Schema (5 min)\n\n1. Open **Supabase Dashboard** → SQL Editor\n2. Copy contents of `/database/job-queue-schema.sql`\n3. Run the SQL script\n4. Verify table creation: `SELECT * FROM discovery_jobs LIMIT 1;`\n\n### Step 2: Deploy Edge Function (2 min)\n\n```bash\n# Deploy new background task function\nsupabase functions deploy business-discovery-background --no-verify-jwt\n\n# Verify deployment\nsupabase functions list\n# Should show: business-discovery-background (deployed)\n```\n\n### Step 3: Test Backend (3 min)\n\n```bash\n# Get your anon key from Supabase Dashboard → Settings → API\nexport ANON_KEY=\"your_anon_key_here\"\n\n# Test campaign creation\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background' \\\n  -H \"Authorization: Bearer $ANON_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"businessType\": \"coffee shop\",\n    \"location\": \"Seattle, WA\",\n    \"maxResults\": 2,\n    \"sessionUserId\": \"test_user\"\n  }'\n\n# Response should include:\n# { \"success\": true, \"jobId\": \"job_...\", \"campaignId\": \"campaign_...\" }\n```\n\n### Step 4: Monitor Progress (2 min)\n\n1. Go to **Supabase Dashboard** → Database → `discovery_jobs` table\n2. Find your job record (use the jobId from test)\n3. Refresh every few seconds to see:\n   - `progress`: 0 → 10 → 30 → 50 → 90 → 100\n   - `current_stage`: discovering → scoring → enriching → storing\n   - `status`: pending → processing → completed\n4. Check `campaigns` and `leads` tables for final results\n\n### Step 5: Frontend Integration (10 min)\n\n**A. Update Campaign Form Component**\n\n```typescript\n// Before: Called business-discovery-user-aware\n// After: Call business-discovery-background\n\nasync function submitCampaign(formData) {\n  const response = await fetch(\n    \"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-background\",\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${session.access_token}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        businessType: formData.businessType,\n        location: formData.location,\n        maxResults: formData.maxResults,\n        sessionUserId: user.id,\n      }),\n    }\n  );\n\n  const { jobId, campaignId } = await response.json();\n\n  // Navigate to progress page\n  navigate(`/campaign/${campaignId}/progress?jobId=${jobId}`);\n}\n```\n\n**B. Create Campaign Progress Page**\n\n```typescript\n// src/pages/CampaignProgress.tsx\nimport { useJobProgress, JobProgressDisplay } from \"../hooks/useJobProgress\";\nimport { useParams, useSearchParams } from \"react-router-dom\";\n\nexport function CampaignProgress() {\n  const { campaignId } = useParams();\n  const [searchParams] = useSearchParams();\n  const jobId = searchParams.get(\"jobId\");\n\n  return (\n    <div className=\"campaign-progress-page\">\n      <h1>Campaign In Progress</h1>\n      {jobId && <JobProgressDisplay jobId={jobId} />}\n\n      {/* When completed, show results */}\n      <Link to={`/campaign/${campaignId}/results`}>View Results</Link>\n    </div>\n  );\n}\n```\n\n**C. Add Route**\n\n```typescript\n// src/App.tsx\n<Route path=\"/campaign/:campaignId/progress\" element={<CampaignProgress />} />\n```\n\n---\n\n## 📊 Real-time Progress Updates\n\n### How It Works\n\n1. **Database Changes**: Background task updates `discovery_jobs` table\n2. **Supabase Real-time**: Broadcasts changes to subscribed clients\n3. **Frontend Hook**: `useJobProgress` receives updates automatically\n4. **UI Updates**: Progress bar, stage labels, metrics update live\n\n### Progress Stages\n\n```\nStage                      | Progress | Description\n---------------------------|----------|---------------------------\ninitializing              | 0-10%    | Creating job record\ndiscovering_businesses    | 10-30%   | Searching Google Places\nscoring_businesses        | 30-50%   | Qualifying leads\nenriching_contacts        | 50-90%   | Hunter.io + NeverBounce\nstoring_results           | 90-100%  | Saving to database\n```\n\n### Metrics Displayed Live\n\n- **Businesses found**: Total from Google Places\n- **Qualified leads**: Passed confidence threshold\n- **Leads enriched**: Completed enrichment count\n- **Total cost**: Running cost calculation\n- **Average confidence**: Real-time average score\n\n---\n\n## 🎯 User Experience Flow\n\n### Before (Current - Broken)\n\n```\nUser: Submit campaign\n→ Wait 25 seconds\n→ Function times out\n→ See \"0 leads found\" (error)\n→ Dashboard shows incomplete data\n```\n\n### After (Background Tasks)\n\n```\nUser: Submit campaign\n→ See \"Processing...\" page immediately (<100ms)\n→ Progress bar starts: \"Discovering businesses... 10%\"\n→ Updates live: \"Scoring businesses... 30%\"\n→ Updates live: \"Enriching contacts... 50% (3/5 enriched, $0.45)\"\n→ Updates live: \"Storing results... 90%\"\n→ Completed: \"Campaign complete! 5 leads found, $1.20 total\"\n→ Click \"View Results\" → See accurate data\n```\n\n---\n\n## 💰 Cost Analysis\n\n### Infrastructure Costs\n\n**Supabase Edge Functions** (included in free tier, pay-as-you-grow):\n\n- First 500K requests/month: FREE\n- After: $2 per 1M requests\n- Our cost: ~$0.001 per campaign (negligible)\n\n**Supabase Real-time** (included):\n\n- 200 concurrent connections: FREE\n- After: $10 per 1M messages\n- Our cost: ~$0.0001 per campaign update\n\n**Total Additional Cost**: **$0** (stays within Supabase free tier)\n\n### Comparison to Alternatives\n\n**❌ External Worker Service** (Railway, Render, Fly.io):\n\n- Cost: $5-10/month base\n- Maintenance: Deploy, monitor, scale worker\n- Complexity: Separate service, database connections\n\n**✅ Background Tasks (Our Approach)**:\n\n- Cost: $0 additional\n- Maintenance: Zero (native Supabase)\n- Complexity: Single Edge Function deployment\n\n---\n\n## 🔧 Configuration\n\n### Environment Variables (Already Set)\n\nIn **Supabase Dashboard** → Edge Functions → Secrets:\n\n```bash\nGOOGLE_PLACES_API_KEY=<your_key>\nHUNTER_IO_API_KEY=<your_key>\nNEVERBOUNCE_API_KEY=<your_key>\nSUPABASE_URL=https://sriycekxdqnesdsgwiuc.supabase.co\nSUPABASE_ANON_KEY=<your_anon_key>\nSUPABASE_SERVICE_ROLE_KEY=<your_service_key>\n```\n\nNo changes needed - existing secrets work automatically.\n\n---\n\n## 🧪 Testing Checklist\n\n### Backend Testing\n\n- [ ] Database schema created successfully\n- [ ] Edge Function deploys without errors\n- [ ] Test campaign creates job record\n- [ ] Job status updates from pending → processing → completed\n- [ ] Progress increases: 0% → 10% → 30% → 50% → 90% → 100%\n- [ ] Campaign and leads records created\n- [ ] Cost calculation accurate\n- [ ] RLS policies enforce user isolation\n\n### Frontend Testing\n\n- [ ] Campaign form submits successfully\n- [ ] Redirects to progress page with jobId\n- [ ] Progress bar displays and updates\n- [ ] Stage labels change as processing progresses\n- [ ] Metrics update live (leads found, cost, etc)\n- [ ] Completed state shows final results\n- [ ] Error state handles failures gracefully\n- [ ] Results page shows accurate lead data\n\n---\n\n## 🚨 Troubleshooting\n\n### Issue: Job stays in \"pending\" status\n\n**Cause**: Background task not starting  \n**Solution**:\n\n1. Check Edge Function logs in Supabase Dashboard\n2. Verify SUPABASE_SERVICE_ROLE_KEY is set in function secrets\n3. Check `EdgeRuntime.waitUntil()` is called correctly\n\n### Issue: Real-time updates not appearing\n\n**Cause**: Subscription not established  \n**Solution**:\n\n1. Verify Supabase Real-time is enabled (Dashboard → Database → Replication)\n2. Check browser console for subscription errors\n3. Test with `supabase.channel().subscribe()` directly\n\n### Issue: Progress stuck at certain percentage\n\n**Cause**: API call failing in background task  \n**Solution**:\n\n1. Check Edge Function logs for error messages\n2. Verify API keys (Google Places, Hunter.io, NeverBounce)\n3. Check `discovery_jobs.error` field for error details\n\n### Issue: Campaign completes but shows 0 leads\n\n**Cause**: Database insertion failing  \n**Solution**:\n\n1. Check RLS policies on `campaigns` and `leads` tables\n2. Verify `user_id` or `session_user_id` is set correctly\n3. Check Edge Function logs for database errors\n\n---\n\n## 📈 Monitoring & Observability\n\n### Real-time Monitoring\n\n**Supabase Dashboard**:\n\n- Edge Functions → Logs: See all function executions\n- Database → discovery_jobs: Monitor job progress\n- Database → campaigns: See completed campaigns\n- Database → leads: Verify lead data\n\n### Performance Metrics\n\nTrack these metrics for optimization:\n\n- **Job completion time**: Target 1-2 minutes\n- **Success rate**: Target >95%\n- **Cost per lead**: Target <$0.50\n- **API response times**: Google Places, Hunter.io, NeverBounce\n\n---\n\n## 🎯 Next Steps\n\n### Immediate (After Deployment)\n\n1. Deploy database schema\n2. Deploy Edge Function\n3. Test with 1-2 test campaigns\n4. Integrate frontend progress page\n5. Monitor first real campaigns\n\n### Short-term (Next Week)\n\n1. Add error handling UI for failed jobs\n2. Implement retry logic for failed API calls\n3. Add email notifications for completed campaigns\n4. Create admin dashboard for job monitoring\n\n### Long-term (Future Enhancements)\n\n1. Stripe integration for paid tiers\n2. Advanced filters (industry, revenue, etc)\n3. Bulk campaign creation\n4. Export automation (scheduled exports)\n5. Team collaboration features\n\n---\n\n## ✅ Success Criteria\n\n**Deployment Successful When**:\n\n- ✅ Test campaign completes with >0 leads\n- ✅ Real-time progress updates work in frontend\n- ✅ Campaign results match actual data\n- ✅ Processing time is 1-2 minutes (not 25 seconds timeout)\n- ✅ Cost calculation is accurate\n- ✅ No errors in Edge Function logs\n\n**Production Ready When**:\n\n- ✅ 10 successful test campaigns\n- ✅ Average completion time <2 minutes\n- ✅ Success rate >95%\n- ✅ User feedback confirms improved experience\n- ✅ Dashboard shows accurate data\n\n---\n\n## 📚 Documentation References\n\n- **Supabase Edge Functions**: https://supabase.com/docs/guides/functions\n- **EdgeRuntime.waitUntil()**: https://supabase.com/docs/guides/functions/background-tasks\n- **Supabase Real-time**: https://supabase.com/docs/guides/realtime\n- **Row Level Security**: https://supabase.com/docs/guides/auth/row-level-security\n\n---\n\n## 🎉 Summary\n\n**What We Built**:\n\n- ✅ Job queue system with progress tracking\n- ✅ Background task Edge Function (no timeout limits)\n- ✅ Real-time progress updates to frontend\n- ✅ Complete campaign processing pipeline\n\n**Benefits**:\n\n- ✅ **No timeouts**: Unlimited processing time\n- ✅ **Real-time feedback**: Users see live progress\n- ✅ **Zero cost**: Stays in Supabase ecosystem\n- ✅ **Production ready**: Scalable, reliable architecture\n\n**Ready to Deploy**: Use `/scripts/deploy-background-tasks.sh`\n\n---\n\n**Questions?** Check Edge Function logs in Supabase Dashboard for debugging.\n**Issues?** See Troubleshooting section above.\n**Ready?** Let's deploy! 🚀\n"}}},
{"type":"measure","name":"lsp.did_open","count":103,"duration":0.18},
{"type":"mark","name":"lsp.did_close","count":93,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-config.json"}}},
{"type":"measure","name":"lsp.did_close","count":93,"duration":0.032},
{"type":"mark","name":"lsp.did_close","count":94,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"measure","name":"lsp.did_close","count":94,"duration":1.597},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":90,"duration":0.187},
{"type":"mark","name":"lsp.did_close","count":95,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":91,"duration":0.182},
{"type":"measure","name":"lsp.did_close","count":95,"duration":4.001},
{"type":"mark","name":"lsp.did_close","count":96,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CHANGELOG.md"}}},
{"type":"measure","name":"lsp.did_close","count":96,"duration":0.032},
{"type":"mark","name":"lsp.did_close","count":97,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/2025-10-10-deterministic-dedupe.sql"}}},
{"type":"measure","name":"lsp.did_close","count":97,"duration":0.037},
{"type":"mark","name":"lsp.did_close","count":98,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/utils/leadSanitizers.ts"}}},
{"type":"measure","name":"lsp.did_close","count":98,"duration":0.905},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":92,"duration":0.325},
{"type":"mark","name":"lsp.did_close","count":99,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CAMPAIGN_HISTORY_LINKING_COMPLETE.md"}}},
{"type":"measure","name":"lsp.did_close","count":99,"duration":0.035},
{"type":"mark","name":"lsp.did_open","count":104,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","languageId":"typescriptreact","version":1,"text":"import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useNavigate, useParams, useSearchParams } from \"react-router-dom\";\nimport { ProgressDisplay } from \"../components/ProgressDisplay\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useJobProgress } from \"../hooks/useJobProgress\";\nimport { supabase } from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport { transformCampaignData } from \"../utils/campaignTransforms\";\n\nexport const CampaignProgress: React.FC = () => {\n  const { campaignId } = useParams<{ campaignId: string }>();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const jobId = searchParams.get(\"jobId\");\n\n  // Use the job progress hook for real-time updates\n  const { progress: jobProgress } = useJobProgress(jobId || \"\");\n\n  const campaigns = useCampaignStore((state) => state.campaigns);\n  const addCampaign = useCampaignStore((state) => state.addCampaign);\n  const updateCampaign = useCampaignStore((state) => state.updateCampaign);\n  const setCurrentCampaign = useCampaignStore(\n    (state) => state.setCurrentCampaign\n  );\n  const ensureUniqueCampaignHistory = useCampaignStore(\n    (state) => state.ensureUniqueCampaignHistory\n  );\n  const setCampaignLeads = useCampaignStore((state) => state.setCampaignLeads);\n  const setLoading = useCampaignStore((state) => state.setLoading);\n  const setError = useCampaignStore((state) => state.setError);\n  const { user, loading: authLoading } = useAuth();\n  const authUserId = user?.id ?? null;\n\n  const [isFetchingResults, setIsFetchingResults] = useState(false);\n  const [resultFetchError, setResultFetchError] = useState<string | null>(null);\n  const hasFetchedResultsRef = useRef(false);\n  const isMountedRef = useRef(true);\n\n  useEffect(() => {\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  // Extract data from job progress\n  const progress = jobProgress?.progress || 0;\n  const status = jobProgress?.status || \"pending\";\n  const currentStage = jobProgress?.currentStage || \"Initializing...\";\n  const metrics = jobProgress?.metrics;\n  const isComplete = status === \"completed\";\n  const error = jobProgress?.error;\n\n  const displayStage = isFetchingResults\n    ? \"Preparing final results...\"\n    : currentStage;\n  const displayProgress = isFetchingResults\n    ? Math.min(100, Math.max(progress, 96))\n    : progress;\n  const isProcessing = !isComplete || isFetchingResults;\n\n  const fetchResults = useCallback(async () => {\n    if (!campaignId) {\n      return;\n    }\n\n    if (!authUserId) {\n      setResultFetchError(\"Sign in again to view campaign results.\");\n      return;\n    }\n\n    hasFetchedResultsRef.current = true;\n    setIsFetchingResults(true);\n    setResultFetchError(null);\n    setLoading(true);\n\n    const wait = (ms: number) =>\n      new Promise<void>((resolve) => {\n        setTimeout(resolve, ms);\n      });\n\n    try {\n      const MAX_ATTEMPTS = 5;\n      let campaignRecord: any = null;\n      let leadsRecords: any[] = [];\n\n      for (let attempt = 0; attempt < MAX_ATTEMPTS; attempt += 1) {\n        const campaignQuery = supabase\n          .from(\"campaigns\")\n          .select(\n            \"id,business_type,location,status,total_cost,results_count,created_at,updated_at\"\n          )\n          .eq(\"id\", campaignId)\n          .eq(\"user_id\", authUserId);\n\n        const { data: campaignData, error: campaignError } =\n          await campaignQuery.maybeSingle();\n\n        if (campaignError) {\n          throw campaignError;\n        }\n\n        const leadsQuery = supabase\n          .from(\"leads\")\n          .select(\n            \"id,campaign_id,business_name,address,phone,website,email,confidence_score,validation_cost,enrichment_data,created_at\"\n          )\n          .eq(\"campaign_id\", campaignId)\n          .eq(\"user_id\", authUserId)\n          .order(\"confidence_score\", { ascending: false });\n\n        const { data: leadsData, error: leadsError } = await leadsQuery;\n\n        if (leadsError) {\n          throw leadsError;\n        }\n\n        campaignRecord = campaignData;\n        leadsRecords = leadsData ?? [];\n\n        if (\n          campaignRecord &&\n          (leadsRecords.length > 0 || attempt === MAX_ATTEMPTS - 1)\n        ) {\n          break;\n        }\n\n        await wait(2000);\n      }\n\n      if (!campaignRecord) {\n        throw new Error(\n          \"Campaign record not available yet. Please try again in a moment.\"\n        );\n      }\n\n      const { campaignResult, leads: mappedLeads } = transformCampaignData(\n        campaignRecord,\n        leadsRecords,\n        { metrics: (metrics ?? null) as Record<string, any> | null }\n      );\n\n      const campaignExists = campaigns.some(\n        (item) => item.campaign_id === campaignResult.campaign_id\n      );\n\n      if (campaignExists) {\n        updateCampaign(campaignResult.campaign_id, campaignResult);\n      } else {\n        addCampaign(campaignResult);\n      }\n\n      ensureUniqueCampaignHistory();\n\n      setCampaignLeads(campaignResult.campaign_id, mappedLeads);\n      setCurrentCampaign(campaignResult);\n\n      if (isMountedRef.current) {\n        setResultFetchError(null);\n        navigate(\"/results\", { replace: true, state: { campaignId } });\n      }\n    } catch (err) {\n      console.error(\"⚠️ Unable to load campaign results\", err);\n      const message =\n        err instanceof Error\n          ? err.message\n          : \"Unable to load campaign results. Please try again.\";\n\n      if (isMountedRef.current) {\n        setResultFetchError(message);\n      }\n\n      setError(message);\n      hasFetchedResultsRef.current = false;\n    } finally {\n      if (isMountedRef.current) {\n        setIsFetchingResults(false);\n        setLoading(false);\n      }\n    }\n  }, [\n    addCampaign,\n    authUserId,\n    campaignId,\n    campaigns,\n    ensureUniqueCampaignHistory,\n    metrics,\n    navigate,\n    setCurrentCampaign,\n    setCampaignLeads,\n    setError,\n    setLoading,\n    updateCampaign,\n  ]);\n\n  useEffect(() => {\n    if (!isComplete || !campaignId || !jobId) {\n      return;\n    }\n\n    if (!authUserId) {\n      return;\n    }\n\n    if (hasFetchedResultsRef.current) {\n      return;\n    }\n\n    fetchResults();\n  }, [authUserId, campaignId, fetchResults, isComplete, jobId]);\n\n  const handleRetryFetch = () => {\n    if (!campaignId) {\n      return;\n    }\n\n    if (!authUserId) {\n      setResultFetchError(\"Sign in again to re-establish your session.\");\n      return;\n    }\n\n    fetchResults();\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"flex items-center justify-center\">\n          <div className=\"flex items-center space-x-3 text-gray-600\">\n            <div className=\"h-6 w-6 animate-spin rounded-full border-2 border-blue-600 border-t-transparent\"></div>\n            <span>Loading campaign...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!authUserId) {\n    return (\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"max-w-xl mx-auto rounded-lg border border-gray-200 bg-white p-8 text-center shadow-sm dark:border-gray-700 dark:bg-gray-800\">\n          <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\n            Sign in required\n          </h1>\n          <p className=\"mt-3 text-sm text-gray-600 dark:text-gray-300\">\n            Please sign in to review campaign progress and download results.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!jobId || !campaignId) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">\n            Invalid Campaign\n          </h1>\n          <p className=\"text-gray-600 mb-4\">\n            Missing job or campaign information.\n          </p>\n          <button\n            onClick={() => navigate(\"/\")}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Return Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">\n            Processing Error\n          </h1>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button\n            onClick={() => navigate(\"/\")}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Start New Campaign\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          Campaign Discovery in Progress\n        </h1>\n      </div>\n\n      {isFetchingResults && !resultFetchError && (\n        <div className=\"mb-6 rounded-lg border border-blue-200 bg-blue-50 p-4 text-sm text-blue-700\">\n          Finalizing campaign results and syncing verified leads to your\n          vault...\n        </div>\n      )}\n\n      {resultFetchError && (\n        <div className=\"mb-6 rounded-lg border border-red-200 bg-red-50 p-4 text-sm text-red-700\">\n          <div className=\"font-semibold\">Unable to load campaign results</div>\n          <p className=\"mt-1\">{resultFetchError}</p>\n          <button\n            onClick={handleRetryFetch}\n            className=\"mt-3 inline-flex items-center rounded border border-red-300 bg-white px-3 py-1.5 text-xs font-medium text-red-700 shadow-sm transition hover:bg-red-100\"\n          >\n            Retry syncing results\n          </button>\n        </div>\n      )}\n\n      {/* Progress Display */}\n      <ProgressDisplay\n        isDiscovering={isProcessing}\n        progress={displayProgress}\n        currentStage={displayStage}\n        cacheStats={null} // Real-time updates don't include cache stats\n      />\n\n      {/* Real-time Metrics */}\n      {metrics && (\n        <div className=\"mt-6 bg-white border border-gray-200 rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            📊 Live Discovery Metrics\n          </h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {metrics.total_found || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Found</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {metrics.qualified_leads || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Qualified</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {metrics.avg_confidence ? `${metrics.avg_confidence}%` : \"0%\"}\n              </div>\n              <div className=\"text-sm text-gray-600\">Avg Confidence</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                ${(metrics.total_cost || 0).toFixed(2)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Cost</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Status Updates */}\n      <div className=\"mt-6 bg-gray-50 border border-gray-200 rounded-lg p-4\">\n        <h4 className=\"font-semibold text-gray-900 mb-2\">Status Updates</h4>\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center text-sm\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full mr-2\"></div>\n            <span className=\"text-gray-600\">\n              Campaign started at {new Date().toLocaleTimeString()}\n            </span>\n          </div>\n          {displayStage && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-blue-400 rounded-full mr-2 animate-pulse\"></div>\n              <span className=\"text-gray-900 font-medium\">{displayStage}</span>\n            </div>\n          )}\n          {isFetchingResults && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-purple-400 rounded-full mr-2 animate-pulse\"></div>\n              <span className=\"text-purple-600 font-medium\">\n                Finalizing leads and preparing results...\n              </span>\n            </div>\n          )}\n          {status === \"completed\" && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full mr-2\"></div>\n              <span className=\"text-green-600 font-medium\">\n                ✅ Discovery completed! Redirecting to results...\n              </span>\n            </div>\n          )}\n          {resultFetchError && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-red-400 rounded-full mr-2\"></div>\n              <span className=\"text-red-600 font-medium\">\n                {resultFetchError}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"mt-8 text-center space-x-4\">\n        <button\n          onClick={() => navigate(\"/\")}\n          className=\"px-4 py-2 text-gray-600 bg-gray-100 rounded hover:bg-gray-200\"\n        >\n          Start New Campaign\n        </button>\n        {!isProcessing && (\n          <button\n            onClick={() => navigate(\"/results\", { state: { campaignId } })}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            View Complete Results\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":104,"duration":3.697},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":93,"duration":0.255},
{"type":"mark","name":"lsp.did_open","count":105,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/utils/campaignTransforms.ts","languageId":"typescript","version":1,"text":"import type { BusinessLead, CampaignResult } from \"../types\";\n\nconst normalizeCampaignStatus = (\n  value: string | null | undefined\n): CampaignResult[\"status\"] => {\n  switch (value) {\n    case \"running\":\n    case \"completed\":\n    case \"failed\":\n    case \"cancelled\":\n      return value;\n    default:\n      return \"completed\";\n  }\n};\n\nconst normalizeValidationStatus = (\n  value: string | null | undefined\n): BusinessLead[\"validation_status\"] => {\n  switch (value) {\n    case \"pending\":\n    case \"validating\":\n    case \"validated\":\n    case \"failed\":\n      return value;\n    default:\n      return \"validated\";\n  }\n};\n\nconst deriveDataSources = (enrichmentData: any): string[] => {\n  if (!enrichmentData) {\n    return [\"google_places\"];\n  }\n\n  const fromServices = Array.isArray(\n    enrichmentData?.processingMetadata?.servicesUsed\n  )\n    ? enrichmentData.processingMetadata.servicesUsed\n    : [];\n\n  const fromSources = Array.isArray(enrichmentData?.verificationSources)\n    ? enrichmentData.verificationSources\n    : [];\n\n  const dataSources = [...fromServices, ...fromSources].filter(Boolean);\n  return dataSources.length > 0 ? dataSources : [\"google_places\"];\n};\n\nconst coerceNumber = (value: unknown, fallback = 0): number => {\n  const parsed = Number(value);\n  return Number.isFinite(parsed) ? parsed : fallback;\n};\n\ninterface TransformOptions {\n  metrics?: Record<string, any> | null;\n}\n\nexport interface CampaignTransformResult {\n  campaignResult: CampaignResult;\n  leads: BusinessLead[];\n}\n\nconst sanitizeEnrichmentData = (\n  value: unknown\n): BusinessLead[\"enrichment_data\"] => {\n  if (value == null) {\n    return undefined;\n  }\n\n  if (typeof value !== \"object\") {\n    return undefined;\n  }\n\n  try {\n    return JSON.parse(JSON.stringify(value)) as BusinessLead[\"enrichment_data\"];\n  } catch (error) {\n    console.error(\"⚠️ Unable to sanitize enrichment data in transform\", error);\n    return undefined;\n  }\n};\n\nconst normalizeLeadIdentifier = (lead: any): string | null => {\n  const candidate = lead?.id ?? lead?.lead_id ?? null;\n\n  if (candidate == null) {\n    return null;\n  }\n\n  return String(candidate);\n};\n\nexport const transformCampaignData = (\n  campaignRecord: any,\n  leadsRecords: any[] = [],\n  options: TransformOptions = {}\n): CampaignTransformResult => {\n  if (!campaignRecord) {\n    throw new Error(\"Campaign record is required\");\n  }\n\n  const metricsAny = options.metrics ?? {};\n\n  const mappedLeads: BusinessLead[] = [];\n\n  for (const rawLead of leadsRecords) {\n    const leadId = normalizeLeadIdentifier(rawLead);\n\n    if (leadId == null) {\n      console.warn(\"⚠️ Dropping lead without identifier before hydration\", {\n        campaignId: campaignRecord.id,\n        lead: rawLead,\n      });\n      continue;\n    }\n\n    const lead = rawLead ?? {};\n    const enrichmentData = sanitizeEnrichmentData(lead.enrichment_data);\n    const rawCost =\n      lead.validation_cost ??\n      enrichmentData?.processingMetadata?.totalCost ??\n      0;\n\n    const tierFromData =\n      enrichmentData?.processingMetadata?.enrichmentTier ??\n      enrichmentData?.enrichmentTier;\n\n    const campaignId = String(lead.campaign_id ?? campaignRecord.id ?? \"\");\n\n    if (!campaignId) {\n      console.warn(\"⚠️ Dropping lead without campaign association\", {\n        campaignId: campaignRecord.id,\n        leadId,\n      });\n      continue;\n    }\n\n    mappedLeads.push({\n      id: leadId,\n      campaign_id: campaignId,\n      business_name: lead.business_name ?? \"Unknown Business\",\n      address: lead.address ?? \"\",\n      phone: lead.phone ?? \"\",\n      website: lead.website ?? \"\",\n      email: lead.email ?? \"\",\n      confidence_score: coerceNumber(lead.confidence_score, 0),\n      validation_status: normalizeValidationStatus(\n        enrichmentData?.validationStatus ?? lead.validation_status\n      ),\n      created_at: lead.created_at ?? new Date().toISOString(),\n      cost_to_acquire: coerceNumber(rawCost, 0),\n      data_sources: deriveDataSources(enrichmentData),\n      enrichment_tier:\n        tierFromData ??\n        (metricsAny?.tier as string | undefined) ??\n        (metricsAny?.tier_name as string | undefined) ??\n        undefined,\n      vault_secured: true,\n      enrichment_data: enrichmentData,\n    });\n  }\n\n  const leadsQualified = mappedLeads.filter(\n    (lead) => lead.confidence_score >= 70\n  ).length;\n  const leadsValidated = mappedLeads.filter(\n    (lead) => lead.validation_status === \"validated\"\n  ).length;\n\n  const totalFoundRaw = campaignRecord.results_count ?? mappedLeads.length ?? 0;\n\n  const campaignResult: CampaignResult = {\n    campaign_id: campaignRecord.id,\n    business_type: campaignRecord.business_type ?? undefined,\n    location: campaignRecord.location ?? undefined,\n    status: normalizeCampaignStatus(campaignRecord.status),\n    progress: 100,\n    total_cost: coerceNumber(\n      campaignRecord.total_cost ?? metricsAny?.total_cost ?? 0,\n      0\n    ),\n    leads_found: coerceNumber(totalFoundRaw, mappedLeads.length),\n    leads_qualified: leadsQualified,\n    leads_validated: leadsValidated,\n    created_at: campaignRecord.created_at ?? new Date().toISOString(),\n    completed_at: campaignRecord.updated_at ?? undefined,\n    tier_used:\n      (metricsAny?.tier as string | undefined) ??\n      (metricsAny?.tier_name as string | undefined) ??\n      undefined,\n    vault_secured: true,\n    cache_performance: undefined,\n  };\n\n  return {\n    campaignResult,\n    leads: mappedLeads,\n  };\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":94,"duration":0.224},
{"type":"measure","name":"lsp.did_open","count":105,"duration":3.791},
{"type":"mark","name":"lsp.did_close","count":100,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CLEANUP_REPORT.md"}}},
{"type":"measure","name":"lsp.did_close","count":100,"duration":0.033},
{"type":"mark","name":"lsp.did_open","count":106,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx","languageId":"typescriptreact","version":1,"text":"// Real-time Job Progress Hook for ProspectPro v4.2\n// Subscribe to Supabase Real-time for live campaign updates\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { supabase } from \"../lib/supabase\";\n\ninterface JobProgress {\n  jobId: string;\n  status: \"pending\" | \"processing\" | \"completed\" | \"failed\";\n  progress: number;\n  currentStage: string;\n  metrics?: {\n    businesses_found?: number;\n    qualified_leads?: number;\n    leads_enriched?: number;\n    total_cost?: number;\n    total_found?: number;\n    avg_confidence?: number;\n  };\n  error?: string;\n  completedAt?: string;\n}\n\ninterface RealtimePayload {\n  new: DiscoveryJobRow;\n}\n\ntype DiscoveryJobRow = {\n  id: string;\n  status: string;\n  progress: number | null;\n  current_stage: string | null;\n  metrics: Record<string, number> | null;\n  error?: string | null;\n  completed_at?: string | null;\n};\n\nconst NORMALIZED_STATUS: Record<string, JobProgress[\"status\"]> = {\n  pending: \"pending\",\n  processing: \"processing\",\n  completed: \"completed\",\n  failed: \"failed\",\n};\n\nfunction normalizeStatus(\n  value: string | null | undefined\n): JobProgress[\"status\"] {\n  if (!value) {\n    return \"processing\";\n  }\n\n  return NORMALIZED_STATUS[value] ?? \"processing\";\n}\n\nexport function useJobProgress(jobId: string | null) {\n  const [progress, setProgress] = useState<JobProgress | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const pollingRef = useRef<number | null>(null);\n\n  const stopPolling = useCallback(() => {\n    if (pollingRef.current !== null) {\n      window.clearInterval(pollingRef.current);\n      pollingRef.current = null;\n    }\n  }, []);\n\n  const updateFromRow = useCallback(\n    (row: DiscoveryJobRow | null) => {\n      if (!row) {\n        return;\n      }\n\n      const next: JobProgress = {\n        jobId: row.id,\n        status: normalizeStatus(row.status),\n        progress: row.progress ?? 0,\n        currentStage: row.current_stage ?? \"processing\",\n        metrics: (row.metrics ?? undefined) as JobProgress[\"metrics\"],\n        error: row.error ?? undefined,\n        completedAt: row.completed_at ?? undefined,\n      };\n\n      setProgress(next);\n\n      if (next.status === \"completed\" || next.status === \"failed\") {\n        stopPolling();\n      }\n    },\n    [stopPolling]\n  );\n\n  const fetchStatus = useCallback(async (): Promise<DiscoveryJobRow | null> => {\n    if (!jobId) {\n      return null;\n    }\n\n    const { data, error } = await supabase\n      .from(\"discovery_jobs\")\n      .select(\"*\")\n      .eq(\"id\", jobId)\n      .single();\n\n    if (error) {\n      console.error(\"Error fetching job status:\", error);\n      return null;\n    }\n\n    updateFromRow(data);\n    return data;\n  }, [jobId, updateFromRow]);\n\n  const startPolling = useCallback(() => {\n    if (pollingRef.current !== null || !jobId) {\n      return;\n    }\n\n    pollingRef.current = window.setInterval(() => {\n      void fetchStatus();\n    }, 4000);\n  }, [fetchStatus, jobId]);\n\n  useEffect(() => {\n    if (!jobId) {\n      setIsLoading(false);\n      stopPolling();\n      setProgress(null);\n      return;\n    }\n\n    let isMounted = true;\n\n    const bootstrap = async () => {\n      const row = await fetchStatus();\n      if (!isMounted) {\n        return;\n      }\n\n      setIsLoading(false);\n\n      if (!row) {\n        return;\n      }\n\n      if (row.status !== \"completed\" && row.status !== \"failed\") {\n        startPolling();\n      }\n    };\n\n    void bootstrap();\n\n    const channel = supabase\n      .channel(`discovery_jobs:${jobId}`)\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"UPDATE\",\n          schema: \"public\",\n          table: \"discovery_jobs\",\n          filter: `id=eq.${jobId}`,\n        },\n        (payload: RealtimePayload) => {\n          console.log(\"Real-time update:\", payload.new);\n          updateFromRow(payload.new);\n        }\n      )\n      .subscribe((status) => {\n        if (\n          status === \"TIMED_OUT\" ||\n          status === \"CHANNEL_ERROR\" ||\n          status === \"CLOSED\"\n        ) {\n          console.warn(\n            \"Realtime subscription failed. Falling back to polling.\",\n            {\n              status,\n              jobId,\n            }\n          );\n          startPolling();\n        }\n      });\n\n    return () => {\n      isMounted = false;\n      supabase.removeChannel(channel);\n      stopPolling();\n    };\n  }, [fetchStatus, jobId, startPolling, stopPolling, updateFromRow]);\n\n  return { progress, isLoading };\n}\n\nexport const STAGE_LABELS: Record<string, string> = {\n  initializing: \"Initializing campaign...\",\n  discovering_businesses: \"Discovering businesses...\",\n  scoring_businesses: \"Scoring and qualifying leads...\",\n  enriching_contacts: \"Enriching contact information...\",\n  storing_results: \"Storing results...\",\n};\n\nexport function JobProgressDisplay({ jobId }: { jobId: string }) {\n  const { progress, isLoading } = useJobProgress(jobId);\n\n  if (isLoading) {\n    return <div>Loading job status...</div>;\n  }\n\n  if (!progress) {\n    return <div>Job not found</div>;\n  }\n\n  if (progress.status === \"failed\") {\n    return (\n      <div className=\"error\">\n        <h3>Campaign Failed</h3>\n        <p>{progress.error || \"Unknown error occurred\"}</p>\n      </div>\n    );\n  }\n\n  if (progress.status === \"completed\") {\n    return (\n      <div className=\"success\">\n        <h3>Campaign Completed! 🎉</h3>\n        <p>Found {progress.metrics?.total_found || 0} qualified leads</p>\n        <p>Total cost: ${progress.metrics?.total_cost?.toFixed(2) || \"0.00\"}</p>\n        <p>\n          Average confidence:{\" \"}\n          {progress.metrics?.avg_confidence?.toFixed(0) || 0}%\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"progress\">\n      <h3>Campaign In Progress</h3>\n      <div className=\"progress-bar\">\n        <div\n          className=\"progress-fill\"\n          style={{ width: `${progress.progress}%` }}\n        />\n      </div>\n      <p>{progress.progress}% complete</p>\n      <p className=\"stage\">\n        {STAGE_LABELS[progress.currentStage] || progress.currentStage}\n      </p>\n\n      {progress.metrics && (\n        <div className=\"metrics\">\n          {progress.metrics.businesses_found && (\n            <p>Businesses found: {progress.metrics.businesses_found}</p>\n          )}\n          {progress.metrics.qualified_leads && (\n            <p>Qualified leads: {progress.metrics.qualified_leads}</p>\n          )}\n          {progress.metrics.leads_enriched && (\n            <p>Enriched: {progress.metrics.leads_enriched}</p>\n          )}\n          {progress.metrics.total_cost && (\n            <p>Cost: ${progress.metrics.total_cost.toFixed(2)}</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":95,"duration":0.206},
{"type":"measure","name":"lsp.did_open","count":106,"duration":2.353},
{"type":"mark","name":"lsp.did_close","count":101,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":96,"duration":0.186},
{"type":"measure","name":"lsp.did_close","count":101,"duration":1.147},
{"type":"mark","name":"lsp.did_close","count":102,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"}}},
{"type":"measure","name":"lsp.did_close","count":102,"duration":0.896},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":97,"duration":0.206},
{"type":"mark","name":"lsp.did_close","count":103,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BACKGROUND_TASKS_IMPLEMENTATION.md"}}},
{"type":"measure","name":"lsp.did_close","count":103,"duration":0.119},
{"type":"mark","name":"lsp.did_open","count":107,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/types/index.ts","languageId":"typescript","version":1,"text":"// Business Discovery Types\nexport interface BusinessLead {\n  id: string;\n  campaign_id?: string;\n  business_name: string;\n  address?: string;\n  phone?: string;\n  website?: string;\n  email?: string;\n  industry?: string;\n  confidence_score: number;\n  validation_status: \"pending\" | \"validating\" | \"validated\" | \"failed\";\n  created_at: string;\n  cost_to_acquire: number;\n  data_sources: string[];\n  // Progressive enrichment fields\n  enrichment_tier?: string;\n  vault_secured?: boolean;\n  enrichment_data?: {\n    emails?: Array<{\n      email: string;\n      confidence: number;\n      verified: boolean;\n      type?: string;\n      firstName?: string;\n      lastName?: string;\n      position?: string;\n    }>;\n    businessLicense?: {\n      isValid: boolean;\n      licenseNumber?: string;\n      status?: string;\n      expirationDate?: string;\n      professionalType?: string;\n      source: string;\n    };\n    companyInfo?: {\n      name?: string;\n      industry?: string;\n      size?: string;\n      founded?: number;\n      revenue?: string;\n      website?: string;\n      description?: string;\n      source: string;\n    };\n    hunterVerified?: boolean;\n    neverBounceVerified?: boolean;\n    licenseVerified?: boolean;\n    validationStatus?: \"pending\" | \"validating\" | \"validated\" | \"failed\";\n    enrichmentTier?: string;\n    verificationSources?: string[];\n    processingMetadata?: {\n      servicesUsed?: string[];\n      servicesSkipped?: string[];\n      totalCost?: number;\n      validationCost?: number;\n      enrichmentCost?: number;\n      enrichmentTier?: string;\n      enrichmentCostBreakdown?: {\n        businessLicenseCost: number;\n        companyEnrichmentCost: number;\n        hunterCost: number;\n        neverBounceCost: number;\n        personEnrichmentCost: number;\n        apolloCost: number;\n        complianceCost: number;\n      };\n    };\n    dataSources?: string[];\n  };\n}\n\nexport interface CampaignConfig {\n  search_terms: string;\n  location: string;\n  business_type?: string;\n  budget_limit: number;\n  max_results: number;\n  include_email_validation: boolean;\n  include_website_validation: boolean;\n  min_confidence_score: number;\n  chamber_verification?: boolean;\n  trade_association?: boolean;\n  professional_license?: boolean;\n  keywords?: string;\n  search_radius?: string;\n  expand_geography?: boolean;\n}\n\nexport interface ValidationResult {\n  field: string;\n  is_valid: boolean;\n  confidence: number;\n  source: string;\n  details?: string;\n}\n\nexport interface CampaignResult {\n  campaign_id: string;\n  business_type?: string;\n  location?: string;\n  status: \"running\" | \"completed\" | \"failed\" | \"cancelled\";\n  progress: number;\n  total_cost: number;\n  leads_found: number;\n  leads_qualified: number;\n  leads_validated: number;\n  created_at: string;\n  completed_at?: string;\n  error_message?: string;\n  // Progressive enrichment fields\n  tier_used?: string;\n  vault_secured?: boolean;\n  cache_performance?: {\n    cache_hits: number;\n    cache_misses: number;\n    cache_hit_ratio: number;\n    cost_savings: number;\n  };\n}\n\n// Census Intelligence Types\nexport interface CensusIntelligence {\n  business_density: {\n    total_establishments: number;\n    density_score: number;\n    confidence_multiplier: number;\n  };\n  geographic_optimization: {\n    optimal_radius: number;\n    expected_results: number;\n    api_efficiency_score: number;\n  };\n  market_insights: {\n    market_density: \"High\" | \"Medium\" | \"Low\";\n    competition_level: \"High\" | \"Medium\" | \"Low\";\n    search_optimization: string;\n  };\n}\n\n// API Response Types\nexport interface EdgeFunctionResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  cost?: number;\n  processing_time?: number;\n}\n\nexport interface BusinessDiscoveryResponse {\n  businesses: BusinessLead[];\n  total_cost: number;\n  processing_time: string;\n  campaign_id: string;\n  qualified_count: number;\n  total_found: number;\n  census_intelligence?: CensusIntelligence;\n  // Background job fields\n  job_id?: string; // For tracking background processing\n  status?: string; // Job status (pending, processing, completed, failed)\n  estimated_time?: number; // Estimated completion time in seconds\n  realtime_channel?: string; // Channel for real-time updates\n  // Progressive enrichment fields (vault-secured)\n  tier_used?: string;\n  cache_performance?: {\n    cache_hits: number;\n    cache_misses: number;\n    cache_hit_ratio: number;\n    cost_savings: number;\n  };\n  vault_status?: string;\n  stage_progress?: number;\n  current_stage?: string;\n}\n\n// Store Types\nexport interface CampaignStore {\n  campaigns: CampaignResult[];\n  currentCampaign: CampaignResult | null;\n  currentCampaignId: string | null;\n  leads: BusinessLead[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport interface UIStore {\n  sidebarOpen: boolean;\n  theme: \"light\" | \"dark\";\n  notifications: Notification[];\n}\n\nexport interface Notification {\n  id: string;\n  type: \"success\" | \"error\" | \"warning\" | \"info\";\n  title: string;\n  message: string;\n  timestamp: number;\n}\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":98,"duration":0.209},
{"type":"measure","name":"lsp.did_open","count":107,"duration":3.05},
{"type":"mark","name":"lsp.did_open","count":108,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Dashboard.tsx","languageId":"typescriptreact","version":1,"text":"import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { supabase } from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\n\ninterface Campaign {\n  id: string;\n  campaign_id?: string;\n  business_type: string;\n  location: string;\n  status: string;\n  results_count: number;\n  leads_found?: number;\n  leads_qualified?: number;\n  total_cost: number;\n  created_at: string;\n}\n\nexport const Dashboard: React.FC = () => {\n  const { user, loading: authLoading } = useAuth();\n  const { campaigns: localCampaigns, leads: localLeads } = useCampaignStore();\n  const navigate = useNavigate();\n\n  const [campaigns, setCampaigns] = useState<Campaign[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch user-aware campaigns from database\n  useEffect(() => {\n    const fetchCampaigns = async () => {\n      if (authLoading) {\n        return;\n      }\n\n      if (!user?.id) {\n        setCampaigns([]);\n        setLoading(false);\n        setError(null);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        console.log(\"📊 Fetching campaigns for user:\", user.id);\n\n        // Query campaigns scoped to the authenticated user\n        const query = supabase\n          .from(\"campaigns\")\n          .select(\"*\")\n          .eq(\"user_id\", user.id);\n\n        const { data, error } = await query.order(\"created_at\", {\n          ascending: false,\n        });\n\n        if (error) {\n          console.error(\"❌ Error fetching campaigns:\", error);\n          setError(error.message);\n          return;\n        }\n\n        console.log(\"✅ Campaigns loaded:\", data?.length || 0);\n        setCampaigns(data || []);\n      } catch (err) {\n        console.error(\"❌ Unexpected error:\", err);\n        setError(\n          err instanceof Error ? err.message : \"Failed to load campaigns\"\n        );\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCampaigns();\n  }, [authLoading, user?.id]);\n\n  // Calculate stats from database campaigns\n  const totalCost = campaigns.reduce(\n    (sum, campaign) => sum + (campaign.total_cost || 0),\n    0\n  );\n  const totalLeads = campaigns.reduce(\n    (sum, campaign) => sum + (campaign.results_count || 0),\n    0\n  );\n  const qualifiedLeads = localLeads.filter(\n    (lead) => lead.confidence_score >= 80\n  ).length;\n\n  // Fallback to local store data if no database campaigns\n  const stats = [\n    {\n      name: \"Total Campaigns\",\n      value: campaigns.length || localCampaigns.length,\n      icon: \"🚀\",\n    },\n    { name: \"Total Leads\", value: totalLeads || localLeads.length, icon: \"👥\" },\n    { name: \"Qualified Leads\", value: qualifiedLeads, icon: \"✅\" },\n    { name: \"Total Cost\", value: `$${totalCost.toFixed(2)}`, icon: \"💰\" },\n  ];\n\n  const recentCampaigns =\n    campaigns.length > 0 ? campaigns.slice(0, 5) : localCampaigns.slice(0, 5);\n\n  if (loading || authLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600 dark:text-gray-400\">\n            Loading campaigns...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-8 text-center\">\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n          Sign in to view your campaigns\n        </h2>\n        <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n          Create an account or sign in to access saved campaigns and lead\n          history.\n        </p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n        <div className=\"flex\">\n          <div className=\"text-red-500 dark:text-red-400 text-xl mr-3\">⚠️</div>\n          <div>\n            <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n              Error loading campaigns\n            </h3>\n            <p className=\"text-sm text-red-700 dark:text-red-300 mt-1\">\n              {error}\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n          Dashboard\n        </h1>\n        <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n          Overview of your lead generation campaigns and results\n        </p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\n        {stats.map((stat) => (\n          <div\n            key={stat.name}\n            className=\"bg-white dark:bg-gray-700 overflow-hidden shadow rounded-lg border border-gray-200 dark:border-gray-600\"\n          >\n            <div className=\"p-5\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <span className=\"text-2xl\">{stat.icon}</span>\n                </div>\n                <div className=\"ml-5 w-0 flex-1\">\n                  <dl>\n                    <dt className=\"text-sm font-medium text-gray-500 dark:text-gray-400 truncate\">\n                      {stat.name}\n                    </dt>\n                    <dd className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">\n                      {stat.value}\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Recent Campaigns */}\n      <div className=\"bg-white dark:bg-gray-700 shadow rounded-lg border border-gray-200 dark:border-gray-600\">\n        <div className=\"px-4 py-5 sm:p-6\">\n          <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-gray-100 mb-4\">\n            Recent Campaigns\n          </h3>\n          {recentCampaigns.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <span className=\"text-4xl\">🔍</span>\n              <h3 className=\"mt-2 text-sm font-medium text-gray-900 dark:text-gray-100\">\n                No campaigns yet\n              </h3>\n              <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                Get started by creating your first lead discovery campaign.\n              </p>\n              <div className=\"mt-6\">\n                <a\n                  href=\"/discovery\"\n                  className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 focus:ring-blue-500 dark:focus:ring-blue-400 transition-colors\"\n                >\n                  Start Discovery\n                </a>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {recentCampaigns.map((campaign: any) => {\n                const campaignId = campaign.id || campaign.campaign_id || \"\";\n                const leadsCount =\n                  campaign.results_count || campaign.leads_found || 0;\n                const qualifiedCount = campaign.leads_qualified || 0;\n\n                return (\n                  <div\n                    key={campaignId}\n                    className=\"flex items-center justify-between p-4 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 cursor-pointer transition-colors\"\n                    onClick={() => navigate(`/campaign?id=${campaignId}`)}\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center\">\n                        <span\n                          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                            campaign.status === \"completed\"\n                              ? \"bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200\"\n                              : campaign.status === \"running\"\n                              ? \"bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200\"\n                              : campaign.status === \"failed\"\n                              ? \"bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200\"\n                              : \"bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200\"\n                          }`}\n                        >\n                          {campaign.status}\n                        </span>\n                        <span className=\"ml-3 text-sm font-weight-medium text-gray-900 dark:text-gray-100\">\n                          {campaign.business_type} in {campaign.location}\n                        </span>\n                      </div>\n                      <div className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                        {leadsCount} results • {qualifiedCount} qualified • $\n                        {campaign.total_cost.toFixed(2)} cost\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        {new Date(campaign.created_at).toLocaleDateString()}\n                      </div>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          navigate(`/campaign?id=${campaignId}`);\n                        }}\n                        className=\"text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium transition-colors\"\n                      >\n                        View Details →\n                      </button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":108,"duration":2.607},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":99,"duration":0.193},
{"type":"mark","name":"lsp.did_open","count":109,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport {\n  createUsageLogger,\n  UsageLogContext,\n  UsageLogger,\n} from \"../_shared/api-usage.ts\";\nimport { corsHeaders, handleCORS } from \"../_shared/edge-auth.ts\";\n\n// Background Task Business Discovery with Tiered Enrichment + Multi-Source Discovery\n// ProspectPro v4.3 - October 2025\n// - Google Places + Foursquare discovery with Census targeting\n// - Tier-aware enrichment pipeline with Hunter.io + NeverBounce\n// - Rich verification metadata persisted for UI + exports\n\n// Type declarations for EdgeRuntime\ndeclare const EdgeRuntime: {\n  waitUntil(promise: Promise<unknown>): void;\n};\n\ntype TierKey = \"BASE\" | \"PROFESSIONAL\" | \"ENTERPRISE\";\n\ntype DataSource = \"google_places\" | \"google_place_details\" | \"foursquare\";\n\ninterface TierSettings {\n  key: TierKey;\n  name: string;\n  pricePerLead: number;\n  orchestratorTier: \"starter\" | \"professional\" | \"enterprise\" | \"compliance\";\n  maxCostPerLead: number;\n  includes: {\n    verifyEmails: boolean;\n    personEnrichment: boolean;\n    apolloEnrichment: boolean;\n  };\n}\n\nconst ENRICHMENT_TIERS: Record<TierKey, TierSettings> = {\n  BASE: {\n    key: \"BASE\",\n    name: \"Base\",\n    pricePerLead: 0.15,\n    orchestratorTier: \"starter\",\n    maxCostPerLead: 0.5,\n    includes: {\n      verifyEmails: false, // Generic company email only\n      personEnrichment: false,\n      apolloEnrichment: false,\n    },\n  },\n  PROFESSIONAL: {\n    key: \"PROFESSIONAL\",\n    name: \"Professional\",\n    pricePerLead: 0.45,\n    orchestratorTier: \"professional\",\n    maxCostPerLead: 1.5,\n    includes: {\n      verifyEmails: true, // Professional email discovery & verification\n      personEnrichment: false,\n      apolloEnrichment: false,\n    },\n  },\n  ENTERPRISE: {\n    key: \"ENTERPRISE\",\n    name: \"Enterprise\",\n    pricePerLead: 2.5,\n    orchestratorTier: \"enterprise\",\n    maxCostPerLead: 7.5,\n    includes: {\n      verifyEmails: true,\n      personEnrichment: true, // Executive contact enrichment\n      apolloEnrichment: true, // Full compliance verification\n    },\n  },\n};\n\ninterface BusinessDiscoveryRequest {\n  businessType: string;\n  location: string;\n  keywords?: string[] | string;\n  searchRadius?: string;\n  expandGeography?: boolean;\n  maxResults?: number;\n  budgetLimit?: number;\n  minConfidenceScore?: number;\n  sessionUserId?: string;\n  tierKey?: TierKey;\n  tierName?: string;\n  tierPrice?: number;\n  options?: {\n    tradeAssociation?: boolean;\n    professionalLicense?: boolean;\n    chamberVerification?: boolean;\n    apolloDiscovery?: boolean;\n  };\n  userEmail?: string;\n}\n\ninterface RequestSnapshot {\n  requestedAt: string;\n  requestHash: string;\n  payload: {\n    businessType: string;\n    location: string;\n    keywords: string[];\n    searchRadius?: string;\n    expandGeography: boolean;\n    maxResults: number;\n    budgetLimit: number;\n    minConfidenceScore: number;\n    tierKey: TierKey;\n    tierName: string;\n    options: {\n      tradeAssociation: boolean;\n      professionalLicense: boolean;\n      chamberVerification: boolean;\n      apolloDiscovery: boolean;\n    };\n  };\n}\n\ninterface JobConfig {\n  campaignId: string;\n  businessType: string;\n  location: string;\n  keywords: string[];\n  searchRadius?: string;\n  expandGeography: boolean;\n  maxResults: number;\n  budgetLimit: number;\n  minConfidenceScore: number;\n  userId?: string;\n  sessionUserId?: string;\n  jobId?: string;\n  tier: TierSettings;\n  options: {\n    tradeAssociation: boolean;\n    professionalLicense: boolean;\n    chamberVerification: boolean;\n    apolloDiscovery: boolean;\n  };\n  requestSnapshot: RequestSnapshot;\n}\n\ninterface BusinessData {\n  name?: string;\n  businessName?: string;\n  formatted_address?: string;\n  address?: string;\n  formatted_phone_number?: string;\n  phone?: string;\n  website?: string;\n  place_id?: string;\n  rating?: number;\n  user_ratings_total?: number;\n  source?: DataSource;\n  data_enriched?: boolean;\n  foursquare_data?: Record<string, unknown>;\n}\n\ninterface DiscoveredBusiness extends BusinessData {\n  source: DataSource;\n}\n\ninterface FoursquarePlace {\n  fsq_id: string;\n  name: string;\n  location?: {\n    address?: string;\n    locality?: string;\n    admin_district?: string;\n    region?: string;\n    postcode?: string;\n    country?: string;\n  };\n  contact?: {\n    phone?: string;\n  };\n  website?: string;\n  rating?: number;\n  stats?: {\n    total_tips?: number;\n  };\n}\n\ninterface ScoredLead {\n  businessName: string;\n  address: string;\n  phone: string;\n  website: string;\n  email: string;\n  optimizedScore: number;\n  validationCost: number;\n  dataSources: string[];\n  enhancementData: {\n    verificationSources: string[];\n    emails?: Array<{\n      email: string;\n      confidence?: number;\n      verified?: boolean;\n      type?: string;\n      firstName?: string;\n      lastName?: string;\n      position?: string;\n    }>;\n    processingMetadata: {\n      totalCost: number;\n      validationCost: number;\n      enrichmentCost: number;\n      totalConfidenceBoost: number;\n      processingStrategy: string;\n      servicesUsed: string[];\n      servicesSkipped: string[];\n      enrichmentTier: string;\n      enrichmentCostBreakdown?: Record<string, number>;\n      emailStatus?: \"verified\" | \"unconfirmed\" | \"not_found\";\n      verifiedEmail?: string;\n      unverifiedEmail?: string;\n    };\n  };\n}\n\ninterface CensusIntelligence {\n  total_establishments: number;\n  density_score: number;\n  optimization: {\n    search_radius: number;\n    expected_results: number;\n    api_efficiency_score: number;\n    confidence_multiplier: number;\n  };\n  geographic_data: {\n    state: string;\n    county: string | null;\n    raw_location: string;\n    fallback?: boolean;\n  };\n}\n\nconst DEFAULT_OPTIONS = {\n  tradeAssociation: false,\n  professionalLicense: false,\n  chamberVerification: false,\n  apolloDiscovery: false,\n};\n\nconst GOOGLE_TEXT_SEARCH_COST = 0.032;\nconst GOOGLE_DETAILS_COST = 0.017;\nconst FOURSQUARE_SEARCH_COST = 0;\n\nfunction parseKeywords(input?: string[] | string): string[] {\n  if (!input) return [];\n  if (Array.isArray(input)) {\n    return input.map((value) => value.trim()).filter(Boolean);\n  }\n  return input\n    .split(\",\")\n    .map((value) => value.trim())\n    .filter(Boolean);\n}\n\nasync function createStableHash(payload: unknown): Promise<string> {\n  try {\n    if (!payload) {\n      return `${Date.now().toString(36)}${Math.random()\n        .toString(36)\n        .slice(2, 11)}`;\n    }\n\n    if (typeof crypto === \"undefined\" || !crypto?.subtle) {\n      return `${Date.now().toString(36)}${Math.random()\n        .toString(36)\n        .slice(2, 11)}`;\n    }\n\n    const encoder = new TextEncoder();\n    const encoded = encoder.encode(JSON.stringify(payload));\n    const buffer = await crypto.subtle.digest(\"SHA-256\", encoded);\n    return Array.from(new Uint8Array(buffer))\n      .map((byte) => byte.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n  } catch (error) {\n    console.warn(\"Hash generation failed\", error);\n    return `${Date.now().toString(36)}${Math.random()\n      .toString(36)\n      .slice(2, 11)}`;\n  }\n}\n\nfunction getTierSettings(\n  tierKey?: TierKey,\n  fallbackName?: string\n): TierSettings {\n  if (tierKey && ENRICHMENT_TIERS[tierKey]) {\n    return ENRICHMENT_TIERS[tierKey];\n  }\n\n  if (fallbackName) {\n    const match = (Object.values(ENRICHMENT_TIERS) as TierSettings[]).find(\n      (tier) => tier.name.toLowerCase() === fallbackName.toLowerCase()\n    );\n    if (match) return match;\n  }\n\n  return ENRICHMENT_TIERS.BASE; // Changed from PROFESSIONAL to BASE as default\n}\n\n// --------------------\n// Census Intelligence\n// --------------------\n\nclass CensusAPIClient {\n  private apiKey: string;\n  private baseURL: string;\n  private cache = new Map<string, { data: unknown; timestamp: number }>();\n  private cacheTTL = 24 * 60 * 60 * 1000;\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n    this.baseURL = \"https://api.census.gov/data\";\n  }\n\n  async getBusinessDensity(\n    businessType: string,\n    location: string\n  ): Promise<CensusIntelligence> {\n    const naicsCode = this.mapBusinessTypeToNAICS(businessType);\n    const geoData = this.parseLocation(location);\n\n    const censusData = await this.fetchCountyBusinessPatterns({\n      naics: naicsCode,\n      state: geoData.state,\n      county: geoData.county,\n    });\n\n    return this.calculateDensityMetrics(censusData, geoData, location);\n  }\n\n  private async fetchCountyBusinessPatterns({\n    naics,\n    state,\n    county,\n  }: {\n    naics: string;\n    state: string;\n    county: string | null;\n  }) {\n    const cacheKey = `cbp_${naics}_${state}_${county ?? \"all\"}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheTTL) {\n      return cached.data as unknown[];\n    }\n\n    const url = `${this.baseURL}/2021/cbp?get=ESTAB,EMP,NAICS2017_LABEL&for=state:${state}&NAICS2017=${naics}&key=${this.apiKey}`;\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error(`Census API error: ${response.status}`);\n    }\n\n    const data = (await response.json()) as unknown[];\n    this.cache.set(cacheKey, { data, timestamp: Date.now() });\n    return data;\n  }\n\n  private calculateDensityMetrics(\n    censusData: unknown[],\n    geoData: {\n      state: string;\n      county: string | null;\n      raw_location: string;\n      fallback?: boolean;\n    },\n    rawLocation: string\n  ): CensusIntelligence {\n    if (!Array.isArray(censusData) || censusData.length < 2) {\n      return this.getDefaultOptimization(\n        rawLocation,\n        geoData.state,\n        geoData.county\n      );\n    }\n\n    const businessData = censusData.slice(1) as [\n      string,\n      string,\n      string,\n      string\n    ][];\n    let totalEstablishments = 0;\n    let totalEmployment = 0;\n\n    for (const row of businessData) {\n      const [estab, emp] = row;\n      totalEstablishments += parseInt(estab) || 0;\n      totalEmployment += parseInt(emp) || 0;\n    }\n\n    const densityScore = Math.min(totalEstablishments / 750, 100);\n    const confidenceMultiplier =\n      totalEstablishments > 750 ? 1.3 : totalEstablishments > 250 ? 1.15 : 1;\n    const expectedResults = Math.max(Math.round(totalEstablishments * 0.04), 5);\n\n    return {\n      total_establishments: totalEstablishments,\n      density_score: densityScore,\n      optimization: {\n        search_radius: this.calculateOptimalRadius(densityScore),\n        expected_results: Math.min(expectedResults, 40),\n        api_efficiency_score: Math.round(densityScore),\n        confidence_multiplier: confidenceMultiplier,\n      },\n      geographic_data: geoData,\n    };\n  }\n\n  private getDefaultOptimization(\n    rawLocation: string,\n    state: string,\n    county: string | null\n  ): CensusIntelligence {\n    return {\n      total_establishments: 250,\n      density_score: 25,\n      optimization: {\n        search_radius: 25,\n        expected_results: 12,\n        api_efficiency_score: 45,\n        confidence_multiplier: 1,\n      },\n      geographic_data: {\n        state,\n        county,\n        raw_location: rawLocation,\n        fallback: true,\n      },\n    };\n  }\n\n  private mapBusinessTypeToNAICS(businessType: string): string {\n    const naicsMapping: Record<string, string> = {\n      accounting: \"5412\",\n      cpa: \"5412\",\n      legal: \"5411\",\n      electrician: \"238210\",\n      contractor: \"23\",\n      restaurant: \"7225\",\n      cafe: \"722515\",\n      medical: \"621\",\n      dental: \"6212\",\n      retail: \"44\",\n      spa: \"8121\",\n      salon: \"8121\",\n      consulting: \"5416\",\n      marketing: \"5418\",\n      real: \"531\",\n      hvac: \"238220\",\n    };\n\n    const lower = businessType.toLowerCase();\n    for (const [key, code] of Object.entries(naicsMapping)) {\n      if (lower.includes(key)) return code;\n    }\n    return \"00\";\n  }\n\n  private parseLocation(location: string) {\n    const stateMatch = location.match(/\\b([A-Z]{2})\\b/);\n    const stateCode = stateMatch ? this.getStateFIPSCode(stateMatch[1]) : \"06\";\n    return {\n      state: stateCode,\n      county: null,\n      raw_location: location,\n    };\n  }\n\n  private getStateFIPSCode(stateAbbr: string): string {\n    const stateCodes: Record<string, string> = {\n      AL: \"01\",\n      AK: \"02\",\n      AZ: \"04\",\n      AR: \"05\",\n      CA: \"06\",\n      CO: \"08\",\n      CT: \"09\",\n      DE: \"10\",\n      FL: \"12\",\n      GA: \"13\",\n      HI: \"15\",\n      ID: \"16\",\n      IL: \"17\",\n      IN: \"18\",\n      IA: \"19\",\n      KS: \"20\",\n      KY: \"21\",\n      LA: \"22\",\n      ME: \"23\",\n      MD: \"24\",\n      MA: \"25\",\n      MI: \"26\",\n      MN: \"27\",\n      MS: \"28\",\n      MO: \"29\",\n      MT: \"30\",\n      NE: \"31\",\n      NV: \"32\",\n      NH: \"33\",\n      NJ: \"34\",\n      NM: \"35\",\n      NY: \"36\",\n      NC: \"37\",\n      ND: \"38\",\n      OH: \"39\",\n      OK: \"40\",\n      OR: \"41\",\n      PA: \"42\",\n      RI: \"44\",\n      SC: \"45\",\n      SD: \"46\",\n      TN: \"47\",\n      TX: \"48\",\n      UT: \"49\",\n      VT: \"50\",\n      VA: \"51\",\n      WA: \"53\",\n      WV: \"54\",\n      WI: \"55\",\n      WY: \"56\",\n    };\n    return stateCodes[stateAbbr.toUpperCase()] || \"06\";\n  }\n\n  private calculateOptimalRadius(densityScore: number): number {\n    if (densityScore > 60) return 5;\n    if (densityScore > 30) return 10;\n    if (densityScore > 10) return 20;\n    return 35;\n  }\n}\n\nasync function fetchCensusIntelligence(\n  businessType: string,\n  location: string\n): Promise<CensusIntelligence | null> {\n  const censusKey = Deno.env.get(\"CENSUS_API_KEY\");\n  if (!censusKey) return null;\n\n  try {\n    const client = new CensusAPIClient(censusKey);\n    return await client.getBusinessDensity(businessType, location);\n  } catch (error) {\n    console.warn(\"Census intelligence unavailable:\", error);\n    return null;\n  }\n}\n\n// --------------------\n// Discovery Providers\n// --------------------\n\nasync function searchGooglePlaces(\n  businessType: string,\n  location: string,\n  keywords: string[],\n  maxResults: number,\n  usageLogger?: UsageLogger,\n  usageContext?: UsageLogContext\n): Promise<DiscoveredBusiness[]> {\n  const apiKey = Deno.env.get(\"GOOGLE_PLACES_API_KEY\");\n  if (!apiKey) throw new Error(\"Google Places API key not configured\");\n\n  const keywordSuffix = keywords.length > 0 ? ` ${keywords.join(\" \")}` : \"\";\n  const query = `${businessType}${keywordSuffix} in ${location}`;\n  const searchUrl = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(\n    query\n  )}&key=${apiKey}`;\n\n  const requestParams = {\n    query,\n    businessType,\n    location,\n    keywordCount: keywords.length,\n    maxResults,\n  };\n\n  let textResponse: Response | null = null;\n  let data: Record<string, unknown> = {};\n  const searchStarted = performance.now();\n\n  try {\n    textResponse = await fetch(searchUrl);\n    data = await textResponse.json();\n  } catch (error) {\n    await usageLogger?.log({\n      sourceName: \"google_places\",\n      endpoint: \"textsearch\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: textResponse?.status ?? null,\n      responseTimeMs: Math.round(performance.now() - searchStarted),\n      success: false,\n      errorMessage: error instanceof Error ? error.message : String(error),\n    });\n    throw error;\n  }\n\n  const searchElapsed = Math.round(performance.now() - searchStarted);\n\n  if (data.status !== \"OK\") {\n    await usageLogger?.log({\n      sourceName: \"google_places\",\n      endpoint: \"textsearch\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: textResponse.status,\n      responseTimeMs: searchElapsed,\n      success: false,\n      errorMessage:\n        (data.error_message as string | undefined) || (data.status as string),\n      estimatedCost: GOOGLE_TEXT_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw new Error(`Google Places API failed: ${data.status}`);\n  }\n\n  const results = (data.results as BusinessData[]).slice(0, maxResults * 2);\n\n  await usageLogger?.log({\n    sourceName: \"google_places\",\n    endpoint: \"textsearch\",\n    httpMethod: \"GET\",\n    requestParams,\n    queryType: \"discovery\",\n    responseCode: textResponse.status,\n    responseTimeMs: searchElapsed,\n    resultsReturned: results.length,\n    usefulResults: results.length,\n    success: true,\n    estimatedCost: GOOGLE_TEXT_SEARCH_COST,\n    actualCost: GOOGLE_TEXT_SEARCH_COST,\n    ...usageContext,\n  });\n\n  const enriched: DiscoveredBusiness[] = [];\n\n  for (const business of results) {\n    if (!business.place_id) {\n      enriched.push({ ...business, source: \"google_places\" });\n      continue;\n    }\n\n    const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${business.place_id}&fields=formatted_phone_number,website&key=${apiKey}`;\n    const detailStart = performance.now();\n\n    let detailsResponse: Response | null = null;\n    let detailsData: {\n      result?: {\n        formatted_phone_number?: string;\n        website?: string;\n      };\n      [key: string]: unknown;\n    } = {};\n\n    try {\n      detailsResponse = await fetch(detailsUrl);\n      detailsData = await detailsResponse.json();\n    } catch (error) {\n      await usageLogger?.log({\n        sourceName: \"google_places\",\n        endpoint: \"details\",\n        httpMethod: \"GET\",\n        requestParams: {\n          placeId: business.place_id,\n        },\n        queryType: \"discovery\",\n        responseCode: detailsResponse?.status ?? null,\n        responseTimeMs: Math.round(performance.now() - detailStart),\n        success: false,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        estimatedCost: GOOGLE_DETAILS_COST,\n        actualCost: 0,\n      });\n      throw error;\n    }\n\n    const detailElapsed = Math.round(performance.now() - detailStart);\n\n    const dataEnriched = Boolean(detailsData.result);\n\n    enriched.push({\n      ...business,\n      formatted_phone_number:\n        detailsData.result?.formatted_phone_number ??\n        business.formatted_phone_number ??\n        \"\",\n      website: detailsData.result?.website ?? business.website ?? \"\",\n      source: dataEnriched ? \"google_place_details\" : \"google_places\",\n      data_enriched: dataEnriched,\n    });\n\n    await usageLogger?.log({\n      sourceName: \"google_places\",\n      endpoint: \"details\",\n      httpMethod: \"GET\",\n      requestParams: {\n        placeId: business.place_id,\n        hasWebsite: Boolean(detailsData.result?.website),\n      },\n      queryType: \"discovery\",\n      responseCode: detailsResponse.status,\n      responseTimeMs: detailElapsed,\n      resultsReturned: dataEnriched ? 1 : 0,\n      usefulResults: dataEnriched ? 1 : 0,\n      success: detailsResponse.ok && dataEnriched,\n      estimatedCost: GOOGLE_DETAILS_COST,\n      actualCost: detailsResponse.ok && dataEnriched ? GOOGLE_DETAILS_COST : 0,\n    });\n\n    // Basic rate limiting to stay under quota\n    await new Promise((resolve) => setTimeout(resolve, 80));\n  }\n\n  return enriched;\n}\n\nasync function searchFoursquare(\n  businessType: string,\n  location: string,\n  keywords: string[],\n  maxResults: number,\n  usageLogger?: UsageLogger,\n  usageContext?: UsageLogContext\n): Promise<DiscoveredBusiness[]> {\n  const apiKey = Deno.env.get(\"FOURSQUARE_API_KEY\");\n  if (!apiKey) {\n    return [];\n  }\n\n  const queryString =\n    [businessType, ...keywords].join(\" \").trim() || businessType;\n  const limit = Math.min(Math.max(maxResults, 5), 30);\n  const params = new URLSearchParams({\n    query: queryString,\n    near: location,\n    limit: limit.toString(),\n    fields: \"fsq_id,name,location,contact,website,categories,rating,stats\",\n  });\n\n  const requestParams = {\n    query: queryString,\n    location,\n    limit,\n    keywordCount: keywords.length,\n  };\n\n  let response: Response | null = null;\n  const startedAt = performance.now();\n\n  try {\n    response = await fetch(\n      `https://api.foursquare.com/v3/places/search?${params}`,\n      {\n        headers: {\n          Authorization: apiKey,\n          Accept: \"application/json\",\n        },\n      }\n    );\n  } catch (error) {\n    await usageLogger?.log({\n      sourceName: \"foursquare\",\n      endpoint: \"places.search\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: response?.status ?? null,\n      responseTimeMs: Math.round(performance.now() - startedAt),\n      success: false,\n      errorMessage: error instanceof Error ? error.message : String(error),\n      estimatedCost: FOURSQUARE_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw error;\n  }\n\n  const elapsed = Math.round(performance.now() - startedAt);\n\n  if (!response.ok) {\n    await usageLogger?.log({\n      sourceName: \"foursquare\",\n      endpoint: \"places.search\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: response.status,\n      responseTimeMs: elapsed,\n      success: false,\n      errorMessage: `HTTP ${response.status}`,\n      estimatedCost: FOURSQUARE_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw new Error(`Foursquare API error: ${response.status}`);\n  }\n\n  let payload: { results?: FoursquarePlace[] } = {};\n  try {\n    payload = await response.json();\n  } catch (error) {\n    await usageLogger?.log({\n      sourceName: \"foursquare\",\n      endpoint: \"places.search\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: response.status,\n      responseTimeMs: elapsed,\n      success: false,\n      errorMessage: error instanceof Error ? error.message : String(error),\n      estimatedCost: FOURSQUARE_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw error;\n  }\n\n  const results = Array.isArray(payload.results) ? payload.results : [];\n\n  await usageLogger?.log({\n    sourceName: \"foursquare\",\n    endpoint: \"places.search\",\n    httpMethod: \"GET\",\n    requestParams,\n    queryType: \"discovery\",\n    responseCode: response.status,\n    responseTimeMs: elapsed,\n    resultsReturned: results.length,\n    usefulResults: results.length,\n    success: true,\n    estimatedCost: FOURSQUARE_SEARCH_COST,\n    actualCost: FOURSQUARE_SEARCH_COST,\n    ...usageContext,\n  });\n\n  return results.map((place) => ({\n    source: \"foursquare\" as DataSource,\n    place_id: place.fsq_id,\n    name: place.name,\n    formatted_address: formatFoursquareAddress(place.location),\n    formatted_phone_number: place.contact?.phone ?? \"\",\n    website: place.website ?? \"\",\n    rating: place.rating ?? 0,\n    user_ratings_total: place.stats?.total_tips ?? 0,\n    foursquare_data: place as unknown as Record<string, unknown>,\n  }));\n}\n\nfunction formatFoursquareAddress(\n  location: {\n    address?: string;\n    locality?: string;\n    admin_district?: string;\n    postcode?: string;\n    country?: string;\n  } = {}\n): string {\n  const parts = [\n    location.address,\n    location.locality,\n    location.admin_district,\n    location.postcode,\n    location.country,\n  ]\n    .map((value) => value?.trim())\n    .filter(Boolean);\n  return parts.join(\", \");\n}\n\ntype BusinessFingerprintSource = {\n  name?: string | null;\n  businessName?: string | null;\n  business_name?: string | null;\n  formatted_address?: string | null;\n  address?: string | null;\n  formatted_phone_number?: string | null;\n  phone?: string | null;\n  website?: string | null;\n  place_id?: string | null;\n  source?: DataSource;\n};\n\nfunction normalizeString(value?: string | null): string {\n  return value ? value.toLowerCase().replace(/\\s+/g, \" \").trim() : \"\";\n}\n\nfunction normalizePhone(value?: string | null): string {\n  return value ? value.replace(/\\D+/g, \"\") : \"\";\n}\n\nfunction normalizeWebsite(value?: string | null): string {\n  if (!value) return \"\";\n  const normalized = value.toLowerCase().trim();\n  const withoutProtocol = normalized.replace(/^https?:\\/\\//, \"\");\n  const withoutWww = withoutProtocol.replace(/^www\\./, \"\");\n  return withoutWww.split(\"/\")[0];\n}\n\nfunction createBusinessFingerprint(source: BusinessFingerprintSource): string {\n  const name = normalizeString(\n    source.business_name ?? source.businessName ?? source.name ?? \"\"\n  );\n  const address = normalizeString(\n    source.address ?? source.formatted_address ?? \"\"\n  );\n  const phone = normalizePhone(\n    source.phone ?? source.formatted_phone_number ?? \"\"\n  );\n  const website = normalizeWebsite(source.website ?? \"\");\n\n  if (name && address) {\n    return `${name}::${address}`;\n  }\n\n  if (name && phone) {\n    return `${name}::${phone}`;\n  }\n\n  if (website) {\n    return `domain::${website}`;\n  }\n\n  if (phone) {\n    return `phone::${phone}`;\n  }\n\n  if (name) {\n    return `name::${name}`;\n  }\n\n  return \"\";\n}\n\nfunction dedupeBusinesses(\n  businesses: DiscoveredBusiness[]\n): DiscoveredBusiness[] {\n  const map = new Map<string, DiscoveredBusiness>();\n  let fallbackIndex = 0;\n\n  for (const business of businesses) {\n    const fingerprint = createBusinessFingerprint(business);\n    const key = fingerprint\n      ? fingerprint\n      : business.place_id\n      ? `place::${business.place_id}`\n      : `fallback::${fallbackIndex++}`;\n\n    if (!map.has(key)) {\n      map.set(key, business);\n      continue;\n    }\n\n    const existing = map.get(key)!;\n    const existingHasWebsite = Boolean(existing.website);\n    const candidateHasWebsite = Boolean(business.website);\n    const existingHasPhone = Boolean(\n      existing.formatted_phone_number || existing.phone\n    );\n    const candidateHasPhone = Boolean(\n      business.formatted_phone_number || business.phone\n    );\n\n    const candidateIsDetailsUpgrade =\n      existing.source === \"google_places\" &&\n      business.source === \"google_place_details\";\n\n    const candidateHasMoreData =\n      candidateHasWebsite && !existingHasWebsite\n        ? true\n        : candidateHasPhone && !existingHasPhone\n        ? true\n        : false;\n\n    if (candidateIsDetailsUpgrade || candidateHasMoreData) {\n      map.set(key, business);\n    }\n  }\n  return Array.from(map.values());\n}\n\n// --------------------\n// Quality Scorer\n// --------------------\n\nclass QualityScorer {\n  private maxCostPerBusiness: number;\n  private tierName: string;\n  private censusMultiplier: number;\n\n  constructor(options: {\n    maxCostPerBusiness: number;\n    tierName: string;\n    censusMultiplier?: number;\n  }) {\n    this.maxCostPerBusiness = options.maxCostPerBusiness;\n    this.tierName = options.tierName;\n    this.censusMultiplier = options.censusMultiplier ?? 1;\n  }\n\n  scoreBusiness(business: DiscoveredBusiness): ScoredLead {\n    const businessName = business.name || business.businessName || \"\";\n    const address = business.formatted_address || business.address || \"\";\n    const phone = business.formatted_phone_number || business.phone || \"\";\n    const website = business.website || \"\";\n\n    const scores = {\n      businessName: businessName ? Math.min(100, businessName.length * 3) : 0,\n      address: address ? 100 : 0,\n      phone: phone ? 85 : 0,\n      website: website ? 80 : 0,\n      rating: business.rating ? Math.min(20, business.rating * 4) : 0,\n    };\n\n    let totalScore =\n      Object.values(scores).reduce((sum, score) => sum + score, 0) /\n      Object.values(scores).length;\n\n    if (business.source === \"foursquare\") {\n      totalScore += 8;\n    } else if (business.source === \"google_place_details\") {\n      totalScore += 5;\n    }\n\n    totalScore = Math.min(100, Math.round(totalScore * this.censusMultiplier));\n\n    const initialSources = new Set<string>();\n    initialSources.add(business.source);\n    if (business.data_enriched) {\n      initialSources.add(\"google_places_details_api\");\n    }\n\n    return {\n      businessName,\n      address,\n      phone,\n      website,\n      email: \"\",\n      optimizedScore: totalScore,\n      validationCost: 0.02,\n      dataSources: Array.from(initialSources),\n      enhancementData: {\n        verificationSources: Array.from(initialSources),\n        processingMetadata: {\n          totalCost: 0.02,\n          validationCost: 0.02,\n          enrichmentCost: 0,\n          totalConfidenceBoost: 0,\n          processingStrategy: \"basic\",\n          servicesUsed: Array.from(initialSources),\n          servicesSkipped: [],\n          enrichmentTier: this.tierName,\n          emailStatus: \"not_found\",\n        },\n      },\n    };\n  }\n}\n\n// --------------------\n// Enrichment Pipeline\n// --------------------\n\nasync function enrichLead(\n  lead: ScoredLead,\n  config: JobConfig\n): Promise<{ lead: ScoredLead; cost: number; enrichmentCost: number }> {\n  const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n  const serviceKey = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\");\n  if (!supabaseUrl || !serviceKey) {\n    return { lead, cost: lead.validationCost, enrichmentCost: 0 };\n  }\n\n  const url = `${supabaseUrl}/functions/v1/enrichment-orchestrator`;\n  const domain = lead.website\n    ? lead.website.replace(/^https?:\\/\\//, \"\").replace(/\\/.*$/, \"\")\n    : undefined;\n\n  const maxCostPerBusiness = Math.max(\n    config.tier.maxCostPerLead,\n    config.budgetLimit / Math.max(config.maxResults, 1)\n  );\n\n  const body = {\n    businessName: lead.businessName,\n    domain,\n    address: lead.address,\n    phone: lead.phone,\n    website: lead.website,\n    discoverEmails: true,\n    verifyEmails: config.tier.includes.verifyEmails,\n    includePersonEnrichment: config.tier.includes.personEnrichment,\n    apolloEnrichment:\n      config.tier.includes.apolloEnrichment || config.options.apolloDiscovery,\n    includeBusinessLicense: true,\n    includeCompanyEnrichment: true,\n    maxCostPerBusiness,\n    minConfidenceScore: config.minConfidenceScore,\n    tier: config.tier.orchestratorTier,\n    campaignId: config.campaignId,\n    jobId: config.jobId,\n    sessionUserId: config.sessionUserId,\n    userId: config.userId,\n    tierKey: config.tier.key,\n  };\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${serviceKey}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n\n  if (!response.ok) {\n    return { lead, cost: lead.validationCost, enrichmentCost: 0 };\n  }\n\n  const enrichmentData = await response.json();\n  type EnrichedEmail = {\n    email: string;\n    verified?: boolean;\n    [key: string]: unknown;\n  };\n\n  const emails = (enrichmentData.enrichedData?.emails ?? []) as EnrichedEmail[];\n\n  const normalizeDomain = (value?: string) =>\n    value ? value.toLowerCase().replace(/^www\\./, \"\") : \"\";\n\n  const normalizedDomain = normalizeDomain(domain);\n\n  const emailMatchesCorporateDomain = (emailAddress?: string) => {\n    if (!emailAddress || !normalizedDomain) return false;\n    const parts = emailAddress.split(\"@\");\n    if (parts.length !== 2) return false;\n    const emailDomain = normalizeDomain(parts[1]);\n    if (!emailDomain) return false;\n    return (\n      emailDomain === normalizedDomain ||\n      emailDomain.endsWith(`.${normalizedDomain}`)\n    );\n  };\n\n  const corporateEmails = normalizedDomain\n    ? emails.filter((entry: EnrichedEmail) =>\n        emailMatchesCorporateDomain(entry.email)\n      )\n    : emails;\n\n  const verifiedCorporate = corporateEmails.find(\n    (entry: EnrichedEmail) => entry.verified\n  );\n\n  let verifiedEmailEntry = verifiedCorporate;\n  if (!verifiedEmailEntry && !normalizedDomain) {\n    verifiedEmailEntry = emails.find((entry: EnrichedEmail) => entry.verified);\n  }\n\n  const unverifiedCorporate = corporateEmails.find(\n    (entry: EnrichedEmail) => entry.email && !entry.verified\n  );\n\n  const fallbackCandidate =\n    unverifiedCorporate ||\n    corporateEmails[0] ||\n    emails.find((entry: EnrichedEmail) => entry.email && !entry.verified) ||\n    emails[0];\n\n  let emailStatus: \"verified\" | \"unconfirmed\" | \"not_found\" = \"not_found\";\n  let verifiedEmailValue = \"\";\n  let unverifiedEmailValue = \"\";\n\n  if (verifiedEmailEntry?.email) {\n    emailStatus = \"verified\";\n    verifiedEmailValue = verifiedEmailEntry.email;\n  } else if (fallbackCandidate?.email) {\n    emailStatus = \"unconfirmed\";\n    unverifiedEmailValue = fallbackCandidate.email;\n  }\n\n  const servicesUsed = new Set<string>(\n    lead.enhancementData.verificationSources\n  );\n  (enrichmentData.processingMetadata?.servicesUsed ?? []).forEach(\n    (service: string) => servicesUsed.add(service)\n  );\n\n  const enrichmentCost = Number(enrichmentData.totalCost ?? 0);\n  const totalCost = lead.validationCost + enrichmentCost;\n\n  const updatedLead: ScoredLead = {\n    ...lead,\n    email: verifiedEmailValue || \"\",\n    enhancementData: {\n      ...lead.enhancementData,\n      verificationSources: Array.from(servicesUsed),\n      emails,\n      processingMetadata: {\n        ...lead.enhancementData.processingMetadata,\n        totalCost,\n        validationCost: lead.validationCost,\n        enrichmentCost,\n        servicesUsed: Array.from(servicesUsed),\n        servicesSkipped:\n          enrichmentData.processingMetadata?.servicesSkipped ?? [],\n        enrichmentTier: config.tier.name,\n        enrichmentCostBreakdown: enrichmentData.costBreakdown ?? undefined,\n        emailStatus,\n        verifiedEmail: verifiedEmailValue || undefined,\n        unverifiedEmail: unverifiedEmailValue || undefined,\n      },\n    },\n  };\n\n  return {\n    lead: updatedLead,\n    cost: totalCost,\n    enrichmentCost,\n  };\n}\n\n// --------------------\n// Discovery Workflow\n// --------------------\n\nasync function discoverBusinesses(\n  config: JobConfig,\n  census: CensusIntelligence | null,\n  usageLogger?: UsageLogger,\n  usageContext?: UsageLogContext\n): Promise<DiscoveredBusiness[]> {\n  const googleResults = await searchGooglePlaces(\n    config.businessType,\n    config.location,\n    config.keywords,\n    config.maxResults,\n    usageLogger,\n    {\n      ...usageContext,\n      businessQuery: config.businessType,\n      locationQuery: config.location,\n      tierKey: config.tier.key,\n    }\n  );\n\n  const results: DiscoveredBusiness[] = [...googleResults];\n\n  const shouldQueryFoursquare =\n    googleResults.length < config.maxResults * 1.2 || config.expandGeography;\n  if (shouldQueryFoursquare) {\n    const foursquareResults = await searchFoursquare(\n      config.businessType,\n      config.location,\n      config.keywords,\n      Math.max(\n        config.maxResults - googleResults.length,\n        Math.ceil(config.maxResults / 2)\n      ),\n      usageLogger,\n      {\n        ...usageContext,\n        businessQuery: config.businessType,\n        locationQuery: config.location,\n        tierKey: config.tier.key,\n      }\n    );\n    results.push(...foursquareResults);\n  }\n\n  const deduped = dedupeBusinesses(results);\n\n  if (\n    census &&\n    census.optimization.expected_results > deduped.length &&\n    config.expandGeography\n  ) {\n    const expandedResults = await searchFoursquare(\n      config.businessType,\n      census.geographic_data.raw_location,\n      config.keywords,\n      Math.min(census.optimization.expected_results, config.maxResults * 2),\n      usageLogger,\n      {\n        ...usageContext,\n        businessQuery: config.businessType,\n        locationQuery: census.geographic_data.raw_location,\n        tierKey: config.tier.key,\n      }\n    );\n    deduped.push(...expandedResults);\n  }\n\n  return dedupeBusinesses(deduped).slice(0, config.maxResults * 2);\n}\n\nasync function processDiscoveryJob(\n  jobId: string,\n  config: JobConfig,\n  supabaseUrl: string,\n  supabaseServiceKey: string\n) {\n  console.log(`🚀 Background job ${jobId} started`);\n\n  const supabase = createClient(supabaseUrl, supabaseServiceKey);\n  const usageLogger = createUsageLogger(supabaseUrl, supabaseServiceKey, {\n    campaignId: config.campaignId,\n    sessionId: config.sessionUserId ?? config.userId ?? null,\n    jobId,\n    tierKey: config.tier.key,\n    businessQuery: config.businessType,\n    locationQuery: config.location,\n  });\n  config.jobId = jobId;\n\n  try {\n    const { error: snapshotError } = await supabase\n      .from(\"campaign_request_snapshots\")\n      .insert({\n        campaign_id: config.campaignId,\n        user_id: config.userId,\n        session_user_id: config.sessionUserId,\n        request_hash: config.requestSnapshot.requestHash,\n        request_payload: config.requestSnapshot.payload,\n      });\n\n    if (snapshotError) {\n      console.warn(\n        \"Campaign request snapshot insert warning:\",\n        snapshotError.message\n      );\n    }\n  } catch (snapshotException) {\n    console.warn(\"Campaign request snapshot insert failed:\", snapshotException);\n  }\n\n  const historicalFingerprints = new Set<string>();\n\n  try {\n    if (config.userId) {\n      const { data: priorFingerprints, error: fingerprintsError } =\n        await supabase\n          .from(\"lead_fingerprints\")\n          .select(\"fingerprint\")\n          .eq(\"user_id\", config.userId)\n          .order(\"created_at\", { ascending: false })\n          .limit(5000);\n\n      if (fingerprintsError) {\n        console.warn(\n          \"Unable to load fingerprint ledger for duplicate suppression:\",\n          fingerprintsError.message\n        );\n      } else {\n        for (const row of priorFingerprints ?? []) {\n          if (row?.fingerprint) {\n            historicalFingerprints.add(row.fingerprint);\n          }\n        }\n      }\n    }\n\n    if (historicalFingerprints.size === 0 && config.userId) {\n      const { data: legacyLeads, error: legacyLeadsError } = await supabase\n        .from(\"leads\")\n        .select(\"business_name,address,phone,website\")\n        .eq(\"user_id\", config.userId)\n        .order(\"created_at\", { ascending: false })\n        .limit(1000);\n\n      if (legacyLeadsError) {\n        console.warn(\n          \"Legacy lead lookup failed for duplicate suppression:\",\n          legacyLeadsError.message\n        );\n      } else {\n        const legacyRows = (legacyLeads ?? []) as Array<{\n          business_name?: string | null;\n          address?: string | null;\n          phone?: string | null;\n          website?: string | null;\n        }>;\n\n        for (const lead of legacyRows) {\n          const fingerprint = createBusinessFingerprint(lead);\n          if (fingerprint) {\n            historicalFingerprints.add(fingerprint);\n          }\n        }\n      }\n    }\n  } catch (historyError) {\n    console.warn(\"Historical fingerprint lookup failed:\", historyError);\n  }\n\n  try {\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        status: \"processing\",\n        started_at: new Date().toISOString(),\n        current_stage: \"discovering_businesses\",\n        progress: 10,\n      })\n      .eq(\"id\", jobId);\n\n    const censusIntelligence = await fetchCensusIntelligence(\n      config.businessType,\n      config.location\n    );\n\n    let historicalFilteredCount = 0;\n\n    const applyHistoricalFilter = (\n      businesses: DiscoveredBusiness[]\n    ): DiscoveredBusiness[] => {\n      if (historicalFingerprints.size === 0) {\n        return businesses;\n      }\n\n      const filteredResults: DiscoveredBusiness[] = [];\n      for (const business of businesses) {\n        const fingerprint = createBusinessFingerprint(business);\n        if (fingerprint && historicalFingerprints.has(fingerprint)) {\n          historicalFilteredCount += 1;\n          continue;\n        }\n        filteredResults.push(business);\n      }\n      return filteredResults;\n    };\n\n    let discoveredBusinesses: DiscoveredBusiness[] = await discoverBusinesses(\n      config,\n      censusIntelligence,\n      usageLogger,\n      {\n        campaignId: config.campaignId,\n        sessionId: config.sessionUserId ?? config.userId ?? null,\n        jobId,\n        tierKey: config.tier.key,\n        businessQuery: config.businessType,\n        locationQuery: config.location,\n      }\n    );\n    let totalRawDiscovered = discoveredBusinesses.length;\n\n    discoveredBusinesses = applyHistoricalFilter(discoveredBusinesses);\n\n    if (\n      discoveredBusinesses.length === 0 &&\n      totalRawDiscovered > 0 &&\n      !config.expandGeography\n    ) {\n      console.log(\n        `ℹ️ No novel businesses found for ${config.businessType} in ${config.location}. Expanding geography to locate fresh results.`\n      );\n\n      const expandedConfig: JobConfig = {\n        ...config,\n        expandGeography: true,\n      };\n\n      const expandedResults = await discoverBusinesses(\n        expandedConfig,\n        censusIntelligence,\n        usageLogger,\n        {\n          campaignId: config.campaignId,\n          sessionId: config.sessionUserId ?? config.userId ?? null,\n          jobId,\n          tierKey: config.tier.key,\n          businessQuery: expandedConfig.businessType,\n          locationQuery: expandedConfig.location,\n        }\n      );\n\n      totalRawDiscovered += expandedResults.length;\n      discoveredBusinesses = applyHistoricalFilter(expandedResults);\n    }\n\n    if (historicalFilteredCount > 0) {\n      console.log(\n        `ℹ️ Suppressed ${historicalFilteredCount} previously delivered businesses for user ${config.userId}`\n      );\n    }\n\n    const sourcesUsed = Array.from(\n      new Set(discoveredBusinesses.map((business) => business.source))\n    );\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        current_stage: \"scoring_businesses\",\n        progress: 30,\n        metrics: {\n          businesses_found: discoveredBusinesses.length,\n          raw_candidates: totalRawDiscovered,\n          previously_delivered_filtered: historicalFilteredCount,\n          sources_used: sourcesUsed,\n          census_density_score: censusIntelligence?.density_score ?? null,\n        },\n      })\n      .eq(\"id\", jobId);\n\n    const scorer = new QualityScorer({\n      maxCostPerBusiness: config.budgetLimit / Math.max(config.maxResults, 1),\n      tierName: config.tier.name,\n      censusMultiplier: censusIntelligence?.optimization.confidence_multiplier,\n    });\n\n    const scoredBusinesses = discoveredBusinesses.map((business) =>\n      scorer.scoreBusiness(business)\n    );\n\n    const qualifiedLeads = scoredBusinesses\n      .filter((lead) => lead.optimizedScore >= config.minConfidenceScore)\n      .slice(0, config.maxResults);\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        current_stage: \"enriching_contacts\",\n        progress: 50,\n        metrics: {\n          businesses_found: discoveredBusinesses.length,\n          qualified_leads: qualifiedLeads.length,\n          raw_candidates: totalRawDiscovered,\n          previously_delivered_filtered: historicalFilteredCount,\n          sources_used: sourcesUsed,\n          census_density_score: censusIntelligence?.density_score ?? null,\n        },\n      })\n      .eq(\"id\", jobId);\n\n    const enrichedLeads: ScoredLead[] = [];\n    let totalCost = 0;\n    let totalValidationCost = 0;\n    let totalEnrichmentCost = 0;\n\n    for (let index = 0; index < qualifiedLeads.length; index += 1) {\n      const lead = qualifiedLeads[index];\n      try {\n        const enrichmentResult = await enrichLead(lead, config);\n        enrichedLeads.push(enrichmentResult.lead);\n        totalCost += enrichmentResult.cost;\n        totalValidationCost +=\n          enrichmentResult.lead.enhancementData.processingMetadata\n            .validationCost;\n        totalEnrichmentCost += enrichmentResult.enrichmentCost;\n      } catch (error) {\n        console.error(`❌ Enrichment error for ${lead.businessName}:`, error);\n        enrichedLeads.push(lead);\n        totalCost += lead.validationCost;\n        totalValidationCost += lead.validationCost;\n      }\n\n      const progress =\n        50 +\n        Math.floor(((index + 1) / Math.max(qualifiedLeads.length, 1)) * 35);\n      await supabase\n        .from(\"discovery_jobs\")\n        .update({\n          progress,\n          metrics: {\n            businesses_found: discoveredBusinesses.length,\n            qualified_leads: qualifiedLeads.length,\n            leads_enriched: index + 1,\n            total_cost: Number(totalCost.toFixed(3)),\n            validation_cost_total: Number(totalValidationCost.toFixed(3)),\n            enrichment_cost_total: Number(totalEnrichmentCost.toFixed(3)),\n            raw_candidates: totalRawDiscovered,\n            previously_delivered_filtered: historicalFilteredCount,\n            sources_used: sourcesUsed,\n            census_density_score: censusIntelligence?.density_score ?? null,\n          },\n        })\n        .eq(\"id\", jobId);\n    }\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        current_stage: \"storing_results\",\n        progress: 90,\n      })\n      .eq(\"id\", jobId);\n\n    const campaignInsert = await supabase\n      .from(\"campaigns\")\n      .insert({\n        id: config.campaignId,\n        business_type: config.businessType,\n        location: config.location,\n        target_count: config.maxResults,\n        results_count: enrichedLeads.length,\n        total_cost: Number(totalCost.toFixed(3)),\n        status: \"completed\",\n        user_id: config.userId,\n        session_user_id: config.sessionUserId,\n        processing_time_ms: null,\n      })\n      .select(\"id\")\n      .single();\n\n    if (campaignInsert.error) {\n      console.warn(\"Campaign insert warning:\", campaignInsert.error.message);\n    }\n\n    const leadsPayload = enrichedLeads.map((lead) => ({\n      campaign_id: config.campaignId,\n      business_name: lead.businessName,\n      address: lead.address,\n      phone: lead.phone,\n      website: lead.website,\n      email: lead.email,\n      confidence_score: lead.optimizedScore,\n      enrichment_data: {\n        verificationSources: lead.enhancementData.verificationSources,\n        emails: lead.enhancementData.emails,\n        processingMetadata: lead.enhancementData.processingMetadata,\n        dataSources: lead.dataSources,\n      },\n      validation_cost: lead.enhancementData.processingMetadata.validationCost,\n      user_id: config.userId,\n      session_user_id: config.sessionUserId,\n    }));\n\n    let insertedLeads: Array<{\n      id: number;\n      business_name?: string | null;\n      address?: string | null;\n      phone?: string | null;\n      website?: string | null;\n    }> | null = null;\n\n    if (leadsPayload.length > 0) {\n      const leadInsert = await supabase\n        .from(\"leads\")\n        .insert(leadsPayload)\n        .select(\"id,business_name,address,phone,website\");\n      if (leadInsert.error) {\n        console.error(\"Lead insert error:\", leadInsert.error.message);\n      } else {\n        insertedLeads = leadInsert.data ?? [];\n      }\n    }\n\n    if (insertedLeads && insertedLeads.length > 0) {\n      type FingerprintRow = {\n        fingerprint: string;\n        user_id: string | null;\n        session_user_id: string | null;\n        campaign_id: string;\n        lead_id: number;\n        business_name: string;\n      };\n\n      const fingerprintRows = insertedLeads\n        .map((row, index): FingerprintRow | null => {\n          const lead = enrichedLeads[index];\n          const fingerprint = createBusinessFingerprint({\n            business_name: row.business_name ?? lead?.businessName ?? \"\",\n            address: row.address ?? lead?.address ?? \"\",\n            phone: row.phone ?? lead?.phone ?? \"\",\n            website: row.website ?? lead?.website ?? \"\",\n          });\n\n          if (!fingerprint) {\n            return null;\n          }\n\n          return {\n            fingerprint,\n            user_id: config.userId ?? null,\n            session_user_id: config.sessionUserId ?? null,\n            campaign_id: config.campaignId,\n            lead_id: row.id,\n            business_name: row.business_name ?? lead?.businessName ?? \"\",\n          };\n        })\n        .filter((row): row is FingerprintRow => Boolean(row));\n\n      if (fingerprintRows.length > 0) {\n        const { error: fingerprintInsertError } = await supabase\n          .from(\"lead_fingerprints\")\n          .upsert(fingerprintRows, { onConflict: \"fingerprint,user_id\" });\n\n        if (fingerprintInsertError) {\n          console.warn(\n            \"Lead fingerprint insert warning:\",\n            fingerprintInsertError.message\n          );\n        }\n      }\n    }\n\n    const averageConfidence = enrichedLeads.length\n      ? enrichedLeads.reduce((sum, lead) => sum + lead.optimizedScore, 0) /\n        enrichedLeads.length\n      : 0;\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        status: \"completed\",\n        progress: 100,\n        completed_at: new Date().toISOString(),\n        results: enrichedLeads,\n        metrics: {\n          total_found: enrichedLeads.length,\n          qualified_leads: qualifiedLeads.length,\n          total_cost: Number(totalCost.toFixed(3)),\n          validation_cost_total: Number(totalValidationCost.toFixed(3)),\n          enrichment_cost_total: Number(totalEnrichmentCost.toFixed(3)),\n          avg_confidence: Number(averageConfidence.toFixed(1)),\n          tier_key: config.tier.key,\n          tier_name: config.tier.name,\n          tier_price: config.tier.pricePerLead,\n          raw_candidates: totalRawDiscovered,\n          previously_delivered_filtered: historicalFilteredCount,\n          sources_used: sourcesUsed,\n          census_density_score: censusIntelligence?.density_score ?? null,\n        },\n      })\n      .eq(\"id\", jobId);\n\n    console.log(\n      `✅ Background job ${jobId} completed: ${\n        enrichedLeads.length\n      } leads, $${totalCost.toFixed(3)}`\n    );\n  } catch (error) {\n    console.error(`❌ Background job ${jobId} failed:`, error);\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        status: \"failed\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        completed_at: new Date().toISOString(),\n      })\n      .eq(\"id\", jobId);\n  }\n}\n\n// --------------------\n// MAIN HANDLER\n// --------------------\n\nserve(async (req) => {\n  const corsResponse = handleCORS(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n    const supabaseAnonKey = Deno.env.get(\"SUPABASE_ANON_KEY\");\n    const supabaseServiceKey = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\");\n\n    if (!supabaseUrl || !supabaseAnonKey || !supabaseServiceKey) {\n      console.error(\"Missing Supabase environment variables\", {\n        hasUrl: Boolean(supabaseUrl),\n        hasAnonKey: Boolean(supabaseAnonKey),\n        hasServiceKey: Boolean(supabaseServiceKey),\n      });\n\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error:\n            \"Edge function misconfigured: missing Supabase credentials. Verify SUPABASE_URL, SUPABASE_ANON_KEY, and SUPABASE_SERVICE_ROLE_KEY secrets.\",\n        }),\n        {\n          status: 500,\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    const authHeader = req.headers.get(\"Authorization\");\n    const sessionHeader =\n      req.headers.get(\"x-prospect-session\") ??\n      req.headers.get(\"X-Prospect-Session\");\n    const globalHeaders: Record<string, string> = authHeader\n      ? { Authorization: authHeader }\n      : {};\n    const supabaseClient = createClient(supabaseUrl, supabaseAnonKey, {\n      global: { headers: globalHeaders },\n    });\n\n    const accessToken = sessionHeader?.startsWith(\"Bearer \")\n      ? sessionHeader.slice(\"Bearer \".length).trim()\n      : sessionHeader && sessionHeader.length > 0\n      ? sessionHeader\n      : authHeader?.startsWith(\"Bearer \")\n      ? authHeader.slice(\"Bearer \".length).trim()\n      : null;\n\n    const {\n      data: { user },\n      error: authError,\n    } = accessToken\n      ? await supabaseClient.auth.getUser(accessToken)\n      : await supabaseClient.auth.getUser();\n\n    if (authError) {\n      console.error(\"Auth session validation failed\", {\n        message: authError.message,\n        status: authError.status,\n        authHeaderPreview: authHeader\n          ? `${authHeader.slice(0, 12)}...${authHeader.slice(-12)}`\n          : null,\n        sessionHeaderPreview: sessionHeader\n          ? `${sessionHeader.slice(0, 12)}...${sessionHeader.slice(-12)}`\n          : null,\n      });\n    }\n\n    if (!user?.id) {\n      const debugHint = authError\n        ? `Auth error: ${authError.message}`\n        : \"Missing user in session\";\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Authentication required to start discovery campaigns.\",\n          debug: debugHint,\n        }),\n        {\n          status: 401,\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    const requestData: BusinessDiscoveryRequest = await req.json();\n    const {\n      businessType,\n      location,\n      keywords,\n      searchRadius,\n      expandGeography = false,\n      maxResults = 5,\n      budgetLimit,\n      minConfidenceScore = 50,\n      sessionUserId,\n      tierKey,\n      tierName,\n      options = {},\n    } = requestData;\n\n    if (sessionUserId && sessionUserId !== user.id) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Session mismatch detected. Please re-authenticate.\",\n        }),\n        {\n          status: 403,\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    const tierSettings = getTierSettings(tierKey, tierName);\n    const enforcedBudget =\n      budgetLimit ?? maxResults * tierSettings.pricePerLead;\n    const keywordList = parseKeywords(keywords);\n\n    const jobRandomSource =\n      typeof crypto !== \"undefined\" && \"randomUUID\" in crypto\n        ? crypto.randomUUID()\n        : `${Date.now().toString(36)}${Math.random()\n            .toString(36)\n            .slice(2, 11)}`;\n    const jobId = `job_${jobRandomSource.replace(/[^A-Za-z0-9]+/g, \"\")}`;\n\n    const buildUniqueCampaignId = (baseName: string) => {\n      const normalizedBase = baseName\n        .replace(/[^A-Za-z0-9_]+/g, \"_\")\n        .replace(/_+/g, \"_\")\n        .replace(/^_+|_+$/g, \"\")\n        .toUpperCase();\n      const cryptoObj =\n        typeof globalThis !== \"undefined\" && \"crypto\" in globalThis\n          ? (globalThis as { crypto?: Crypto }).crypto\n          : undefined;\n      const randomSource =\n        cryptoObj && typeof cryptoObj.randomUUID === \"function\"\n          ? cryptoObj.randomUUID()\n          : `${Math.random().toString(36).slice(2)}${Math.random()\n              .toString(36)\n              .slice(2)}`;\n      const sanitizedRandom = randomSource.replace(/[^A-Za-z0-9]+/g, \"\");\n      const randomSuffix = sanitizedRandom\n        .padEnd(8, \"0\")\n        .slice(0, 8)\n        .toUpperCase();\n      const timestampSuffix = Date.now().toString(36).toUpperCase();\n      const trimmedBase = normalizedBase.slice(0, 40);\n      const safeBase = trimmedBase.length > 0 ? trimmedBase : \"CAMPAIGN\";\n      return `${safeBase}_${timestampSuffix}_${randomSuffix}`;\n    };\n\n    // Generate structured campaign ID using database function\n    let campaignId: string;\n    try {\n      const { data: generatedName, error: nameError } =\n        await supabaseClient.rpc(\"generate_campaign_name\", {\n          business_type: businessType,\n          location: location,\n          user_id: user?.id || null,\n        });\n\n      if (nameError) {\n        console.warn(\n          \"Campaign name generation failed, using fallback:\",\n          nameError\n        );\n        campaignId = buildUniqueCampaignId(\n          `campaign_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`\n        );\n      } else {\n        campaignId = buildUniqueCampaignId(\n          generatedName ||\n            `campaign_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`\n        );\n      }\n    } catch (error) {\n      console.warn(\"Campaign name generation error, using fallback:\", error);\n      campaignId = buildUniqueCampaignId(\n        `campaign_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`\n      );\n    }\n\n    const resolvedOptions = {\n      ...DEFAULT_OPTIONS,\n      ...options,\n    };\n\n    const snapshotPayload = {\n      businessType,\n      location,\n      keywords: keywordList,\n      searchRadius,\n      expandGeography,\n      maxResults,\n      budgetLimit: enforcedBudget,\n      minConfidenceScore,\n      tierKey: tierSettings.key,\n      tierName: tierSettings.name,\n      options: resolvedOptions,\n    };\n    const requestedAt = new Date().toISOString();\n    const requestHash = await createStableHash({\n      userId: user.id,\n      sessionUserId: sessionUserId ?? user.id,\n      snapshotPayload,\n    });\n\n    const requestSnapshot: RequestSnapshot = {\n      requestedAt,\n      requestHash,\n      payload: snapshotPayload,\n    };\n\n    const jobConfig: JobConfig = {\n      campaignId,\n      businessType,\n      location,\n      keywords: keywordList,\n      searchRadius,\n      expandGeography,\n      maxResults,\n      budgetLimit: enforcedBudget,\n      minConfidenceScore,\n      userId: user.id,\n      sessionUserId: user.id,\n      tier: tierSettings,\n      options: resolvedOptions,\n      requestSnapshot,\n    };\n\n    const { error: jobError } = await supabaseClient\n      .from(\"discovery_jobs\")\n      .insert({\n        id: jobId,\n        campaign_id: campaignId,\n        user_id: user.id,\n        session_user_id: user.id,\n        status: \"pending\",\n        config: {\n          ...jobConfig,\n          tier: {\n            key: tierSettings.key,\n            name: tierSettings.name,\n            pricePerLead: tierSettings.pricePerLead,\n          },\n        },\n      });\n\n    if (jobError) {\n      throw new Error(`Failed to create job: ${jobError.message}`);\n    }\n\n    EdgeRuntime.waitUntil(\n      processDiscoveryJob(jobId, jobConfig, supabaseUrl, supabaseServiceKey)\n    );\n\n    const responsePayload = {\n      success: true,\n      message: \"Discovery job created and processing in background\",\n      jobId,\n      campaignId,\n      status: \"processing\",\n      estimatedTime: \"1-2 minutes\",\n      realtimeChannel: `discovery_jobs:id=eq.${jobId}`,\n    };\n\n    return new Response(JSON.stringify(responsePayload), {\n      headers: {\n        ...corsHeaders,\n        \"Content-Type\": \"application/json\",\n        \"Cache-Control\": \"private, max-age=30, must-revalidate\",\n        ETag: `W/\"${jobId}\"`,\n      },\n    });\n  } catch (error) {\n    console.error(\"❌ Error:\", error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n});\n"}}},
{"type":"measure","name":"lsp.did_open","count":109,"duration":13.366},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":100,"duration":0.2},
{"type":"mark","name":"lsp.did_open","count":110,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/2025-10-10-deterministic-dedupe.sql","languageId":"sql","version":1,"text":"-- Deterministic dedupe infrastructure for background discovery (2025-10-10)\n-- Adds request snapshot storage + lead fingerprint ledger so the database\n-- enforces \"new results only\" independently of the client.\n\nBEGIN;\n\n-- ============================================================================\n-- Lead fingerprint ledger (per-user)\n-- ============================================================================\nCREATE TABLE IF NOT EXISTS public.lead_fingerprints (\n  id BIGSERIAL PRIMARY KEY,\n  fingerprint TEXT NOT NULL,\n  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,\n  session_user_id TEXT,\n  campaign_id TEXT REFERENCES public.campaigns(id) ON DELETE CASCADE,\n  lead_id BIGINT REFERENCES public.leads(id) ON DELETE CASCADE,\n  business_name TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nCREATE UNIQUE INDEX IF NOT EXISTS idx_lead_fingerprints_user_unique\n  ON public.lead_fingerprints (fingerprint, user_id)\n  WHERE user_id IS NOT NULL;\n\nCREATE UNIQUE INDEX IF NOT EXISTS idx_lead_fingerprints_session_unique\n  ON public.lead_fingerprints (fingerprint, session_user_id)\n  WHERE session_user_id IS NOT NULL;\n\nCREATE INDEX IF NOT EXISTS idx_lead_fingerprints_campaign\n  ON public.lead_fingerprints (campaign_id);\n\nCREATE INDEX IF NOT EXISTS idx_lead_fingerprints_created\n  ON public.lead_fingerprints (created_at DESC);\n\nALTER TABLE public.lead_fingerprints ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY lead_fingerprints_select_self\n  ON public.lead_fingerprints\n  FOR SELECT\n  USING (\n    auth.uid() IS NOT NULL\n    AND user_id = auth.uid()\n  );\n\n-- ============================================================================\n-- Campaign request snapshots (immutable audit of queued work)\n-- ============================================================================\nCREATE TABLE IF NOT EXISTS public.campaign_request_snapshots (\n  id BIGSERIAL PRIMARY KEY,\n  campaign_id TEXT REFERENCES public.campaigns(id) ON DELETE CASCADE,\n  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,\n  session_user_id TEXT,\n  request_hash TEXT NOT NULL,\n  request_payload JSONB NOT NULL,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nCREATE UNIQUE INDEX IF NOT EXISTS idx_campaign_request_hash_unique\n  ON public.campaign_request_snapshots (request_hash, user_id)\n  WHERE user_id IS NOT NULL;\n\nCREATE INDEX IF NOT EXISTS idx_campaign_request_snapshots_campaign\n  ON public.campaign_request_snapshots (campaign_id);\n\nALTER TABLE public.campaign_request_snapshots ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY campaign_request_snapshots_select_self\n  ON public.campaign_request_snapshots\n  FOR SELECT\n  USING (\n    auth.uid() IS NOT NULL\n    AND user_id = auth.uid()\n  );\n\nCOMMIT;\n"}}},
{"type":"measure","name":"lsp.did_open","count":110,"duration":0.061},
{"type":"mark","name":"lsp.did_close","count":104,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx"}}},
{"type":"measure","name":"lsp.did_close","count":104,"duration":1.245},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":101,"duration":0.207},
{"type":"mark","name":"lsp.did_open","count":111,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","languageId":"typescript","version":1,"text":"import { useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport {\n  EDGE_FUNCTIONS_URL,\n  ENRICHMENT_TIERS,\n  SUPABASE_ANON_TOKEN,\n  ensureSession,\n  getSessionToken,\n} from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport type { BusinessDiscoveryResponse, CampaignConfig } from \"../types\";\n\nexport const useBusinessDiscovery = (\n  onJobCreated?: (jobData: {\n    jobId: string;\n    campaignId: string;\n    status: string;\n    estimatedTime?: number;\n  }) => void\n) => {\n  const { user } = useAuth();\n  const {\n    setLoading,\n    setError,\n    clearLeads,\n    setCurrentCampaign,\n    setCurrentCampaignId,\n  } = useCampaignStore();\n  const [progress, setProgress] = useState(0);\n  const [currentStage, setCurrentStage] = useState<string>(\"\");\n  const [cacheStats] = useState<any>(null);\n\n  const discoveryMutation = useMutation({\n    mutationFn: async (\n      config: CampaignConfig & { selectedTier?: keyof typeof ENRICHMENT_TIERS }\n    ): Promise<BusinessDiscoveryResponse> => {\n      setLoading(true);\n      setError(null);\n      setProgress(10);\n      setCurrentStage(\"Initializing user-aware discovery...\");\n\n      // Reset any existing campaign context before starting a new discovery\n      clearLeads();\n      setCurrentCampaign(null);\n      setCurrentCampaignId(null);\n\n      try {\n        console.log(\"🚀 Starting user-aware business discovery:\", config);\n\n        // Ensure we have a valid session before calling Edge Function\n        const hasSession = await ensureSession();\n        if (!hasSession || !user?.id) {\n          throw new Error(\"Please sign in to run a discovery campaign.\");\n        }\n\n        // Determine enrichment tier\n        const tier = config.selectedTier || \"PROFESSIONAL\";\n        const tierConfig = ENRICHMENT_TIERS[tier];\n        const keywordList = config.keywords\n          ? config.keywords\n              .split(\",\")\n              .map((value) => value.trim())\n              .filter(Boolean)\n          : undefined;\n\n        const discoveryOptions = {\n          tradeAssociation: config.trade_association ?? false,\n          professionalLicense: config.professional_license ?? false,\n          chamberVerification: config.chamber_verification ?? false,\n          apolloDiscovery: tier === \"ENTERPRISE\",\n        };\n\n        setCurrentStage(\n          `Using ${tierConfig.name} tier ($${tierConfig.price}/lead)`\n        );\n        setProgress(20);\n\n        const accessToken = await getSessionToken();\n\n        const billingContext = {\n          tier,\n          tierName: tierConfig.name,\n          unitPrice: tierConfig.price,\n          estimatedBudget: config.max_results * tierConfig.price,\n          currency: \"USD\",\n        };\n\n        // Call background task business discovery with authentication\n        const requestBody = {\n          businessType: config.business_type || config.search_terms,\n          location: config.location,\n          keywords: keywordList,\n          searchRadius: config.search_radius,\n          expandGeography: config.expand_geography,\n          maxResults: config.max_results,\n          budgetLimit: config.max_results * tierConfig.price,\n          minConfidenceScore: config.min_confidence_score || 50,\n          tierKey: tier,\n          tierName: tierConfig.name,\n          tierPrice: tierConfig.price,\n          options: discoveryOptions,\n          sessionUserId: user.id,\n          userId: user.id,\n          billingContext,\n        };\n\n        if (!accessToken) {\n          throw new Error(\n            \"Unable to read session token. Please sign in again.\"\n          );\n        }\n\n        const headers: Record<string, string> = {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${accessToken}`,\n          apikey: SUPABASE_ANON_TOKEN,\n          \"X-Prospect-Session\": accessToken,\n        };\n\n        const response = await fetch(\n          `${EDGE_FUNCTIONS_URL}/business-discovery-background`,\n          {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody),\n          }\n        );\n\n        const rawResponse = await response.json().catch(() => ({}));\n\n        if (!response.ok) {\n          console.error(\"❌ Background discovery error:\", rawResponse);\n          const message =\n            typeof rawResponse?.error === \"string\"\n              ? rawResponse.error\n              : typeof rawResponse?.message === \"string\"\n              ? rawResponse.message\n              : `Edge function request failed: ${response.status}`;\n          throw new Error(message);\n        }\n\n        if (!rawResponse?.success) {\n          const fallbackMessage =\n            typeof rawResponse?.error === \"string\"\n              ? rawResponse.error\n              : \"No data returned from background discovery\";\n          throw new Error(fallbackMessage);\n        }\n\n        console.log(\"✅ Background discovery response:\", rawResponse);\n\n        // For background tasks, we get jobId and campaignId immediately\n        // The actual processing happens in the background\n        const transformedData: BusinessDiscoveryResponse = {\n          campaign_id: rawResponse.campaignId,\n          job_id: rawResponse.jobId, // New: job ID for tracking progress\n          status: rawResponse.status, // New: processing status\n          estimated_time: rawResponse.estimatedTime, // New: estimated completion time\n          realtime_channel: rawResponse.realtimeChannel, // New: for real-time updates\n          total_found: 0, // Will be updated via real-time\n          qualified_count: 0, // Will be updated via real-time\n          total_cost: 0, // Will be updated via real-time\n          processing_time: \"< 100ms\", // Immediate response\n          tier_used: tierConfig.name,\n          cache_performance: undefined,\n          vault_status: \"secured\",\n          census_intelligence: undefined,\n          businesses: [], // Will be populated via real-time updates\n        };\n\n        setProgress(100);\n        setCurrentStage(\"Complete! 🎉\");\n        return transformedData;\n      } catch (error) {\n        console.error(\"❌ User-aware discovery error:\", error);\n        setCurrentStage(\"Failed ❌\");\n        throw error;\n      } finally {\n        setLoading(false);\n      }\n    },\n    onSuccess: (data: BusinessDiscoveryResponse) => {\n      console.log(\"✅ Background job created:\", data);\n\n      // For background jobs, we don't create the full campaign record immediately\n      // The progress page will handle real-time updates and final campaign creation\n\n      setProgress(100);\n      setCurrentStage(\"Background processing started! 🚀\");\n\n      // Navigate to progress page with job ID\n      if (data.job_id && data.campaign_id) {\n        const jobData = {\n          jobId: data.job_id,\n          campaignId: data.campaign_id,\n          status: data.status || \"pending\",\n          estimatedTime: data.estimated_time,\n        };\n\n        console.log(\"Job started:\", jobData);\n\n        // Call the navigation callback if provided\n        if (onJobCreated) {\n          onJobCreated(jobData);\n        }\n\n        setCurrentCampaignId(data.campaign_id);\n      }\n    },\n    onError: (error: any) => {\n      setError(\n        error instanceof Error ? error.message : \"User-aware discovery failed\"\n      );\n      setProgress(0);\n      setCurrentStage(\"Failed ❌\");\n    },\n  });\n\n  return {\n    startDiscovery: discoveryMutation.mutate,\n    isDiscovering: discoveryMutation.isPending,\n    progress,\n    currentStage,\n    cacheStats,\n    error: discoveryMutation.error,\n    data: discoveryMutation.data,\n  };\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":111,"duration":3.264},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":102,"duration":0.239},
{"type":"mark","name":"lsp.did_close","count":105,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/utils/campaignTransforms.ts"}}},
{"type":"measure","name":"lsp.did_close","count":105,"duration":0.637},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":103,"duration":0.118},
{"type":"mark","name":"lsp.did_close","count":106,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"}}},
{"type":"measure","name":"lsp.did_close","count":106,"duration":0.94},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":104,"duration":0.208},
{"type":"mark","name":"lsp.did_open","count":112,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","languageId":"typescriptreact","version":1,"text":"import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useNavigate, useParams, useSearchParams } from \"react-router-dom\";\nimport { ProgressDisplay } from \"../components/ProgressDisplay\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useJobProgress } from \"../hooks/useJobProgress\";\nimport { supabase } from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport { transformCampaignData } from \"../utils/campaignTransforms\";\n\nexport const CampaignProgress: React.FC = () => {\n  const { campaignId } = useParams<{ campaignId: string }>();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const jobId = searchParams.get(\"jobId\");\n\n  // Use the job progress hook for real-time updates\n  const { progress: jobProgress } = useJobProgress(jobId || \"\");\n\n  const campaigns = useCampaignStore((state) => state.campaigns);\n  const addCampaign = useCampaignStore((state) => state.addCampaign);\n  const updateCampaign = useCampaignStore((state) => state.updateCampaign);\n  const setCurrentCampaign = useCampaignStore(\n    (state) => state.setCurrentCampaign\n  );\n  const ensureUniqueCampaignHistory = useCampaignStore(\n    (state) => state.ensureUniqueCampaignHistory\n  );\n  const setCampaignLeads = useCampaignStore((state) => state.setCampaignLeads);\n  const setLoading = useCampaignStore((state) => state.setLoading);\n  const setError = useCampaignStore((state) => state.setError);\n  const { user, loading: authLoading } = useAuth();\n  const authUserId = user?.id ?? null;\n\n  const [isFetchingResults, setIsFetchingResults] = useState(false);\n  const [resultFetchError, setResultFetchError] = useState<string | null>(null);\n  const hasFetchedResultsRef = useRef(false);\n  const isMountedRef = useRef(true);\n\n  useEffect(() => {\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  // Extract data from job progress\n  const progress = jobProgress?.progress || 0;\n  const status = jobProgress?.status || \"pending\";\n  const currentStage = jobProgress?.currentStage || \"Initializing...\";\n  const metrics = jobProgress?.metrics;\n  const isComplete = status === \"completed\";\n  const error = jobProgress?.error;\n\n  const displayStage = isFetchingResults\n    ? \"Preparing final results...\"\n    : currentStage;\n  const displayProgress = isFetchingResults\n    ? Math.min(100, Math.max(progress, 96))\n    : progress;\n  const isProcessing = !isComplete || isFetchingResults;\n\n  const fetchResults = useCallback(async () => {\n    if (!campaignId) {\n      return;\n    }\n\n    if (!authUserId) {\n      setResultFetchError(\"Sign in again to view campaign results.\");\n      return;\n    }\n\n    hasFetchedResultsRef.current = true;\n    setIsFetchingResults(true);\n    setResultFetchError(null);\n    setLoading(true);\n\n    const wait = (ms: number) =>\n      new Promise<void>((resolve) => {\n        setTimeout(resolve, ms);\n      });\n\n    try {\n      const MAX_ATTEMPTS = 5;\n      let campaignRecord: any = null;\n      let leadsRecords: any[] = [];\n\n      for (let attempt = 0; attempt < MAX_ATTEMPTS; attempt += 1) {\n        const campaignQuery = supabase\n          .from(\"campaigns\")\n          .select(\n            \"id,business_type,location,status,total_cost,results_count,created_at,updated_at\"\n          )\n          .eq(\"id\", campaignId)\n          .eq(\"user_id\", authUserId);\n\n        const { data: campaignData, error: campaignError } =\n          await campaignQuery.maybeSingle();\n\n        if (campaignError) {\n          throw campaignError;\n        }\n\n        const leadsQuery = supabase\n          .from(\"leads\")\n          .select(\n            \"id,campaign_id,business_name,address,phone,website,email,confidence_score,validation_cost,enrichment_data,created_at\"\n          )\n          .eq(\"campaign_id\", campaignId)\n          .eq(\"user_id\", authUserId)\n          .order(\"confidence_score\", { ascending: false });\n\n        const { data: leadsData, error: leadsError } = await leadsQuery;\n\n        if (leadsError) {\n          throw leadsError;\n        }\n\n        campaignRecord = campaignData;\n        leadsRecords = leadsData ?? [];\n\n        if (\n          campaignRecord &&\n          (leadsRecords.length > 0 || attempt === MAX_ATTEMPTS - 1)\n        ) {\n          break;\n        }\n\n        await wait(2000);\n      }\n\n      if (!campaignRecord) {\n        throw new Error(\n          \"Campaign record not available yet. Please try again in a moment.\"\n        );\n      }\n\n      const { campaignResult, leads: mappedLeads } = transformCampaignData(\n        campaignRecord,\n        leadsRecords,\n        { metrics: (metrics ?? null) as Record<string, any> | null }\n      );\n\n      const campaignExists = campaigns.some(\n        (item) => item.campaign_id === campaignResult.campaign_id\n      );\n\n      if (campaignExists) {\n        updateCampaign(campaignResult.campaign_id, campaignResult);\n      } else {\n        addCampaign(campaignResult);\n      }\n\n      ensureUniqueCampaignHistory();\n\n      setCampaignLeads(campaignResult.campaign_id, mappedLeads);\n      setCurrentCampaign(campaignResult);\n\n      if (isMountedRef.current) {\n        setResultFetchError(null);\n        navigate(\"/results\", { replace: true, state: { campaignId } });\n      }\n    } catch (err) {\n      console.error(\"⚠️ Unable to load campaign results\", err);\n      const message =\n        err instanceof Error\n          ? err.message\n          : \"Unable to load campaign results. Please try again.\";\n\n      if (isMountedRef.current) {\n        setResultFetchError(message);\n      }\n\n      setError(message);\n      hasFetchedResultsRef.current = false;\n    } finally {\n      if (isMountedRef.current) {\n        setIsFetchingResults(false);\n        setLoading(false);\n      }\n    }\n  }, [\n    addCampaign,\n    authUserId,\n    campaignId,\n    campaigns,\n    ensureUniqueCampaignHistory,\n    metrics,\n    navigate,\n    setCurrentCampaign,\n    setCampaignLeads,\n    setError,\n    setLoading,\n    updateCampaign,\n  ]);\n\n  useEffect(() => {\n    if (!isComplete || !campaignId || !jobId) {\n      return;\n    }\n\n    if (!authUserId) {\n      return;\n    }\n\n    if (hasFetchedResultsRef.current) {\n      return;\n    }\n\n    fetchResults();\n  }, [authUserId, campaignId, fetchResults, isComplete, jobId]);\n\n  const handleRetryFetch = () => {\n    if (!campaignId) {\n      return;\n    }\n\n    if (!authUserId) {\n      setResultFetchError(\"Sign in again to re-establish your session.\");\n      return;\n    }\n\n    fetchResults();\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"flex items-center justify-center\">\n          <div className=\"flex items-center space-x-3 text-gray-600\">\n            <div className=\"h-6 w-6 animate-spin rounded-full border-2 border-blue-600 border-t-transparent\"></div>\n            <span>Loading campaign...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!authUserId) {\n    return (\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"max-w-xl mx-auto rounded-lg border border-gray-200 bg-white p-8 text-center shadow-sm dark:border-gray-700 dark:bg-gray-800\">\n          <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\n            Sign in required\n          </h1>\n          <p className=\"mt-3 text-sm text-gray-600 dark:text-gray-300\">\n            Please sign in to review campaign progress and download results.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!jobId || !campaignId) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">\n            Invalid Campaign\n          </h1>\n          <p className=\"text-gray-600 mb-4\">\n            Missing job or campaign information.\n          </p>\n          <button\n            onClick={() => navigate(\"/\")}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Return Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">\n            Processing Error\n          </h1>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button\n            onClick={() => navigate(\"/\")}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Start New Campaign\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          Campaign Discovery in Progress\n        </h1>\n      </div>\n\n      {isFetchingResults && !resultFetchError && (\n        <div className=\"mb-6 rounded-lg border border-blue-200 bg-blue-50 p-4 text-sm text-blue-700\">\n          Finalizing campaign results and syncing verified leads to your\n          vault...\n        </div>\n      )}\n\n      {resultFetchError && (\n        <div className=\"mb-6 rounded-lg border border-red-200 bg-red-50 p-4 text-sm text-red-700\">\n          <div className=\"font-semibold\">Unable to load campaign results</div>\n          <p className=\"mt-1\">{resultFetchError}</p>\n          <button\n            onClick={handleRetryFetch}\n            className=\"mt-3 inline-flex items-center rounded border border-red-300 bg-white px-3 py-1.5 text-xs font-medium text-red-700 shadow-sm transition hover:bg-red-100\"\n          >\n            Retry syncing results\n          </button>\n        </div>\n      )}\n\n      {/* Progress Display */}\n      <ProgressDisplay\n        isDiscovering={isProcessing}\n        progress={displayProgress}\n        currentStage={displayStage}\n        cacheStats={null} // Real-time updates don't include cache stats\n      />\n\n      {/* Real-time Metrics */}\n      {metrics && (\n        <div className=\"mt-6 bg-white border border-gray-200 rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            📊 Live Discovery Metrics\n          </h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {metrics.total_found || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Found</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {metrics.qualified_leads || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Qualified</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {metrics.avg_confidence ? `${metrics.avg_confidence}%` : \"0%\"}\n              </div>\n              <div className=\"text-sm text-gray-600\">Avg Confidence</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                ${(metrics.total_cost || 0).toFixed(2)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Cost</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Status Updates */}\n      <div className=\"mt-6 bg-gray-50 border border-gray-200 rounded-lg p-4\">\n        <h4 className=\"font-semibold text-gray-900 mb-2\">Status Updates</h4>\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center text-sm\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full mr-2\"></div>\n            <span className=\"text-gray-600\">\n              Campaign started at {new Date().toLocaleTimeString()}\n            </span>\n          </div>\n          {displayStage && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-blue-400 rounded-full mr-2 animate-pulse\"></div>\n              <span className=\"text-gray-900 font-medium\">{displayStage}</span>\n            </div>\n          )}\n          {isFetchingResults && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-purple-400 rounded-full mr-2 animate-pulse\"></div>\n              <span className=\"text-purple-600 font-medium\">\n                Finalizing leads and preparing results...\n              </span>\n            </div>\n          )}\n          {status === \"completed\" && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full mr-2\"></div>\n              <span className=\"text-green-600 font-medium\">\n                ✅ Discovery completed! Redirecting to results...\n              </span>\n            </div>\n          )}\n          {resultFetchError && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-red-400 rounded-full mr-2\"></div>\n              <span className=\"text-red-600 font-medium\">\n                {resultFetchError}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"mt-8 text-center space-x-4\">\n        <button\n          onClick={() => navigate(\"/\")}\n          className=\"px-4 py-2 text-gray-600 bg-gray-100 rounded hover:bg-gray-200\"\n        >\n          Start New Campaign\n        </button>\n        {!isProcessing && (\n          <button\n            onClick={() => navigate(\"/results\", { state: { campaignId } })}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            View Complete Results\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":112,"duration":2.733},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":105,"duration":0.209},
{"type":"mark","name":"lsp.did_close","count":107,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/types/index.ts"}}},
{"type":"measure","name":"lsp.did_close","count":107,"duration":0.911},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":106,"duration":0.153},
{"type":"mark","name":"lsp.did_close","count":108,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Dashboard.tsx"}}},
{"type":"measure","name":"lsp.did_close","count":108,"duration":1.133},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":107,"duration":0.185},
{"type":"mark","name":"lsp.did_close","count":109,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"measure","name":"lsp.did_close","count":109,"duration":8.529},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":108,"duration":0.118},
{"type":"mark","name":"lsp.did_open","count":113,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/types/index.ts","languageId":"typescript","version":1,"text":"// Business Discovery Types\nexport interface BusinessLead {\n  id: string;\n  campaign_id?: string;\n  business_name: string;\n  address?: string;\n  phone?: string;\n  website?: string;\n  email?: string;\n  industry?: string;\n  confidence_score: number;\n  validation_status: \"pending\" | \"validating\" | \"validated\" | \"failed\";\n  created_at: string;\n  cost_to_acquire: number;\n  data_sources: string[];\n  // Progressive enrichment fields\n  enrichment_tier?: string;\n  vault_secured?: boolean;\n  enrichment_data?: {\n    emails?: Array<{\n      email: string;\n      confidence: number;\n      verified: boolean;\n      type?: string;\n      firstName?: string;\n      lastName?: string;\n      position?: string;\n    }>;\n    businessLicense?: {\n      isValid: boolean;\n      licenseNumber?: string;\n      status?: string;\n      expirationDate?: string;\n      professionalType?: string;\n      source: string;\n    };\n    companyInfo?: {\n      name?: string;\n      industry?: string;\n      size?: string;\n      founded?: number;\n      revenue?: string;\n      website?: string;\n      description?: string;\n      source: string;\n    };\n    hunterVerified?: boolean;\n    neverBounceVerified?: boolean;\n    licenseVerified?: boolean;\n    validationStatus?: \"pending\" | \"validating\" | \"validated\" | \"failed\";\n    enrichmentTier?: string;\n    verificationSources?: string[];\n    processingMetadata?: {\n      servicesUsed?: string[];\n      servicesSkipped?: string[];\n      totalCost?: number;\n      validationCost?: number;\n      enrichmentCost?: number;\n      enrichmentTier?: string;\n      enrichmentCostBreakdown?: {\n        businessLicenseCost: number;\n        companyEnrichmentCost: number;\n        hunterCost: number;\n        neverBounceCost: number;\n        personEnrichmentCost: number;\n        apolloCost: number;\n        complianceCost: number;\n      };\n    };\n    dataSources?: string[];\n  };\n}\n\nexport interface CampaignConfig {\n  search_terms: string;\n  location: string;\n  business_type?: string;\n  budget_limit: number;\n  max_results: number;\n  include_email_validation: boolean;\n  include_website_validation: boolean;\n  min_confidence_score: number;\n  chamber_verification?: boolean;\n  trade_association?: boolean;\n  professional_license?: boolean;\n  keywords?: string;\n  search_radius?: string;\n  expand_geography?: boolean;\n}\n\nexport interface ValidationResult {\n  field: string;\n  is_valid: boolean;\n  confidence: number;\n  source: string;\n  details?: string;\n}\n\nexport interface CampaignResult {\n  campaign_id: string;\n  business_type?: string;\n  location?: string;\n  status: \"running\" | \"completed\" | \"failed\" | \"cancelled\";\n  progress: number;\n  total_cost: number;\n  leads_found: number;\n  leads_qualified: number;\n  leads_validated: number;\n  created_at: string;\n  completed_at?: string;\n  error_message?: string;\n  // Progressive enrichment fields\n  tier_used?: string;\n  vault_secured?: boolean;\n  cache_performance?: {\n    cache_hits: number;\n    cache_misses: number;\n    cache_hit_ratio: number;\n    cost_savings: number;\n  };\n}\n\n// Census Intelligence Types\nexport interface CensusIntelligence {\n  business_density: {\n    total_establishments: number;\n    density_score: number;\n    confidence_multiplier: number;\n  };\n  geographic_optimization: {\n    optimal_radius: number;\n    expected_results: number;\n    api_efficiency_score: number;\n  };\n  market_insights: {\n    market_density: \"High\" | \"Medium\" | \"Low\";\n    competition_level: \"High\" | \"Medium\" | \"Low\";\n    search_optimization: string;\n  };\n}\n\n// API Response Types\nexport interface EdgeFunctionResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  cost?: number;\n  processing_time?: number;\n}\n\nexport interface BusinessDiscoveryResponse {\n  businesses: BusinessLead[];\n  total_cost: number;\n  processing_time: string;\n  campaign_id: string;\n  qualified_count: number;\n  total_found: number;\n  census_intelligence?: CensusIntelligence;\n  // Background job fields\n  job_id?: string; // For tracking background processing\n  status?: string; // Job status (pending, processing, completed, failed)\n  estimated_time?: number; // Estimated completion time in seconds\n  realtime_channel?: string; // Channel for real-time updates\n  // Progressive enrichment fields (vault-secured)\n  tier_used?: string;\n  cache_performance?: {\n    cache_hits: number;\n    cache_misses: number;\n    cache_hit_ratio: number;\n    cost_savings: number;\n  };\n  vault_status?: string;\n  stage_progress?: number;\n  current_stage?: string;\n}\n\n// Store Types\nexport interface CampaignStore {\n  campaigns: CampaignResult[];\n  currentCampaign: CampaignResult | null;\n  currentCampaignId: string | null;\n  leads: BusinessLead[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport interface UIStore {\n  sidebarOpen: boolean;\n  theme: \"light\" | \"dark\";\n  notifications: Notification[];\n}\n\nexport interface Notification {\n  id: string;\n  type: \"success\" | \"error\" | \"warning\" | \"info\";\n  title: string;\n  message: string;\n  timestamp: number;\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":113,"duration":1.452},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":109,"duration":0.773},
{"type":"mark","name":"lsp.did_open","count":114,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport {\n  createUsageLogger,\n  UsageLogContext,\n  UsageLogger,\n} from \"../_shared/api-usage.ts\";\nimport { corsHeaders, handleCORS } from \"../_shared/edge-auth.ts\";\n\n// Background Task Business Discovery with Tiered Enrichment + Multi-Source Discovery\n// ProspectPro v4.3 - October 2025\n// - Google Places + Foursquare discovery with Census targeting\n// - Tier-aware enrichment pipeline with Hunter.io + NeverBounce\n// - Rich verification metadata persisted for UI + exports\n\n// Type declarations for EdgeRuntime\ndeclare const EdgeRuntime: {\n  waitUntil(promise: Promise<unknown>): void;\n};\n\ntype TierKey = \"BASE\" | \"PROFESSIONAL\" | \"ENTERPRISE\";\n\ntype DataSource = \"google_places\" | \"google_place_details\" | \"foursquare\";\n\ninterface TierSettings {\n  key: TierKey;\n  name: string;\n  pricePerLead: number;\n  orchestratorTier: \"starter\" | \"professional\" | \"enterprise\" | \"compliance\";\n  maxCostPerLead: number;\n  includes: {\n    verifyEmails: boolean;\n    personEnrichment: boolean;\n    apolloEnrichment: boolean;\n  };\n}\n\nconst ENRICHMENT_TIERS: Record<TierKey, TierSettings> = {\n  BASE: {\n    key: \"BASE\",\n    name: \"Base\",\n    pricePerLead: 0.15,\n    orchestratorTier: \"starter\",\n    maxCostPerLead: 0.5,\n    includes: {\n      verifyEmails: false, // Generic company email only\n      personEnrichment: false,\n      apolloEnrichment: false,\n    },\n  },\n  PROFESSIONAL: {\n    key: \"PROFESSIONAL\",\n    name: \"Professional\",\n    pricePerLead: 0.45,\n    orchestratorTier: \"professional\",\n    maxCostPerLead: 1.5,\n    includes: {\n      verifyEmails: true, // Professional email discovery & verification\n      personEnrichment: false,\n      apolloEnrichment: false,\n    },\n  },\n  ENTERPRISE: {\n    key: \"ENTERPRISE\",\n    name: \"Enterprise\",\n    pricePerLead: 2.5,\n    orchestratorTier: \"enterprise\",\n    maxCostPerLead: 7.5,\n    includes: {\n      verifyEmails: true,\n      personEnrichment: true, // Executive contact enrichment\n      apolloEnrichment: true, // Full compliance verification\n    },\n  },\n};\n\ninterface BusinessDiscoveryRequest {\n  businessType: string;\n  location: string;\n  keywords?: string[] | string;\n  searchRadius?: string;\n  expandGeography?: boolean;\n  maxResults?: number;\n  budgetLimit?: number;\n  minConfidenceScore?: number;\n  sessionUserId?: string;\n  tierKey?: TierKey;\n  tierName?: string;\n  tierPrice?: number;\n  options?: {\n    tradeAssociation?: boolean;\n    professionalLicense?: boolean;\n    chamberVerification?: boolean;\n    apolloDiscovery?: boolean;\n  };\n  userEmail?: string;\n}\n\ninterface RequestSnapshot {\n  requestedAt: string;\n  requestHash: string;\n  payload: {\n    businessType: string;\n    location: string;\n    keywords: string[];\n    searchRadius?: string;\n    expandGeography: boolean;\n    maxResults: number;\n    budgetLimit: number;\n    minConfidenceScore: number;\n    tierKey: TierKey;\n    tierName: string;\n    options: {\n      tradeAssociation: boolean;\n      professionalLicense: boolean;\n      chamberVerification: boolean;\n      apolloDiscovery: boolean;\n    };\n  };\n}\n\ninterface JobConfig {\n  campaignId: string;\n  businessType: string;\n  location: string;\n  keywords: string[];\n  searchRadius?: string;\n  expandGeography: boolean;\n  maxResults: number;\n  budgetLimit: number;\n  minConfidenceScore: number;\n  userId?: string;\n  sessionUserId?: string;\n  jobId?: string;\n  tier: TierSettings;\n  options: {\n    tradeAssociation: boolean;\n    professionalLicense: boolean;\n    chamberVerification: boolean;\n    apolloDiscovery: boolean;\n  };\n  requestSnapshot: RequestSnapshot;\n}\n\ninterface BusinessData {\n  name?: string;\n  businessName?: string;\n  formatted_address?: string;\n  address?: string;\n  formatted_phone_number?: string;\n  phone?: string;\n  website?: string;\n  place_id?: string;\n  rating?: number;\n  user_ratings_total?: number;\n  source?: DataSource;\n  data_enriched?: boolean;\n  foursquare_data?: Record<string, unknown>;\n}\n\ninterface DiscoveredBusiness extends BusinessData {\n  source: DataSource;\n}\n\ninterface FoursquarePlace {\n  fsq_id: string;\n  name: string;\n  location?: {\n    address?: string;\n    locality?: string;\n    admin_district?: string;\n    region?: string;\n    postcode?: string;\n    country?: string;\n  };\n  contact?: {\n    phone?: string;\n  };\n  website?: string;\n  rating?: number;\n  stats?: {\n    total_tips?: number;\n  };\n}\n\ninterface ScoredLead {\n  businessName: string;\n  address: string;\n  phone: string;\n  website: string;\n  email: string;\n  optimizedScore: number;\n  validationCost: number;\n  dataSources: string[];\n  enhancementData: {\n    verificationSources: string[];\n    emails?: Array<{\n      email: string;\n      confidence?: number;\n      verified?: boolean;\n      type?: string;\n      firstName?: string;\n      lastName?: string;\n      position?: string;\n    }>;\n    processingMetadata: {\n      totalCost: number;\n      validationCost: number;\n      enrichmentCost: number;\n      totalConfidenceBoost: number;\n      processingStrategy: string;\n      servicesUsed: string[];\n      servicesSkipped: string[];\n      enrichmentTier: string;\n      enrichmentCostBreakdown?: Record<string, number>;\n      emailStatus?: \"verified\" | \"unconfirmed\" | \"not_found\";\n      verifiedEmail?: string;\n      unverifiedEmail?: string;\n    };\n  };\n}\n\ninterface CensusIntelligence {\n  total_establishments: number;\n  density_score: number;\n  optimization: {\n    search_radius: number;\n    expected_results: number;\n    api_efficiency_score: number;\n    confidence_multiplier: number;\n  };\n  geographic_data: {\n    state: string;\n    county: string | null;\n    raw_location: string;\n    fallback?: boolean;\n  };\n}\n\nconst DEFAULT_OPTIONS = {\n  tradeAssociation: false,\n  professionalLicense: false,\n  chamberVerification: false,\n  apolloDiscovery: false,\n};\n\nconst GOOGLE_TEXT_SEARCH_COST = 0.032;\nconst GOOGLE_DETAILS_COST = 0.017;\nconst FOURSQUARE_SEARCH_COST = 0;\n\nfunction parseKeywords(input?: string[] | string): string[] {\n  if (!input) return [];\n  if (Array.isArray(input)) {\n    return input.map((value) => value.trim()).filter(Boolean);\n  }\n  return input\n    .split(\",\")\n    .map((value) => value.trim())\n    .filter(Boolean);\n}\n\nasync function createStableHash(payload: unknown): Promise<string> {\n  try {\n    if (!payload) {\n      return `${Date.now().toString(36)}${Math.random()\n        .toString(36)\n        .slice(2, 11)}`;\n    }\n\n    if (typeof crypto === \"undefined\" || !crypto?.subtle) {\n      return `${Date.now().toString(36)}${Math.random()\n        .toString(36)\n        .slice(2, 11)}`;\n    }\n\n    const encoder = new TextEncoder();\n    const encoded = encoder.encode(JSON.stringify(payload));\n    const buffer = await crypto.subtle.digest(\"SHA-256\", encoded);\n    return Array.from(new Uint8Array(buffer))\n      .map((byte) => byte.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n  } catch (error) {\n    console.warn(\"Hash generation failed\", error);\n    return `${Date.now().toString(36)}${Math.random()\n      .toString(36)\n      .slice(2, 11)}`;\n  }\n}\n\nfunction getTierSettings(\n  tierKey?: TierKey,\n  fallbackName?: string\n): TierSettings {\n  if (tierKey && ENRICHMENT_TIERS[tierKey]) {\n    return ENRICHMENT_TIERS[tierKey];\n  }\n\n  if (fallbackName) {\n    const match = (Object.values(ENRICHMENT_TIERS) as TierSettings[]).find(\n      (tier) => tier.name.toLowerCase() === fallbackName.toLowerCase()\n    );\n    if (match) return match;\n  }\n\n  return ENRICHMENT_TIERS.BASE; // Changed from PROFESSIONAL to BASE as default\n}\n\n// --------------------\n// Census Intelligence\n// --------------------\n\nclass CensusAPIClient {\n  private apiKey: string;\n  private baseURL: string;\n  private cache = new Map<string, { data: unknown; timestamp: number }>();\n  private cacheTTL = 24 * 60 * 60 * 1000;\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n    this.baseURL = \"https://api.census.gov/data\";\n  }\n\n  async getBusinessDensity(\n    businessType: string,\n    location: string\n  ): Promise<CensusIntelligence> {\n    const naicsCode = this.mapBusinessTypeToNAICS(businessType);\n    const geoData = this.parseLocation(location);\n\n    const censusData = await this.fetchCountyBusinessPatterns({\n      naics: naicsCode,\n      state: geoData.state,\n      county: geoData.county,\n    });\n\n    return this.calculateDensityMetrics(censusData, geoData, location);\n  }\n\n  private async fetchCountyBusinessPatterns({\n    naics,\n    state,\n    county,\n  }: {\n    naics: string;\n    state: string;\n    county: string | null;\n  }) {\n    const cacheKey = `cbp_${naics}_${state}_${county ?? \"all\"}`;\n    const cached = this.cache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheTTL) {\n      return cached.data as unknown[];\n    }\n\n    const url = `${this.baseURL}/2021/cbp?get=ESTAB,EMP,NAICS2017_LABEL&for=state:${state}&NAICS2017=${naics}&key=${this.apiKey}`;\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error(`Census API error: ${response.status}`);\n    }\n\n    const data = (await response.json()) as unknown[];\n    this.cache.set(cacheKey, { data, timestamp: Date.now() });\n    return data;\n  }\n\n  private calculateDensityMetrics(\n    censusData: unknown[],\n    geoData: {\n      state: string;\n      county: string | null;\n      raw_location: string;\n      fallback?: boolean;\n    },\n    rawLocation: string\n  ): CensusIntelligence {\n    if (!Array.isArray(censusData) || censusData.length < 2) {\n      return this.getDefaultOptimization(\n        rawLocation,\n        geoData.state,\n        geoData.county\n      );\n    }\n\n    const businessData = censusData.slice(1) as [\n      string,\n      string,\n      string,\n      string\n    ][];\n    let totalEstablishments = 0;\n    let totalEmployment = 0;\n\n    for (const row of businessData) {\n      const [estab, emp] = row;\n      totalEstablishments += parseInt(estab) || 0;\n      totalEmployment += parseInt(emp) || 0;\n    }\n\n    const densityScore = Math.min(totalEstablishments / 750, 100);\n    const confidenceMultiplier =\n      totalEstablishments > 750 ? 1.3 : totalEstablishments > 250 ? 1.15 : 1;\n    const expectedResults = Math.max(Math.round(totalEstablishments * 0.04), 5);\n\n    return {\n      total_establishments: totalEstablishments,\n      density_score: densityScore,\n      optimization: {\n        search_radius: this.calculateOptimalRadius(densityScore),\n        expected_results: Math.min(expectedResults, 40),\n        api_efficiency_score: Math.round(densityScore),\n        confidence_multiplier: confidenceMultiplier,\n      },\n      geographic_data: geoData,\n    };\n  }\n\n  private getDefaultOptimization(\n    rawLocation: string,\n    state: string,\n    county: string | null\n  ): CensusIntelligence {\n    return {\n      total_establishments: 250,\n      density_score: 25,\n      optimization: {\n        search_radius: 25,\n        expected_results: 12,\n        api_efficiency_score: 45,\n        confidence_multiplier: 1,\n      },\n      geographic_data: {\n        state,\n        county,\n        raw_location: rawLocation,\n        fallback: true,\n      },\n    };\n  }\n\n  private mapBusinessTypeToNAICS(businessType: string): string {\n    const naicsMapping: Record<string, string> = {\n      accounting: \"5412\",\n      cpa: \"5412\",\n      legal: \"5411\",\n      electrician: \"238210\",\n      contractor: \"23\",\n      restaurant: \"7225\",\n      cafe: \"722515\",\n      medical: \"621\",\n      dental: \"6212\",\n      retail: \"44\",\n      spa: \"8121\",\n      salon: \"8121\",\n      consulting: \"5416\",\n      marketing: \"5418\",\n      real: \"531\",\n      hvac: \"238220\",\n    };\n\n    const lower = businessType.toLowerCase();\n    for (const [key, code] of Object.entries(naicsMapping)) {\n      if (lower.includes(key)) return code;\n    }\n    return \"00\";\n  }\n\n  private parseLocation(location: string) {\n    const stateMatch = location.match(/\\b([A-Z]{2})\\b/);\n    const stateCode = stateMatch ? this.getStateFIPSCode(stateMatch[1]) : \"06\";\n    return {\n      state: stateCode,\n      county: null,\n      raw_location: location,\n    };\n  }\n\n  private getStateFIPSCode(stateAbbr: string): string {\n    const stateCodes: Record<string, string> = {\n      AL: \"01\",\n      AK: \"02\",\n      AZ: \"04\",\n      AR: \"05\",\n      CA: \"06\",\n      CO: \"08\",\n      CT: \"09\",\n      DE: \"10\",\n      FL: \"12\",\n      GA: \"13\",\n      HI: \"15\",\n      ID: \"16\",\n      IL: \"17\",\n      IN: \"18\",\n      IA: \"19\",\n      KS: \"20\",\n      KY: \"21\",\n      LA: \"22\",\n      ME: \"23\",\n      MD: \"24\",\n      MA: \"25\",\n      MI: \"26\",\n      MN: \"27\",\n      MS: \"28\",\n      MO: \"29\",\n      MT: \"30\",\n      NE: \"31\",\n      NV: \"32\",\n      NH: \"33\",\n      NJ: \"34\",\n      NM: \"35\",\n      NY: \"36\",\n      NC: \"37\",\n      ND: \"38\",\n      OH: \"39\",\n      OK: \"40\",\n      OR: \"41\",\n      PA: \"42\",\n      RI: \"44\",\n      SC: \"45\",\n      SD: \"46\",\n      TN: \"47\",\n      TX: \"48\",\n      UT: \"49\",\n      VT: \"50\",\n      VA: \"51\",\n      WA: \"53\",\n      WV: \"54\",\n      WI: \"55\",\n      WY: \"56\",\n    };\n    return stateCodes[stateAbbr.toUpperCase()] || \"06\";\n  }\n\n  private calculateOptimalRadius(densityScore: number): number {\n    if (densityScore > 60) return 5;\n    if (densityScore > 30) return 10;\n    if (densityScore > 10) return 20;\n    return 35;\n  }\n}\n\nasync function fetchCensusIntelligence(\n  businessType: string,\n  location: string\n): Promise<CensusIntelligence | null> {\n  const censusKey = Deno.env.get(\"CENSUS_API_KEY\");\n  if (!censusKey) return null;\n\n  try {\n    const client = new CensusAPIClient(censusKey);\n    return await client.getBusinessDensity(businessType, location);\n  } catch (error) {\n    console.warn(\"Census intelligence unavailable:\", error);\n    return null;\n  }\n}\n\n// --------------------\n// Discovery Providers\n// --------------------\n\nasync function searchGooglePlaces(\n  businessType: string,\n  location: string,\n  keywords: string[],\n  maxResults: number,\n  usageLogger?: UsageLogger,\n  usageContext?: UsageLogContext\n): Promise<DiscoveredBusiness[]> {\n  const apiKey = Deno.env.get(\"GOOGLE_PLACES_API_KEY\");\n  if (!apiKey) throw new Error(\"Google Places API key not configured\");\n\n  const keywordSuffix = keywords.length > 0 ? ` ${keywords.join(\" \")}` : \"\";\n  const query = `${businessType}${keywordSuffix} in ${location}`;\n  const searchUrl = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(\n    query\n  )}&key=${apiKey}`;\n\n  const requestParams = {\n    query,\n    businessType,\n    location,\n    keywordCount: keywords.length,\n    maxResults,\n  };\n\n  let textResponse: Response | null = null;\n  let data: Record<string, unknown> = {};\n  const searchStarted = performance.now();\n\n  try {\n    textResponse = await fetch(searchUrl);\n    data = await textResponse.json();\n  } catch (error) {\n    await usageLogger?.log({\n      sourceName: \"google_places\",\n      endpoint: \"textsearch\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: textResponse?.status ?? null,\n      responseTimeMs: Math.round(performance.now() - searchStarted),\n      success: false,\n      errorMessage: error instanceof Error ? error.message : String(error),\n    });\n    throw error;\n  }\n\n  const searchElapsed = Math.round(performance.now() - searchStarted);\n\n  if (data.status !== \"OK\") {\n    await usageLogger?.log({\n      sourceName: \"google_places\",\n      endpoint: \"textsearch\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: textResponse.status,\n      responseTimeMs: searchElapsed,\n      success: false,\n      errorMessage:\n        (data.error_message as string | undefined) || (data.status as string),\n      estimatedCost: GOOGLE_TEXT_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw new Error(`Google Places API failed: ${data.status}`);\n  }\n\n  const results = (data.results as BusinessData[]).slice(0, maxResults * 2);\n\n  await usageLogger?.log({\n    sourceName: \"google_places\",\n    endpoint: \"textsearch\",\n    httpMethod: \"GET\",\n    requestParams,\n    queryType: \"discovery\",\n    responseCode: textResponse.status,\n    responseTimeMs: searchElapsed,\n    resultsReturned: results.length,\n    usefulResults: results.length,\n    success: true,\n    estimatedCost: GOOGLE_TEXT_SEARCH_COST,\n    actualCost: GOOGLE_TEXT_SEARCH_COST,\n    ...usageContext,\n  });\n\n  const enriched: DiscoveredBusiness[] = [];\n\n  for (const business of results) {\n    if (!business.place_id) {\n      enriched.push({ ...business, source: \"google_places\" });\n      continue;\n    }\n\n    const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${business.place_id}&fields=formatted_phone_number,website&key=${apiKey}`;\n    const detailStart = performance.now();\n\n    let detailsResponse: Response | null = null;\n    let detailsData: {\n      result?: {\n        formatted_phone_number?: string;\n        website?: string;\n      };\n      [key: string]: unknown;\n    } = {};\n\n    try {\n      detailsResponse = await fetch(detailsUrl);\n      detailsData = await detailsResponse.json();\n    } catch (error) {\n      await usageLogger?.log({\n        sourceName: \"google_places\",\n        endpoint: \"details\",\n        httpMethod: \"GET\",\n        requestParams: {\n          placeId: business.place_id,\n        },\n        queryType: \"discovery\",\n        responseCode: detailsResponse?.status ?? null,\n        responseTimeMs: Math.round(performance.now() - detailStart),\n        success: false,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        estimatedCost: GOOGLE_DETAILS_COST,\n        actualCost: 0,\n      });\n      throw error;\n    }\n\n    const detailElapsed = Math.round(performance.now() - detailStart);\n\n    const dataEnriched = Boolean(detailsData.result);\n\n    enriched.push({\n      ...business,\n      formatted_phone_number:\n        detailsData.result?.formatted_phone_number ??\n        business.formatted_phone_number ??\n        \"\",\n      website: detailsData.result?.website ?? business.website ?? \"\",\n      source: dataEnriched ? \"google_place_details\" : \"google_places\",\n      data_enriched: dataEnriched,\n    });\n\n    await usageLogger?.log({\n      sourceName: \"google_places\",\n      endpoint: \"details\",\n      httpMethod: \"GET\",\n      requestParams: {\n        placeId: business.place_id,\n        hasWebsite: Boolean(detailsData.result?.website),\n      },\n      queryType: \"discovery\",\n      responseCode: detailsResponse.status,\n      responseTimeMs: detailElapsed,\n      resultsReturned: dataEnriched ? 1 : 0,\n      usefulResults: dataEnriched ? 1 : 0,\n      success: detailsResponse.ok && dataEnriched,\n      estimatedCost: GOOGLE_DETAILS_COST,\n      actualCost: detailsResponse.ok && dataEnriched ? GOOGLE_DETAILS_COST : 0,\n    });\n\n    // Basic rate limiting to stay under quota\n    await new Promise((resolve) => setTimeout(resolve, 80));\n  }\n\n  return enriched;\n}\n\nasync function searchFoursquare(\n  businessType: string,\n  location: string,\n  keywords: string[],\n  maxResults: number,\n  usageLogger?: UsageLogger,\n  usageContext?: UsageLogContext\n): Promise<DiscoveredBusiness[]> {\n  const apiKey = Deno.env.get(\"FOURSQUARE_API_KEY\");\n  if (!apiKey) {\n    return [];\n  }\n\n  const queryString =\n    [businessType, ...keywords].join(\" \").trim() || businessType;\n  const limit = Math.min(Math.max(maxResults, 5), 30);\n  const params = new URLSearchParams({\n    query: queryString,\n    near: location,\n    limit: limit.toString(),\n    fields: \"fsq_id,name,location,contact,website,categories,rating,stats\",\n  });\n\n  const requestParams = {\n    query: queryString,\n    location,\n    limit,\n    keywordCount: keywords.length,\n  };\n\n  let response: Response | null = null;\n  const startedAt = performance.now();\n\n  try {\n    response = await fetch(\n      `https://api.foursquare.com/v3/places/search?${params}`,\n      {\n        headers: {\n          Authorization: apiKey,\n          Accept: \"application/json\",\n        },\n      }\n    );\n  } catch (error) {\n    await usageLogger?.log({\n      sourceName: \"foursquare\",\n      endpoint: \"places.search\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: response?.status ?? null,\n      responseTimeMs: Math.round(performance.now() - startedAt),\n      success: false,\n      errorMessage: error instanceof Error ? error.message : String(error),\n      estimatedCost: FOURSQUARE_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw error;\n  }\n\n  const elapsed = Math.round(performance.now() - startedAt);\n\n  if (!response.ok) {\n    await usageLogger?.log({\n      sourceName: \"foursquare\",\n      endpoint: \"places.search\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: response.status,\n      responseTimeMs: elapsed,\n      success: false,\n      errorMessage: `HTTP ${response.status}`,\n      estimatedCost: FOURSQUARE_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw new Error(`Foursquare API error: ${response.status}`);\n  }\n\n  let payload: { results?: FoursquarePlace[] } = {};\n  try {\n    payload = await response.json();\n  } catch (error) {\n    await usageLogger?.log({\n      sourceName: \"foursquare\",\n      endpoint: \"places.search\",\n      httpMethod: \"GET\",\n      requestParams,\n      queryType: \"discovery\",\n      responseCode: response.status,\n      responseTimeMs: elapsed,\n      success: false,\n      errorMessage: error instanceof Error ? error.message : String(error),\n      estimatedCost: FOURSQUARE_SEARCH_COST,\n      actualCost: 0,\n    });\n    throw error;\n  }\n\n  const results = Array.isArray(payload.results) ? payload.results : [];\n\n  await usageLogger?.log({\n    sourceName: \"foursquare\",\n    endpoint: \"places.search\",\n    httpMethod: \"GET\",\n    requestParams,\n    queryType: \"discovery\",\n    responseCode: response.status,\n    responseTimeMs: elapsed,\n    resultsReturned: results.length,\n    usefulResults: results.length,\n    success: true,\n    estimatedCost: FOURSQUARE_SEARCH_COST,\n    actualCost: FOURSQUARE_SEARCH_COST,\n    ...usageContext,\n  });\n\n  return results.map((place) => ({\n    source: \"foursquare\" as DataSource,\n    place_id: place.fsq_id,\n    name: place.name,\n    formatted_address: formatFoursquareAddress(place.location),\n    formatted_phone_number: place.contact?.phone ?? \"\",\n    website: place.website ?? \"\",\n    rating: place.rating ?? 0,\n    user_ratings_total: place.stats?.total_tips ?? 0,\n    foursquare_data: place as unknown as Record<string, unknown>,\n  }));\n}\n\nfunction formatFoursquareAddress(\n  location: {\n    address?: string;\n    locality?: string;\n    admin_district?: string;\n    postcode?: string;\n    country?: string;\n  } = {}\n): string {\n  const parts = [\n    location.address,\n    location.locality,\n    location.admin_district,\n    location.postcode,\n    location.country,\n  ]\n    .map((value) => value?.trim())\n    .filter(Boolean);\n  return parts.join(\", \");\n}\n\ntype BusinessFingerprintSource = {\n  name?: string | null;\n  businessName?: string | null;\n  business_name?: string | null;\n  formatted_address?: string | null;\n  address?: string | null;\n  formatted_phone_number?: string | null;\n  phone?: string | null;\n  website?: string | null;\n  place_id?: string | null;\n  source?: DataSource;\n};\n\nfunction normalizeString(value?: string | null): string {\n  return value ? value.toLowerCase().replace(/\\s+/g, \" \").trim() : \"\";\n}\n\nfunction normalizePhone(value?: string | null): string {\n  return value ? value.replace(/\\D+/g, \"\") : \"\";\n}\n\nfunction normalizeWebsite(value?: string | null): string {\n  if (!value) return \"\";\n  const normalized = value.toLowerCase().trim();\n  const withoutProtocol = normalized.replace(/^https?:\\/\\//, \"\");\n  const withoutWww = withoutProtocol.replace(/^www\\./, \"\");\n  return withoutWww.split(\"/\")[0];\n}\n\nfunction createBusinessFingerprint(source: BusinessFingerprintSource): string {\n  const name = normalizeString(\n    source.business_name ?? source.businessName ?? source.name ?? \"\"\n  );\n  const address = normalizeString(\n    source.address ?? source.formatted_address ?? \"\"\n  );\n  const phone = normalizePhone(\n    source.phone ?? source.formatted_phone_number ?? \"\"\n  );\n  const website = normalizeWebsite(source.website ?? \"\");\n\n  if (name && address) {\n    return `${name}::${address}`;\n  }\n\n  if (name && phone) {\n    return `${name}::${phone}`;\n  }\n\n  if (website) {\n    return `domain::${website}`;\n  }\n\n  if (phone) {\n    return `phone::${phone}`;\n  }\n\n  if (name) {\n    return `name::${name}`;\n  }\n\n  return \"\";\n}\n\nfunction dedupeBusinesses(\n  businesses: DiscoveredBusiness[]\n): DiscoveredBusiness[] {\n  const map = new Map<string, DiscoveredBusiness>();\n  let fallbackIndex = 0;\n\n  for (const business of businesses) {\n    const fingerprint = createBusinessFingerprint(business);\n    const key = fingerprint\n      ? fingerprint\n      : business.place_id\n      ? `place::${business.place_id}`\n      : `fallback::${fallbackIndex++}`;\n\n    if (!map.has(key)) {\n      map.set(key, business);\n      continue;\n    }\n\n    const existing = map.get(key)!;\n    const existingHasWebsite = Boolean(existing.website);\n    const candidateHasWebsite = Boolean(business.website);\n    const existingHasPhone = Boolean(\n      existing.formatted_phone_number || existing.phone\n    );\n    const candidateHasPhone = Boolean(\n      business.formatted_phone_number || business.phone\n    );\n\n    const candidateIsDetailsUpgrade =\n      existing.source === \"google_places\" &&\n      business.source === \"google_place_details\";\n\n    const candidateHasMoreData =\n      candidateHasWebsite && !existingHasWebsite\n        ? true\n        : candidateHasPhone && !existingHasPhone\n        ? true\n        : false;\n\n    if (candidateIsDetailsUpgrade || candidateHasMoreData) {\n      map.set(key, business);\n    }\n  }\n  return Array.from(map.values());\n}\n\n// --------------------\n// Quality Scorer\n// --------------------\n\nclass QualityScorer {\n  private maxCostPerBusiness: number;\n  private tierName: string;\n  private censusMultiplier: number;\n\n  constructor(options: {\n    maxCostPerBusiness: number;\n    tierName: string;\n    censusMultiplier?: number;\n  }) {\n    this.maxCostPerBusiness = options.maxCostPerBusiness;\n    this.tierName = options.tierName;\n    this.censusMultiplier = options.censusMultiplier ?? 1;\n  }\n\n  scoreBusiness(business: DiscoveredBusiness): ScoredLead {\n    const businessName = business.name || business.businessName || \"\";\n    const address = business.formatted_address || business.address || \"\";\n    const phone = business.formatted_phone_number || business.phone || \"\";\n    const website = business.website || \"\";\n\n    const scores = {\n      businessName: businessName ? Math.min(100, businessName.length * 3) : 0,\n      address: address ? 100 : 0,\n      phone: phone ? 85 : 0,\n      website: website ? 80 : 0,\n      rating: business.rating ? Math.min(20, business.rating * 4) : 0,\n    };\n\n    let totalScore =\n      Object.values(scores).reduce((sum, score) => sum + score, 0) /\n      Object.values(scores).length;\n\n    if (business.source === \"foursquare\") {\n      totalScore += 8;\n    } else if (business.source === \"google_place_details\") {\n      totalScore += 5;\n    }\n\n    totalScore = Math.min(100, Math.round(totalScore * this.censusMultiplier));\n\n    const initialSources = new Set<string>();\n    initialSources.add(business.source);\n    if (business.data_enriched) {\n      initialSources.add(\"google_places_details_api\");\n    }\n\n    return {\n      businessName,\n      address,\n      phone,\n      website,\n      email: \"\",\n      optimizedScore: totalScore,\n      validationCost: 0.02,\n      dataSources: Array.from(initialSources),\n      enhancementData: {\n        verificationSources: Array.from(initialSources),\n        processingMetadata: {\n          totalCost: 0.02,\n          validationCost: 0.02,\n          enrichmentCost: 0,\n          totalConfidenceBoost: 0,\n          processingStrategy: \"basic\",\n          servicesUsed: Array.from(initialSources),\n          servicesSkipped: [],\n          enrichmentTier: this.tierName,\n          emailStatus: \"not_found\",\n        },\n      },\n    };\n  }\n}\n\n// --------------------\n// Enrichment Pipeline\n// --------------------\n\nasync function enrichLead(\n  lead: ScoredLead,\n  config: JobConfig\n): Promise<{ lead: ScoredLead; cost: number; enrichmentCost: number }> {\n  const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n  const serviceKey = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\");\n  if (!supabaseUrl || !serviceKey) {\n    return { lead, cost: lead.validationCost, enrichmentCost: 0 };\n  }\n\n  const url = `${supabaseUrl}/functions/v1/enrichment-orchestrator`;\n  const domain = lead.website\n    ? lead.website.replace(/^https?:\\/\\//, \"\").replace(/\\/.*$/, \"\")\n    : undefined;\n\n  const maxCostPerBusiness = Math.max(\n    config.tier.maxCostPerLead,\n    config.budgetLimit / Math.max(config.maxResults, 1)\n  );\n\n  const body = {\n    businessName: lead.businessName,\n    domain,\n    address: lead.address,\n    phone: lead.phone,\n    website: lead.website,\n    discoverEmails: true,\n    verifyEmails: config.tier.includes.verifyEmails,\n    includePersonEnrichment: config.tier.includes.personEnrichment,\n    apolloEnrichment:\n      config.tier.includes.apolloEnrichment || config.options.apolloDiscovery,\n    includeBusinessLicense: true,\n    includeCompanyEnrichment: true,\n    maxCostPerBusiness,\n    minConfidenceScore: config.minConfidenceScore,\n    tier: config.tier.orchestratorTier,\n    campaignId: config.campaignId,\n    jobId: config.jobId,\n    sessionUserId: config.sessionUserId,\n    userId: config.userId,\n    tierKey: config.tier.key,\n  };\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${serviceKey}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n\n  if (!response.ok) {\n    return { lead, cost: lead.validationCost, enrichmentCost: 0 };\n  }\n\n  const enrichmentData = await response.json();\n  type EnrichedEmail = {\n    email: string;\n    verified?: boolean;\n    [key: string]: unknown;\n  };\n\n  const emails = (enrichmentData.enrichedData?.emails ?? []) as EnrichedEmail[];\n\n  const normalizeDomain = (value?: string) =>\n    value ? value.toLowerCase().replace(/^www\\./, \"\") : \"\";\n\n  const normalizedDomain = normalizeDomain(domain);\n\n  const emailMatchesCorporateDomain = (emailAddress?: string) => {\n    if (!emailAddress || !normalizedDomain) return false;\n    const parts = emailAddress.split(\"@\");\n    if (parts.length !== 2) return false;\n    const emailDomain = normalizeDomain(parts[1]);\n    if (!emailDomain) return false;\n    return (\n      emailDomain === normalizedDomain ||\n      emailDomain.endsWith(`.${normalizedDomain}`)\n    );\n  };\n\n  const corporateEmails = normalizedDomain\n    ? emails.filter((entry: EnrichedEmail) =>\n        emailMatchesCorporateDomain(entry.email)\n      )\n    : emails;\n\n  const verifiedCorporate = corporateEmails.find(\n    (entry: EnrichedEmail) => entry.verified\n  );\n\n  let verifiedEmailEntry = verifiedCorporate;\n  if (!verifiedEmailEntry && !normalizedDomain) {\n    verifiedEmailEntry = emails.find((entry: EnrichedEmail) => entry.verified);\n  }\n\n  const unverifiedCorporate = corporateEmails.find(\n    (entry: EnrichedEmail) => entry.email && !entry.verified\n  );\n\n  const fallbackCandidate =\n    unverifiedCorporate ||\n    corporateEmails[0] ||\n    emails.find((entry: EnrichedEmail) => entry.email && !entry.verified) ||\n    emails[0];\n\n  let emailStatus: \"verified\" | \"unconfirmed\" | \"not_found\" = \"not_found\";\n  let verifiedEmailValue = \"\";\n  let unverifiedEmailValue = \"\";\n\n  if (verifiedEmailEntry?.email) {\n    emailStatus = \"verified\";\n    verifiedEmailValue = verifiedEmailEntry.email;\n  } else if (fallbackCandidate?.email) {\n    emailStatus = \"unconfirmed\";\n    unverifiedEmailValue = fallbackCandidate.email;\n  }\n\n  const servicesUsed = new Set<string>(\n    lead.enhancementData.verificationSources\n  );\n  (enrichmentData.processingMetadata?.servicesUsed ?? []).forEach(\n    (service: string) => servicesUsed.add(service)\n  );\n\n  const enrichmentCost = Number(enrichmentData.totalCost ?? 0);\n  const totalCost = lead.validationCost + enrichmentCost;\n\n  const updatedLead: ScoredLead = {\n    ...lead,\n    email: verifiedEmailValue || \"\",\n    enhancementData: {\n      ...lead.enhancementData,\n      verificationSources: Array.from(servicesUsed),\n      emails,\n      processingMetadata: {\n        ...lead.enhancementData.processingMetadata,\n        totalCost,\n        validationCost: lead.validationCost,\n        enrichmentCost,\n        servicesUsed: Array.from(servicesUsed),\n        servicesSkipped:\n          enrichmentData.processingMetadata?.servicesSkipped ?? [],\n        enrichmentTier: config.tier.name,\n        enrichmentCostBreakdown: enrichmentData.costBreakdown ?? undefined,\n        emailStatus,\n        verifiedEmail: verifiedEmailValue || undefined,\n        unverifiedEmail: unverifiedEmailValue || undefined,\n      },\n    },\n  };\n\n  return {\n    lead: updatedLead,\n    cost: totalCost,\n    enrichmentCost,\n  };\n}\n\n// --------------------\n// Discovery Workflow\n// --------------------\n\nasync function discoverBusinesses(\n  config: JobConfig,\n  census: CensusIntelligence | null,\n  usageLogger?: UsageLogger,\n  usageContext?: UsageLogContext\n): Promise<DiscoveredBusiness[]> {\n  const googleResults = await searchGooglePlaces(\n    config.businessType,\n    config.location,\n    config.keywords,\n    config.maxResults,\n    usageLogger,\n    {\n      ...usageContext,\n      businessQuery: config.businessType,\n      locationQuery: config.location,\n      tierKey: config.tier.key,\n    }\n  );\n\n  const results: DiscoveredBusiness[] = [...googleResults];\n\n  const shouldQueryFoursquare =\n    googleResults.length < config.maxResults * 1.2 || config.expandGeography;\n  if (shouldQueryFoursquare) {\n    const foursquareResults = await searchFoursquare(\n      config.businessType,\n      config.location,\n      config.keywords,\n      Math.max(\n        config.maxResults - googleResults.length,\n        Math.ceil(config.maxResults / 2)\n      ),\n      usageLogger,\n      {\n        ...usageContext,\n        businessQuery: config.businessType,\n        locationQuery: config.location,\n        tierKey: config.tier.key,\n      }\n    );\n    results.push(...foursquareResults);\n  }\n\n  const deduped = dedupeBusinesses(results);\n\n  if (\n    census &&\n    census.optimization.expected_results > deduped.length &&\n    config.expandGeography\n  ) {\n    const expandedResults = await searchFoursquare(\n      config.businessType,\n      census.geographic_data.raw_location,\n      config.keywords,\n      Math.min(census.optimization.expected_results, config.maxResults * 2),\n      usageLogger,\n      {\n        ...usageContext,\n        businessQuery: config.businessType,\n        locationQuery: census.geographic_data.raw_location,\n        tierKey: config.tier.key,\n      }\n    );\n    deduped.push(...expandedResults);\n  }\n\n  return dedupeBusinesses(deduped).slice(0, config.maxResults * 2);\n}\n\nasync function processDiscoveryJob(\n  jobId: string,\n  config: JobConfig,\n  supabaseUrl: string,\n  supabaseServiceKey: string\n) {\n  console.log(`🚀 Background job ${jobId} started`);\n\n  const supabase = createClient(supabaseUrl, supabaseServiceKey);\n  const usageLogger = createUsageLogger(supabaseUrl, supabaseServiceKey, {\n    campaignId: config.campaignId,\n    sessionId: config.sessionUserId ?? config.userId ?? null,\n    jobId,\n    tierKey: config.tier.key,\n    businessQuery: config.businessType,\n    locationQuery: config.location,\n  });\n  config.jobId = jobId;\n\n  try {\n    const { error: snapshotError } = await supabase\n      .from(\"campaign_request_snapshots\")\n      .insert({\n        campaign_id: config.campaignId,\n        user_id: config.userId,\n        session_user_id: config.sessionUserId,\n        request_hash: config.requestSnapshot.requestHash,\n        request_payload: config.requestSnapshot.payload,\n      });\n\n    if (snapshotError) {\n      console.warn(\n        \"Campaign request snapshot insert warning:\",\n        snapshotError.message\n      );\n    }\n  } catch (snapshotException) {\n    console.warn(\"Campaign request snapshot insert failed:\", snapshotException);\n  }\n\n  const historicalFingerprints = new Set<string>();\n\n  try {\n    if (config.userId) {\n      const { data: priorFingerprints, error: fingerprintsError } =\n        await supabase\n          .from(\"lead_fingerprints\")\n          .select(\"fingerprint\")\n          .eq(\"user_id\", config.userId)\n          .order(\"created_at\", { ascending: false })\n          .limit(5000);\n\n      if (fingerprintsError) {\n        console.warn(\n          \"Unable to load fingerprint ledger for duplicate suppression:\",\n          fingerprintsError.message\n        );\n      } else {\n        for (const row of priorFingerprints ?? []) {\n          if (row?.fingerprint) {\n            historicalFingerprints.add(row.fingerprint);\n          }\n        }\n      }\n    }\n\n    if (historicalFingerprints.size === 0 && config.userId) {\n      const { data: legacyLeads, error: legacyLeadsError } = await supabase\n        .from(\"leads\")\n        .select(\"business_name,address,phone,website\")\n        .eq(\"user_id\", config.userId)\n        .order(\"created_at\", { ascending: false })\n        .limit(1000);\n\n      if (legacyLeadsError) {\n        console.warn(\n          \"Legacy lead lookup failed for duplicate suppression:\",\n          legacyLeadsError.message\n        );\n      } else {\n        const legacyRows = (legacyLeads ?? []) as Array<{\n          business_name?: string | null;\n          address?: string | null;\n          phone?: string | null;\n          website?: string | null;\n        }>;\n\n        for (const lead of legacyRows) {\n          const fingerprint = createBusinessFingerprint(lead);\n          if (fingerprint) {\n            historicalFingerprints.add(fingerprint);\n          }\n        }\n      }\n    }\n  } catch (historyError) {\n    console.warn(\"Historical fingerprint lookup failed:\", historyError);\n  }\n\n  try {\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        status: \"processing\",\n        started_at: new Date().toISOString(),\n        current_stage: \"discovering_businesses\",\n        progress: 10,\n      })\n      .eq(\"id\", jobId);\n\n    const censusIntelligence = await fetchCensusIntelligence(\n      config.businessType,\n      config.location\n    );\n\n    let historicalFilteredCount = 0;\n\n    const applyHistoricalFilter = (\n      businesses: DiscoveredBusiness[]\n    ): DiscoveredBusiness[] => {\n      if (historicalFingerprints.size === 0) {\n        return businesses;\n      }\n\n      const filteredResults: DiscoveredBusiness[] = [];\n      for (const business of businesses) {\n        const fingerprint = createBusinessFingerprint(business);\n        if (fingerprint && historicalFingerprints.has(fingerprint)) {\n          historicalFilteredCount += 1;\n          continue;\n        }\n        filteredResults.push(business);\n      }\n      return filteredResults;\n    };\n\n    let discoveredBusinesses: DiscoveredBusiness[] = await discoverBusinesses(\n      config,\n      censusIntelligence,\n      usageLogger,\n      {\n        campaignId: config.campaignId,\n        sessionId: config.sessionUserId ?? config.userId ?? null,\n        jobId,\n        tierKey: config.tier.key,\n        businessQuery: config.businessType,\n        locationQuery: config.location,\n      }\n    );\n    let totalRawDiscovered = discoveredBusinesses.length;\n\n    discoveredBusinesses = applyHistoricalFilter(discoveredBusinesses);\n\n    if (\n      discoveredBusinesses.length === 0 &&\n      totalRawDiscovered > 0 &&\n      !config.expandGeography\n    ) {\n      console.log(\n        `ℹ️ No novel businesses found for ${config.businessType} in ${config.location}. Expanding geography to locate fresh results.`\n      );\n\n      const expandedConfig: JobConfig = {\n        ...config,\n        expandGeography: true,\n      };\n\n      const expandedResults = await discoverBusinesses(\n        expandedConfig,\n        censusIntelligence,\n        usageLogger,\n        {\n          campaignId: config.campaignId,\n          sessionId: config.sessionUserId ?? config.userId ?? null,\n          jobId,\n          tierKey: config.tier.key,\n          businessQuery: expandedConfig.businessType,\n          locationQuery: expandedConfig.location,\n        }\n      );\n\n      totalRawDiscovered += expandedResults.length;\n      discoveredBusinesses = applyHistoricalFilter(expandedResults);\n    }\n\n    if (historicalFilteredCount > 0) {\n      console.log(\n        `ℹ️ Suppressed ${historicalFilteredCount} previously delivered businesses for user ${config.userId}`\n      );\n    }\n\n    const sourcesUsed = Array.from(\n      new Set(discoveredBusinesses.map((business) => business.source))\n    );\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        current_stage: \"scoring_businesses\",\n        progress: 30,\n        metrics: {\n          businesses_found: discoveredBusinesses.length,\n          raw_candidates: totalRawDiscovered,\n          previously_delivered_filtered: historicalFilteredCount,\n          sources_used: sourcesUsed,\n          census_density_score: censusIntelligence?.density_score ?? null,\n        },\n      })\n      .eq(\"id\", jobId);\n\n    const scorer = new QualityScorer({\n      maxCostPerBusiness: config.budgetLimit / Math.max(config.maxResults, 1),\n      tierName: config.tier.name,\n      censusMultiplier: censusIntelligence?.optimization.confidence_multiplier,\n    });\n\n    const scoredBusinesses = discoveredBusinesses.map((business) =>\n      scorer.scoreBusiness(business)\n    );\n\n    const qualifiedLeads = scoredBusinesses\n      .filter((lead) => lead.optimizedScore >= config.minConfidenceScore)\n      .slice(0, config.maxResults);\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        current_stage: \"enriching_contacts\",\n        progress: 50,\n        metrics: {\n          businesses_found: discoveredBusinesses.length,\n          qualified_leads: qualifiedLeads.length,\n          raw_candidates: totalRawDiscovered,\n          previously_delivered_filtered: historicalFilteredCount,\n          sources_used: sourcesUsed,\n          census_density_score: censusIntelligence?.density_score ?? null,\n        },\n      })\n      .eq(\"id\", jobId);\n\n    const enrichedLeads: ScoredLead[] = [];\n    let totalCost = 0;\n    let totalValidationCost = 0;\n    let totalEnrichmentCost = 0;\n\n    for (let index = 0; index < qualifiedLeads.length; index += 1) {\n      const lead = qualifiedLeads[index];\n      try {\n        const enrichmentResult = await enrichLead(lead, config);\n        enrichedLeads.push(enrichmentResult.lead);\n        totalCost += enrichmentResult.cost;\n        totalValidationCost +=\n          enrichmentResult.lead.enhancementData.processingMetadata\n            .validationCost;\n        totalEnrichmentCost += enrichmentResult.enrichmentCost;\n      } catch (error) {\n        console.error(`❌ Enrichment error for ${lead.businessName}:`, error);\n        enrichedLeads.push(lead);\n        totalCost += lead.validationCost;\n        totalValidationCost += lead.validationCost;\n      }\n\n      const progress =\n        50 +\n        Math.floor(((index + 1) / Math.max(qualifiedLeads.length, 1)) * 35);\n      await supabase\n        .from(\"discovery_jobs\")\n        .update({\n          progress,\n          metrics: {\n            businesses_found: discoveredBusinesses.length,\n            qualified_leads: qualifiedLeads.length,\n            leads_enriched: index + 1,\n            total_cost: Number(totalCost.toFixed(3)),\n            validation_cost_total: Number(totalValidationCost.toFixed(3)),\n            enrichment_cost_total: Number(totalEnrichmentCost.toFixed(3)),\n            raw_candidates: totalRawDiscovered,\n            previously_delivered_filtered: historicalFilteredCount,\n            sources_used: sourcesUsed,\n            census_density_score: censusIntelligence?.density_score ?? null,\n          },\n        })\n        .eq(\"id\", jobId);\n    }\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        current_stage: \"storing_results\",\n        progress: 90,\n      })\n      .eq(\"id\", jobId);\n\n    const campaignInsert = await supabase\n      .from(\"campaigns\")\n      .insert({\n        id: config.campaignId,\n        business_type: config.businessType,\n        location: config.location,\n        target_count: config.maxResults,\n        results_count: enrichedLeads.length,\n        total_cost: Number(totalCost.toFixed(3)),\n        status: \"completed\",\n        user_id: config.userId,\n        session_user_id: config.sessionUserId,\n        processing_time_ms: null,\n      })\n      .select(\"id\")\n      .single();\n\n    if (campaignInsert.error) {\n      console.warn(\"Campaign insert warning:\", campaignInsert.error.message);\n    }\n\n    const leadsPayload = enrichedLeads.map((lead) => ({\n      campaign_id: config.campaignId,\n      business_name: lead.businessName,\n      address: lead.address,\n      phone: lead.phone,\n      website: lead.website,\n      email: lead.email,\n      confidence_score: lead.optimizedScore,\n      enrichment_data: {\n        verificationSources: lead.enhancementData.verificationSources,\n        emails: lead.enhancementData.emails,\n        processingMetadata: lead.enhancementData.processingMetadata,\n        dataSources: lead.dataSources,\n      },\n      validation_cost: lead.enhancementData.processingMetadata.validationCost,\n      user_id: config.userId,\n      session_user_id: config.sessionUserId,\n    }));\n\n    let insertedLeads: Array<{\n      id: number;\n      business_name?: string | null;\n      address?: string | null;\n      phone?: string | null;\n      website?: string | null;\n    }> | null = null;\n\n    if (leadsPayload.length > 0) {\n      const leadInsert = await supabase\n        .from(\"leads\")\n        .insert(leadsPayload)\n        .select(\"id,business_name,address,phone,website\");\n      if (leadInsert.error) {\n        console.error(\"Lead insert error:\", leadInsert.error.message);\n      } else {\n        insertedLeads = leadInsert.data ?? [];\n      }\n    }\n\n    if (insertedLeads && insertedLeads.length > 0) {\n      type FingerprintRow = {\n        fingerprint: string;\n        user_id: string | null;\n        session_user_id: string | null;\n        campaign_id: string;\n        lead_id: number;\n        business_name: string;\n      };\n\n      const fingerprintRows = insertedLeads\n        .map((row, index): FingerprintRow | null => {\n          const lead = enrichedLeads[index];\n          const fingerprint = createBusinessFingerprint({\n            business_name: row.business_name ?? lead?.businessName ?? \"\",\n            address: row.address ?? lead?.address ?? \"\",\n            phone: row.phone ?? lead?.phone ?? \"\",\n            website: row.website ?? lead?.website ?? \"\",\n          });\n\n          if (!fingerprint) {\n            return null;\n          }\n\n          return {\n            fingerprint,\n            user_id: config.userId ?? null,\n            session_user_id: config.sessionUserId ?? null,\n            campaign_id: config.campaignId,\n            lead_id: row.id,\n            business_name: row.business_name ?? lead?.businessName ?? \"\",\n          };\n        })\n        .filter((row): row is FingerprintRow => Boolean(row));\n\n      if (fingerprintRows.length > 0) {\n        const { error: fingerprintInsertError } = await supabase\n          .from(\"lead_fingerprints\")\n          .upsert(fingerprintRows, { onConflict: \"fingerprint,user_id\" });\n\n        if (fingerprintInsertError) {\n          console.warn(\n            \"Lead fingerprint insert warning:\",\n            fingerprintInsertError.message\n          );\n        }\n      }\n    }\n\n    const averageConfidence = enrichedLeads.length\n      ? enrichedLeads.reduce((sum, lead) => sum + lead.optimizedScore, 0) /\n        enrichedLeads.length\n      : 0;\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        status: \"completed\",\n        progress: 100,\n        completed_at: new Date().toISOString(),\n        results: enrichedLeads,\n        metrics: {\n          total_found: enrichedLeads.length,\n          qualified_leads: qualifiedLeads.length,\n          total_cost: Number(totalCost.toFixed(3)),\n          validation_cost_total: Number(totalValidationCost.toFixed(3)),\n          enrichment_cost_total: Number(totalEnrichmentCost.toFixed(3)),\n          avg_confidence: Number(averageConfidence.toFixed(1)),\n          tier_key: config.tier.key,\n          tier_name: config.tier.name,\n          tier_price: config.tier.pricePerLead,\n          raw_candidates: totalRawDiscovered,\n          previously_delivered_filtered: historicalFilteredCount,\n          sources_used: sourcesUsed,\n          census_density_score: censusIntelligence?.density_score ?? null,\n        },\n      })\n      .eq(\"id\", jobId);\n\n    console.log(\n      `✅ Background job ${jobId} completed: ${\n        enrichedLeads.length\n      } leads, $${totalCost.toFixed(3)}`\n    );\n  } catch (error) {\n    console.error(`❌ Background job ${jobId} failed:`, error);\n\n    await supabase\n      .from(\"discovery_jobs\")\n      .update({\n        status: \"failed\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        completed_at: new Date().toISOString(),\n      })\n      .eq(\"id\", jobId);\n  }\n}\n\n// --------------------\n// MAIN HANDLER\n// --------------------\n\nserve(async (req) => {\n  const corsResponse = handleCORS(req);\n  if (corsResponse) return corsResponse;\n\n  try {\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n    const supabaseAnonKey = Deno.env.get(\"SUPABASE_ANON_KEY\");\n    const supabaseServiceKey = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\");\n\n    if (!supabaseUrl || !supabaseAnonKey || !supabaseServiceKey) {\n      console.error(\"Missing Supabase environment variables\", {\n        hasUrl: Boolean(supabaseUrl),\n        hasAnonKey: Boolean(supabaseAnonKey),\n        hasServiceKey: Boolean(supabaseServiceKey),\n      });\n\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error:\n            \"Edge function misconfigured: missing Supabase credentials. Verify SUPABASE_URL, SUPABASE_ANON_KEY, and SUPABASE_SERVICE_ROLE_KEY secrets.\",\n        }),\n        {\n          status: 500,\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    const authHeader = req.headers.get(\"Authorization\");\n    const sessionHeader =\n      req.headers.get(\"x-prospect-session\") ??\n      req.headers.get(\"X-Prospect-Session\");\n    const globalHeaders: Record<string, string> = authHeader\n      ? { Authorization: authHeader }\n      : {};\n    const supabaseClient = createClient(supabaseUrl, supabaseAnonKey, {\n      global: { headers: globalHeaders },\n    });\n\n    const accessToken = sessionHeader?.startsWith(\"Bearer \")\n      ? sessionHeader.slice(\"Bearer \".length).trim()\n      : sessionHeader && sessionHeader.length > 0\n      ? sessionHeader\n      : authHeader?.startsWith(\"Bearer \")\n      ? authHeader.slice(\"Bearer \".length).trim()\n      : null;\n\n    const {\n      data: { user },\n      error: authError,\n    } = accessToken\n      ? await supabaseClient.auth.getUser(accessToken)\n      : await supabaseClient.auth.getUser();\n\n    if (authError) {\n      console.error(\"Auth session validation failed\", {\n        message: authError.message,\n        status: authError.status,\n        authHeaderPreview: authHeader\n          ? `${authHeader.slice(0, 12)}...${authHeader.slice(-12)}`\n          : null,\n        sessionHeaderPreview: sessionHeader\n          ? `${sessionHeader.slice(0, 12)}...${sessionHeader.slice(-12)}`\n          : null,\n      });\n    }\n\n    if (!user?.id) {\n      const debugHint = authError\n        ? `Auth error: ${authError.message}`\n        : \"Missing user in session\";\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Authentication required to start discovery campaigns.\",\n          debug: debugHint,\n        }),\n        {\n          status: 401,\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    const requestData: BusinessDiscoveryRequest = await req.json();\n    const {\n      businessType,\n      location,\n      keywords,\n      searchRadius,\n      expandGeography = false,\n      maxResults = 5,\n      budgetLimit,\n      minConfidenceScore = 50,\n      sessionUserId,\n      tierKey,\n      tierName,\n      options = {},\n    } = requestData;\n\n    if (sessionUserId && sessionUserId !== user.id) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Session mismatch detected. Please re-authenticate.\",\n        }),\n        {\n          status: 403,\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        }\n      );\n    }\n\n    const tierSettings = getTierSettings(tierKey, tierName);\n    const enforcedBudget =\n      budgetLimit ?? maxResults * tierSettings.pricePerLead;\n    const keywordList = parseKeywords(keywords);\n\n    const jobRandomSource =\n      typeof crypto !== \"undefined\" && \"randomUUID\" in crypto\n        ? crypto.randomUUID()\n        : `${Date.now().toString(36)}${Math.random()\n            .toString(36)\n            .slice(2, 11)}`;\n    const jobId = `job_${jobRandomSource.replace(/[^A-Za-z0-9]+/g, \"\")}`;\n\n    const buildUniqueCampaignId = (baseName: string) => {\n      const normalizedBase = baseName\n        .replace(/[^A-Za-z0-9_]+/g, \"_\")\n        .replace(/_+/g, \"_\")\n        .replace(/^_+|_+$/g, \"\")\n        .toUpperCase();\n      const cryptoObj =\n        typeof globalThis !== \"undefined\" && \"crypto\" in globalThis\n          ? (globalThis as { crypto?: Crypto }).crypto\n          : undefined;\n      const randomSource =\n        cryptoObj && typeof cryptoObj.randomUUID === \"function\"\n          ? cryptoObj.randomUUID()\n          : `${Math.random().toString(36).slice(2)}${Math.random()\n              .toString(36)\n              .slice(2)}`;\n      const sanitizedRandom = randomSource.replace(/[^A-Za-z0-9]+/g, \"\");\n      const randomSuffix = sanitizedRandom\n        .padEnd(8, \"0\")\n        .slice(0, 8)\n        .toUpperCase();\n      const timestampSuffix = Date.now().toString(36).toUpperCase();\n      const trimmedBase = normalizedBase.slice(0, 40);\n      const safeBase = trimmedBase.length > 0 ? trimmedBase : \"CAMPAIGN\";\n      return `${safeBase}_${timestampSuffix}_${randomSuffix}`;\n    };\n\n    // Generate structured campaign ID using database function\n    let campaignId: string;\n    try {\n      const { data: generatedName, error: nameError } =\n        await supabaseClient.rpc(\"generate_campaign_name\", {\n          business_type: businessType,\n          location: location,\n          user_id: user?.id || null,\n        });\n\n      if (nameError) {\n        console.warn(\n          \"Campaign name generation failed, using fallback:\",\n          nameError\n        );\n        campaignId = buildUniqueCampaignId(\n          `campaign_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`\n        );\n      } else {\n        campaignId = buildUniqueCampaignId(\n          generatedName ||\n            `campaign_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`\n        );\n      }\n    } catch (error) {\n      console.warn(\"Campaign name generation error, using fallback:\", error);\n      campaignId = buildUniqueCampaignId(\n        `campaign_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`\n      );\n    }\n\n    const resolvedOptions = {\n      ...DEFAULT_OPTIONS,\n      ...options,\n    };\n\n    const snapshotPayload = {\n      businessType,\n      location,\n      keywords: keywordList,\n      searchRadius,\n      expandGeography,\n      maxResults,\n      budgetLimit: enforcedBudget,\n      minConfidenceScore,\n      tierKey: tierSettings.key,\n      tierName: tierSettings.name,\n      options: resolvedOptions,\n    };\n    const requestedAt = new Date().toISOString();\n    const requestHash = await createStableHash({\n      userId: user.id,\n      sessionUserId: sessionUserId ?? user.id,\n      snapshotPayload,\n    });\n\n    const requestSnapshot: RequestSnapshot = {\n      requestedAt,\n      requestHash,\n      payload: snapshotPayload,\n    };\n\n    const jobConfig: JobConfig = {\n      campaignId,\n      businessType,\n      location,\n      keywords: keywordList,\n      searchRadius,\n      expandGeography,\n      maxResults,\n      budgetLimit: enforcedBudget,\n      minConfidenceScore,\n      userId: user.id,\n      sessionUserId: user.id,\n      tier: tierSettings,\n      options: resolvedOptions,\n      requestSnapshot,\n    };\n\n    const { error: jobError } = await supabaseClient\n      .from(\"discovery_jobs\")\n      .insert({\n        id: jobId,\n        campaign_id: campaignId,\n        user_id: user.id,\n        session_user_id: user.id,\n        status: \"pending\",\n        config: {\n          ...jobConfig,\n          tier: {\n            key: tierSettings.key,\n            name: tierSettings.name,\n            pricePerLead: tierSettings.pricePerLead,\n          },\n        },\n      });\n\n    if (jobError) {\n      throw new Error(`Failed to create job: ${jobError.message}`);\n    }\n\n    EdgeRuntime.waitUntil(\n      processDiscoveryJob(jobId, jobConfig, supabaseUrl, supabaseServiceKey)\n    );\n\n    const responsePayload = {\n      success: true,\n      message: \"Discovery job created and processing in background\",\n      jobId,\n      campaignId,\n      status: \"processing\",\n      estimatedTime: \"1-2 minutes\",\n      realtimeChannel: `discovery_jobs:id=eq.${jobId}`,\n    };\n\n    return new Response(JSON.stringify(responsePayload), {\n      headers: {\n        ...corsHeaders,\n        \"Content-Type\": \"application/json\",\n        \"Cache-Control\": \"private, max-age=30, must-revalidate\",\n        ETag: `W/\"${jobId}\"`,\n      },\n    });\n  } catch (error) {\n    console.error(\"❌ Error:\", error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n});\n"}}},
{"type":"measure","name":"lsp.did_open","count":114,"duration":14.543},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":110,"duration":0.225},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.code_action","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.$getSupportedCodeFixes"},
{"type":"mark","name":"lsp.document_symbol","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":1,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":1,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",111]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":2,"duration":1.536},
{"type":"mark","name":"tsc.op.op_load","count":297,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"tsc.op.op_load","count":297,"duration":0.055},
{"type":"mark","name":"tsc.op.op_resolve","count":131,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","specifiers":[[false,"@tanstack/react-query"],[false,"react"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../types"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":131,"duration":0.128},
{"type":"mark","name":"tsc.op.op_load","count":298,"args":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":298,"duration":0.056},
{"type":"mark","name":"tsc.op.op_resolve","count":132,"args":{"base":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/ProgressDisplay"],[false,"../contexts/AuthContext"],[false,"../hooks/useJobProgress"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":132,"duration":0.109},
{"type":"mark","name":"tsc.op.op_load","count":299,"args":"file:///workspaces/ProspectPro/src/types/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":299,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":133,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":133,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":134,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":134,"duration":0.058},
{"type":"mark","name":"tsc.op.op_resolve","count":135,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":135,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":136,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":136,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":137,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":137,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":138,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":138,"duration":0.066},
{"type":"mark","name":"tsc.op.op_resolve","count":139,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":139,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":140,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":140,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":141,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":141,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":142,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":142,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":143,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":143,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":144,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":144,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":145,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":145,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":146,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":146,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":147,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":147,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":148,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":148,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":149,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":149,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":150,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":150,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":151,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":151,"duration":0.046},
{"type":"mark","name":"tsc.op.op_resolve","count":152,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":152,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":153,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":153,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":154,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":154,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":155,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":155,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":156,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":156,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":157,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":157,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":158,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":158,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":159,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":159,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":160,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":160,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":161,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":161,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":162,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":162,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":163,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":163,"duration":0.048},
{"type":"mark","name":"tsc.op.op_resolve","count":164,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":164,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":165,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":165,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":166,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":166,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":167,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":167,"duration":9.608},
{"type":"mark","name":"tsc.op.op_resolve","count":168,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":168,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":169,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":169,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":170,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":170,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":171,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":171,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":172,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":172,"duration":0.033},
{"type":"mark","name":"tsc.op.op_load","count":300,"args":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts"},
{"type":"measure","name":"tsc.op.op_load","count":300,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":173,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":173,"duration":0.031},
{"type":"mark","name":"tsc.op.op_load","count":301,"args":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts"},
{"type":"measure","name":"tsc.op.op_load","count":301,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":174,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":174,"duration":0.052},
{"type":"mark","name":"tsc.op.op_resolve","count":175,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":175,"duration":0.059},
{"type":"mark","name":"tsc.op.op_resolve","count":176,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":176,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":177,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":177,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":178,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":178,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":179,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":179,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":180,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":180,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":181,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":181,"duration":7.067},
{"type":"mark","name":"tsc.op.op_resolve","count":182,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":182,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":183,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":183,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":184,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":184,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":185,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":185,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":186,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":186,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":187,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":187,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":188,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":188,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":189,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":189,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":190,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":190,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":191,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":191,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":192,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":192,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":193,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":193,"duration":0.078},
{"type":"mark","name":"tsc.op.op_resolve","count":194,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":194,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":195,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":195,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":196,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":196,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":197,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":197,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":198,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":198,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":199,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":199,"duration":6.043},
{"type":"mark","name":"tsc.op.op_resolve","count":200,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":200,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":201,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":201,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":202,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":202,"duration":0.05},
{"type":"mark","name":"tsc.op.op_resolve","count":203,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":203,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":204,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":204,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":205,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":205,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":206,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":206,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":207,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":207,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":208,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":208,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":209,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":209,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":210,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":210,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":211,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":211,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":212,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":212,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":213,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":213,"duration":0.035},
{"type":"mark","name":"tsc.op.op_load","count":302,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":302,"duration":0.08},
{"type":"mark","name":"tsc.op.op_resolve","count":214,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":214,"duration":0.048},
{"type":"mark","name":"tsc.op.op_resolve","count":215,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":215,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":216,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":216,"duration":0.064},
{"type":"mark","name":"tsc.op.op_resolve","count":217,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":217,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":218,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":218,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":219,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":219,"duration":0.015},
{"type":"mark","name":"tsc.op.op_load","count":303,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":303,"duration":0.083},
{"type":"measure","name":"lsp.diagnostic","count":44,"duration":140.462},
{"type":"mark","name":"tsc.op.op_resolve","count":220,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":220,"duration":0.075},
{"type":"mark","name":"tsc.op.op_load","count":304,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":304,"duration":0.068},
{"type":"mark","name":"tsc.op.op_resolve","count":221,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":221,"duration":0.078},
{"type":"mark","name":"tsc.op.op_load","count":305,"args":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":305,"duration":0.056},
{"type":"mark","name":"tsc.op.op_resolve","count":222,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":222,"duration":0.09},
{"type":"mark","name":"tsc.op.op_resolve","count":223,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":223,"duration":0.037},
{"type":"mark","name":"tsc.op.op_load","count":306,"args":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":306,"duration":0.06},
{"type":"mark","name":"tsc.op.op_resolve","count":224,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":224,"duration":0.079},
{"type":"mark","name":"tsc.op.op_resolve","count":225,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":225,"duration":0.039},
{"type":"mark","name":"tsc.op.op_load","count":307,"args":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":307,"duration":0.123},
{"type":"mark","name":"tsc.op.op_resolve","count":226,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":226,"duration":0.064},
{"type":"mark","name":"tsc.op.op_load","count":308,"args":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":308,"duration":0.06},
{"type":"mark","name":"tsc.op.op_resolve","count":227,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":227,"duration":0.044},
{"type":"mark","name":"tsc.op.op_resolve","count":228,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":228,"duration":0.029},
{"type":"mark","name":"tsc.op.op_load","count":309,"args":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":309,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":229,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":229,"duration":0.063},
{"type":"mark","name":"tsc.op.op_load","count":310,"args":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":310,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":230,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":230,"duration":0.038},
{"type":"mark","name":"tsc.op.op_release","count":1,"args":"file:///workspaces/ProspectPro/.eslintrc.cjs"},
{"type":"measure","name":"tsc.op.op_release","count":1,"duration":0.359},
{"type":"mark","name":"tsc.op.op_release","count":2,"args":"file:///workspaces/ProspectPro/API_KEY_SOLUTION.md"},
{"type":"measure","name":"tsc.op.op_release","count":2,"duration":0.101},
{"type":"mark","name":"tsc.op.op_release","count":3,"args":"file:///workspaces/ProspectPro/CHANGELOG.md"},
{"type":"measure","name":"tsc.op.op_release","count":3,"duration":0.092},
{"type":"mark","name":"tsc.op.op_release","count":4,"args":"file:///workspaces/ProspectPro/DEPLOYMENT_CHECKLIST.md"},
{"type":"measure","name":"tsc.op.op_release","count":4,"duration":0.179},
{"type":"mark","name":"tsc.op.op_release","count":5,"args":"file:///workspaces/ProspectPro/DEPLOYMENT_SUCCESS.md"},
{"type":"measure","name":"tsc.op.op_release","count":5,"duration":0.082},
{"type":"mark","name":"tsc.op.op_release","count":6,"args":"file:///workspaces/ProspectPro/DOCUMENTATION_INDEX.md"},
{"type":"measure","name":"tsc.op.op_release","count":6,"duration":0.115},
{"type":"mark","name":"tsc.op.op_release","count":7,"args":"file:///workspaces/ProspectPro/DOCUMENTATION_UPDATE_SUMMARY.md"},
{"type":"measure","name":"tsc.op.op_release","count":7,"duration":0.093},
{"type":"mark","name":"tsc.op.op_release","count":8,"args":"file:///workspaces/ProspectPro/EDGE_FUNCTION_AUTH_FIX.md"},
{"type":"measure","name":"tsc.op.op_release","count":8,"duration":0.077},
{"type":"mark","name":"tsc.op.op_release","count":9,"args":"file:///workspaces/ProspectPro/EDGE_FUNCTION_AUTH_UPDATE_GUIDE.md"},
{"type":"measure","name":"tsc.op.op_release","count":9,"duration":3.016},
{"type":"mark","name":"tsc.op.op_release","count":10,"args":"file:///workspaces/ProspectPro/EDGE_FUNCTION_JWT_ISSUE.md"},
{"type":"measure","name":"tsc.op.op_release","count":10,"duration":0.084},
{"type":"mark","name":"tsc.op.op_release","count":11,"args":"file:///workspaces/ProspectPro/FINAL_JWT_ANON_KEY_SOLUTION.md"},
{"type":"measure","name":"tsc.op.op_release","count":11,"duration":0.078},
{"type":"mark","name":"tsc.op.op_release","count":12,"args":"file:///workspaces/ProspectPro/INDEX_BACKGROUND_TASKS.md"},
{"type":"measure","name":"tsc.op.op_release","count":12,"duration":0.146},
{"type":"mark","name":"tsc.op.op_release","count":13,"args":"file:///workspaces/ProspectPro/LATEST_DEPLOYMENT.md"},
{"type":"measure","name":"tsc.op.op_release","count":13,"duration":0.101},
{"type":"mark","name":"tsc.op.op_release","count":14,"args":"file:///workspaces/ProspectPro/NEED_ANON_KEY.md"},
{"type":"measure","name":"tsc.op.op_release","count":14,"duration":0.054},
{"type":"mark","name":"tsc.op.op_release","count":15,"args":"file:///workspaces/ProspectPro/PRODUCTION_MCP_SERVER_INITIALIZED.md"},
{"type":"measure","name":"tsc.op.op_release","count":15,"duration":0.065},
{"type":"mark","name":"tsc.op.op_release","count":16,"args":"file:///workspaces/ProspectPro/PRODUCTION_READY_V4.2.md"},
{"type":"measure","name":"tsc.op.op_release","count":16,"duration":0.111},
{"type":"mark","name":"tsc.op.op_release","count":17,"args":"file:///workspaces/ProspectPro/PRODUCTION_READY_V4.3.md"},
{"type":"measure","name":"tsc.op.op_release","count":17,"duration":0.08},
{"type":"mark","name":"tsc.op.op_release","count":18,"args":"file:///workspaces/ProspectPro/PROSPECTPRO_V4.3_RELEASE_NOTES.md"},
{"type":"measure","name":"tsc.op.op_release","count":18,"duration":0.106},
{"type":"mark","name":"tsc.op.op_release","count":19,"args":"file:///workspaces/ProspectPro/QUICKSTART_BACKGROUND_TASKS.md"},
{"type":"measure","name":"tsc.op.op_release","count":19,"duration":0.143},
{"type":"mark","name":"tsc.op.op_release","count":20,"args":"file:///workspaces/ProspectPro/README.md"},
{"type":"measure","name":"tsc.op.op_release","count":20,"duration":0.124},
{"type":"mark","name":"tsc.op.op_release","count":21,"args":"file:///workspaces/ProspectPro/README_BACKGROUND_TASKS.md"},
{"type":"measure","name":"tsc.op.op_release","count":21,"duration":0.163},
{"type":"mark","name":"tsc.op.op_release","count":22,"args":"file:///workspaces/ProspectPro/ROOT_CAUSE_ANALYSIS_COMPLETE.md"},
{"type":"measure","name":"tsc.op.op_release","count":22,"duration":0.121},
{"type":"mark","name":"tsc.op.op_release","count":23,"args":"file:///workspaces/ProspectPro/TECHNICAL_SUMMARY_v4.3.md"},
{"type":"measure","name":"tsc.op.op_release","count":23,"duration":0.095},
{"type":"mark","name":"tsc.op.op_release","count":24,"args":"file:///workspaces/ProspectPro/database/auth-and-payments-schema.sql"},
{"type":"measure","name":"tsc.op.op_release","count":24,"duration":0.127},
{"type":"mark","name":"tsc.op.op_release","count":25,"args":"file:///workspaces/ProspectPro/database/cleanup-queries.sql"},
{"type":"measure","name":"tsc.op.op_release","count":25,"duration":8.112},
{"type":"mark","name":"tsc.op.op_release","count":26,"args":"file:///workspaces/ProspectPro/database/enrichment-cache-schema.sql"},
{"type":"measure","name":"tsc.op.op_release","count":26,"duration":0.121},
{"type":"mark","name":"tsc.op.op_release","count":27,"args":"file:///workspaces/ProspectPro/database/fix-foreign-key-constraint.sql"},
{"type":"measure","name":"tsc.op.op_release","count":27,"duration":0.083},
{"type":"mark","name":"tsc.op.op_release","count":28,"args":"file:///workspaces/ProspectPro/database/job-queue-schema.sql"},
{"type":"measure","name":"tsc.op.op_release","count":28,"duration":0.078},
{"type":"mark","name":"tsc.op.op_release","count":29,"args":"file:///workspaces/ProspectPro/database/security-fixes-consolidated.sql"},
{"type":"measure","name":"tsc.op.op_release","count":29,"duration":0.101},
{"type":"mark","name":"tsc.op.op_release","count":30,"args":"file:///workspaces/ProspectPro/database/security-update-oct-2025.sql"},
{"type":"measure","name":"tsc.op.op_release","count":30,"duration":0.137},
{"type":"mark","name":"tsc.op.op_release","count":31,"args":"file:///workspaces/ProspectPro/docs/CAMPAIGN_DEBUGGING_GUIDE.md"},
{"type":"measure","name":"tsc.op.op_release","count":31,"duration":0.126},
{"type":"mark","name":"tsc.op.op_release","count":32,"args":"file:///workspaces/ProspectPro/docs/DEBUG_COLLECTION_GUIDE.md"},
{"type":"measure","name":"tsc.op.op_release","count":32,"duration":0.137},
{"type":"mark","name":"tsc.op.op_release","count":33,"args":"file:///workspaces/ProspectPro/docs/PRODUCTION_VALIDATION_STRATEGY.md"},
{"type":"measure","name":"tsc.op.op_release","count":33,"duration":0.158},
{"type":"mark","name":"tsc.op.op_release","count":34,"args":"file:///workspaces/ProspectPro/docs/VALIDATION_TOOLKIT.md"},
{"type":"measure","name":"tsc.op.op_release","count":34,"duration":0.106},
{"type":"mark","name":"tsc.op.op_release","count":35,"args":"file:///workspaces/ProspectPro/docs/deployment/ENHANCED_DEPLOYMENT_GUIDE.md"},
{"type":"measure","name":"tsc.op.op_release","count":35,"duration":0.15},
{"type":"mark","name":"tsc.op.op_release","count":36,"args":"file:///workspaces/ProspectPro/docs/frontend/FRONTEND_INTEGRATION_GUIDE.md"},
{"type":"measure","name":"tsc.op.op_release","count":36,"duration":0.125},
{"type":"mark","name":"tsc.op.op_release","count":37,"args":"file:///workspaces/ProspectPro/index.html"},
{"type":"measure","name":"tsc.op.op_release","count":37,"duration":0.049},
{"type":"mark","name":"tsc.op.op_release","count":38,"args":"file:///workspaces/ProspectPro/mcp-config.json"},
{"type":"measure","name":"tsc.op.op_release","count":38,"duration":0.079},
{"type":"mark","name":"tsc.op.op_release","count":39,"args":"file:///workspaces/ProspectPro/mcp-servers/PRODUCTION_MCP_INITIALIZED.md"},
{"type":"measure","name":"tsc.op.op_release","count":39,"duration":7.113},
{"type":"mark","name":"tsc.op.op_release","count":40,"args":"file:///workspaces/ProspectPro/mcp-servers/README.md"},
{"type":"measure","name":"tsc.op.op_release","count":40,"duration":0.171},
{"type":"mark","name":"tsc.op.op_release","count":41,"args":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},
{"type":"measure","name":"tsc.op.op_release","count":41,"duration":27.107},
{"type":"mark","name":"tsc.op.op_release","count":42,"args":"file:///workspaces/ProspectPro/src/App.tsx"},
{"type":"measure","name":"tsc.op.op_release","count":42,"duration":10.677},
{"type":"mark","name":"tsc.op.op_release","count":43,"args":"file:///workspaces/ProspectPro/src/components/ErrorBoundary.tsx"},
{"type":"measure","name":"tsc.op.op_release","count":43,"duration":0.411},
{"type":"mark","name":"tsc.op.op_release","count":44,"args":"file:///workspaces/ProspectPro/src/components/Layout.tsx"},
{"type":"measure","name":"tsc.op.op_release","count":44,"duration":0.688},
{"type":"mark","name":"tsc.op.op_release","count":45,"args":"file:///workspaces/ProspectPro/src/contexts/AuthContext.tsx"},
{"type":"measure","name":"tsc.op.op_release","count":45,"duration":13.764},
{"type":"mark","name":"tsc.op.op_release","count":46,"args":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},
{"type":"measure","name":"tsc.op.op_release","count":46,"duration":0.695},
{"type":"mark","name":"tsc.op.op_release","count":47,"args":"file:///workspaces/ProspectPro/src/hooks/useLeadEnrichment.ts"},
{"type":"measure","name":"tsc.op.op_release","count":47,"duration":11.099},
{"type":"mark","name":"tsc.op.op_release","count":48,"args":"file:///workspaces/ProspectPro/src/lib/supabase.ts"},
{"type":"measure","name":"tsc.op.op_release","count":48,"duration":0.478},
{"type":"mark","name":"tsc.op.op_release","count":49,"args":"file:///workspaces/ProspectPro/src/pages/AccountPage.tsx"},
{"type":"measure","name":"tsc.op.op_release","count":49,"duration":0.989},
{"type":"mark","name":"tsc.op.op_release","count":50,"args":"file:///workspaces/ProspectPro/src/pages/BusinessDiscovery.tsx"},
{"type":"measure","name":"tsc.op.op_release","count":50,"duration":15.849},
{"type":"mark","name":"tsc.op.op_release","count":51,"args":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx"},
{"type":"measure","name":"tsc.op.op_release","count":51,"duration":9.688},
{"type":"mark","name":"tsc.op.op_release","count":52,"args":"file:///workspaces/ProspectPro/src/pages/Dashboard.tsx"},
{"type":"measure","name":"tsc.op.op_release","count":52,"duration":11.73},
{"type":"mark","name":"tsc.op.op_release","count":53,"args":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},
{"type":"measure","name":"tsc.op.op_release","count":53,"duration":11.879},
{"type":"mark","name":"tsc.op.op_release","count":54,"args":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},
{"type":"measure","name":"tsc.op.op_release","count":54,"duration":6.615},
{"type":"mark","name":"tsc.op.op_release","count":55,"args":"file:///workspaces/ProspectPro/src/stores/enhancedCampaignStore.ts"},
{"type":"measure","name":"tsc.op.op_release","count":55,"duration":5.104},
{"type":"mark","name":"tsc.op.op_release","count":56,"args":"file:///workspaces/ProspectPro/src/stores/utils/leadSanitizers.ts"},
{"type":"measure","name":"tsc.op.op_release","count":56,"duration":0.918},
{"type":"mark","name":"tsc.op.op_release","count":57,"args":"file:///workspaces/ProspectPro/src/utils/campaignTransforms.ts"},
{"type":"measure","name":"tsc.op.op_release","count":57,"duration":11.861},
{"type":"mark","name":"tsc.op.op_release","count":58,"args":"file:///workspaces/ProspectPro/src/vite-env.d.ts"},
{"type":"measure","name":"tsc.op.op_release","count":58,"duration":0.329},
{"type":"mark","name":"tsc.op.op_release","count":59,"args":"file:///workspaces/ProspectPro/supabase/migrations/20251008073003_security_hardening_oct_8_2025.sql"},
{"type":"measure","name":"tsc.op.op_release","count":59,"duration":0.059},
{"type":"mark","name":"tsc.op.op_release","count":60,"args":"file:///workspaces/ProspectPro/supabase/migrations/20251008080709_security_fixes_consolidated.sql"},
{"type":"measure","name":"tsc.op.op_release","count":60,"duration":0.099},
{"type":"mark","name":"tsc.op.op_release","count":61,"args":"file:///workspaces/ProspectPro/tsconfig.json"},
{"type":"measure","name":"tsc.op.op_release","count":61,"duration":0.045},
{"type":"mark","name":"tsc.op.op_release","count":62,"args":"file:///workspaces/ProspectPro/vite.config.ts"},
{"type":"measure","name":"tsc.op.op_release","count":62,"duration":0.171},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":101,"duration":0.013},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":1,"duration":696.797},
{"type":"mark","name":"tsc.host.$getSupportedCodeFixes","count":1,"args":"GetSupportedCodeFixes"},
{"type":"measure","name":"tsc.host.$getSupportedCodeFixes","count":1,"duration":0.271},
Unable to send result to client.
{"type":"mark","name":"tsc.host.getNavigationTree","count":1,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getNavigationTree","count":1,"duration":252.717},
{"type":"measure","name":"tsc.request.getNavigationTree","count":1,"duration":951.74},
{"type":"measure","name":"lsp.get_navigation_tree","count":1,"duration":951.785},
{"type":"measure","name":"lsp.document_symbol","count":10,"duration":964.902},
{"type":"mark","name":"lsp.did_change_batched","count":19,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":19,"duration":48.896},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":111,"duration":0.217},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.inlay_hint","count":48,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":749,"character":0},"end":{"line":924,"character":0}}}},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":2,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",112]}},
{"type":"mark","name":"lsp.semantic_tokens_range","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":779,"character":0},"end":{"line":894,"character":0}}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":2,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.semantic_tokens_range","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1931,"character":0},"end":{"line":2047,"character":25}}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.inlay_hint","count":49,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1901,"character":0},"end":{"line":2077,"character":25}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":4,"duration":0.034},
{"type":"mark","name":"tsc.op.op_load","count":311,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":311,"duration":0.092},
{"type":"mark","name":"tsc.op.op_resolve","count":231,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":231,"duration":0.094},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":102,"duration":0.013},
{"type":"mark","name":"lsp.semantic_tokens_full","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":103,"duration":0.008},
{"type":"mark","name":"lsp.inlay_hint","count":50,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1901,"character":0},"end":{"line":2077,"character":25}}}},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":104,"duration":0.01},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":105,"duration":0.008},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":106,"duration":0.007},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":107,"duration":0.007},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":108,"duration":0.007},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":109,"duration":0.015},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":110,"duration":0.009},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":111,"duration":0.012},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":112,"duration":0.014},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":113,"duration":0.007},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":114,"duration":0.015},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":115,"duration":0.009},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":116,"duration":0.015},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":2,"duration":1882.006},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":2,"duration":1883.436},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":6,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":20221,"length":3101},"2020"]}},
{"type":"mark","name":"lsp.code_lens","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":3,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":6,"duration":18.392},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":6,"duration":1848.349},
{"type":"mark","name":"tsc.host.getNavigationTree","count":2,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"lsp.semantic_tokens_range","count":2,"duration":1848.494},
{"type":"measure","name":"tsc.host.getNavigationTree","count":2,"duration":63.6},
{"type":"measure","name":"tsc.request.getNavigationTree","count":2,"duration":1913.343},
{"type":"measure","name":"lsp.get_navigation_tree","count":2,"duration":1913.4},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":7,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":54880,"length":3760},"2020"]}},
{"type":"measure","name":"lsp.document_symbol","count":11,"duration":1915.335},
{"type":"measure","name":"lsp.get_navigation_tree","count":3,"duration":80.232},
{"type":"measure","name":"lsp.code_lens","count":5,"duration":81.435},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":7,"duration":35.484},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":8,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":62085},"2020"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":7,"duration":1951.186},
{"type":"measure","name":"lsp.semantic_tokens_range","count":3,"duration":1951.27},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":8,"duration":223.235},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":8,"duration":1218.24},
{"type":"measure","name":"lsp.semantic_tokens_full","count":5,"duration":1218.774},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":1,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":1,"duration":1.171},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":1,"duration":345.769},
{"type":"measure","name":"lsp.diagnostic","count":45,"duration":2233.003},
{"type":"measure","name":"lsp.did_save","count":15,"duration":2020.278},
{"type":"mark","name":"lsp.inlay_hint","count":51,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1901,"character":0},"end":{"line":2077,"character":25}}}},
{"type":"mark","name":"lsp.document_symbol","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":4,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":4,"duration":0.001},
{"type":"measure","name":"lsp.document_symbol","count":12,"duration":0.954},
{"type":"mark","name":"lsp.code_action","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.$getSupportedCodeFixes"},
{"type":"mark","name":"tsc.host.$getSupportedCodeFixes","count":2,"args":"GetSupportedCodeFixes"},
{"type":"measure","name":"tsc.host.$getSupportedCodeFixes","count":2,"duration":193.664},
{"type":"measure","name":"tsc.request.$getSupportedCodeFixes","count":2,"duration":197.084},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":1,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":1,"duration":26.749},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":1,"duration":26.937},
{"type":"measure","name":"lsp.code_action","count":3,"duration":224.397},
{"type":"mark","name":"lsp.folding_range","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":1,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":1,"duration":47.634},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":1,"duration":48.63},
{"type":"measure","name":"lsp.folding_range","count":5,"duration":48.934},
{"type":"mark","name":"lsp.did_close","count":110,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/2025-10-10-deterministic-dedupe.sql"}}},
{"type":"measure","name":"lsp.did_close","count":110,"duration":0.035},
{"type":"mark","name":"lsp.did_open","count":115,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx","languageId":"typescriptreact","version":1,"text":"// Real-time Job Progress Hook for ProspectPro v4.2\n// Subscribe to Supabase Real-time for live campaign updates\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { supabase } from \"../lib/supabase\";\n\ninterface JobProgress {\n  jobId: string;\n  status: \"pending\" | \"processing\" | \"completed\" | \"failed\";\n  progress: number;\n  currentStage: string;\n  metrics?: {\n    businesses_found?: number;\n    qualified_leads?: number;\n    leads_enriched?: number;\n    total_cost?: number;\n    total_found?: number;\n    avg_confidence?: number;\n  };\n  error?: string;\n  completedAt?: string;\n}\n\ninterface RealtimePayload {\n  new: DiscoveryJobRow;\n}\n\ntype DiscoveryJobRow = {\n  id: string;\n  status: string;\n  progress: number | null;\n  current_stage: string | null;\n  metrics: Record<string, number> | null;\n  error?: string | null;\n  completed_at?: string | null;\n};\n\nconst NORMALIZED_STATUS: Record<string, JobProgress[\"status\"]> = {\n  pending: \"pending\",\n  processing: \"processing\",\n  completed: \"completed\",\n  failed: \"failed\",\n};\n\nfunction normalizeStatus(\n  value: string | null | undefined\n): JobProgress[\"status\"] {\n  if (!value) {\n    return \"processing\";\n  }\n\n  return NORMALIZED_STATUS[value] ?? \"processing\";\n}\n\nexport function useJobProgress(jobId: string | null) {\n  const [progress, setProgress] = useState<JobProgress | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const pollingRef = useRef<number | null>(null);\n\n  const stopPolling = useCallback(() => {\n    if (pollingRef.current !== null) {\n      window.clearInterval(pollingRef.current);\n      pollingRef.current = null;\n    }\n  }, []);\n\n  const updateFromRow = useCallback(\n    (row: DiscoveryJobRow | null) => {\n      if (!row) {\n        return;\n      }\n\n      const next: JobProgress = {\n        jobId: row.id,\n        status: normalizeStatus(row.status),\n        progress: row.progress ?? 0,\n        currentStage: row.current_stage ?? \"processing\",\n        metrics: (row.metrics ?? undefined) as JobProgress[\"metrics\"],\n        error: row.error ?? undefined,\n        completedAt: row.completed_at ?? undefined,\n      };\n\n      setProgress(next);\n\n      if (next.status === \"completed\" || next.status === \"failed\") {\n        stopPolling();\n      }\n    },\n    [stopPolling]\n  );\n\n  const fetchStatus = useCallback(async (): Promise<DiscoveryJobRow | null> => {\n    if (!jobId) {\n      return null;\n    }\n\n    const { data, error } = await supabase\n      .from(\"discovery_jobs\")\n      .select(\"*\")\n      .eq(\"id\", jobId)\n      .single();\n\n    if (error) {\n      console.error(\"Error fetching job status:\", error);\n      return null;\n    }\n\n    updateFromRow(data);\n    return data;\n  }, [jobId, updateFromRow]);\n\n  const startPolling = useCallback(() => {\n    if (pollingRef.current !== null || !jobId) {\n      return;\n    }\n\n    pollingRef.current = window.setInterval(() => {\n      void fetchStatus();\n    }, 4000);\n  }, [fetchStatus, jobId]);\n\n  useEffect(() => {\n    if (!jobId) {\n      setIsLoading(false);\n      stopPolling();\n      setProgress(null);\n      return;\n    }\n\n    let isMounted = true;\n\n    const bootstrap = async () => {\n      const row = await fetchStatus();\n      if (!isMounted) {\n        return;\n      }\n\n      setIsLoading(false);\n\n      if (!row) {\n        return;\n      }\n\n      if (row.status !== \"completed\" && row.status !== \"failed\") {\n        startPolling();\n      }\n    };\n\n    void bootstrap();\n\n    const channel = supabase\n      .channel(`discovery_jobs:${jobId}`)\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"UPDATE\",\n          schema: \"public\",\n          table: \"discovery_jobs\",\n          filter: `id=eq.${jobId}`,\n        },\n        (payload: RealtimePayload) => {\n          console.log(\"Real-time update:\", payload.new);\n          updateFromRow(payload.new);\n        }\n      )\n      .subscribe((status) => {\n        if (\n          status === \"TIMED_OUT\" ||\n          status === \"CHANNEL_ERROR\" ||\n          status === \"CLOSED\"\n        ) {\n          console.warn(\n            \"Realtime subscription failed. Falling back to polling.\",\n            {\n              status,\n              jobId,\n            }\n          );\n          startPolling();\n        }\n      });\n\n    return () => {\n      isMounted = false;\n      supabase.removeChannel(channel);\n      stopPolling();\n    };\n  }, [fetchStatus, jobId, startPolling, stopPolling, updateFromRow]);\n\n  return { progress, isLoading };\n}\n\nexport const STAGE_LABELS: Record<string, string> = {\n  initializing: \"Initializing campaign...\",\n  discovering_businesses: \"Discovering businesses...\",\n  scoring_businesses: \"Scoring and qualifying leads...\",\n  enriching_contacts: \"Enriching contact information...\",\n  storing_results: \"Storing results...\",\n};\n\nexport function JobProgressDisplay({ jobId }: { jobId: string }) {\n  const { progress, isLoading } = useJobProgress(jobId);\n\n  if (isLoading) {\n    return <div>Loading job status...</div>;\n  }\n\n  if (!progress) {\n    return <div>Job not found</div>;\n  }\n\n  if (progress.status === \"failed\") {\n    return (\n      <div className=\"error\">\n        <h3>Campaign Failed</h3>\n        <p>{progress.error || \"Unknown error occurred\"}</p>\n      </div>\n    );\n  }\n\n  if (progress.status === \"completed\") {\n    return (\n      <div className=\"success\">\n        <h3>Campaign Completed! 🎉</h3>\n        <p>Found {progress.metrics?.total_found || 0} qualified leads</p>\n        <p>Total cost: ${progress.metrics?.total_cost?.toFixed(2) || \"0.00\"}</p>\n        <p>\n          Average confidence:{\" \"}\n          {progress.metrics?.avg_confidence?.toFixed(0) || 0}%\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"progress\">\n      <h3>Campaign In Progress</h3>\n      <div className=\"progress-bar\">\n        <div\n          className=\"progress-fill\"\n          style={{ width: `${progress.progress}%` }}\n        />\n      </div>\n      <p>{progress.progress}% complete</p>\n      <p className=\"stage\">\n        {STAGE_LABELS[progress.currentStage] || progress.currentStage}\n      </p>\n\n      {progress.metrics && (\n        <div className=\"metrics\">\n          {progress.metrics.businesses_found && (\n            <p>Businesses found: {progress.metrics.businesses_found}</p>\n          )}\n          {progress.metrics.qualified_leads && (\n            <p>Qualified leads: {progress.metrics.qualified_leads}</p>\n          )}\n          {progress.metrics.leads_enriched && (\n            <p>Enriched: {progress.metrics.leads_enriched}</p>\n          )}\n          {progress.metrics.total_cost && (\n            <p>Cost: ${progress.metrics.total_cost.toFixed(2)}</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":115,"duration":5.95},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":112,"duration":0.185},
{"type":"mark","name":"lsp.did_close","count":111,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"}}},
{"type":"measure","name":"lsp.did_close","count":111,"duration":0.753},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":113,"duration":0.198},
{"type":"mark","name":"lsp.did_close","count":112,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx"}}},
{"type":"measure","name":"lsp.did_close","count":112,"duration":0.666},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":114,"duration":0.144},
{"type":"mark","name":"lsp.goto_definition","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},"position":{"line":7,"character":2}}},
{"type":"mark","name":"lsp.did_open","count":116,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","languageId":"typescript","version":1,"text":"import { useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport {\n  EDGE_FUNCTIONS_URL,\n  ENRICHMENT_TIERS,\n  SUPABASE_ANON_TOKEN,\n  ensureSession,\n  getSessionToken,\n} from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport type { BusinessDiscoveryResponse, CampaignConfig } from \"../types\";\n\nexport const useBusinessDiscovery = (\n  onJobCreated?: (jobData: {\n    jobId: string;\n    campaignId: string;\n    status: string;\n    estimatedTime?: number;\n  }) => void\n) => {\n  const { user } = useAuth();\n  const {\n    setLoading,\n    setError,\n    clearLeads,\n    setCurrentCampaign,\n    setCurrentCampaignId,\n  } = useCampaignStore();\n  const [progress, setProgress] = useState(0);\n  const [currentStage, setCurrentStage] = useState<string>(\"\");\n  const [cacheStats] = useState<any>(null);\n\n  const discoveryMutation = useMutation({\n    mutationFn: async (\n      config: CampaignConfig & { selectedTier?: keyof typeof ENRICHMENT_TIERS }\n    ): Promise<BusinessDiscoveryResponse> => {\n      setLoading(true);\n      setError(null);\n      setProgress(10);\n      setCurrentStage(\"Initializing user-aware discovery...\");\n\n      // Reset any existing campaign context before starting a new discovery\n      clearLeads();\n      setCurrentCampaign(null);\n      setCurrentCampaignId(null);\n\n      try {\n        console.log(\"🚀 Starting user-aware business discovery:\", config);\n\n        // Ensure we have a valid session before calling Edge Function\n        const hasSession = await ensureSession();\n        if (!hasSession || !user?.id) {\n          throw new Error(\"Please sign in to run a discovery campaign.\");\n        }\n\n        // Determine enrichment tier\n        const tier = config.selectedTier || \"PROFESSIONAL\";\n        const tierConfig = ENRICHMENT_TIERS[tier];\n        const keywordList = config.keywords\n          ? config.keywords\n              .split(\",\")\n              .map((value) => value.trim())\n              .filter(Boolean)\n          : undefined;\n\n        const discoveryOptions = {\n          tradeAssociation: config.trade_association ?? false,\n          professionalLicense: config.professional_license ?? false,\n          chamberVerification: config.chamber_verification ?? false,\n          apolloDiscovery: tier === \"ENTERPRISE\",\n        };\n\n        setCurrentStage(\n          `Using ${tierConfig.name} tier ($${tierConfig.price}/lead)`\n        );\n        setProgress(20);\n\n        const accessToken = await getSessionToken();\n\n        const billingContext = {\n          tier,\n          tierName: tierConfig.name,\n          unitPrice: tierConfig.price,\n          estimatedBudget: config.max_results * tierConfig.price,\n          currency: \"USD\",\n        };\n\n        // Call background task business discovery with authentication\n        const requestBody = {\n          businessType: config.business_type || config.search_terms,\n          location: config.location,\n          keywords: keywordList,\n          searchRadius: config.search_radius,\n          expandGeography: config.expand_geography,\n          maxResults: config.max_results,\n          budgetLimit: config.max_results * tierConfig.price,\n          minConfidenceScore: config.min_confidence_score || 50,\n          tierKey: tier,\n          tierName: tierConfig.name,\n          tierPrice: tierConfig.price,\n          options: discoveryOptions,\n          sessionUserId: user.id,\n          userId: user.id,\n          billingContext,\n        };\n\n        if (!accessToken) {\n          throw new Error(\n            \"Unable to read session token. Please sign in again.\"\n          );\n        }\n\n        const headers: Record<string, string> = {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${accessToken}`,\n          apikey: SUPABASE_ANON_TOKEN,\n          \"X-Prospect-Session\": accessToken,\n        };\n\n        const response = await fetch(\n          `${EDGE_FUNCTIONS_URL}/business-discovery-background`,\n          {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody),\n          }\n        );\n\n        const rawResponse = await response.json().catch(() => ({}));\n\n        if (!response.ok) {\n          console.error(\"❌ Background discovery error:\", rawResponse);\n          const message =\n            typeof rawResponse?.error === \"string\"\n              ? rawResponse.error\n              : typeof rawResponse?.message === \"string\"\n              ? rawResponse.message\n              : `Edge function request failed: ${response.status}`;\n          throw new Error(message);\n        }\n\n        if (!rawResponse?.success) {\n          const fallbackMessage =\n            typeof rawResponse?.error === \"string\"\n              ? rawResponse.error\n              : \"No data returned from background discovery\";\n          throw new Error(fallbackMessage);\n        }\n\n        console.log(\"✅ Background discovery response:\", rawResponse);\n\n        // For background tasks, we get jobId and campaignId immediately\n        // The actual processing happens in the background\n        const transformedData: BusinessDiscoveryResponse = {\n          campaign_id: rawResponse.campaignId,\n          job_id: rawResponse.jobId, // New: job ID for tracking progress\n          status: rawResponse.status, // New: processing status\n          estimated_time: rawResponse.estimatedTime, // New: estimated completion time\n          realtime_channel: rawResponse.realtimeChannel, // New: for real-time updates\n          total_found: 0, // Will be updated via real-time\n          qualified_count: 0, // Will be updated via real-time\n          total_cost: 0, // Will be updated via real-time\n          processing_time: \"< 100ms\", // Immediate response\n          tier_used: tierConfig.name,\n          cache_performance: undefined,\n          vault_status: \"secured\",\n          census_intelligence: undefined,\n          businesses: [], // Will be populated via real-time updates\n        };\n\n        setProgress(100);\n        setCurrentStage(\"Complete! 🎉\");\n        return transformedData;\n      } catch (error) {\n        console.error(\"❌ User-aware discovery error:\", error);\n        setCurrentStage(\"Failed ❌\");\n        throw error;\n      } finally {\n        setLoading(false);\n      }\n    },\n    onSuccess: (data: BusinessDiscoveryResponse) => {\n      console.log(\"✅ Background job created:\", data);\n\n      // For background jobs, we don't create the full campaign record immediately\n      // The progress page will handle real-time updates and final campaign creation\n\n      setProgress(100);\n      setCurrentStage(\"Background processing started! 🚀\");\n\n      // Navigate to progress page with job ID\n      if (data.job_id && data.campaign_id) {\n        const jobData = {\n          jobId: data.job_id,\n          campaignId: data.campaign_id,\n          status: data.status || \"pending\",\n          estimatedTime: data.estimated_time,\n        };\n\n        console.log(\"Job started:\", jobData);\n\n        // Call the navigation callback if provided\n        if (onJobCreated) {\n          onJobCreated(jobData);\n        }\n\n        setCurrentCampaignId(data.campaign_id);\n      }\n    },\n    onError: (error: any) => {\n      setError(\n        error instanceof Error ? error.message : \"User-aware discovery failed\"\n      );\n      setProgress(0);\n      setCurrentStage(\"Failed ❌\");\n    },\n  });\n\n  return {\n    startDiscovery: discoveryMutation.mutate,\n    isDiscovering: discoveryMutation.isPending,\n    progress,\n    currentStage,\n    cacheStats,\n    error: discoveryMutation.error,\n    data: discoveryMutation.data,\n  };\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":116,"duration":1.949},
{"type":"mark","name":"lsp.goto_definition","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},"position":{"line":16,"character":4}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":115,"duration":0.197},
{"type":"mark","name":"lsp.goto_definition","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":2065,"character":10}}},
{"type":"mark","name":"tsc.request.getDefinitionAndBoundSpan"},
{"type":"mark","name":"tsc.host.getDefinitionAndBoundSpan","count":1,"args":{"GetDefinitionAndBoundSpan":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",59167]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":3,"duration":0.32},
{"type":"mark","name":"tsc.op.op_load","count":312,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"tsc.op.op_load","count":312,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":232,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","specifiers":[[false,"@tanstack/react-query"],[false,"react"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../types"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":232,"duration":0.075},
{"type":"mark","name":"tsc.op.op_load","count":313,"args":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":313,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":233,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx","specifiers":[[false,"react"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":233,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":234,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":234,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":235,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":235,"duration":0.072},
{"type":"mark","name":"tsc.op.op_resolve","count":236,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":236,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":237,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":237,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":238,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":238,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":239,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":239,"duration":0.057},
{"type":"mark","name":"tsc.op.op_resolve","count":240,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":240,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":241,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":241,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":242,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":242,"duration":0.048},
{"type":"mark","name":"tsc.op.op_resolve","count":243,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":243,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":244,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":244,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":245,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":245,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":246,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":246,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":247,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":247,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":248,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":248,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":249,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":249,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":250,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":250,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":251,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":251,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":252,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":252,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":253,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":253,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":254,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":254,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":255,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":255,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":256,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":256,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":257,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":257,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":258,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":258,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":259,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":259,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":260,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":260,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":261,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":261,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":262,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":262,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":263,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":263,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":264,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":264,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":265,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":265,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":266,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":266,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":267,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":267,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":268,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":268,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":269,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":269,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":270,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":270,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":271,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":271,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":272,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":272,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":273,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":273,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":274,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":274,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":275,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":275,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":276,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":276,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":277,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":277,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":278,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":278,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":279,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":279,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":280,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":280,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":281,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":281,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":282,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":282,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":283,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":283,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":284,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":284,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":285,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":285,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":286,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":286,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":287,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":287,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":288,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":288,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":289,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":289,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":290,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":290,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":291,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":291,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":292,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":292,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":293,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":293,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":294,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":294,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":295,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":295,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":296,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":296,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":297,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":297,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":298,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":298,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":299,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":299,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":300,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":300,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":301,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":301,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":302,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":302,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":303,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":303,"duration":0.048},
{"type":"mark","name":"tsc.op.op_resolve","count":304,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":304,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":305,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":305,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":306,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":306,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":307,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":307,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":308,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":308,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":309,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":309,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":310,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":310,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":311,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":311,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":312,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":312,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":313,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":313,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":314,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":314,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":315,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":315,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":316,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":316,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":317,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":317,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":318,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":318,"duration":0.007},
{"type":"mark","name":"tsc.op.op_resolve","count":319,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":319,"duration":0.007},
{"type":"mark","name":"tsc.op.op_resolve","count":320,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":320,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":321,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":321,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":322,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":322,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":323,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":323,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":324,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":324,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":325,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":325,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":326,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":326,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":327,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":327,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":328,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":328,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":329,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":329,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":330,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":330,"duration":0.049},
{"type":"mark","name":"tsc.op.op_resolve","count":331,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":331,"duration":0.034},
{"type":"mark","name":"tsc.op.op_release","count":63,"args":"file:///workspaces/ProspectPro/database/2025-10-10-deterministic-dedupe.sql"},
{"type":"measure","name":"tsc.op.op_release","count":63,"duration":0.075},
{"type":"mark","name":"tsc.op.op_release","count":64,"args":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx"},
{"type":"measure","name":"tsc.op.op_release","count":64,"duration":1.288},
{"type":"measure","name":"tsc.host.getDefinitionAndBoundSpan","count":1,"duration":46.936},
{"type":"measure","name":"tsc.request.getDefinitionAndBoundSpan","count":1,"duration":47.083},
{"type":"measure","name":"lsp.goto_definition","count":20,"duration":47.236},
{"type":"mark","name":"lsp.goto_definition","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":647,"character":13}}},
{"type":"mark","name":"tsc.request.getDefinitionAndBoundSpan"},
{"type":"mark","name":"tsc.host.getDefinitionAndBoundSpan","count":2,"args":{"GetDefinitionAndBoundSpan":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",16362]}},
{"type":"measure","name":"tsc.host.getDefinitionAndBoundSpan","count":2,"duration":94.447},
{"type":"measure","name":"tsc.request.getDefinitionAndBoundSpan","count":2,"duration":95.504},
{"type":"measure","name":"lsp.goto_definition","count":21,"duration":95.673},
{"type":"mark","name":"lsp.did_close","count":113,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/types/index.ts"}}},
{"type":"measure","name":"lsp.did_close","count":113,"duration":1.147},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":116,"duration":0.17},
{"type":"mark","name":"lsp.did_close","count":114,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"}}},
{"type":"measure","name":"lsp.did_close","count":114,"duration":0.809},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":117,"duration":0.186},
{"type":"mark","name":"lsp.inlay_hint","count":52,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1901,"character":0},"end":{"line":2077,"character":25}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":3,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",118]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":4,"duration":0.515},
{"type":"mark","name":"tsc.op.op_resolve","count":332,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","specifiers":[[false,"@tanstack/react-query"],[false,"react"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../types"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":332,"duration":0.107},
{"type":"mark","name":"tsc.op.op_resolve","count":333,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":333,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":334,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":334,"duration":0.079},
{"type":"mark","name":"tsc.op.op_resolve","count":335,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":335,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":336,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":336,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":337,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":337,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":338,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":338,"duration":0.05},
{"type":"mark","name":"tsc.op.op_resolve","count":339,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":339,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":340,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":340,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":341,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":341,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":342,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":342,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":343,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":343,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":344,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":344,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":345,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":345,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":346,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":346,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":347,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":347,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":348,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":348,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":349,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":349,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":350,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":350,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":351,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":351,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":352,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":352,"duration":3.072},
{"type":"mark","name":"tsc.op.op_resolve","count":353,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":353,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":354,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":354,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":355,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":355,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":356,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":356,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":357,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":357,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":358,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":358,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":359,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":359,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":360,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":360,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":361,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":361,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":362,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":362,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":363,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":363,"duration":0.049},
{"type":"mark","name":"tsc.op.op_resolve","count":364,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":364,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":365,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":365,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":366,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":366,"duration":0.055},
{"type":"mark","name":"tsc.op.op_resolve","count":367,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":367,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":368,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":368,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":369,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":369,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":370,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":370,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":371,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":371,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":372,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":372,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":373,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":373,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":374,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":374,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":375,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":375,"duration":0.053},
{"type":"mark","name":"tsc.op.op_resolve","count":376,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":376,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":377,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":377,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":378,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":378,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":379,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":379,"duration":0.049},
{"type":"mark","name":"tsc.op.op_resolve","count":380,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":380,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":381,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":381,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":382,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":382,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":383,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":383,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":384,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":384,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":385,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":385,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":386,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":386,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":387,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":387,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":388,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":388,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":389,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":389,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":390,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":390,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":391,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":391,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":392,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":392,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":393,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":393,"duration":0.062},
{"type":"mark","name":"tsc.op.op_resolve","count":394,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":394,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":395,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":395,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":396,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":396,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":397,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":397,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":398,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":398,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":399,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":399,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":400,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":400,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":401,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":401,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":402,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":402,"duration":0.048},
{"type":"mark","name":"tsc.op.op_resolve","count":403,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":403,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":404,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":404,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":405,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":405,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":406,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":406,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":407,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":407,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":408,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":408,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":409,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":409,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":410,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":410,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":411,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":411,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":412,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":412,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":413,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":413,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":414,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":414,"duration":0.044},
{"type":"mark","name":"tsc.op.op_resolve","count":415,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":415,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":416,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":416,"duration":0.052},
{"type":"mark","name":"tsc.op.op_resolve","count":417,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":417,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":418,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":418,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":419,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":419,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":420,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":420,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":421,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":421,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":422,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":422,"duration":0.061},
{"type":"mark","name":"tsc.op.op_resolve","count":423,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":423,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":424,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":424,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":425,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":425,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":426,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":426,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":427,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":427,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":428,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":428,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":429,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":429,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":430,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":430,"duration":0.025},
{"type":"mark","name":"tsc.op.op_release","count":65,"args":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},
{"type":"measure","name":"tsc.op.op_release","count":65,"duration":1.886},
{"type":"mark","name":"tsc.op.op_release","count":66,"args":"file:///workspaces/ProspectPro/src/types/index.ts"},
{"type":"measure","name":"tsc.op.op_release","count":66,"duration":0.796},
{"type":"mark","name":"lsp.inlay_hint","count":53,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1901,"character":0},"end":{"line":2077,"character":25}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":3,"duration":505.331},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":3,"duration":505.494},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":2,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":2,"duration":86.865},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":2,"duration":86.993},
{"type":"measure","name":"lsp.did_save","count":16,"duration":592.789},
{"type":"mark","name":"lsp.did_close","count":115,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"}}},
{"type":"measure","name":"lsp.did_close","count":115,"duration":1.578},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":118,"duration":0.182},
{"type":"mark","name":"lsp.document_highlight","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"tsc.request.getDocumentHighlights"},
{"type":"mark","name":"tsc.host.getDocumentHighlights","count":1,"args":{"GetDocumentHighlights":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",0,["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":5,"duration":0.294},
{"type":"mark","name":"tsc.op.op_resolve","count":431,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":431,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":432,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":432,"duration":0.068},
{"type":"mark","name":"tsc.op.op_resolve","count":433,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":433,"duration":0.066},
{"type":"mark","name":"tsc.op.op_resolve","count":434,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":434,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":435,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":435,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":436,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":436,"duration":0.057},
{"type":"mark","name":"tsc.op.op_resolve","count":437,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":437,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":438,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":438,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":439,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":439,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":440,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":440,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":441,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":441,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":442,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":442,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":443,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":443,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":444,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":444,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":445,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":445,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":446,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":446,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":447,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":447,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":448,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":448,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":449,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":449,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":450,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":450,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":451,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":451,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":452,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":452,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":453,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":453,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":454,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":454,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":455,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":455,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":456,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":456,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":457,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":457,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":458,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":458,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":459,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":459,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":460,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":460,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":461,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":461,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":462,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":462,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":463,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":463,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":464,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":464,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":465,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":465,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":466,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":466,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":467,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":467,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":468,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":468,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":469,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":469,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":470,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":470,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":471,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":471,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":472,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":472,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":473,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":473,"duration":0.052},
{"type":"mark","name":"tsc.op.op_resolve","count":474,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":474,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":475,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":475,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":476,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":476,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":477,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":477,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":478,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":478,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":479,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":479,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":480,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":480,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":481,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":481,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":482,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":482,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":483,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":483,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":484,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":484,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":485,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":485,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":486,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":486,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":487,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":487,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":488,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":488,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":489,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":489,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":490,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":490,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":491,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":491,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":492,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":492,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":493,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":493,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":494,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":494,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":495,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":495,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":496,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":496,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":497,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":497,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":498,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":498,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":499,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":499,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":500,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":500,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":501,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":501,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":502,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":502,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":503,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":503,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":504,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":504,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":505,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":505,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":506,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":506,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":507,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":507,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":508,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":508,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":509,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":509,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":510,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":510,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":511,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":511,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":512,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":512,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":513,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":513,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":514,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":514,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":515,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":515,"duration":0.007},
{"type":"mark","name":"tsc.op.op_resolve","count":516,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":516,"duration":0.007},
{"type":"mark","name":"tsc.op.op_resolve","count":517,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":517,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":518,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":518,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":519,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":519,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":520,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":520,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":521,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":521,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":522,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":522,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":523,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":523,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":524,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":524,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":525,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":525,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":526,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":526,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":527,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":527,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":528,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":528,"duration":0.016},
{"type":"mark","name":"tsc.op.op_release","count":67,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"tsc.op.op_release","count":67,"duration":0.745},
{"type":"measure","name":"tsc.host.getDocumentHighlights","count":1,"duration":19.846},
{"type":"measure","name":"tsc.request.getDocumentHighlights","count":1,"duration":19.972},
{"type":"measure","name":"lsp.document_highlight","count":1,"duration":20.071},
{"type":"mark","name":"lsp.inlay_hint","count":54,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1891,"character":0},"end":{"line":2097,"character":28}}}},
{"type":"mark","name":"lsp.code_lens","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":5,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":5,"duration":0.001},
{"type":"measure","name":"lsp.code_lens","count":6,"duration":0.513},
{"type":"mark","name":"lsp.did_change_batched","count":20,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":20,"duration":10.112},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":4,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",120]}},
{"type":"measure","name":"lsp.testing_update","count":119,"duration":0.177},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":5,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":314,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":314,"duration":0.085},
{"type":"mark","name":"tsc.op.op_resolve","count":529,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":529,"duration":0.076},
{"type":"mark","name":"lsp.folding_range","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.inlay_hint","count":55,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1891,"character":0},"end":{"line":2051,"character":0}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.code_lens","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":6,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.document_symbol","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":7,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.inlay_hint","count":56,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1891,"character":0},"end":{"line":2051,"character":0}}}},
{"type":"mark","name":"lsp.document_symbol","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":8,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":4,"duration":1010.419},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":4,"duration":1012.835},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":2,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"mark","name":"lsp.inlay_hint","count":57,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1891,"character":0},"end":{"line":2051,"character":0}}}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":2,"duration":68.539},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":2,"duration":903.042},
{"type":"measure","name":"lsp.folding_range","count":6,"duration":903.316},
{"type":"mark","name":"tsc.host.getNavigationTree","count":3,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getNavigationTree","count":3,"duration":9.843},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":3,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":3,"duration":0.151},
{"type":"measure","name":"tsc.request.getNavigationTree","count":3,"duration":272.719},
{"type":"measure","name":"lsp.get_navigation_tree","count":6,"duration":272.809},
{"type":"measure","name":"lsp.code_lens","count":7,"duration":273.258},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":3,"duration":84.654},
{"type":"measure","name":"lsp.diagnostic","count":46,"duration":1097.668},
{"type":"measure","name":"lsp.get_navigation_tree","count":7,"duration":274.327},
{"type":"measure","name":"lsp.document_symbol","count":13,"duration":275.164},
{"type":"measure","name":"lsp.get_navigation_tree","count":8,"duration":242.786},
{"type":"measure","name":"lsp.document_symbol","count":14,"duration":243.321},
{"type":"measure","name":"lsp.did_save","count":17,"duration":609.18},
{"type":"mark","name":"lsp.inlay_hint","count":58,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1891,"character":0},"end":{"line":2051,"character":0}}}},
{"type":"mark","name":"lsp.code_action","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":2,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"mark","name":"lsp.semantic_tokens_full","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":2,"duration":89.881},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":9,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":57962},"2020"]}},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":2,"duration":90.186},
{"type":"measure","name":"lsp.code_action","count":4,"duration":90.483},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":9,"duration":109.429},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":9,"duration":133.114},
{"type":"measure","name":"lsp.semantic_tokens_full","count":6,"duration":133.819},
{"type":"mark","name":"lsp.inlay_hint","count":59,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1901,"character":0},"end":{"line":2043,"character":5}}}},
{"type":"mark","name":"lsp.did_open","count":117,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/components/ProgressDisplay.tsx","languageId":"typescriptreact","version":1,"text":"import React from \"react\";\n\ninterface ProgressDisplayProps {\n  isDiscovering: boolean;\n  progress: number;\n  currentStage?: string;\n  cacheStats?: {\n    cache_hits: number;\n    cache_misses: number;\n    cache_hit_ratio: number;\n    cost_savings: number;\n  } | null;\n}\n\nexport const ProgressDisplay: React.FC<ProgressDisplayProps> = ({\n  isDiscovering,\n  progress,\n  currentStage,\n  cacheStats,\n}) => {\n  if (!isDiscovering && !cacheStats) return null;\n\n  return (\n    <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\">\n      {isDiscovering && (\n        <>\n          <div className=\"flex items-center mb-4\">\n            <div className=\"flex-shrink-0\">\n              <svg\n                className=\"animate-spin h-5 w-5 text-blue-600 dark:text-blue-400\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n              >\n                <circle\n                  className=\"opacity-25\"\n                  cx=\"12\"\n                  cy=\"12\"\n                  r=\"10\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"4\"\n                ></circle>\n                <path\n                  className=\"opacity-75\"\n                  fill=\"currentColor\"\n                  d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                ></path>\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n                Progressive Enrichment in Progress\n              </h3>\n              <p className=\"text-sm text-blue-600 dark:text-blue-300\">\n                {currentStage || `${progress}% complete`}\n              </p>\n            </div>\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"w-full bg-blue-200 dark:bg-blue-800 rounded-full h-2\">\n            <div\n              className=\"bg-blue-600 dark:bg-blue-400 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${progress}%` }}\n            ></div>\n          </div>\n        </>\n      )}\n\n      {/* Cache Performance Display */}\n      {cacheStats && (\n        <div className=\"mt-4\">\n          <h4 className=\"text-sm font-medium text-blue-800 dark:text-blue-200 mb-2\">\n            🚀 Cache Performance (90-Day Intelligent Caching)\n          </h4>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            <div className=\"bg-white dark:bg-gray-800 p-2 rounded border border-gray-200 dark:border-gray-600\">\n              <div className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n                {cacheStats.cache_hit_ratio.toFixed(1)}%\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">Hit Ratio</div>\n            </div>\n            <div className=\"bg-white dark:bg-gray-800 p-2 rounded border border-gray-200 dark:border-gray-600\">\n              <div className=\"text-lg font-bold text-blue-600 dark:text-blue-400\">\n                {cacheStats.cache_hits}\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">Cache Hits</div>\n            </div>\n            <div className=\"bg-white dark:bg-gray-800 p-2 rounded border border-gray-200 dark:border-gray-600\">\n              <div className=\"text-lg font-bold text-yellow-600 dark:text-yellow-400\">\n                {cacheStats.cache_misses}\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">Cache Misses</div>\n            </div>\n            <div className=\"bg-white dark:bg-gray-800 p-2 rounded border border-gray-200 dark:border-gray-600\">\n              <div className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n                ${cacheStats.cost_savings.toFixed(2)}\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">Saved</div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":120,"duration":0.3},
{"type":"measure","name":"lsp.did_open","count":117,"duration":3.857},
{"type":"mark","name":"lsp.inlay_hint","count":60,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1901,"character":0},"end":{"line":2043,"character":5}}}},
{"type":"mark","name":"lsp.did_change_batched","count":21,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":21,"duration":103.095},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.inlay_hint","count":61,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1900,"character":0},"end":{"line":2055,"character":5}}}},
{"type":"measure","name":"lsp.testing_update","count":121,"duration":0.205},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":5,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",122]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":6,"duration":0.431},
{"type":"mark","name":"tsc.op.op_load","count":315,"args":"file:///workspaces/ProspectPro/src/components/ProgressDisplay.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":315,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":530,"args":{"base":"file:///workspaces/ProspectPro/src/components/ProgressDisplay.tsx","specifiers":[[false,"react"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":530,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":531,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":531,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":532,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":532,"duration":0.06},
{"type":"mark","name":"tsc.op.op_resolve","count":533,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":533,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":534,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":534,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":535,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":535,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":536,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":536,"duration":0.053},
{"type":"mark","name":"tsc.op.op_resolve","count":537,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":537,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":538,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":538,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":539,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":539,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":540,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":540,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":541,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":541,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":542,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":542,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":543,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":543,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":544,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":544,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":545,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":545,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":546,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":546,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":547,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":547,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":548,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":548,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":549,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":549,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":550,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":550,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":551,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":551,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":552,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":552,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":553,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":553,"duration":0.052},
{"type":"mark","name":"tsc.op.op_resolve","count":554,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":554,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":555,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":555,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":556,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":556,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":557,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":557,"duration":0.046},
{"type":"mark","name":"tsc.op.op_resolve","count":558,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":558,"duration":0.054},
{"type":"mark","name":"tsc.op.op_resolve","count":559,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":559,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":560,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":560,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":561,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":561,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":562,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":562,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":563,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":563,"duration":0.059},
{"type":"mark","name":"tsc.op.op_resolve","count":564,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":564,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":565,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":565,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":566,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":566,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":567,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":567,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":568,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":568,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":569,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":569,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":570,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":570,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":571,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":571,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":572,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":572,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":573,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":573,"duration":0.054},
{"type":"mark","name":"tsc.op.op_resolve","count":574,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":574,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":575,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":575,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":576,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":576,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":577,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":577,"duration":0.071},
{"type":"mark","name":"tsc.op.op_resolve","count":578,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":578,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":579,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":579,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":580,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":580,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":581,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":581,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":582,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":582,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":583,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":583,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":584,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":584,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":585,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":585,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":586,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":586,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":587,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":587,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":588,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":588,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":589,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":589,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":590,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":590,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":591,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":591,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":592,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":592,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":593,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":593,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":594,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":594,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":595,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":595,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":596,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":596,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":597,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":597,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":598,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":598,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":599,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":599,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":600,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":600,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":601,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":601,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":602,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":602,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":603,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":603,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":604,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":604,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":605,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":605,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":606,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":606,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":607,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":607,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":608,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":608,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":609,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":609,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":610,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":610,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":611,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":611,"duration":0.027},
{"type":"mark","name":"tsc.op.op_load","count":316,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":316,"duration":0.079},
{"type":"mark","name":"lsp.inlay_hint","count":62,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1900,"character":0},"end":{"line":2055,"character":5}}}},
{"type":"mark","name":"tsc.op.op_resolve","count":612,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":612,"duration":0.054},
{"type":"mark","name":"tsc.op.op_resolve","count":613,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":613,"duration":0.096},
{"type":"mark","name":"tsc.op.op_resolve","count":614,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":614,"duration":0.047},
{"type":"mark","name":"tsc.op.op_resolve","count":615,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":615,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":616,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":616,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":617,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":617,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":618,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":618,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":619,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":619,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":620,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":620,"duration":0.049},
{"type":"mark","name":"tsc.op.op_resolve","count":621,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":621,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":622,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":622,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":623,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":623,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":624,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":624,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":625,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":625,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":626,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":626,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":627,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":627,"duration":0.046},
{"type":"mark","name":"tsc.op.op_resolve","count":628,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":628,"duration":0.03},
{"type":"mark","name":"lsp.code_action","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"lsp.folding_range","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":5,"duration":434.696},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":5,"duration":435.116},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":3,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":3,"duration":1.243},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":3,"duration":83.632},
{"type":"measure","name":"lsp.code_action","count":5,"duration":83.855},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":3,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":3,"duration":128.098},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":4,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":4,"duration":0.17},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":3,"duration":133.708},
{"type":"measure","name":"lsp.folding_range","count":7,"duration":133.979},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":4,"duration":130.514},
{"type":"measure","name":"lsp.diagnostic","count":47,"duration":565.826},
{"type":"mark","name":"lsp.document_symbol","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":9,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"tsc.host.getNavigationTree","count":4,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":18,"duration":0.414},
{"type":"mark","name":"lsp.inlay_hint","count":63,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1858,"character":0},"end":{"line":2034,"character":0}}}},
{"type":"mark","name":"lsp.code_lens","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":10,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.inlay_hint","count":64,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1858,"character":0},"end":{"line":2034,"character":0}}}},
{"type":"mark","name":"lsp.semantic_tokens_full","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":11,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.getNavigationTree","count":4,"duration":291.103},
{"type":"measure","name":"tsc.request.getNavigationTree","count":4,"duration":295.026},
{"type":"measure","name":"lsp.get_navigation_tree","count":9,"duration":295.116},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":10,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":57981},"2020"]}},
{"type":"measure","name":"lsp.document_symbol","count":15,"duration":297.924},
{"type":"measure","name":"lsp.get_navigation_tree","count":10,"duration":227.141},
{"type":"measure","name":"lsp.code_lens","count":8,"duration":229.626},
{"type":"measure","name":"lsp.get_navigation_tree","count":11,"duration":228.235},
{"type":"measure","name":"lsp.document_symbol","count":16,"duration":235.976},
{"type":"mark","name":"lsp.inlay_hint","count":65,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1858,"character":0},"end":{"line":2034,"character":0}}}},
{"type":"mark","name":"lsp.code_action","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":10,"duration":172.874},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":10,"duration":381.701},
{"type":"measure","name":"lsp.semantic_tokens_full","count":7,"duration":382.178},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":4,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":4,"duration":0.797},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":4,"duration":69.639},
{"type":"measure","name":"lsp.code_action","count":6,"duration":69.882},
{"type":"mark","name":"lsp.inlay_hint","count":66,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1858,"character":0},"end":{"line":2034,"character":0}}}},
{"type":"mark","name":"lsp.did_change_batched","count":22,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":22,"duration":32.145},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":122,"duration":0.177},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":6,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",123]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":6,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":317,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":317,"duration":0.087},
{"type":"mark","name":"lsp.inlay_hint","count":67,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1858,"character":0},"end":{"line":2034,"character":6}}}},
{"type":"mark","name":"tsc.op.op_resolve","count":629,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":629,"duration":0.082},
{"type":"mark","name":"lsp.folding_range","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.document_symbol","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":12,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":6,"duration":709.369},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":6,"duration":709.477},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":4,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"mark","name":"lsp.inlay_hint","count":68,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1852,"character":0},"end":{"line":2028,"character":6}}}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":4,"duration":33.048},
{"type":"mark","name":"tsc.host.getNavigationTree","count":5,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":4,"duration":346.193},
{"type":"measure","name":"lsp.folding_range","count":8,"duration":346.458},
{"type":"mark","name":"lsp.inlay_hint","count":69,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1852,"character":0},"end":{"line":2028,"character":6}}}},
{"type":"measure","name":"tsc.host.getNavigationTree","count":5,"duration":16.389},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":11,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":57843},"2020"]}},
{"type":"measure","name":"tsc.request.getNavigationTree","count":5,"duration":75.915},
{"type":"measure","name":"lsp.get_navigation_tree","count":12,"duration":76.011},
{"type":"measure","name":"lsp.document_symbol","count":17,"duration":77.261},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":11,"duration":95.776},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":5,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":5,"duration":0.184},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":11,"duration":150.957},
{"type":"measure","name":"lsp.semantic_tokens_full","count":8,"duration":151.321},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":5,"duration":146.532},
{"type":"measure","name":"lsp.diagnostic","count":48,"duration":858.459},
{"type":"measure","name":"lsp.did_save","count":19,"duration":18.243},
{"type":"mark","name":"lsp.code_lens","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":13,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":13,"duration":0.0},
{"type":"measure","name":"lsp.code_lens","count":9,"duration":0.547},
{"type":"mark","name":"lsp.document_symbol","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":14,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":14,"duration":0.0},
{"type":"measure","name":"lsp.document_symbol","count":18,"duration":0.765},
{"type":"mark","name":"lsp.code_action","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":5,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":5,"duration":0.873},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":5,"duration":2.765},
{"type":"measure","name":"lsp.code_action","count":7,"duration":3.004},
{"type":"mark","name":"lsp.inlay_hint","count":70,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1852,"character":0},"end":{"line":2028,"character":6}}}},
{"type":"mark","name":"lsp.code_action","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":6,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":6,"duration":0.748},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":6,"duration":1.406},
{"type":"measure","name":"lsp.code_action","count":8,"duration":1.672},
{"type":"mark","name":"lsp.did_change_batched","count":23,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":23,"duration":15.198},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":7,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",124]}},
{"type":"measure","name":"lsp.testing_update","count":123,"duration":0.17},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":7,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":318,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":318,"duration":0.088},
{"type":"mark","name":"lsp.inlay_hint","count":71,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1852,"character":0},"end":{"line":2028,"character":20}}}},
{"type":"mark","name":"tsc.op.op_resolve","count":630,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":630,"duration":0.092},
{"type":"mark","name":"lsp.inlay_hint","count":72,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1852,"character":0},"end":{"line":2028,"character":20}}}},
{"type":"mark","name":"lsp.folding_range","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":7,"duration":527.483},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":5,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":7,"duration":527.63},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":5,"duration":21.356},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":6,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":6,"duration":0.145},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":5,"duration":113.14},
{"type":"measure","name":"lsp.folding_range","count":9,"duration":113.401},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":6,"duration":22.771},
{"type":"measure","name":"lsp.diagnostic","count":49,"duration":550.752},
{"type":"mark","name":"lsp.document_symbol","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":15,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"tsc.host.getNavigationTree","count":6,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"mark","name":"lsp.semantic_tokens_full","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":20,"duration":0.065},
{"type":"measure","name":"tsc.host.getNavigationTree","count":6,"duration":138.689},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":12,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":57887},"2020"]}},
{"type":"measure","name":"tsc.request.getNavigationTree","count":6,"duration":141.907},
{"type":"measure","name":"lsp.get_navigation_tree","count":15,"duration":141.991},
{"type":"measure","name":"lsp.document_symbol","count":19,"duration":146.43},
{"type":"mark","name":"lsp.code_lens","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":16,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":16,"duration":0.0},
{"type":"measure","name":"lsp.code_lens","count":10,"duration":0.515},
{"type":"mark","name":"lsp.inlay_hint","count":73,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1852,"character":0},"end":{"line":2028,"character":20}}}},
{"type":"mark","name":"lsp.document_symbol","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":17,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":17,"duration":0.001},
{"type":"measure","name":"lsp.document_symbol","count":20,"duration":0.914},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":12,"duration":118.996},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":12,"duration":234.947},
{"type":"measure","name":"lsp.semantic_tokens_full","count":9,"duration":236.637},
{"type":"mark","name":"lsp.code_action","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":7,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":7,"duration":2.837},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":7,"duration":3.191},
{"type":"measure","name":"lsp.code_action","count":9,"duration":3.47},
{"type":"mark","name":"lsp.inlay_hint","count":74,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1852,"character":0},"end":{"line":2028,"character":20}}}},
{"type":"mark","name":"lsp.did_open","count":118,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx","languageId":"typescriptreact","version":1,"text":"// Real-time Job Progress Hook for ProspectPro v4.2\n// Subscribe to Supabase Real-time for live campaign updates\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { supabase } from \"../lib/supabase\";\n\ninterface JobProgress {\n  jobId: string;\n  status: \"pending\" | \"processing\" | \"completed\" | \"failed\";\n  progress: number;\n  currentStage: string;\n  metrics?: {\n    businesses_found?: number;\n    qualified_leads?: number;\n    leads_enriched?: number;\n    total_cost?: number;\n    total_found?: number;\n    avg_confidence?: number;\n  };\n  error?: string;\n  completedAt?: string;\n}\n\ninterface RealtimePayload {\n  new: DiscoveryJobRow;\n}\n\ntype DiscoveryJobRow = {\n  id: string;\n  status: string;\n  progress: number | null;\n  current_stage: string | null;\n  metrics: Record<string, number> | null;\n  error?: string | null;\n  completed_at?: string | null;\n};\n\nconst NORMALIZED_STATUS: Record<string, JobProgress[\"status\"]> = {\n  pending: \"pending\",\n  processing: \"processing\",\n  completed: \"completed\",\n  failed: \"failed\",\n};\n\nfunction normalizeStatus(\n  value: string | null | undefined\n): JobProgress[\"status\"] {\n  if (!value) {\n    return \"processing\";\n  }\n\n  return NORMALIZED_STATUS[value] ?? \"processing\";\n}\n\nexport function useJobProgress(jobId: string | null) {\n  const [progress, setProgress] = useState<JobProgress | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const pollingRef = useRef<number | null>(null);\n\n  const stopPolling = useCallback(() => {\n    if (pollingRef.current !== null) {\n      window.clearInterval(pollingRef.current);\n      pollingRef.current = null;\n    }\n  }, []);\n\n  const updateFromRow = useCallback(\n    (row: DiscoveryJobRow | null) => {\n      if (!row) {\n        return;\n      }\n\n      const next: JobProgress = {\n        jobId: row.id,\n        status: normalizeStatus(row.status),\n        progress: row.progress ?? 0,\n        currentStage: row.current_stage ?? \"processing\",\n        metrics: (row.metrics ?? undefined) as JobProgress[\"metrics\"],\n        error: row.error ?? undefined,\n        completedAt: row.completed_at ?? undefined,\n      };\n\n      setProgress(next);\n\n      if (next.status === \"completed\" || next.status === \"failed\") {\n        stopPolling();\n      }\n    },\n    [stopPolling]\n  );\n\n  const fetchStatus = useCallback(async (): Promise<DiscoveryJobRow | null> => {\n    if (!jobId) {\n      return null;\n    }\n\n    const { data, error } = await supabase\n      .from(\"discovery_jobs\")\n      .select(\"*\")\n      .eq(\"id\", jobId)\n      .single();\n\n    if (error) {\n      console.error(\"Error fetching job status:\", error);\n      return null;\n    }\n\n    updateFromRow(data);\n    return data;\n  }, [jobId, updateFromRow]);\n\n  const startPolling = useCallback(() => {\n    if (pollingRef.current !== null || !jobId) {\n      return;\n    }\n\n    pollingRef.current = window.setInterval(() => {\n      void fetchStatus();\n    }, 4000);\n  }, [fetchStatus, jobId]);\n\n  useEffect(() => {\n    if (!jobId) {\n      setIsLoading(false);\n      stopPolling();\n      setProgress(null);\n      return;\n    }\n\n    let isMounted = true;\n\n    const bootstrap = async () => {\n      const row = await fetchStatus();\n      if (!isMounted) {\n        return;\n      }\n\n      setIsLoading(false);\n\n      if (!row) {\n        return;\n      }\n\n      if (row.status !== \"completed\" && row.status !== \"failed\") {\n        startPolling();\n      }\n    };\n\n    void bootstrap();\n\n    const channel = supabase\n      .channel(`discovery_jobs:${jobId}`)\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"UPDATE\",\n          schema: \"public\",\n          table: \"discovery_jobs\",\n          filter: `id=eq.${jobId}`,\n        },\n        (payload: RealtimePayload) => {\n          console.log(\"Real-time update:\", payload.new);\n          updateFromRow(payload.new);\n        }\n      )\n      .subscribe((status) => {\n        if (\n          status === \"TIMED_OUT\" ||\n          status === \"CHANNEL_ERROR\" ||\n          status === \"CLOSED\"\n        ) {\n          console.warn(\n            \"Realtime subscription failed. Falling back to polling.\",\n            {\n              status,\n              jobId,\n            }\n          );\n          startPolling();\n        }\n      });\n\n    return () => {\n      isMounted = false;\n      supabase.removeChannel(channel);\n      stopPolling();\n    };\n  }, [fetchStatus, jobId, startPolling, stopPolling, updateFromRow]);\n\n  return { progress, isLoading };\n}\n\nexport const STAGE_LABELS: Record<string, string> = {\n  initializing: \"Initializing campaign...\",\n  discovering_businesses: \"Discovering businesses...\",\n  scoring_businesses: \"Scoring and qualifying leads...\",\n  enriching_contacts: \"Enriching contact information...\",\n  storing_results: \"Storing results...\",\n};\n\nexport function JobProgressDisplay({ jobId }: { jobId: string }) {\n  const { progress, isLoading } = useJobProgress(jobId);\n\n  if (isLoading) {\n    return <div>Loading job status...</div>;\n  }\n\n  if (!progress) {\n    return <div>Job not found</div>;\n  }\n\n  if (progress.status === \"failed\") {\n    return (\n      <div className=\"error\">\n        <h3>Campaign Failed</h3>\n        <p>{progress.error || \"Unknown error occurred\"}</p>\n      </div>\n    );\n  }\n\n  if (progress.status === \"completed\") {\n    return (\n      <div className=\"success\">\n        <h3>Campaign Completed! 🎉</h3>\n        <p>Found {progress.metrics?.total_found || 0} qualified leads</p>\n        <p>Total cost: ${progress.metrics?.total_cost?.toFixed(2) || \"0.00\"}</p>\n        <p>\n          Average confidence:{\" \"}\n          {progress.metrics?.avg_confidence?.toFixed(0) || 0}%\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"progress\">\n      <h3>Campaign In Progress</h3>\n      <div className=\"progress-bar\">\n        <div\n          className=\"progress-fill\"\n          style={{ width: `${progress.progress}%` }}\n        />\n      </div>\n      <p>{progress.progress}% complete</p>\n      <p className=\"stage\">\n        {STAGE_LABELS[progress.currentStage] || progress.currentStage}\n      </p>\n\n      {progress.metrics && (\n        <div className=\"metrics\">\n          {progress.metrics.businesses_found && (\n            <p>Businesses found: {progress.metrics.businesses_found}</p>\n          )}\n          {progress.metrics.qualified_leads && (\n            <p>Qualified leads: {progress.metrics.qualified_leads}</p>\n          )}\n          {progress.metrics.leads_enriched && (\n            <p>Enriched: {progress.metrics.leads_enriched}</p>\n          )}\n          {progress.metrics.total_cost && (\n            <p>Cost: ${progress.metrics.total_cost.toFixed(2)}</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":118,"duration":6.403},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":124,"duration":0.183},
{"type":"mark","name":"lsp.did_change_batched","count":24,"args":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},
{"type":"measure","name":"lsp.did_change_batched","count":24,"duration":4.634},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":125,"duration":0.174},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":50,"duration":0.021},
{"type":"mark","name":"lsp.inlay_hint","count":75,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1852,"character":0},"end":{"line":2028,"character":20}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":21,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":76,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1852,"character":0},"end":{"line":2028,"character":20}}}},
{"type":"mark","name":"lsp.did_open","count":119,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","languageId":"typescriptreact","version":1,"text":"import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useNavigate, useParams, useSearchParams } from \"react-router-dom\";\nimport { ProgressDisplay } from \"../components/ProgressDisplay\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useJobProgress } from \"../hooks/useJobProgress\";\nimport { supabase } from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport { transformCampaignData } from \"../utils/campaignTransforms\";\n\nexport const CampaignProgress: React.FC = () => {\n  const { campaignId } = useParams<{ campaignId: string }>();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const jobId = searchParams.get(\"jobId\");\n\n  // Use the job progress hook for real-time updates\n  const { progress: jobProgress } = useJobProgress(jobId || \"\");\n\n  const campaigns = useCampaignStore((state) => state.campaigns);\n  const addCampaign = useCampaignStore((state) => state.addCampaign);\n  const updateCampaign = useCampaignStore((state) => state.updateCampaign);\n  const setCurrentCampaign = useCampaignStore(\n    (state) => state.setCurrentCampaign\n  );\n  const ensureUniqueCampaignHistory = useCampaignStore(\n    (state) => state.ensureUniqueCampaignHistory\n  );\n  const setCampaignLeads = useCampaignStore((state) => state.setCampaignLeads);\n  const setLoading = useCampaignStore((state) => state.setLoading);\n  const setError = useCampaignStore((state) => state.setError);\n  const { user, loading: authLoading } = useAuth();\n  const authUserId = user?.id ?? null;\n\n  const [isFetchingResults, setIsFetchingResults] = useState(false);\n  const [resultFetchError, setResultFetchError] = useState<string | null>(null);\n  const hasFetchedResultsRef = useRef(false);\n  const isMountedRef = useRef(true);\n\n  useEffect(() => {\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  // Extract data from job progress\n  const progress = jobProgress?.progress || 0;\n  const status = jobProgress?.status || \"pending\";\n  const currentStage = jobProgress?.currentStage || \"Initializing...\";\n  const metrics = jobProgress?.metrics;\n  const isComplete = status === \"completed\";\n  const error = jobProgress?.error;\n\n  const displayStage = isFetchingResults\n    ? \"Preparing final results...\"\n    : currentStage;\n  const displayProgress = isFetchingResults\n    ? Math.min(100, Math.max(progress, 96))\n    : progress;\n  const isProcessing = !isComplete || isFetchingResults;\n\n  const fetchResults = useCallback(async () => {\n    if (!campaignId) {\n      return;\n    }\n\n    if (!authUserId) {\n      setResultFetchError(\"Sign in again to view campaign results.\");\n      return;\n    }\n\n    hasFetchedResultsRef.current = true;\n    setIsFetchingResults(true);\n    setResultFetchError(null);\n    setLoading(true);\n\n    const wait = (ms: number) =>\n      new Promise<void>((resolve) => {\n        setTimeout(resolve, ms);\n      });\n\n    try {\n      const MAX_ATTEMPTS = 5;\n      let campaignRecord: any = null;\n      let leadsRecords: any[] = [];\n\n      for (let attempt = 0; attempt < MAX_ATTEMPTS; attempt += 1) {\n        const campaignQuery = supabase\n          .from(\"campaigns\")\n          .select(\n            \"id,business_type,location,status,total_cost,results_count,created_at,updated_at\"\n          )\n          .eq(\"id\", campaignId)\n          .eq(\"user_id\", authUserId);\n\n        const { data: campaignData, error: campaignError } =\n          await campaignQuery.maybeSingle();\n\n        if (campaignError) {\n          throw campaignError;\n        }\n\n        const leadsQuery = supabase\n          .from(\"leads\")\n          .select(\n            \"id,campaign_id,business_name,address,phone,website,email,confidence_score,validation_cost,enrichment_data,created_at\"\n          )\n          .eq(\"campaign_id\", campaignId)\n          .eq(\"user_id\", authUserId)\n          .order(\"confidence_score\", { ascending: false });\n\n        const { data: leadsData, error: leadsError } = await leadsQuery;\n\n        if (leadsError) {\n          throw leadsError;\n        }\n\n        campaignRecord = campaignData;\n        leadsRecords = leadsData ?? [];\n\n        if (\n          campaignRecord &&\n          (leadsRecords.length > 0 || attempt === MAX_ATTEMPTS - 1)\n        ) {\n          break;\n        }\n\n        await wait(2000);\n      }\n\n      if (!campaignRecord) {\n        throw new Error(\n          \"Campaign record not available yet. Please try again in a moment.\"\n        );\n      }\n\n      const { campaignResult, leads: mappedLeads } = transformCampaignData(\n        campaignRecord,\n        leadsRecords,\n        { metrics: (metrics ?? null) as Record<string, any> | null }\n      );\n\n      const campaignExists = campaigns.some(\n        (item) => item.campaign_id === campaignResult.campaign_id\n      );\n\n      if (campaignExists) {\n        updateCampaign(campaignResult.campaign_id, campaignResult);\n      } else {\n        addCampaign(campaignResult);\n      }\n\n      ensureUniqueCampaignHistory();\n\n      setCampaignLeads(campaignResult.campaign_id, mappedLeads);\n      setCurrentCampaign(campaignResult);\n\n      if (isMountedRef.current) {\n        setResultFetchError(null);\n        navigate(\"/results\", { replace: true, state: { campaignId } });\n      }\n    } catch (err) {\n      console.error(\"⚠️ Unable to load campaign results\", err);\n      const message =\n        err instanceof Error\n          ? err.message\n          : \"Unable to load campaign results. Please try again.\";\n\n      if (isMountedRef.current) {\n        setResultFetchError(message);\n      }\n\n      setError(message);\n      hasFetchedResultsRef.current = false;\n    } finally {\n      if (isMountedRef.current) {\n        setIsFetchingResults(false);\n        setLoading(false);\n      }\n    }\n  }, [\n    addCampaign,\n    authUserId,\n    campaignId,\n    campaigns,\n    ensureUniqueCampaignHistory,\n    metrics,\n    navigate,\n    setCurrentCampaign,\n    setCampaignLeads,\n    setError,\n    setLoading,\n    updateCampaign,\n  ]);\n\n  useEffect(() => {\n    if (!isComplete || !campaignId || !jobId) {\n      return;\n    }\n\n    if (!authUserId) {\n      return;\n    }\n\n    if (hasFetchedResultsRef.current) {\n      return;\n    }\n\n    fetchResults();\n  }, [authUserId, campaignId, fetchResults, isComplete, jobId]);\n\n  const handleRetryFetch = () => {\n    if (!campaignId) {\n      return;\n    }\n\n    if (!authUserId) {\n      setResultFetchError(\"Sign in again to re-establish your session.\");\n      return;\n    }\n\n    fetchResults();\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"flex items-center justify-center\">\n          <div className=\"flex items-center space-x-3 text-gray-600\">\n            <div className=\"h-6 w-6 animate-spin rounded-full border-2 border-blue-600 border-t-transparent\"></div>\n            <span>Loading campaign...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!authUserId) {\n    return (\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"max-w-xl mx-auto rounded-lg border border-gray-200 bg-white p-8 text-center shadow-sm dark:border-gray-700 dark:bg-gray-800\">\n          <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\n            Sign in required\n          </h1>\n          <p className=\"mt-3 text-sm text-gray-600 dark:text-gray-300\">\n            Please sign in to review campaign progress and download results.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!jobId || !campaignId) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">\n            Invalid Campaign\n          </h1>\n          <p className=\"text-gray-600 mb-4\">\n            Missing job or campaign information.\n          </p>\n          <button\n            onClick={() => navigate(\"/\")}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Return Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">\n            Processing Error\n          </h1>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button\n            onClick={() => navigate(\"/\")}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Start New Campaign\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          Campaign Discovery in Progress\n        </h1>\n      </div>\n\n      {isFetchingResults && !resultFetchError && (\n        <div className=\"mb-6 rounded-lg border border-blue-200 bg-blue-50 p-4 text-sm text-blue-700\">\n          Finalizing campaign results and syncing verified leads to your\n          vault...\n        </div>\n      )}\n\n      {resultFetchError && (\n        <div className=\"mb-6 rounded-lg border border-red-200 bg-red-50 p-4 text-sm text-red-700\">\n          <div className=\"font-semibold\">Unable to load campaign results</div>\n          <p className=\"mt-1\">{resultFetchError}</p>\n          <button\n            onClick={handleRetryFetch}\n            className=\"mt-3 inline-flex items-center rounded border border-red-300 bg-white px-3 py-1.5 text-xs font-medium text-red-700 shadow-sm transition hover:bg-red-100\"\n          >\n            Retry syncing results\n          </button>\n        </div>\n      )}\n\n      {/* Progress Display */}\n      <ProgressDisplay\n        isDiscovering={isProcessing}\n        progress={displayProgress}\n        currentStage={displayStage}\n        cacheStats={null} // Real-time updates don't include cache stats\n      />\n\n      {/* Real-time Metrics */}\n      {metrics && (\n        <div className=\"mt-6 bg-white border border-gray-200 rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            📊 Live Discovery Metrics\n          </h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {metrics.total_found || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Found</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {metrics.qualified_leads || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Qualified</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {metrics.avg_confidence ? `${metrics.avg_confidence}%` : \"0%\"}\n              </div>\n              <div className=\"text-sm text-gray-600\">Avg Confidence</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                ${(metrics.total_cost || 0).toFixed(2)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Cost</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Status Updates */}\n      <div className=\"mt-6 bg-gray-50 border border-gray-200 rounded-lg p-4\">\n        <h4 className=\"font-semibold text-gray-900 mb-2\">Status Updates</h4>\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center text-sm\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full mr-2\"></div>\n            <span className=\"text-gray-600\">\n              Campaign started at {new Date().toLocaleTimeString()}\n            </span>\n          </div>\n          {displayStage && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-blue-400 rounded-full mr-2 animate-pulse\"></div>\n              <span className=\"text-gray-900 font-medium\">{displayStage}</span>\n            </div>\n          )}\n          {isFetchingResults && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-purple-400 rounded-full mr-2 animate-pulse\"></div>\n              <span className=\"text-purple-600 font-medium\">\n                Finalizing leads and preparing results...\n              </span>\n            </div>\n          )}\n          {status === \"completed\" && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full mr-2\"></div>\n              <span className=\"text-green-600 font-medium\">\n                ✅ Discovery completed! Redirecting to results...\n              </span>\n            </div>\n          )}\n          {resultFetchError && (\n            <div className=\"flex items-center text-sm\">\n              <div className=\"w-2 h-2 bg-red-400 rounded-full mr-2\"></div>\n              <span className=\"text-red-600 font-medium\">\n                {resultFetchError}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"mt-8 text-center space-x-4\">\n        <button\n          onClick={() => navigate(\"/\")}\n          className=\"px-4 py-2 text-gray-600 bg-gray-100 rounded hover:bg-gray-200\"\n        >\n          Start New Campaign\n        </button>\n        {!isProcessing && (\n          <button\n            onClick={() => navigate(\"/results\", { state: { campaignId } })}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            View Complete Results\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":126,"duration":0.23},
{"type":"measure","name":"lsp.did_open","count":119,"duration":4.061},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":51,"duration":0.022},
{"type":"mark","name":"lsp.did_change_batched","count":25,"args":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx"},
{"type":"measure","name":"lsp.did_change_batched","count":25,"duration":5.785},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":52,"duration":0.011},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":127,"duration":0.179},
{"type":"mark","name":"lsp.inlay_hint","count":77,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1852,"character":0},"end":{"line":2028,"character":20}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":53,"duration":0.021},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":22,"duration":0.024},
{"type":"mark","name":"lsp.inlay_hint","count":78,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1852,"character":0},"end":{"line":2028,"character":20}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":54,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":26,"args":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},
{"type":"measure","name":"lsp.did_change_batched","count":26,"duration":4.277},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":55,"duration":0.01},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":128,"duration":0.352},
{"type":"mark","name":"lsp.inlay_hint","count":79,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1852,"character":0},"end":{"line":2028,"character":20}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":56,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":23,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":80,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1852,"character":0},"end":{"line":2028,"character":20}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":57,"duration":0.013},
{"type":"mark","name":"lsp.did_close","count":116,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/components/ProgressDisplay.tsx"}}},
{"type":"measure","name":"lsp.did_close","count":116,"duration":0.914},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":129,"duration":0.185},
{"type":"mark","name":"lsp.goto_definition","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},"position":{"line":208,"character":2}}},
{"type":"mark","name":"lsp.goto_definition","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1613,"character":8}}},
{"type":"mark","name":"tsc.request.getDefinitionAndBoundSpan"},
{"type":"mark","name":"tsc.host.getDefinitionAndBoundSpan","count":3,"args":{"GetDefinitionAndBoundSpan":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",44361]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":7,"duration":0.53},
{"type":"mark","name":"lsp.goto_definition","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},"position":{"line":208,"character":2}}},
{"type":"mark","name":"tsc.op.op_load","count":319,"args":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":319,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":631,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx","specifiers":[[false,"react"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":631,"duration":0.048},
{"type":"mark","name":"tsc.op.op_load","count":320,"args":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":320,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":632,"args":{"base":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/ProgressDisplay"],[false,"../contexts/AuthContext"],[false,"../hooks/useJobProgress"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":632,"duration":0.116},
{"type":"mark","name":"tsc.op.op_resolve","count":633,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":633,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":634,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":634,"duration":0.06},
{"type":"mark","name":"tsc.op.op_resolve","count":635,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":635,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":636,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":636,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":637,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":637,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":638,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":638,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":639,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":639,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":640,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":640,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":641,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":641,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":642,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":642,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":643,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":643,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":644,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":644,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":645,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":645,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":646,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":646,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":647,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":647,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":648,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":648,"duration":0.469},
{"type":"mark","name":"tsc.op.op_resolve","count":649,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":649,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":650,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":650,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":651,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":651,"duration":0.044},
{"type":"mark","name":"tsc.op.op_resolve","count":652,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":652,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":653,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":653,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":654,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":654,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":655,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":655,"duration":2.499},
{"type":"mark","name":"tsc.op.op_resolve","count":656,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":656,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":657,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":657,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":658,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":658,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":659,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":659,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":660,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":660,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":661,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":661,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":662,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":662,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":663,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":663,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":664,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":664,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":665,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":665,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":666,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":666,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":667,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":667,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":668,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":668,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":669,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":669,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":670,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":670,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":671,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":671,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":672,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":672,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":673,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":673,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":674,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":674,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":675,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":675,"duration":0.052},
{"type":"mark","name":"tsc.op.op_resolve","count":676,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":676,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":677,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":677,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":678,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":678,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":679,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":679,"duration":0.047},
{"type":"mark","name":"tsc.op.op_resolve","count":680,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":680,"duration":0.047},
{"type":"mark","name":"tsc.op.op_resolve","count":681,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":681,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":682,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":682,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":683,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":683,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":684,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":684,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":685,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":685,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":686,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":686,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":687,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":687,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":688,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":688,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":689,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":689,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":690,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":690,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":691,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":691,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":692,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":692,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":693,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":693,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":694,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":694,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":695,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":695,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":696,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":696,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":697,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":697,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":698,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":698,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":699,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":699,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":700,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":700,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":701,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":701,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":702,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":702,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":703,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":703,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":704,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":704,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":705,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":705,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":706,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":706,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":707,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":707,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":708,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":708,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":709,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":709,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":710,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":710,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":711,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":711,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":712,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":712,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":713,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":713,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":714,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":714,"duration":0.047},
{"type":"mark","name":"tsc.op.op_resolve","count":715,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":715,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":716,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":716,"duration":0.047},
{"type":"mark","name":"tsc.op.op_resolve","count":717,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":717,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":718,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":718,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":719,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":719,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":720,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":720,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":721,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":721,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":722,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":722,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":723,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":723,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":724,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":724,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":725,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":725,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":726,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":726,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":727,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":727,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":728,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":728,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":729,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":729,"duration":0.048},
{"type":"mark","name":"tsc.op.op_resolve","count":730,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":730,"duration":0.032},
{"type":"mark","name":"tsc.op.op_release","count":68,"args":"file:///workspaces/ProspectPro/src/components/ProgressDisplay.tsx"},
{"type":"measure","name":"tsc.op.op_release","count":68,"duration":0.605},
{"type":"measure","name":"tsc.host.getDefinitionAndBoundSpan","count":3,"duration":182.508},
{"type":"measure","name":"tsc.request.getDefinitionAndBoundSpan","count":3,"duration":184.767},
{"type":"measure","name":"lsp.goto_definition","count":23,"duration":184.951},
{"type":"mark","name":"lsp.goto_definition","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},"position":{"line":50,"character":2}}},
{"type":"mark","name":"lsp.goto_definition","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},"position":{"line":11,"character":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":81,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1900,"character":0},"end":{"line":2059,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":82,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1900,"character":0},"end":{"line":2059,"character":0}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":8,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",130]}},
{"type":"mark","name":"lsp.inlay_hint","count":83,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1900,"character":0},"end":{"line":2059,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":84,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1900,"character":0},"end":{"line":2059,"character":0}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":8,"duration":515.771},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":8,"duration":517.456},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":7,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":7,"duration":83.702},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":7,"duration":84.613},
{"type":"measure","name":"lsp.did_save","count":24,"duration":602.355},
{"type":"mark","name":"lsp.did_change_batched","count":27,"args":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},
{"type":"measure","name":"lsp.did_change_batched","count":27,"duration":2.516},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":58,"duration":0.011},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":130,"duration":0.19},
{"type":"mark","name":"lsp.inlay_hint","count":85,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1900,"character":0},"end":{"line":2059,"character":0}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":25,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":86,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1900,"character":0},"end":{"line":2059,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":59,"duration":0.001},
{"type":"mark","name":"lsp.inlay_hint","count":87,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1900,"character":0},"end":{"line":2059,"character":0}}}},
{"type":"mark","name":"lsp.did_change_batched","count":28,"args":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx"},
{"type":"measure","name":"lsp.did_change_batched","count":28,"duration":3.453},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":60,"duration":0.012},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":131,"duration":0.201},
{"type":"mark","name":"lsp.inlay_hint","count":88,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1900,"character":0},"end":{"line":2059,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":61,"duration":0.002},
{"type":"mark","name":"lsp.did_change_batched","count":29,"args":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx"},
{"type":"measure","name":"lsp.did_change_batched","count":29,"duration":5.589},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":62,"duration":0.01},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":132,"duration":0.767},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":26,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":89,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1900,"character":0},"end":{"line":2059,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":90,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1900,"character":0},"end":{"line":2059,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":63,"duration":0.019},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":64,"duration":0.002},
{"type":"mark","name":"lsp.hover","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1980,"character":15}}},
{"type":"mark","name":"tsc.request.getQuickInfoAtPosition"},
{"type":"mark","name":"tsc.host.getQuickInfoAtPosition","count":1,"args":{"GetQuickInfoAtPosition":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",55923]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":8,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":321,"args":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":321,"duration":0.037},
{"type":"mark","name":"tsc.op.op_load","count":322,"args":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":322,"duration":0.05},
{"type":"mark","name":"tsc.op.op_resolve","count":731,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx","specifiers":[[false,"react"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":731,"duration":1.901},
{"type":"mark","name":"tsc.op.op_resolve","count":732,"args":{"base":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/ProgressDisplay"],[false,"../contexts/AuthContext"],[false,"../hooks/useJobProgress"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":732,"duration":0.125},
{"type":"measure","name":"tsc.host.getQuickInfoAtPosition","count":1,"duration":67.187},
{"type":"mark","name":"lsp.hover","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1981,"character":12}}},
{"type":"mark","name":"tsc.request.getQuickInfoAtPosition"},
{"type":"mark","name":"tsc.host.getQuickInfoAtPosition","count":2,"args":{"GetQuickInfoAtPosition":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",55939]}},
{"type":"measure","name":"tsc.host.getQuickInfoAtPosition","count":2,"duration":14.091},
{"type":"measure","name":"tsc.request.getQuickInfoAtPosition","count":2,"duration":14.263},
{"type":"measure","name":"lsp.hover","count":3,"duration":15.879},
{"type":"mark","name":"lsp.hover","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1981,"character":12}}},
{"type":"mark","name":"tsc.request.getQuickInfoAtPosition"},
{"type":"mark","name":"tsc.host.getQuickInfoAtPosition","count":3,"args":{"GetQuickInfoAtPosition":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",55939]}},
{"type":"measure","name":"tsc.host.getQuickInfoAtPosition","count":3,"duration":2.505},
{"type":"measure","name":"tsc.request.getQuickInfoAtPosition","count":3,"duration":2.724},
{"type":"measure","name":"lsp.hover","count":4,"duration":2.916},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.code_action","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"lsp.document_highlight","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"tsc.request.getDocumentHighlights"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":9,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",133]}},
{"type":"measure","name":"lsp.diagnostic","count":65,"duration":268.523},
{"type":"mark","name":"lsp.did_change_batched","count":30,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":9,"duration":270.885},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":8,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":8,"duration":0.147},
{"type":"mark","name":"tsc.host.getDocumentHighlights","count":2,"args":{"GetDocumentHighlights":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",0,["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]]}},
{"type":"measure","name":"tsc.host.getDocumentHighlights","count":2,"duration":12.507},
{"type":"measure","name":"lsp.did_change_batched","count":30,"duration":207.556},
{"type":"mark","name":"lsp.inlay_hint","count":91,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1901,"character":0},"end":{"line":2069,"character":0}}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":133,"duration":0.189},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":10,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",134]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":9,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":323,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":323,"duration":0.079},
{"type":"mark","name":"lsp.folding_range","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":18,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"tsc.op.op_resolve","count":733,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":733,"duration":0.089},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.code_lens","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":19,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.inlay_hint","count":92,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1901,"character":0},"end":{"line":2069,"character":0}}}},
{"type":"mark","name":"lsp.document_symbol","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":20,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.inlay_hint","count":93,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1503,"character":9}}}},
{"type":"mark","name":"lsp.inlay_hint","count":94,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1503,"character":9}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":10,"duration":1253.152},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":6,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":10,"duration":1262.081},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":6,"duration":101.015},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":13,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":58277},"2020"]}},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":6,"duration":1294.508},
{"type":"measure","name":"lsp.folding_range","count":10,"duration":1294.763},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":13,"duration":241.389},
{"type":"mark","name":"tsc.host.getNavigationTree","count":7,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":13,"duration":1532.514},
{"type":"measure","name":"lsp.semantic_tokens_full","count":10,"duration":1532.979},
{"type":"measure","name":"tsc.host.getNavigationTree","count":7,"duration":27.782},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":8,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":8,"duration":0.161},
{"type":"measure","name":"tsc.request.getNavigationTree","count":7,"duration":1538.514},
{"type":"measure","name":"lsp.get_navigation_tree","count":18,"duration":1538.586},
{"type":"measure","name":"lsp.document_symbol","count":21,"duration":1539.339},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":8,"duration":368.916},
{"type":"measure","name":"lsp.diagnostic","count":66,"duration":1631.418},
{"type":"measure","name":"lsp.get_navigation_tree","count":19,"duration":1217.877},
{"type":"measure","name":"lsp.code_lens","count":11,"duration":1218.789},
{"type":"measure","name":"lsp.get_navigation_tree","count":20,"duration":676.01},
{"type":"measure","name":"lsp.document_symbol","count":22,"duration":676.697},
{"type":"measure","name":"lsp.did_save","count":27,"duration":1276.33},
{"type":"mark","name":"lsp.inlay_hint","count":95,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1503,"character":9}}}},
{"type":"mark","name":"lsp.code_action","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":9,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":9,"duration":2.817},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":9,"duration":3.1},
{"type":"measure","name":"lsp.code_action","count":11,"duration":3.341},
{"type":"mark","name":"lsp.did_open","count":120,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","languageId":"typescript","version":1,"text":"import { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\n\nexport interface UsageLogContext {\n  campaignId?: string | null;\n  sessionId?: string | null;\n  jobId?: string | null;\n  tierKey?: string | null;\n  businessQuery?: string | null;\n  locationQuery?: string | null;\n}\n\nexport interface UsageLogParams extends Partial<UsageLogContext> {\n  sourceName: string;\n  endpoint?: string;\n  httpMethod?: string;\n  requestParams?: Record<string, unknown> | null;\n  queryType?: \"discovery\" | \"enrichment\" | \"validation\" | \"internal\";\n  responseCode?: number | null;\n  responseTimeMs?: number | null;\n  resultsReturned?: number | null;\n  success?: boolean;\n  errorMessage?: string | null;\n  estimatedCost?: number | null;\n  actualCost?: number | null;\n  billingCategory?: \"free_tier\" | \"paid_usage\" | \"overage\" | null;\n  dataQualityScore?: number | null;\n  usefulResults?: number | null;\n  cacheHit?: boolean;\n  rateLimited?: boolean;\n  retryCount?: number;\n  requestId?: string;\n}\n\nexport interface UsageLogger {\n  log: (entry: UsageLogParams) => Promise<void>;\n}\n\ninterface SupabaseUsageInsert {\n  campaign_id: string | null;\n  session_id: string | null;\n  request_id: string;\n  source_name: string;\n  endpoint: string | null;\n  http_method: string;\n  request_params: Record<string, unknown> | null;\n  query_type: string | null;\n  business_query: string | null;\n  location_query: string | null;\n  response_code: number | null;\n  response_time_ms: number | null;\n  results_returned: number | null;\n  success: boolean | null;\n  error_message: string | null;\n  estimated_cost: number | null;\n  actual_cost: number | null;\n  cost_currency: string;\n  billing_category: string | null;\n  data_quality_score: number | null;\n  useful_results: number | null;\n  cache_hit: boolean;\n  rate_limited: boolean;\n  retry_count: number;\n}\n\nconst UUID_REGEX =\n  /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/;\n\nfunction isValidUUID(value?: string | null): value is string {\n  return typeof value === \"string\" && UUID_REGEX.test(value.trim());\n}\n\nfunction roundCost(value: number | null | undefined): number | null {\n  if (typeof value !== \"number\" || Number.isNaN(value)) return null;\n  return Math.round(value * 10000) / 10000;\n}\n\nfunction sanitizePayload(\n  input: Record<string, unknown> | null | undefined\n): Record<string, unknown> | null {\n  if (!input) return null;\n\n  try {\n    return JSON.parse(\n      JSON.stringify(input, (_, value) => {\n        if (typeof value === \"string\" && value.length > 512) {\n          return `${value.slice(0, 509)}…`;\n        }\n        return value;\n      })\n    );\n  } catch (_error) {\n    return null;\n  }\n}\n\nfunction buildInsertPayload(\n  baseContext: UsageLogContext,\n  entry: UsageLogParams\n): SupabaseUsageInsert {\n  const merged = { ...baseContext, ...entry };\n  const requestId = entry.requestId ?? crypto.randomUUID();\n  const campaignId = isValidUUID(merged.campaignId) ? merged.campaignId : null;\n  const sessionId = merged.sessionId ?? merged.jobId ?? null;\n\n  const estimatedCost = roundCost(entry.estimatedCost);\n  const actualCost = roundCost(entry.actualCost ?? entry.estimatedCost ?? null);\n  const billingCategory =\n    entry.billingCategory ?? (actualCost && actualCost > 0 ? \"paid_usage\" : \"free_tier\");\n\n  return {\n    campaign_id: campaignId,\n    session_id: sessionId ?? null,\n    request_id: requestId,\n    source_name: entry.sourceName,\n    endpoint: entry.endpoint ?? null,\n    http_method: entry.httpMethod ?? \"GET\",\n    request_params: sanitizePayload(entry.requestParams),\n    query_type: entry.queryType ?? null,\n    business_query: merged.businessQuery ?? entry.businessQuery ?? null,\n    location_query: merged.locationQuery ?? entry.locationQuery ?? null,\n    response_code: entry.responseCode ?? null,\n    response_time_ms: entry.responseTimeMs ?? null,\n    results_returned: entry.resultsReturned ?? null,\n    success: typeof entry.success === \"boolean\" ? entry.success : null,\n    error_message: entry.errorMessage ?? null,\n    estimated_cost: estimatedCost,\n    actual_cost: actualCost,\n    cost_currency: \"USD\",\n    billing_category: billingCategory,\n    data_quality_score: entry.dataQualityScore ?? null,\n    useful_results: entry.usefulResults ?? entry.resultsReturned ?? null,\n    cache_hit: entry.cacheHit ?? false,\n    rate_limited:\n      entry.rateLimited ?? (typeof entry.responseCode === \"number\" && entry.responseCode === 429),\n    retry_count: entry.retryCount ?? 0,\n  };\n}\n\nexport function createUsageLogger(\n  supabaseUrl: string,\n  serviceRoleKey: string,\n  baseContext: UsageLogContext = {}\n): UsageLogger {\n  const supabase = createClient(supabaseUrl, serviceRoleKey, {\n    auth: {\n      persistSession: false,\n      autoRefreshToken: false,\n    },\n  });\n\n  return {\n    async log(entry: UsageLogParams) {\n      try {\n        const payload = buildInsertPayload(baseContext, entry);\n        const { error } = await supabase.from(\"enhanced_api_usage\").insert(payload);\n        if (error) {\n          console.error(\"📉 API usage logging error:\", error.message);\n        }\n      } catch (error) {\n        console.error(\"📉 API usage logging failed:\", error);\n      }\n    },\n  };\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":120,"duration":2.964},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":134,"duration":0.399},
{"type":"mark","name":"lsp.did_change_batched","count":31,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":31,"duration":16.437},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":11,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",136]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":8,"duration":0.46},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":10,"duration":0.016},
{"type":"measure","name":"lsp.testing_update","count":135,"duration":4.174},
{"type":"mark","name":"tsc.op.op_load","count":324,"args":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts"},
{"type":"measure","name":"tsc.op.op_load","count":324,"duration":0.042},
{"type":"mark","name":"tsc.op.op_load","count":325,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":325,"duration":0.085},
{"type":"mark","name":"tsc.op.op_resolve","count":734,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":734,"duration":0.054},
{"type":"mark","name":"tsc.op.op_resolve","count":735,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":735,"duration":0.055},
{"type":"mark","name":"lsp.inlay_hint","count":96,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":9}}}},
{"type":"mark","name":"lsp.document_symbol","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":21,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.folding_range","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.inlay_hint","count":97,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":9}}}},
{"type":"mark","name":"lsp.document_symbol","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":22,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.semantic_tokens_full","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.inlay_hint","count":98,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":9}}}},
{"type":"mark","name":"lsp.code_lens","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":23,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":11,"duration":837.921},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":11,"duration":840.004},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.getNavigationTree","count":8,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getNavigationTree","count":8,"duration":106.784},
{"type":"measure","name":"tsc.request.getNavigationTree","count":8,"duration":450.466},
{"type":"measure","name":"lsp.get_navigation_tree","count":21,"duration":450.548},
{"type":"measure","name":"lsp.document_symbol","count":23,"duration":451.349},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":7,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"lsp.get_navigation_tree","count":22,"duration":300.769},
{"type":"measure","name":"lsp.document_symbol","count":24,"duration":313.472},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":7,"duration":45.804},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":14,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":58694},"2020"]}},
{"type":"measure","name":"lsp.get_navigation_tree","count":23,"duration":230.246},
{"type":"measure","name":"lsp.code_lens","count":12,"duration":231.502},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":7,"duration":435.589},
{"type":"measure","name":"lsp.folding_range","count":11,"duration":435.858},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":14,"duration":196.359},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":9,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":9,"duration":0.163},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":14,"duration":487.593},
{"type":"measure","name":"lsp.semantic_tokens_full","count":11,"duration":488.104},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":9,"duration":354.856},
{"type":"measure","name":"lsp.diagnostic","count":67,"duration":1197.129},
{"type":"measure","name":"lsp.did_save","count":28,"duration":646.385},
{"type":"mark","name":"lsp.inlay_hint","count":99,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":9}}}},
{"type":"mark","name":"lsp.code_action","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":10,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":10,"duration":0.838},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":10,"duration":2.245},
{"type":"measure","name":"lsp.code_action","count":12,"duration":2.514},
{"type":"mark","name":"lsp.did_change_batched","count":32,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":32,"duration":48.808},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.testing_update","count":136,"duration":0.84},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.inlay_hint","count":100,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":7}}}},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":12,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",137]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":11,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":326,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":326,"duration":0.119},
{"type":"mark","name":"tsc.op.op_resolve","count":736,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":736,"duration":0.086},
{"type":"mark","name":"lsp.inlay_hint","count":101,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":7}}}},
{"type":"mark","name":"lsp.semantic_tokens_full","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":24,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":12,"duration":653.713},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":12,"duration":655.833},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"lsp.folding_range","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":15,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":58660},"2020"]}},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.inlay_hint","count":102,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":7}}}},
{"type":"mark","name":"lsp.inlay_hint","count":103,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":7}}}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":15,"duration":115.18},
{"type":"mark","name":"tsc.host.getNavigationTree","count":9,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":15,"duration":231.158},
{"type":"measure","name":"lsp.semantic_tokens_full","count":12,"duration":231.704},
{"type":"measure","name":"tsc.host.getNavigationTree","count":9,"duration":27.805},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":10,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":10,"duration":0.154},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":8,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getNavigationTree","count":9,"duration":223.193},
{"type":"measure","name":"lsp.get_navigation_tree","count":24,"duration":223.277},
{"type":"measure","name":"lsp.document_symbol","count":25,"duration":226.141},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":10,"duration":159.89},
{"type":"measure","name":"lsp.diagnostic","count":68,"duration":820.526},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":8,"duration":16.467},
{"type":"measure","name":"lsp.did_save","count":29,"duration":134.069},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":8,"duration":168.289},
{"type":"measure","name":"lsp.folding_range","count":12,"duration":168.545},
{"type":"mark","name":"lsp.document_symbol","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":25,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":25,"duration":0.0},
{"type":"measure","name":"lsp.document_symbol","count":26,"duration":0.828},
{"type":"mark","name":"lsp.inlay_hint","count":104,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":7}}}},
{"type":"mark","name":"lsp.code_lens","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":26,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":26,"duration":0.001},
{"type":"measure","name":"lsp.code_lens","count":13,"duration":0.479},
{"type":"mark","name":"lsp.inlay_hint","count":105,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":7}}}},
{"type":"mark","name":"lsp.code_action","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":11,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":11,"duration":2.62},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":11,"duration":2.912},
{"type":"measure","name":"lsp.code_action","count":13,"duration":3.143},
{"type":"mark","name":"lsp.did_change_batched","count":33,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":33,"duration":17.773},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":13,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",138]}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":137,"duration":0.218},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":12,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":327,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":327,"duration":0.089},
{"type":"mark","name":"lsp.inlay_hint","count":106,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"mark","name":"tsc.op.op_resolve","count":737,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":737,"duration":0.079},
{"type":"mark","name":"lsp.inlay_hint","count":107,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":13,"duration":432.735},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":13,"duration":432.887},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":11,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":11,"duration":0.094},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":11,"duration":0.16},
{"type":"measure","name":"lsp.diagnostic","count":69,"duration":433.215},
{"type":"mark","name":"lsp.folding_range","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":9,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":9,"duration":23.566},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":9,"duration":24.009},
{"type":"measure","name":"lsp.folding_range","count":13,"duration":24.266},
{"type":"mark","name":"lsp.semantic_tokens_full","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":16,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":58616},"2020"]}},
{"type":"mark","name":"lsp.get_navigation_tree","count":27,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":30,"duration":0.054},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":16,"duration":103.07},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":16,"duration":105.964},
{"type":"measure","name":"lsp.semantic_tokens_full","count":13,"duration":106.471},
{"type":"mark","name":"tsc.host.getNavigationTree","count":10,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"mark","name":"lsp.code_action","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"measure","name":"tsc.host.getNavigationTree","count":10,"duration":25.732},
{"type":"measure","name":"tsc.request.getNavigationTree","count":10,"duration":134.507},
{"type":"measure","name":"lsp.get_navigation_tree","count":27,"duration":134.556},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":12,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":12,"duration":0.649},
{"type":"measure","name":"lsp.document_symbol","count":27,"duration":136.913},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":12,"duration":27.312},
{"type":"measure","name":"lsp.code_action","count":14,"duration":27.572},
{"type":"mark","name":"lsp.inlay_hint","count":108,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"mark","name":"lsp.document_symbol","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":28,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":28,"duration":0.0},
{"type":"measure","name":"lsp.document_symbol","count":28,"duration":0.849},
{"type":"mark","name":"lsp.code_lens","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":29,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":29,"duration":0.001},
{"type":"measure","name":"lsp.code_lens","count":14,"duration":0.551},
{"type":"mark","name":"lsp.inlay_hint","count":109,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":110,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"mark","name":"lsp.did_change_batched","count":34,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":34,"duration":20.961},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.testing_update","count":138,"duration":0.188},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.inlay_hint","count":111,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":14,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",139]}},
{"type":"mark","name":"lsp.inlay_hint","count":112,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":13,"duration":0.037},
{"type":"mark","name":"tsc.op.op_load","count":328,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":328,"duration":0.087},
{"type":"mark","name":"tsc.op.op_resolve","count":738,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":738,"duration":0.084},
{"type":"mark","name":"lsp.semantic_tokens_full","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.folding_range","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.document_symbol","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":30,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.inlay_hint","count":113,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":114,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":14,"duration":861.562},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":17,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":58528},"2020"]}},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":14,"duration":863.003},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"lsp.document_symbol","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":31,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.code_lens","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":32,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":17,"duration":128.297},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":17,"duration":393.736},
{"type":"measure","name":"lsp.semantic_tokens_full","count":14,"duration":394.266},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":10,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"mark","name":"lsp.inlay_hint","count":115,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":10,"duration":34.48},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":10,"duration":429.685},
{"type":"measure","name":"lsp.folding_range","count":14,"duration":429.926},
{"type":"mark","name":"tsc.host.getNavigationTree","count":11,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getNavigationTree","count":11,"duration":11.137},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":12,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":12,"duration":0.172},
{"type":"measure","name":"tsc.request.getNavigationTree","count":11,"duration":444.997},
{"type":"measure","name":"lsp.get_navigation_tree","count":30,"duration":445.049},
{"type":"measure","name":"lsp.document_symbol","count":29,"duration":445.818},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":12,"duration":183.309},
{"type":"measure","name":"lsp.diagnostic","count":70,"duration":1047.801},
{"type":"measure","name":"lsp.get_navigation_tree","count":31,"duration":129.406},
{"type":"measure","name":"lsp.document_symbol","count":30,"duration":130.611},
{"type":"measure","name":"lsp.get_navigation_tree","count":32,"duration":113.726},
{"type":"measure","name":"lsp.code_lens","count":15,"duration":114.162},
{"type":"measure","name":"lsp.did_save","count":31,"duration":203.327},
{"type":"mark","name":"lsp.code_action","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":13,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":13,"duration":110.488},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":13,"duration":110.74},
{"type":"measure","name":"lsp.code_action","count":15,"duration":111.015},
{"type":"mark","name":"lsp.did_change_batched","count":35,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_change_batched","count":35,"duration":35.295},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"measure","name":"lsp.testing_update","count":139,"duration":0.631},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":15,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",140]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":14,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":329,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":329,"duration":0.083},
{"type":"mark","name":"tsc.op.op_resolve","count":739,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":739,"duration":0.096},
{"type":"mark","name":"lsp.inlay_hint","count":116,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":15,"duration":554.794},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":15,"duration":555.396},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":13,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":13,"duration":0.117},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":13,"duration":2.455},
{"type":"measure","name":"lsp.diagnostic","count":71,"duration":558.014},
{"type":"mark","name":"lsp.folding_range","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":11,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"mark","name":"lsp.semantic_tokens_full","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":33,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.inlay_hint","count":117,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":32,"duration":0.057},
{"type":"mark","name":"lsp.inlay_hint","count":118,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"mark","name":"lsp.document_symbol","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":34,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":11,"duration":310.599},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":11,"duration":311.041},
{"type":"measure","name":"lsp.folding_range","count":15,"duration":311.337},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":18,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":58538},"2020"]}},
{"type":"mark","name":"lsp.code_action","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"lsp.code_lens","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":35,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.inlay_hint","count":119,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":0}}}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":18,"duration":166.735},
{"type":"mark","name":"tsc.host.getNavigationTree","count":12,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":18,"duration":472.985},
{"type":"measure","name":"lsp.semantic_tokens_full","count":15,"duration":473.451},
{"type":"measure","name":"tsc.host.getNavigationTree","count":12,"duration":11.703},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":14,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":14,"duration":0.604},
{"type":"measure","name":"tsc.request.getNavigationTree","count":12,"duration":479.736},
{"type":"measure","name":"lsp.get_navigation_tree","count":33,"duration":479.789},
{"type":"measure","name":"lsp.document_symbol","count":31,"duration":480.6},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":14,"duration":159.764},
{"type":"measure","name":"lsp.code_action","count":16,"duration":160.041},
{"type":"measure","name":"lsp.get_navigation_tree","count":34,"duration":189.159},
{"type":"measure","name":"lsp.document_symbol","count":32,"duration":190.281},
{"type":"measure","name":"lsp.get_navigation_tree","count":35,"duration":166.427},
{"type":"measure","name":"lsp.code_lens","count":16,"duration":166.865},
{"type":"mark","name":"lsp.did_change_batched","count":36,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":36,"duration":19.238},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":140,"duration":0.197},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":16,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",141]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":15,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":330,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":330,"duration":0.168},
{"type":"mark","name":"lsp.inlay_hint","count":120,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":28}}}},
{"type":"mark","name":"tsc.op.op_resolve","count":740,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":740,"duration":0.071},
{"type":"mark","name":"lsp.folding_range","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":36,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":16,"duration":699.796},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":12,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":16,"duration":704.867},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":12,"duration":87.786},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":19,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":58617},"2020"]}},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":12,"duration":245.485},
{"type":"measure","name":"lsp.folding_range","count":16,"duration":245.764},
{"type":"mark","name":"lsp.inlay_hint","count":121,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":28}}}},
{"type":"mark","name":"lsp.document_symbol","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":37,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.code_lens","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":38,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":19,"duration":143.46},
{"type":"mark","name":"tsc.host.getNavigationTree","count":13,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":19,"duration":343.321},
{"type":"measure","name":"lsp.semantic_tokens_full","count":16,"duration":343.862},
{"type":"measure","name":"tsc.host.getNavigationTree","count":13,"duration":6.621},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":14,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":14,"duration":0.143},
{"type":"measure","name":"tsc.request.getNavigationTree","count":13,"duration":309.375},
{"type":"measure","name":"lsp.get_navigation_tree","count":36,"duration":309.46},
{"type":"measure","name":"lsp.document_symbol","count":33,"duration":310.048},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":14,"duration":241.56},
{"type":"measure","name":"lsp.diagnostic","count":72,"duration":946.614},
{"type":"measure","name":"lsp.get_navigation_tree","count":37,"duration":91.721},
{"type":"measure","name":"lsp.document_symbol","count":34,"duration":93.145},
{"type":"measure","name":"lsp.get_navigation_tree","count":38,"duration":30.965},
{"type":"measure","name":"lsp.code_lens","count":17,"duration":31.432},
{"type":"measure","name":"lsp.did_save","count":33,"duration":256.8},
{"type":"mark","name":"lsp.inlay_hint","count":122,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":28}}}},
{"type":"mark","name":"lsp.code_action","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":15,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":15,"duration":0.653},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":15,"duration":0.824},
{"type":"measure","name":"lsp.code_action","count":17,"duration":1.168},
{"type":"mark","name":"lsp.did_change_batched","count":37,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":37,"duration":15.567},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":141,"duration":0.19},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":17,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",142]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":16,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":331,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":331,"duration":0.087},
{"type":"mark","name":"tsc.op.op_resolve","count":741,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":741,"duration":0.078},
{"type":"mark","name":"lsp.inlay_hint","count":123,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":28}}}},
{"type":"mark","name":"lsp.folding_range","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":39,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.inlay_hint","count":124,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":28}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":17,"duration":650.063},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":17,"duration":656.53},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":13,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":13,"duration":101.665},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":20,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":58652},"2020"]}},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":13,"duration":428.135},
{"type":"measure","name":"lsp.folding_range","count":17,"duration":428.401},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.code_lens","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":40,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.inlay_hint","count":125,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":28}}}},
{"type":"mark","name":"lsp.document_symbol","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":41,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":20,"duration":184.879},
{"type":"mark","name":"tsc.host.getNavigationTree","count":14,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":20,"duration":571.081},
{"type":"measure","name":"lsp.semantic_tokens_full","count":17,"duration":571.675},
{"type":"measure","name":"tsc.host.getNavigationTree","count":14,"duration":6.715},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":15,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":15,"duration":0.15},
{"type":"measure","name":"tsc.request.getNavigationTree","count":14,"duration":537.905},
{"type":"measure","name":"lsp.get_navigation_tree","count":39,"duration":537.991},
{"type":"measure","name":"lsp.document_symbol","count":35,"duration":538.528},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":15,"duration":304.029},
{"type":"measure","name":"lsp.diagnostic","count":73,"duration":960.755},
{"type":"measure","name":"lsp.get_navigation_tree","count":40,"duration":90.878},
{"type":"measure","name":"lsp.code_lens","count":18,"duration":91.879},
{"type":"measure","name":"lsp.get_navigation_tree","count":41,"duration":46.646},
{"type":"measure","name":"lsp.document_symbol","count":36,"duration":47.547},
{"type":"measure","name":"lsp.did_save","count":34,"duration":109.785},
{"type":"mark","name":"lsp.inlay_hint","count":126,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1508,"character":28}}}},
{"type":"mark","name":"lsp.code_action","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":16,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":16,"duration":1.411},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":16,"duration":2.178},
{"type":"measure","name":"lsp.code_action","count":18,"duration":2.45},
{"type":"mark","name":"lsp.did_close","count":117,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts"}}},
{"type":"measure","name":"lsp.did_close","count":117,"duration":4.144},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":142,"duration":0.19},
{"type":"mark","name":"lsp.did_open","count":121,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","languageId":"typescript","version":1,"text":"import { useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport {\n  EDGE_FUNCTIONS_URL,\n  ENRICHMENT_TIERS,\n  SUPABASE_ANON_TOKEN,\n  ensureSession,\n  getSessionToken,\n} from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport type { BusinessDiscoveryResponse, CampaignConfig } from \"../types\";\n\nexport const useBusinessDiscovery = (\n  onJobCreated?: (jobData: {\n    jobId: string;\n    campaignId: string;\n    status: string;\n    estimatedTime?: number;\n  }) => void\n) => {\n  const { user } = useAuth();\n  const {\n    setLoading,\n    setError,\n    clearLeads,\n    setCurrentCampaign,\n    setCurrentCampaignId,\n  } = useCampaignStore();\n  const [progress, setProgress] = useState(0);\n  const [currentStage, setCurrentStage] = useState<string>(\"\");\n  const [cacheStats] = useState<any>(null);\n\n  const discoveryMutation = useMutation({\n    mutationFn: async (\n      config: CampaignConfig & { selectedTier?: keyof typeof ENRICHMENT_TIERS }\n    ): Promise<BusinessDiscoveryResponse> => {\n      setLoading(true);\n      setError(null);\n      setProgress(10);\n      setCurrentStage(\"Initializing user-aware discovery...\");\n\n      // Reset any existing campaign context before starting a new discovery\n      clearLeads();\n      setCurrentCampaign(null);\n      setCurrentCampaignId(null);\n\n      try {\n        console.log(\"🚀 Starting user-aware business discovery:\", config);\n\n        // Ensure we have a valid session before calling Edge Function\n        const hasSession = await ensureSession();\n        if (!hasSession || !user?.id) {\n          throw new Error(\"Please sign in to run a discovery campaign.\");\n        }\n\n        // Determine enrichment tier\n        const tier = config.selectedTier || \"PROFESSIONAL\";\n        const tierConfig = ENRICHMENT_TIERS[tier];\n        const keywordList = config.keywords\n          ? config.keywords\n              .split(\",\")\n              .map((value) => value.trim())\n              .filter(Boolean)\n          : undefined;\n\n        const discoveryOptions = {\n          tradeAssociation: config.trade_association ?? false,\n          professionalLicense: config.professional_license ?? false,\n          chamberVerification: config.chamber_verification ?? false,\n          apolloDiscovery: tier === \"ENTERPRISE\",\n        };\n\n        setCurrentStage(\n          `Using ${tierConfig.name} tier ($${tierConfig.price}/lead)`\n        );\n        setProgress(20);\n\n        const accessToken = await getSessionToken();\n\n        const billingContext = {\n          tier,\n          tierName: tierConfig.name,\n          unitPrice: tierConfig.price,\n          estimatedBudget: config.max_results * tierConfig.price,\n          currency: \"USD\",\n        };\n\n        // Call background task business discovery with authentication\n        const requestBody = {\n          businessType: config.business_type || config.search_terms,\n          location: config.location,\n          keywords: keywordList,\n          searchRadius: config.search_radius,\n          expandGeography: config.expand_geography,\n          maxResults: config.max_results,\n          budgetLimit: config.max_results * tierConfig.price,\n          minConfidenceScore: config.min_confidence_score || 50,\n          tierKey: tier,\n          tierName: tierConfig.name,\n          tierPrice: tierConfig.price,\n          options: discoveryOptions,\n          sessionUserId: user.id,\n          userId: user.id,\n          billingContext,\n        };\n\n        if (!accessToken) {\n          throw new Error(\n            \"Unable to read session token. Please sign in again.\"\n          );\n        }\n\n        const headers: Record<string, string> = {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${accessToken}`,\n          apikey: SUPABASE_ANON_TOKEN,\n          \"X-Prospect-Session\": accessToken,\n        };\n\n        const response = await fetch(\n          `${EDGE_FUNCTIONS_URL}/business-discovery-background`,\n          {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody),\n          }\n        );\n\n        const rawResponse = await response.json().catch(() => ({}));\n\n        if (!response.ok) {\n          console.error(\"❌ Background discovery error:\", rawResponse);\n          const message =\n            typeof rawResponse?.error === \"string\"\n              ? rawResponse.error\n              : typeof rawResponse?.message === \"string\"\n              ? rawResponse.message\n              : `Edge function request failed: ${response.status}`;\n          throw new Error(message);\n        }\n\n        if (!rawResponse?.success) {\n          const fallbackMessage =\n            typeof rawResponse?.error === \"string\"\n              ? rawResponse.error\n              : \"No data returned from background discovery\";\n          throw new Error(fallbackMessage);\n        }\n\n        console.log(\"✅ Background discovery response:\", rawResponse);\n\n        // For background tasks, we get jobId and campaignId immediately\n        // The actual processing happens in the background\n        const transformedData: BusinessDiscoveryResponse = {\n          campaign_id: rawResponse.campaignId,\n          job_id: rawResponse.jobId, // New: job ID for tracking progress\n          status: rawResponse.status, // New: processing status\n          estimated_time: rawResponse.estimatedTime, // New: estimated completion time\n          realtime_channel: rawResponse.realtimeChannel, // New: for real-time updates\n          total_found: 0, // Will be updated via real-time\n          qualified_count: 0, // Will be updated via real-time\n          total_cost: 0, // Will be updated via real-time\n          processing_time: \"< 100ms\", // Immediate response\n          tier_used: tierConfig.name,\n          cache_performance: undefined,\n          vault_status: \"secured\",\n          census_intelligence: undefined,\n          businesses: [], // Will be populated via real-time updates\n        };\n\n        setProgress(100);\n        setCurrentStage(\"Complete! 🎉\");\n        return transformedData;\n      } catch (error) {\n        console.error(\"❌ User-aware discovery error:\", error);\n        setCurrentStage(\"Failed ❌\");\n        throw error;\n      } finally {\n        setLoading(false);\n      }\n    },\n    onSuccess: (data: BusinessDiscoveryResponse) => {\n      console.log(\"✅ Background job created:\", data);\n\n      // For background jobs, we don't create the full campaign record immediately\n      // The progress page will handle real-time updates and final campaign creation\n\n      setProgress(100);\n      setCurrentStage(\"Background processing started! 🚀\");\n\n      // Navigate to progress page with job ID\n      if (data.job_id && data.campaign_id) {\n        const jobData = {\n          jobId: data.job_id,\n          campaignId: data.campaign_id,\n          status: data.status || \"pending\",\n          estimatedTime: data.estimated_time,\n        };\n\n        console.log(\"Job started:\", jobData);\n\n        // Call the navigation callback if provided\n        if (onJobCreated) {\n          onJobCreated(jobData);\n        }\n\n        setCurrentCampaignId(data.campaign_id);\n      }\n    },\n    onError: (error: any) => {\n      setError(\n        error instanceof Error ? error.message : \"User-aware discovery failed\"\n      );\n      setProgress(0);\n      setCurrentStage(\"Failed ❌\");\n    },\n  });\n\n  return {\n    startDiscovery: discoveryMutation.mutate,\n    isDiscovering: discoveryMutation.isPending,\n    progress,\n    currentStage,\n    cacheStats,\n    error: discoveryMutation.error,\n    data: discoveryMutation.data,\n  };\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_open","count":121,"duration":5.949},
{"type":"mark","name":"lsp.goto_definition","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},"position":{"line":95,"character":10}}},
{"type":"measure","name":"lsp.testing_update","count":143,"duration":0.243},
{"type":"mark","name":"lsp.goto_definition","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},"position":{"line":11,"character":2}}},
{"type":"mark","name":"lsp.goto_definition","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},"position":{"line":208,"character":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":127,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1523,"character":8}}}},
{"type":"mark","name":"lsp.inlay_hint","count":128,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1523,"character":8}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":18,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",144]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":9,"duration":0.563},
{"type":"mark","name":"tsc.op.op_load","count":332,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"tsc.op.op_load","count":332,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":742,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","specifiers":[[false,"@tanstack/react-query"],[false,"react"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../types"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":742,"duration":0.123},
{"type":"mark","name":"tsc.op.op_resolve","count":743,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx","specifiers":[[false,"react"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":743,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":744,"args":{"base":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/ProgressDisplay"],[false,"../contexts/AuthContext"],[false,"../hooks/useJobProgress"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":744,"duration":0.102},
{"type":"mark","name":"tsc.op.op_load","count":333,"args":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts"},
{"type":"measure","name":"tsc.op.op_load","count":333,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":745,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":745,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":746,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":746,"duration":0.061},
{"type":"mark","name":"tsc.op.op_resolve","count":747,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":747,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":748,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":748,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":749,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":749,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":750,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":750,"duration":0.05},
{"type":"mark","name":"tsc.op.op_resolve","count":751,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":751,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":752,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":752,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":753,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":753,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":754,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":754,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":755,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":755,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":756,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":756,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":757,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":757,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":758,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":758,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":759,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":759,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":760,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":760,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":761,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":761,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":762,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":762,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":763,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":763,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":764,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":764,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":765,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":765,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":766,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":766,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":767,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":767,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":768,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":768,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":769,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":769,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":770,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":770,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":771,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":771,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":772,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":772,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":773,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":773,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":774,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":774,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":775,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":775,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":776,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":776,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":777,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":777,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":778,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":778,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":779,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":779,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":780,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":780,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":781,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":781,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":782,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":782,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":783,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":783,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":784,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":784,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":785,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":785,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":786,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":786,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":787,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":787,"duration":0.065},
{"type":"mark","name":"tsc.op.op_resolve","count":788,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":788,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":789,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":789,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":790,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":790,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":791,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":791,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":792,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":792,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":793,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":793,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":794,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":794,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":795,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":795,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":796,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":796,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":797,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":797,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":798,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":798,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":799,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":799,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":800,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":800,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":801,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":801,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":802,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":802,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":803,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":803,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":804,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":804,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":805,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":805,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":806,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":806,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":807,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":807,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":808,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":808,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":809,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":809,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":810,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":810,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":811,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":811,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":812,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":812,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":813,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":813,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":814,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":814,"duration":0.044},
{"type":"mark","name":"tsc.op.op_resolve","count":815,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":815,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":816,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":816,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":817,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":817,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":818,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":818,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":819,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":819,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":820,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":820,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":821,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":821,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":822,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":822,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":823,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":823,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":824,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":824,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":825,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":825,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":826,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":826,"duration":0.05},
{"type":"mark","name":"tsc.op.op_resolve","count":827,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":827,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":828,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":828,"duration":0.054},
{"type":"mark","name":"tsc.op.op_resolve","count":829,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":829,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":830,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":830,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":831,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":831,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":832,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":832,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":833,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":833,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":834,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":834,"duration":0.046},
{"type":"mark","name":"tsc.op.op_resolve","count":835,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":835,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":836,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":836,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":837,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":837,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":838,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":838,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":839,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":839,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":840,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":840,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":841,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":841,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":842,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":842,"duration":0.029},
{"type":"mark","name":"lsp.inlay_hint","count":129,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1523,"character":8}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":18,"duration":415.131},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":18,"duration":419.389},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":16,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":16,"duration":0.101},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":16,"duration":0.151},
{"type":"measure","name":"lsp.did_save","count":35,"duration":420.831},
{"type":"mark","name":"lsp.did_close","count":118,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"}}},
{"type":"measure","name":"lsp.did_close","count":118,"duration":1.035},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":144,"duration":0.164},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.code_action","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"lsp.document_highlight","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"tsc.request.getDocumentHighlights"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":19,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",145]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":10,"duration":0.514},
{"type":"mark","name":"tsc.op.op_resolve","count":843,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx","specifiers":[[false,"react"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":843,"duration":0.062},
{"type":"mark","name":"tsc.op.op_resolve","count":844,"args":{"base":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/ProgressDisplay"],[false,"../contexts/AuthContext"],[false,"../hooks/useJobProgress"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":844,"duration":0.116},
{"type":"mark","name":"tsc.op.op_resolve","count":845,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":845,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":846,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":846,"duration":0.057},
{"type":"mark","name":"tsc.op.op_resolve","count":847,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":847,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":848,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":848,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":849,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":849,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":850,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":850,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":851,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":851,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":852,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":852,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":853,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":853,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":854,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":854,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":855,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":855,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":856,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":856,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":857,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":857,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":858,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":858,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":859,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":859,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":860,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":860,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":861,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":861,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":862,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":862,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":863,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":863,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":864,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":864,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":865,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":865,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":866,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":866,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":867,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":867,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":868,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":868,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":869,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":869,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":870,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":870,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":871,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":871,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":872,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":872,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":873,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":873,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":874,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":874,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":875,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":875,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":876,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":876,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":877,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":877,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":878,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":878,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":879,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":879,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":880,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":880,"duration":0.048},
{"type":"mark","name":"tsc.op.op_resolve","count":881,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":881,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":882,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":882,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":883,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":883,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":884,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":884,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":885,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":885,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":886,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":886,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":887,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":887,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":888,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":888,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":889,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":889,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":890,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":890,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":891,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":891,"duration":0.053},
{"type":"mark","name":"tsc.op.op_resolve","count":892,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":892,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":893,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":893,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":894,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":894,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":895,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":895,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":896,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":896,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":897,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":897,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":898,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":898,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":899,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":899,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":900,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":900,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":901,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":901,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":902,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":902,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":903,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":903,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":904,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":904,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":905,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":905,"duration":0.047},
{"type":"mark","name":"tsc.op.op_resolve","count":906,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":906,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":907,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":907,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":908,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":908,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":909,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":909,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":910,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":910,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":911,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":911,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":912,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":912,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":913,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":913,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":914,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":914,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":915,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":915,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":916,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":916,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":917,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":917,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":918,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":918,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":919,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":919,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":920,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":920,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":921,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":921,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":922,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":922,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":923,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":923,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":924,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":924,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":925,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":925,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":926,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":926,"duration":0.052},
{"type":"mark","name":"tsc.op.op_resolve","count":927,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":927,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":928,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":928,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":929,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":929,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":930,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":930,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":931,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":931,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":932,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":932,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":933,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":933,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":934,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":934,"duration":0.044},
{"type":"mark","name":"tsc.op.op_resolve","count":935,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":935,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":936,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":936,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":937,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":937,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":938,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":938,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":939,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":939,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":940,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":940,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":941,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":941,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":942,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":942,"duration":0.023},
{"type":"measure","name":"lsp.diagnostic","count":74,"duration":269.836},
{"type":"mark","name":"lsp.did_change_batched","count":38,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"mark","name":"tsc.op.op_release","count":69,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"tsc.op.op_release","count":69,"duration":1.258},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":19,"duration":324.216},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":17,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":17,"duration":0.112},
{"type":"mark","name":"tsc.host.getDocumentHighlights","count":3,"args":{"GetDocumentHighlights":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",0,["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]]}},
{"type":"measure","name":"tsc.host.getDocumentHighlights","count":3,"duration":8.723},
{"type":"measure","name":"lsp.did_change_batched","count":38,"duration":204.426},
{"type":"mark","name":"lsp.inlay_hint","count":130,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1523,"character":0}}}},
{"type":"mark","name":"lsp.semantic_tokens_full","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":145,"duration":0.169},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":21,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":59045},"2020"]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":17,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":334,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":334,"duration":0.077},
{"type":"mark","name":"tsc.op.op_resolve","count":943,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":943,"duration":0.086},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.folding_range","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.document_symbol","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":42,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.code_lens","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":43,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.document_symbol","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":44,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.inlay_hint","count":131,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1519,"character":51}}}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":21,"duration":879.399},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":20,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",146]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":21,"duration":884.831},
{"type":"measure","name":"lsp.semantic_tokens_full","count":18,"duration":885.294},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":20,"duration":48.982},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":20,"duration":706.511},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":14,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":14,"duration":54.154},
{"type":"mark","name":"tsc.host.getNavigationTree","count":15,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":14,"duration":762.189},
{"type":"measure","name":"lsp.folding_range","count":18,"duration":762.398},
{"type":"measure","name":"tsc.host.getNavigationTree","count":15,"duration":16.79},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":17,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":17,"duration":0.13},
{"type":"measure","name":"tsc.request.getNavigationTree","count":15,"duration":778.741},
{"type":"measure","name":"lsp.get_navigation_tree","count":42,"duration":778.783},
{"type":"measure","name":"lsp.document_symbol","count":37,"duration":779.5},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":17,"duration":83.027},
{"type":"measure","name":"lsp.diagnostic","count":75,"duration":793.624},
{"type":"measure","name":"lsp.get_navigation_tree","count":43,"duration":586.173},
{"type":"measure","name":"lsp.code_lens","count":19,"duration":587.167},
{"type":"measure","name":"lsp.get_navigation_tree","count":44,"duration":585.678},
{"type":"measure","name":"lsp.document_symbol","count":38,"duration":586.434},
{"type":"measure","name":"lsp.did_save","count":36,"duration":794.351},
{"type":"mark","name":"lsp.inlay_hint","count":132,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1519,"character":51}}}},
{"type":"mark","name":"lsp.code_action","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":18,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":18,"duration":39.742},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":18,"duration":41.885},
{"type":"measure","name":"lsp.code_action","count":20,"duration":42.154},
{"type":"mark","name":"lsp.did_change_batched","count":39,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":39,"duration":50.178},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":146,"duration":0.205},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":21,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",147]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":18,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":335,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":335,"duration":0.083},
{"type":"mark","name":"tsc.op.op_resolve","count":944,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":944,"duration":0.084},
{"type":"mark","name":"lsp.inlay_hint","count":133,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1521,"character":34}}}},
{"type":"mark","name":"lsp.folding_range","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":45,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":21,"duration":595.12},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":15,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":21,"duration":598.588},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"lsp.inlay_hint","count":134,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":34}}}},
{"type":"mark","name":"lsp.inlay_hint","count":135,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":34}}}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":15,"duration":203.168},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":22,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":59461},"2020"]}},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":15,"duration":350.807},
{"type":"measure","name":"lsp.folding_range","count":19,"duration":351.067},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.code_lens","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":46,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.document_symbol","count":40,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":47,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":22,"duration":223.787},
{"type":"mark","name":"tsc.host.getNavigationTree","count":16,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":22,"duration":454.61},
{"type":"measure","name":"lsp.semantic_tokens_full","count":19,"duration":455.102},
{"type":"measure","name":"tsc.host.getNavigationTree","count":16,"duration":8.967},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":18,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":18,"duration":0.15},
{"type":"measure","name":"tsc.request.getNavigationTree","count":16,"duration":463.954},
{"type":"measure","name":"lsp.get_navigation_tree","count":45,"duration":463.992},
{"type":"measure","name":"lsp.document_symbol","count":39,"duration":464.54},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":18,"duration":438.133},
{"type":"measure","name":"lsp.diagnostic","count":76,"duration":1043.173},
{"type":"measure","name":"lsp.get_navigation_tree","count":46,"duration":136.689},
{"type":"measure","name":"lsp.code_lens","count":20,"duration":137.685},
{"type":"measure","name":"lsp.get_navigation_tree","count":47,"duration":92.74},
{"type":"measure","name":"lsp.document_symbol","count":40,"duration":93.553},
{"type":"measure","name":"lsp.did_save","count":37,"duration":148.807},
{"type":"mark","name":"lsp.inlay_hint","count":136,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":34}}}},
{"type":"mark","name":"lsp.code_action","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":19,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":19,"duration":89.158},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":19,"duration":90.315},
{"type":"measure","name":"lsp.code_action","count":21,"duration":91.437},
{"type":"mark","name":"lsp.inlay_hint","count":137,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":34}}}},
{"type":"mark","name":"lsp.did_change_batched","count":40,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":40,"duration":34.93},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":147,"duration":0.182},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.inlay_hint","count":138,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1519,"character":96}}}},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":22,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",148]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":19,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":336,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":336,"duration":0.085},
{"type":"mark","name":"tsc.op.op_resolve","count":945,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":945,"duration":0.078},
{"type":"mark","name":"lsp.folding_range","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":41,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":48,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.document_symbol","count":42,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":49,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.code_lens","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":50,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.inlay_hint","count":139,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1516,"character":46}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":22,"duration":1063.763},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":22,"duration":1065.252},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":16,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":16,"duration":33.85},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":16,"duration":621.88},
{"type":"measure","name":"lsp.folding_range","count":20,"duration":622.151},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":23,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":64503},"2020"]}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":23,"duration":82.645},
{"type":"mark","name":"tsc.host.getNavigationTree","count":17,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":23,"duration":682.85},
{"type":"measure","name":"lsp.semantic_tokens_full","count":20,"duration":683.396},
{"type":"measure","name":"tsc.host.getNavigationTree","count":17,"duration":9.264},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":19,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":19,"duration":0.145},
{"type":"measure","name":"tsc.request.getNavigationTree","count":17,"duration":652.561},
{"type":"measure","name":"lsp.get_navigation_tree","count":48,"duration":652.648},
{"type":"measure","name":"lsp.document_symbol","count":41,"duration":653.197},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":19,"duration":134.055},
{"type":"measure","name":"lsp.diagnostic","count":77,"duration":1199.858},
{"type":"measure","name":"lsp.get_navigation_tree","count":49,"duration":525.704},
{"type":"measure","name":"lsp.document_symbol","count":42,"duration":527.123},
{"type":"measure","name":"lsp.get_navigation_tree","count":50,"duration":519.447},
{"type":"measure","name":"lsp.code_lens","count":21,"duration":519.982},
{"type":"measure","name":"lsp.did_save","count":38,"duration":558.091},
{"type":"mark","name":"lsp.inlay_hint","count":140,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1516,"character":46}}}},
{"type":"mark","name":"lsp.code_action","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":20,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":20,"duration":180.101},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":20,"duration":180.397},
{"type":"measure","name":"lsp.code_action","count":22,"duration":180.656},
{"type":"mark","name":"lsp.did_change_batched","count":41,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":148,"duration":0.184},
{"type":"measure","name":"lsp.did_change_batched","count":41,"duration":18.038},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":23,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",149]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":20,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":337,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":337,"duration":2.232},
{"type":"mark","name":"lsp.inlay_hint","count":141,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":0}}}},
{"type":"mark","name":"tsc.op.op_resolve","count":946,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":946,"duration":0.073},
{"type":"mark","name":"lsp.inlay_hint","count":142,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":0}}}},
{"type":"mark","name":"lsp.folding_range","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":43,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":51,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.inlay_hint","count":143,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1516,"character":19}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":23,"duration":801.451},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":17,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":23,"duration":805.324},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"lsp.document_symbol","count":44,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":52,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":17,"duration":60.565},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":24,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":66770},"2020"]}},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":17,"duration":302.589},
{"type":"measure","name":"lsp.folding_range","count":21,"duration":302.866},
{"type":"mark","name":"lsp.code_lens","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":53,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":24,"duration":93.419},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":24,"duration":361.024},
{"type":"mark","name":"tsc.host.getNavigationTree","count":18,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"lsp.semantic_tokens_full","count":21,"duration":361.568},
{"type":"measure","name":"tsc.host.getNavigationTree","count":18,"duration":7.205},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":20,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":20,"duration":2.163},
{"type":"measure","name":"tsc.request.getNavigationTree","count":18,"duration":358.566},
{"type":"measure","name":"lsp.get_navigation_tree","count":51,"duration":358.648},
{"type":"measure","name":"lsp.document_symbol","count":43,"duration":361.556},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":20,"duration":171.215},
{"type":"measure","name":"lsp.diagnostic","count":78,"duration":980.271},
{"type":"measure","name":"lsp.get_navigation_tree","count":52,"duration":123.13},
{"type":"measure","name":"lsp.document_symbol","count":44,"duration":124.62},
{"type":"measure","name":"lsp.get_navigation_tree","count":53,"duration":101.233},
{"type":"measure","name":"lsp.code_lens","count":22,"duration":101.719},
{"type":"measure","name":"lsp.did_save","count":39,"duration":266.473},
{"type":"mark","name":"lsp.inlay_hint","count":144,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1516,"character":19}}}},
{"type":"mark","name":"lsp.code_action","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":21,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":21,"duration":100.105},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":21,"duration":100.3},
{"type":"measure","name":"lsp.code_action","count":23,"duration":100.523},
{"type":"mark","name":"lsp.inlay_hint","count":145,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":0}}}},
{"type":"mark","name":"lsp.did_change_batched","count":42,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":149,"duration":0.187},
{"type":"measure","name":"lsp.did_change_batched","count":42,"duration":90.952},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.inlay_hint","count":146,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":18}}}},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":24,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",150]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":21,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":338,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":338,"duration":0.205},
{"type":"mark","name":"tsc.op.op_resolve","count":947,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":947,"duration":0.083},
{"type":"mark","name":"lsp.inlay_hint","count":147,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":18}}}},
{"type":"mark","name":"lsp.folding_range","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":45,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":54,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.inlay_hint","count":148,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":18}}}},
{"type":"mark","name":"lsp.document_symbol","count":46,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":55,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.code_lens","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":56,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":24,"duration":1012.836},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":18,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":24,"duration":1013.058},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":18,"duration":21.727},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":25,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":68284},"2020"]}},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":18,"duration":548.408},
{"type":"measure","name":"lsp.folding_range","count":22,"duration":548.709},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":25,"duration":92.412},
{"type":"mark","name":"tsc.host.getNavigationTree","count":19,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":25,"duration":621.748},
{"type":"measure","name":"lsp.semantic_tokens_full","count":22,"duration":622.306},
{"type":"measure","name":"tsc.host.getNavigationTree","count":19,"duration":7.593},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":21,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":21,"duration":0.145},
{"type":"measure","name":"tsc.request.getNavigationTree","count":19,"duration":609.32},
{"type":"measure","name":"lsp.get_navigation_tree","count":54,"duration":609.394},
{"type":"measure","name":"lsp.document_symbol","count":45,"duration":612.367},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":21,"duration":131.072},
{"type":"measure","name":"lsp.diagnostic","count":79,"duration":1144.808},
{"type":"measure","name":"lsp.get_navigation_tree","count":55,"duration":369.197},
{"type":"measure","name":"lsp.document_symbol","count":46,"duration":370.602},
{"type":"measure","name":"lsp.get_navigation_tree","count":56,"duration":196.88},
{"type":"measure","name":"lsp.code_lens","count":23,"duration":197.312},
{"type":"measure","name":"lsp.did_save","count":40,"duration":551.972},
{"type":"mark","name":"lsp.inlay_hint","count":149,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":7}}}},
{"type":"mark","name":"lsp.code_action","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":22,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":22,"duration":112.726},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":22,"duration":115.151},
{"type":"measure","name":"lsp.code_action","count":24,"duration":115.43},
{"type":"mark","name":"lsp.code_lens_resolve","count":1,"args":{"range":{"start":{"line":1422,"character":15},"end":{"line":1422,"character":34}},"data":{"source":"references","uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.references","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1422,"character":15},"context":{"includeDeclaration":false}}},
{"type":"mark","name":"tsc.request.findReferences"},
{"type":"mark","name":"tsc.host.findReferences","count":1,"args":{"FindReferences":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",39146]}},
{"type":"measure","name":"tsc.host.findReferences","count":1,"duration":11.301},
{"type":"measure","name":"tsc.request.findReferences","count":1,"duration":11.464},
{"type":"measure","name":"lsp.references","count":1,"duration":11.574},
{"type":"measure","name":"lsp.code_lens_resolve","count":1,"duration":11.604},
{"type":"mark","name":"lsp.inlay_hint","count":150,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":18}}}},
{"type":"mark","name":"lsp.did_change_batched","count":43,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":43,"duration":38.892},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":25,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",151]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":22,"duration":0.02},
{"type":"measure","name":"lsp.testing_update","count":150,"duration":5.987},
{"type":"mark","name":"tsc.op.op_load","count":339,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":339,"duration":0.21},
{"type":"mark","name":"lsp.inlay_hint","count":151,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":0}}}},
{"type":"mark","name":"tsc.op.op_resolve","count":948,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":948,"duration":0.074},
{"type":"mark","name":"lsp.inlay_hint","count":152,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":0}}}},
{"type":"mark","name":"lsp.folding_range","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":47,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":57,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.inlay_hint","count":153,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":0}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":25,"duration":787.078},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":25,"duration":789.125},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":19,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":19,"duration":14.912},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":26,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":68364},"2020"]}},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":19,"duration":183.45},
{"type":"measure","name":"lsp.folding_range","count":23,"duration":183.72},
{"type":"mark","name":"lsp.document_symbol","count":48,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":58,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.inlay_hint","count":154,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":0}}}},
{"type":"mark","name":"lsp.code_lens","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":59,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":26,"duration":92.371},
{"type":"mark","name":"tsc.host.getNavigationTree","count":20,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":26,"duration":275.99},
{"type":"measure","name":"lsp.semantic_tokens_full","count":23,"duration":276.468},
{"type":"measure","name":"tsc.host.getNavigationTree","count":20,"duration":8.199},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":22,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":22,"duration":0.142},
{"type":"measure","name":"tsc.request.getNavigationTree","count":20,"duration":284.573},
{"type":"measure","name":"lsp.get_navigation_tree","count":57,"duration":284.612},
{"type":"measure","name":"lsp.document_symbol","count":47,"duration":285.168},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":22,"duration":120.722},
{"type":"measure","name":"lsp.diagnostic","count":80,"duration":911.144},
{"type":"measure","name":"lsp.get_navigation_tree","count":58,"duration":49.988},
{"type":"measure","name":"lsp.document_symbol","count":48,"duration":51.441},
{"type":"measure","name":"lsp.get_navigation_tree","count":59,"duration":38.208},
{"type":"measure","name":"lsp.code_lens","count":24,"duration":38.659},
{"type":"measure","name":"lsp.did_save","count":41,"duration":184.79},
{"type":"mark","name":"lsp.inlay_hint","count":155,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":3}}}},
{"type":"mark","name":"lsp.code_action","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":23,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"mark","name":"lsp.code_lens_resolve","count":2,"args":{"range":{"start":{"line":1424,"character":15},"end":{"line":1424,"character":34}},"data":{"source":"references","uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.references","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1424,"character":15},"context":{"includeDeclaration":false}}},
{"type":"mark","name":"tsc.request.findReferences"},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":23,"duration":226.665},
{"type":"mark","name":"tsc.host.findReferences","count":2,"args":{"FindReferences":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",39226]}},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":23,"duration":232.962},
{"type":"measure","name":"lsp.code_action","count":25,"duration":233.244},
{"type":"measure","name":"tsc.host.findReferences","count":2,"duration":5.821},
{"type":"measure","name":"tsc.request.findReferences","count":2,"duration":221.516},
{"type":"measure","name":"lsp.references","count":2,"duration":221.643},
{"type":"measure","name":"lsp.code_lens_resolve","count":2,"duration":221.67},
{"type":"mark","name":"lsp.did_change_batched","count":44,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":151,"duration":0.221},
{"type":"measure","name":"lsp.did_change_batched","count":44,"duration":18.411},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":26,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",152]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":23,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":340,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":340,"duration":0.2},
{"type":"mark","name":"lsp.inlay_hint","count":156,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":11}}}},
{"type":"mark","name":"tsc.op.op_resolve","count":949,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":949,"duration":0.085},
{"type":"mark","name":"lsp.inlay_hint","count":157,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":11}}}},
{"type":"mark","name":"lsp.folding_range","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":49,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":60,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.inlay_hint","count":158,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":11}}}},
{"type":"mark","name":"lsp.code_lens","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":61,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.document_symbol","count":50,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":62,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":26,"duration":1093.051},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":20,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":26,"duration":1094.797},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":20,"duration":21.103},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":27,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":68697},"2020"]}},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":20,"duration":571.282},
{"type":"measure","name":"lsp.folding_range","count":24,"duration":571.565},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":27,"duration":114.154},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":27,"duration":645.032},
{"type":"measure","name":"lsp.semantic_tokens_full","count":24,"duration":645.598},
{"type":"mark","name":"tsc.host.getNavigationTree","count":21,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getNavigationTree","count":21,"duration":7.321},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":23,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":23,"duration":0.142},
{"type":"measure","name":"tsc.request.getNavigationTree","count":21,"duration":651.539},
{"type":"measure","name":"lsp.get_navigation_tree","count":60,"duration":651.598},
{"type":"measure","name":"lsp.document_symbol","count":49,"duration":652.154},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":23,"duration":149.121},
{"type":"measure","name":"lsp.diagnostic","count":81,"duration":1245.895},
{"type":"measure","name":"lsp.get_navigation_tree","count":61,"duration":454.353},
{"type":"measure","name":"lsp.code_lens","count":25,"duration":455.367},
{"type":"measure","name":"lsp.get_navigation_tree","count":62,"duration":429.183},
{"type":"measure","name":"lsp.document_symbol","count":50,"duration":430.053},
{"type":"measure","name":"lsp.did_save","count":42,"duration":585.781},
{"type":"mark","name":"lsp.inlay_hint","count":159,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":52}}}},
{"type":"mark","name":"lsp.code_action","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":24,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":24,"duration":9.795},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":24,"duration":12.204},
{"type":"measure","name":"lsp.code_action","count":26,"duration":12.462},
{"type":"mark","name":"lsp.code_lens_resolve","count":3,"args":{"range":{"start":{"line":1431,"character":15},"end":{"line":1431,"character":34}},"data":{"source":"references","uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.references","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1431,"character":15},"context":{"includeDeclaration":false}}},
{"type":"mark","name":"tsc.request.findReferences"},
{"type":"mark","name":"tsc.host.findReferences","count":3,"args":{"FindReferences":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",39559]}},
{"type":"measure","name":"tsc.host.findReferences","count":3,"duration":1.565},
{"type":"measure","name":"tsc.request.findReferences","count":3,"duration":1.938},
{"type":"measure","name":"lsp.references","count":3,"duration":2.039},
{"type":"measure","name":"lsp.code_lens_resolve","count":3,"duration":2.061},
{"type":"mark","name":"lsp.did_change_batched","count":45,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":45,"duration":43.289},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.testing_update","count":152,"duration":0.212},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":27,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",153]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":24,"duration":0.042},
{"type":"mark","name":"tsc.op.op_load","count":341,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":341,"duration":0.19},
{"type":"mark","name":"lsp.inlay_hint","count":160,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":11}}}},
{"type":"mark","name":"tsc.op.op_resolve","count":950,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":950,"duration":0.089},
{"type":"mark","name":"lsp.folding_range","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":51,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":63,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.inlay_hint","count":161,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":11}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":27,"duration":737.098},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":27,"duration":737.309},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":21,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"mark","name":"lsp.code_lens","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":64,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":21,"duration":28.912},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":28,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":68741},"2020"]}},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":21,"duration":182.265},
{"type":"measure","name":"lsp.folding_range","count":25,"duration":182.568},
{"type":"mark","name":"lsp.document_symbol","count":52,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":65,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":28,"duration":82.173},
{"type":"mark","name":"tsc.host.getNavigationTree","count":22,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":28,"duration":261.828},
{"type":"measure","name":"lsp.semantic_tokens_full","count":25,"duration":262.332},
{"type":"measure","name":"tsc.host.getNavigationTree","count":22,"duration":7.165},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":24,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":24,"duration":0.146},
{"type":"measure","name":"tsc.request.getNavigationTree","count":22,"duration":269.365},
{"type":"measure","name":"lsp.get_navigation_tree","count":63,"duration":269.422},
{"type":"measure","name":"lsp.document_symbol","count":51,"duration":269.981},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":24,"duration":122.444},
{"type":"measure","name":"lsp.diagnostic","count":82,"duration":861.386},
{"type":"measure","name":"lsp.get_navigation_tree","count":64,"duration":98.62},
{"type":"measure","name":"lsp.code_lens","count":26,"duration":99.749},
{"type":"measure","name":"lsp.get_navigation_tree","count":65,"duration":46.145},
{"type":"measure","name":"lsp.document_symbol","count":52,"duration":46.982},
{"type":"measure","name":"lsp.did_save","count":43,"duration":229.147},
{"type":"mark","name":"lsp.inlay_hint","count":162,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":52}}}},
{"type":"mark","name":"lsp.code_action","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"lsp.code_lens_resolve","count":4,"args":{"range":{"start":{"line":1431,"character":15},"end":{"line":1431,"character":34}},"data":{"source":"references","uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.references","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1431,"character":15},"context":{"includeDeclaration":false}}},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":25,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"mark","name":"tsc.request.findReferences"},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":25,"duration":0.574},
{"type":"mark","name":"tsc.host.findReferences","count":4,"args":{"FindReferences":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",39559]}},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":25,"duration":1.783},
{"type":"measure","name":"lsp.code_action","count":27,"duration":2.035},
{"type":"measure","name":"tsc.host.findReferences","count":4,"duration":5.374},
{"type":"measure","name":"tsc.request.findReferences","count":4,"duration":6.077},
{"type":"measure","name":"lsp.references","count":4,"duration":6.165},
{"type":"measure","name":"lsp.code_lens_resolve","count":4,"duration":6.189},
{"type":"mark","name":"lsp.inlay_hint","count":163,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":11}}}},
{"type":"mark","name":"lsp.did_change_batched","count":46,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":46,"duration":44.315},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.testing_update","count":153,"duration":0.206},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":28,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",154]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":25,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":342,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":342,"duration":0.194},
{"type":"mark","name":"lsp.inlay_hint","count":164,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"tsc.op.op_resolve","count":951,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":951,"duration":0.075},
{"type":"mark","name":"lsp.inlay_hint","count":165,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.folding_range","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":53,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":66,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.inlay_hint","count":166,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.code_lens","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":67,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.document_symbol","count":54,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":68,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":28,"duration":904.639},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":28,"duration":904.786},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":22,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":22,"duration":44.127},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":22,"duration":546.295},
{"type":"measure","name":"lsp.folding_range","count":26,"duration":546.568},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":29,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":68902},"2020"]}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":29,"duration":89.671},
{"type":"mark","name":"tsc.host.getNavigationTree","count":23,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":29,"duration":409.868},
{"type":"measure","name":"lsp.semantic_tokens_full","count":26,"duration":410.422},
{"type":"measure","name":"tsc.host.getNavigationTree","count":23,"duration":7.884},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":25,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":25,"duration":0.142},
{"type":"measure","name":"tsc.request.getNavigationTree","count":23,"duration":418.021},
{"type":"measure","name":"lsp.get_navigation_tree","count":66,"duration":418.06},
{"type":"measure","name":"lsp.document_symbol","count":53,"duration":418.636},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":25,"duration":148.297},
{"type":"measure","name":"lsp.diagnostic","count":83,"duration":1055.203},
{"type":"measure","name":"lsp.get_navigation_tree","count":67,"duration":237.54},
{"type":"measure","name":"lsp.code_lens","count":27,"duration":238.824},
{"type":"measure","name":"lsp.get_navigation_tree","count":68,"duration":231.893},
{"type":"measure","name":"lsp.document_symbol","count":54,"duration":232.751},
{"type":"measure","name":"lsp.did_save","count":44,"duration":381.89},
{"type":"mark","name":"lsp.inlay_hint","count":167,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":0}}}},
{"type":"mark","name":"lsp.code_action","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":26,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":26,"duration":0.767},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":26,"duration":0.971},
{"type":"measure","name":"lsp.code_action","count":28,"duration":1.296},
{"type":"mark","name":"lsp.code_lens_resolve","count":5,"args":{"range":{"start":{"line":1435,"character":15},"end":{"line":1435,"character":34}},"data":{"source":"references","uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.references","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1435,"character":15},"context":{"includeDeclaration":false}}},
{"type":"mark","name":"tsc.request.findReferences"},
{"type":"mark","name":"tsc.host.findReferences","count":5,"args":{"FindReferences":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",39720]}},
{"type":"measure","name":"tsc.host.findReferences","count":5,"duration":1.524},
{"type":"measure","name":"tsc.request.findReferences","count":5,"duration":1.648},
{"type":"measure","name":"lsp.references","count":5,"duration":1.757},
{"type":"measure","name":"lsp.code_lens_resolve","count":5,"duration":1.782},
{"type":"mark","name":"lsp.inlay_hint","count":168,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.did_change_batched","count":47,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":47,"duration":25.555},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.testing_update","count":154,"duration":0.202},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":29,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",155]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":26,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":343,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":343,"duration":0.208},
{"type":"mark","name":"tsc.op.op_resolve","count":952,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":952,"duration":0.08},
{"type":"mark","name":"lsp.inlay_hint","count":169,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.inlay_hint","count":170,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.folding_range","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":55,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":69,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.inlay_hint","count":171,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":0}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.inlay_hint","count":172,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":0}}}},
{"type":"mark","name":"lsp.code_lens","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":70,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.document_symbol","count":56,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":71,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.inlay_hint","count":173,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":0}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":29,"duration":1004.479},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":23,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":29,"duration":1006.469},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":23,"duration":55.683},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":23,"duration":640.898},
{"type":"measure","name":"lsp.folding_range","count":27,"duration":641.205},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":30,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":68995},"2020"]}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":30,"duration":87.605},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":30,"duration":518.114},
{"type":"measure","name":"lsp.semantic_tokens_full","count":27,"duration":518.663},
{"type":"mark","name":"tsc.host.getNavigationTree","count":24,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getNavigationTree","count":24,"duration":10.694},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":26,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":26,"duration":0.162},
{"type":"measure","name":"tsc.request.getNavigationTree","count":24,"duration":528.941},
{"type":"measure","name":"lsp.get_navigation_tree","count":69,"duration":529.005},
{"type":"measure","name":"lsp.document_symbol","count":55,"duration":530.996},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":26,"duration":166.213},
{"type":"measure","name":"lsp.diagnostic","count":84,"duration":1174.74},
{"type":"measure","name":"lsp.get_navigation_tree","count":70,"duration":315.887},
{"type":"measure","name":"lsp.code_lens","count":28,"duration":317.031},
{"type":"measure","name":"lsp.get_navigation_tree","count":71,"duration":257.898},
{"type":"measure","name":"lsp.document_symbol","count":56,"duration":258.855},
{"type":"measure","name":"lsp.did_save","count":45,"duration":405.786},
{"type":"mark","name":"lsp.inlay_hint","count":174,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":0}}}},
{"type":"mark","name":"lsp.code_action","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":27,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"mark","name":"lsp.code_lens_resolve","count":6,"args":{"range":{"start":{"line":1435,"character":15},"end":{"line":1435,"character":34}},"data":{"source":"references","uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.references","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1435,"character":15},"context":{"includeDeclaration":false}}},
{"type":"mark","name":"tsc.request.findReferences"},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":27,"duration":99.172},
{"type":"mark","name":"tsc.host.findReferences","count":6,"args":{"FindReferences":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",39813]}},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":27,"duration":100.292},
{"type":"measure","name":"lsp.code_action","count":29,"duration":100.571},
{"type":"measure","name":"tsc.host.findReferences","count":6,"duration":1.526},
{"type":"measure","name":"tsc.request.findReferences","count":6,"duration":99.154},
{"type":"measure","name":"lsp.references","count":6,"duration":99.25},
{"type":"measure","name":"lsp.code_lens_resolve","count":6,"duration":99.273},
{"type":"mark","name":"lsp.did_change_batched","count":48,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":155,"duration":0.199},
{"type":"measure","name":"lsp.did_change_batched","count":48,"duration":13.631},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":30,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",156]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":27,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":344,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":344,"duration":4.017},
{"type":"mark","name":"tsc.op.op_resolve","count":953,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":953,"duration":0.091},
{"type":"mark","name":"lsp.inlay_hint","count":175,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.inlay_hint","count":176,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.folding_range","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":57,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":72,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.inlay_hint","count":177,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":0}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":30,"duration":673.373},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":24,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":30,"duration":673.488},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":24,"duration":33.362},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":31,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":69026},"2020"]}},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":24,"duration":101.004},
{"type":"measure","name":"lsp.folding_range","count":28,"duration":101.304},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"lsp.inlay_hint","count":178,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":0}}}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":31,"duration":112.971},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":31,"duration":208.713},
{"type":"measure","name":"lsp.semantic_tokens_full","count":28,"duration":209.245},
{"type":"mark","name":"tsc.host.getNavigationTree","count":25,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getNavigationTree","count":25,"duration":7.202},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":27,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":27,"duration":0.18},
{"type":"measure","name":"tsc.request.getNavigationTree","count":25,"duration":218.228},
{"type":"measure","name":"lsp.get_navigation_tree","count":72,"duration":218.277},
{"type":"measure","name":"lsp.document_symbol","count":57,"duration":218.875},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":27,"duration":159.862},
{"type":"measure","name":"lsp.diagnostic","count":85,"duration":833.534},
{"type":"measure","name":"lsp.did_save","count":46,"duration":121.224},
{"type":"mark","name":"lsp.code_lens","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":73,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":73,"duration":0.0},
{"type":"measure","name":"lsp.code_lens","count":29,"duration":0.458},
{"type":"mark","name":"lsp.document_symbol","count":58,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":74,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":74,"duration":0.0},
{"type":"measure","name":"lsp.document_symbol","count":58,"duration":0.594},
{"type":"mark","name":"lsp.inlay_hint","count":179,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":180,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":0}}}},
{"type":"mark","name":"lsp.code_action","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":28,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":28,"duration":0.685},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":28,"duration":1.017},
{"type":"measure","name":"lsp.code_action","count":30,"duration":1.321},
{"type":"mark","name":"lsp.code_lens_resolve","count":7,"args":{"range":{"start":{"line":1435,"character":15},"end":{"line":1435,"character":34}},"data":{"source":"references","uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.references","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1435,"character":15},"context":{"includeDeclaration":false}}},
{"type":"mark","name":"tsc.request.findReferences"},
{"type":"mark","name":"tsc.host.findReferences","count":7,"args":{"FindReferences":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",39844]}},
{"type":"measure","name":"tsc.host.findReferences","count":7,"duration":1.719},
{"type":"measure","name":"tsc.request.findReferences","count":7,"duration":1.827},
{"type":"measure","name":"lsp.references","count":7,"duration":1.929},
{"type":"measure","name":"lsp.code_lens_resolve","count":7,"duration":1.953},
{"type":"mark","name":"lsp.did_change_batched","count":49,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":156,"duration":0.198},
{"type":"measure","name":"lsp.did_change_batched","count":49,"duration":15.184},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":31,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",157]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":28,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":345,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":345,"duration":0.21},
{"type":"mark","name":"lsp.inlay_hint","count":181,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"tsc.op.op_resolve","count":954,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":954,"duration":0.076},
{"type":"mark","name":"lsp.inlay_hint","count":182,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.folding_range","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":59,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":75,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":31,"duration":604.417},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":25,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":31,"duration":606.896},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":25,"duration":32.975},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":25,"duration":238.57},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":32,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":69114},"2020"]}},
{"type":"measure","name":"lsp.folding_range","count":29,"duration":238.993},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":32,"duration":68.919},
{"type":"mark","name":"tsc.host.getNavigationTree","count":26,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":32,"duration":279.425},
{"type":"measure","name":"lsp.semantic_tokens_full","count":29,"duration":279.975},
{"type":"measure","name":"tsc.host.getNavigationTree","count":26,"duration":7.169},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":28,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":28,"duration":0.13},
{"type":"measure","name":"tsc.request.getNavigationTree","count":26,"duration":146.613},
{"type":"measure","name":"lsp.get_navigation_tree","count":75,"duration":146.701},
{"type":"measure","name":"lsp.document_symbol","count":59,"duration":147.367},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":28,"duration":116.206},
{"type":"measure","name":"lsp.diagnostic","count":86,"duration":724.703},
{"type":"measure","name":"lsp.did_save","count":47,"duration":48.183},
{"type":"mark","name":"lsp.inlay_hint","count":183,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.code_lens","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":76,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":76,"duration":0.001},
{"type":"measure","name":"lsp.code_lens","count":30,"duration":0.584},
{"type":"mark","name":"lsp.document_symbol","count":60,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":77,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":77,"duration":0.0},
{"type":"measure","name":"lsp.document_symbol","count":60,"duration":0.849},
{"type":"mark","name":"lsp.inlay_hint","count":184,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":0}}}},
{"type":"mark","name":"lsp.code_action","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":29,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":29,"duration":0.653},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":29,"duration":0.846},
{"type":"measure","name":"lsp.code_action","count":31,"duration":1.11},
{"type":"mark","name":"lsp.code_lens_resolve","count":8,"args":{"range":{"start":{"line":1435,"character":15},"end":{"line":1435,"character":34}},"data":{"source":"references","uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.references","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1435,"character":15},"context":{"includeDeclaration":false}}},
{"type":"mark","name":"tsc.request.findReferences"},
{"type":"mark","name":"tsc.host.findReferences","count":8,"args":{"FindReferences":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",39844]}},
{"type":"measure","name":"tsc.host.findReferences","count":8,"duration":1.674},
{"type":"measure","name":"tsc.request.findReferences","count":8,"duration":2.111},
{"type":"measure","name":"lsp.references","count":8,"duration":2.261},
{"type":"measure","name":"lsp.code_lens_resolve","count":8,"duration":2.29},
{"type":"mark","name":"lsp.did_change_batched","count":50,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":157,"duration":0.2},
{"type":"measure","name":"lsp.did_change_batched","count":50,"duration":13.356},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":32,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",158]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":29,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":346,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":346,"duration":0.224},
{"type":"mark","name":"tsc.op.op_resolve","count":955,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":955,"duration":0.088},
{"type":"mark","name":"lsp.inlay_hint","count":185,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.inlay_hint","count":186,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.folding_range","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":61,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":78,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":32,"duration":628.027},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":26,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":32,"duration":628.155},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":26,"duration":56.498},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":26,"duration":264.95},
{"type":"measure","name":"lsp.folding_range","count":30,"duration":265.238},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":33,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":69196},"2020"]}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":33,"duration":61.566},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":33,"duration":309.962},
{"type":"mark","name":"tsc.host.getNavigationTree","count":27,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"lsp.semantic_tokens_full","count":30,"duration":310.489},
{"type":"measure","name":"tsc.host.getNavigationTree","count":27,"duration":6.523},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":29,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":29,"duration":0.124},
{"type":"measure","name":"tsc.request.getNavigationTree","count":27,"duration":169.367},
{"type":"measure","name":"lsp.get_navigation_tree","count":78,"duration":169.831},
{"type":"measure","name":"lsp.document_symbol","count":61,"duration":170.422},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":29,"duration":130.506},
{"type":"measure","name":"lsp.diagnostic","count":87,"duration":760.5},
{"type":"measure","name":"lsp.did_save","count":48,"duration":29.528},
{"type":"mark","name":"lsp.inlay_hint","count":187,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.code_lens","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":79,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":79,"duration":0.0},
{"type":"measure","name":"lsp.code_lens","count":31,"duration":0.464},
{"type":"mark","name":"lsp.document_symbol","count":62,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":80,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":80,"duration":0.0},
{"type":"measure","name":"lsp.document_symbol","count":62,"duration":0.845},
{"type":"mark","name":"lsp.inlay_hint","count":188,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":0}}}},
{"type":"mark","name":"lsp.code_action","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"lsp.code_lens_resolve","count":9,"args":{"range":{"start":{"line":1435,"character":15},"end":{"line":1435,"character":34}},"data":{"source":"references","uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.references","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1435,"character":15},"context":{"includeDeclaration":false}}},
{"type":"mark","name":"tsc.request.findReferences"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":30,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":30,"duration":0.708},
{"type":"mark","name":"tsc.host.findReferences","count":9,"args":{"FindReferences":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",39844]}},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":30,"duration":2.798},
{"type":"measure","name":"lsp.code_action","count":32,"duration":3.046},
{"type":"measure","name":"tsc.host.findReferences","count":9,"duration":4.676},
{"type":"measure","name":"tsc.request.findReferences","count":9,"duration":5.686},
{"type":"measure","name":"lsp.references","count":9,"duration":5.793},
{"type":"measure","name":"lsp.code_lens_resolve","count":9,"duration":5.817},
{"type":"mark","name":"lsp.inlay_hint","count":189,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1346,"character":0},"end":{"line":1521,"character":0}}}},
{"type":"mark","name":"lsp.goto_definition","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":228,"character":6}}},
{"type":"mark","name":"tsc.request.getDefinitionAndBoundSpan"},
{"type":"mark","name":"tsc.host.getDefinitionAndBoundSpan","count":4,"args":{"GetDefinitionAndBoundSpan":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",5472]}},
{"type":"measure","name":"tsc.host.getDefinitionAndBoundSpan","count":4,"duration":184.663},
{"type":"measure","name":"tsc.request.getDefinitionAndBoundSpan","count":4,"duration":192.245},
{"type":"measure","name":"lsp.goto_definition","count":30,"duration":192.418},
{"type":"mark","name":"lsp.goto_definition","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1808,"character":10}}},
{"type":"mark","name":"tsc.request.getDefinitionAndBoundSpan"},
{"type":"mark","name":"tsc.host.getDefinitionAndBoundSpan","count":5,"args":{"GetDefinitionAndBoundSpan":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",52282]}},
{"type":"measure","name":"tsc.host.getDefinitionAndBoundSpan","count":5,"duration":2.731},
{"type":"measure","name":"tsc.request.getDefinitionAndBoundSpan","count":5,"duration":3.237},
{"type":"measure","name":"lsp.goto_definition","count":31,"duration":3.392},
{"type":"mark","name":"lsp.goto_definition","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1808,"character":10}}},
{"type":"mark","name":"tsc.request.getDefinitionAndBoundSpan"},
{"type":"mark","name":"tsc.host.getDefinitionAndBoundSpan","count":6,"args":{"GetDefinitionAndBoundSpan":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",52282]}},
{"type":"measure","name":"tsc.host.getDefinitionAndBoundSpan","count":6,"duration":0.928},
{"type":"measure","name":"tsc.request.getDefinitionAndBoundSpan","count":6,"duration":1.127},
{"type":"measure","name":"lsp.goto_definition","count":32,"duration":1.283},
{"type":"mark","name":"lsp.inlay_hint","count":190,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.inlay_hint","count":191,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1522,"character":14}}}},
{"type":"mark","name":"lsp.did_change_batched","count":51,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":51,"duration":142.361},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":158,"duration":0.206},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.inlay_hint","count":192,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1522,"character":37}}}},
{"type":"mark","name":"lsp.code_lens","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":81,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":33,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",159]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":30,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":347,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":347,"duration":0.236},
{"type":"mark","name":"tsc.op.op_resolve","count":956,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":956,"duration":0.084},
{"type":"mark","name":"lsp.folding_range","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.semantic_tokens_full","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":63,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":82,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.document_symbol","count":64,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":83,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.inlay_hint","count":193,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1522,"character":37}}}},
{"type":"mark","name":"lsp.inlay_hint","count":194,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1522,"character":37}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":33,"duration":1464.698},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":33,"duration":1469.831},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.getNavigationTree","count":28,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getNavigationTree","count":28,"duration":51.785},
{"type":"measure","name":"tsc.request.getNavigationTree","count":28,"duration":1525.003},
{"type":"measure","name":"lsp.get_navigation_tree","count":81,"duration":1525.06},
{"type":"measure","name":"lsp.code_lens","count":32,"duration":1525.43},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":27,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"lsp.get_navigation_tree","count":82,"duration":1007.415},
{"type":"measure","name":"lsp.document_symbol","count":63,"duration":1008.247},
{"type":"measure","name":"lsp.get_navigation_tree","count":83,"duration":1018.763},
{"type":"measure","name":"lsp.document_symbol","count":64,"duration":1019.689},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":27,"duration":72.571},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":34,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":69774},"2020"]}},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":27,"duration":1080.219},
{"type":"measure","name":"lsp.folding_range","count":31,"duration":1080.493},
{"type":"mark","name":"lsp.inlay_hint","count":195,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1347,"character":0},"end":{"line":1522,"character":37}}}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":34,"duration":198.829},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":34,"duration":1277.529},
{"type":"measure","name":"lsp.semantic_tokens_full","count":31,"duration":1278.009},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":30,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":30,"duration":0.159},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":30,"duration":333.862},
{"type":"measure","name":"lsp.diagnostic","count":88,"duration":1807.712},
{"type":"measure","name":"lsp.did_save","count":49,"duration":507.655},
{"type":"mark","name":"lsp.code_lens_resolve","count":10,"args":{"range":{"start":{"line":1452,"character":15},"end":{"line":1452,"character":34}},"data":{"source":"references","uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.references","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1452,"character":15},"context":{"includeDeclaration":false}}},
{"type":"mark","name":"tsc.request.findReferences"},
{"type":"mark","name":"tsc.host.findReferences","count":10,"args":{"FindReferences":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",40023]}},
{"type":"measure","name":"tsc.host.findReferences","count":10,"duration":1.961},
{"type":"measure","name":"tsc.request.findReferences","count":10,"duration":2.131},
{"type":"measure","name":"lsp.references","count":10,"duration":2.252},
{"type":"measure","name":"lsp.code_lens_resolve","count":10,"duration":2.276},
{"type":"mark","name":"lsp.code_action","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":31,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":31,"duration":0.664},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":31,"duration":2.113},
{"type":"measure","name":"lsp.code_action","count":33,"duration":2.378},
{"type":"mark","name":"lsp.goto_definition","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx"},"position":{"line":27,"character":8}}},
{"type":"mark","name":"lsp.did_open","count":122,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts","languageId":"typescript","version":5,"text":"import { create } from \"zustand\";\nimport type { BusinessLead, CampaignResult, CampaignStore } from \"../types\";\nimport { sanitizeLeadCollection } from \"./utils/leadSanitizers\";\n\ninterface CampaignActions {\n  addCampaign: (campaign: CampaignResult) => void;\n  updateCampaign: (\n    campaignId: string,\n    updates: Partial<CampaignResult>\n  ) => void;\n  setCurrentCampaign: (campaign: CampaignResult | null) => void;\n  setCurrentCampaignId: (campaignId: string | null) => void;\n  addLeads: (leads: BusinessLead[]) => void;\n  setCampaignLeads: (campaignId: string, leads: BusinessLead[]) => void;\n  updateLead: (leadId: string, updates: Partial<BusinessLead>) => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  clearLeads: () => void;\n  reset: () => void;\n  ensureUniqueCampaignHistory: () => void;\n}\n\nconst initialState: CampaignStore = {\n  campaigns: [],\n  currentCampaign: null,\n  currentCampaignId: null,\n  leads: [],\n  isLoading: false,\n  error: null,\n};\n\nconst getCampaignKey = (campaign: CampaignResult): string | null => {\n  if (campaign.campaign_id) {\n    return campaign.campaign_id;\n  }\n\n  const fallbackId = (campaign as { id?: string | number }).id;\n  return fallbackId != null ? String(fallbackId) : null;\n};\n\n// Keeps newest campaign entry while removing duplicates by campaign identifier.\nconst dedupeCampaigns = (campaigns: CampaignResult[]): CampaignResult[] => {\n  const seen = new Set<string>();\n  const uniqueCampaigns: CampaignResult[] = [];\n\n  for (const campaign of campaigns) {\n    const key = getCampaignKey(campaign);\n\n    if (key === null) {\n      uniqueCampaigns.push(campaign);\n      continue;\n    }\n\n    if (seen.has(key)) {\n      continue;\n    }\n\n    seen.add(key);\n    uniqueCampaigns.push(campaign);\n  }\n\n  return uniqueCampaigns;\n};\n\nexport const useCampaignStore = create<CampaignStore & CampaignActions>()(\n  (set) => ({\n    ...initialState,\n\n    addCampaign: (campaign) =>\n      set((state) => ({\n        campaigns: dedupeCampaigns([campaign, ...state.campaigns]),\n      })),\n\n    updateCampaign: (campaignId, updates) =>\n      set((state) => ({\n        campaigns: dedupeCampaigns(\n          state.campaigns.map((c) =>\n            c.campaign_id === campaignId ? { ...c, ...updates } : c\n          )\n        ),\n        currentCampaign:\n          state.currentCampaign?.campaign_id === campaignId\n            ? { ...state.currentCampaign, ...updates }\n            : state.currentCampaign,\n      })),\n\n    setCurrentCampaign: (campaign) =>\n      set({\n        currentCampaign: campaign,\n        currentCampaignId: campaign?.campaign_id ?? null,\n      }),\n\n    setCurrentCampaignId: (campaignId) =>\n      set({ currentCampaignId: campaignId }),\n\n    addLeads: (leads) =>\n      set((state) => {\n        if (!Array.isArray(leads)) {\n          console.warn(\"[campaignStore] addLeads called with non-array\", {\n            type: typeof leads,\n          });\n          return state;\n        }\n\n        try {\n          const merged = new Map<string, BusinessLead>();\n          const existingLeads = state.leads || [];\n          const incomingLeads = sanitizeLeadCollection(leads, null);\n\n          for (const lead of existingLeads) {\n            if (lead?.id != null) {\n              merged.set(String(lead.id), lead);\n            }\n          }\n          for (const lead of incomingLeads) {\n            merged.set(String(lead.id), lead);\n          }\n          return { leads: Array.from(merged.values()) };\n        } catch (error) {\n          console.error(\"[campaignStore] addLeads error\", {\n            error: error instanceof Error ? error.message : String(error),\n            stack: error instanceof Error ? error.stack : undefined,\n          });\n          return state;\n        }\n      }),\n\n    setCampaignLeads: (campaignId, leads) =>\n      set((state) => {\n        if (!campaignId) {\n          console.warn(\n            \"[campaignStore] setCampaignLeads called without campaignId\",\n            {\n              leadsType: typeof leads,\n            }\n          );\n          return state;\n        }\n\n        if (!Array.isArray(leads)) {\n          console.warn(\"[campaignStore] Non-array leads payload ignored\", {\n            campaignId,\n            payload: leads,\n          });\n          return state;\n        }\n\n        try {\n          const merged = new Map<string, BusinessLead>();\n          const existingLeads = state.leads || [];\n          const incomingLeads = sanitizeLeadCollection(leads, campaignId);\n\n          for (const lead of existingLeads) {\n            if (lead?.campaign_id === campaignId) {\n              continue;\n            }\n            if (lead?.id != null) {\n              merged.set(String(lead.id), lead);\n            }\n          }\n\n          if (incomingLeads.length === 0 && leads.length > 0) {\n            console.warn(\n              \"[campaignStore] All incoming leads dropped by sanitizer\",\n              {\n                campaignId,\n                originalSize: leads.length,\n              }\n            );\n          }\n\n          for (const lead of incomingLeads) {\n            merged.set(String(lead.id), lead);\n          }\n\n          return { leads: Array.from(merged.values()) };\n        } catch (error) {\n          console.error(\"[campaignStore] setCampaignLeads error\", {\n            campaignId,\n            error: error instanceof Error ? error.message : String(error),\n            stack: error instanceof Error ? error.stack : undefined,\n          });\n          return state;\n        }\n      }),\n\n    updateLead: (leadId, updates) =>\n      set((state) => {\n        try {\n          return {\n            leads: state.leads.map((l) =>\n              l.id === leadId ? { ...l, ...updates } : l\n            ),\n          };\n        } catch (error) {\n          console.error(\"[campaignStore] updateLead error\", {\n            leadId,\n            error: error instanceof Error ? error.message : String(error),\n          });\n          return state;\n        }\n      }),\n\n    setLoading: (loading) => set({ isLoading: loading }),\n\n    setError: (error) => set({ error }),\n\n    clearLeads: () => set({ leads: [] }),\n\n    reset: () => set(initialState),\n\n    ensureUniqueCampaignHistory: () =>\n      set((state) => ({\n        campaigns: dedupeCampaigns(state.campaigns),\n      })),\n  })\n);\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":159,"duration":0.212},
{"type":"measure","name":"lsp.did_open","count":122,"duration":14.869},
{"type":"mark","name":"lsp.document_symbol","count":65,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.did_open","count":123,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/logging/logging-campaign-manager.js","languageId":"javascript","version":1,"text":"/**\r\n * Campaign Result Logger\r\n * \r\n * Logs campaign results for admin review and algorithm improvement\r\n * Tracks success rates, cost efficiency, and data quality metrics\r\n */\r\n\r\nconst fs = require('fs').promises;\r\nconst path = require('path');\r\n\r\nclass CampaignLogger {\r\n    constructor() {\r\n        this.logDir = path.join(__dirname, '../../logs');\r\n        this.campaignLogFile = path.join(this.logDir, 'campaign-results.json');\r\n        this.statsFile = path.join(this.logDir, 'campaign-stats.json');\r\n        \r\n        this.ensureLogDirectory();\r\n    }\r\n\r\n    /**\r\n     * Log a completed campaign with all results and metrics\r\n     */\r\n    async logCampaignResults(campaignData) {\r\n        try {\r\n            console.log('📊 Logging campaign results...');\r\n\r\n            const logEntry = {\r\n                campaignId: this.generateCampaignId(),\r\n                timestamp: new Date().toISOString(),\r\n                parameters: {\r\n                    businessType: campaignData.businessType,\r\n                    location: campaignData.location,\r\n                    businessSize: campaignData.businessSize,\r\n                    targetCount: campaignData.targetCount\r\n                },\r\n                results: {\r\n                    totalBusinessesFound: campaignData.businesses?.length || 0,\r\n                    businessesWithOwners: this.countBusinessesWithOwners(campaignData.businesses),\r\n                    businessesWithEmails: this.countBusinessesWithEmails(campaignData.businesses),\r\n                    businessesWithVerifiedEmails: this.countBusinessesWithVerifiedEmails(campaignData.businesses),\r\n                    averageQualityGrade: this.calculateAverageQualityGrade(campaignData.businesses),\r\n                    averageConfidenceScore: this.calculateAverageConfidence(campaignData.businesses)\r\n                },\r\n                costs: {\r\n                    totalEstimatedCost: campaignData.estimatedCost || 0,\r\n                    totalActualCost: this.calculateTotalCost(campaignData.businesses),\r\n                    costPerQualifiedLead: this.calculateCostPerLead(campaignData.businesses),\r\n                    apiUsage: this.summarizeApiUsage(campaignData.businesses)\r\n                },\r\n                performance: {\r\n                    duration: campaignData.duration || 0,\r\n                    businessesPerMinute: this.calculateProcessingRate(campaignData.businesses, campaignData.duration),\r\n                    successRate: this.calculateSuccessRate(campaignData.businesses),\r\n                    qualityDistribution: this.calculateQualityDistribution(campaignData.businesses)\r\n                },\r\n                sources: this.summarizeSources(campaignData.businesses)\r\n            };\r\n\r\n            // Add to campaign log\r\n            await this.appendToCampaignLog(logEntry);\r\n\r\n            // Update aggregate statistics\r\n            await this.updateAggregateStats(logEntry);\r\n\r\n            console.log(`✅ Campaign ${logEntry.campaignId} logged successfully`);\r\n            return logEntry.campaignId;\r\n\r\n        } catch (error) {\r\n            console.error('Failed to log campaign results:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get campaign statistics for admin dashboard\r\n     */\r\n    async getCampaignStats() {\r\n        try {\r\n            const statsData = await fs.readFile(this.statsFile, 'utf8');\r\n            return JSON.parse(statsData);\r\n        } catch (error) {\r\n            // Return default stats if file doesn't exist\r\n            return this.getDefaultStats();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get recent campaign results\r\n     */\r\n    async getRecentCampaigns(limit = 10) {\r\n        try {\r\n            const logData = await fs.readFile(this.campaignLogFile, 'utf8');\r\n            const campaigns = JSON.parse(logData);\r\n            \r\n            // Return most recent campaigns\r\n            return campaigns\r\n                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))\r\n                .slice(0, limit);\r\n        } catch (error) {\r\n            console.error('Failed to get recent campaigns:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate usage report for specific date range\r\n     */\r\n    async getUsageReport(startDate, endDate) {\r\n        try {\r\n            const campaigns = await this.getCampaignsBetweenDates(startDate, endDate);\r\n            \r\n            const report = {\r\n                dateRange: { startDate, endDate },\r\n                totalCampaigns: campaigns.length,\r\n                totalBusinessesProcessed: campaigns.reduce((sum, c) => sum + c.results.totalBusinessesFound, 0),\r\n                totalCost: campaigns.reduce((sum, c) => sum + c.costs.totalActualCost, 0),\r\n                averageSuccessRate: this.calculateAverageSuccessRateForCampaigns(campaigns),\r\n                costTrends: this.calculateCostTrends(campaigns),\r\n                qualityTrends: this.calculateQualityTrends(campaigns),\r\n                apiUsageSummary: this.summarizeApiUsageForCampaigns(campaigns)\r\n            };\r\n\r\n            return report;\r\n\r\n        } catch (error) {\r\n            console.error('Failed to generate usage report:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility methods for calculating metrics\r\n     */\r\n    countBusinessesWithOwners(businesses) {\r\n        if (!businesses) return 0;\r\n        return businesses.filter(b => b.ownerName).length;\r\n    }\r\n\r\n    countBusinessesWithEmails(businesses) {\r\n        if (!businesses) return 0;\r\n        return businesses.filter(b => b.ownerEmail).length;\r\n    }\r\n\r\n    countBusinessesWithVerifiedEmails(businesses) {\r\n        if (!businesses) return 0;\r\n        return businesses.filter(b => \r\n            b.ownerEmail && \r\n            b.emailVerification && \r\n            b.emailVerification.isValid\r\n        ).length;\r\n    }\r\n\r\n    calculateAverageQualityGrade(businesses) {\r\n        if (!businesses || businesses.length === 0) return 'F';\r\n        \r\n        const gradeValues = { 'A': 5, 'B': 4, 'C': 3, 'D': 2, 'F': 1 };\r\n        const reverseGrades = { 5: 'A', 4: 'B', 3: 'C', 2: 'D', 1: 'F' };\r\n        \r\n        const totalValue = businesses.reduce((sum, b) => {\r\n            const grade = b.qualityGrade || 'F';\r\n            return sum + (gradeValues[grade] || 1);\r\n        }, 0);\r\n        \r\n        const averageValue = Math.round(totalValue / businesses.length);\r\n        return reverseGrades[averageValue] || 'F';\r\n    }\r\n\r\n    calculateAverageConfidence(businesses) {\r\n        if (!businesses || businesses.length === 0) return 0;\r\n        \r\n        const totalConfidence = businesses.reduce((sum, b) => sum + (b.confidence || 0), 0);\r\n        return Math.round(totalConfidence / businesses.length);\r\n    }\r\n\r\n    calculateTotalCost(businesses) {\r\n        if (!businesses) return 0;\r\n        return businesses.reduce((sum, b) => sum + (b.actualCost || 0), 0);\r\n    }\r\n\r\n    calculateCostPerLead(businesses) {\r\n        const qualifiedBusinesses = this.countBusinessesWithOwners(businesses);\r\n        const totalCost = this.calculateTotalCost(businesses);\r\n        \r\n        return qualifiedBusinesses > 0 ? totalCost / qualifiedBusinesses : 0;\r\n    }\r\n\r\n    calculateProcessingRate(businesses, duration) {\r\n        if (!businesses || !duration || duration === 0) return 0;\r\n        return Math.round((businesses.length / duration) * 60); // businesses per minute\r\n    }\r\n\r\n    calculateSuccessRate(businesses) {\r\n        if (!businesses || businesses.length === 0) return 0;\r\n        const successful = this.countBusinessesWithOwners(businesses);\r\n        return Math.round((successful / businesses.length) * 100);\r\n    }\r\n\r\n    calculateQualityDistribution(businesses) {\r\n        if (!businesses) return { A: 0, B: 0, C: 0, D: 0, F: 0 };\r\n        \r\n        const distribution = { A: 0, B: 0, C: 0, D: 0, F: 0 };\r\n        businesses.forEach(b => {\r\n            const grade = b.qualityGrade || 'F';\r\n            if (distribution[grade] !== undefined) {\r\n                distribution[grade]++;\r\n            }\r\n        });\r\n        \r\n        return distribution;\r\n    }\r\n\r\n    summarizeApiUsage(businesses) {\r\n        if (!businesses) return { free: 0, lowCost: 0, expensive: 0 };\r\n        \r\n        const usage = { free: 0, lowCost: 0, expensive: 0 };\r\n        businesses.forEach(b => {\r\n            if (b.sources) {\r\n                b.sources.forEach(source => {\r\n                    if (source.includes('state_registries') || source.includes('opencorporates')) {\r\n                        usage.free++;\r\n                    } else if (source.includes('hunter') || source.includes('neverbounce')) {\r\n                        usage.lowCost++;\r\n                    } else if (source.includes('linkedin')) {\r\n                        usage.expensive++;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        \r\n        return usage;\r\n    }\r\n\r\n    summarizeSources(businesses) {\r\n        if (!businesses) return {};\r\n        \r\n        const sources = {};\r\n        businesses.forEach(b => {\r\n            if (b.sources) {\r\n                b.sources.forEach(source => {\r\n                    sources[source] = (sources[source] || 0) + 1;\r\n                });\r\n            }\r\n        });\r\n        \r\n        return sources;\r\n    }\r\n\r\n    /**\r\n     * File operations\r\n     */\r\n    async ensureLogDirectory() {\r\n        try {\r\n            await fs.access(this.logDir);\r\n        } catch (error) {\r\n            await fs.mkdir(this.logDir, { recursive: true });\r\n        }\r\n    }\r\n\r\n    async appendToCampaignLog(logEntry) {\r\n        try {\r\n            let existingData = [];\r\n            \r\n            try {\r\n                const data = await fs.readFile(this.campaignLogFile, 'utf8');\r\n                existingData = JSON.parse(data);\r\n            } catch (error) {\r\n                // File doesn't exist yet, start with empty array\r\n            }\r\n            \r\n            existingData.push(logEntry);\r\n            \r\n            // Keep only last 1000 campaigns to prevent file from growing too large\r\n            if (existingData.length > 1000) {\r\n                existingData = existingData.slice(-1000);\r\n            }\r\n            \r\n            await fs.writeFile(this.campaignLogFile, JSON.stringify(existingData, null, 2));\r\n        } catch (error) {\r\n            console.error('Failed to append to campaign log:', error);\r\n        }\r\n    }\r\n\r\n    async updateAggregateStats(logEntry) {\r\n        try {\r\n            let stats = await this.getCampaignStats();\r\n            \r\n            // Update aggregate statistics\r\n            stats.totalCampaigns++;\r\n            stats.totalBusinessesProcessed += logEntry.results.totalBusinessesFound;\r\n            stats.totalCost += logEntry.costs.totalActualCost;\r\n            stats.totalOwnerFound += logEntry.results.businessesWithOwners;\r\n            stats.totalEmailsFound += logEntry.results.businessesWithEmails;\r\n            stats.totalEmailsVerified += logEntry.results.businessesWithVerifiedEmails;\r\n            \r\n            // Update averages\r\n            stats.averageCostPerLead = stats.totalOwnerFound > 0 ? \r\n                stats.totalCost / stats.totalOwnerFound : 0;\r\n            stats.averageSuccessRate = stats.totalBusinessesProcessed > 0 ? \r\n                (stats.totalOwnerFound / stats.totalBusinessesProcessed) * 100 : 0;\r\n            \r\n            // Update API usage\r\n            const apiUsage = logEntry.costs.apiUsage;\r\n            stats.apiUsage.free += apiUsage.free;\r\n            stats.apiUsage.lowCost += apiUsage.lowCost;\r\n            stats.apiUsage.expensive += apiUsage.expensive;\r\n            \r\n            stats.lastUpdated = new Date().toISOString();\r\n            \r\n            await fs.writeFile(this.statsFile, JSON.stringify(stats, null, 2));\r\n        } catch (error) {\r\n            console.error('Failed to update aggregate stats:', error);\r\n        }\r\n    }\r\n\r\n    getDefaultStats() {\r\n        return {\r\n            totalCampaigns: 0,\r\n            totalBusinessesProcessed: 0,\r\n            totalCost: 0,\r\n            totalOwnerFound: 0,\r\n            totalEmailsFound: 0,\r\n            totalEmailsVerified: 0,\r\n            averageCostPerLead: 0,\r\n            averageSuccessRate: 0,\r\n            apiUsage: { free: 0, lowCost: 0, expensive: 0 },\r\n            lastUpdated: new Date().toISOString()\r\n        };\r\n    }\r\n\r\n    generateCampaignId() {\r\n        const timestamp = Date.now();\r\n        const random = Math.random().toString(36).substring(2, 8);\r\n        return `campaign_${timestamp}_${random}`;\r\n    }\r\n\r\n    async getCampaignsBetweenDates(startDate, endDate) {\r\n        try {\r\n            const campaigns = await this.getRecentCampaigns(1000);\r\n            return campaigns.filter(c => {\r\n                const campaignDate = new Date(c.timestamp);\r\n                return campaignDate >= new Date(startDate) && campaignDate <= new Date(endDate);\r\n            });\r\n        } catch (error) {\r\n            console.error('Failed to get campaigns between dates:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    calculateAverageSuccessRateForCampaigns(campaigns) {\r\n        if (campaigns.length === 0) return 0;\r\n        const totalRate = campaigns.reduce((sum, c) => sum + c.performance.successRate, 0);\r\n        return Math.round(totalRate / campaigns.length);\r\n    }\r\n\r\n    calculateCostTrends(campaigns) {\r\n        return campaigns.map(c => ({\r\n            date: c.timestamp,\r\n            totalCost: c.costs.totalActualCost,\r\n            costPerLead: c.costs.costPerQualifiedLead\r\n        }));\r\n    }\r\n\r\n    calculateQualityTrends(campaigns) {\r\n        return campaigns.map(c => ({\r\n            date: c.timestamp,\r\n            averageGrade: c.results.averageQualityGrade,\r\n            successRate: c.performance.successRate\r\n        }));\r\n    }\r\n\r\n    summarizeApiUsageForCampaigns(campaigns) {\r\n        const summary = { free: 0, lowCost: 0, expensive: 0 };\r\n        campaigns.forEach(c => {\r\n            summary.free += c.costs.apiUsage.free;\r\n            summary.lowCost += c.costs.apiUsage.lowCost;\r\n            summary.expensive += c.costs.apiUsage.expensive;\r\n        });\r\n        return summary;\r\n    }\r\n}\r\n\r\nmodule.exports = CampaignLogger;"}}},
{"type":"measure","name":"lsp.did_open","count":123,"duration":20.933},
{"type":"mark","name":"lsp.goto_definition","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/logging/logging-campaign-manager.js"},"position":{"line":337,"character":18}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":160,"duration":0.246},
{"type":"mark","name":"lsp.did_open","count":124,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts","languageId":"typescript","version":5,"text":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { supabase } from \"../lib/supabase\";\nimport type { BusinessLead, CampaignResult } from \"../types\";\nimport { transformCampaignData } from \"../utils/campaignTransforms\";\n\ninterface UseCampaignResultsOptions {\n  page?: number;\n  pageSize?: number;\n  enabled?: boolean;\n}\n\ninterface CampaignResultsQuery {\n  campaign: CampaignResult | null;\n  leads: BusinessLead[];\n  count: number;\n}\n\nexport const useCampaignResults = (\n  campaignId: string | undefined | null,\n  options: UseCampaignResultsOptions = {}\n) => {\n  const { user } = useAuth();\n  const pageSize = Math.max(options.pageSize ?? 50, 1);\n  const page = Math.max(options.page ?? 0, 0);\n  const enabled = Boolean(options.enabled ?? true);\n\n  const query = useQuery<CampaignResultsQuery>({\n    queryKey: [\n      \"campaign-results\",\n      user?.id ?? \"anonymous\",\n      campaignId ?? \"none\",\n      page,\n      pageSize,\n    ],\n    enabled: Boolean(user?.id) && Boolean(campaignId) && enabled,\n    staleTime: 60 * 1000,\n    queryFn: async () => {\n      if (!user?.id || !campaignId) {\n        return { campaign: null, leads: [], count: 0 };\n      }\n\n      const { data: campaignRecord, error: campaignError } = await supabase\n        .from(\"campaigns\")\n        .select(\n          \"id,business_type,location,status,total_cost,results_count,created_at,updated_at\"\n        )\n        .eq(\"id\", campaignId)\n        .eq(\"user_id\", user.id)\n        .maybeSingle();\n\n      if (campaignError) {\n        throw campaignError;\n      }\n\n      if (!campaignRecord) {\n        return { campaign: null, leads: [], count: 0 };\n      }\n\n      const rangeStart = page * pageSize;\n      const rangeEnd = rangeStart + pageSize - 1;\n\n      const {\n        data: leadsData,\n        error: leadsError,\n        count,\n      } = await supabase\n        .from(\"leads\")\n        .select(\n          \"id,campaign_id,business_name,address,phone,website,email,confidence_score,validation_cost,enrichment_data,created_at\",\n          { count: \"exact\" }\n        )\n        .eq(\"campaign_id\", campaignId)\n        .eq(\"user_id\", user.id)\n        .order(\"confidence_score\", { ascending: false })\n        .range(rangeStart, rangeEnd);\n\n      if (leadsError) {\n        throw leadsError;\n      }\n\n      if (!Array.isArray(leadsData)) {\n        console.warn(\"[useCampaignResults] Non-array leads response\", {\n          campaignId,\n          typeofData: typeof leadsData,\n          raw: leadsData,\n        });\n        const fallbackResult = transformCampaignData(campaignRecord, [], {});\n        return {\n          campaign: fallbackResult.campaignResult,\n          leads: [],\n          count: count ?? 0,\n        };\n      }\n\n      let transformedData;\n      try {\n        transformedData = transformCampaignData(campaignRecord, leadsData, {});\n      } catch (transformError) {\n        console.error(\"[useCampaignResults] Transform error\", {\n          campaignId,\n          error:\n            transformError instanceof Error\n              ? transformError.message\n              : String(transformError),\n          leadsDataType: typeof leadsData,\n          leadsDataLength: Array.isArray(leadsData)\n            ? leadsData.length\n            : \"not-array\",\n        });\n        const fallbackResult = transformCampaignData(campaignRecord, [], {});\n        return {\n          campaign: fallbackResult.campaignResult,\n          leads: [],\n          count: count ?? 0,\n        };\n      }\n\n      const { campaignResult, leads } = transformedData;\n\n      if (!Array.isArray(leads)) {\n        console.error(\n          \"[useCampaignResults] Transform returned non-array leads\",\n          {\n            campaignId,\n            transformedLeadsType: typeof leads,\n          }\n        );\n        return {\n          campaign: campaignResult,\n          leads: [],\n          count: count ?? 0,\n        };\n      }\n\n      return {\n        campaign: campaignResult,\n        leads: leads,\n        count: count ?? 0,\n      };\n    },\n  });\n\n  const totalLeads = query.data?.count ?? 0;\n  const totalPages = totalLeads > 0 ? Math.ceil(totalLeads / pageSize) : 0;\n\n  return {\n    campaign: query.data?.campaign ?? null,\n    leads: query.data?.leads ?? [],\n    totalLeads,\n    totalPages,\n    page,\n    pageSize,\n    isLoading: query.isLoading,\n    isFetching: query.isFetching,\n    isError: query.isError,\n    error: query.error,\n    refetch: query.refetch,\n  };\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":124,"duration":1.541},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.goto_definition","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},"position":{"line":39,"character":33}}},
{"type":"measure","name":"lsp.testing_update","count":161,"duration":0.225},
{"type":"mark","name":"lsp.goto_definition","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/logging/logging-campaign-manager.js"},"position":{"line":337,"character":18}}},
{"type":"mark","name":"lsp.goto_definition","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1476,"character":8}}},
{"type":"mark","name":"tsc.request.getDefinitionAndBoundSpan"},
{"type":"mark","name":"tsc.host.getDefinitionAndBoundSpan","count":7,"args":{"GetDefinitionAndBoundSpan":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",40744]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":11,"duration":0.584},
{"type":"mark","name":"tsc.op.op_load","count":348,"args":"file:///workspaces/ProspectPro/modules/logging/logging-campaign-manager.js"},
{"type":"measure","name":"tsc.op.op_load","count":348,"duration":0.055},
{"type":"mark","name":"tsc.op.op_resolve","count":957,"args":{"base":"file:///workspaces/ProspectPro/modules/logging/logging-campaign-manager.js","specifiers":[[true,"fs"],[true,"path"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":957,"duration":0.028},
{"type":"mark","name":"tsc.op.op_load","count":349,"args":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},
{"type":"measure","name":"tsc.op.op_load","count":349,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":958,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts","specifiers":[[false,"@tanstack/react-query"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../types"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":958,"duration":0.118},
{"type":"mark","name":"tsc.op.op_resolve","count":959,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx","specifiers":[[false,"react"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":959,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":960,"args":{"base":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/ProgressDisplay"],[false,"../contexts/AuthContext"],[false,"../hooks/useJobProgress"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":960,"duration":0.102},
{"type":"mark","name":"tsc.op.op_load","count":350,"args":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},
{"type":"measure","name":"tsc.op.op_load","count":350,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":961,"args":{"base":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts","specifiers":[[false,"zustand"],[false,"../types"],[false,"./utils/leadSanitizers"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":961,"duration":0.074},
{"type":"mark","name":"tsc.op.op_resolve","count":962,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":962,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":963,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":963,"duration":0.065},
{"type":"mark","name":"tsc.op.op_resolve","count":964,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":964,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":965,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":965,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":966,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":966,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":967,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":967,"duration":0.058},
{"type":"mark","name":"tsc.op.op_resolve","count":968,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":968,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":969,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":969,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":970,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":970,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":971,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":971,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":972,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":972,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":973,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":973,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":974,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":974,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":975,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":975,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":976,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":976,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":977,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":977,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":978,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":978,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":979,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":979,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":980,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":980,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":981,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":981,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":982,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":982,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":983,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":983,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":984,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":984,"duration":2.409},
{"type":"mark","name":"tsc.op.op_resolve","count":985,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":985,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":986,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":986,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":987,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":987,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":988,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":988,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":989,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":989,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":990,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":990,"duration":2.38},
{"type":"mark","name":"tsc.op.op_resolve","count":991,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":991,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":992,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":992,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":993,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":993,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":994,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":994,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":995,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":995,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":996,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":996,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":997,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":997,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":998,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":998,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":999,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":999,"duration":0.083},
{"type":"mark","name":"tsc.op.op_resolve","count":1000,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1000,"duration":0.059},
{"type":"mark","name":"tsc.op.op_resolve","count":1001,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1001,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":1002,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1002,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1003,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1003,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1004,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1004,"duration":0.053},
{"type":"mark","name":"tsc.op.op_resolve","count":1005,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1005,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":1006,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1006,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1007,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1007,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1008,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1008,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":1009,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1009,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":1010,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1010,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1011,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1011,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":1012,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1012,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":1013,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1013,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1014,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1014,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1015,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1015,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":1016,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1016,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1017,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1017,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1018,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1018,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1019,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1019,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":1020,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1020,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":1021,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1021,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":1022,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1022,"duration":0.05},
{"type":"mark","name":"tsc.op.op_resolve","count":1023,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1023,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1024,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1024,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":1025,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1025,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1026,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1026,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1027,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1027,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1028,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1028,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":1029,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1029,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":1030,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1030,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":1031,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1031,"duration":0.061},
{"type":"mark","name":"tsc.op.op_resolve","count":1032,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1032,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1033,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1033,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1034,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1034,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":1035,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1035,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":1036,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1036,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1037,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1037,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":1038,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1038,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":1039,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1039,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1040,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1040,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1041,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1041,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1042,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1042,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1043,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1043,"duration":0.046},
{"type":"mark","name":"tsc.op.op_resolve","count":1044,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1044,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1045,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1045,"duration":0.046},
{"type":"mark","name":"tsc.op.op_resolve","count":1046,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1046,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":1047,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1047,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":1048,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1048,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":1049,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1049,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":1050,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1050,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":1051,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1051,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":1052,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1052,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1053,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1053,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":1054,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1054,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":1055,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1055,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":1056,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1056,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":1057,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1057,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":1058,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1058,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":1059,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1059,"duration":0.026},
{"type":"measure","name":"tsc.host.getDefinitionAndBoundSpan","count":7,"duration":371.012},
{"type":"measure","name":"tsc.request.getDefinitionAndBoundSpan","count":7,"duration":371.162},
{"type":"measure","name":"lsp.goto_definition","count":37,"duration":371.33},
{"type":"mark","name":"lsp.goto_definition","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1477,"character":8}}},
{"type":"mark","name":"tsc.request.getDefinitionAndBoundSpan"},
{"type":"mark","name":"tsc.host.getDefinitionAndBoundSpan","count":8,"args":{"GetDefinitionAndBoundSpan":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",40776]}},
{"type":"measure","name":"tsc.host.getDefinitionAndBoundSpan","count":8,"duration":0.76},
{"type":"measure","name":"tsc.request.getDefinitionAndBoundSpan","count":8,"duration":0.865},
{"type":"measure","name":"lsp.goto_definition","count":38,"duration":1.06},
{"type":"mark","name":"lsp.goto_definition","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/logging/logging-campaign-manager.js"},"position":{"line":337,"character":18}}},
{"type":"mark","name":"lsp.did_open","count":125,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx","languageId":"typescriptreact","version":1,"text":"import React, { useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { EnrichmentButton } from \"../components/EnrichmentButton\";\nimport { ProgressDisplay } from \"../components/ProgressDisplay\";\nimport { useBusinessDiscovery } from \"../hooks/useBusinessDiscovery\";\nimport { useCampaignResults } from \"../hooks/useCampaignResults\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport type { BusinessLead } from \"../types\";\nimport { exportLeadsToCsv } from \"../utils/exportLeadsToCsv\";\n\nexport const Campaign: React.FC = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const campaignId = searchParams.get(\"id\");\n  const {\n    currentCampaign,\n    campaigns,\n    leads,\n    setCurrentCampaign,\n    setCampaignLeads,\n  } = useCampaignStore();\n  const { isDiscovering, progress, currentStage, cacheStats, error } =\n    useBusinessDiscovery();\n  const [showResults, setShowResults] = useState(false);\n\n  const { campaign: hydratedCampaign, leads: remoteLeads } = useCampaignResults(\n    campaignId,\n    {\n      page: 0,\n      pageSize: 500,\n      enabled: Boolean(campaignId),\n    }\n  );\n\n  useEffect(() => {\n    if (hydratedCampaign) {\n      setCurrentCampaign(hydratedCampaign);\n    }\n  }, [hydratedCampaign, setCurrentCampaign]);\n\n  useEffect(() => {\n    if (campaignId && remoteLeads.length > 0) {\n      setCampaignLeads(campaignId, remoteLeads);\n    }\n  }, [campaignId, remoteLeads, setCampaignLeads]);\n\n  // Filter leads for current campaign\n  const campaignLeads = currentCampaign\n    ? leads.filter((lead) => lead.campaign_id === currentCampaign.campaign_id)\n    : [];\n\n  useEffect(() => {\n    if (!currentCampaign && campaignId) {\n      const matchedCampaign = campaigns.find(\n        (campaign) => campaign.campaign_id === campaignId\n      );\n      if (matchedCampaign) {\n        setCurrentCampaign(matchedCampaign);\n      }\n    }\n  }, [campaignId, campaigns, currentCampaign, setCurrentCampaign]);\n\n  useEffect(() => {\n    if (campaignLeads.length > 0 || remoteLeads.length > 0) {\n      setShowResults(true);\n    }\n  }, [campaignLeads.length, remoteLeads.length]);\n\n  const exportToCsv = () => {\n    if (!campaignLeads.length) return;\n\n    exportLeadsToCsv(campaignLeads, {\n      fileName: `campaign-${\n        currentCampaign?.campaign_id || Date.now()\n      }-results.csv`,\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Campaign Header */}\n      <div className=\"bg-white rounded-lg shadow-sm p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              Campaign Progress\n            </h1>\n            <p className=\"text-gray-600 mt-1\">\n              {currentCampaign\n                ? `Campaign ${currentCampaign.campaign_id}`\n                : \"Running campaign...\"}\n            </p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <button\n              onClick={() => navigate(\"/discovery\")}\n              className=\"px-4 py-2 text-gray-600 bg-gray-100 rounded-md hover:bg-gray-200\"\n            >\n              Back to Discovery\n            </button>\n            {showResults && (\n              <button\n                onClick={exportToCsv}\n                className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700\"\n              >\n                Export CSV\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Progress Display */}\n      {isDiscovering && (\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <ProgressDisplay\n            isDiscovering={isDiscovering}\n            progress={progress}\n            currentStage={currentStage}\n            cacheStats={cacheStats}\n          />\n        </div>\n      )}\n\n      {/* Campaign Summary */}\n      {currentCampaign && (\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Campaign Summary\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <div className=\"text-sm text-blue-600 font-medium\">Status</div>\n              <div className=\"text-lg font-bold text-blue-900 capitalize\">\n                {currentCampaign.status}\n              </div>\n            </div>\n            <div className=\"bg-green-50 p-4 rounded-lg\">\n              <div className=\"text-sm text-green-600 font-medium\">\n                Leads Found\n              </div>\n              <div className=\"text-lg font-bold text-green-900\">\n                {currentCampaign.leads_found || 0}\n              </div>\n            </div>\n            <div className=\"bg-yellow-50 p-4 rounded-lg\">\n              <div className=\"text-sm text-yellow-600 font-medium\">\n                Qualified\n              </div>\n              <div className=\"text-lg font-bold text-yellow-900\">\n                {currentCampaign.leads_qualified || 0}\n              </div>\n            </div>\n            <div className=\"bg-purple-50 p-4 rounded-lg\">\n              <div className=\"text-sm text-purple-600 font-medium\">\n                Total Cost\n              </div>\n              <div className=\"text-lg font-bold text-purple-900\">\n                ${(currentCampaign.total_cost || 0).toFixed(2)}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Enrichment Section */}\n      {currentCampaign && showResults && campaignLeads.length > 0 && (\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Progressive Enrichment\n          </h2>\n          <div className=\"flex items-start justify-between gap-6\">\n            <div className=\"flex-1\">\n              <p className=\"text-gray-600 mb-4\">\n                Enrich your leads with verified emails, business license\n                validation, and more. Only pay for successful enrichments.\n              </p>\n              <div className=\"grid grid-cols-3 gap-3 text-sm\">\n                <div className=\"bg-blue-50 p-3 rounded\">\n                  <div className=\"font-semibold text-blue-900\">\n                    {\n                      campaignLeads.filter(\n                        (l) => l.enrichment_data?.emails?.length\n                      ).length\n                    }\n                  </div>\n                  <div className=\"text-blue-600 text-xs\">With Emails</div>\n                </div>\n                <div className=\"bg-green-50 p-3 rounded\">\n                  <div className=\"font-semibold text-green-900\">\n                    {\n                      campaignLeads.filter(\n                        (l) => l.enrichment_data?.neverBounceVerified\n                      ).length\n                    }\n                  </div>\n                  <div className=\"text-green-600 text-xs\">Email Verified</div>\n                </div>\n                <div className=\"bg-purple-50 p-3 rounded\">\n                  <div className=\"font-semibold text-purple-900\">\n                    {\n                      campaignLeads.filter(\n                        (l) => l.enrichment_data?.licenseVerified\n                      ).length\n                    }\n                  </div>\n                  <div className=\"text-purple-600 text-xs\">\n                    License Verified\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex-shrink-0\">\n              <EnrichmentButton\n                campaignId={currentCampaign.campaign_id}\n                onComplete={() => {\n                  // Optionally refresh data or show success message\n                  console.log(\n                    \"Enrichment completed for campaign:\",\n                    currentCampaign.campaign_id\n                  );\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Results Table */}\n      {showResults && campaignLeads.length > 0 && (\n        <div className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                Campaign Results\n              </h2>\n              <div className=\"text-sm text-gray-500\">\n                {campaignLeads.length} leads found\n              </div>\n            </div>\n          </div>\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Business\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Contact Info\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Score\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Cost\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {campaignLeads.map((lead: BusinessLead) => (\n                  <tr key={lead.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {lead.business_name}\n                        </div>\n                        <div className=\"text-sm text-gray-500 truncate max-w-xs\">\n                          {lead.address}\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"space-y-1\">\n                        {lead.phone && (\n                          <div className=\"text-sm text-gray-900\">\n                            {lead.phone}\n                          </div>\n                        )}\n                        {lead.email && (\n                          <div className=\"text-sm text-blue-600\">\n                            {lead.email}\n                          </div>\n                        )}\n                        {lead.website && (\n                          <div className=\"text-sm text-gray-500 truncate max-w-xs\">\n                            <a\n                              href={lead.website}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"hover:text-blue-600\"\n                            >\n                              {lead.website}\n                            </a>\n                          </div>\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {lead.confidence_score}%\n                        </div>\n                        <div\n                          className={`ml-2 w-16 bg-gray-200 rounded-full h-2`}\n                        >\n                          <div\n                            className={`h-2 rounded-full ${\n                              lead.confidence_score >= 80\n                                ? \"bg-green-500\"\n                                : lead.confidence_score >= 60\n                                ? \"bg-yellow-500\"\n                                : \"bg-red-500\"\n                            }`}\n                            style={{ width: `${lead.confidence_score}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      ${(lead.cost_to_acquire || 0).toFixed(2)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                          lead.validation_status === \"validated\"\n                            ? \"bg-green-100 text-green-800\"\n                            : lead.validation_status === \"pending\"\n                            ? \"bg-yellow-100 text-yellow-800\"\n                            : \"bg-red-100 text-red-800\"\n                        }`}\n                      >\n                        {lead.validation_status || \"unknown\"}\n                      </span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <svg\n                className=\"h-5 w-5 text-red-400\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-red-800\">\n                Campaign Failed\n              </h3>\n              <div className=\"mt-2 text-sm text-red-700\">\n                <p>{error instanceof Error ? error.message : String(error)}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* No Results State */}\n      {showResults && campaignLeads.length === 0 && (\n        <div className=\"bg-white rounded-lg shadow-sm p-12 text-center\">\n          <svg\n            className=\"mx-auto h-12 w-12 text-gray-400\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n            />\n          </svg>\n          <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n            No results found\n          </h3>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            Try adjusting your search criteria or location.\n          </p>\n          <div className=\"mt-6\">\n            <button\n              onClick={() => navigate(\"/discovery\")}\n              className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700\"\n            >\n              Start New Campaign\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":162,"duration":0.225},
{"type":"measure","name":"lsp.did_open","count":125,"duration":16.529},
{"type":"mark","name":"lsp.goto_definition","count":40,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx"},"position":{"line":5,"character":9}}},
{"type":"mark","name":"lsp.goto_definition","count":41,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},"position":{"line":39,"character":33}}},
{"type":"mark","name":"lsp.did_close","count":119,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":163,"duration":0.221},
{"type":"measure","name":"lsp.did_close","count":119,"duration":1.042},
{"type":"mark","name":"lsp.did_close","count":120,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/logging/logging-campaign-manager.js"}}},
{"type":"measure","name":"lsp.did_close","count":120,"duration":0.839},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":164,"duration":0.207},
{"type":"mark","name":"lsp.did_close","count":121,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"}}},
{"type":"measure","name":"lsp.did_close","count":121,"duration":0.751},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":165,"duration":0.246},
{"type":"mark","name":"lsp.did_close","count":122,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Campaign.tsx"}}},
{"type":"measure","name":"lsp.did_close","count":122,"duration":0.875},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":166,"duration":0.15},
{"type":"mark","name":"lsp.did_open","count":126,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/scripts/debug-campaign.sql","languageId":"sql","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":126,"duration":0.043},
{"type":"mark","name":"lsp.did_change_batched","count":52,"args":"file:///workspaces/ProspectPro/scripts/debug-campaign.sql"},
{"type":"measure","name":"lsp.did_change_batched","count":52,"duration":0.582},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":89,"duration":0.014},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":90,"duration":0.013},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":50,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":196,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":0},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.inlay_hint","count":197,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":198,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.did_open","count":127,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/pages/Results.tsx","languageId":"typescriptreact","version":4,"text":"import React, { useEffect, useMemo, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useCampaignResults } from \"../hooks/useCampaignResults\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport { exportLeadsToCsv } from \"../utils/exportLeadsToCsv\";\n\nconst PAGE_SIZE = 25;\n\nconst getConfidenceColor = (score: number) => {\n  if (score >= 90) return \"bg-green-100 text-green-800\";\n  if (score >= 80) return \"bg-blue-100 text-blue-800\";\n  if (score >= 70) return \"bg-yellow-100 text-yellow-800\";\n  return \"bg-red-100 text-red-800\";\n};\n\nconst getValidationStatusColor = (status: string) => {\n  switch (status) {\n    case \"validated\":\n      return \"bg-green-100 text-green-800\";\n    case \"validating\":\n      return \"bg-blue-100 text-blue-800\";\n    case \"pending\":\n      return \"bg-yellow-100 text-yellow-800\";\n    case \"failed\":\n      return \"bg-red-100 text-red-800\";\n    default:\n      return \"bg-gray-100 text-gray-800\";\n  }\n};\n\nexport const Results: React.FC = () => {\n  const location = useLocation();\n  const navState = (location.state ?? null) as { campaignId?: string } | null;\n  const stateCampaignId = navState?.campaignId;\n\n  const {\n    currentCampaign,\n    currentCampaignId,\n    setCurrentCampaign,\n    setCampaignLeads,\n  } = useCampaignStore((state) => ({\n    currentCampaign: state.currentCampaign,\n    currentCampaignId: state.currentCampaignId,\n    setCurrentCampaign: state.setCurrentCampaign,\n    setCampaignLeads: state.setCampaignLeads,\n  }));\n\n  const [page, setPage] = useState(0);\n  const campaignId = stateCampaignId ?? currentCampaignId;\n\n  useEffect(() => {\n    setPage(0);\n  }, [campaignId]);\n\n  const {\n    campaign,\n    leads,\n    totalLeads,\n    totalPages,\n    isLoading,\n    isError,\n    error,\n    refetch,\n  } = useCampaignResults(campaignId, { page, pageSize: PAGE_SIZE });\n\n  useEffect(() => {\n    if (campaign) {\n      setCurrentCampaign(campaign);\n    }\n  }, [campaign, setCurrentCampaign]);\n\n  useEffect(() => {\n    if (!campaignId) {\n      return;\n    }\n\n    if (!Array.isArray(leads)) {\n      console.warn(\"[Results] Non-array leads from useCampaignResults\", {\n        campaignId,\n        leadsType: typeof leads,\n      });\n      return;\n    }\n\n    try {\n      setCampaignLeads(campaignId, leads);\n    } catch (error) {\n      console.error(\"[Results] setCampaignLeads error\", {\n        campaignId,\n        error: error instanceof Error ? error.message : String(error),\n        leadsLength: Array.isArray(leads) ? leads.length : \"not-array\",\n      });\n    }\n  }, [campaignId, leads, setCampaignLeads]);\n\n  const displayCampaign = campaign ?? currentCampaign;\n  const displayLeads = leads;\n  const qualifiedCount = useMemo(\n    () => displayLeads.filter((lead) => lead.confidence_score >= 70).length,\n    [displayLeads]\n  );\n\n  const handleExport = (format: \"csv\" | \"json\") => {\n    if (displayLeads.length === 0) {\n      return;\n    }\n\n    if (format === \"csv\") {\n      exportLeadsToCsv(displayLeads, {\n        fileName: `prospects-vault-secured-${\n          new Date().toISOString().split(\"T\")[0]\n        }.csv`,\n      });\n      return;\n    }\n\n    const blob = new Blob([JSON.stringify(displayLeads, null, 2)], {\n      type: \"application/json\",\n    });\n    const url = URL.createObjectURL(blob);\n    const anchor = document.createElement(\"a\");\n    anchor.href = url;\n    anchor.download = `prospects-vault-secured-${\n      new Date().toISOString().split(\"T\")[0]\n    }.json`;\n    anchor.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const handlePageChange = (direction: \"next\" | \"prev\") => {\n    if (direction === \"next\") {\n      setPage((prev) => Math.min(prev + 1, Math.max(totalPages - 1, 0)));\n    } else {\n      setPage((prev) => Math.max(prev - 1, 0));\n    }\n  };\n\n  if (!campaignId) {\n    return (\n      <div className=\"bg-white shadow rounded-lg p-12 text-center\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n          No campaign selected\n        </h1>\n        <p className=\"text-gray-600\">\n          Launch a discovery campaign or open a recent campaign from the\n          dashboard to review results.\n        </p>\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-6 text-red-700\">\n        <h2 className=\"text-lg font-semibold mb-2\">Unable to load results</h2>\n        <p className=\"text-sm mb-4\">\n          {error instanceof Error ? error.message : \"Unknown error\"}\n        </p>\n        <button\n          onClick={() => refetch()}\n          className=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700\"\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Results</h1>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            {isLoading ? \"Loading leads...\" : `${totalLeads} leads found`} •{\" \"}\n            {qualifiedCount} qualified on this page\n          </p>\n        </div>\n\n        {displayLeads.length > 0 && (\n          <div className=\"flex space-x-3\">\n            <button\n              onClick={() => handleExport(\"csv\")}\n              className=\"inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n            >\n              📊 Export CSV\n            </button>\n            <button\n              onClick={() => handleExport(\"json\")}\n              className=\"inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n            >\n              📄 Export JSON\n            </button>\n          </div>\n        )}\n      </div>\n\n      {displayCampaign && (\n        <div className=\"bg-white shadow rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-medium text-gray-900\">\n              Progressive Enrichment Results\n            </h3>\n            {displayCampaign.vault_secured && (\n              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                🔐 Vault Secured\n              </span>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-5\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gray-900\">\n                {displayCampaign.leads_found}\n              </div>\n              <div className=\"text-sm text-gray-500\">Total Found</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {displayCampaign.leads_qualified}\n              </div>\n              <div className=\"text-sm text-gray-500\">Qualified</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {displayCampaign.leads_validated}\n              </div>\n              <div className=\"text-sm text-gray-500\">Validated</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {displayCampaign.tier_used || \"Professional\"}\n              </div>\n              <div className=\"text-sm text-gray-500\">Tier Used</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gray-900\">\n                ${displayCampaign.total_cost.toFixed(2)}\n              </div>\n              <div className=\"text-sm text-gray-500\">Total Cost</div>\n            </div>\n          </div>\n\n          {displayCampaign.cache_performance && (\n            <div className=\"mt-6 pt-6 border-t border-gray-200\">\n              <h4 className=\"text-sm font-medium text-gray-900 mb-3\">\n                🚀 90-Day Intelligent Cache Performance\n              </h4>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"bg-green-50 p-3 rounded-lg text-center\">\n                  <div className=\"text-lg font-bold text-green-600\">\n                    {displayCampaign.cache_performance.cache_hit_ratio.toFixed(\n                      1\n                    )}\n                    %\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Cache Hit Ratio</div>\n                </div>\n                <div className=\"bg-blue-50 p-3 rounded-lg text-center\">\n                  <div className=\"text-lg font-bold text-blue-600\">\n                    {displayCampaign.cache_performance.cache_hits}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Cache Hits</div>\n                </div>\n                <div className=\"bg-yellow-50 p-3 rounded-lg text-center\">\n                  <div className=\"text-lg font-bold text-yellow-600\">\n                    {displayCampaign.cache_performance.cache_misses}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Cache Misses</div>\n                </div>\n                <div className=\"bg-green-50 p-3 rounded-lg text-center\">\n                  <div className=\"text-lg font-bold text-green-600\">\n                    ${displayCampaign.cache_performance.cost_savings.toFixed(2)}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Cost Savings</div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n        {isLoading && displayLeads.length === 0 ? (\n          <div className=\"text-center py-12 text-gray-500\">Loading leads…</div>\n        ) : displayLeads.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <span className=\"text-4xl\">🔍</span>\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n              No results on this page\n            </h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Adjust your filters or run a new discovery campaign to see fresh\n              results.\n            </p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Business\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Contact\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Confidence\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Enrichment\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Cost\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {displayLeads.map((lead) => (\n                  <tr key={lead.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {lead.business_name}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {lead.address}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900\">\n                        {lead.phone && <div>📞 {lead.phone}</div>}\n                        {lead.website && (\n                          <div>\n                            🌐{\" \"}\n                            <a\n                              href={lead.website}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-blue-600 hover:underline\"\n                            >\n                              {lead.website.replace(/^https?:\\/\\//, \"\")}\n                            </a>\n                          </div>\n                        )}\n                        {lead.email && <div>📧 {lead.email}</div>}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getConfidenceColor(\n                          lead.confidence_score\n                        )}`}\n                      >\n                        {lead.confidence_score}%\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex flex-col space-y-1\">\n                        <span className=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-purple-100 text-purple-800\">\n                          {lead.enrichment_tier || \"Professional\"}\n                        </span>\n                        {lead.vault_secured && (\n                          <span className=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-green-100 text-green-800\">\n                            🔐 Vault Secured\n                          </span>\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getValidationStatusColor(\n                          lead.validation_status\n                        )}`}\n                      >\n                        {lead.validation_status}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      ${lead.cost_to_acquire.toFixed(3)}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-between px-6 py-4 border-t border-gray-200 bg-gray-50\">\n            <div className=\"text-sm text-gray-600\">\n              Page {page + 1} of {totalPages}\n            </div>\n            <div className=\"space-x-3\">\n              <button\n                onClick={() => handlePageChange(\"prev\")}\n                disabled={page === 0}\n                className=\"px-4 py-2 text-sm bg-white border border-gray-300 rounded-md disabled:opacity-40\"\n              >\n                ← Previous\n              </button>\n              <button\n                onClick={() => handlePageChange(\"next\")}\n                disabled={page + 1 >= totalPages}\n                className=\"px-4 py-2 text-sm bg-white border border-gray-300 rounded-md disabled:opacity-40\"\n              >\n                Next →\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":127,"duration":5.244},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":167,"duration":0.262},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":91,"duration":0.021},
{"type":"mark","name":"lsp.did_change_batched","count":53,"args":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},
{"type":"measure","name":"lsp.did_change_batched","count":53,"duration":23.205},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":92,"duration":0.011},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":168,"duration":0.21},
{"type":"mark","name":"lsp.inlay_hint","count":199,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":93,"duration":0.022},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":51,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":94,"duration":0.001},
{"type":"mark","name":"lsp.inlay_hint","count":200,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.did_open","count":128,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/types/index.ts","languageId":"typescript","version":1,"text":"// Business Discovery Types\nexport interface BusinessLead {\n  id: string;\n  campaign_id?: string;\n  business_name: string;\n  address?: string;\n  phone?: string;\n  website?: string;\n  email?: string;\n  industry?: string;\n  confidence_score: number;\n  validation_status: \"pending\" | \"validating\" | \"validated\" | \"failed\";\n  created_at: string;\n  cost_to_acquire: number;\n  data_sources: string[];\n  // Progressive enrichment fields\n  enrichment_tier?: string;\n  vault_secured?: boolean;\n  enrichment_data?: {\n    emails?: Array<{\n      email: string;\n      confidence: number;\n      verified: boolean;\n      type?: string;\n      firstName?: string;\n      lastName?: string;\n      position?: string;\n    }>;\n    businessLicense?: {\n      isValid: boolean;\n      licenseNumber?: string;\n      status?: string;\n      expirationDate?: string;\n      professionalType?: string;\n      source: string;\n    };\n    companyInfo?: {\n      name?: string;\n      industry?: string;\n      size?: string;\n      founded?: number;\n      revenue?: string;\n      website?: string;\n      description?: string;\n      source: string;\n    };\n    hunterVerified?: boolean;\n    neverBounceVerified?: boolean;\n    licenseVerified?: boolean;\n    validationStatus?: \"pending\" | \"validating\" | \"validated\" | \"failed\";\n    enrichmentTier?: string;\n    verificationSources?: string[];\n    processingMetadata?: {\n      servicesUsed?: string[];\n      servicesSkipped?: string[];\n      totalCost?: number;\n      validationCost?: number;\n      enrichmentCost?: number;\n      enrichmentTier?: string;\n      enrichmentCostBreakdown?: {\n        businessLicenseCost: number;\n        companyEnrichmentCost: number;\n        hunterCost: number;\n        neverBounceCost: number;\n        personEnrichmentCost: number;\n        apolloCost: number;\n        complianceCost: number;\n      };\n    };\n    dataSources?: string[];\n  };\n}\n\nexport interface CampaignConfig {\n  search_terms: string;\n  location: string;\n  business_type?: string;\n  budget_limit: number;\n  max_results: number;\n  include_email_validation: boolean;\n  include_website_validation: boolean;\n  min_confidence_score: number;\n  chamber_verification?: boolean;\n  trade_association?: boolean;\n  professional_license?: boolean;\n  keywords?: string;\n  search_radius?: string;\n  expand_geography?: boolean;\n}\n\nexport interface ValidationResult {\n  field: string;\n  is_valid: boolean;\n  confidence: number;\n  source: string;\n  details?: string;\n}\n\nexport interface CampaignResult {\n  campaign_id: string;\n  business_type?: string;\n  location?: string;\n  status: \"running\" | \"completed\" | \"failed\" | \"cancelled\";\n  progress: number;\n  total_cost: number;\n  leads_found: number;\n  leads_qualified: number;\n  leads_validated: number;\n  created_at: string;\n  completed_at?: string;\n  error_message?: string;\n  // Progressive enrichment fields\n  tier_used?: string;\n  vault_secured?: boolean;\n  cache_performance?: {\n    cache_hits: number;\n    cache_misses: number;\n    cache_hit_ratio: number;\n    cost_savings: number;\n  };\n}\n\n// Census Intelligence Types\nexport interface CensusIntelligence {\n  business_density: {\n    total_establishments: number;\n    density_score: number;\n    confidence_multiplier: number;\n  };\n  geographic_optimization: {\n    optimal_radius: number;\n    expected_results: number;\n    api_efficiency_score: number;\n  };\n  market_insights: {\n    market_density: \"High\" | \"Medium\" | \"Low\";\n    competition_level: \"High\" | \"Medium\" | \"Low\";\n    search_optimization: string;\n  };\n}\n\n// API Response Types\nexport interface EdgeFunctionResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  cost?: number;\n  processing_time?: number;\n}\n\nexport interface BusinessDiscoveryResponse {\n  businesses: BusinessLead[];\n  total_cost: number;\n  processing_time: string;\n  campaign_id: string;\n  qualified_count: number;\n  total_found: number;\n  census_intelligence?: CensusIntelligence;\n  // Background job fields\n  job_id?: string; // For tracking background processing\n  status?: string; // Job status (pending, processing, completed, failed)\n  estimated_time?: number; // Estimated completion time in seconds\n  realtime_channel?: string; // Channel for real-time updates\n  // Progressive enrichment fields (vault-secured)\n  tier_used?: string;\n  cache_performance?: {\n    cache_hits: number;\n    cache_misses: number;\n    cache_hit_ratio: number;\n    cost_savings: number;\n  };\n  vault_status?: string;\n  stage_progress?: number;\n  current_stage?: string;\n}\n\n// Store Types\nexport interface CampaignStore {\n  campaigns: CampaignResult[];\n  currentCampaign: CampaignResult | null;\n  currentCampaignId: string | null;\n  leads: BusinessLead[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport interface UIStore {\n  sidebarOpen: boolean;\n  theme: \"light\" | \"dark\";\n  notifications: Notification[];\n}\n\nexport interface Notification {\n  id: string;\n  type: \"success\" | \"error\" | \"warning\" | \"info\";\n  title: string;\n  message: string;\n  timestamp: number;\n}\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":169,"duration":0.192},
{"type":"measure","name":"lsp.did_open","count":128,"duration":4.743},
{"type":"mark","name":"lsp.did_change_batched","count":54,"args":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},
{"type":"measure","name":"lsp.did_change_batched","count":54,"duration":8.365},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":95,"duration":0.01},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":170,"duration":0.203},
{"type":"mark","name":"lsp.inlay_hint","count":201,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":96,"duration":0.021},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":52,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":97,"duration":0.002},
{"type":"mark","name":"lsp.inlay_hint","count":202,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.did_open","count":129,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts","languageId":"typescript","version":5,"text":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { supabase } from \"../lib/supabase\";\nimport type { BusinessLead, CampaignResult } from \"../types\";\nimport { transformCampaignData } from \"../utils/campaignTransforms\";\n\ninterface UseCampaignResultsOptions {\n  page?: number;\n  pageSize?: number;\n  enabled?: boolean;\n}\n\ninterface CampaignResultsQuery {\n  campaign: CampaignResult | null;\n  leads: BusinessLead[];\n  count: number;\n}\n\nexport const useCampaignResults = (\n  campaignId: string | undefined | null,\n  options: UseCampaignResultsOptions = {}\n) => {\n  const { user } = useAuth();\n  const pageSize = Math.max(options.pageSize ?? 50, 1);\n  const page = Math.max(options.page ?? 0, 0);\n  const enabled = Boolean(options.enabled ?? true);\n\n  const query = useQuery<CampaignResultsQuery>({\n    queryKey: [\n      \"campaign-results\",\n      user?.id ?? \"anonymous\",\n      campaignId ?? \"none\",\n      page,\n      pageSize,\n    ],\n    enabled: Boolean(user?.id) && Boolean(campaignId) && enabled,\n    staleTime: 60 * 1000,\n    queryFn: async () => {\n      if (!user?.id || !campaignId) {\n        return { campaign: null, leads: [], count: 0 };\n      }\n\n      const { data: campaignRecord, error: campaignError } = await supabase\n        .from(\"campaigns\")\n        .select(\n          \"id,business_type,location,status,total_cost,results_count,created_at,updated_at\"\n        )\n        .eq(\"id\", campaignId)\n        .eq(\"user_id\", user.id)\n        .maybeSingle();\n\n      if (campaignError) {\n        throw campaignError;\n      }\n\n      if (!campaignRecord) {\n        return { campaign: null, leads: [], count: 0 };\n      }\n\n      const rangeStart = page * pageSize;\n      const rangeEnd = rangeStart + pageSize - 1;\n\n      const {\n        data: leadsData,\n        error: leadsError,\n        count,\n      } = await supabase\n        .from(\"leads\")\n        .select(\n          \"id,campaign_id,business_name,address,phone,website,email,confidence_score,validation_cost,enrichment_data,created_at\",\n          { count: \"exact\" }\n        )\n        .eq(\"campaign_id\", campaignId)\n        .eq(\"user_id\", user.id)\n        .order(\"confidence_score\", { ascending: false })\n        .range(rangeStart, rangeEnd);\n\n      if (leadsError) {\n        throw leadsError;\n      }\n\n      if (!Array.isArray(leadsData)) {\n        console.warn(\"[useCampaignResults] Non-array leads response\", {\n          campaignId,\n          typeofData: typeof leadsData,\n          raw: leadsData,\n        });\n        const fallbackResult = transformCampaignData(campaignRecord, [], {});\n        return {\n          campaign: fallbackResult.campaignResult,\n          leads: [],\n          count: count ?? 0,\n        };\n      }\n\n      let transformedData;\n      try {\n        transformedData = transformCampaignData(campaignRecord, leadsData, {});\n      } catch (transformError) {\n        console.error(\"[useCampaignResults] Transform error\", {\n          campaignId,\n          error:\n            transformError instanceof Error\n              ? transformError.message\n              : String(transformError),\n          leadsDataType: typeof leadsData,\n          leadsDataLength: Array.isArray(leadsData)\n            ? leadsData.length\n            : \"not-array\",\n        });\n        const fallbackResult = transformCampaignData(campaignRecord, [], {});\n        return {\n          campaign: fallbackResult.campaignResult,\n          leads: [],\n          count: count ?? 0,\n        };\n      }\n\n      const { campaignResult, leads } = transformedData;\n\n      if (!Array.isArray(leads)) {\n        console.error(\n          \"[useCampaignResults] Transform returned non-array leads\",\n          {\n            campaignId,\n            transformedLeadsType: typeof leads,\n          }\n        );\n        return {\n          campaign: campaignResult,\n          leads: [],\n          count: count ?? 0,\n        };\n      }\n\n      return {\n        campaign: campaignResult,\n        leads: leads,\n        count: count ?? 0,\n      };\n    },\n  });\n\n  const totalLeads = query.data?.count ?? 0;\n  const totalPages = totalLeads > 0 ? Math.ceil(totalLeads / pageSize) : 0;\n\n  return {\n    campaign: query.data?.campaign ?? null,\n    leads: query.data?.leads ?? [],\n    totalLeads,\n    totalPages,\n    page,\n    pageSize,\n    isLoading: query.isLoading,\n    isFetching: query.isFetching,\n    isError: query.isError,\n    error: query.error,\n    refetch: query.refetch,\n  };\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":171,"duration":0.192},
{"type":"measure","name":"lsp.did_open","count":129,"duration":1.748},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":98,"duration":0.022},
{"type":"mark","name":"lsp.did_change_batched","count":55,"args":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":172,"duration":0.21},
{"type":"measure","name":"lsp.did_change_batched","count":55,"duration":5.405},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":99,"duration":0.009},
{"type":"mark","name":"lsp.inlay_hint","count":203,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":100,"duration":0.021},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":53,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":101,"duration":0.02},
{"type":"mark","name":"lsp.inlay_hint","count":204,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":102,"duration":0.001},
{"type":"mark","name":"lsp.did_close","count":123,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/types/index.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":173,"duration":0.211},
{"type":"measure","name":"lsp.did_close","count":123,"duration":2.822},
{"type":"mark","name":"lsp.did_change_watched_files","count":3,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/vercel.json","type":3}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":3,"duration":0.016},
{"type":"mark","name":"lsp.did_change_watched_files","count":4,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/vercel.json","type":1}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":4,"duration":0.018},
{"type":"mark","name":"lsp.did_change_watched_files","count":5,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/.vercel/project.json","type":1}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":5,"duration":0.017},
{"type":"mark","name":"lsp.did_open","count":130,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DIAGNOSTIC_TEST_PLAN.md","languageId":"markdown","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":130,"duration":0.042},
{"type":"mark","name":"lsp.did_change_batched","count":56,"args":"file:///workspaces/ProspectPro/DIAGNOSTIC_TEST_PLAN.md"},
{"type":"measure","name":"lsp.did_change_batched","count":56,"duration":16.589},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":103,"duration":0.017},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":104,"duration":0.013},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":54,"duration":0.019},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":105,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":106,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":107,"duration":0.019},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":108,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":57,"args":"file:///workspaces/ProspectPro/scripts/debug-campaign.sql"},
{"type":"measure","name":"lsp.did_change_batched","count":57,"duration":8.139},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":109,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":110,"duration":0.002},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":55,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":111,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":112,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":113,"duration":0.001},
{"type":"mark","name":"lsp.did_open","count":131,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DIAGNOSTIC_DEPLOYMENT_COMPLETE.md","languageId":"markdown","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":131,"duration":0.051},
{"type":"mark","name":"lsp.did_change_batched","count":58,"args":"file:///workspaces/ProspectPro/DIAGNOSTIC_DEPLOYMENT_COMPLETE.md"},
{"type":"measure","name":"lsp.did_change_batched","count":58,"duration":34.495},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":114,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":115,"duration":0.023},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":56,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":116,"duration":0.017},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":117,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":118,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":119,"duration":0.002},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":120,"duration":0.001},
{"type":"mark","name":"lsp.did_open","count":132,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md","languageId":"markdown","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":132,"duration":0.039},
{"type":"mark","name":"lsp.did_change_batched","count":59,"args":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},
{"type":"measure","name":"lsp.did_change_batched","count":59,"duration":6.275},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":121,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":122,"duration":0.012},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":57,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":123,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":124,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":125,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":126,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":127,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":128,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":58,"duration":0.019},
{"type":"mark","name":"lsp.inlay_hint","count":205,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.did_change_batched","count":60,"args":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":174,"duration":0.2},
{"type":"measure","name":"lsp.did_change_batched","count":60,"duration":13.354},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":129,"duration":0.01},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":130,"duration":0.021},
{"type":"mark","name":"lsp.inlay_hint","count":206,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.did_change_batched","count":61,"args":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},
{"type":"measure","name":"lsp.did_change_batched","count":61,"duration":10.183},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":131,"duration":0.011},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":175,"duration":0.212},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":132,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":59,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":207,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":133,"duration":0.024},
{"type":"mark","name":"lsp.inlay_hint","count":208,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.did_change_batched","count":62,"args":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":176,"duration":0.228},
{"type":"measure","name":"lsp.did_change_batched","count":62,"duration":8.36},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":134,"duration":0.012},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":135,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":209,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.did_change_batched","count":63,"args":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":63,"duration":16.161},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":136,"duration":0.013},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":177,"duration":0.215},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":137,"duration":0.018},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":60,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":138,"duration":0.021},
{"type":"mark","name":"lsp.inlay_hint","count":210,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":139,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":211,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1380,"character":13},"end":{"line":1467,"character":35}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":140,"duration":0.063},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":141,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":64,"args":"file:///workspaces/ProspectPro/DIAGNOSTIC_TEST_PLAN.md"},
{"type":"measure","name":"lsp.did_change_batched","count":64,"duration":0.236},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":142,"duration":0.016},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":61,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":143,"duration":0.001},
{"type":"mark","name":"lsp.goto_definition","count":42,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":647,"character":8}}},
{"type":"mark","name":"tsc.request.getDefinitionAndBoundSpan"},
{"type":"mark","name":"tsc.host.getDefinitionAndBoundSpan","count":9,"args":{"GetDefinitionAndBoundSpan":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",16293]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":12,"duration":1.115},
{"type":"mark","name":"tsc.op.op_load","count":351,"args":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},
{"type":"measure","name":"tsc.op.op_load","count":351,"duration":0.055},
{"type":"mark","name":"tsc.op.op_load","count":352,"args":"file:///workspaces/ProspectPro/DIAGNOSTIC_DEPLOYMENT_COMPLETE.md"},
{"type":"measure","name":"tsc.op.op_load","count":352,"duration":0.061},
{"type":"mark","name":"tsc.op.op_load","count":353,"args":"file:///workspaces/ProspectPro/DIAGNOSTIC_TEST_PLAN.md"},
{"type":"measure","name":"tsc.op.op_load","count":353,"duration":0.049},
{"type":"mark","name":"tsc.op.op_load","count":354,"args":"file:///workspaces/ProspectPro/scripts/debug-campaign.sql"},
{"type":"measure","name":"tsc.op.op_load","count":354,"duration":0.085},
{"type":"mark","name":"tsc.op.op_load","count":355,"args":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},
{"type":"measure","name":"tsc.op.op_load","count":355,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":1060,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts","specifiers":[[false,"@tanstack/react-query"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../types"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1060,"duration":0.094},
{"type":"mark","name":"tsc.op.op_resolve","count":1061,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx","specifiers":[[false,"react"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1061,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":1062,"args":{"base":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/ProgressDisplay"],[false,"../contexts/AuthContext"],[false,"../hooks/useJobProgress"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1062,"duration":0.068},
{"type":"mark","name":"tsc.op.op_load","count":356,"args":"file:///workspaces/ProspectPro/src/pages/Results.tsx"},
{"type":"measure","name":"tsc.op.op_load","count":356,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":1063,"args":{"base":"file:///workspaces/ProspectPro/src/pages/Results.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../hooks/useCampaignResults"],[false,"../stores/campaignStore"],[false,"../utils/exportLeadsToCsv"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1063,"duration":0.078},
{"type":"mark","name":"tsc.op.op_resolve","count":1064,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1064,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":1065,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1065,"duration":0.091},
{"type":"mark","name":"tsc.op.op_resolve","count":1066,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1066,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":1067,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1067,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1068,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1068,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1069,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1069,"duration":0.057},
{"type":"mark","name":"tsc.op.op_resolve","count":1070,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1070,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1071,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1071,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":1072,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1072,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":1073,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1073,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":1074,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1074,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1075,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1075,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":1076,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1076,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1077,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1077,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1078,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1078,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1079,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1079,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":1080,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1080,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1081,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1081,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":1082,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1082,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1083,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1083,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1084,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1084,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":1085,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1085,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1086,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1086,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1087,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1087,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1088,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1088,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":1089,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1089,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":1090,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1090,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":1091,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1091,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":1092,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1092,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1093,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1093,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1094,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1094,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1095,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1095,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1096,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1096,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":1097,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1097,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":1098,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1098,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1099,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1099,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1100,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1100,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":1101,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1101,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":1102,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1102,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":1103,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1103,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1104,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1104,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":1105,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1105,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1106,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1106,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":1107,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1107,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1108,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1108,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":1109,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1109,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":1110,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1110,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":1111,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1111,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":1112,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1112,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1113,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1113,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":1114,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1114,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":1115,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1115,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":1116,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1116,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":1117,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1117,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1118,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1118,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":1119,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1119,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":1120,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1120,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":1121,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1121,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1122,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1122,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1123,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1123,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":1124,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1124,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1125,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1125,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":1126,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1126,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":1127,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1127,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1128,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1128,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1129,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1129,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1130,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1130,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":1131,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1131,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1132,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1132,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1133,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1133,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1134,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1134,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1135,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1135,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":1136,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1136,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1137,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1137,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1138,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1138,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":1139,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1139,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":1140,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1140,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1141,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1141,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":1142,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1142,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":1143,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1143,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1144,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1144,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1145,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1145,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1146,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1146,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":1147,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1147,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":1148,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1148,"duration":0.007},
{"type":"mark","name":"tsc.op.op_resolve","count":1149,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1149,"duration":0.007},
{"type":"mark","name":"tsc.op.op_resolve","count":1150,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1150,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":1151,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1151,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1152,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1152,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":1153,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1153,"duration":0.049},
{"type":"mark","name":"tsc.op.op_resolve","count":1154,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1154,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":1155,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1155,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":1156,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1156,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":1157,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1157,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":1158,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1158,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1159,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1159,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":1160,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1160,"duration":0.046},
{"type":"mark","name":"tsc.op.op_resolve","count":1161,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1161,"duration":0.031},
{"type":"mark","name":"tsc.op.op_release","count":70,"args":"file:///workspaces/ProspectPro/modules/logging/logging-campaign-manager.js"},
{"type":"measure","name":"tsc.op.op_release","count":70,"duration":1.728},
{"type":"mark","name":"tsc.op.op_release","count":71,"args":"file:///workspaces/ProspectPro/src/stores/campaignStore.ts"},
{"type":"measure","name":"tsc.op.op_release","count":71,"duration":1.247},
{"type":"measure","name":"tsc.host.getDefinitionAndBoundSpan","count":9,"duration":117.922},
{"type":"measure","name":"tsc.request.getDefinitionAndBoundSpan","count":9,"duration":118.813},
{"type":"measure","name":"lsp.goto_definition","count":42,"duration":118.974},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":144,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":65,"args":"file:///workspaces/ProspectPro/DIAGNOSTIC_DEPLOYMENT_COMPLETE.md"},
{"type":"measure","name":"lsp.did_change_batched","count":65,"duration":0.11},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":145,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":146,"duration":0.002},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":147,"duration":0.002},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":148,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":62,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":149,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":150,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":151,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":66,"args":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},
{"type":"measure","name":"lsp.did_change_batched","count":66,"duration":0.099},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":152,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":153,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":63,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":154,"duration":0.001},
{"type":"mark","name":"lsp.goto_definition","count":43,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts"},"position":{"line":125,"character":8}}},
{"type":"mark","name":"lsp.goto_definition","count":44,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},"position":{"line":12,"character":4}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":155,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":156,"duration":0.001},
{"type":"mark","name":"lsp.goto_definition","count":45,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx"},"position":{"line":12,"character":4}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":157,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":158,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":66,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"}}},
{"type":"mark","name":"lsp.inlay_hint","count":212,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":48,"character":29}}}},
{"type":"mark","name":"lsp.document_symbol","count":67,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"}}},
{"type":"mark","name":"lsp.folding_range","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"}}},
{"type":"mark","name":"lsp.hover","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"position":{"line":4,"character":15}}},
{"type":"mark","name":"lsp.inlay_hint","count":213,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":69,"character":0}}}},
{"type":"mark","name":"lsp.code_lens","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"}}},
{"type":"mark","name":"lsp.inlay_hint","count":214,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":48,"character":29}}}},
{"type":"mark","name":"lsp.hover","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"position":{"line":5,"character":8}}},
{"type":"mark","name":"lsp.inlay_hint","count":215,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":69,"character":0}}}},
{"type":"mark","name":"lsp.code_lens","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"}}},
{"type":"mark","name":"lsp.hover","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"position":{"line":4,"character":11}}},
{"type":"mark","name":"lsp.inlay_hint","count":216,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":69,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":217,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":75,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":218,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":75,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":219,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":80,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":220,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":80,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":221,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":86,"character":15}}}},
{"type":"mark","name":"lsp.inlay_hint","count":222,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":86,"character":15}}}},
{"type":"mark","name":"lsp.inlay_hint","count":223,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":86,"character":15}}}},
{"type":"mark","name":"lsp.inlay_hint","count":224,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":85,"character":16}}}},
{"type":"mark","name":"lsp.inlay_hint","count":225,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":85,"character":16}}}},
{"type":"mark","name":"lsp.inlay_hint","count":226,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":85,"character":16}}}},
{"type":"mark","name":"lsp.code_lens","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"}}},
{"type":"mark","name":"lsp.code_lens","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ALEX_ACTION_ITEMS.md"}}},
{"type":"mark","name":"lsp.did_open","count":133,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/utils/campaignTransforms.ts","languageId":"typescript","version":1,"text":"import type { BusinessLead, CampaignResult } from \"../types\";\n\nconst normalizeCampaignStatus = (\n  value: string | null | undefined\n): CampaignResult[\"status\"] => {\n  switch (value) {\n    case \"running\":\n    case \"completed\":\n    case \"failed\":\n    case \"cancelled\":\n      return value;\n    default:\n      return \"completed\";\n  }\n};\n\nconst normalizeValidationStatus = (\n  value: string | null | undefined\n): BusinessLead[\"validation_status\"] => {\n  switch (value) {\n    case \"pending\":\n    case \"validating\":\n    case \"validated\":\n    case \"failed\":\n      return value;\n    default:\n      return \"validated\";\n  }\n};\n\nconst deriveDataSources = (enrichmentData: any): string[] => {\n  if (!enrichmentData) {\n    return [\"google_places\"];\n  }\n\n  const fromServices = Array.isArray(\n    enrichmentData?.processingMetadata?.servicesUsed\n  )\n    ? enrichmentData.processingMetadata.servicesUsed\n    : [];\n\n  const fromSources = Array.isArray(enrichmentData?.verificationSources)\n    ? enrichmentData.verificationSources\n    : [];\n\n  const dataSources = [...fromServices, ...fromSources].filter(Boolean);\n  return dataSources.length > 0 ? dataSources : [\"google_places\"];\n};\n\nconst coerceNumber = (value: unknown, fallback = 0): number => {\n  const parsed = Number(value);\n  return Number.isFinite(parsed) ? parsed : fallback;\n};\n\ninterface TransformOptions {\n  metrics?: Record<string, any> | null;\n}\n\nexport interface CampaignTransformResult {\n  campaignResult: CampaignResult;\n  leads: BusinessLead[];\n}\n\nconst sanitizeEnrichmentData = (\n  value: unknown\n): BusinessLead[\"enrichment_data\"] => {\n  if (value == null) {\n    return undefined;\n  }\n\n  if (typeof value !== \"object\") {\n    return undefined;\n  }\n\n  try {\n    return JSON.parse(JSON.stringify(value)) as BusinessLead[\"enrichment_data\"];\n  } catch (error) {\n    console.error(\"⚠️ Unable to sanitize enrichment data in transform\", error);\n    return undefined;\n  }\n};\n\nconst normalizeLeadIdentifier = (lead: any): string | null => {\n  const candidate = lead?.id ?? lead?.lead_id ?? null;\n\n  if (candidate == null) {\n    return null;\n  }\n\n  return String(candidate);\n};\n\nexport const transformCampaignData = (\n  campaignRecord: any,\n  leadsRecords: any[] = [],\n  options: TransformOptions = {}\n): CampaignTransformResult => {\n  if (!campaignRecord) {\n    throw new Error(\"Campaign record is required\");\n  }\n\n  const metricsAny = options.metrics ?? {};\n\n  const mappedLeads: BusinessLead[] = [];\n\n  for (const rawLead of leadsRecords) {\n    const leadId = normalizeLeadIdentifier(rawLead);\n\n    if (leadId == null) {\n      console.warn(\"⚠️ Dropping lead without identifier before hydration\", {\n        campaignId: campaignRecord.id,\n        lead: rawLead,\n      });\n      continue;\n    }\n\n    const lead = rawLead ?? {};\n    const enrichmentData = sanitizeEnrichmentData(lead.enrichment_data);\n    const rawCost =\n      lead.validation_cost ??\n      enrichmentData?.processingMetadata?.totalCost ??\n      0;\n\n    const tierFromData =\n      enrichmentData?.processingMetadata?.enrichmentTier ??\n      enrichmentData?.enrichmentTier;\n\n    const campaignId = String(lead.campaign_id ?? campaignRecord.id ?? \"\");\n\n    if (!campaignId) {\n      console.warn(\"⚠️ Dropping lead without campaign association\", {\n        campaignId: campaignRecord.id,\n        leadId,\n      });\n      continue;\n    }\n\n    mappedLeads.push({\n      id: leadId,\n      campaign_id: campaignId,\n      business_name: lead.business_name ?? \"Unknown Business\",\n      address: lead.address ?? \"\",\n      phone: lead.phone ?? \"\",\n      website: lead.website ?? \"\",\n      email: lead.email ?? \"\",\n      confidence_score: coerceNumber(lead.confidence_score, 0),\n      validation_status: normalizeValidationStatus(\n        enrichmentData?.validationStatus ?? lead.validation_status\n      ),\n      created_at: lead.created_at ?? new Date().toISOString(),\n      cost_to_acquire: coerceNumber(rawCost, 0),\n      data_sources: deriveDataSources(enrichmentData),\n      enrichment_tier:\n        tierFromData ??\n        (metricsAny?.tier as string | undefined) ??\n        (metricsAny?.tier_name as string | undefined) ??\n        undefined,\n      vault_secured: true,\n      enrichment_data: enrichmentData,\n    });\n  }\n\n  const leadsQualified = mappedLeads.filter(\n    (lead) => lead.confidence_score >= 70\n  ).length;\n  const leadsValidated = mappedLeads.filter(\n    (lead) => lead.validation_status === \"validated\"\n  ).length;\n\n  const totalFoundRaw = campaignRecord.results_count ?? mappedLeads.length ?? 0;\n\n  const campaignResult: CampaignResult = {\n    campaign_id: campaignRecord.id,\n    business_type: campaignRecord.business_type ?? undefined,\n    location: campaignRecord.location ?? undefined,\n    status: normalizeCampaignStatus(campaignRecord.status),\n    progress: 100,\n    total_cost: coerceNumber(\n      campaignRecord.total_cost ?? metricsAny?.total_cost ?? 0,\n      0\n    ),\n    leads_found: coerceNumber(totalFoundRaw, mappedLeads.length),\n    leads_qualified: leadsQualified,\n    leads_validated: leadsValidated,\n    created_at: campaignRecord.created_at ?? new Date().toISOString(),\n    completed_at: campaignRecord.updated_at ?? undefined,\n    tier_used:\n      (metricsAny?.tier as string | undefined) ??\n      (metricsAny?.tier_name as string | undefined) ??\n      undefined,\n    vault_secured: true,\n    cache_performance: undefined,\n  };\n\n  return {\n    campaignResult,\n    leads: mappedLeads,\n  };\n};\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":178,"duration":0.193},
{"type":"measure","name":"lsp.did_open","count":133,"duration":2.435},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.code_action","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":34,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",179]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":13,"duration":0.592},
{"type":"mark","name":"tsc.op.op_resolve","count":1162,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts","specifiers":[[false,"@tanstack/react-query"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../types"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1162,"duration":0.125},
{"type":"mark","name":"tsc.op.op_resolve","count":1163,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx","specifiers":[[false,"react"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1163,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":1164,"args":{"base":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/ProgressDisplay"],[false,"../contexts/AuthContext"],[false,"../hooks/useJobProgress"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1164,"duration":0.137},
{"type":"mark","name":"tsc.op.op_resolve","count":1165,"args":{"base":"file:///workspaces/ProspectPro/src/pages/Results.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../hooks/useCampaignResults"],[false,"../stores/campaignStore"],[false,"../utils/exportLeadsToCsv"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1165,"duration":0.065},
{"type":"mark","name":"tsc.op.op_load","count":357,"args":"file:///workspaces/ProspectPro/src/utils/campaignTransforms.ts"},
{"type":"measure","name":"tsc.op.op_load","count":357,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":1166,"args":{"base":"file:///workspaces/ProspectPro/src/utils/campaignTransforms.ts","specifiers":[[false,"../types"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1166,"duration":0.059},
{"type":"mark","name":"tsc.op.op_resolve","count":1167,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1167,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":1168,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1168,"duration":0.074},
{"type":"mark","name":"tsc.op.op_resolve","count":1169,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1169,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":1170,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1170,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1171,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1171,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1172,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1172,"duration":0.052},
{"type":"mark","name":"tsc.op.op_resolve","count":1173,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1173,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1174,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1174,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1175,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1175,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1176,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1176,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1177,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1177,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":1178,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1178,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":1179,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1179,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1180,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1180,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1181,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1181,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1182,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1182,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":1183,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1183,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":1184,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1184,"duration":0.044},
{"type":"mark","name":"tsc.op.op_resolve","count":1185,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1185,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":1186,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1186,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1187,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1187,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1188,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1188,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":1189,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1189,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1190,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1190,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":1191,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1191,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1192,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1192,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1193,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1193,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1194,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1194,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1195,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1195,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":1196,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1196,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":1197,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1197,"duration":0.049},
{"type":"mark","name":"tsc.op.op_resolve","count":1198,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1198,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":1199,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1199,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1200,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1200,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":1201,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1201,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1202,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1202,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":1203,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1203,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":1204,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1204,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1205,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1205,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":1206,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1206,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1207,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1207,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":1208,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1208,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":1209,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1209,"duration":0.053},
{"type":"mark","name":"tsc.op.op_resolve","count":1210,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1210,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":1211,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1211,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1212,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1212,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1213,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1213,"duration":0.049},
{"type":"mark","name":"tsc.op.op_resolve","count":1214,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1214,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":1215,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1215,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":1216,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1216,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1217,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1217,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1218,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1218,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1219,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1219,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1220,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1220,"duration":0.037},
{"type":"measure","name":"lsp.diagnostic","count":159,"duration":299.728},
{"type":"mark","name":"lsp.did_change_batched","count":67,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"mark","name":"tsc.op.op_resolve","count":1221,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1221,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1222,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1222,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":1223,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1223,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1224,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1224,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":1225,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1225,"duration":0.048},
{"type":"mark","name":"tsc.op.op_resolve","count":1226,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1226,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1227,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1227,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":1228,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1228,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1229,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1229,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":1230,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1230,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1231,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1231,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":1232,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1232,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1233,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1233,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1234,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1234,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":1235,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1235,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1236,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1236,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":1237,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1237,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":1238,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1238,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1239,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1239,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":1240,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1240,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1241,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1241,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":1242,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1242,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1243,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1243,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1244,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1244,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1245,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1245,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":1246,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1246,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1247,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1247,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1248,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1248,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":1249,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1249,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":1250,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1250,"duration":0.538},
{"type":"mark","name":"tsc.op.op_resolve","count":1251,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1251,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":1252,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1252,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":1253,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1253,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":1254,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1254,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":1255,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1255,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":1256,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1256,"duration":0.048},
{"type":"mark","name":"tsc.op.op_resolve","count":1257,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1257,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1258,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1258,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":1259,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1259,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1260,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1260,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1261,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1261,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":1262,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1262,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1263,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1263,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":1264,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1264,"duration":0.025},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":34,"duration":339.559},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":32,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":32,"duration":0.087},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_change_batched","count":67,"duration":88.377},
{"type":"mark","name":"lsp.inlay_hint","count":227,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1373,"character":0},"end":{"line":1490,"character":29}}}},
{"type":"measure","name":"lsp.testing_update","count":179,"duration":2.723},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":35,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",180]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":31,"duration":0.034},
{"type":"mark","name":"tsc.op.op_load","count":358,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":358,"duration":0.207},
{"type":"mark","name":"tsc.op.op_resolve","count":1265,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1265,"duration":0.077},
{"type":"mark","name":"lsp.semantic_tokens_full","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.folding_range","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"lsp.document_symbol","count":68,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":84,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"tsc.request.getNavigationTree"},
{"type":"mark","name":"lsp.inlay_hint","count":228,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1373,"character":0},"end":{"line":1490,"character":29}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":35,"duration":1126.867},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":35,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"start":0,"length":69997},"2020"]}},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":35,"duration":1132.825},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"lsp.document_symbol","count":69,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":85,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.code_lens","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":86,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"mark","name":"lsp.inlay_hint","count":229,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":982,"character":0},"end":{"line":1087,"character":0}}}},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":35,"duration":353.522},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":28,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":35,"duration":1221.846},
{"type":"measure","name":"lsp.semantic_tokens_full","count":32,"duration":1222.405},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":28,"duration":76.442},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":28,"duration":1117.99},
{"type":"measure","name":"lsp.folding_range","count":33,"duration":1118.279},
{"type":"mark","name":"tsc.host.getNavigationTree","count":29,"args":{"GetNavigationTree":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getNavigationTree","count":29,"duration":17.333},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":31,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":31,"duration":0.161},
{"type":"measure","name":"tsc.request.getNavigationTree","count":29,"duration":1122.939},
{"type":"measure","name":"lsp.get_navigation_tree","count":84,"duration":1123.023},
{"type":"measure","name":"lsp.document_symbol","count":68,"duration":1125.999},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":31,"duration":458.212},
{"type":"measure","name":"lsp.diagnostic","count":160,"duration":1597.101},
{"type":"measure","name":"lsp.get_navigation_tree","count":85,"duration":185.243},
{"type":"measure","name":"lsp.document_symbol","count":69,"duration":186.743},
{"type":"measure","name":"lsp.get_navigation_tree","count":86,"duration":198.477},
{"type":"measure","name":"lsp.code_lens","count":37,"duration":198.948},
{"type":"measure","name":"lsp.did_save","count":64,"duration":969.62},
{"type":"mark","name":"lsp.inlay_hint","count":230,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":982,"character":0},"end":{"line":1087,"character":0}}}},
{"type":"mark","name":"lsp.code_action","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":33,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":33,"duration":10.639},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":33,"duration":10.843},
{"type":"measure","name":"lsp.code_action","count":36,"duration":11.086},
{"type":"mark","name":"lsp.inlay_hint","count":231,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":982,"character":0},"end":{"line":1087,"character":0}}}},
{"type":"mark","name":"lsp.did_close","count":124,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/utils/campaignTransforms.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":180,"duration":0.207},
{"type":"measure","name":"lsp.did_close","count":124,"duration":2.254},
{"type":"mark","name":"lsp.did_change_watched_files","count":6,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/vercel.json","type":3}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":6,"duration":0.015},
{"type":"mark","name":"lsp.did_change_watched_files","count":7,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/vercel.json","type":1}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":7,"duration":0.018},
{"type":"mark","name":"lsp.goto_definition","count":46,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1013,"character":6}}},
{"type":"mark","name":"tsc.request.getDefinitionAndBoundSpan"},
{"type":"mark","name":"tsc.host.getDefinitionAndBoundSpan","count":10,"args":{"GetDefinitionAndBoundSpan":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",26328]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":14,"duration":0.556},
{"type":"mark","name":"tsc.op.op_resolve","count":1266,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts","specifiers":[[false,"@tanstack/react-query"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../types"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1266,"duration":0.112},
{"type":"mark","name":"tsc.op.op_resolve","count":1267,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx","specifiers":[[false,"react"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1267,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":1268,"args":{"base":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/ProgressDisplay"],[false,"../contexts/AuthContext"],[false,"../hooks/useJobProgress"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1268,"duration":0.122},
{"type":"mark","name":"tsc.op.op_resolve","count":1269,"args":{"base":"file:///workspaces/ProspectPro/src/pages/Results.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../hooks/useCampaignResults"],[false,"../stores/campaignStore"],[false,"../utils/exportLeadsToCsv"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1269,"duration":0.069},
{"type":"mark","name":"tsc.op.op_resolve","count":1270,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1270,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":1271,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1271,"duration":0.063},
{"type":"mark","name":"tsc.op.op_resolve","count":1272,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1272,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":1273,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1273,"duration":0.044},
{"type":"mark","name":"tsc.op.op_resolve","count":1274,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1274,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":1275,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1275,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":1276,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1276,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1277,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1277,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1278,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1278,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":1279,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1279,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":1280,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1280,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1281,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1281,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1282,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1282,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1283,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1283,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1284,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1284,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1285,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1285,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":1286,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1286,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1287,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1287,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":1288,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1288,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":1289,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1289,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":1290,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1290,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1291,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1291,"duration":0.081},
{"type":"mark","name":"tsc.op.op_resolve","count":1292,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1292,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":1293,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1293,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1294,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1294,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1295,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1295,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1296,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1296,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1297,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1297,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":1298,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1298,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1299,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1299,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":1300,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1300,"duration":0.066},
{"type":"mark","name":"tsc.op.op_resolve","count":1301,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1301,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":1302,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1302,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1303,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1303,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":1304,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1304,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1305,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1305,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1306,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1306,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1307,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1307,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1308,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1308,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":1309,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1309,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1310,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1310,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1311,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1311,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":1312,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1312,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":1313,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1313,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":1314,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1314,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1315,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1315,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1316,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1316,"duration":0.048},
{"type":"mark","name":"tsc.op.op_resolve","count":1317,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1317,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":1318,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1318,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1319,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1319,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1320,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1320,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1321,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1321,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1322,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1322,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1323,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1323,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":1324,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1324,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":1325,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1325,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":1326,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1326,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1327,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1327,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":1328,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1328,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":1329,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1329,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1330,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1330,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":1331,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1331,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1332,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1332,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1333,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1333,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":1334,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1334,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1335,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1335,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":1336,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1336,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1337,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1337,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":1338,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1338,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":1339,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1339,"duration":0.044},
{"type":"mark","name":"tsc.op.op_resolve","count":1340,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1340,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":1341,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1341,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":1342,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1342,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1343,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1343,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1344,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1344,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":1345,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1345,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":1346,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1346,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":1347,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1347,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1348,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1348,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1349,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1349,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":1350,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1350,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":1351,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1351,"duration":0.046},
{"type":"mark","name":"tsc.op.op_resolve","count":1352,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1352,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1353,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1353,"duration":0.046},
{"type":"mark","name":"tsc.op.op_resolve","count":1354,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1354,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":1355,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1355,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":1356,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1356,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":1357,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1357,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":1358,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1358,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":1359,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1359,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":1360,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1360,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":1361,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1361,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":1362,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1362,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":1363,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1363,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":1364,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1364,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1365,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1365,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1366,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1366,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":1367,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1367,"duration":0.03},
{"type":"mark","name":"tsc.op.op_release","count":72,"args":"file:///workspaces/ProspectPro/src/utils/campaignTransforms.ts"},
{"type":"measure","name":"tsc.op.op_release","count":72,"duration":1.001},
{"type":"measure","name":"tsc.host.getDefinitionAndBoundSpan","count":10,"duration":35.96},
{"type":"measure","name":"tsc.request.getDefinitionAndBoundSpan","count":10,"duration":36.13},
{"type":"measure","name":"lsp.goto_definition","count":46,"duration":36.474},
{"type":"mark","name":"lsp.goto_definition","count":47,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":667,"character":13}}},
{"type":"mark","name":"tsc.request.getDefinitionAndBoundSpan"},
{"type":"mark","name":"tsc.host.getDefinitionAndBoundSpan","count":11,"args":{"GetDefinitionAndBoundSpan":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",16858]}},
{"type":"measure","name":"tsc.host.getDefinitionAndBoundSpan","count":11,"duration":0.514},
{"type":"measure","name":"tsc.request.getDefinitionAndBoundSpan","count":11,"duration":0.658},
{"type":"measure","name":"lsp.goto_definition","count":47,"duration":0.81},
{"type":"mark","name":"lsp.goto_definition","count":48,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":667,"character":13}}},
{"type":"mark","name":"tsc.request.getDefinitionAndBoundSpan"},
{"type":"mark","name":"tsc.host.getDefinitionAndBoundSpan","count":12,"args":{"GetDefinitionAndBoundSpan":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",16858]}},
{"type":"measure","name":"tsc.host.getDefinitionAndBoundSpan","count":12,"duration":179.227},
{"type":"measure","name":"tsc.request.getDefinitionAndBoundSpan","count":12,"duration":179.787},
{"type":"measure","name":"lsp.goto_definition","count":48,"duration":179.963},
{"type":"mark","name":"lsp.inlay_hint","count":232,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":982,"character":0},"end":{"line":1097,"character":15}}}},
{"type":"mark","name":"lsp.hover","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1032,"character":6}}},
{"type":"mark","name":"tsc.request.getQuickInfoAtPosition"},
{"type":"mark","name":"tsc.host.getQuickInfoAtPosition","count":4,"args":{"GetQuickInfoAtPosition":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",27010]}},
{"type":"measure","name":"tsc.host.getQuickInfoAtPosition","count":4,"duration":0.715},
{"type":"measure","name":"tsc.request.getQuickInfoAtPosition","count":4,"duration":0.831},
{"type":"measure","name":"lsp.hover","count":8,"duration":0.957},
{"type":"mark","name":"lsp.inlay_hint","count":233,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":36,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",181]}},
{"type":"mark","name":"lsp.inlay_hint","count":234,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":36,"duration":471.89},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":36,"duration":474.181},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":32,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":32,"duration":0.087},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":32,"duration":0.184},
{"type":"measure","name":"lsp.did_save","count":65,"duration":474.651},
{"type":"mark","name":"lsp.inlay_hint","count":235,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.did_open","count":134,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","languageId":"typescript","version":1,"text":"import { useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport {\n  EDGE_FUNCTIONS_URL,\n  ENRICHMENT_TIERS,\n  SUPABASE_ANON_TOKEN,\n  ensureSession,\n  getSessionToken,\n} from \"../lib/supabase\";\nimport { useCampaignStore } from \"../stores/campaignStore\";\nimport type { BusinessDiscoveryResponse, CampaignConfig } from \"../types\";\n\nexport const useBusinessDiscovery = (\n  onJobCreated?: (jobData: {\n    jobId: string;\n    campaignId: string;\n    status: string;\n    estimatedTime?: number;\n  }) => void\n) => {\n  const { user } = useAuth();\n  const {\n    setLoading,\n    setError,\n    clearLeads,\n    setCurrentCampaign,\n    setCurrentCampaignId,\n  } = useCampaignStore();\n  const [progress, setProgress] = useState(0);\n  const [currentStage, setCurrentStage] = useState<string>(\"\");\n  const [cacheStats] = useState<any>(null);\n\n  const discoveryMutation = useMutation({\n    mutationFn: async (\n      config: CampaignConfig & { selectedTier?: keyof typeof ENRICHMENT_TIERS }\n    ): Promise<BusinessDiscoveryResponse> => {\n      setLoading(true);\n      setError(null);\n      setProgress(10);\n      setCurrentStage(\"Initializing user-aware discovery...\");\n\n      // Reset any existing campaign context before starting a new discovery\n      clearLeads();\n      setCurrentCampaign(null);\n      setCurrentCampaignId(null);\n\n      try {\n        console.log(\"🚀 Starting user-aware business discovery:\", config);\n\n        // Ensure we have a valid session before calling Edge Function\n        const hasSession = await ensureSession();\n        if (!hasSession || !user?.id) {\n          throw new Error(\"Please sign in to run a discovery campaign.\");\n        }\n\n        // Determine enrichment tier\n        const tier = config.selectedTier || \"PROFESSIONAL\";\n        const tierConfig = ENRICHMENT_TIERS[tier];\n        const keywordList = config.keywords\n          ? config.keywords\n              .split(\",\")\n              .map((value) => value.trim())\n              .filter(Boolean)\n          : undefined;\n\n        const discoveryOptions = {\n          tradeAssociation: config.trade_association ?? false,\n          professionalLicense: config.professional_license ?? false,\n          chamberVerification: config.chamber_verification ?? false,\n          apolloDiscovery: tier === \"ENTERPRISE\",\n        };\n\n        setCurrentStage(\n          `Using ${tierConfig.name} tier ($${tierConfig.price}/lead)`\n        );\n        setProgress(20);\n\n        const accessToken = await getSessionToken();\n\n        const billingContext = {\n          tier,\n          tierName: tierConfig.name,\n          unitPrice: tierConfig.price,\n          estimatedBudget: config.max_results * tierConfig.price,\n          currency: \"USD\",\n        };\n\n        // Call background task business discovery with authentication\n        const requestBody = {\n          businessType: config.business_type || config.search_terms,\n          location: config.location,\n          keywords: keywordList,\n          searchRadius: config.search_radius,\n          expandGeography: config.expand_geography,\n          maxResults: config.max_results,\n          budgetLimit: config.max_results * tierConfig.price,\n          minConfidenceScore: config.min_confidence_score || 50,\n          tierKey: tier,\n          tierName: tierConfig.name,\n          tierPrice: tierConfig.price,\n          options: discoveryOptions,\n          sessionUserId: user.id,\n          userId: user.id,\n          billingContext,\n        };\n\n        if (!accessToken) {\n          throw new Error(\n            \"Unable to read session token. Please sign in again.\"\n          );\n        }\n\n        const headers: Record<string, string> = {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${accessToken}`,\n          apikey: SUPABASE_ANON_TOKEN,\n          \"X-Prospect-Session\": accessToken,\n        };\n\n        const response = await fetch(\n          `${EDGE_FUNCTIONS_URL}/business-discovery-background`,\n          {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(requestBody),\n          }\n        );\n\n        const rawResponse = await response.json().catch(() => ({}));\n\n        if (!response.ok) {\n          console.error(\"❌ Background discovery error:\", rawResponse);\n          const message =\n            typeof rawResponse?.error === \"string\"\n              ? rawResponse.error\n              : typeof rawResponse?.message === \"string\"\n              ? rawResponse.message\n              : `Edge function request failed: ${response.status}`;\n          throw new Error(message);\n        }\n\n        if (!rawResponse?.success) {\n          const fallbackMessage =\n            typeof rawResponse?.error === \"string\"\n              ? rawResponse.error\n              : \"No data returned from background discovery\";\n          throw new Error(fallbackMessage);\n        }\n\n        console.log(\"✅ Background discovery response:\", rawResponse);\n\n        // For background tasks, we get jobId and campaignId immediately\n        // The actual processing happens in the background\n        const transformedData: BusinessDiscoveryResponse = {\n          campaign_id: rawResponse.campaignId,\n          job_id: rawResponse.jobId, // New: job ID for tracking progress\n          status: rawResponse.status, // New: processing status\n          estimated_time: rawResponse.estimatedTime, // New: estimated completion time\n          realtime_channel: rawResponse.realtimeChannel, // New: for real-time updates\n          total_found: 0, // Will be updated via real-time\n          qualified_count: 0, // Will be updated via real-time\n          total_cost: 0, // Will be updated via real-time\n          processing_time: \"< 100ms\", // Immediate response\n          tier_used: tierConfig.name,\n          cache_performance: undefined,\n          vault_status: \"secured\",\n          census_intelligence: undefined,\n          businesses: [], // Will be populated via real-time updates\n        };\n\n        setProgress(100);\n        setCurrentStage(\"Complete! 🎉\");\n        return transformedData;\n      } catch (error) {\n        console.error(\"❌ User-aware discovery error:\", error);\n        setCurrentStage(\"Failed ❌\");\n        throw error;\n      } finally {\n        setLoading(false);\n      }\n    },\n    onSuccess: (data: BusinessDiscoveryResponse) => {\n      console.log(\"✅ Background job created:\", data);\n\n      // For background jobs, we don't create the full campaign record immediately\n      // The progress page will handle real-time updates and final campaign creation\n\n      setProgress(100);\n      setCurrentStage(\"Background processing started! 🚀\");\n\n      // Navigate to progress page with job ID\n      if (data.job_id && data.campaign_id) {\n        const jobData = {\n          jobId: data.job_id,\n          campaignId: data.campaign_id,\n          status: data.status || \"pending\",\n          estimatedTime: data.estimated_time,\n        };\n\n        console.log(\"Job started:\", jobData);\n\n        // Call the navigation callback if provided\n        if (onJobCreated) {\n          onJobCreated(jobData);\n        }\n\n        setCurrentCampaignId(data.campaign_id);\n      }\n    },\n    onError: (error: any) => {\n      setError(\n        error instanceof Error ? error.message : \"User-aware discovery failed\"\n      );\n      setProgress(0);\n      setCurrentStage(\"Failed ❌\");\n    },\n  });\n\n  return {\n    startDiscovery: discoveryMutation.mutate,\n    isDiscovering: discoveryMutation.isPending,\n    progress,\n    currentStage,\n    cacheStats,\n    error: discoveryMutation.error,\n    data: discoveryMutation.data,\n  };\n};\n"}}},
{"type":"measure","name":"lsp.did_open","count":134,"duration":3.438},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":181,"duration":0.204},
{"type":"mark","name":"lsp.did_open","count":135,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/lib/supabase.ts","languageId":"typescript","version":1,"text":"import { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl =\n  import.meta.env.VITE_SUPABASE_URL ||\n  import.meta.env.NEXT_PUBLIC_SUPABASE_URL ||\n  import.meta.env.SUPABASE_URL;\n\nconst supabaseAnonKey =\n  import.meta.env.VITE_SUPABASE_ANON_KEY ||\n  import.meta.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ||\n  import.meta.env.SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error(\"Missing Supabase environment variables\");\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    persistSession: true,\n    autoRefreshToken: true,\n  },\n});\n\nexport const SUPABASE_ANON_TOKEN = supabaseAnonKey;\n\n// Helper function to get current session token for Edge Function calls\nexport const getSessionToken = async (): Promise<string | null> => {\n  const {\n    data: { session },\n    error,\n  } = await supabase.auth.getSession();\n\n  if (error) {\n    console.error(\"Error getting session:\", error);\n    return null;\n  }\n\n  // Return the access token (JWT) from the session\n  return session?.access_token ?? null;\n};\n\n// Helper function to ensure we have a valid session\nexport const ensureSession = async (): Promise<boolean> => {\n  const {\n    data: { session },\n    error,\n  } = await supabase.auth.getSession();\n\n  if (error) {\n    console.error(\"Failed to read session:\", error);\n    return false;\n  }\n\n  return Boolean(session?.access_token);\n};\n\n// Edge Functions URL\nexport const EDGE_FUNCTIONS_URL =\n  import.meta.env.VITE_EDGE_FUNCTIONS_URL || `${supabaseUrl}/functions/v1`;\n\n// Edge Function endpoints for vault-secured progressive enrichment\nexport const EDGE_FUNCTIONS = {\n  // Progressive Enrichment Orchestrator (vault-secured)\n  ENRICHMENT_ORCHESTRATOR: `${EDGE_FUNCTIONS_URL}/enrichment-orchestrator`,\n\n  // Individual enrichment services (vault-secured)\n  ENRICHMENT_BUSINESS_LICENSE: `${EDGE_FUNCTIONS_URL}/enrichment-business-license`,\n  ENRICHMENT_PDL: `${EDGE_FUNCTIONS_URL}/enrichment-pdl`,\n  ENRICHMENT_HUNTER: `${EDGE_FUNCTIONS_URL}/enrichment-hunter`,\n  ENRICHMENT_NEVERBOUNCE: `${EDGE_FUNCTIONS_URL}/enrichment-neverbounce`,\n\n  // Legacy endpoints (for backward compatibility)\n  ENHANCED_BUSINESS_DISCOVERY: `${EDGE_FUNCTIONS_URL}/enhanced-business-discovery`,\n  LEAD_VALIDATION: `${EDGE_FUNCTIONS_URL}/lead-validation-edge`,\n  BUSINESS_DISCOVERY: `${EDGE_FUNCTIONS_URL}/business-discovery-edge`,\n  DIAGNOSTICS: `${EDGE_FUNCTIONS_URL}/diag`,\n} as const;\n\n// Progressive Enrichment Tiers - Consolidated to 3 Tiers\nexport const ENRICHMENT_TIERS = {\n  BASE: {\n    name: \"Base\",\n    price: 0.15, // Essential Business Data\n    stages: [\"business-verification\", \"company-data\"],\n    description:\n      \"Essential Business Data - Perfect for targeted outreach campaigns\",\n    features: [\n      \"Business verification\",\n      \"Company data (name, industry, size)\",\n      \"Phone & address validation\",\n      \"Generic company email\",\n    ],\n    badge: \"Most Popular\",\n    hasOwnershipData: false,\n  },\n  PROFESSIONAL: {\n    name: \"Professional\",\n    price: 0.45, // Enhanced Sales Intelligence\n    stages: [\n      \"business-verification\",\n      \"company-data\",\n      \"email-discovery\",\n      \"email-verification\",\n    ],\n    description:\n      \"Enhanced Sales Intelligence - Verified contacts for higher conversion rates\",\n    features: [\n      \"Everything in Base\",\n      \"Professional email discovery & verification\",\n      \"Email deliverability verification\",\n      \"Enhanced company enrichment\",\n    ],\n    badge: \"\",\n    hasOwnershipData: false,\n  },\n  ENTERPRISE: {\n    name: \"Enterprise\",\n    price: 2.5, // Premium Executive Access\n    stages: [\n      \"business-verification\",\n      \"company-data\",\n      \"email-discovery\",\n      \"email-verification\",\n      \"executive-enrichment\",\n      \"compliance-verification\",\n    ],\n    description:\n      \"Premium Executive Access - Compliance-grade data with C-suite contacts\",\n    features: [\n      \"Everything in Professional\",\n      \"Executive contact enrichment\",\n      \"Full compliance verification\",\n      \"Advanced data validation\",\n    ],\n    badge: \"Premium\",\n    hasOwnershipData: true,\n  },\n} as const;\n"}}},
{"type":"measure","name":"lsp.did_open","count":135,"duration":1.283},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":182,"duration":0.207},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":161,"duration":0.021},
{"type":"mark","name":"lsp.did_change_batched","count":68,"args":"file:///workspaces/ProspectPro/src/lib/supabase.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":68,"duration":5.002},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":162,"duration":0.011},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":183,"duration":0.2},
{"type":"mark","name":"lsp.inlay_hint","count":236,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":163,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":66,"duration":0.02},
{"type":"mark","name":"lsp.inlay_hint","count":237,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.did_change_batched","count":69,"args":"file:///workspaces/ProspectPro/src/lib/supabase.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":184,"duration":0.232},
{"type":"measure","name":"lsp.did_change_batched","count":69,"duration":2.537},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":164,"duration":0.011},
{"type":"mark","name":"lsp.inlay_hint","count":238,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":165,"duration":0.002},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":67,"duration":0.036},
{"type":"mark","name":"lsp.inlay_hint","count":239,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":166,"duration":0.022},
{"type":"mark","name":"lsp.did_change_batched","count":70,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":185,"duration":0.24},
{"type":"measure","name":"lsp.did_change_batched","count":70,"duration":20.0},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":167,"duration":0.01},
{"type":"mark","name":"lsp.inlay_hint","count":240,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":168,"duration":0.022},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":68,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":241,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":169,"duration":0.001},
{"type":"mark","name":"lsp.did_change_watched_files","count":8,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/vercel.json","type":3}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":8,"duration":0.015},
{"type":"mark","name":"lsp.did_change_watched_files","count":9,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/vercel.json","type":1}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":9,"duration":0.016},
{"type":"mark","name":"lsp.inlay_hint","count":242,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":69,"duration":0.02},
{"type":"mark","name":"lsp.inlay_hint","count":243,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.did_change_batched","count":71,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":71,"duration":2.451},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.diagnostic","count":170,"duration":0.011},
{"type":"measure","name":"lsp.testing_update","count":186,"duration":0.331},
{"type":"mark","name":"lsp.inlay_hint","count":244,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.did_change_batched","count":72,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":72,"duration":2.618},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":171,"duration":0.01},
{"type":"measure","name":"lsp.testing_update","count":187,"duration":0.206},
{"type":"mark","name":"lsp.inlay_hint","count":245,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":172,"duration":0.022},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":70,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":246,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":173,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":73,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":73,"duration":18.566},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":174,"duration":0.011},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":188,"duration":0.237},
{"type":"mark","name":"lsp.inlay_hint","count":247,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":175,"duration":0.022},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":71,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":248,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":176,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":74,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":189,"duration":0.203},
{"type":"measure","name":"lsp.did_change_batched","count":74,"duration":2.601},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":177,"duration":0.009},
{"type":"mark","name":"lsp.inlay_hint","count":249,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":178,"duration":0.022},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":72,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":250,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":179,"duration":0.001},
{"type":"mark","name":"lsp.did_change_watched_files","count":10,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/vercel.json","type":3}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":10,"duration":0.016},
{"type":"mark","name":"lsp.did_change_watched_files","count":11,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/vercel.json","type":1}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":11,"duration":0.017},
{"type":"mark","name":"lsp.goto_definition","count":49,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},"position":{"line":114,"character":25}}},
{"type":"mark","name":"lsp.inlay_hint","count":251,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.did_change_batched","count":75,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":190,"duration":0.246},
{"type":"measure","name":"lsp.did_change_batched","count":75,"duration":3.944},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":180,"duration":0.009},
{"type":"mark","name":"lsp.inlay_hint","count":252,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.did_change_batched","count":76,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":76,"duration":5.197},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":181,"duration":0.011},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":191,"duration":0.229},
{"type":"mark","name":"lsp.inlay_hint","count":253,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":182,"duration":0.023},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":73,"duration":0.021},
{"type":"mark","name":"lsp.inlay_hint","count":254,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":999,"character":14},"end":{"line":1091,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":183,"duration":0.002},
{"type":"mark","name":"lsp.inlay_hint","count":255,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1000,"character":16},"end":{"line":1089,"character":13}}}},
{"type":"mark","name":"lsp.document_highlight","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"tsc.request.getDocumentHighlights"},
{"type":"mark","name":"tsc.host.getDocumentHighlights","count":4,"args":{"GetDocumentHighlights":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",0,["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]]}},
{"type":"mark","name":"lsp.inlay_hint","count":256,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":1000,"character":16},"end":{"line":1089,"character":13}}}},
{"type":"mark","name":"lsp.document_symbol","count":70,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":87,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":87,"duration":0.001},
{"type":"measure","name":"lsp.document_symbol","count":70,"duration":0.93},
{"type":"mark","name":"lsp.code_action","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.request.getApplicableRefactors"},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":15,"duration":4.148},
{"type":"mark","name":"tsc.op.op_load","count":359,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"tsc.op.op_load","count":359,"duration":0.334},
{"type":"mark","name":"tsc.op.op_resolve","count":1368,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts","specifiers":[[false,"@tanstack/react-query"],[false,"react"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../types"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1368,"duration":0.123},
{"type":"mark","name":"tsc.op.op_resolve","count":1369,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useCampaignResults.ts","specifiers":[[false,"@tanstack/react-query"],[false,"../contexts/AuthContext"],[false,"../lib/supabase"],[false,"../types"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1369,"duration":0.102},
{"type":"mark","name":"tsc.op.op_resolve","count":1370,"args":{"base":"file:///workspaces/ProspectPro/src/hooks/useJobProgress.tsx","specifiers":[[false,"react"],[false,"../lib/supabase"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1370,"duration":0.036},
{"type":"mark","name":"tsc.op.op_load","count":360,"args":"file:///workspaces/ProspectPro/src/lib/supabase.ts"},
{"type":"measure","name":"tsc.op.op_load","count":360,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":1371,"args":{"base":"file:///workspaces/ProspectPro/src/lib/supabase.ts","specifiers":[[false,"@supabase/supabase-js"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1371,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":1372,"args":{"base":"file:///workspaces/ProspectPro/src/pages/CampaignProgress.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../components/ProgressDisplay"],[false,"../contexts/AuthContext"],[false,"../hooks/useJobProgress"],[false,"../lib/supabase"],[false,"../stores/campaignStore"],[false,"../utils/campaignTransforms"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1372,"duration":0.122},
{"type":"mark","name":"tsc.op.op_resolve","count":1373,"args":{"base":"file:///workspaces/ProspectPro/src/pages/Results.tsx","specifiers":[[false,"react"],[false,"react-router-dom"],[false,"../hooks/useCampaignResults"],[false,"../stores/campaignStore"],[false,"../utils/exportLeadsToCsv"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1373,"duration":0.064},
{"type":"mark","name":"tsc.op.op_resolve","count":1374,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/api-usage.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1374,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":1375,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1375,"duration":0.068},
{"type":"mark","name":"tsc.op.op_resolve","count":1376,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1376,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":1377,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1377,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1378,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1378,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1379,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1379,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":1380,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1380,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1381,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1381,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":1382,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1382,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":1383,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1383,"duration":0.047},
{"type":"mark","name":"tsc.op.op_resolve","count":1384,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1384,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1385,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1385,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1386,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1386,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":1387,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1387,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":1388,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1388,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1389,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1389,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":1390,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1390,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":1391,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1391,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":1392,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1392,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":1393,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1393,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1394,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1394,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1395,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1395,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":1396,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1396,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1397,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1397,"duration":2.003},
{"type":"mark","name":"tsc.op.op_resolve","count":1398,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1398,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1399,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1399,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1400,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1400,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":1401,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1401,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1402,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1402,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":1403,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1403,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1404,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1404,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":1405,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1405,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":1406,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1406,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1407,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1407,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1408,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1408,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1409,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1409,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1410,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1410,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1411,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1411,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1412,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1412,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1413,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1413,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1414,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth-simplified.ts","specifiers":[[false,"./edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1414,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":1415,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/edge-auth.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1415,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1416,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1416,"duration":0.054},
{"type":"mark","name":"tsc.op.op_resolve","count":1417,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1417,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":1418,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1418,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1419,"args":{"base":"https://esm.sh/@supabase/functions-js@2.4.4/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1419,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":1420,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1420,"duration":0.05},
{"type":"mark","name":"tsc.op.op_resolve","count":1421,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1421,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":1422,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1422,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":1423,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1423,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1424,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1424,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":1425,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1425,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":1426,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1426,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1427,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1427,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":1428,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1428,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1429,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1429,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1430,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.17.11/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1430,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":1431,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1431,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":1432,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeClient.d.ts","specifiers":[[false,"https://esm.sh/@types/ws@8.5.13/index.d.mts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1432,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":1433,"args":{"base":"https://esm.sh/@types/ws@8.5.13/index.d.mts","specifiers":[[false,"./index.d.mts"],[true,"./index.d.mts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1433,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":1434,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1434,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":1435,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1435,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":1436,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1436,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1437,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1437,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":1438,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1438,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":1439,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1439,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":1440,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1440,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":1441,"args":{"base":"https://esm.sh/@supabase/storage-js@2.7.1/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1441,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":1442,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1442,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1443,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1443,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":1444,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1444,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":1445,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1445,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":1446,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./internal-types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1446,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":1447,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1447,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":1448,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/internal-types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1448,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":1449,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1449,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1450,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1450,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1451,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1451,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1452,"args":{"base":"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1452,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":1453,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.38.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/gotrue-js@2.67.3/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.11.3/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1453,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":1454,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/_shared/vault-client.ts","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.38.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1454,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":1455,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/api-usage.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1455,"duration":0.047},
{"type":"mark","name":"tsc.op.op_resolve","count":1456,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1456,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1457,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1457,"duration":0.048},
{"type":"mark","name":"tsc.op.op_resolve","count":1458,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1458,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":1459,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1459,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":1460,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1460,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":1461,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-optimized/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1461,"duration":0.081},
{"type":"mark","name":"tsc.op.op_resolve","count":1462,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1462,"duration":0.054},
{"type":"mark","name":"tsc.op.op_resolve","count":1463,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export-user-aware/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1463,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":1464,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1464,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":1465,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-hunter/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1465,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":1466,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-neverbounce/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/vault-client.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1466,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":1467,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enrichment-orchestrator/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/api-usage.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1467,"duration":0.031},
{"type":"mark","name":"tsc.op.op_resolve","count":1468,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1468,"duration":0.048},
{"type":"mark","name":"tsc.op.op_resolve","count":1469,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-google-places/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1469,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":1470,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-new-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2.38.0"],[false,"../_shared/edge-auth.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1470,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":1471,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/test-official-auth/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"../_shared/edge-auth.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1471,"duration":0.027},
{"type":"measure","name":"tsc.host.getDocumentHighlights","count":4,"duration":378.79},
{"type":"measure","name":"tsc.request.getDocumentHighlights","count":4,"duration":381.391},
{"type":"measure","name":"lsp.document_highlight","count":4,"duration":383.277},
{"type":"mark","name":"tsc.host.getApplicableRefactors","count":34,"args":{"GetApplicableRefactors":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",{"pos":0,"end":0},{"quotePreference":"auto","includeCompletionsForModuleExports":false,"includeCompletionsForImportStatements":true,"includeCompletionsWithSnippetText":true,"includeAutomaticOptionalChainCompletions":true,"includeCompletionsWithInsertText":true,"includeCompletionsWithClassMemberSnippets":true,"includeCompletionsWithObjectLiteralMethodSnippets":true,"useLabelDetailsInCompletionEntries":true,"allowIncompleteCompletions":true,"importModuleSpecifierPreference":"shortest","importModuleSpecifierEnding":"index","allowTextChangesInNewFiles":true,"providePrefixAndSuffixTextForRename":true,"provideRefactorNotApplicableReason":true,"jsxAttributeCompletionStyle":"auto","includeInlayParameterNameHints":"none","includeInlayParameterNameHintsWhenArgumentMatchesName":false,"includeInlayFunctionParameterTypeHints":false,"includeInlayVariableTypeHints":false,"includeInlayVariableTypeHintsWhenTypeMatchesName":false,"includeInlayPropertyDeclarationTypeHints":false,"includeInlayFunctionLikeReturnTypeHints":false,"includeInlayEnumMemberValueHints":false,"autoImportFileExcludePatterns":[],"interactiveInlayHints":true,"preferTypeOnlyAutoImports":false},"implicit",""]}},
{"type":"measure","name":"tsc.host.getApplicableRefactors","count":34,"duration":0.448},
{"type":"measure","name":"tsc.request.getApplicableRefactors","count":34,"duration":122.307},
{"type":"measure","name":"lsp.code_action","count":37,"duration":124.38},
{"type":"mark","name":"lsp.code_lens","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":88,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":88,"duration":0.001},
{"type":"measure","name":"lsp.code_lens","count":38,"duration":0.554},
{"type":"mark","name":"lsp.folding_range","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"tsc.request.getOutliningSpans"},
{"type":"mark","name":"tsc.host.getOutliningSpans","count":29,"args":{"GetOutliningSpans":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]}},
{"type":"measure","name":"tsc.host.getOutliningSpans","count":29,"duration":16.32},
{"type":"measure","name":"tsc.request.getOutliningSpans","count":29,"duration":17.641},
{"type":"measure","name":"lsp.folding_range","count":34,"duration":17.921},
{"type":"mark","name":"lsp.document_highlight","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"tsc.request.getDocumentHighlights"},
{"type":"mark","name":"tsc.host.getDocumentHighlights","count":5,"args":{"GetDocumentHighlights":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",0,["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]]}},
{"type":"measure","name":"tsc.host.getDocumentHighlights","count":5,"duration":0.286},
{"type":"measure","name":"tsc.request.getDocumentHighlights","count":5,"duration":0.382},
{"type":"measure","name":"lsp.document_highlight","count":5,"duration":0.485},
{"type":"mark","name":"lsp.hover","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1037,"character":7}}},
{"type":"mark","name":"tsc.request.getQuickInfoAtPosition"},
{"type":"mark","name":"tsc.host.getQuickInfoAtPosition","count":5,"args":{"GetQuickInfoAtPosition":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",27105]}},
{"type":"measure","name":"tsc.host.getQuickInfoAtPosition","count":5,"duration":4.598},
{"type":"measure","name":"tsc.request.getQuickInfoAtPosition","count":5,"duration":4.709},
{"type":"measure","name":"lsp.hover","count":9,"duration":4.859},
{"type":"mark","name":"lsp.document_highlight","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"tsc.request.getDocumentHighlights"},
{"type":"mark","name":"tsc.host.getDocumentHighlights","count":6,"args":{"GetDocumentHighlights":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",0,["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"]]}},
{"type":"measure","name":"tsc.host.getDocumentHighlights","count":6,"duration":0.226},
{"type":"measure","name":"tsc.request.getDocumentHighlights","count":6,"duration":0.472},
{"type":"measure","name":"lsp.document_highlight","count":6,"duration":0.606},
{"type":"mark","name":"lsp.inlay_hint","count":257,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":977,"character":0},"end":{"line":1086,"character":5}}}},
{"type":"mark","name":"lsp.code_lens","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.get_navigation_tree","count":89,"args":{"specifier":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}},
{"type":"measure","name":"lsp.get_navigation_tree","count":89,"duration":0.001},
{"type":"measure","name":"lsp.code_lens","count":39,"duration":0.547},
{"type":"mark","name":"lsp.code_lens_resolve","count":11,"args":{"range":{"start":{"line":1028,"character":2},"end":{"line":1028,"character":15}},"data":{"source":"references","uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"}}},
{"type":"mark","name":"lsp.references","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"position":{"line":1028,"character":2},"context":{"includeDeclaration":false}}},
{"type":"mark","name":"tsc.request.findReferences"},
{"type":"mark","name":"tsc.host.findReferences","count":11,"args":{"FindReferences":["file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts",26726]}},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":117,"duration":0.011},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":118,"duration":0.007},
{"type":"measure","name":"tsc.host.findReferences","count":11,"duration":48.321},
{"type":"measure","name":"tsc.request.findReferences","count":11,"duration":48.491},
{"type":"measure","name":"lsp.references","count":11,"duration":48.608},
{"type":"measure","name":"lsp.code_lens_resolve","count":11,"duration":48.637},
{"type":"mark","name":"lsp.goto_definition","count":50,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},"position":{"line":8,"character":2}}},
{"type":"mark","name":"lsp.goto_definition","count":51,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},"position":{"line":8,"character":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":77,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":77,"duration":1.684},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":192,"duration":0.126},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":184,"duration":0.012},
{"type":"mark","name":"lsp.inlay_hint","count":258,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":977,"character":0},"end":{"line":1086,"character":5}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":74,"duration":0.021},
{"type":"mark","name":"lsp.inlay_hint","count":259,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":977,"character":0},"end":{"line":1086,"character":5}}}},
{"type":"mark","name":"lsp.did_change_batched","count":78,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":78,"duration":2.324},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":185,"duration":0.01},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":193,"duration":0.206},
{"type":"mark","name":"lsp.inlay_hint","count":260,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":977,"character":0},"end":{"line":1086,"character":5}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":186,"duration":0.002},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":75,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":261,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":977,"character":0},"end":{"line":1086,"character":5}}}},
{"type":"mark","name":"lsp.did_change_batched","count":79,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":194,"duration":0.209},
{"type":"measure","name":"lsp.did_change_batched","count":79,"duration":9.546},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":187,"duration":0.009},
{"type":"mark","name":"lsp.inlay_hint","count":262,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":977,"character":0},"end":{"line":1086,"character":5}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":188,"duration":0.002},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":76,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":263,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":977,"character":0},"end":{"line":1086,"character":5}}}},
{"type":"mark","name":"lsp.did_change_batched","count":80,"args":"file:///workspaces/ProspectPro/src/hooks/useBusinessDiscovery.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":195,"duration":0.213},
{"type":"measure","name":"lsp.did_change_batched","count":80,"duration":6.029},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":189,"duration":0.012},
{"type":"mark","name":"lsp.inlay_hint","count":264,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":977,"character":0},"end":{"line":1086,"character":5}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":190,"duration":0.002},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":77,"duration":0.042},
{"type":"mark","name":"lsp.inlay_hint","count":265,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery-background/index.ts"},"range":{"start":{"line":977,"character":0},"end":{"line":1086,"character":5}}}},
{"type":"mark","name":"lsp.did_change_watched_files","count":12,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/vercel.json","type":3}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":12,"duration":0.016},
{"type":"mark","name":"lsp.did_change_watched_files","count":13,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/vercel.json","type":1}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":13,"duration":0.019},
{"type":"mark","name":"lsp.did_change_watched_files","count":14,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/dist/.vercel/project.json","type":1}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":14,"duration":0.016},
