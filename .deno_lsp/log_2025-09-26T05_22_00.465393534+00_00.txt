Starting Deno language server...
{"type":"mark","name":"lsp.initialize","count":1,"args":{"processId":327,"rootPath":"/workspaces/ProspectPro","rootUri":"file:///workspaces/ProspectPro","initializationOptions":{"enable":true,"cacheOnSave":true,"disablePaths":[],"enablePaths":["supabase/functions"],"path":null,"env":{},"envFile":null,"cache":null,"certificateStores":null,"codeLens":{"implementations":true,"references":true,"referencesAllFunctions":true,"test":true,"testArgs":["--allow-all","--no-check"]},"config":null,"documentPreloadLimit":1000,"future":false,"importMap":null,"inlayHints":{"parameterNames":{"enabled":"none","suppressWhenArgumentMatchesName":true},"parameterTypes":{"enabled":false},"variableTypes":{"enabled":false,"suppressWhenTypeMatchesName":true},"propertyDeclarationTypes":{"enabled":false},"functionLikeReturnTypes":{"enabled":false},"enumMemberValues":{"enabled":false}},"maxTsServerMemory":3072,"suggest":{"autoImports":true,"completeFunctionCalls":false,"names":true,"paths":true,"imports":{"autoDiscover":true,"hosts":{"https://deno.land":true}}},"trace":{"server":"off"},"testing":{"args":["--allow-all","--no-check"]},"tlsCertificate":null,"unsafelyIgnoreCertificateErrors":null,"unstable":true,"lint":true,"internalDebug":false,"internalInspect":false,"logFile":true,"defaultTaskCommand":"open","javascript":{"referencesCodeLens":{"enabled":false,"showOnAllFunctions":false},"validate":{"enable":true},"suggestionActions":{"enabled":true},"updateImportsOnFileMove":{"enabled":"always"},"autoClosingTags":true,"preferGoToSourceDefinition":false,"updateImportsOnPaste":{"enabled":true},"suggest":{"enabled":true,"autoImports":true,"names":true,"completeFunctionCalls":false,"paths":true,"completeJSDocs":true,"jsdoc":{"generateReturns":true},"includeAutomaticOptionalChainCompletions":true,"includeCompletionsForImportStatements":true,"classMemberSnippets":{"enabled":true}},"preferences":{"quoteStyle":"auto","importModuleSpecifier":"shortest","importModuleSpecifierEnding":"auto","jsxAttributeCompletionStyle":"auto","autoImportFileExcludePatterns":[],"autoImportSpecifierExcludeRegexes":[],"useAliasesForRenames":true,"renameMatchingJsxTags":true,"organizeImports":{}},"format":{"enable":true,"insertSpaceAfterCommaDelimiter":true,"insertSpaceAfterConstructor":false,"insertSpaceAfterSemicolonInForStatements":true,"insertSpaceBeforeAndAfterBinaryOperators":true,"insertSpaceAfterKeywordsInControlFlowStatements":true,"insertSpaceAfterFunctionKeywordForAnonymousFunctions":true,"insertSpaceBeforeFunctionParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingEmptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces":false,"insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces":false,"placeOpenBraceOnNewLineForFunctions":false,"placeOpenBraceOnNewLineForControlBlocks":false,"semicolons":"ignore","indentSwitchCase":true},"inlayHints":{"parameterNames":{"enabled":"none","suppressWhenArgumentMatchesName":true},"parameterTypes":{"enabled":false},"variableTypes":{"enabled":false,"suppressWhenTypeMatchesName":true},"propertyDeclarationTypes":{"enabled":false},"functionLikeReturnTypes":{"enabled":false}}},"typescript":{"tsdk":"","disableAutomaticTypeAcquisition":false,"enablePromptUseWorkspaceTsdk":false,"referencesCodeLens":{"enabled":false,"showOnAllFunctions":false},"implementationsCodeLens":{"enabled":false,"showOnInterfaceMethods":false},"experimental":{"useTsgo":false},"reportStyleChecksAsWarnings":true,"validate":{"enable":true},"tsc":{"autoDetect":"on"},"locale":"auto","suggestionActions":{"enabled":true},"updateImportsOnFileMove":{"enabled":"prompt"},"autoClosingTags":true,"workspaceSymbols":{"scope":"allOpenProjects","excludeLibrarySymbols":true},"preferGoToSourceDefinition":false,"tsserver":{"enableRegionDiagnostics":true,"nodePath":"","web":{"projectWideIntellisense":{"enabled":true,"suppressSemanticErrors":false},"typeAcquisition":{"enabled":true}},"useSyntaxServer":"auto","maxTsServerMemory":3072,"experimental":{"enableProjectDiagnostics":false},"watchOptions":"vscode","enableTracing":false,"log":"off","pluginPaths":[]},"updateImportsOnPaste":{"enabled":true},"suggest":{"enabled":true,"autoImports":true,"completeFunctionCalls":false,"paths":true,"completeJSDocs":true,"jsdoc":{"generateReturns":true},"includeAutomaticOptionalChainCompletions":true,"includeCompletionsForImportStatements":true,"classMemberSnippets":{"enabled":true},"objectLiteralMethodSnippets":{"enabled":true}},"preferences":{"quoteStyle":"auto","importModuleSpecifier":"shortest","importModuleSpecifierEnding":"auto","jsxAttributeCompletionStyle":"auto","includePackageJsonAutoImports":"auto","autoImportFileExcludePatterns":[],"autoImportSpecifierExcludeRegexes":[],"preferTypeOnlyAutoImports":false,"useAliasesForRenames":true,"renameMatchingJsxTags":true,"organizeImports":{}},"format":{"enable":true,"insertSpaceAfterCommaDelimiter":true,"insertSpaceAfterConstructor":false,"insertSpaceAfterSemicolonInForStatements":true,"insertSpaceBeforeAndAfterBinaryOperators":true,"insertSpaceAfterKeywordsInControlFlowStatements":true,"insertSpaceAfterFunctionKeywordForAnonymousFunctions":true,"insertSpaceBeforeFunctionParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingEmptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces":false,"insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces":false,"insertSpaceAfterTypeAssertion":false,"placeOpenBraceOnNewLineForFunctions":false,"placeOpenBraceOnNewLineForControlBlocks":false,"semicolons":"ignore","indentSwitchCase":true},"inlayHints":{"parameterNames":{"enabled":"none","suppressWhenArgumentMatchesName":true},"parameterTypes":{"enabled":false},"variableTypes":{"enabled":false,"suppressWhenTypeMatchesName":true},"propertyDeclarationTypes":{"enabled":false},"functionLikeReturnTypes":{"enabled":false},"enumMemberValues":{"enabled":false}},"npm":"","check":{"npmIsInstalled":true}},"enableBuiltinCommands":true},"capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional","normalizesLineEndings":true,"changeAnnotationSupport":{"groupsOnLabel":true}},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true,"relativePatternSupport":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]},"resolveSupport":{"properties":["location.range"]}},"executeCommand":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true,"semanticTokens":{"refreshSupport":true},"codeLens":{"refreshSupport":true},"fileOperations":{"dynamicRegistration":true,"didCreate":true,"willCreate":true,"didRename":true,"willRename":true,"didDelete":true,"willDelete":true},"inlineValue":{"refreshSupport":true},"inlayHint":{"refreshSupport":true}},"textDocument":{"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]},"insertReplaceSupport":true,"resolveSupport":{"properties":["documentation","detail","additionalTextEdits"]},"insertTextModeSupport":{"valueSet":[1,2]},"labelDetailsSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true,"insertTextMode":2,"completionList":{"itemDefaults":["commitCharacters","editRange","insertTextFormat","insertTextMode","data"]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true},"activeParameterSupport":true},"contextSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true,"tagSupport":{"valueSet":[1]}},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"codeAction":{"dynamicRegistration":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.move","refactor.rewrite","source","source.organizeImports","notebook"]}},"isPreferredSupport":true,"disabledSupport":true,"dataSupport":true,"resolveSupport":{"properties":["edit","command"]},"honorsChangeAnnotations":true},"codeLens":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"colorProvider":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true,"prepareSupportDefaultBehavior":1,"honorsChangeAnnotations":true},"publishDiagnostics":{"relatedInformation":true,"tagSupport":{"valueSet":[1,2]},"versionSupport":false,"codeDescriptionSupport":true,"dataSupport":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true,"foldingRangeKind":{"valueSet":["comment","imports","region"]},"foldingRange":{"collapsedText":false}},"selectionRange":{"dynamicRegistration":true},"linkedEditingRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"requests":{"range":true,"full":{"delta":true}},"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","comment","string","number","regexp","operator","decorator","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"formats":["relative"],"overlappingTokenSupport":false,"multilineTokenSupport":false,"serverCancelSupport":true,"augmentsSyntaxTokens":true},"typeHierarchy":{"dynamicRegistration":true},"inlineValue":{"dynamicRegistration":true},"inlayHint":{"dynamicRegistration":true,"resolveSupport":{"properties":["tooltip","textEdits","label.tooltip","label.location","label.command"]}},"diagnostic":{"dynamicRegistration":true,"relatedDocumentSupport":false}},"notebookDocument":{"synchronization":{"dynamicRegistration":true}},"window":{"workDoneProgress":true,"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"showDocument":{"support":true}},"general":{"regularExpressions":{"engine":"ECMAScript","version":"ES2020"},"markdown":{"parser":"marked","version":"1.1.0"},"staleRequestSupport":{"cancel":true,"retryOnContentModified":["textDocument/semanticTokens/full","textDocument/semanticTokens/range","textDocument/semanticTokens/full/delta"]},"positionEncodings":["utf-16"]},"experimental":{"testingApi":true}},"trace":"off","workspaceFolders":[{"uri":"file:///workspaces/ProspectPro","name":"ProspectPro"}],"clientInfo":{"name":"Visual Studio Code","version":"1.104.2"},"locale":"en"}},
  version: 2.5.2 (release, x86_64-unknown-linux-gnu)
  executable: /usr/local/share/npm-global/lib/node_modules/deno/deno
Connected to "Visual Studio Code" 1.104.2
{"type":"measure","name":"lsp.initialize","count":1,"duration":0.314},
{"type":"mark","name":"lsp.update_global_cache"},
Enabling import suggestions for: https://deno.land
{"type":"measure","name":"lsp.update_global_cache","count":1,"duration":254.418},
Refreshing configuration tree...
{"type":"mark","name":"lsp.update_cache"},
{"type":"measure","name":"lsp.update_cache","count":1,"duration":0.001},
Server ready.
{"type":"mark","name":"lsp.did_open","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json","languageId":"jsonc","version":2,"text":"{\n  \"[typescript]\": {\n    \"editor.defaultFormatter\": \"denoland.vscode-deno\"\n  },\n  \"deno.enablePaths\": [\"supabase/functions\"],\n  \"deno.lint\": true,\n  \"deno.unstable\": [\n    \"bare-node-builtins\",\n    \"byonm\",\n    \"sloppy-imports\",\n    \"unsafe-proto\",\n    \"webgpu\",\n    \"broadcast-channel\",\n    \"worker-options\",\n    \"cron\",\n    \"kv\",\n    \"ffi\",\n    \"fs\",\n    \"http\",\n    \"net\"\n  ],\n  \"git.ignoreLimitWarning\": true,\n\n  // === ENHANCED PRODUCTION WORKSPACE SETTINGS ===\n\n  \"github.copilot.enable\": {\n    \"*\": true,\n    \"plaintext\": false,\n    \"markdown\": true,\n    \"scminput\": false\n  },\n  \"github.copilot.inlineSuggest.enable\": true,\n\n  // Copilot Chat optimizations\n  \"github.copilot.chat.welcomeMessage\": \"none\",\n  \"github.copilot.chat.localeOverride\": \"en\",\n  \"github.copilot.chat.historyCount\": 8, // Limit chat history\n  \"github.copilot.chat.completionPhrasesEnabled\": false, // Disable unnecessary phrases\n  \"github.copilot.chat.dynamicContextTrailingLength\": 500, // Control context size\n\n  // Copilot performance settings\n  \"github.copilot.advanced.setAutoCompletionTriggerThreshold\": 30, // Less aggressive\n  \"github.copilot.advanced.connectionTimeout\": 45000, // Better performance on slower connections\n\n  // Editor performance optimizations\n  \"editor.minimap.enabled\": false, // Reduces CPU usage\n  \"editor.renderWhitespace\": \"none\", // Reduces rendering overhead\n  \"editor.renderControlCharacters\": false, // Reduces rendering overhead\n  \"editor.renderLineHighlight\": \"gutter\", // Less UI overhead than \"all\"\n  \"editor.bracketPairColorization.enabled\": false, // Reduces rendering overhead\n  \"editor.guides.bracketPairs\": false, // Reduces rendering overhead\n  \"workbench.colorTheme\": \"Default Dark Modern\", // Use built-in theme for performance\n  \"workbench.list.smoothScrolling\": false, // Better performance on lower-end machines\n  \"workbench.tree.renderIndentGuides\": \"none\", // Reduces UI overhead\n  \"workbench.editor.closeOnFileDelete\": true, // Prevents confusion with deleted files\n\n  // File system performance\n  \"files.exclude\": {\n    \"**/*.log\": true,\n    \"**/*.tmp\": true,\n    \"**/*.temp\": true,\n    \"**/diagnostics.json\": true,\n    \"**/startup.log\": true,\n    \"**/production*.log\": true,\n    \"**/database-validation.log\": true,\n    \"**/server-test.log\": true\n  },\n\n  \"files.watcherExclude\": {\n    \"**/*.log\": true,\n    \"**/*.tmp\": true,\n    \"**/*.temp\": true,\n    \"**/diagnostics.json\": true,\n    \"**/startup.log\": true,\n    \"**/node_modules/**\": true,\n    \"**/archive/**\": true,\n    \"**/.git/**\": true,\n    \"**/logs/**\": true,\n    \"**/dist/**\": true\n  },\n\n  \"search.exclude\": {\n    \"**/node_modules\": true,\n    \"**/*.log\": true,\n    \"**/*.tmp\": true,\n    \"**/*.temp\": true,\n    \"**/diagnostics.json\": true,\n    \"**/startup.log\": true,\n    \"**/production*.log\": true,\n    \"**/archive/**\": true,\n    \"**/.git\": true,\n    \"**/logs/**\": true,\n    \"**/dist/**\": true,\n    \"**/coverage/**\": true\n  },\n\n  \"search.searchOnType\": false, // Reduces search operations while typing\n  \"search.searchOnTypeDebouncePeriod\": 800, // Longer debounce for better performance\n\n  \"files.associations\": {\n    \"*.md\": \"markdown\",\n    \".copilot-instructions\": \"markdown\"\n  },\n\n  \"markdown.preview.breaks\": true,\n  \"markdown.preview.linkify\": true,\n\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": \"explicit\"\n  },\n\n  \"eslint.validate\": [\"javascript\", \"javascriptreact\", \"json\"],\n\n  \"files.autoSave\": \"afterDelay\",\n  \"files.autoSaveDelay\": 1000,\n\n  \"editor.formatOnSave\": true,\n  \"editor.formatOnPaste\": true,\n\n  \"javascript.updateImportsOnFileMove.enabled\": \"always\",\n  \"javascript.suggest.autoImports\": true,\n\n  // Node.js and npm performance optimizations\n  \"npm.packageManager\": \"npm\",\n  \"npm.exclude\": [\"**/node_modules/**\", \"**/archive/**\"],\n  \"npm.autoDetect\": \"off\", // Prevents constant scanning of folders\n  \"js/ts.implicitProjectConfig.checkJs\": false, // Reduces TypeScript checking overhead\n\n  // Git optimizations\n  \"git.autofetch\": true,\n  \"git.confirmSync\": false,\n  \"git.enableSmartCommit\": true,\n  \"git.fetchOnPull\": true,\n  \"git.mergeEditor\": true, // Better merge conflict resolution\n\n  // Terminal optimizations for Windows\n  \"terminal.integrated.defaultProfile.windows\": \"PowerShell\",\n  \"terminal.integrated.profiles.windows\": {\n    \"PowerShell\": {\n      \"source\": \"PowerShell\",\n      \"icon\": \"terminal-powershell\"\n    },\n    \"Command Prompt\": {\n      \"path\": \"cmd.exe\",\n      \"icon\": \"terminal-cmd\"\n    },\n    \"Windows PowerShell\": {\n      \"path\": \"powershell.exe\",\n      \"icon\": \"terminal-powershell\"\n    }\n  },\n  \"terminal.integrated.defaultProfile.linux\": \"bash\",\n  \"terminal.integrated.gpuAcceleration\": \"on\",\n  \"terminal.integrated.scrollback\": 1000, // Lower scrollback for memory optimization\n\n  // === MCP (Model Context Protocol) Configuration ===\n  \"mcp.enable\": true,\n  \"mcp.configFile\": \"${workspaceFolder}/.vscode/mcp-config.json\",\n  \"mcp.servers\": {\n    \"prospectpro-database\": {\n      \"enabled\": true,\n      \"autoStart\": true,\n      \"description\": \"ProspectPro Database Access via Supabase\"\n    },\n    \"prospectpro-apis\": {\n      \"enabled\": true,\n      \"autoStart\": false,\n      \"description\": \"ProspectPro API Clients (Google Places, Foursquare, Hunter.io)\"\n    },\n    \"prospectpro-filesystem\": {\n      \"enabled\": true,\n      \"autoStart\": true,\n      \"description\": \"ProspectPro Codebase Analysis and File Management\"\n    },\n    \"prospectpro-monitoring\": {\n      \"enabled\": true,\n      \"autoStart\": false,\n      \"description\": \"ProspectPro Monitoring and Diagnostics\"\n    },\n    \"prospectpro-production\": {\n      \"enabled\": true,\n      \"autoStart\": true,\n      \"description\": \"ProspectPro Production Environment Management and CI/CD Monitoring\"\n    }\n  },\n\n  // AI-Enhanced Development Settings\n  \"ai.contextAware\": true,\n  \"ai.projectContext\": {\n    \"type\": \"lead-generation-platform\",\n    \"framework\": \"node-express\",\n    \"database\": \"supabase\",\n    \"apis\": [\"google-places\", \"foursquare\", \"hunter-io\", \"neverbounce\"],\n    \"deployment\": \"docker-compose\",\n    \"monitoring\": \"custom-diagnostics\"\n  },\n  \"deno.enable\": true\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":1,"duration":0.098},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":1,"duration":0.026},
{"type":"mark","name":"lsp.document_symbol","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"}}},
{"type":"mark","name":"lsp.inlay_hint","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":100,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.did_open","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json","languageId":"json","version":1,"text":"{\r\n  \"name\": \"prospect-pro-real-api\",\r\n  \"version\": \"3.0.0\",\r\n  \"description\": \"Production-grade lead generation platform with zero-fake-data policy and Supabase Vault integration\",\r\n  \"main\": \"server.js\",\r\n  \"scripts\": {\r\n    \"start\": \"node server.js\",\r\n    \"dev\": \"nodemon server.js\",\r\n    \"prod\": \"NODE_ENV=production node server.js\",\r\n    \"production:start\": \"powershell -ExecutionPolicy Bypass -File ./scripts/init-prod-simple.ps1\",\r\n    \"production:checklist\": \"echo 'Production checklist: Check .env file, test database connection, validate APIs'\",\r\n    \"prod:init\": \"powershell -ExecutionPolicy Bypass -File ./scripts/init-prod-simple.ps1\",\r\n    \"prod:setup-env\": \"node ./scripts/pull-env-from-secrets.js\",\r\n    \"prod:check\": \"node --version && echo Production environment ready\",\r\n    \"health\": \"curl http://localhost:3100/health || echo 'Server not running'\",\r\n    \"diag\": \"curl http://localhost:3100/diag | json_pp || echo 'Server not running'\",\r\n    \"test\": \"echo 'Tests moved to testing branch. Run: git checkout testing && node tests/validation/test-real-data.js'\",\r\n    \"postinstall\": \"echo 'ProspectPro v3.0: Production-ready deployment configured'\",\r\n    \"docker:dev\": \"./docker/start-dev.sh\",\r\n    \"docker:prod\": \"./docker/deploy-prod.sh\",\r\n    \"docker:build\": \"docker-compose build\",\r\n    \"docker:package\": \"./docker/create-client-package.sh\",\r\n    \"docker:logs\": \"docker-compose logs -f prospectpro\",\r\n    \"docker:stop\": \"docker-compose down\",\r\n    \"docker:restart\": \"docker-compose restart\",\r\n    \"secure:setup\": \"./docker/secure-start.sh setup\",\r\n    \"secure:start\": \"./docker/secure-start.sh start\",\r\n    \"secure:dev\": \"./docker/secure-start.sh dev\",\r\n    \"keychain:setup\": \"./docker/keychain-start.sh setup\",\r\n    \"keychain:start\": \"./docker/keychain-start.sh start\",\r\n    \"1password:setup\": \"./docker/1password-start.sh setup\",\r\n    \"1password:start\": \"./docker/1password-start.sh start\",\r\n    \"vault:deploy\": \"echo '🔐 Deploying with Supabase Vault integration...' && docker-compose up --build -d\",\r\n    \"vault:dev\": \"echo '🔐 Starting development with Supabase Vault...' && docker-compose -f docker-compose.dev.yml up --build\",\r\n    \"vault:logs\": \"docker-compose logs -f prospectpro\",\r\n    \"vault:test\": \"echo '🧪 Testing Vault connection...' && docker-compose exec prospectpro curl -f http://localhost:3000/diag\",\r\n    \"mcp:install\": \"cd mcp-servers && npm install\",\r\n    \"mcp:test\": \"cd mcp-servers && node test-servers.js\",\r\n    \"mcp:start:database\": \"cd mcp-servers && node database-server.js\",\r\n    \"mcp:start:api\": \"cd mcp-servers && node api-server.js\",\r\n    \"mcp:start:filesystem\": \"cd mcp-servers && node filesystem-server.js\",\r\n    \"mcp:start:monitoring\": \"cd mcp-servers && node monitoring-server.js\",\r\n    \"mcp:start:production\": \"cd mcp-servers && node production-server.js\",\r\n    \"mcp:start:all\": \"cd mcp-servers && npm run start:all\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=20.0.0\",\r\n    \"npm\": \">=9.0.0\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@googlemaps/google-maps-services-js\": \"^3.4.2\",\r\n    \"@modelcontextprotocol/sdk\": \"^1.18.1\",\r\n    \"@supabase/supabase-js\": \"^2.57.4\",\r\n    \"axios\": \"^1.12.2\",\r\n    \"bcryptjs\": \"^2.4.3\",\r\n    \"cheerio\": \"^1.1.2\",\r\n    \"cors\": \"^2.8.5\",\r\n    \"csv-writer\": \"^1.6.0\",\r\n    \"dotenv\": \"^16.6.1\",\r\n    \"express\": \"^4.18.2\",\r\n    \"express-rate-limit\": \"^8.1.0\",\r\n    \"helmet\": \"^7.2.0\",\r\n    \"jsonwebtoken\": \"^9.0.2\",\r\n    \"node-fetch\": \"^2.7.0\",\r\n    \"p-limit\": \"^3.1.0\",\r\n    \"pg\": \"^8.16.3\",\r\n    \"prom-client\": \"^15.1.3\",\r\n    \"rate-limiter-flexible\": \"^2.4.2\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"jest\": \"^30.1.3\",\r\n    \"nodemon\": \"^3.1.10\",\r\n    \"supabase\": \"^2.45.5\",\r\n    \"supertest\": \"^7.1.4\"\r\n  },\r\n  \"keywords\": [\r\n    \"lead-generation\",\r\n    \"business-intelligence\",\r\n    \"api-integration\"\r\n  ],\r\n  \"author\": \"ProspectPro Development Team\",\r\n  \"license\": \"MIT\"\r\n}\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":2,"duration":0.08},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":2,"duration":0.015},
{"type":"mark","name":"lsp.code_action","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json"}}},
{"type":"mark","name":"lsp.document_symbol","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json"}}},
{"type":"mark","name":"lsp.inlay_hint","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":83,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":83,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":83,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":83,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":83,"character":0}}}},
{"type":"mark","name":"lsp.document_symbol","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"}}},
{"type":"mark","name":"lsp.inlay_hint","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":100,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.document_symbol","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"}}},
{"type":"mark","name":"lsp.did_open","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro Production MCP Server\n * Optimized for rapid CI/CD, environment switching, and troubleshooting\n *\n * Phase 1: Core production monitoring and environment management\n */\n\nconst { Server } = require(\"@modelcontextprotocol/sdk/server/index.js\");\nconst {\n  StdioServerTransport,\n} = require(\"@modelcontextprotocol/sdk/server/stdio.js\");\nconst { CallToolRequestSchema } = require(\"@modelcontextprotocol/sdk/types.js\");\nconst { createClient } = require(\"@supabase/supabase-js\");\nconst https = require(\"https\");\nconst { spawn } = require(\"child_process\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nclass ProductionMCPServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-production\",\n        version: \"1.0.0\",\n      },\n      {\n        capabilities: {\n          tools: {},\n        },\n      }\n    );\n\n    this.setupTools();\n    this.setupErrorHandling();\n  }\n\n  setupTools() {\n    // Phase 1: Environment & Deployment Monitoring\n\n    // 1. Environment Health Check\n    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      switch (request.params.name) {\n        case \"environment_health_check\":\n          return await this.environmentHealthCheck();\n\n        case \"github_actions_monitor\":\n          return await this.githubActionsMonitor(request.params.arguments);\n\n        case \"dev_prod_config_diff\":\n          return await this.devProdConfigDiff();\n\n        case \"cost_budget_monitor\":\n          return await this.costBudgetMonitor();\n\n        case \"api_health_dashboard\":\n          return await this.apiHealthDashboard();\n\n        case \"deployment_artifact_check\":\n          return await this.deploymentArtifactCheck();\n\n        case \"supabase_vault_validator\":\n          return await this.supabaseVaultValidator();\n\n        case \"performance_metrics\":\n          return await this.performanceMetrics();\n\n        case \"vault_api_key_status\":\n          return await this.vaultApiKeyStatus();\n\n        case \"production_startup_validator\":\n          return await this.productionStartupValidator();\n\n        case \"github_workflow_optimizer\":\n          return await this.githubWorkflowOptimizer();\n\n        default:\n          throw new Error(`Unknown tool: ${request.params.name}`);\n      }\n    });\n  }\n\n  // Core Environment Health Check\n  async environmentHealthCheck() {\n    const results = {\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || \"unknown\",\n      checks: [],\n    };\n\n    try {\n      // Check 1: Environment variables\n      const requiredEnvVars = [\"SUPABASE_URL\", \"SUPABASE_SECRET_KEY\"];\n      const envCheck = {\n        name: \"Environment Variables\",\n        status: \"healthy\",\n        details: {},\n      };\n\n      requiredEnvVars.forEach((varName) => {\n        const value = process.env[varName];\n        if (!value || value.includes(\"your_\")) {\n          envCheck.status = \"unhealthy\";\n          envCheck.details[varName] = \"missing or template value\";\n        } else {\n          envCheck.details[varName] = \"configured\";\n        }\n      });\n      results.checks.push(envCheck);\n\n      // Check 2: Supabase Connection\n      if (process.env.SUPABASE_URL && process.env.SUPABASE_SECRET_KEY) {\n        const supabase = createClient(\n          process.env.SUPABASE_URL,\n          process.env.SUPABASE_SECRET_KEY\n        );\n\n        try {\n          const { error } = await supabase\n            .from(\"enhanced_leads\")\n            .select(\"count\")\n            .limit(1);\n          results.checks.push({\n            name: \"Supabase Database\",\n            status:\n              error && !error.message.includes(\"does not exist\")\n                ? \"unhealthy\"\n                : \"healthy\",\n            details: { connection: \"successful\" },\n          });\n        } catch (dbError) {\n          results.checks.push({\n            name: \"Supabase Database\",\n            status: \"unhealthy\",\n            details: { error: dbError.message },\n          });\n        }\n      }\n\n      // Check 3: GitHub Actions Integration\n      const ghToken = process.env.GHP_TOKEN || process.env.GITHUB_TOKEN;\n      results.checks.push({\n        name: \"GitHub Actions Integration\",\n        status: ghToken ? \"healthy\" : \"warning\",\n        details: { token: ghToken ? \"present\" : \"missing\" },\n      });\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🔍 **Production Environment Health Check**\\n\\n${JSON.stringify(\n              results,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Health check failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // GitHub Actions Workflow Monitor\n  async githubActionsMonitor({\n    repo = \"Alextorelli/ProspectPro\",\n    workflow = \"generate-dotenv.yml\",\n  } = {}) {\n    const token = process.env.GHP_TOKEN || process.env.GITHUB_TOKEN;\n\n    if (!token) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: \"⚠️ No GitHub token available for workflow monitoring\",\n          },\n        ],\n      };\n    }\n\n    try {\n      const [owner, repoName] = repo.split(\"/\");\n      const options = {\n        hostname: \"api.github.com\",\n        path: `/repos/${owner}/${repoName}/actions/workflows/${workflow}/runs?per_page=5`,\n        headers: {\n          Authorization: `token ${token}`,\n          \"User-Agent\": \"ProspectPro-Production-MCP\",\n        },\n      };\n\n      const response = await this.makeHttpsRequest(options);\n      const data = JSON.parse(response);\n\n      if (data.workflow_runs && data.workflow_runs.length > 0) {\n        const runs = data.workflow_runs.slice(0, 3).map((run) => ({\n          id: run.id,\n          status: run.status,\n          conclusion: run.conclusion,\n          created_at: run.created_at,\n          head_commit: run.head_commit?.message?.substring(0, 50) + \"...\",\n        }));\n\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `📊 **GitHub Actions Workflow Status**\\n\\n**Workflow**: ${workflow}\\n**Repository**: ${repo}\\n\\n**Recent Runs**:\\n${JSON.stringify(\n                runs,\n                null,\n                2\n              )}`,\n            },\n          ],\n        };\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `📊 No recent workflow runs found for ${workflow}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ GitHub Actions monitoring failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Dev/Prod Configuration Comparison\n  async devProdConfigDiff() {\n    try {\n      const prodEnvPath = path.join(process.cwd(), \".env\");\n      const devEnvPath = path.join(\n        process.cwd(),\n        \".devcontainer\",\n        \"devcontainer.json\"\n      );\n\n      const comparison = {\n        production: {\n          environment_file: fs.existsSync(prodEnvPath),\n          node_env: process.env.NODE_ENV,\n          theme: \"default (unchanged)\",\n          mcp_servers: \"production-only\",\n        },\n        development: {\n          devcontainer_config: fs.existsSync(devEnvPath),\n          theme: \"Vira Deepforest (green)\",\n          mcp_servers: \"full suite (database, API, filesystem, monitoring)\",\n        },\n      };\n\n      // Read production configuration\n      if (fs.existsSync(prodEnvPath)) {\n        const envContent = fs.readFileSync(prodEnvPath, \"utf8\");\n        comparison.production.features = {\n          supabase_configured: !envContent.includes(\"your-project-ref\"),\n          github_actions_build: envContent.includes(\"BUILD_TIMESTAMP\"),\n          vault_integration: envContent.includes(\"Vault\"),\n        };\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🔄 **Dev/Prod Configuration Comparison**\\n\\n${JSON.stringify(\n              comparison,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Configuration comparison failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Cost Budget Monitor\n  async costBudgetMonitor() {\n    try {\n      const supabase = createClient(\n        process.env.SUPABASE_URL,\n        process.env.SUPABASE_SECRET_KEY\n      );\n\n      // Get recent API costs\n      const { data: costs, error } = await supabase\n        .from(\"api_costs\")\n        .select(\"*\")\n        .gte(\n          \"created_at\",\n          new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n        )\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n\n      const totalCost =\n        costs?.reduce((sum, cost) => sum + (cost.cost || 0), 0) || 0;\n      const budgetLimit = parseFloat(process.env.DEFAULT_BUDGET_LIMIT) || 25.0;\n      const utilization = (totalCost / budgetLimit) * 100;\n\n      const analysis = {\n        period: \"Last 24 hours\",\n        total_cost: `$${totalCost.toFixed(2)}`,\n        budget_limit: `$${budgetLimit.toFixed(2)}`,\n        utilization: `${utilization.toFixed(1)}%`,\n        status:\n          utilization > 80\n            ? \"⚠️ HIGH\"\n            : utilization > 50\n            ? \"⚡ MODERATE\"\n            : \"✅ HEALTHY\",\n        recent_costs:\n          costs?.slice(0, 5).map((cost) => ({\n            service: cost.service,\n            cost: `$${cost.cost?.toFixed(3)}`,\n            timestamp: cost.created_at,\n          })) || [],\n      };\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `💰 **Cost Budget Monitor**\\n\\n${JSON.stringify(\n              analysis,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Cost monitoring failed: ${error.message}\\n\\nNote: Ensure api_costs table exists in Supabase`,\n          },\n        ],\n      };\n    }\n  }\n\n  // API Health Dashboard\n  async apiHealthDashboard() {\n    const apis = [\n      { name: \"Google Places\", key: \"GOOGLE_PLACES_API_KEY\" },\n      { name: \"Hunter.io\", key: \"HUNTER_IO_API_KEY\" },\n      { name: \"NeverBounce\", key: \"NEVERBOUNCE_API_KEY\" },\n      { name: \"Foursquare\", key: \"FOURSQUARE_API_KEY\" },\n    ];\n\n    const dashboard = {\n      timestamp: new Date().toISOString(),\n      apis: [],\n    };\n\n    for (const api of apis) {\n      const status = {\n        name: api.name,\n        key_configured: !!process.env[api.key],\n        status: \"unknown\",\n      };\n\n      // Basic configuration check\n      if (process.env[api.key]) {\n        status.status = \"configured\";\n      } else {\n        status.status = \"missing_key\";\n        status.note = \"Check Supabase Vault or environment variables\";\n      }\n\n      dashboard.apis.push(status);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: `🔌 **API Health Dashboard**\\n\\n${JSON.stringify(\n            dashboard,\n            null,\n            2\n          )}`,\n        },\n      ],\n    };\n  }\n\n  // === NEW ENHANCED TOOLS FOR VAULT AND PRODUCTION OPTIMIZATION ===\n\n  // Vault API Key Status Monitor\n  async vaultApiKeyStatus() {\n    try {\n      console.log(\"🔑 Checking Supabase Vault API key status...\");\n\n      // Test Supabase connection\n      const supabaseUrl = process.env.SUPABASE_URL;\n      const supabaseKey = process.env.SUPABASE_SECRET_KEY;\n\n      if (!supabaseUrl || !supabaseKey) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"❌ Supabase credentials not configured in environment\",\n            },\n          ],\n        };\n      }\n\n      const supabase = createClient(supabaseUrl, supabaseKey);\n\n      // Check vault diagnostic function\n      const { data, error } = await supabase.rpc(\"vault_diagnostic_check\");\n\n      if (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `❌ Vault diagnostic failed: ${error.message}`,\n            },\n          ],\n        };\n      }\n\n      let report = \"🔐 **Supabase Vault API Key Status Report**\\n\\n\";\n\n      if (data && data.length > 0) {\n        data.forEach((check) => {\n          const statusIcon =\n            check.status === \"ENABLED\" || check.status === \"COMPLETE\"\n              ? \"✅\"\n              : check.status === \"PARTIAL\"\n              ? \"⚠️\"\n              : \"❌\";\n\n          report += `${statusIcon} **${check.check_name}**: ${check.status}\\n`;\n          report += `   Details: ${check.details}\\n`;\n          report += `   Recommendation: ${check.recommendation}\\n\\n`;\n        });\n      } else {\n        report += \"⚠️ No diagnostic data returned from vault\\n\";\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Error checking vault status: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Production Startup Validator\n  async productionStartupValidator() {\n    try {\n      console.log(\"🔍 Running production startup validation...\");\n\n      const issues = [];\n      const validations = [];\n\n      // Check 1: Environment variables\n      const requiredEnvs = [\"SUPABASE_URL\", \"SUPABASE_SECRET_KEY\"];\n      requiredEnvs.forEach((env) => {\n        const value = process.env[env];\n        if (!value || value.includes(\"your_\")) {\n          issues.push(`Missing or template value for ${env}`);\n        } else {\n          validations.push(`✅ ${env} configured`);\n        }\n      });\n\n      // Check 2: Production mode settings\n      const nodeEnv = process.env.NODE_ENV;\n      if (nodeEnv === \"production\") {\n        validations.push(\"✅ NODE_ENV set to production\");\n\n        // Check degraded start setting\n        if (process.env.ALLOW_DEGRADED_START === \"true\") {\n          issues.push(\n            \"❌ ALLOW_DEGRADED_START=true is not recommended for production\"\n          );\n        } else {\n          validations.push(\n            \"✅ Strict production mode enabled (no degraded starts)\"\n          );\n        }\n      } else {\n        issues.push(`NODE_ENV is '${nodeEnv}', should be 'production'`);\n      }\n\n      // Check 3: Port configuration\n      const port = process.env.PORT;\n      if (port && port !== \"3000\") {\n        validations.push(`✅ Custom port configured: ${port}`);\n      } else {\n        validations.push(\"ℹ️ Using default/standard port configuration\");\n      }\n\n      let report = \"🏭 **Production Startup Validation Report**\\n\\n\";\n\n      report += \"**Validations Passed:**\\n\";\n      validations.forEach((validation) => {\n        report += `${validation}\\n`;\n      });\n\n      if (issues.length > 0) {\n        report += \"\\n**Issues Found:**\\n\";\n        issues.forEach((issue) => {\n          report += `❌ ${issue}\\n`;\n        });\n\n        report += \"\\n**Recommendations:**\\n\";\n        report +=\n          \"1. Ensure GitHub Actions workflows have generated proper .env\\n\";\n        report += \"2. Configure API keys in Supabase Vault\\n\";\n        report +=\n          \"3. Set ALLOW_DEGRADED_START=false for strict production mode\\n\";\n        report += \"4. Verify all secrets are present and valid\\n\";\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Production validation failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // GitHub Workflow Optimizer\n  async githubWorkflowOptimizer() {\n    try {\n      console.log(\"⚙️ Analyzing GitHub Actions workflows...\");\n\n      const workflowsDir = path.join(process.cwd(), \".github\", \"workflows\");\n\n      if (!fs.existsSync(workflowsDir)) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"❌ No .github/workflows directory found\",\n            },\n          ],\n        };\n      }\n\n      const workflows = fs\n        .readdirSync(workflowsDir)\n        .filter((file) => file.endsWith(\".yml\") || file.endsWith(\".yaml\"));\n\n      let report = \"⚙️ **GitHub Actions Workflow Analysis**\\n\\n\";\n\n      const optimizations = [];\n      const issues = [];\n\n      workflows.forEach((workflow) => {\n        const workflowPath = path.join(workflowsDir, workflow);\n        const content = fs.readFileSync(workflowPath, \"utf8\");\n\n        report += `📋 **${workflow}:**\\n`;\n\n        // Check triggers\n        if (content.includes(\"push:\") && content.includes(\"branches: [main]\")) {\n          if (\n            workflow.includes(\"repository-maintenance\") ||\n            workflow.includes(\"docker-env\")\n          ) {\n            issues.push(\n              `${workflow}: Triggers on every push (may cause cascade failures)`\n            );\n            optimizations.push(\n              `Consider schedule-only or manual triggers for ${workflow}`\n            );\n          } else {\n            report += \"  ✅ Push trigger configured for main branch\\n\";\n          }\n        }\n\n        // Check for workflow_dispatch\n        if (content.includes(\"workflow_dispatch:\")) {\n          report += \"  ✅ Manual trigger available\\n\";\n        } else {\n          optimizations.push(\n            `Add workflow_dispatch to ${workflow} for manual testing`\n          );\n        }\n\n        // Check for proper permissions\n        if (content.includes(\"permissions:\")) {\n          report += \"  ✅ Permissions configured\\n\";\n        } else {\n          if (\n            content.includes(\"GITHUB_TOKEN\") ||\n            content.includes(\"secrets.\")\n          ) {\n            issues.push(\n              `${workflow}: Uses secrets but no permissions specified`\n            );\n          }\n        }\n\n        report += \"\\n\";\n      });\n\n      if (optimizations.length > 0) {\n        report += \"**Optimization Recommendations:**\\n\";\n        optimizations.forEach((opt) => {\n          report += `💡 ${opt}\\n`;\n        });\n        report += \"\\n\";\n      }\n\n      if (issues.length > 0) {\n        report += \"**Issues Found:**\\n\";\n        issues.forEach((issue) => {\n          report += `⚠️ ${issue}\\n`;\n        });\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Workflow analysis failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Additional helper methods...\n  async makeHttpsRequest(options) {\n    return new Promise((resolve, reject) => {\n      const req = https.request(options, (res) => {\n        let data = \"\";\n        res.on(\"data\", (chunk) => (data += chunk));\n        res.on(\"end\", () => {\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            resolve(data);\n          } else {\n            reject(new Error(`HTTP ${res.statusCode}: ${data}`));\n          }\n        });\n      });\n      req.on(\"error\", reject);\n      req.end();\n    });\n  }\n\n  setupErrorHandling() {\n    this.server.onerror = (error) => {\n      console.error(\"[Production MCP Server Error]:\", error);\n    };\n\n    process.on(\"SIGINT\", async () => {\n      await this.server.close();\n      process.exit(0);\n    });\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\"🚀 ProspectPro Production MCP Server running\");\n  }\n}\n\n// Start server if run directly\nif (require.main === module) {\n  const server = new ProductionMCPServer();\n  server.run().catch(console.error);\n}\n\nmodule.exports = ProductionMCPServer;\n"}}},
{"type":"measure","name":"lsp.did_open","count":3,"duration":29.822},
{"type":"mark","name":"lsp.code_action","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":3,"duration":0.008},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":1,"duration":0.043},
{"type":"mark","name":"lsp.inlay_hint","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.code_action","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.folding_range","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":127,"character":20}}}},
{"type":"mark","name":"lsp.document_symbol","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.folding_range","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.did_open","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md","languageId":"markdown","version":1,"text":"# ProspectPro v3.0 - Optimized AI Instructions\r\n\r\n## CRITICAL: Current Production State\r\n\r\n- **Version**: 3.0.0 (Production-ready with Supabase Vault)\r\n- **Deployment**: GitHub Actions → Railway/Docker automated\r\n- **Environment**: Secrets auto-injected via `.scripts/pull-env-from-secrets.js`\r\n- **Architecture**: 4-stage validation pipeline (Discovery→Enrichment→Validation→Export)\r\n- **Repository**: https://github.com/Alextorelli/ProspectPro (main = production)\r\n\r\n## IMMEDIATE CONTEXT (No Re-explanation Needed)\r\n\r\nWhen Alex asks about:\r\n\r\n- **\"Environment setup\"** → Point to `npm run prod-setup-env` (automated via GitHub Actions)\r\n- **\"API integration\"** → All clients in `/modules/api-clients/` (Google Places, Hunter.io, NeverBounce, Foursquare)\r\n- **\"Database issues\"** → Supabase with comprehensive schema in `/database/`\r\n- **\"Docker problems\"** → Multi-stage build with security hardening already implemented\r\n- **\"Cost optimization\"** → Built-in rate limiting and caching systems already active\r\n- **\"Deployment\"** → Automated via GitHub Actions with secret injection\r\n- **\"Testing\"** → Use `npm run test` or check testing branch\r\n\r\n## ALEX'S TECHNICAL PROFILE\r\n\r\n- **Background**: No coding experience but highly technical\r\n- **AI Dependency**: Relies heavily on AI assistance for debugging and architecture\r\n- **Primary Models**: Claude Sonnet 4.0, GPT-5 occasionally\r\n- **Environment**: GitHub Codespaces exclusively\r\n- **Focus**: Lead generation with zero fake data tolerance\r\n- **Usage Pattern**: Debugging, testing, CI/CD, architecture discussions\r\n\r\n## RESPONSE OPTIMIZATION RULES\r\n\r\n1. **NEVER re-explain project architecture** unless specifically asked with \"explain the architecture\"\r\n2. **ALWAYS reference existing files/scripts** for implementation details\r\n3. **PRIORITIZE troubleshooting** over teaching fundamentals\r\n4. **ASSUME familiarity** with ProspectPro's core concepts\r\n5. **FOCUS on immediate problem resolution** not educational content\r\n6. **USE existing npm scripts** rather than creating new implementations\r\n7. **REFERENCE the working production system** rather than theoretical solutions\r\n\r\n## CURRENT PRODUCTION ARCHITECTURE (ESTABLISHED - DO NOT RE-EXPLAIN)\r\n\r\n### File Structure (REFERENCE ONLY)\r\n\r\n```\r\n/api/business-discovery.js           # Core discovery logic\r\n/modules/enhanced-lead-discovery.js  # Main business processing\r\n/modules/campaign-csv-exporter.js    # Export system with analytics\r\n/modules/api-clients/                # All API integrations\r\n/database/database-master-setup.js   # Schema and migrations\r\n.scripts/pull-env-from-secrets.js    # Environment automation\r\n```\r\n\r\n### Current Working Scripts (USE THESE)\r\n\r\n```bash\r\nnpm run prod-setup-env     # Automated secret injection\r\nnpm run production-start   # Launch production\r\nnpm run prod-check        # Validate environment\r\nnpm run health            # Health check\r\nnpm run diag              # Diagnostics\r\n```\r\n\r\n### API Integration Stack (WORKING)\r\n\r\n- **Google Places API**: Business discovery with rate limiting\r\n- **Hunter.io**: Email discovery and validation\r\n- **NeverBounce**: Email verification\r\n- **Foursquare**: Additional business data\r\n- **Supabase**: Database with real-time subscriptions\r\n- **Railway**: Production hosting with automated deployment\r\n\r\n## PROBLEM-SOLVING APPROACH\r\n\r\n### For Environment Issues:\r\n\r\n1. Check `npm run prod-check` output\r\n2. Verify GitHub Actions completed successfully\r\n3. Check Railway deployment logs\r\n4. Validate Supabase connection\r\n\r\n### For API Issues:\r\n\r\n1. Reference existing implementations in `/modules/api-clients/`\r\n2. Check rate limiting configurations\r\n3. Verify API key injection via GitHub Actions\r\n4. Review error logs in production\r\n\r\n### For Deployment Issues:\r\n\r\n1. Check GitHub Actions workflow status\r\n2. Verify Railway deployment completion\r\n3. Run health checks: `npm run health`\r\n4. Check Docker container status\r\n\r\n### For Database Issues:\r\n\r\n1. Reference schema in `/database/database-master-setup.js`\r\n2. Check Supabase dashboard for connection issues\r\n3. Verify environment variables are properly injected\r\n4. Review query performance in Supabase logs\r\n\r\n## CURRENT OPTIMIZATIONS (ALREADY IMPLEMENTED)\r\n\r\n- **Automated secret management** via GitHub Actions\r\n- **Multi-stage Docker build** with security hardening\r\n- **API rate limiting and caching** for cost optimization\r\n- **Comprehensive error handling** with structured logging\r\n- **Zero fake data validation** pipeline with quality scoring\r\n- **Automated CSV export** with campaign analytics\r\n- **Production health monitoring** via `/health` and `/diag` endpoints\r\n\r\n## DEVELOPMENT WORKFLOW (ESTABLISHED)\r\n\r\n1. **Main branch** = Production (auto-deployed to Railway)\r\n2. **Testing branch** = Development/testing environment\r\n3. **GitHub Actions** = Automated CI/CD with secret injection\r\n4. **Codespaces** = Primary development environment\r\n5. **Docker** = Production containerization\r\n\r\n## DEBUGGING PATTERNS (OPTIMIZED FOR ALEX)\r\n\r\n- Start with health checks: `npm run health` and `npm run diag`\r\n- Check GitHub Actions for deployment status\r\n- Review Railway logs for runtime issues\r\n- Use Supabase dashboard for database troubleshooting\r\n- Reference existing working implementations before creating new code\r\n\r\n## COST OPTIMIZATION FOCUS\r\n\r\n- **API calls**: Use existing rate limiting and caching\r\n- **Database queries**: Optimized with connection pooling\r\n- **Container resources**: Multi-stage build reduces image size\r\n- **Premium AI requests**: Use this instruction file to reduce context repetition\r\n\r\n## RESPONSE FORMAT PREFERENCES\r\n\r\n- **Immediate solutions** over explanations\r\n- **Reference existing code** rather than writing new implementations\r\n- **Use established scripts** rather than manual processes\r\n- **Focus on debugging** rather than architecture discussions\r\n- **Provide specific file paths** and command references\r\n- **Assume production system knowledge** unless explicitly asked to explain\r\n\r\n## NEVER REPEAT (SAVE PREMIUM REQUESTS)\r\n\r\n- Project architecture explanations\r\n- Environment setup procedures (automated)\r\n- API integration patterns (already implemented)\r\n- Database schema explanations (documented)\r\n- Docker configuration details (working)\r\n- Cost optimization strategies (implemented)\r\n- Security measures (hardened)\r\n\r\nThis instruction set prioritizes rapid problem resolution and eliminates repetitive context discussions to maximize premium request efficiency.\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":4,"duration":0.104},
{"type":"mark","name":"lsp.code_action","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":4,"duration":0.024},
{"type":"mark","name":"lsp.inlay_hint","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"},"range":{"start":{"line":0,"character":0},"end":{"line":126,"character":24}}}},
{"type":"mark","name":"lsp.document_symbol","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.folding_range","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.document_symbol","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.folding_range","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.document_symbol","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.code_action","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"},"range":{"start":{"line":0,"character":0},"end":{"line":126,"character":24}}}},
{"type":"mark","name":"lsp.document_symbol","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.code_lens","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.folding_range","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.code_action","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.document_symbol","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.folding_range","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.code_action","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":40,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":41,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":42,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":43,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":44,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":45,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":46,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":47,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":48,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":49,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":50,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":51,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":52,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":53,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":54,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":55,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":56,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":57,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":58,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.code_action","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":59,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":60,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":61,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.inlay_hint","count":62,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.code_action","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":63,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":19}}}},
{"type":"mark","name":"lsp.code_lens","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.folding_range","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":64,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"},"range":{"start":{"line":0,"character":0},"end":{"line":124,"character":32}}}},
{"type":"mark","name":"lsp.folding_range","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.code_lens","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.document_symbol","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.code_action","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_close","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"}}},
{"type":"measure","name":"lsp.did_close","count":1,"duration":0.033},
{"type":"mark","name":"lsp.did_close","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json"}}},
{"type":"measure","name":"lsp.did_close","count":2,"duration":0.036},
{"type":"mark","name":"lsp.did_close","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"measure","name":"lsp.did_close","count":3,"duration":0.58},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":2,"duration":0.023},
{"type":"mark","name":"lsp.did_close","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"measure","name":"lsp.did_close","count":4,"duration":0.032},
{"type":"mark","name":"lsp.did_open","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro Production MCP Server\n * Optimized for rapid CI/CD, environment switching, and troubleshooting\n *\n * Phase 1: Core production monitoring and environment management\n */\n\nconst { Server } = require(\"@modelcontextprotocol/sdk/server/index.js\");\nconst {\n  StdioServerTransport,\n} = require(\"@modelcontextprotocol/sdk/server/stdio.js\");\nconst { CallToolRequestSchema } = require(\"@modelcontextprotocol/sdk/types.js\");\nconst { createClient } = require(\"@supabase/supabase-js\");\nconst https = require(\"https\");\nconst { spawn } = require(\"child_process\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nclass ProductionMCPServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-production\",\n        version: \"1.0.0\",\n      },\n      {\n        capabilities: {\n          tools: {},\n        },\n      }\n    );\n\n    this.setupTools();\n    this.setupErrorHandling();\n  }\n\n  setupTools() {\n    // Phase 1: Environment & Deployment Monitoring\n\n    // 1. Environment Health Check\n    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      switch (request.params.name) {\n        case \"environment_health_check\":\n          return await this.environmentHealthCheck();\n\n        case \"github_actions_monitor\":\n          return await this.githubActionsMonitor(request.params.arguments);\n\n        case \"dev_prod_config_diff\":\n          return await this.devProdConfigDiff();\n\n        case \"cost_budget_monitor\":\n          return await this.costBudgetMonitor();\n\n        case \"api_health_dashboard\":\n          return await this.apiHealthDashboard();\n\n        case \"deployment_artifact_check\":\n          return await this.deploymentArtifactCheck();\n\n        case \"supabase_vault_validator\":\n          return await this.supabaseVaultValidator();\n\n        case \"performance_metrics\":\n          return await this.performanceMetrics();\n\n        case \"vault_api_key_status\":\n          return await this.vaultApiKeyStatus();\n\n        case \"production_startup_validator\":\n          return await this.productionStartupValidator();\n\n        case \"github_workflow_optimizer\":\n          return await this.githubWorkflowOptimizer();\n\n        default:\n          throw new Error(`Unknown tool: ${request.params.name}`);\n      }\n    });\n  }\n\n  // Core Environment Health Check\n  async environmentHealthCheck() {\n    const results = {\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || \"unknown\",\n      checks: [],\n    };\n\n    try {\n      // Check 1: Environment variables\n      const requiredEnvVars = [\"SUPABASE_URL\", \"SUPABASE_SECRET_KEY\"];\n      const envCheck = {\n        name: \"Environment Variables\",\n        status: \"healthy\",\n        details: {},\n      };\n\n      requiredEnvVars.forEach((varName) => {\n        const value = process.env[varName];\n        if (!value || value.includes(\"your_\")) {\n          envCheck.status = \"unhealthy\";\n          envCheck.details[varName] = \"missing or template value\";\n        } else {\n          envCheck.details[varName] = \"configured\";\n        }\n      });\n      results.checks.push(envCheck);\n\n      // Check 2: Supabase Connection\n      if (process.env.SUPABASE_URL && process.env.SUPABASE_SECRET_KEY) {\n        const supabase = createClient(\n          process.env.SUPABASE_URL,\n          process.env.SUPABASE_SECRET_KEY\n        );\n\n        try {\n          const { error } = await supabase\n            .from(\"enhanced_leads\")\n            .select(\"count\")\n            .limit(1);\n          results.checks.push({\n            name: \"Supabase Database\",\n            status:\n              error && !error.message.includes(\"does not exist\")\n                ? \"unhealthy\"\n                : \"healthy\",\n            details: { connection: \"successful\" },\n          });\n        } catch (dbError) {\n          results.checks.push({\n            name: \"Supabase Database\",\n            status: \"unhealthy\",\n            details: { error: dbError.message },\n          });\n        }\n      }\n\n      // Check 3: GitHub Actions Integration\n      const ghToken = process.env.GHP_TOKEN || process.env.GITHUB_TOKEN;\n      results.checks.push({\n        name: \"GitHub Actions Integration\",\n        status: ghToken ? \"healthy\" : \"warning\",\n        details: { token: ghToken ? \"present\" : \"missing\" },\n      });\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🔍 **Production Environment Health Check**\\n\\n${JSON.stringify(\n              results,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Health check failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // GitHub Actions Workflow Monitor\n  async githubActionsMonitor({\n    repo = \"Alextorelli/ProspectPro\",\n    workflow = \"generate-dotenv.yml\",\n  } = {}) {\n    const token = process.env.GHP_TOKEN || process.env.GITHUB_TOKEN;\n\n    if (!token) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: \"⚠️ No GitHub token available for workflow monitoring\",\n          },\n        ],\n      };\n    }\n\n    try {\n      const [owner, repoName] = repo.split(\"/\");\n      const options = {\n        hostname: \"api.github.com\",\n        path: `/repos/${owner}/${repoName}/actions/workflows/${workflow}/runs?per_page=5`,\n        headers: {\n          Authorization: `token ${token}`,\n          \"User-Agent\": \"ProspectPro-Production-MCP\",\n        },\n      };\n\n      const response = await this.makeHttpsRequest(options);\n      const data = JSON.parse(response);\n\n      if (data.workflow_runs && data.workflow_runs.length > 0) {\n        const runs = data.workflow_runs.slice(0, 3).map((run) => ({\n          id: run.id,\n          status: run.status,\n          conclusion: run.conclusion,\n          created_at: run.created_at,\n          head_commit: run.head_commit?.message?.substring(0, 50) + \"...\",\n        }));\n\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `📊 **GitHub Actions Workflow Status**\\n\\n**Workflow**: ${workflow}\\n**Repository**: ${repo}\\n\\n**Recent Runs**:\\n${JSON.stringify(\n                runs,\n                null,\n                2\n              )}`,\n            },\n          ],\n        };\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `📊 No recent workflow runs found for ${workflow}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ GitHub Actions monitoring failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Dev/Prod Configuration Comparison\n  async devProdConfigDiff() {\n    try {\n      const prodEnvPath = path.join(process.cwd(), \".env\");\n      const devEnvPath = path.join(\n        process.cwd(),\n        \".devcontainer\",\n        \"devcontainer.json\"\n      );\n\n      const comparison = {\n        production: {\n          environment_file: fs.existsSync(prodEnvPath),\n          node_env: process.env.NODE_ENV,\n          theme: \"default (unchanged)\",\n          mcp_servers: \"production-only\",\n        },\n        development: {\n          devcontainer_config: fs.existsSync(devEnvPath),\n          theme: \"Vira Deepforest (green)\",\n          mcp_servers: \"full suite (database, API, filesystem, monitoring)\",\n        },\n      };\n\n      // Read production configuration\n      if (fs.existsSync(prodEnvPath)) {\n        const envContent = fs.readFileSync(prodEnvPath, \"utf8\");\n        comparison.production.features = {\n          supabase_configured: !envContent.includes(\"your-project-ref\"),\n          github_actions_build: envContent.includes(\"BUILD_TIMESTAMP\"),\n          vault_integration: envContent.includes(\"Vault\"),\n        };\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🔄 **Dev/Prod Configuration Comparison**\\n\\n${JSON.stringify(\n              comparison,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Configuration comparison failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Cost Budget Monitor\n  async costBudgetMonitor() {\n    try {\n      const supabase = createClient(\n        process.env.SUPABASE_URL,\n        process.env.SUPABASE_SECRET_KEY\n      );\n\n      // Get recent API costs\n      const { data: costs, error } = await supabase\n        .from(\"api_costs\")\n        .select(\"*\")\n        .gte(\n          \"created_at\",\n          new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n        )\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n\n      const totalCost =\n        costs?.reduce((sum, cost) => sum + (cost.cost || 0), 0) || 0;\n      const budgetLimit = parseFloat(process.env.DEFAULT_BUDGET_LIMIT) || 25.0;\n      const utilization = (totalCost / budgetLimit) * 100;\n\n      const analysis = {\n        period: \"Last 24 hours\",\n        total_cost: `$${totalCost.toFixed(2)}`,\n        budget_limit: `$${budgetLimit.toFixed(2)}`,\n        utilization: `${utilization.toFixed(1)}%`,\n        status:\n          utilization > 80\n            ? \"⚠️ HIGH\"\n            : utilization > 50\n            ? \"⚡ MODERATE\"\n            : \"✅ HEALTHY\",\n        recent_costs:\n          costs?.slice(0, 5).map((cost) => ({\n            service: cost.service,\n            cost: `$${cost.cost?.toFixed(3)}`,\n            timestamp: cost.created_at,\n          })) || [],\n      };\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `💰 **Cost Budget Monitor**\\n\\n${JSON.stringify(\n              analysis,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Cost monitoring failed: ${error.message}\\n\\nNote: Ensure api_costs table exists in Supabase`,\n          },\n        ],\n      };\n    }\n  }\n\n  // API Health Dashboard\n  async apiHealthDashboard() {\n    const apis = [\n      { name: \"Google Places\", key: \"GOOGLE_PLACES_API_KEY\" },\n      { name: \"Hunter.io\", key: \"HUNTER_IO_API_KEY\" },\n      { name: \"NeverBounce\", key: \"NEVERBOUNCE_API_KEY\" },\n      { name: \"Foursquare\", key: \"FOURSQUARE_API_KEY\" },\n    ];\n\n    const dashboard = {\n      timestamp: new Date().toISOString(),\n      apis: [],\n    };\n\n    for (const api of apis) {\n      const status = {\n        name: api.name,\n        key_configured: !!process.env[api.key],\n        status: \"unknown\",\n      };\n\n      // Basic configuration check\n      if (process.env[api.key]) {\n        status.status = \"configured\";\n      } else {\n        status.status = \"missing_key\";\n        status.note = \"Check Supabase Vault or environment variables\";\n      }\n\n      dashboard.apis.push(status);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: `🔌 **API Health Dashboard**\\n\\n${JSON.stringify(\n            dashboard,\n            null,\n            2\n          )}`,\n        },\n      ],\n    };\n  }\n\n  // === NEW ENHANCED TOOLS FOR VAULT AND PRODUCTION OPTIMIZATION ===\n\n  // Vault API Key Status Monitor\n  async vaultApiKeyStatus() {\n    try {\n      console.log(\"🔑 Checking Supabase Vault API key status...\");\n\n      // Test Supabase connection\n      const supabaseUrl = process.env.SUPABASE_URL;\n      const supabaseKey = process.env.SUPABASE_SECRET_KEY;\n\n      if (!supabaseUrl || !supabaseKey) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"❌ Supabase credentials not configured in environment\",\n            },\n          ],\n        };\n      }\n\n      const supabase = createClient(supabaseUrl, supabaseKey);\n\n      // Check vault diagnostic function\n      const { data, error } = await supabase.rpc(\"vault_diagnostic_check\");\n\n      if (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `❌ Vault diagnostic failed: ${error.message}`,\n            },\n          ],\n        };\n      }\n\n      let report = \"🔐 **Supabase Vault API Key Status Report**\\n\\n\";\n\n      if (data && data.length > 0) {\n        data.forEach((check) => {\n          const statusIcon =\n            check.status === \"ENABLED\" || check.status === \"COMPLETE\"\n              ? \"✅\"\n              : check.status === \"PARTIAL\"\n              ? \"⚠️\"\n              : \"❌\";\n\n          report += `${statusIcon} **${check.check_name}**: ${check.status}\\n`;\n          report += `   Details: ${check.details}\\n`;\n          report += `   Recommendation: ${check.recommendation}\\n\\n`;\n        });\n      } else {\n        report += \"⚠️ No diagnostic data returned from vault\\n\";\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Error checking vault status: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Production Startup Validator\n  async productionStartupValidator() {\n    try {\n      console.log(\"🔍 Running production startup validation...\");\n\n      const issues = [];\n      const validations = [];\n\n      // Check 1: Environment variables\n      const requiredEnvs = [\"SUPABASE_URL\", \"SUPABASE_SECRET_KEY\"];\n      requiredEnvs.forEach((env) => {\n        const value = process.env[env];\n        if (!value || value.includes(\"your_\")) {\n          issues.push(`Missing or template value for ${env}`);\n        } else {\n          validations.push(`✅ ${env} configured`);\n        }\n      });\n\n      // Check 2: Production mode settings\n      const nodeEnv = process.env.NODE_ENV;\n      if (nodeEnv === \"production\") {\n        validations.push(\"✅ NODE_ENV set to production\");\n\n        // Check degraded start setting\n        if (process.env.ALLOW_DEGRADED_START === \"true\") {\n          issues.push(\n            \"❌ ALLOW_DEGRADED_START=true is not recommended for production\"\n          );\n        } else {\n          validations.push(\n            \"✅ Strict production mode enabled (no degraded starts)\"\n          );\n        }\n      } else {\n        issues.push(`NODE_ENV is '${nodeEnv}', should be 'production'`);\n      }\n\n      // Check 3: Port configuration\n      const port = process.env.PORT;\n      if (port && port !== \"3000\") {\n        validations.push(`✅ Custom port configured: ${port}`);\n      } else {\n        validations.push(\"ℹ️ Using default/standard port configuration\");\n      }\n\n      let report = \"🏭 **Production Startup Validation Report**\\n\\n\";\n\n      report += \"**Validations Passed:**\\n\";\n      validations.forEach((validation) => {\n        report += `${validation}\\n`;\n      });\n\n      if (issues.length > 0) {\n        report += \"\\n**Issues Found:**\\n\";\n        issues.forEach((issue) => {\n          report += `❌ ${issue}\\n`;\n        });\n\n        report += \"\\n**Recommendations:**\\n\";\n        report +=\n          \"1. Ensure GitHub Actions workflows have generated proper .env\\n\";\n        report += \"2. Configure API keys in Supabase Vault\\n\";\n        report +=\n          \"3. Set ALLOW_DEGRADED_START=false for strict production mode\\n\";\n        report += \"4. Verify all secrets are present and valid\\n\";\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Production validation failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // GitHub Workflow Optimizer\n  async githubWorkflowOptimizer() {\n    try {\n      console.log(\"⚙️ Analyzing GitHub Actions workflows...\");\n\n      const workflowsDir = path.join(process.cwd(), \".github\", \"workflows\");\n\n      if (!fs.existsSync(workflowsDir)) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"❌ No .github/workflows directory found\",\n            },\n          ],\n        };\n      }\n\n      const workflows = fs\n        .readdirSync(workflowsDir)\n        .filter((file) => file.endsWith(\".yml\") || file.endsWith(\".yaml\"));\n\n      let report = \"⚙️ **GitHub Actions Workflow Analysis**\\n\\n\";\n\n      const optimizations = [];\n      const issues = [];\n\n      workflows.forEach((workflow) => {\n        const workflowPath = path.join(workflowsDir, workflow);\n        const content = fs.readFileSync(workflowPath, \"utf8\");\n\n        report += `📋 **${workflow}:**\\n`;\n\n        // Check triggers\n        if (content.includes(\"push:\") && content.includes(\"branches: [main]\")) {\n          if (\n            workflow.includes(\"repository-maintenance\") ||\n            workflow.includes(\"docker-env\")\n          ) {\n            issues.push(\n              `${workflow}: Triggers on every push (may cause cascade failures)`\n            );\n            optimizations.push(\n              `Consider schedule-only or manual triggers for ${workflow}`\n            );\n          } else {\n            report += \"  ✅ Push trigger configured for main branch\\n\";\n          }\n        }\n\n        // Check for workflow_dispatch\n        if (content.includes(\"workflow_dispatch:\")) {\n          report += \"  ✅ Manual trigger available\\n\";\n        } else {\n          optimizations.push(\n            `Add workflow_dispatch to ${workflow} for manual testing`\n          );\n        }\n\n        // Check for proper permissions\n        if (content.includes(\"permissions:\")) {\n          report += \"  ✅ Permissions configured\\n\";\n        } else {\n          if (\n            content.includes(\"GITHUB_TOKEN\") ||\n            content.includes(\"secrets.\")\n          ) {\n            issues.push(\n              `${workflow}: Uses secrets but no permissions specified`\n            );\n          }\n        }\n\n        report += \"\\n\";\n      });\n\n      if (optimizations.length > 0) {\n        report += \"**Optimization Recommendations:**\\n\";\n        optimizations.forEach((opt) => {\n          report += `💡 ${opt}\\n`;\n        });\n        report += \"\\n\";\n      }\n\n      if (issues.length > 0) {\n        report += \"**Issues Found:**\\n\";\n        issues.forEach((issue) => {\n          report += `⚠️ ${issue}\\n`;\n        });\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Workflow analysis failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Additional helper methods...\n  async makeHttpsRequest(options) {\n    return new Promise((resolve, reject) => {\n      const req = https.request(options, (res) => {\n        let data = \"\";\n        res.on(\"data\", (chunk) => (data += chunk));\n        res.on(\"end\", () => {\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            resolve(data);\n          } else {\n            reject(new Error(`HTTP ${res.statusCode}: ${data}`));\n          }\n        });\n      });\n      req.on(\"error\", reject);\n      req.end();\n    });\n  }\n\n  setupErrorHandling() {\n    this.server.onerror = (error) => {\n      console.error(\"[Production MCP Server Error]:\", error);\n    };\n\n    process.on(\"SIGINT\", async () => {\n      await this.server.close();\n      process.exit(0);\n    });\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\"🚀 ProspectPro Production MCP Server running\");\n  }\n}\n\n// Start server if run directly\nif (require.main === module) {\n  const server = new ProductionMCPServer();\n  server.run().catch(console.error);\n}\n\nmodule.exports = ProductionMCPServer;\n"}}},
{"type":"measure","name":"lsp.did_open","count":5,"duration":7.882},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":3,"duration":0.029},
{"type":"mark","name":"lsp.did_open","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md","languageId":"markdown","version":1,"text":"# ProspectPro v3.0 - Optimized AI Instructions\r\n\r\n## CRITICAL: Current Production State\r\n\r\n- **Version**: 3.0.0 (Production-ready with Supabase Vault)\r\n- **Deployment**: GitHub Actions → Railway/Docker automated\r\n- **Environment**: Secrets auto-injected via `.scripts/pull-env-from-secrets.js`\r\n- **Architecture**: 4-stage validation pipeline (Discovery→Enrichment→Validation→Export)\r\n- **Repository**: https://github.com/Alextorelli/ProspectPro (main = production)\r\n\r\n## IMMEDIATE CONTEXT (No Re-explanation Needed)\r\n\r\nWhen Alex asks about:\r\n\r\n- **\"Environment setup\"** → Point to `npm run prod-setup-env` (automated via GitHub Actions)\r\n- **\"API integration\"** → All clients in `/modules/api-clients/` (Google Places, Hunter.io, NeverBounce, Foursquare)\r\n- **\"Database issues\"** → Supabase with comprehensive schema in `/database/`\r\n- **\"Docker problems\"** → Multi-stage build with security hardening already implemented\r\n- **\"Cost optimization\"** → Built-in rate limiting and caching systems already active\r\n- **\"Deployment\"** → Automated via GitHub Actions with secret injection\r\n- **\"Testing\"** → Use `npm run test` or check testing branch\r\n\r\n## ALEX'S TECHNICAL PROFILE\r\n\r\n- **Background**: No coding experience but highly technical\r\n- **AI Dependency**: Relies heavily on AI assistance for debugging and architecture\r\n- **Primary Models**: Claude Sonnet 4.0, GPT-5 occasionally\r\n- **Environment**: GitHub Codespaces exclusively\r\n- **Focus**: Lead generation with zero fake data tolerance\r\n- **Usage Pattern**: Debugging, testing, CI/CD, architecture discussions\r\n\r\n## RESPONSE OPTIMIZATION RULES\r\n\r\n1. **NEVER re-explain project architecture** unless specifically asked with \"explain the architecture\"\r\n2. **ALWAYS reference existing files/scripts** for implementation details\r\n3. **PRIORITIZE troubleshooting** over teaching fundamentals\r\n4. **ASSUME familiarity** with ProspectPro's core concepts\r\n5. **FOCUS on immediate problem resolution** not educational content\r\n6. **USE existing npm scripts** rather than creating new implementations\r\n7. **REFERENCE the working production system** rather than theoretical solutions\r\n\r\n## CURRENT PRODUCTION ARCHITECTURE (ESTABLISHED - DO NOT RE-EXPLAIN)\r\n\r\n### File Structure (REFERENCE ONLY)\r\n\r\n```\r\n/api/business-discovery.js           # Core discovery logic\r\n/modules/enhanced-lead-discovery.js  # Main business processing\r\n/modules/campaign-csv-exporter.js    # Export system with analytics\r\n/modules/api-clients/                # All API integrations\r\n/database/database-master-setup.js   # Schema and migrations\r\n.scripts/pull-env-from-secrets.js    # Environment automation\r\n```\r\n\r\n### Current Working Scripts (USE THESE)\r\n\r\n```bash\r\nnpm run prod-setup-env     # Automated secret injection\r\nnpm run production-start   # Launch production\r\nnpm run prod-check        # Validate environment\r\nnpm run health            # Health check\r\nnpm run diag              # Diagnostics\r\n```\r\n\r\n### API Integration Stack (WORKING)\r\n\r\n- **Google Places API**: Business discovery with rate limiting\r\n- **Hunter.io**: Email discovery and validation\r\n- **NeverBounce**: Email verification\r\n- **Foursquare**: Additional business data\r\n- **Supabase**: Database with real-time subscriptions\r\n- **Railway**: Production hosting with automated deployment\r\n\r\n## PROBLEM-SOLVING APPROACH\r\n\r\n### For Environment Issues:\r\n\r\n1. Check `npm run prod-check` output\r\n2. Verify GitHub Actions completed successfully\r\n3. Check Railway deployment logs\r\n4. Validate Supabase connection\r\n\r\n### For API Issues:\r\n\r\n1. Reference existing implementations in `/modules/api-clients/`\r\n2. Check rate limiting configurations\r\n3. Verify API key injection via GitHub Actions\r\n4. Review error logs in production\r\n\r\n### For Deployment Issues:\r\n\r\n1. Check GitHub Actions workflow status\r\n2. Verify Railway deployment completion\r\n3. Run health checks: `npm run health`\r\n4. Check Docker container status\r\n\r\n### For Database Issues:\r\n\r\n1. Reference schema in `/database/database-master-setup.js`\r\n2. Check Supabase dashboard for connection issues\r\n3. Verify environment variables are properly injected\r\n4. Review query performance in Supabase logs\r\n\r\n## CURRENT OPTIMIZATIONS (ALREADY IMPLEMENTED)\r\n\r\n- **Automated secret management** via GitHub Actions\r\n- **Multi-stage Docker build** with security hardening\r\n- **API rate limiting and caching** for cost optimization\r\n- **Comprehensive error handling** with structured logging\r\n- **Zero fake data validation** pipeline with quality scoring\r\n- **Automated CSV export** with campaign analytics\r\n- **Production health monitoring** via `/health` and `/diag` endpoints\r\n\r\n## DEVELOPMENT WORKFLOW (ESTABLISHED)\r\n\r\n1. **Main branch** = Production (auto-deployed to Railway)\r\n2. **Testing branch** = Development/testing environment\r\n3. **GitHub Actions** = Automated CI/CD with secret injection\r\n4. **Codespaces** = Primary development environment\r\n5. **Docker** = Production containerization\r\n\r\n## DEBUGGING PATTERNS (OPTIMIZED FOR ALEX)\r\n\r\n- Start with health checks: `npm run health` and `npm run diag`\r\n- Check GitHub Actions for deployment status\r\n- Review Railway logs for runtime issues\r\n- Use Supabase dashboard for database troubleshooting\r\n- Reference existing working implementations before creating new code\r\n\r\n## COST OPTIMIZATION FOCUS\r\n\r\n- **API calls**: Use existing rate limiting and caching\r\n- **Database queries**: Optimized with connection pooling\r\n- **Container resources**: Multi-stage build reduces image size\r\n- **Premium AI requests**: Use this instruction file to reduce context repetition\r\n\r\n## RESPONSE FORMAT PREFERENCES\r\n\r\n- **Immediate solutions** over explanations\r\n- **Reference existing code** rather than writing new implementations\r\n- **Use established scripts** rather than manual processes\r\n- **Focus on debugging** rather than architecture discussions\r\n- **Provide specific file paths** and command references\r\n- **Assume production system knowledge** unless explicitly asked to explain\r\n\r\n## NEVER REPEAT (SAVE PREMIUM REQUESTS)\r\n\r\n- Project architecture explanations\r\n- Environment setup procedures (automated)\r\n- API integration patterns (already implemented)\r\n- Database schema explanations (documented)\r\n- Docker configuration details (working)\r\n- Cost optimization strategies (implemented)\r\n- Security measures (hardened)\r\n\r\nThis instruction set prioritizes rapid problem resolution and eliminates repetitive context discussions to maximize premium request efficiency.\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":6,"duration":0.101},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":5,"duration":0.024},
{"type":"mark","name":"lsp.code_action","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":65,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":35}}}},
{"type":"mark","name":"lsp.code_lens","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.folding_range","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_open","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro API MCP Server\n * Provides AI access to external API clients and testing capabilities\n */\n\nconst { Server } = require(\"@modelcontextprotocol/sdk/server/index.js\");\nconst {\n  StdioServerTransport,\n} = require(\"@modelcontextprotocol/sdk/server/stdio.js\");\nconst path = require(\"path\");\n\nclass ProspectProAPIServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-apis\",\n        version: \"1.0.0\",\n        description:\n          \"ProspectPro API MCP Server - AI access to external API clients\",\n      },\n      {\n        capabilities: {\n          tools: {},\n          resources: {},\n        },\n      }\n    );\n\n    this.apiClients = {};\n    this.setupHandlers();\n  }\n\n  async initializeAPIClients() {\n    try {\n      // Load API clients dynamically\n      const GooglePlacesClient = require(\"../modules/api-clients/google-places-client\");\n      const FoursquareClient = require(\"../modules/api-clients/foursquare-places-client\");\n      const HunterIOClient = require(\"../modules/api-clients/hunter-io-client\");\n      const NeverBounceClient = require(\"../modules/api-clients/neverbounce-client\");\n\n      this.apiClients = {\n        googlePlaces: new GooglePlacesClient(process.env.GOOGLE_PLACES_API_KEY),\n        foursquare: new FoursquareClient(process.env.FOURSQUARE_API_KEY),\n        hunterIO: new HunterIOClient(process.env.HUNTER_IO_API_KEY),\n        neverBounce: new NeverBounceClient(process.env.NEVERBOUNCE_API_KEY),\n      };\n    } catch (error) {\n      console.error(\n        \"Warning: Some API clients could not be loaded:\",\n        error.message\n      );\n      this.apiClients = {};\n    }\n  }\n\n  setupHandlers() {\n    // Tool definitions\n    this.server.setRequestHandler(\"tools/list\", async () => ({\n      tools: [\n        {\n          name: \"test_google_places\",\n          description: \"Test Google Places API with a sample query\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              query: {\n                type: \"string\",\n                description: \"Search query for businesses\",\n              },\n              location: {\n                type: \"string\",\n                description: \"Location to search in\",\n                default: \"New York, NY\",\n              },\n              limit: {\n                type: \"number\",\n                description: \"Number of results to return\",\n                default: 5,\n              },\n            },\n            required: [\"query\"],\n          },\n        },\n        {\n          name: \"test_foursquare_places\",\n          description: \"Test Foursquare Places API with a sample query\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              query: {\n                type: \"string\",\n                description: \"Search query for businesses\",\n              },\n              location: {\n                type: \"string\",\n                description: \"Location to search in\",\n                default: \"New York, NY\",\n              },\n              limit: {\n                type: \"number\",\n                description: \"Number of results to return\",\n                default: 5,\n              },\n            },\n            required: [\"query\"],\n          },\n        },\n        {\n          name: \"test_email_discovery\",\n          description: \"Test Hunter.io email discovery for a domain\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              domain: {\n                type: \"string\",\n                description: \"Domain to search for emails\",\n              },\n              limit: {\n                type: \"number\",\n                description: \"Number of emails to return\",\n                default: 5,\n              },\n            },\n            required: [\"domain\"],\n          },\n        },\n        {\n          name: \"verify_email\",\n          description: \"Verify email deliverability using NeverBounce\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              email: {\n                type: \"string\",\n                description: \"Email address to verify\",\n              },\n            },\n            required: [\"email\"],\n          },\n        },\n        {\n          name: \"get_api_usage_stats\",\n          description: \"Get usage statistics for all API clients\",\n          inputSchema: {\n            type: \"object\",\n            properties: {},\n          },\n        },\n        {\n          name: \"simulate_lead_discovery\",\n          description:\n            \"Simulate the full lead discovery process with real API calls\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              businessType: {\n                type: \"string\",\n                description: \"Type of business to search for\",\n              },\n              location: {\n                type: \"string\",\n                description: \"Location to search in\",\n              },\n              maxResults: {\n                type: \"number\",\n                description: \"Maximum number of leads to discover\",\n                default: 3,\n              },\n            },\n            required: [\"businessType\", \"location\"],\n          },\n        },\n        {\n          name: \"test_new_api_integration\",\n          description:\n            \"Test a newly integrated API (e.g., US Chamber, BBB, etc.)\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              apiName: {\n                type: \"string\",\n                description: \"Name of the API to test\",\n                enum: [\"us_chamber\", \"bbb\", \"linkedin_sales\", \"zoominfo\"],\n              },\n              testType: {\n                type: \"string\",\n                description: \"Type of test to perform\",\n                enum: [\n                  \"basic_search\",\n                  \"verification\",\n                  \"directory_lookup\",\n                  \"full_integration\",\n                ],\n                default: \"basic_search\",\n              },\n              query: {\n                type: \"string\",\n                description: \"Search query for testing\",\n              },\n              location: {\n                type: \"string\",\n                description: \"Location for testing\",\n              },\n              sampleBusiness: {\n                type: \"object\",\n                description: \"Sample business data for verification tests\",\n                properties: {\n                  name: { type: \"string\" },\n                  address: { type: \"string\" },\n                  phone: { type: \"string\" },\n                  website: { type: \"string\" },\n                },\n              },\n            },\n            required: [\"apiName\", \"testType\"],\n          },\n        },\n        {\n          name: \"compare_api_sources\",\n          description:\n            \"Compare results from multiple API sources for quality analysis\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              businessType: {\n                type: \"string\",\n                description: \"Type of business to search for comparison\",\n              },\n              location: {\n                type: \"string\",\n                description: \"Location to search in\",\n              },\n              sources: {\n                type: \"array\",\n                items: {\n                  type: \"string\",\n                  enum: [\"google_places\", \"foursquare\", \"us_chamber\", \"bbb\"],\n                },\n                description: \"API sources to compare\",\n                default: [\"google_places\", \"foursquare\"],\n              },\n              maxResults: {\n                type: \"number\",\n                description: \"Maximum results per source\",\n                default: 5,\n              },\n            },\n            required: [\"businessType\", \"location\"],\n          },\n        },\n      ],\n    }));\n\n    // Tool execution handlers\n    this.server.setRequestHandler(\"tools/call\", async (request) => {\n      const { name, arguments: args } = request.params;\n\n      try {\n        await this.initializeAPIClients();\n\n        switch (name) {\n          case \"test_google_places\":\n            return await this.testGooglePlaces(args);\n          case \"test_foursquare_places\":\n            return await this.testFoursquarePlaces(args);\n          case \"test_email_discovery\":\n            return await this.testEmailDiscovery(args);\n          case \"verify_email\":\n            return await this.verifyEmail(args);\n          case \"get_api_usage_stats\":\n            return await this.getAPIUsageStats();\n          case \"simulate_lead_discovery\":\n            return await this.simulateLeadDiscovery(args);\n          case \"test_new_api_integration\":\n            return await this.testNewAPIIntegration(args);\n          case \"compare_api_sources\":\n            return await this.compareAPISources(args);\n          default:\n            throw new Error(`Unknown tool: ${name}`);\n        }\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error: ${error.message}`,\n            },\n          ],\n          isError: true,\n        };\n      }\n    });\n\n    // Resource handlers\n    this.server.setRequestHandler(\"resources/list\", async () => ({\n      resources: [\n        {\n          uri: \"apis://google-places/config\",\n          name: \"Google Places API Configuration\",\n          description: \"Configuration and status of Google Places API client\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"apis://foursquare/config\",\n          name: \"Foursquare API Configuration\",\n          description: \"Configuration and status of Foursquare API client\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"apis://hunter-io/config\",\n          name: \"Hunter.io API Configuration\",\n          description: \"Configuration and status of Hunter.io API client\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"apis://neverbounce/config\",\n          name: \"NeverBounce API Configuration\",\n          description: \"Configuration and status of NeverBounce API client\",\n          mimeType: \"application/json\",\n        },\n      ],\n    }));\n  }\n\n  async testGooglePlaces(args) {\n    const { query, location = \"New York, NY\", limit = 5 } = args;\n\n    if (!this.apiClients.googlePlaces) {\n      throw new Error(\"Google Places API client not available\");\n    }\n\n    const results = await this.apiClients.googlePlaces.searchBusinesses(\n      query,\n      location,\n      limit\n    );\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Google Places\",\n              query,\n              location,\n              results: results.businesses || [],\n              success: results.found,\n              error: results.error || null,\n              usage_stats: this.apiClients.googlePlaces.getUsageStats(),\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async testFoursquarePlaces(args) {\n    const { query, location = \"New York, NY\", limit = 5 } = args;\n\n    if (!this.apiClients.foursquare) {\n      throw new Error(\"Foursquare API client not available\");\n    }\n\n    const results = await this.apiClients.foursquare.searchBusinesses(\n      query,\n      location,\n      limit\n    );\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Foursquare Places\",\n              query,\n              location,\n              results: results.businesses || [],\n              success: results.found,\n              error: results.error || null,\n              usage_stats: this.apiClients.foursquare.getUsageStats(),\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async testEmailDiscovery(args) {\n    const { domain, limit = 5 } = args;\n\n    if (!this.apiClients.hunterIO) {\n      throw new Error(\"Hunter.io API client not available\");\n    }\n\n    const results = await this.apiClients.hunterIO.findEmails(domain, limit);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Hunter.io\",\n              domain,\n              emails: results.emails || [],\n              success: results.found,\n              error: results.error || null,\n              usage_stats: this.apiClients.hunterIO.getUsageStats(),\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async verifyEmail(args) {\n    const { email } = args;\n\n    if (!this.apiClients.neverBounce) {\n      throw new Error(\"NeverBounce API client not available\");\n    }\n\n    const result = await this.apiClients.neverBounce.verifyEmail(email);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"NeverBounce\",\n              email,\n              verification: result,\n              usage_stats: this.apiClients.neverBounce.getUsageStats(),\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async getAPIUsageStats() {\n    const stats = {};\n\n    Object.entries(this.apiClients).forEach(([name, client]) => {\n      if (client && typeof client.getUsageStats === \"function\") {\n        stats[name] = client.getUsageStats();\n      }\n    });\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api_usage_statistics: stats,\n              generated_at: new Date().toISOString(),\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async simulateLeadDiscovery(args) {\n    const { businessType, location, maxResults = 3 } = args;\n\n    const results = {\n      businessType,\n      location,\n      maxResults,\n      discovery_results: {},\n      processing_summary: {\n        total_discovered: 0,\n        processing_stages: {},\n        errors: [],\n      },\n    };\n\n    try {\n      // Stage 1: Business Discovery\n      if (this.apiClients.foursquare) {\n        const foursquareResults =\n          await this.apiClients.foursquare.searchBusinesses(\n            businessType,\n            location,\n            maxResults\n          );\n        results.discovery_results.foursquare = foursquareResults;\n        results.processing_summary.total_discovered +=\n          foursquareResults.businesses?.length || 0;\n      }\n\n      if (this.apiClients.googlePlaces) {\n        const googleResults =\n          await this.apiClients.googlePlaces.searchBusinesses(\n            businessType,\n            location,\n            maxResults\n          );\n        results.discovery_results.google_places = googleResults;\n        results.processing_summary.total_discovered +=\n          googleResults.businesses?.length || 0;\n      }\n\n      // Stage 2: Email Discovery (sample with first business)\n      const sampleBusiness =\n        results.discovery_results.foursquare?.businesses?.[0] ||\n        results.discovery_results.google_places?.businesses?.[0];\n\n      if (\n        sampleBusiness &&\n        sampleBusiness.website &&\n        this.apiClients.hunterIO\n      ) {\n        const domain = new URL(sampleBusiness.website).hostname;\n        const emailResults = await this.apiClients.hunterIO.findEmails(\n          domain,\n          2\n        );\n        results.discovery_results.email_discovery = emailResults;\n\n        // Stage 3: Email Verification (sample)\n        if (\n          emailResults.emails &&\n          emailResults.emails.length > 0 &&\n          this.apiClients.neverBounce\n        ) {\n          const emailVerification =\n            await this.apiClients.neverBounce.verifyEmail(\n              emailResults.emails[0].email\n            );\n          results.discovery_results.email_verification = emailVerification;\n        }\n      }\n\n      // Compile usage statistics\n      results.api_usage = {};\n      Object.entries(this.apiClients).forEach(([name, client]) => {\n        if (client && typeof client.getUsageStats === \"function\") {\n          results.api_usage[name] = client.getUsageStats();\n        }\n      });\n    } catch (error) {\n      results.processing_summary.errors.push(error.message);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(results, null, 2),\n        },\n      ],\n    };\n  }\n\n  async testNewAPIIntegration(args) {\n    const { apiName, testType, query, location, sampleBusiness } = args;\n\n    const result = {\n      api_name: apiName,\n      test_type: testType,\n      timestamp: new Date().toISOString(),\n      success: false,\n      data: null,\n      error: null,\n    };\n\n    try {\n      switch (apiName) {\n        case \"us_chamber\":\n          result.data = await this.testUSChamberAPI(\n            testType,\n            query,\n            location,\n            sampleBusiness\n          );\n          result.success = true;\n          break;\n        case \"bbb\":\n          result.data = await this.testBBBAPI(\n            testType,\n            query,\n            location,\n            sampleBusiness\n          );\n          result.success = true;\n          break;\n        default:\n          throw new Error(\n            `API ${apiName} not yet implemented. Available: us_chamber, bbb`\n          );\n      }\n    } catch (error) {\n      result.error = error.message;\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(result, null, 2),\n        },\n      ],\n    };\n  }\n\n  async testUSChamberAPI(testType, query, location, sampleBusiness) {\n    // Load US Chamber API client dynamically\n    try {\n      const USChamberClient = require(\"../modules/api-clients/us-chamber-client\");\n      const chamberClient = new USChamberClient(process.env.USCHAMBER_API_KEY);\n\n      switch (testType) {\n        case \"basic_search\":\n          if (!query || !location) {\n            throw new Error(\"query and location required for basic_search\");\n          }\n          return await chamberClient.searchChamberMembers(query, location, 5);\n\n        case \"verification\":\n          if (!sampleBusiness) {\n            throw new Error(\"sampleBusiness required for verification test\");\n          }\n          return await chamberClient.verifyMembership(sampleBusiness);\n\n        case \"directory_lookup\":\n          // Example: NYC Chamber directory\n          return await chamberClient.getChamberDirectory(\"nyc-chamber\", query);\n\n        case \"full_integration\":\n          const searchResults = await chamberClient.searchChamberMembers(\n            query || \"restaurants\",\n            location || \"New York, NY\",\n            3\n          );\n          if (searchResults.businesses && searchResults.businesses.length > 0) {\n            const verificationResult = await chamberClient.verifyMembership(\n              searchResults.businesses[0]\n            );\n            return {\n              search_results: searchResults,\n              verification_sample: verificationResult,\n              usage_stats: chamberClient.getUsageStats(),\n            };\n          }\n          return searchResults;\n\n        default:\n          throw new Error(`Unknown test type: ${testType}`);\n      }\n    } catch (error) {\n      return {\n        error: `US Chamber API test failed: ${error.message}`,\n        note: \"Make sure US_CHAMBER_API_KEY is configured and the API client is properly implemented\",\n      };\n    }\n  }\n\n  async testBBBAPI(testType, query, location, sampleBusiness) {\n    // Placeholder for Better Business Bureau API\n    return {\n      note: \"BBB API integration not yet implemented\",\n      test_type: testType,\n      planned_features: [\n        \"Business accreditation lookup\",\n        \"Rating and review verification\",\n        \"Complaint history analysis\",\n      ],\n    };\n  }\n\n  async compareAPISources(args) {\n    const { businessType, location, sources, maxResults = 5 } = args;\n\n    const comparison = {\n      query: { businessType, location },\n      sources_tested: sources,\n      max_results: maxResults,\n      timestamp: new Date().toISOString(),\n      results: {},\n      analysis: {},\n    };\n\n    // Test each API source\n    for (const source of sources) {\n      try {\n        let sourceResult = null;\n\n        switch (source) {\n          case \"google_places\":\n            if (this.apiClients.googlePlaces) {\n              sourceResult =\n                await this.apiClients.googlePlaces.searchBusinesses(\n                  businessType,\n                  location,\n                  maxResults\n                );\n            }\n            break;\n\n          case \"foursquare\":\n            if (this.apiClients.foursquare) {\n              sourceResult = await this.apiClients.foursquare.searchBusinesses(\n                businessType,\n                location,\n                maxResults\n              );\n            }\n            break;\n\n          case \"us_chamber\":\n            try {\n              const USChamberClient = require(\"../modules/api-clients/us-chamber-client\");\n              const chamberClient = new USChamberClient(\n                process.env.USCHAMBER_API_KEY\n              );\n              sourceResult = await chamberClient.searchChamberMembers(\n                businessType,\n                location,\n                maxResults\n              );\n            } catch (error) {\n              sourceResult = {\n                error: `US Chamber API not available: ${error.message}`,\n              };\n            }\n            break;\n\n          case \"bbb\":\n            sourceResult = { error: \"BBB API not yet implemented\" };\n            break;\n\n          default:\n            sourceResult = { error: `Unknown API source: ${source}` };\n        }\n\n        comparison.results[source] = {\n          success: !sourceResult?.error,\n          businesses_found: sourceResult?.businesses?.length || 0,\n          data: sourceResult,\n          response_time: Date.now(), // Simplified timing\n        };\n      } catch (error) {\n        comparison.results[source] = {\n          success: false,\n          error: error.message,\n          businesses_found: 0,\n        };\n      }\n    }\n\n    // Generate analysis\n    comparison.analysis = this.analyzeSourceComparison(comparison.results);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(comparison, null, 2),\n        },\n      ],\n    };\n  }\n\n  analyzeSourceComparison(results) {\n    const analysis = {\n      total_sources: Object.keys(results).length,\n      successful_sources: 0,\n      total_businesses_found: 0,\n      source_ranking: [],\n      recommendations: [],\n    };\n\n    // Calculate metrics\n    Object.entries(results).forEach(([source, result]) => {\n      if (result.success) {\n        analysis.successful_sources++;\n      }\n      analysis.total_businesses_found += result.businesses_found;\n\n      analysis.source_ranking.push({\n        source,\n        success: result.success,\n        businesses_found: result.businesses_found,\n        performance_score: result.success\n          ? result.businesses_found * 10 + 50\n          : 0,\n      });\n    });\n\n    // Sort by performance\n    analysis.source_ranking.sort(\n      (a, b) => b.performance_score - a.performance_score\n    );\n\n    // Generate recommendations\n    if (analysis.successful_sources === 0) {\n      analysis.recommendations.push(\n        \"No API sources returned successful results - check API keys and network connectivity\"\n      );\n    } else if (analysis.successful_sources === 1) {\n      analysis.recommendations.push(\n        \"Consider adding more API sources for better coverage and reliability\"\n      );\n    } else {\n      analysis.recommendations.push(\n        `${analysis.successful_sources} sources working well - consider using top performers for production`\n      );\n    }\n\n    if (analysis.total_businesses_found === 0) {\n      analysis.recommendations.push(\n        \"No businesses found - try different search terms or broader location\"\n      );\n    }\n\n    return analysis;\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\"ProspectPro API MCP Server running...\");\n  }\n}\n\n// Start the server\nif (require.main === module) {\n  const server = new ProspectProAPIServer();\n  server.run().catch((error) => {\n    console.error(\"Failed to start API server:\", error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = ProspectProAPIServer;\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":4,"duration":0.034},
{"type":"measure","name":"lsp.did_open","count":7,"duration":14.89},
{"type":"mark","name":"lsp.did_open","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro Monitoring MCP Server\n * Provides AI access to real-time monitoring, diagnostics, and performance metrics\n */\n\nconst { Server } = require(\"@modelcontextprotocol/sdk/server/index.js\");\nconst {\n  StdioServerTransport,\n} = require(\"@modelcontextprotocol/sdk/server/stdio.js\");\nconst fs = require(\"fs\").promises;\nconst path = require(\"path\");\n\nclass ProspectProMonitoringServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-monitoring\",\n        version: \"1.0.0\",\n        description:\n          \"ProspectPro Monitoring MCP Server - AI access to system diagnostics and performance\",\n      },\n      {\n        capabilities: {\n          tools: {},\n          resources: {},\n        },\n      }\n    );\n\n    this.workspaceRoot = process.env.WORKSPACE_ROOT || process.cwd();\n    this.setupHandlers();\n  }\n\n  setupHandlers() {\n    // Tool definitions\n    this.server.setRequestHandler(\"tools/list\", async () => ({\n      tools: [\n        {\n          name: \"get_system_health\",\n          description: \"Get comprehensive system health status\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeDetailedMetrics: {\n                type: \"boolean\",\n                description: \"Include detailed performance metrics\",\n                default: false,\n              },\n            },\n          },\n        },\n        {\n          name: \"read_diagnostics\",\n          description: \"Read and analyze diagnostics.json file\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeHistory: {\n                type: \"boolean\",\n                description: \"Include historical diagnostic data if available\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"analyze_logs\",\n          description: \"Analyze application logs for patterns and issues\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              logType: {\n                type: \"string\",\n                description: \"Type of logs to analyze\",\n                enum: [\"startup\", \"error\", \"api\", \"all\"],\n                default: \"all\",\n              },\n              timeRange: {\n                type: \"string\",\n                description: \"Time range for log analysis\",\n                enum: [\"1h\", \"24h\", \"7d\"],\n                default: \"24h\",\n              },\n            },\n          },\n        },\n        {\n          name: \"check_docker_status\",\n          description: \"Check Docker container and service status\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeResourceUsage: {\n                type: \"boolean\",\n                description: \"Include resource usage statistics\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"validate_configuration\",\n          description: \"Validate system configuration and detect issues\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              strict: {\n                type: \"boolean\",\n                description: \"Enable strict validation mode\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"generate_performance_report\",\n          description: \"Generate comprehensive performance analysis report\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeRecommendations: {\n                type: \"boolean\",\n                description: \"Include performance optimization recommendations\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"monitor_api_quotas\",\n          description: \"Monitor API usage quotas and budget limits\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              alertThreshold: {\n                type: \"number\",\n                description: \"Alert when usage exceeds this percentage\",\n                default: 80,\n              },\n            },\n          },\n        },\n      ],\n    }));\n\n    // Tool execution handlers\n    this.server.setRequestHandler(\"tools/call\", async (request) => {\n      const { name, arguments: args } = request.params;\n\n      try {\n        switch (name) {\n          case \"get_system_health\":\n            return await this.getSystemHealth(args);\n          case \"read_diagnostics\":\n            return await this.readDiagnostics(args);\n          case \"analyze_logs\":\n            return await this.analyzeLogs(args);\n          case \"check_docker_status\":\n            return await this.checkDockerStatus(args);\n          case \"validate_configuration\":\n            return await this.validateConfiguration(args);\n          case \"generate_performance_report\":\n            return await this.generatePerformanceReport(args);\n          case \"monitor_api_quotas\":\n            return await this.monitorAPIQuotas(args);\n          default:\n            throw new Error(`Unknown tool: ${name}`);\n        }\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error: ${error.message}`,\n            },\n          ],\n          isError: true,\n        };\n      }\n    });\n\n    // Resource handlers\n    this.server.setRequestHandler(\"resources/list\", async () => ({\n      resources: [\n        {\n          uri: \"monitoring://system-health\",\n          name: \"System Health Status\",\n          description: \"Real-time system health and performance metrics\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"monitoring://diagnostics\",\n          name: \"Diagnostics Data\",\n          description: \"System diagnostic information and error reports\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"monitoring://logs\",\n          name: \"Application Logs\",\n          description: \"Application logs and error tracking\",\n          mimeType: \"text/plain\",\n        },\n      ],\n    }));\n  }\n\n  async getSystemHealth(args) {\n    const { includeDetailedMetrics = false } = args;\n\n    const health = {\n      timestamp: new Date().toISOString(),\n      status: \"unknown\",\n      components: {},\n      metrics: {},\n    };\n\n    try {\n      // Check basic file system health\n      const packageJson = await this.checkFile(\"package.json\");\n      const dockerCompose = await this.checkFile(\"docker-compose.yml\");\n      const server = await this.checkFile(\"server.js\");\n\n      health.components = {\n        filesystem: {\n          status: \"healthy\",\n          package_json: packageJson.exists,\n          docker_compose: dockerCompose.exists,\n          server_file: server.exists,\n        },\n      };\n\n      // Check diagnostics file\n      try {\n        const diagnosticsPath = path.join(\n          this.workspaceRoot,\n          \"diagnostics.json\"\n        );\n        const diagnosticsContent = await fs.readFile(diagnosticsPath, \"utf8\");\n        const diagnostics = JSON.parse(diagnosticsContent);\n\n        health.components.diagnostics = {\n          status: diagnostics.status || \"unknown\",\n          last_check: diagnostics.timestamp,\n          database_connection: diagnostics.database?.status === \"connected\",\n        };\n      } catch (error) {\n        health.components.diagnostics = {\n          status: \"unavailable\",\n          error: \"Diagnostics file not found or invalid\",\n        };\n      }\n\n      // Check VS Code configuration\n      const vscodeSettings = await this.checkFile(\".vscode/settings.json\");\n      const vscodeExtensions = await this.checkFile(\".vscode/extensions.json\");\n      const mcpConfig = await this.checkFile(\".vscode/mcp-config.json\");\n\n      health.components.vscode = {\n        status: vscodeSettings.exists ? \"configured\" : \"missing\",\n        settings: vscodeSettings.exists,\n        extensions: vscodeExtensions.exists,\n        mcp_config: mcpConfig.exists,\n      };\n\n      // Overall health determination\n      const criticalComponents = [\"filesystem\", \"vscode\"];\n      const healthyComponents = criticalComponents.filter(\n        (comp) =>\n          health.components[comp]?.status === \"healthy\" ||\n          health.components[comp]?.status === \"configured\"\n      );\n\n      if (healthyComponents.length === criticalComponents.length) {\n        health.status = \"healthy\";\n      } else if (healthyComponents.length > 0) {\n        health.status = \"degraded\";\n      } else {\n        health.status = \"unhealthy\";\n      }\n\n      if (includeDetailedMetrics) {\n        health.metrics = await this.gatherDetailedMetrics();\n      }\n    } catch (error) {\n      health.status = \"error\";\n      health.error = error.message;\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(health, null, 2),\n        },\n      ],\n    };\n  }\n\n  async checkFile(relativePath) {\n    try {\n      const filePath = path.join(this.workspaceRoot, relativePath);\n      const stats = await fs.stat(filePath);\n      return {\n        exists: true,\n        size: stats.size,\n        modified: stats.mtime,\n      };\n    } catch (error) {\n      return {\n        exists: false,\n        error: error.message,\n      };\n    }\n  }\n\n  async gatherDetailedMetrics() {\n    const metrics = {\n      disk_usage: {},\n      file_counts: {},\n      memory_estimates: {},\n    };\n\n    try {\n      // Calculate directory sizes\n      const directories = [\"modules\", \"api\", \"database\", \"docs\", \"mcp-servers\"];\n\n      for (const dir of directories) {\n        try {\n          const dirPath = path.join(this.workspaceRoot, dir);\n          const size = await this.getDirectorySize(dirPath);\n          metrics.disk_usage[dir] = size;\n        } catch (error) {\n          metrics.disk_usage[dir] = { error: error.message };\n        }\n      }\n\n      // Count files by type\n      const fileExtensions = await this.countFilesByExtension();\n      metrics.file_counts = fileExtensions;\n\n      // Estimate memory usage based on file sizes\n      const totalSize = Object.values(metrics.disk_usage)\n        .filter((item) => typeof item === \"number\")\n        .reduce((sum, size) => sum + size, 0);\n\n      metrics.memory_estimates = {\n        total_disk_usage: totalSize,\n        estimated_memory_footprint: Math.round(totalSize * 0.1), // Rough estimate\n      };\n    } catch (error) {\n      metrics.error = error.message;\n    }\n\n    return metrics;\n  }\n\n  async getDirectorySize(dirPath) {\n    let totalSize = 0;\n\n    try {\n      const items = await fs.readdir(dirPath);\n\n      for (const item of items) {\n        const itemPath = path.join(dirPath, item);\n        const stats = await fs.stat(itemPath);\n\n        if (stats.isDirectory()) {\n          if (item !== \"node_modules\" && !item.startsWith(\".\")) {\n            totalSize += await this.getDirectorySize(itemPath);\n          }\n        } else {\n          totalSize += stats.size;\n        }\n      }\n    } catch (error) {\n      // Skip inaccessible directories\n    }\n\n    return totalSize;\n  }\n\n  async countFilesByExtension() {\n    const counts = {};\n\n    const countInDirectory = async (dirPath) => {\n      try {\n        const items = await fs.readdir(dirPath);\n\n        for (const item of items) {\n          const itemPath = path.join(dirPath, item);\n          const stats = await fs.stat(itemPath);\n\n          if (stats.isDirectory()) {\n            if (\n              item !== \"node_modules\" &&\n              !item.startsWith(\".\") &&\n              item !== \"archive\"\n            ) {\n              await countInDirectory(itemPath);\n            }\n          } else {\n            const ext = path.extname(item) || \"no-extension\";\n            counts[ext] = (counts[ext] || 0) + 1;\n          }\n        }\n      } catch (error) {\n        // Skip inaccessible directories\n      }\n    };\n\n    await countInDirectory(this.workspaceRoot);\n    return counts;\n  }\n\n  async readDiagnostics(args) {\n    const { includeHistory = true } = args;\n\n    try {\n      const diagnosticsPath = path.join(this.workspaceRoot, \"diagnostics.json\");\n      const content = await fs.readFile(diagnosticsPath, \"utf8\");\n      const diagnostics = JSON.parse(content);\n\n      const analysis = {\n        current_diagnostics: diagnostics,\n        analysis: {\n          timestamp: diagnostics.timestamp,\n          status: diagnostics.status,\n          critical_issues: [],\n          warnings: [],\n          recommendations: [],\n        },\n      };\n\n      // Analyze diagnostics data\n      if (diagnostics.database) {\n        if (diagnostics.database.status !== \"connected\") {\n          analysis.analysis.critical_issues.push(\"Database connection failed\");\n        }\n        if (diagnostics.database.error) {\n          analysis.analysis.critical_issues.push(\n            `Database error: ${diagnostics.database.error}`\n          );\n        }\n      }\n\n      if (diagnostics.environment) {\n        const missingVars = diagnostics.environment.missing_variables || [];\n        if (missingVars.length > 0) {\n          analysis.analysis.warnings.push(\n            `Missing environment variables: ${missingVars.join(\", \")}`\n          );\n        }\n      }\n\n      // Generate recommendations\n      if (analysis.analysis.critical_issues.length > 0) {\n        analysis.analysis.recommendations.push(\n          \"Resolve database connection issues immediately\"\n        );\n      }\n      if (analysis.analysis.warnings.length > 0) {\n        analysis.analysis.recommendations.push(\n          \"Configure missing environment variables\"\n        );\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(analysis, null, 2),\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(\n              {\n                error: `Failed to read diagnostics: ${error.message}`,\n                suggestion:\n                  \"Run the application to generate diagnostics.json file\",\n              },\n              null,\n              2\n            ),\n          },\n        ],\n      };\n    }\n  }\n\n  async analyzeLogs(args) {\n    const { logType = \"all\", timeRange = \"24h\" } = args;\n\n    const logFiles = [\n      \"startup.log\",\n      \"production.log\",\n      \"database-validation.log\",\n      \"server-test.log\",\n    ];\n\n    const analysis = {\n      log_type: logType,\n      time_range: timeRange,\n      log_files_checked: [],\n      patterns_found: {\n        errors: [],\n        warnings: [],\n        info: [],\n      },\n      summary: {},\n    };\n\n    for (const logFile of logFiles) {\n      try {\n        const logPath = path.join(this.workspaceRoot, logFile);\n        const content = await fs.readFile(logPath, \"utf8\");\n        const stats = await fs.stat(logPath);\n\n        analysis.log_files_checked.push({\n          file: logFile,\n          size: stats.size,\n          last_modified: stats.mtime,\n          line_count: content.split(\"\\n\").length,\n        });\n\n        // Pattern matching for different log levels\n        const errorPatterns = content.match(/ERROR|Error:|error:/gi) || [];\n        const warningPatterns = content.match(/WARN|Warning:|warning:/gi) || [];\n        const infoPatterns = content.match(/INFO|info:/gi) || [];\n\n        if (errorPatterns.length > 0) {\n          analysis.patterns_found.errors.push({\n            file: logFile,\n            count: errorPatterns.length,\n            recent_errors: this.extractRecentLogEntries(content, \"error\", 5),\n          });\n        }\n\n        if (warningPatterns.length > 0) {\n          analysis.patterns_found.warnings.push({\n            file: logFile,\n            count: warningPatterns.length,\n            recent_warnings: this.extractRecentLogEntries(\n              content,\n              \"warning\",\n              3\n            ),\n          });\n        }\n\n        analysis.patterns_found.info.push({\n          file: logFile,\n          count: infoPatterns.length,\n        });\n      } catch (error) {\n        analysis.log_files_checked.push({\n          file: logFile,\n          error: `Could not read: ${error.message}`,\n        });\n      }\n    }\n\n    analysis.summary = {\n      total_log_files: analysis.log_files_checked.filter((f) => !f.error)\n        .length,\n      total_errors: analysis.patterns_found.errors.reduce(\n        (sum, e) => sum + e.count,\n        0\n      ),\n      total_warnings: analysis.patterns_found.warnings.reduce(\n        (sum, w) => sum + w.count,\n        0\n      ),\n      health_status:\n        analysis.patterns_found.errors.length === 0\n          ? \"healthy\"\n          : \"needs_attention\",\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(analysis, null, 2),\n        },\n      ],\n    };\n  }\n\n  extractRecentLogEntries(content, level, limit) {\n    const lines = content.split(\"\\n\");\n    const pattern = new RegExp(level, \"i\");\n    const matches = lines\n      .filter((line) => pattern.test(line))\n      .slice(-limit)\n      .map((line) => line.trim());\n\n    return matches;\n  }\n\n  async checkDockerStatus(args) {\n    const { includeResourceUsage = true } = args;\n\n    const dockerStatus = {\n      docker_available: false,\n      containers: [],\n      compose_files: [],\n      resource_usage: {},\n    };\n\n    // Check for Docker Compose files\n    const composeFiles = [\n      \"docker-compose.yml\",\n      \"docker-compose.dev.yml\",\n      \"docker-compose.secrets.yml\",\n    ];\n\n    for (const file of composeFiles) {\n      const fileInfo = await this.checkFile(file);\n      dockerStatus.compose_files.push({\n        name: file,\n        exists: fileInfo.exists,\n        size: fileInfo.size,\n      });\n    }\n\n    // Check Dockerfile\n    const dockerfile = await this.checkFile(\"Dockerfile\");\n    const dockerfileDev = await this.checkFile(\"Dockerfile.dev\");\n\n    dockerStatus.docker_files = {\n      dockerfile: dockerfile.exists,\n      dockerfile_dev: dockerfileDev.exists,\n    };\n\n    // Note: We can't actually check running containers without docker CLI\n    dockerStatus.note =\n      \"Container status requires Docker CLI access. Use terminal commands to check running containers.\";\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(dockerStatus, null, 2),\n        },\n      ],\n    };\n  }\n\n  async validateConfiguration(args) {\n    const { strict = true } = args;\n\n    const validation = {\n      validation_mode: strict ? \"strict\" : \"standard\",\n      results: {},\n      issues: [],\n      recommendations: [],\n    };\n\n    // Check critical files\n    const criticalFiles = [\n      \"package.json\",\n      \"server.js\",\n      \"docker-compose.yml\",\n      \".vscode/settings.json\",\n      \".vscode/mcp-config.json\",\n    ];\n\n    validation.results.critical_files = {};\n\n    for (const file of criticalFiles) {\n      const fileInfo = await this.checkFile(file);\n      validation.results.critical_files[file] = fileInfo;\n\n      if (!fileInfo.exists) {\n        validation.issues.push(`Missing critical file: ${file}`);\n      }\n    }\n\n    // Check directory structure\n    const requiredDirectories = [\"api\", \"modules\", \"config\", \"mcp-servers\"];\n    validation.results.directory_structure = {};\n\n    for (const dir of requiredDirectories) {\n      const dirInfo = await this.checkFile(dir);\n      validation.results.directory_structure[dir] = dirInfo;\n\n      if (!dirInfo.exists) {\n        validation.issues.push(`Missing required directory: ${dir}`);\n      }\n    }\n\n    // Validate VS Code configuration\n    try {\n      const settingsPath = path.join(\n        this.workspaceRoot,\n        \".vscode\",\n        \"settings.json\"\n      );\n      const settingsContent = await fs.readFile(settingsPath, \"utf8\");\n      const settings = JSON.parse(settingsContent);\n\n      validation.results.vscode_config = {\n        copilot_enabled: !!settings[\"github.copilot.enable\"],\n        mcp_enabled: !!settings[\"mcp.enable\"],\n        performance_optimized: !!settings[\"editor.minimap.enabled\"] === false,\n      };\n\n      if (!settings[\"mcp.enable\"]) {\n        validation.issues.push(\"MCP is not enabled in VS Code settings\");\n        validation.recommendations.push(\n          \"Enable MCP in VS Code settings for AI-powered development\"\n        );\n      }\n    } catch (error) {\n      validation.issues.push(\"Could not validate VS Code configuration\");\n    }\n\n    // Generate recommendations based on issues\n    if (validation.issues.length > 0) {\n      validation.recommendations.push(\n        \"Address all configuration issues before proceeding with development\"\n      );\n    } else {\n      validation.recommendations.push(\n        \"Configuration appears to be complete and healthy\"\n      );\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(validation, null, 2),\n        },\n      ],\n    };\n  }\n\n  async generatePerformanceReport(args) {\n    const { includeRecommendations = true } = args;\n\n    const report = {\n      generated_at: new Date().toISOString(),\n      performance_metrics: {},\n      analysis: {},\n      recommendations: [],\n    };\n\n    // File system performance metrics\n    const metrics = await this.gatherDetailedMetrics();\n    report.performance_metrics = metrics;\n\n    // Analyze performance characteristics\n    const totalFiles = Object.values(metrics.file_counts || {}).reduce(\n      (sum, count) => sum + count,\n      0\n    );\n    const jsFiles = metrics.file_counts?.[\".js\"] || 0;\n    const jsonFiles = metrics.file_counts?.[\".json\"] || 0;\n\n    report.analysis = {\n      total_files: totalFiles,\n      javascript_files: jsFiles,\n      configuration_files: jsonFiles,\n      code_to_config_ratio:\n        jsFiles > 0 ? (jsFiles / (jsonFiles + 1)).toFixed(2) : \"N/A\",\n      estimated_complexity: this.estimateProjectComplexity(metrics, totalFiles),\n    };\n\n    if (includeRecommendations) {\n      // Performance recommendations based on analysis\n      if (totalFiles > 1000) {\n        report.recommendations.push(\n          \"Consider implementing file watching exclusions for better VS Code performance\"\n        );\n      }\n\n      if (report.performance_metrics.total_disk_usage > 100000000) {\n        // > 100MB\n        report.recommendations.push(\n          \"Project size is large - consider archiving unused files\"\n        );\n      }\n\n      report.recommendations.push(\n        \"Enable VS Code performance optimizations as configured\"\n      );\n      report.recommendations.push(\n        \"Use MCP servers to offload AI processing tasks\"\n      );\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(report, null, 2),\n        },\n      ],\n    };\n  }\n\n  estimateProjectComplexity(metrics, totalFiles) {\n    const jsFiles = metrics.file_counts?.[\".js\"] || 0;\n    const sqlFiles = metrics.file_counts?.[\".sql\"] || 0;\n    const configFiles =\n      (metrics.file_counts?.[\".json\"] || 0) +\n      (metrics.file_counts?.[\".yml\"] || 0);\n\n    let complexity = \"simple\";\n\n    if (jsFiles > 50 || sqlFiles > 10 || configFiles > 15) {\n      complexity = \"complex\";\n    } else if (jsFiles > 20 || sqlFiles > 5 || configFiles > 8) {\n      complexity = \"moderate\";\n    }\n\n    return {\n      level: complexity,\n      factors: {\n        javascript_files: jsFiles,\n        sql_files: sqlFiles,\n        config_files: configFiles,\n        total_files: totalFiles,\n      },\n    };\n  }\n\n  async monitorAPIQuotas(args) {\n    const { alertThreshold = 80 } = args;\n\n    const quotaMonitoring = {\n      alert_threshold: alertThreshold,\n      api_services: {},\n      alerts: [],\n      recommendations: [],\n    };\n\n    // Mock API quota data (in real implementation, this would connect to actual APIs)\n    const apiServices = [\n      {\n        name: \"Google Places\",\n        quota: 1000,\n        used: 250,\n        cost_per_request: 0.032,\n      },\n      { name: \"Foursquare Places\", quota: 950, used: 150, cost_per_request: 0 },\n      { name: \"Hunter.io\", quota: 100, used: 45, cost_per_request: 0.04 },\n      { name: \"NeverBounce\", quota: 1000, used: 320, cost_per_request: 0.008 },\n    ];\n\n    apiServices.forEach((service) => {\n      const usagePercent = (service.used / service.quota) * 100;\n      const remainingRequests = service.quota - service.used;\n      const estimatedCost = service.used * service.cost_per_request;\n\n      quotaMonitoring.api_services[service.name] = {\n        quota_limit: service.quota,\n        requests_used: service.used,\n        usage_percentage: Math.round(usagePercent),\n        remaining_requests: remainingRequests,\n        estimated_cost: estimatedCost.toFixed(3),\n        status: usagePercent >= alertThreshold ? \"alert\" : \"ok\",\n      };\n\n      if (usagePercent >= alertThreshold) {\n        quotaMonitoring.alerts.push({\n          service: service.name,\n          usage_percent: Math.round(usagePercent),\n          remaining: remainingRequests,\n          severity: usagePercent >= 95 ? \"critical\" : \"warning\",\n        });\n      }\n    });\n\n    // Generate recommendations\n    if (quotaMonitoring.alerts.length > 0) {\n      quotaMonitoring.recommendations.push(\n        \"Monitor API usage closely - approaching quota limits\"\n      );\n      quotaMonitoring.recommendations.push(\n        \"Consider implementing more aggressive caching strategies\"\n      );\n    }\n\n    const totalCost = Object.values(quotaMonitoring.api_services).reduce(\n      (sum, service) => sum + parseFloat(service.estimated_cost),\n      0\n    );\n\n    quotaMonitoring.budget_summary = {\n      total_estimated_cost: totalCost.toFixed(3),\n      most_expensive_service: Object.entries(quotaMonitoring.api_services).sort(\n        ([, a], [, b]) =>\n          parseFloat(b.estimated_cost) - parseFloat(a.estimated_cost)\n      )[0]?.[0],\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(quotaMonitoring, null, 2),\n        },\n      ],\n    };\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\"ProspectPro Monitoring MCP Server running...\");\n  }\n}\n\n// Start the server\nif (require.main === module) {\n  const server = new ProspectProMonitoringServer();\n  server.run().catch((error) => {\n    console.error(\"Failed to start monitoring server:\", error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = ProspectProMonitoringServer;\n"}}},
{"type":"measure","name":"lsp.did_open","count":8,"duration":21.357},
{"type":"mark","name":"lsp.code_action","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":6,"duration":0.016},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":5,"duration":0.066},
{"type":"mark","name":"lsp.inlay_hint","count":66,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":9}}}},
{"type":"mark","name":"lsp.document_highlight","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"lsp.code_lens","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.folding_range","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":67,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":12}}}},
{"type":"mark","name":"lsp.did_open","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro Filesystem MCP Server\n * Provides AI access to codebase analysis and file management\n */\n\nconst { Server } = require(\"@modelcontextprotocol/sdk/server/index.js\");\nconst {\n  StdioServerTransport,\n} = require(\"@modelcontextprotocol/sdk/server/stdio.js\");\nconst fs = require(\"fs\").promises;\nconst path = require(\"path\");\n\nclass ProspectProFilesystemServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-filesystem\",\n        version: \"1.0.0\",\n        description:\n          \"ProspectPro Filesystem MCP Server - AI access to codebase analysis\",\n      },\n      {\n        capabilities: {\n          tools: {},\n          resources: {},\n        },\n      }\n    );\n\n    this.workspaceRoot = process.env.WORKSPACE_ROOT || process.cwd();\n    this.setupHandlers();\n  }\n\n  setupHandlers() {\n    // Tool definitions\n    this.server.setRequestHandler(\"tools/list\", async () => ({\n      tools: [\n        {\n          name: \"analyze_project_structure\",\n          description: \"Analyze the overall project structure and architecture\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeFiles: {\n                type: \"boolean\",\n                description: \"Include file counts and sizes\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"find_code_patterns\",\n          description: \"Search for specific code patterns across the project\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              pattern: {\n                type: \"string\",\n                description: \"Regex pattern or string to search for\",\n              },\n              fileExtensions: {\n                type: \"array\",\n                items: { type: \"string\" },\n                description: \"File extensions to search in\",\n                default: [\".js\", \".json\", \".md\", \".sql\"],\n              },\n              excludeDirectories: {\n                type: \"array\",\n                items: { type: \"string\" },\n                description: \"Directories to exclude from search\",\n                default: [\"node_modules\", \".git\", \"archive\"],\n              },\n            },\n            required: [\"pattern\"],\n          },\n        },\n        {\n          name: \"analyze_api_clients\",\n          description: \"Analyze API client implementations and patterns\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              detailed: {\n                type: \"boolean\",\n                description: \"Include detailed method analysis\",\n                default: false,\n              },\n            },\n          },\n        },\n        {\n          name: \"check_fake_data_violations\",\n          description: \"Check for potential fake data generation patterns\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              strict: {\n                type: \"boolean\",\n                description: \"Enable strict checking for suspicious patterns\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"analyze_error_handling\",\n          description: \"Analyze error handling patterns across the codebase\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeSuggestions: {\n                type: \"boolean\",\n                description: \"Include improvement suggestions\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"get_configuration_overview\",\n          description:\n            \"Get an overview of all configuration files and settings\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeSecrets: {\n                type: \"boolean\",\n                description: \"Include information about secret management\",\n                default: false,\n              },\n            },\n          },\n        },\n      ],\n    }));\n\n    // Tool execution handlers\n    this.server.setRequestHandler(\"tools/call\", async (request) => {\n      const { name, arguments: args } = request.params;\n\n      try {\n        switch (name) {\n          case \"analyze_project_structure\":\n            return await this.analyzeProjectStructure(args);\n          case \"find_code_patterns\":\n            return await this.findCodePatterns(args);\n          case \"analyze_api_clients\":\n            return await this.analyzeAPIClients(args);\n          case \"check_fake_data_violations\":\n            return await this.checkFakeDataViolations(args);\n          case \"analyze_error_handling\":\n            return await this.analyzeErrorHandling(args);\n          case \"get_configuration_overview\":\n            return await this.getConfigurationOverview(args);\n          default:\n            throw new Error(`Unknown tool: ${name}`);\n        }\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error: ${error.message}`,\n            },\n          ],\n          isError: true,\n        };\n      }\n    });\n\n    // Resource handlers\n    this.server.setRequestHandler(\"resources/list\", async () => ({\n      resources: [\n        {\n          uri: \"filesystem://project-structure\",\n          name: \"Project Structure Analysis\",\n          description: \"Complete analysis of project directory structure\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"filesystem://api-clients\",\n          name: \"API Clients Directory\",\n          description: \"Analysis of API client implementations\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"filesystem://core-modules\",\n          name: \"Core Modules Directory\",\n          description: \"Analysis of core business logic modules\",\n          mimeType: \"application/json\",\n        },\n      ],\n    }));\n  }\n\n  async analyzeProjectStructure(args) {\n    const { includeFiles = true } = args;\n\n    const structure = await this.walkDirectory(\n      this.workspaceRoot,\n      includeFiles\n    );\n    const analysis = this.analyzeStructure(structure);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              workspace_root: this.workspaceRoot,\n              structure_analysis: analysis,\n              directory_tree: structure,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async walkDirectory(dirPath, includeFiles, currentDepth = 0, maxDepth = 4) {\n    if (currentDepth > maxDepth) return null;\n\n    const result = {\n      name: path.basename(dirPath),\n      type: \"directory\",\n      children: [],\n    };\n\n    try {\n      const items = await fs.readdir(dirPath);\n\n      for (const item of items) {\n        if (item.startsWith(\".\") && !item.includes(\"vscode\")) continue;\n        if ([\"node_modules\", \"archive\"].includes(item)) continue;\n\n        const itemPath = path.join(dirPath, item);\n        const stats = await fs.stat(itemPath);\n\n        if (stats.isDirectory()) {\n          const childResult = await this.walkDirectory(\n            itemPath,\n            includeFiles,\n            currentDepth + 1,\n            maxDepth\n          );\n          if (childResult) result.children.push(childResult);\n        } else if (includeFiles) {\n          result.children.push({\n            name: item,\n            type: \"file\",\n            size: stats.size,\n            extension: path.extname(item),\n          });\n        }\n      }\n    } catch (error) {\n      result.error = error.message;\n    }\n\n    return result;\n  }\n\n  analyzeStructure(structure) {\n    const analysis = {\n      total_directories: 0,\n      total_files: 0,\n      file_types: {},\n      largest_files: [],\n      key_directories: [],\n    };\n\n    const analyzeNode = (node) => {\n      if (node.type === \"directory\") {\n        analysis.total_directories++;\n\n        // Identify key directories\n        const keyDirs = [\n          \"api\",\n          \"modules\",\n          \"config\",\n          \"database\",\n          \"mcp-servers\",\n          \"scripts\",\n        ];\n        if (keyDirs.includes(node.name)) {\n          analysis.key_directories.push({\n            name: node.name,\n            children_count: node.children?.length || 0,\n          });\n        }\n\n        if (node.children) {\n          node.children.forEach(analyzeNode);\n        }\n      } else if (node.type === \"file\") {\n        analysis.total_files++;\n\n        const ext = node.extension || \"no-extension\";\n        analysis.file_types[ext] = (analysis.file_types[ext] || 0) + 1;\n\n        if (node.size > 10000) {\n          // Files larger than 10KB\n          analysis.largest_files.push({\n            name: node.name,\n            size: node.size,\n            extension: ext,\n          });\n        }\n      }\n    };\n\n    analyzeNode(structure);\n\n    // Sort largest files by size\n    analysis.largest_files.sort((a, b) => b.size - a.size);\n    analysis.largest_files = analysis.largest_files.slice(0, 10);\n\n    return analysis;\n  }\n\n  async findCodePatterns(args) {\n    const {\n      pattern,\n      fileExtensions = [\".js\", \".json\", \".md\", \".sql\"],\n      excludeDirectories = [\"node_modules\", \".git\", \"archive\"],\n    } = args;\n\n    const results = [];\n    const regex = new RegExp(pattern, \"gi\");\n\n    const searchInDirectory = async (dirPath) => {\n      try {\n        const items = await fs.readdir(dirPath);\n\n        for (const item of items) {\n          const itemPath = path.join(dirPath, item);\n          const stats = await fs.stat(itemPath);\n\n          if (stats.isDirectory()) {\n            if (!excludeDirectories.includes(item) && !item.startsWith(\".\")) {\n              await searchInDirectory(itemPath);\n            }\n          } else if (fileExtensions.includes(path.extname(item))) {\n            try {\n              const content = await fs.readFile(itemPath, \"utf8\");\n              const matches = [...content.matchAll(regex)];\n\n              if (matches.length > 0) {\n                const lines = content.split(\"\\n\");\n                const matchDetails = matches.map((match) => {\n                  const lineIndex =\n                    content.substring(0, match.index).split(\"\\n\").length - 1;\n                  return {\n                    match: match[0],\n                    line_number: lineIndex + 1,\n                    line_content: lines[lineIndex]?.trim(),\n                  };\n                });\n\n                results.push({\n                  file: path.relative(this.workspaceRoot, itemPath),\n                  matches: matchDetails.length,\n                  details: matchDetails,\n                });\n              }\n            } catch (readError) {\n              // Skip files that can't be read\n            }\n          }\n        }\n      } catch (error) {\n        // Skip directories that can't be accessed\n      }\n    };\n\n    await searchInDirectory(this.workspaceRoot);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              pattern,\n              search_config: { fileExtensions, excludeDirectories },\n              total_matches: results.reduce((sum, r) => sum + r.matches, 0),\n              files_with_matches: results.length,\n              results,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async analyzeAPIClients(args) {\n    const { detailed = false } = args;\n    const apiClientsPath = path.join(\n      this.workspaceRoot,\n      \"modules\",\n      \"api-clients\"\n    );\n\n    try {\n      const files = await fs.readdir(apiClientsPath);\n      const analysis = { clients: [], summary: {} };\n\n      for (const file of files) {\n        if (path.extname(file) === \".js\") {\n          const filePath = path.join(apiClientsPath, file);\n          const content = await fs.readFile(filePath, \"utf8\");\n\n          const clientAnalysis = {\n            name: file,\n            size: content.length,\n            class_count: (content.match(/class\\s+\\w+/g) || []).length,\n            method_count: (content.match(/async\\s+\\w+\\(|^\\s*\\w+\\s*\\(/gm) || [])\n              .length,\n            error_handling: (content.match(/try\\s*{|catch\\s*\\(/g) || []).length,\n            caching_implemented:\n              content.includes(\"cache\") || content.includes(\"Cache\"),\n            usage_tracking:\n              content.includes(\"usageStats\") || content.includes(\"usage\"),\n            api_key_required:\n              content.includes(\"apiKey\") || content.includes(\"API_KEY\"),\n          };\n\n          if (detailed) {\n            clientAnalysis.methods = this.extractMethods(content);\n            clientAnalysis.dependencies = this.extractDependencies(content);\n          }\n\n          analysis.clients.push(clientAnalysis);\n        }\n      }\n\n      analysis.summary = {\n        total_clients: analysis.clients.length,\n        total_methods: analysis.clients.reduce(\n          (sum, c) => sum + c.method_count,\n          0\n        ),\n        clients_with_caching: analysis.clients.filter(\n          (c) => c.caching_implemented\n        ).length,\n        clients_with_usage_tracking: analysis.clients.filter(\n          (c) => c.usage_tracking\n        ).length,\n      };\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(analysis, null, 2),\n          },\n        ],\n      };\n    } catch (error) {\n      throw new Error(`Failed to analyze API clients: ${error.message}`);\n    }\n  }\n\n  async checkFakeDataViolations(args) {\n    const { strict = true } = args;\n\n    const suspiciousPatterns = [\n      // Fake business names\n      /[\"']Artisan\\s+Bistro[\"']/gi,\n      /[\"']Downtown\\s+Café?[\"']/gi,\n      /[\"']Business\\s+LLC[\"']/gi,\n      /[\"']Company\\s+Inc\\.?[\"']/gi,\n\n      // Sequential addresses\n      /[\"']\\d+\\s+Main\\s+St[\"']/gi,\n      /[\"']\\d+\\s+First\\s+Ave[\"']/gi,\n\n      // Fake phone numbers\n      /\\(555\\)\\s*\\d{3}-\\d{4}/gi,\n      /\\(000\\)\\s*\\d{3}-\\d{4}/gi,\n\n      // Example domains\n      /[\"']https?:\\/\\/example\\.com[\"']/gi,\n      /[\"']https?:\\/\\/business\\.com[\"']/gi,\n\n      // Fake data generation functions\n      /generateFake\\w*/gi,\n      /createFake\\w*/gi,\n      /mockData/gi,\n    ];\n\n    if (strict) {\n      suspiciousPatterns.push(\n        /const\\s+\\w*businesses\\w*\\s*=\\s*\\[/gi, // Hardcoded business arrays\n        /const\\s+\\w*leads\\w*\\s*=\\s*\\[/gi, // Hardcoded lead arrays\n        /return\\s*\\[.*\".*business.*\".*\\]/gi // Return hardcoded business data\n      );\n    }\n\n    const violations = [];\n\n    for (const pattern of suspiciousPatterns) {\n      const patternResults = await this.findCodePatterns({\n        pattern: pattern.source,\n        fileExtensions: [\".js\", \".json\"],\n        excludeDirectories: [\"node_modules\", \".git\", \"archive\", \"tests\"],\n      });\n\n      if (patternResults.content[0].text) {\n        const data = JSON.parse(patternResults.content[0].text);\n        if (data.results.length > 0) {\n          violations.push({\n            pattern: pattern.source,\n            severity: strict ? \"HIGH\" : \"MEDIUM\",\n            matches: data.results,\n          });\n        }\n      }\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              check_mode: strict ? \"strict\" : \"standard\",\n              total_violations: violations.length,\n              violations,\n              recommendation:\n                violations.length > 0\n                  ? \"IMMEDIATE ACTION REQUIRED: Remove all fake data patterns\"\n                  : \"No fake data violations detected - good!\",\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async analyzeErrorHandling(args) {\n    const { includeSuggestions = true } = args;\n\n    const errorPatterns = await this.findCodePatterns({\n      pattern: \"try\\\\s*{|catch\\\\s*\\\\(|throw\\\\s+new|console\\\\.error\",\n      fileExtensions: [\".js\"],\n      excludeDirectories: [\"node_modules\", \".git\", \"archive\"],\n    });\n\n    const analysisData = JSON.parse(errorPatterns.content[0].text);\n\n    const analysis = {\n      error_handling_coverage: {\n        files_with_error_handling: analysisData.results.length,\n        total_error_patterns: analysisData.total_matches,\n        files_by_error_density: analysisData.results\n          .map((r) => ({\n            file: r.file,\n            error_patterns: r.matches,\n            density: r.matches, // Could calculate per line\n          }))\n          .sort((a, b) => b.error_patterns - a.error_patterns),\n      },\n    };\n\n    if (includeSuggestions) {\n      analysis.suggestions = [\n        \"Ensure all async operations have try-catch blocks\",\n        \"Use structured error responses in API endpoints\",\n        \"Implement global error handlers for unhandled exceptions\",\n        \"Add error logging with appropriate severity levels\",\n        \"Consider implementing circuit breakers for external API calls\",\n      ];\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(analysis, null, 2),\n        },\n      ],\n    };\n  }\n\n  async getConfigurationOverview(args) {\n    const { includeSecrets = false } = args;\n\n    const configFiles = [\n      \"package.json\",\n      \"docker-compose.yml\",\n      \"docker-compose.dev.yml\",\n      \"Dockerfile\",\n      \".vscode/settings.json\",\n      \".vscode/launch.json\",\n      \".vscode/mcp-config.json\",\n    ];\n\n    const overview = { configurations: [], summary: {} };\n\n    for (const configFile of configFiles) {\n      try {\n        const filePath = path.join(this.workspaceRoot, configFile);\n        const stats = await fs.stat(filePath);\n        const content = await fs.readFile(filePath, \"utf8\");\n\n        const config = {\n          file: configFile,\n          size: stats.size,\n          last_modified: stats.mtime,\n          type: path.extname(configFile) || \"config\",\n        };\n\n        if (includeSecrets) {\n          config.potential_secrets = this.findPotentialSecrets(content);\n        }\n\n        // Basic content analysis\n        if (configFile.endsWith(\".json\")) {\n          try {\n            const parsed = JSON.parse(content);\n            config.json_keys = Object.keys(parsed).length;\n          } catch (e) {\n            config.parse_error = e.message;\n          }\n        }\n\n        overview.configurations.push(config);\n      } catch (error) {\n        overview.configurations.push({\n          file: configFile,\n          error: `File not found or inaccessible: ${error.message}`,\n        });\n      }\n    }\n\n    overview.summary = {\n      total_config_files: overview.configurations.filter((c) => !c.error)\n        .length,\n      missing_files: overview.configurations.filter((c) => c.error).length,\n      total_size: overview.configurations\n        .filter((c) => c.size)\n        .reduce((sum, c) => sum + c.size, 0),\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(overview, null, 2),\n        },\n      ],\n    };\n  }\n\n  extractMethods(content) {\n    const methods = [];\n    const methodRegex = /(?:async\\s+)?(\\w+)\\s*\\([^)]*\\)\\s*{/g;\n    let match;\n\n    while ((match = methodRegex.exec(content)) !== null) {\n      methods.push({\n        name: match[1],\n        is_async: match[0].includes(\"async\"),\n      });\n    }\n\n    return methods;\n  }\n\n  extractDependencies(content) {\n    const deps = [];\n    const requireRegex = /require\\(['\"]([^'\"]+)['\"]\\)/g;\n    let match;\n\n    while ((match = requireRegex.exec(content)) !== null) {\n      deps.push(match[1]);\n    }\n\n    return [...new Set(deps)];\n  }\n\n  findPotentialSecrets(content) {\n    const secretPatterns = [\n      /\\bAPI_KEY\\b/gi,\n      /\\bSECRET\\b/gi,\n      /\\bTOKEN\\b/gi,\n      /\\bPASSWORD\\b/gi,\n      /\\b[A-Z0-9]{32,}\\b/g, // Long strings that might be keys\n    ];\n\n    const findings = [];\n    secretPatterns.forEach((pattern, index) => {\n      const matches = content.match(pattern) || [];\n      if (matches.length > 0) {\n        findings.push({\n          pattern_type: [\n            \"api_key\",\n            \"secret\",\n            \"token\",\n            \"password\",\n            \"long_string\",\n          ][index],\n          count: matches.length,\n        });\n      }\n    });\n\n    return findings;\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\"ProspectPro Filesystem MCP Server running...\");\n  }\n}\n\n// Start the server\nif (require.main === module) {\n  const server = new ProspectProFilesystemServer();\n  server.run().catch((error) => {\n    console.error(\"Failed to start filesystem server:\", error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = ProspectProFilesystemServer;\n"}}},
{"type":"measure","name":"lsp.did_open","count":9,"duration":9.147},
{"type":"mark","name":"lsp.code_action","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":6,"duration":0.05},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":7,"duration":0.013},
{"type":"mark","name":"lsp.inlay_hint","count":68,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":27}}}},
{"type":"mark","name":"lsp.code_lens","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"}}},
{"type":"mark","name":"lsp.folding_range","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":69,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":42}}}},
{"type":"mark","name":"lsp.did_open","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro Database MCP Server\n * Provides AI access to Supabase database for lead analysis and management\n */\n\nconst { Server } = require(\"@modelcontextprotocol/sdk/server/index.js\");\nconst {\n  StdioServerTransport,\n} = require(\"@modelcontextprotocol/sdk/server/stdio.js\");\nconst { createClient } = require(\"@supabase/supabase-js\");\n\nclass ProspectProDatabaseServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-database\",\n        version: \"1.0.0\",\n        description:\n          \"ProspectPro Database MCP Server - AI access to lead data and analytics\",\n      },\n      {\n        capabilities: {\n          tools: {},\n          resources: {},\n        },\n      }\n    );\n\n    this.supabase = null;\n    this.setupHandlers();\n  }\n\n  async initializeSupabase() {\n    if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SECRET_KEY) {\n      throw new Error(\"Missing Supabase configuration\");\n    }\n\n    this.supabase = createClient(\n      process.env.SUPABASE_URL,\n      process.env.SUPABASE_SECRET_KEY\n    );\n\n    // Test connection\n    const { data, error } = await this.supabase\n      .from(\"enhanced_leads\")\n      .select(\"count\")\n      .limit(1);\n\n    if (error) {\n      throw new Error(`Supabase connection failed: ${error.message}`);\n    }\n  }\n\n  setupHandlers() {\n    // Tool definitions\n    this.server.setRequestHandler(\"tools/list\", async () => ({\n      tools: [\n        {\n          name: \"query_leads\",\n          description: \"Query enhanced_leads table with filters and analytics\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              filters: {\n                type: \"object\",\n                description: \"SQL WHERE clause conditions\",\n              },\n              limit: {\n                type: \"number\",\n                description: \"Number of results to return\",\n                default: 10,\n              },\n              orderBy: {\n                type: \"string\",\n                description: \"Column to order results by\",\n                default: \"confidence_score\",\n              },\n            },\n          },\n        },\n        {\n          name: \"get_campaign_stats\",\n          description: \"Get campaign statistics and performance metrics\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              campaignId: {\n                type: \"string\",\n                description: \"Campaign ID to analyze\",\n              },\n              timeRange: {\n                type: \"string\",\n                description: \"Time range for analysis (24h, 7d, 30d)\",\n                default: \"24h\",\n              },\n            },\n          },\n        },\n        {\n          name: \"analyze_lead_quality\",\n          description: \"Analyze lead quality patterns and scoring distribution\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              businessType: {\n                type: \"string\",\n                description: \"Filter by business type/industry\",\n              },\n              minConfidence: {\n                type: \"number\",\n                description: \"Minimum confidence score threshold\",\n                default: 70,\n              },\n            },\n          },\n        },\n        {\n          name: \"get_api_costs\",\n          description: \"Retrieve API cost breakdown and budget analysis\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              timeRange: {\n                type: \"string\",\n                description: \"Time range for cost analysis\",\n                default: \"24h\",\n              },\n            },\n          },\n        },\n      ],\n    }));\n\n    // Tool execution handlers\n    this.server.setRequestHandler(\"tools/call\", async (request) => {\n      const { name, arguments: args } = request.params;\n\n      try {\n        await this.initializeSupabase();\n\n        switch (name) {\n          case \"query_leads\":\n            return await this.queryLeads(args);\n          case \"get_campaign_stats\":\n            return await this.getCampaignStats(args);\n          case \"analyze_lead_quality\":\n            return await this.analyzeLeadQuality(args);\n          case \"get_api_costs\":\n            return await this.getApiCosts(args);\n          default:\n            throw new Error(`Unknown tool: ${name}`);\n        }\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error: ${error.message}`,\n            },\n          ],\n          isError: true,\n        };\n      }\n    });\n\n    // Resource handlers\n    this.server.setRequestHandler(\"resources/list\", async () => ({\n      resources: [\n        {\n          uri: \"database://enhanced_leads\",\n          name: \"Enhanced Leads Table\",\n          description:\n            \"Main table containing processed and validated business leads\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"database://campaigns\",\n          name: \"Campaigns Table\",\n          description: \"Campaign tracking and performance data\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"database://api_costs\",\n          name: \"API Costs Table\",\n          description: \"API usage and cost tracking data\",\n          mimeType: \"application/json\",\n        },\n      ],\n    }));\n  }\n\n  async queryLeads(args) {\n    const { filters = {}, limit = 10, orderBy = \"confidence_score\" } = args;\n\n    let query = this.supabase\n      .from(\"enhanced_leads\")\n      .select(\"*\")\n      .order(orderBy, { ascending: false })\n      .limit(limit);\n\n    // Apply filters\n    Object.entries(filters).forEach(([key, value]) => {\n      query = query.eq(key, value);\n    });\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw new Error(`Query failed: ${error.message}`);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              results: data,\n              count: data.length,\n              query_info: {\n                filters,\n                limit,\n                orderBy,\n              },\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async getCampaignStats(args) {\n    const { campaignId, timeRange = \"24h\" } = args;\n\n    // Convert time range to SQL interval\n    const intervalMap = {\n      \"24h\": \"1 day\",\n      \"7d\": \"7 days\",\n      \"30d\": \"30 days\",\n    };\n\n    const { data, error } = await this.supabase.rpc(\"get_campaign_statistics\", {\n      p_campaign_id: campaignId,\n      p_time_interval: intervalMap[timeRange] || \"1 day\",\n    });\n\n    if (error) {\n      throw new Error(`Campaign stats query failed: ${error.message}`);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              campaign_id: campaignId,\n              time_range: timeRange,\n              statistics: data,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async analyzeLeadQuality(args) {\n    const { businessType, minConfidence = 70 } = args;\n\n    let query = this.supabase\n      .from(\"enhanced_leads\")\n      .select(\n        \"confidence_score, business_name, email_confidence, phone_confidence, website_confidence\"\n      )\n      .gte(\"confidence_score\", minConfidence);\n\n    if (businessType) {\n      query = query.ilike(\"business_type\", `%${businessType}%`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw new Error(`Quality analysis failed: ${error.message}`);\n    }\n\n    // Calculate quality metrics\n    const analysis = {\n      total_leads: data.length,\n      average_confidence:\n        data.reduce((sum, lead) => sum + lead.confidence_score, 0) /\n        data.length,\n      confidence_distribution: {\n        high: data.filter((l) => l.confidence_score >= 85).length,\n        medium: data.filter(\n          (l) => l.confidence_score >= 70 && l.confidence_score < 85\n        ).length,\n        low: data.filter((l) => l.confidence_score < 70).length,\n      },\n      contact_quality: {\n        strong_email: data.filter((l) => l.email_confidence >= 80).length,\n        strong_phone: data.filter((l) => l.phone_confidence >= 80).length,\n        strong_website: data.filter((l) => l.website_confidence >= 80).length,\n      },\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(analysis, null, 2),\n        },\n      ],\n    };\n  }\n\n  async getApiCosts(args) {\n    const { timeRange = \"24h\" } = args;\n\n    const intervalMap = {\n      \"24h\": \"1 day\",\n      \"7d\": \"7 days\",\n      \"30d\": \"30 days\",\n    };\n\n    const { data, error } = await this.supabase\n      .from(\"api_costs\")\n      .select(\"*\")\n      .gte(\"created_at\", `now() - interval '${intervalMap[timeRange]}'`)\n      .order(\"created_at\", { ascending: false });\n\n    if (error) {\n      throw new Error(`API costs query failed: ${error.message}`);\n    }\n\n    // Aggregate costs by API\n    const costBreakdown = data.reduce((acc, record) => {\n      const api = record.api_name;\n      if (!acc[api]) {\n        acc[api] = { requests: 0, total_cost: 0 };\n      }\n      acc[api].requests += 1;\n      acc[api].total_cost += record.cost;\n      return acc;\n    }, {});\n\n    const totalCost = Object.values(costBreakdown).reduce(\n      (sum, api) => sum + api.total_cost,\n      0\n    );\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              time_range: timeRange,\n              total_cost: totalCost,\n              cost_breakdown: costBreakdown,\n              total_requests: data.length,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\"ProspectPro Database MCP Server running...\");\n  }\n}\n\n// Start the server\nif (require.main === module) {\n  const server = new ProspectProDatabaseServer();\n  server.run().catch((error) => {\n    console.error(\"Failed to start database server:\", error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = ProspectProDatabaseServer;\n"}}},
{"type":"measure","name":"lsp.did_open","count":10,"duration":15.239},
{"type":"mark","name":"lsp.code_action","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":7,"duration":0.059},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":8,"duration":0.013},
{"type":"mark","name":"lsp.inlay_hint","count":70,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":14}}}},
{"type":"mark","name":"lsp.code_lens","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"}}},
{"type":"mark","name":"lsp.folding_range","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":71,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":24}}}},
{"type":"mark","name":"lsp.code_action","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":72,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":42}}}},
{"type":"mark","name":"lsp.document_highlight","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"lsp.folding_range","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":73,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":12}}}},
{"type":"mark","name":"lsp.document_highlight","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"lsp.document_symbol","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.folding_range","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_highlight","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"lsp.code_lens","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":74,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":42}}}},
{"type":"mark","name":"lsp.folding_range","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":40,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_highlight","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"lsp.code_lens","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":75,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":42}}}},
{"type":"mark","name":"lsp.code_action","count":41,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":76,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":12}}}},
{"type":"mark","name":"lsp.document_highlight","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"lsp.folding_range","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":42,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":77,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":24}}}},
{"type":"mark","name":"lsp.folding_range","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"}}},
{"type":"mark","name":"lsp.document_highlight","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"lsp.document_symbol","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":43,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":44,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":78,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":35}}}},
{"type":"mark","name":"lsp.folding_range","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":45,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":9,"duration":0.023},
{"type":"mark","name":"lsp.code_action","count":46,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":79,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":22}}}},
{"type":"mark","name":"lsp.code_lens","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"}}},
{"type":"mark","name":"lsp.folding_range","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":47,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":80,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.code_action","count":48,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_close","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"measure","name":"lsp.did_close","count":5,"duration":0.041},
{"type":"mark","name":"lsp.inlay_hint","count":81,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.code_action","count":49,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":82,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":83,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.code_action","count":50,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":84,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":85,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":86,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":87,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.code_action","count":51,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":88,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":89,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":90,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":91,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":92,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":93,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":94,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":95,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":96,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":97,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":98,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":99,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":100,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":101,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":102,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":103,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":104,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":105,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":106,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":107,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":108,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":109,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":110,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":111,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":112,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":113,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":114,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":115,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":116,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":117,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":118,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":119,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":120,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":121,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":122,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":123,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":124,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":125,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":126,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":127,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":128,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":129,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":130,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":131,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":132,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":133,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":134,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":135,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":136,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":137,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":138,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":139,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":140,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":141,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":142,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":143,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":144,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":145,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":25}}}},
{"type":"mark","name":"lsp.inlay_hint","count":146,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":147,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":148,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":149,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":150,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":151,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":152,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":153,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":154,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":155,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":156,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":157,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":158,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":159,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":160,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":161,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":162,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":163,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":164,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":165,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":166,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":167,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":168,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":169,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":170,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":171,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":172,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":173,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":174,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":175,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":176,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":177,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":178,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":179,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":180,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":181,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":182,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":183,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":184,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":185,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":186,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":187,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":188,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":189,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":190,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":191,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":192,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":193,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":194,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":195,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":196,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":197,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":198,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":199,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":200,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":201,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":202,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":203,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":204,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":205,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":206,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":207,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":208,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":209,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":210,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":211,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":212,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":213,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":214,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":215,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":216,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":217,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":218,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":219,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":220,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":221,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":222,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":223,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":224,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":225,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":226,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":227,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":228,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":229,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":230,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.inlay_hint","count":231,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.did_open","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md","languageId":"markdown","version":1,"text":"# ProspectPro v3.0 - Optimized AI Instructions\r\n\r\n## CRITICAL: Current Production State\r\n\r\n- **Version**: 3.0.0 (Production-ready with Supabase Vault)\r\n- **Deployment**: GitHub Actions → Railway/Docker automated\r\n- **Environment**: Secrets auto-injected via `.scripts/pull-env-from-secrets.js`\r\n- **Architecture**: 4-stage validation pipeline (Discovery→Enrichment→Validation→Export)\r\n- **Repository**: https://github.com/Alextorelli/ProspectPro (main = production)\r\n\r\n## IMMEDIATE CONTEXT (No Re-explanation Needed)\r\n\r\nWhen Alex asks about:\r\n\r\n- **\"Environment setup\"** → Point to `npm run prod-setup-env` (automated via GitHub Actions)\r\n- **\"API integration\"** → All clients in `/modules/api-clients/` (Google Places, Hunter.io, NeverBounce, Foursquare)\r\n- **\"Database issues\"** → Supabase with comprehensive schema in `/database/`\r\n- **\"Docker problems\"** → Multi-stage build with security hardening already implemented\r\n- **\"Cost optimization\"** → Built-in rate limiting and caching systems already active\r\n- **\"Deployment\"** → Automated via GitHub Actions with secret injection\r\n- **\"Testing\"** → Use `npm run test` or check testing branch\r\n\r\n## ALEX'S TECHNICAL PROFILE\r\n\r\n- **Background**: No coding experience but highly technical\r\n- **AI Dependency**: Relies heavily on AI assistance for debugging and architecture\r\n- **Primary Models**: Claude Sonnet 4.0, GPT-5 occasionally\r\n- **Environment**: GitHub Codespaces exclusively\r\n- **Focus**: Lead generation with zero fake data tolerance\r\n- **Usage Pattern**: Debugging, testing, CI/CD, architecture discussions\r\n\r\n## RESPONSE OPTIMIZATION RULES\r\n\r\n1. **NEVER re-explain project architecture** unless specifically asked with \"explain the architecture\"\r\n2. **ALWAYS reference existing files/scripts** for implementation details\r\n3. **PRIORITIZE troubleshooting** over teaching fundamentals\r\n4. **ASSUME familiarity** with ProspectPro's core concepts\r\n5. **FOCUS on immediate problem resolution** not educational content\r\n6. **USE existing npm scripts** rather than creating new implementations\r\n7. **REFERENCE the working production system** rather than theoretical solutions\r\n\r\n## CURRENT PRODUCTION ARCHITECTURE (ESTABLISHED - DO NOT RE-EXPLAIN)\r\n\r\n### File Structure (REFERENCE ONLY)\r\n\r\n```\r\n/api/business-discovery.js           # Core discovery logic\r\n/modules/enhanced-lead-discovery.js  # Main business processing\r\n/modules/campaign-csv-exporter.js    # Export system with analytics\r\n/modules/api-clients/                # All API integrations\r\n/database/database-master-setup.js   # Schema and migrations\r\n.scripts/pull-env-from-secrets.js    # Environment automation\r\n```\r\n\r\n### Current Working Scripts (USE THESE)\r\n\r\n```bash\r\nnpm run prod-setup-env     # Automated secret injection\r\nnpm run production-start   # Launch production\r\nnpm run prod-check        # Validate environment\r\nnpm run health            # Health check\r\nnpm run diag              # Diagnostics\r\n```\r\n\r\n### API Integration Stack (WORKING)\r\n\r\n- **Google Places API**: Business discovery with rate limiting\r\n- **Hunter.io**: Email discovery and validation\r\n- **NeverBounce**: Email verification\r\n- **Foursquare**: Additional business data\r\n- **Supabase**: Database with real-time subscriptions\r\n- **Railway**: Production hosting with automated deployment\r\n\r\n## PROBLEM-SOLVING APPROACH\r\n\r\n### For Environment Issues:\r\n\r\n1. Check `npm run prod-check` output\r\n2. Verify GitHub Actions completed successfully\r\n3. Check Railway deployment logs\r\n4. Validate Supabase connection\r\n\r\n### For API Issues:\r\n\r\n1. Reference existing implementations in `/modules/api-clients/`\r\n2. Check rate limiting configurations\r\n3. Verify API key injection via GitHub Actions\r\n4. Review error logs in production\r\n\r\n### For Deployment Issues:\r\n\r\n1. Check GitHub Actions workflow status\r\n2. Verify Railway deployment completion\r\n3. Run health checks: `npm run health`\r\n4. Check Docker container status\r\n\r\n### For Database Issues:\r\n\r\n1. Reference schema in `/database/database-master-setup.js`\r\n2. Check Supabase dashboard for connection issues\r\n3. Verify environment variables are properly injected\r\n4. Review query performance in Supabase logs\r\n\r\n## CURRENT OPTIMIZATIONS (ALREADY IMPLEMENTED)\r\n\r\n- **Automated secret management** via GitHub Actions\r\n- **Multi-stage Docker build** with security hardening\r\n- **API rate limiting and caching** for cost optimization\r\n- **Comprehensive error handling** with structured logging\r\n- **Zero fake data validation** pipeline with quality scoring\r\n- **Automated CSV export** with campaign analytics\r\n- **Production health monitoring** via `/health` and `/diag` endpoints\r\n\r\n## DEVELOPMENT WORKFLOW (ESTABLISHED)\r\n\r\n1. **Main branch** = Production (auto-deployed to Railway)\r\n2. **Testing branch** = Development/testing environment\r\n3. **GitHub Actions** = Automated CI/CD with secret injection\r\n4. **Codespaces** = Primary development environment\r\n5. **Docker** = Production containerization\r\n\r\n## DEBUGGING PATTERNS (OPTIMIZED FOR ALEX)\r\n\r\n- Start with health checks: `npm run health` and `npm run diag`\r\n- Check GitHub Actions for deployment status\r\n- Review Railway logs for runtime issues\r\n- Use Supabase dashboard for database troubleshooting\r\n- Reference existing working implementations before creating new code\r\n\r\n## COST OPTIMIZATION FOCUS\r\n\r\n- **API calls**: Use existing rate limiting and caching\r\n- **Database queries**: Optimized with connection pooling\r\n- **Container resources**: Multi-stage build reduces image size\r\n- **Premium AI requests**: Use this instruction file to reduce context repetition\r\n\r\n## RESPONSE FORMAT PREFERENCES\r\n\r\n- **Immediate solutions** over explanations\r\n- **Reference existing code** rather than writing new implementations\r\n- **Use established scripts** rather than manual processes\r\n- **Focus on debugging** rather than architecture discussions\r\n- **Provide specific file paths** and command references\r\n- **Assume production system knowledge** unless explicitly asked to explain\r\n\r\n## NEVER REPEAT (SAVE PREMIUM REQUESTS)\r\n\r\n- Project architecture explanations\r\n- Environment setup procedures (automated)\r\n- API integration patterns (already implemented)\r\n- Database schema explanations (documented)\r\n- Docker configuration details (working)\r\n- Cost optimization strategies (implemented)\r\n- Security measures (hardened)\r\n\r\nThis instruction set prioritizes rapid problem resolution and eliminates repetitive context discussions to maximize premium request efficiency.\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":11,"duration":0.103},
{"type":"mark","name":"lsp.code_action","count":52,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":10,"duration":0.014},
{"type":"mark","name":"lsp.inlay_hint","count":232,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":0}}}},
{"type":"mark","name":"lsp.code_lens","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.document_symbol","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.folding_range","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.code_action","count":53,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.code_action","count":54,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":233,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":106,"character":22}}}},
{"type":"mark","name":"lsp.document_highlight","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"position":{"line":0,"character":0}}},
{"type":"mark","name":"lsp.folding_range","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":55,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":56,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":57,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":234,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":35}}}},
{"type":"mark","name":"lsp.folding_range","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":58,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.hover","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"position":{"line":20,"character":27}}},
{"type":"mark","name":"lsp.did_change_batched","count":1,"args":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":8,"duration":0.057},
{"type":"measure","name":"lsp.did_change_batched","count":1,"duration":12.41},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":11,"duration":0.01},
{"type":"mark","name":"lsp.folding_range","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":235,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":6}}}},
{"type":"mark","name":"lsp.document_symbol","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":12,"duration":0.024},
{"type":"mark","name":"lsp.code_lens","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":1,"duration":0.009},
{"type":"mark","name":"lsp.inlay_hint","count":236,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":13,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":237,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":91,"character":34}}}},
{"type":"mark","name":"lsp.code_lens","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":14,"duration":0.024},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":15,"duration":0.023},
{"type":"mark","name":"lsp.did_close","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"measure","name":"lsp.did_close","count":6,"duration":0.032},
{"type":"mark","name":"lsp.inlay_hint","count":238,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.did_change_batched","count":2,"args":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},
{"type":"measure","name":"lsp.did_change_batched","count":2,"duration":52.041},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":16,"duration":0.01},
{"type":"measure","name":"lsp.testing_update","count":9,"duration":0.057},
{"type":"mark","name":"lsp.inlay_hint","count":239,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.folding_range","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":40,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":17,"duration":0.023},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":2,"duration":0.023},
{"type":"mark","name":"lsp.code_lens","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":41,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":240,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.inlay_hint","count":241,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.code_lens","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":18,"duration":0.015},
{"type":"mark","name":"lsp.inlay_hint","count":242,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":91,"character":48}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":19,"duration":0.023},
{"type":"mark","name":"lsp.did_open","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md","languageId":"markdown","version":1,"text":"# ProspectPro v3.0 - Optimized AI Instructions\r\n\r\n## CRITICAL: Current Production State\r\n\r\n- **Version**: 3.0.0 (Production-ready with Supabase Vault)\r\n- **Deployment**: GitHub Actions → Railway/Docker automated\r\n- **Environment**: Secrets auto-injected via `.scripts/pull-env-from-secrets.js`\r\n- **Architecture**: 4-stage validation pipeline (Discovery→Enrichment→Validation→Export)\r\n- **Repository**: https://github.com/Alextorelli/ProspectPro (main = production)\r\n\r\n## IMMEDIATE CONTEXT (No Re-explanation Needed)\r\n\r\nWhen Alex asks about:\r\n\r\n- **\"Environment setup\"** → Point to `npm run prod-setup-env` (automated via GitHub Actions)\r\n- **\"API integration\"** → All clients in `/modules/api-clients/` (Google Places, Hunter.io, NeverBounce, Foursquare)\r\n- **\"Database issues\"** → Supabase with comprehensive schema in `/database/`\r\n- **\"Docker problems\"** → Multi-stage build with security hardening already implemented\r\n- **\"Cost optimization\"** → Built-in rate limiting and caching systems already active\r\n- **\"Deployment\"** → Automated via GitHub Actions with secret injection\r\n- **\"Testing\"** → Use `npm run test` or check testing branch\r\n\r\n## ALEX'S TECHNICAL PROFILE\r\n\r\n- **Background**: No coding experience but highly technical\r\n- **AI Dependency**: Relies heavily on AI assistance for debugging and architecture\r\n- **Primary Models**: Claude Sonnet 4.0, GPT-5 occasionally\r\n- **Environment**: GitHub Codespaces exclusively\r\n- **Focus**: Lead generation with zero fake data tolerance\r\n- **Usage Pattern**: Debugging, testing, CI/CD, architecture discussions\r\n\r\n## RESPONSE OPTIMIZATION RULES\r\n\r\n1. **NEVER re-explain project architecture** unless specifically asked with \"explain the architecture\"\r\n2. **ALWAYS reference existing files/scripts** for implementation details\r\n3. **PRIORITIZE troubleshooting** over teaching fundamentals\r\n4. **ASSUME familiarity** with ProspectPro's core concepts\r\n5. **FOCUS on immediate problem resolution** not educational content\r\n6. **USE existing npm scripts** rather than creating new implementations\r\n7. **REFERENCE the working production system** rather than theoretical solutions\r\n\r\n## CURRENT PRODUCTION ARCHITECTURE (ESTABLISHED - DO NOT RE-EXPLAIN)\r\n\r\n### File Structure (REFERENCE ONLY)\r\n\r\n```\r\n/api/business-discovery.js           # Core discovery logic\r\n/modules/enhanced-lead-discovery.js  # Main business processing\r\n/modules/campaign-csv-exporter.js    # Export system with analytics\r\n/modules/api-clients/                # All API integrations\r\n/database/database-master-setup.js   # Schema and migrations\r\n.scripts/pull-env-from-secrets.js    # Environment automation\r\n```\r\n\r\n### Current Working Scripts (USE THESE)\r\n\r\n```bash\r\nnpm run prod-setup-env     # Automated secret injection\r\nnpm run production-start   # Launch production\r\nnpm run prod-check        # Validate environment\r\nnpm run health            # Health check\r\nnpm run diag              # Diagnostics\r\n```\r\n\r\n### API Integration Stack (WORKING)\r\n\r\n- **Google Places API**: Business discovery with rate limiting\r\n- **Hunter.io**: Email discovery and validation\r\n- **NeverBounce**: Email verification\r\n- **Foursquare**: Additional business data\r\n- **Supabase**: Database with real-time subscriptions\r\n- **Railway**: Production hosting with automated deployment\r\n\r\n## PROBLEM-SOLVING APPROACH\r\n\r\n### For Environment Issues:\r\n\r\n1. Check `npm run prod-check` output\r\n2. Verify GitHub Actions completed successfully\r\n3. Check Railway deployment logs\r\n4. Validate Supabase connection\r\n\r\n### For API Issues:\r\n\r\n1. Reference existing implementations in `/modules/api-clients/`\r\n2. Check rate limiting configurations\r\n3. Verify API key injection via GitHub Actions\r\n4. Review error logs in production\r\n\r\n### For Deployment Issues:\r\n\r\n1. Check GitHub Actions workflow status\r\n2. Verify Railway deployment completion\r\n3. Run health checks: `npm run health`\r\n4. Check Docker container status\r\n\r\n### For Database Issues:\r\n\r\n1. Reference schema in `/database/database-master-setup.js`\r\n2. Check Supabase dashboard for connection issues\r\n3. Verify environment variables are properly injected\r\n4. Review query performance in Supabase logs\r\n\r\n## CURRENT OPTIMIZATIONS (ALREADY IMPLEMENTED)\r\n\r\n- **Automated secret management** via GitHub Actions\r\n- **Multi-stage Docker build** with security hardening\r\n- **API rate limiting and caching** for cost optimization\r\n- **Comprehensive error handling** with structured logging\r\n- **Zero fake data validation** pipeline with quality scoring\r\n- **Automated CSV export** with campaign analytics\r\n- **Production health monitoring** via `/health` and `/diag` endpoints\r\n\r\n## DEVELOPMENT WORKFLOW (ESTABLISHED)\r\n\r\n1. **Main branch** = Production (auto-deployed to Railway)\r\n2. **Testing branch** = Development/testing environment\r\n3. **GitHub Actions** = Automated CI/CD with secret injection\r\n4. **Codespaces** = Primary development environment\r\n5. **Docker** = Production containerization\r\n\r\n## DEBUGGING PATTERNS (OPTIMIZED FOR ALEX)\r\n\r\n- Start with health checks: `npm run health` and `npm run diag`\r\n- Check GitHub Actions for deployment status\r\n- Review Railway logs for runtime issues\r\n- Use Supabase dashboard for database troubleshooting\r\n- Reference existing working implementations before creating new code\r\n\r\n## COST OPTIMIZATION FOCUS\r\n\r\n- **API calls**: Use existing rate limiting and caching\r\n- **Database queries**: Optimized with connection pooling\r\n- **Container resources**: Multi-stage build reduces image size\r\n- **Premium AI requests**: Use this instruction file to reduce context repetition\r\n\r\n## RESPONSE FORMAT PREFERENCES\r\n\r\n- **Immediate solutions** over explanations\r\n- **Reference existing code** rather than writing new implementations\r\n- **Use established scripts** rather than manual processes\r\n- **Focus on debugging** rather than architecture discussions\r\n- **Provide specific file paths** and command references\r\n- **Assume production system knowledge** unless explicitly asked to explain\r\n\r\n## NEVER REPEAT (SAVE PREMIUM REQUESTS)\r\n\r\n- Project architecture explanations\r\n- Environment setup procedures (automated)\r\n- API integration patterns (already implemented)\r\n- Database schema explanations (documented)\r\n- Docker configuration details (working)\r\n- Cost optimization strategies (implemented)\r\n- Security measures (hardened)\r\n\r\nThis instruction set prioritizes rapid problem resolution and eliminates repetitive context discussions to maximize premium request efficiency.\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":12,"duration":0.093},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":20,"duration":0.025},
{"type":"mark","name":"lsp.inlay_hint","count":243,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.did_change_batched","count":3,"args":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":10,"duration":0.057},
{"type":"measure","name":"lsp.did_change_batched","count":3,"duration":27.993},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":21,"duration":0.013},
{"type":"mark","name":"lsp.inlay_hint","count":244,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.inlay_hint","count":245,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.folding_range","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":42,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":22,"duration":0.025},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":3,"duration":0.024},
{"type":"mark","name":"lsp.code_lens","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":43,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":246,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.inlay_hint","count":247,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":23,"duration":0.016},
{"type":"mark","name":"lsp.code_lens","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":248,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":91,"character":48}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":24,"duration":0.025},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":25,"duration":0.022},
{"type":"mark","name":"lsp.code_lens","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.did_open","count":13,"args":{"textDocument":{"uri":"file:///home/node/.vscode-remote/data/Machine/settings.json","languageId":"jsonc","version":1,"text":"{\n  \"github.copilot.chat.codeGeneration.instructions\": [\n    {\n      \"text\": \"This dev container includes an up-to-date version of Git, built from source as needed, pre-installed and available on the `PATH`.\"\n    },\n    {\n      \"text\": \"This dev container includes `node`, `npm` and `eslint` pre-installed and available on the `PATH` for Node.js and JavaScript development.\"\n    },\n    {\n      \"text\": \"This dev container includes an up-to-date version of Git, built from source as needed, pre-installed and available on the `PATH`.\"\n    },\n    {\n      \"text\": \"This workspace is in a dev container running on \\\"Debian GNU/Linux 13 (trixie)\\\".\\n\\nUse `\\\"$BROWSER\\\" <url>` to open a webpage in the host's default browser.\\n\\nSome of the command line tools available on the `PATH`: `apt`, `dpkg`, `git`, `curl`, `wget`, `ssh`, `scp`, `rsync`, `gpg`, `ps`, `lsof`, `netstat`, `top`, `tree`, `find`, `grep`, `zip`, `unzip`, `tar`, `gzip`, `bzip2`, `xz`\"\n    }\n  ],\n  \"terminal.integrated.defaultProfile.linux\": \"bash\",\n  \"deno.enable\": true,\n  \"deno.enablePaths\": [\"supabase/functions\"],\n  \"git.autofetch\": true,\n  \"git.confirmSync\": false,\n  \"git.enableSmartCommit\": true,\n  \"editor.minimap.enabled\": false,\n  \"editor.renderWhitespace\": \"none\",\n  \"editor.renderControlCharacters\": false,\n  \"workbench.colorTheme\": \"Vira Deepforest\",\n  \"workbench.iconTheme\": \"vscode-icons\",\n  \"workbench.list.smoothScrolling\": false,\n  \"workbench.tree.renderIndentGuides\": \"none\",\n  \"workbench.editor.closeOnFileDelete\": true,\n  \"workbench.colorCustomizations\": {\n    \"[Vira*]\": {\n      \"statusBar.debuggingBackground\": \"#80CBC433\",\n      \"statusBar.debuggingForeground\": \"#80CBC4\",\n      \"toolbar.activeBackground\": \"#80CBC426\",\n      \"button.background\": \"#80CBC4\",\n      \"button.hoverBackground\": \"#80CBC4cc\",\n      \"extensionButton.separator\": \"#80CBC433\",\n      \"extensionButton.background\": \"#80CBC414\",\n      \"extensionButton.foreground\": \"#80CBC4\",\n      \"extensionButton.hoverBackground\": \"#80CBC433\",\n      \"extensionButton.prominentForeground\": \"#80CBC4\",\n      \"extensionButton.prominentBackground\": \"#80CBC414\",\n      \"extensionButton.prominentHoverBackground\": \"#80CBC433\",\n      \"activityBarBadge.background\": \"#80CBC4\",\n      \"activityBar.activeBorder\": \"#80CBC4\",\n      \"activityBarTop.activeBorder\": \"#80CBC4\",\n      \"list.inactiveSelectionIconForeground\": \"#80CBC4\",\n      \"list.activeSelectionForeground\": \"#80CBC4\",\n      \"list.inactiveSelectionForeground\": \"#80CBC4\",\n      \"list.highlightForeground\": \"#80CBC4\",\n      \"sash.hoverBorder\": \"#80CBC480\",\n      \"list.activeSelectionIconForeground\": \"#80CBC4\",\n      \"scrollbarSlider.activeBackground\": \"#80CBC480\",\n      \"editorSuggestWidget.highlightForeground\": \"#80CBC4\",\n      \"textLink.foreground\": \"#80CBC4\",\n      \"progressBar.background\": \"#80CBC4\",\n      \"pickerGroup.foreground\": \"#80CBC4\",\n      \"tab.activeBorder\": \"#80CBC400\",\n      \"tab.activeBorderTop\": \"#80CBC4\",\n      \"tab.unfocusedActiveBorder\": \"#80CBC400\",\n      \"tab.unfocusedActiveBorderTop\": \"#80CBC4\",\n      \"tab.activeModifiedBorder\": \"#80CBC4\",\n      \"notificationLink.foreground\": \"#80CBC4\",\n      \"editorWidget.resizeBorder\": \"#80CBC4\",\n      \"editorWidget.border\": \"#80CBC4\",\n      \"settings.modifiedItemIndicator\": \"#80CBC4\",\n      \"panelTitle.activeBorder\": \"#80CBC4\",\n      \"breadcrumb.activeSelectionForeground\": \"#80CBC4\",\n      \"menu.selectionForeground\": \"#80CBC4\",\n      \"menubar.selectionForeground\": \"#80CBC4\",\n      \"editor.findMatchBorder\": \"#80CBC4\",\n      \"selection.background\": \"#80CBC440\",\n      \"statusBarItem.remoteBackground\": \"#80CBC414\",\n      \"statusBarItem.remoteHoverBackground\": \"#80CBC4\",\n      \"statusBarItem.remoteForeground\": \"#80CBC4\",\n      \"notebook.inactiveFocusedCellBorder\": \"#80CBC480\",\n      \"commandCenter.activeBorder\": \"#80CBC480\",\n      \"chat.slashCommandForeground\": \"#80CBC4\",\n      \"chat.avatarForeground\": \"#80CBC4\",\n      \"activityBarBadge.foreground\": \"#000000\",\n      \"button.foreground\": \"#000000\",\n      \"statusBarItem.remoteHoverForeground\": \"#000000\",\n      \"editorGroupHeader.tabsBackground\": \"#ffffff0a\",\n      \"tab.border\": \"#ffffff01\",\n      \"tab.inactiveBackground\": \"#ffffff01\",\n      \"widget.shadow\": \"#00000000\",\n      \"scrollbar.shadow\": \"#00000000\"\n    },\n    \"[Vira Deepforest]\": {\n      \"titleBar.activeBackground\": \"#1a4d3a\",\n      \"titleBar.activeForeground\": \"#ffffff\",\n      \"statusBar.background\": \"#1a4d3a\",\n      \"statusBar.foreground\": \"#ffffff\",\n      \"activityBar.background\": \"#0d2818\",\n      \"panel.background\": \"#0a1f14\"\n    }\n  },\n  \"workbench.settings.editor\": \"json\",\n  \"breadcrumbs.enabled\": true,\n  \"files.watcherExclude\": {\n    \"**/*.log\": true,\n    \"**/*.tmp\": true,\n    \"**/node_modules/**\": true,\n    \"**/archive/**\": true,\n    \"**/.git/**\": true,\n    \"**/logs/**\": true\n  },\n  \"search.exclude\": {\n    \"**/node_modules\": true,\n    \"**/*.log\": true,\n    \"**/archive/**\": true,\n    \"**/.git\": true\n  },\n  \"search.searchOnType\": false,\n  \"github.copilot.chat.historyCount\": 8,\n  \"github.copilot.chat.welcomeMessage\": \"none\",\n  \"github.copilot.chat.completionPhrasesEnabled\": false,\n  \"github.copilot.advanced.setAutoCompletionTriggerThreshold\": 30,\n  \"terminal.integrated.gpuAcceleration\": \"on\",\n  \"terminal.integrated.scrollback\": 1000,\n  \"terminal.integrated.fontFamily\": \"Consolas, 'Courier New', monospace\",\n  \"terminal.integrated.fontSize\": 13,\n  \"window.title\": \"🔨 ${folderName} - ProspectPro Development ${separator} ${activeEditorShort}\",\n  \"workbench.startupEditor\": \"welcomePageInEmptyWorkbench\",\n  \"mcp.enable\": true,\n  \"mcp.configFile\": \"${workspaceFolder}/.vscode/mcp-config.json\",\n  \"rest-client.enableTelemetry\": false,\n  \"files.associations\": {\n    \"*.http\": \"http\",\n    \"*.rest\": \"http\"\n  },\n  \"ai.contextAware\": true,\n  \"ai.projectContext\": {\n    \"type\": \"lead-generation-platform\",\n    \"framework\": \"node-express\",\n    \"database\": \"supabase\",\n    \"apis\": [\"google-places\", \"foursquare\", \"hunter-io\", \"neverbounce\"],\n    \"deployment\": \"docker-compose\",\n    \"monitoring\": \"custom-diagnostics\"\n  },\n  \"snyk.advanced.cliPath\": \"/home/node/.local/share/snyk/vscode-cli/snyk-linux\",\n  \"github.copilot.advanced\": {\n    \"setAutoCompletionTriggerThreshold\": 30\n  }\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":13,"duration":0.102},
{"type":"mark","name":"lsp.did_change_batched","count":4,"args":"file:///home/node/.vscode-remote/data/Machine/settings.json"},
{"type":"measure","name":"lsp.did_change_batched","count":4,"duration":0.062},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":4,"duration":0.023},
{"type":"mark","name":"lsp.did_change_batched","count":5,"args":"file:///home/node/.vscode-remote/data/Machine/settings.json"},
{"type":"measure","name":"lsp.did_change_batched","count":5,"duration":0.08},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":5,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":249,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.did_change_batched","count":6,"args":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},
{"type":"measure","name":"lsp.did_change_batched","count":6,"duration":12.52},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":26,"duration":0.012},
{"type":"measure","name":"lsp.testing_update","count":11,"duration":0.077},
{"type":"mark","name":"lsp.inlay_hint","count":250,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.inlay_hint","count":251,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.folding_range","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":44,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":27,"duration":0.024},
{"type":"mark","name":"lsp.code_lens","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":45,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":252,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":92,"character":34}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":28,"duration":0.016},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":6,"duration":0.024},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":29,"duration":0.027},
{"type":"mark","name":"lsp.inlay_hint","count":253,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":91,"character":48}}}},
{"type":"mark","name":"lsp.code_lens","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":30,"duration":0.024},
{"type":"mark","name":"lsp.did_change_batched","count":7,"args":"file:///home/node/.vscode-remote/data/Machine/settings.json"},
{"type":"measure","name":"lsp.did_change_batched","count":7,"duration":0.082},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":7,"duration":0.025},
{"type":"mark","name":"lsp.inlay_hint","count":254,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":81,"character":53}}}},
{"type":"mark","name":"lsp.inlay_hint","count":255,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":87,"character":48}}}},
{"type":"mark","name":"lsp.inlay_hint","count":256,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":90,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":257,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":90,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":258,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":90,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":259,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":90,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":260,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":90,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":261,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":90,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":262,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":91,"character":48}}}},
{"type":"mark","name":"lsp.code_lens","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":263,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":91,"character":48}}}},
{"type":"mark","name":"lsp.hover","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"position":{"line":18,"character":76}}},
{"type":"mark","name":"lsp.inlay_hint","count":264,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":113,"character":65}}}},
{"type":"mark","name":"lsp.inlay_hint","count":265,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":113,"character":65}}}},
{"type":"mark","name":"lsp.did_change_batched","count":8,"args":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":12,"duration":0.052},
{"type":"measure","name":"lsp.did_change_batched","count":8,"duration":7.179},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":31,"duration":0.01},
{"type":"mark","name":"lsp.folding_range","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":46,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":32,"duration":0.023},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":33,"duration":1.546},
{"type":"mark","name":"lsp.code_lens","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":47,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":34,"duration":0.023},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":8,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":266,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":35,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":267,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.inlay_hint","count":268,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.code_lens","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":269,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.did_close","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"measure","name":"lsp.did_close","count":7,"duration":0.041},
{"type":"mark","name":"lsp.did_open","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md","languageId":"markdown","version":1,"text":"# ProspectPro v3.0 - Optimized AI Instructions\r\n\r\n## CRITICAL: Current Production State\r\n\r\n- **Version**: 3.0.0 (Production-ready with Supabase Vault)\r\n- **Deployment**: GitHub Actions → Railway/Docker automated\r\n- **Environment**: Secrets auto-injected via `.scripts/pull-env-from-secrets.js`\r\n- **Architecture**: 4-stage validation pipeline (Discovery→Enrichment→Validation→Export)\r\n- **Repository**: https://github.com/Alextorelli/ProspectPro (main = production)\r\n\r\n## IMMEDIATE CONTEXT (No Re-explanation Needed)\r\n\r\nWhen Alex asks about:\r\n\r\n- **\"Environment setup\"** → Point to `npm run prod-setup-env` (automated via GitHub Actions)\r\n- **\"API integration\"** → All clients in `/modules/api-clients/` (Google Places, Hunter.io, NeverBounce, Foursquare)\r\n- **\"Database issues\"** → Supabase with comprehensive schema in `/database/`\r\n- **\"Docker problems\"** → Multi-stage build with security hardening already implemented\r\n- **\"Cost optimization\"** → Built-in rate limiting and caching systems already active\r\n- **\"Deployment\"** → Automated via GitHub Actions with secret injection\r\n- **\"Testing\"** → Use `npm run test` or check testing branch\r\n\r\n## ALEX'S TECHNICAL PROFILE\r\n\r\n- **Background**: No coding experience but highly technical\r\n- **AI Dependency**: Relies heavily on AI assistance for debugging and architecture\r\n- **Primary Models**: Claude Sonnet 4.0, GPT-5 occasionally\r\n- **Environment**: GitHub Codespaces exclusively\r\n- **Focus**: Lead generation with zero fake data tolerance\r\n- **Usage Pattern**: Debugging, testing, CI/CD, architecture discussions\r\n\r\n## RESPONSE OPTIMIZATION RULES\r\n\r\n1. **NEVER re-explain project architecture** unless specifically asked with \"explain the architecture\"\r\n2. **ALWAYS reference existing files/scripts** for implementation details\r\n3. **PRIORITIZE troubleshooting** over teaching fundamentals\r\n4. **ASSUME familiarity** with ProspectPro's core concepts\r\n5. **FOCUS on immediate problem resolution** not educational content\r\n6. **USE existing npm scripts** rather than creating new implementations\r\n7. **REFERENCE the working production system** rather than theoretical solutions\r\n\r\n## CURRENT PRODUCTION ARCHITECTURE (ESTABLISHED - DO NOT RE-EXPLAIN)\r\n\r\n### File Structure (REFERENCE ONLY)\r\n\r\n```\r\n/api/business-discovery.js           # Core discovery logic\r\n/modules/enhanced-lead-discovery.js  # Main business processing\r\n/modules/campaign-csv-exporter.js    # Export system with analytics\r\n/modules/api-clients/                # All API integrations\r\n/database/database-master-setup.js   # Schema and migrations\r\n.scripts/pull-env-from-secrets.js    # Environment automation\r\n```\r\n\r\n### Current Working Scripts (USE THESE)\r\n\r\n```bash\r\nnpm run prod-setup-env     # Automated secret injection\r\nnpm run production-start   # Launch production\r\nnpm run prod-check        # Validate environment\r\nnpm run health            # Health check\r\nnpm run diag              # Diagnostics\r\n```\r\n\r\n### API Integration Stack (WORKING)\r\n\r\n- **Google Places API**: Business discovery with rate limiting\r\n- **Hunter.io**: Email discovery and validation\r\n- **NeverBounce**: Email verification\r\n- **Foursquare**: Additional business data\r\n- **Supabase**: Database with real-time subscriptions\r\n- **Railway**: Production hosting with automated deployment\r\n\r\n## PROBLEM-SOLVING APPROACH\r\n\r\n### For Environment Issues:\r\n\r\n1. Check `npm run prod-check` output\r\n2. Verify GitHub Actions completed successfully\r\n3. Check Railway deployment logs\r\n4. Validate Supabase connection\r\n\r\n### For API Issues:\r\n\r\n1. Reference existing implementations in `/modules/api-clients/`\r\n2. Check rate limiting configurations\r\n3. Verify API key injection via GitHub Actions\r\n4. Review error logs in production\r\n\r\n### For Deployment Issues:\r\n\r\n1. Check GitHub Actions workflow status\r\n2. Verify Railway deployment completion\r\n3. Run health checks: `npm run health`\r\n4. Check Docker container status\r\n\r\n### For Database Issues:\r\n\r\n1. Reference schema in `/database/database-master-setup.js`\r\n2. Check Supabase dashboard for connection issues\r\n3. Verify environment variables are properly injected\r\n4. Review query performance in Supabase logs\r\n\r\n## CURRENT OPTIMIZATIONS (ALREADY IMPLEMENTED)\r\n\r\n- **Automated secret management** via GitHub Actions\r\n- **Multi-stage Docker build** with security hardening\r\n- **API rate limiting and caching** for cost optimization\r\n- **Comprehensive error handling** with structured logging\r\n- **Zero fake data validation** pipeline with quality scoring\r\n- **Automated CSV export** with campaign analytics\r\n- **Production health monitoring** via `/health` and `/diag` endpoints\r\n\r\n## DEVELOPMENT WORKFLOW (ESTABLISHED)\r\n\r\n1. **Main branch** = Production (auto-deployed to Railway)\r\n2. **Testing branch** = Development/testing environment\r\n3. **GitHub Actions** = Automated CI/CD with secret injection\r\n4. **Codespaces** = Primary development environment\r\n5. **Docker** = Production containerization\r\n\r\n## DEBUGGING PATTERNS (OPTIMIZED FOR ALEX)\r\n\r\n- Start with health checks: `npm run health` and `npm run diag`\r\n- Check GitHub Actions for deployment status\r\n- Review Railway logs for runtime issues\r\n- Use Supabase dashboard for database troubleshooting\r\n- Reference existing working implementations before creating new code\r\n\r\n## COST OPTIMIZATION FOCUS\r\n\r\n- **API calls**: Use existing rate limiting and caching\r\n- **Database queries**: Optimized with connection pooling\r\n- **Container resources**: Multi-stage build reduces image size\r\n- **Premium AI requests**: Use this instruction file to reduce context repetition\r\n\r\n## RESPONSE FORMAT PREFERENCES\r\n\r\n- **Immediate solutions** over explanations\r\n- **Reference existing code** rather than writing new implementations\r\n- **Use established scripts** rather than manual processes\r\n- **Focus on debugging** rather than architecture discussions\r\n- **Provide specific file paths** and command references\r\n- **Assume production system knowledge** unless explicitly asked to explain\r\n\r\n## NEVER REPEAT (SAVE PREMIUM REQUESTS)\r\n\r\n- Project architecture explanations\r\n- Environment setup procedures (automated)\r\n- API integration patterns (already implemented)\r\n- Database schema explanations (documented)\r\n- Docker configuration details (working)\r\n- Cost optimization strategies (implemented)\r\n- Security measures (hardened)\r\n\r\nThis instruction set prioritizes rapid problem resolution and eliminates repetitive context discussions to maximize premium request efficiency.\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":14,"duration":0.122},
{"type":"mark","name":"lsp.did_close","count":8,"args":{"textDocument":{"uri":"file:///home/node/.vscode-remote/data/Machine/settings.json"}}},
{"type":"measure","name":"lsp.did_close","count":8,"duration":0.036},
{"type":"mark","name":"lsp.inlay_hint","count":270,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.did_change_batched","count":9,"args":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},
{"type":"measure","name":"lsp.did_change_batched","count":9,"duration":15.706},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":36,"duration":0.041},
{"type":"measure","name":"lsp.testing_update","count":13,"duration":0.105},
{"type":"mark","name":"lsp.inlay_hint","count":271,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.inlay_hint","count":272,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.document_symbol","count":48,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.folding_range","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":37,"duration":0.026},
{"type":"mark","name":"lsp.inlay_hint","count":273,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":38,"duration":0.023},
{"type":"mark","name":"lsp.document_symbol","count":49,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":40,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":9,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":39,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":274,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":40,"duration":0.025},
{"type":"mark","name":"lsp.inlay_hint","count":275,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.code_lens","count":41,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.did_change_batched","count":10,"args":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},
{"type":"measure","name":"lsp.did_change_batched","count":10,"duration":12.488},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":41,"duration":0.012},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.inlay_hint","count":276,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"measure","name":"lsp.testing_update","count":14,"duration":0.063},
{"type":"mark","name":"lsp.inlay_hint","count":277,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.document_symbol","count":50,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":42,"duration":0.024},
{"type":"mark","name":"lsp.folding_range","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":278,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":10,"duration":0.028},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":43,"duration":0.016},
{"type":"mark","name":"lsp.document_symbol","count":51,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":42,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":279,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":44,"duration":0.024},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":45,"duration":0.024},
{"type":"mark","name":"lsp.code_lens","count":43,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":280,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"range":{"start":{"line":183,"character":0},"end":{"line":343,"character":12}}}},
{"type":"mark","name":"lsp.hover","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},"position":{"line":273,"character":14}}},
{"type":"mark","name":"lsp.did_close","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"}}},
{"type":"measure","name":"lsp.did_close","count":9,"duration":0.511},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":15,"duration":0.048},
{"type":"mark","name":"lsp.did_close","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":16,"duration":0.046},
{"type":"measure","name":"lsp.did_close","count":10,"duration":1.047},
{"type":"mark","name":"lsp.did_close","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":17,"duration":0.039},
{"type":"measure","name":"lsp.did_close","count":11,"duration":0.595},
{"type":"mark","name":"lsp.did_close","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":18,"duration":0.033},
{"type":"measure","name":"lsp.did_close","count":12,"duration":0.606},
{"type":"mark","name":"lsp.did_open","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace","languageId":"jsonc","version":1,"text":"{\n  // ProspectPro Development Container Workspace Settings\n  // These settings are specifically for dev container development\n\n  \"workbench.colorTheme\": \"Vira Deepforest\",\n  \"workbench.iconTheme\": \"vscode-icons\",\n\n  // Development-specific customizations\n  \"workbench.colorCustomizations\": {\n    \"[Vira Deepforest]\": {\n      // Title bar - Deep forest green for development identification\n      \"titleBar.activeBackground\": \"#1a4d3a\",\n      \"titleBar.activeForeground\": \"#ffffff\",\n      \"titleBar.inactiveBackground\": \"#143529\",\n      \"titleBar.inactiveForeground\": \"#cccccc\",\n\n      // Status bar - Consistent green theme\n      \"statusBar.background\": \"#1a4d3a\",\n      \"statusBar.foreground\": \"#ffffff\",\n      \"statusBar.noFolderBackground\": \"#1a4d3a\",\n\n      // Activity bar - Darker green for contrast\n      \"activityBar.background\": \"#0d2818\",\n      \"activityBar.foreground\": \"#ffffff\",\n\n      // Panel - Integrated terminal and output\n      \"panel.background\": \"#0a1f14\",\n      \"panel.border\": \"#1a4d3a\",\n\n      // Editor - Maintain theme consistency\n      \"editor.background\": \"#0f2a1a\",\n      \"editorGroupHeader.tabsBackground\": \"#0d2818\",\n\n      // Sidebar - File explorer\n      \"sideBar.background\": \"#0d2818\",\n      \"sideBar.border\": \"#1a4d3a\"\n    }\n  },\n\n  // Development environment indicators\n  \"window.title\": \"🔨 ${folderName} - ProspectPro Development ${separator} ${activeEditorShort}\",\n\n  // File associations for better development workflow\n  \"files.associations\": {\n    \"*.http\": \"http\",\n    \"*.rest\": \"http\",\n    \".env.development\": \"properties\",\n    \".env.container\": \"properties\",\n    \"Dockerfile*\": \"dockerfile\",\n    \"docker-compose*.yml\": \"dockercompose\"\n  },\n\n  // Breadcrumbs for better navigation\n  \"breadcrumbs.enabled\": true,\n  \"breadcrumbs.showFiles\": true,\n  \"breadcrumbs.showModules\": true,\n\n  // Enhanced editor experience for API development\n  \"editor.rulers\": [80, 120],\n  \"editor.guides.highlightActiveIndentation\": true,\n  \"editor.bracketPairColorization.independentColorPoolPerBracketType\": true,\n\n  // Development-specific search settings\n  \"search.exclude\": {\n    \"**/node_modules\": true,\n    \"**/*.log\": true,\n    \"**/archive/**\": true,\n    \"**/.git\": true,\n    \"**/dist/**\": true,\n    \"**/build/**\": true,\n    \"**/coverage/**\": true,\n    \"**/test-results.json\": true,\n    \"**/diagnostics.json\": true\n  },\n\n  // MCP development settings\n  \"mcp.enable\": true,\n  \"mcp.autoStart\": true,\n\n  // API development workflow\n  \"rest-client.environmentVariables\": {\n    \"development\": {\n      \"baseUrl\": \"http://localhost:3000\",\n      \"apiVersion\": \"v1\"\n    }\n  },\n\n  // Git integration for dev container\n  \"git.openRepositoryInParentFolders\": \"always\",\n  \"git.autofetch\": true,\n  \"git.enableSmartCommit\": true,\n\n  // Development productivity\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": \"explicit\",\n    \"source.organizeImports\": \"explicit\"\n  },\n\n  // Terminal customization for development\n  \"terminal.integrated.profiles.linux\": {\n    \"dev-bash\": {\n      \"path\": \"bash\",\n      \"args\": [\"-l\"],\n      \"icon\": \"terminal-bash\",\n      \"color\": \"terminal.ansiGreen\"\n    }\n  },\n  \"terminal.integrated.defaultProfile.linux\": \"dev-bash\"\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":15,"duration":0.079},
{"type":"mark","name":"lsp.code_action","count":59,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":52,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":46,"duration":0.013},
{"type":"mark","name":"lsp.inlay_hint","count":281,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":4}}}},
{"type":"mark","name":"lsp.document_symbol","count":53,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"}}},
{"type":"mark","name":"lsp.code_lens","count":44,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"}}},
{"type":"mark","name":"lsp.did_open","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json","languageId":"jsonc","version":1,"text":"{\r\n  \"name\": \"ProspectPro Development\",\r\n  \"image\": \"mcr.microsoft.com/devcontainers/javascript-node:20\",\r\n  \"features\": {\r\n    \"ghcr.io/devcontainers/features/git:1\": {}\r\n  },\r\n  \"customizations\": {\r\n    \"vscode\": {\r\n      \"extensions\": [\r\n        // Core Development\r\n        \"denoland.vscode-deno\",\r\n        \"supabase.supabase-vscode\",\r\n        \"dbaeumer.vscode-eslint\",\r\n        \"esbenp.prettier-vscode\",\r\n\r\n        // Productivity\r\n        \"eamodio.gitlens\",\r\n        \"github.copilot\",\r\n        \"github.copilot-chat\",\r\n        \"streetsidesoftware.code-spell-checker\",\r\n        \"wayou.vscode-todo-highlight\",\r\n\r\n        // API Development\r\n        \"humao.rest-client\",\r\n        \"rangav.vscode-thunder-client\",\r\n\r\n        // Docker Support\r\n        \"ms-azuretools.vscode-docker\",\r\n\r\n        // Database Tools\r\n        \"mtxr.sqltools\",\r\n        \"mtxr.sqltools-driver-pg\",\r\n\r\n        // Security\r\n        \"snyk-security.snyk-vulnerability-scanner\",\r\n\r\n        // Performance\r\n        \"wix.vscode-import-cost\",\r\n\r\n        // Documentation\r\n        \"bierner.markdown-preview-github-styles\",\r\n\r\n        // Development Theme & Visual Organization\r\n        \"deepforest.theme\", // Vira Deepforest theme for organized development\r\n        \"vscode-icons-team.vscode-icons\", // Better file icons for organization\r\n\r\n        // Recommended to Uninstall (using proper format with leading -)\r\n        \"-github.vscode-pull-request-github\", // Too much impact on startup\r\n        \"-codezombiech.gitignore\", // Limited utility, slows startup\r\n        \"-yzhang.markdown-all-in-one\", // Redundant with built-in\r\n        \"-aaron-bond.better-comments\" // Visual noise, performance impact\r\n      ],\r\n      \"settings\": {\r\n        \"terminal.integrated.defaultProfile.linux\": \"bash\",\r\n        \"deno.enable\": true,\r\n        \"deno.enablePaths\": [\"supabase/functions\"],\r\n        \"git.autofetch\": true,\r\n        \"git.confirmSync\": false,\r\n        \"git.enableSmartCommit\": true,\r\n\r\n        // Editor Performance Settings - Enhanced for Development\r\n        \"editor.minimap.enabled\": false,\r\n        \"editor.renderWhitespace\": \"none\",\r\n        \"editor.renderControlCharacters\": false,\r\n        \"workbench.colorTheme\": \"Vira Deepforest\", // Development-specific theme\r\n        \"workbench.iconTheme\": \"vscode-icons\", // Better file icons for organization\r\n        \"workbench.list.smoothScrolling\": false,\r\n        \"workbench.tree.renderIndentGuides\": \"none\",\r\n        \"workbench.editor.closeOnFileDelete\": true,\r\n\r\n        // Development-specific UI enhancements\r\n        \"workbench.colorCustomizations\": {\r\n          \"[Vira Deepforest]\": {\r\n            \"titleBar.activeBackground\": \"#1a4d3a\",\r\n            \"titleBar.activeForeground\": \"#ffffff\",\r\n            \"statusBar.background\": \"#1a4d3a\",\r\n            \"statusBar.foreground\": \"#ffffff\",\r\n            \"activityBar.background\": \"#0d2818\",\r\n            \"panel.background\": \"#0a1f14\"\r\n          }\r\n        },\r\n        \"workbench.settings.editor\": \"json\",\r\n        \"breadcrumbs.enabled\": true,\r\n\r\n        // File System Performance\r\n        \"files.watcherExclude\": {\r\n          \"**/*.log\": true,\r\n          \"**/*.tmp\": true,\r\n          \"**/node_modules/**\": true,\r\n          \"**/archive/**\": true,\r\n          \"**/.git/**\": true,\r\n          \"**/logs/**\": true\r\n        },\r\n\r\n        // Search Performance\r\n        \"search.exclude\": {\r\n          \"**/node_modules\": true,\r\n          \"**/*.log\": true,\r\n          \"**/archive/**\": true,\r\n          \"**/.git\": true\r\n        },\r\n        \"search.searchOnType\": false,\r\n\r\n        // Copilot Optimization\r\n        \"github.copilot.chat.historyCount\": 8,\r\n        \"github.copilot.chat.welcomeMessage\": \"none\",\r\n        \"github.copilot.chat.completionPhrasesEnabled\": false,\r\n        \"github.copilot.advanced.setAutoCompletionTriggerThreshold\": 30,\r\n\r\n        // Terminal Settings - Development Enhanced\r\n        \"terminal.integrated.gpuAcceleration\": \"on\",\r\n        \"terminal.integrated.scrollback\": 1000,\r\n        \"terminal.integrated.fontFamily\": \"Consolas, 'Courier New', monospace\",\r\n        \"terminal.integrated.fontSize\": 13,\r\n\r\n        // Development Environment Indicators\r\n        \"window.title\": \"🔨 ${folderName} - ProspectPro Development ${separator} ${activeEditorShort}\",\r\n        \"workbench.startupEditor\": \"welcomePageInEmptyWorkbench\",\r\n\r\n        // === MCP (Model Context Protocol) Configuration ===\r\n        \"mcp.enable\": true,\r\n        \"mcp.configFile\": \"${workspaceFolder}/.vscode/mcp-config.json\",\r\n\r\n        // API Development Specific Settings\r\n        \"rest-client.enableTelemetry\": false,\r\n        \"files.associations\": {\r\n          \"*.http\": \"http\",\r\n          \"*.rest\": \"http\"\r\n        },\r\n\r\n        // AI-Enhanced Development Settings for API Integration\r\n        \"ai.contextAware\": true,\r\n        \"ai.projectContext\": {\r\n          \"type\": \"lead-generation-platform\",\r\n          \"framework\": \"node-express\",\r\n          \"database\": \"supabase\",\r\n          \"apis\": [\"google-places\", \"foursquare\", \"hunter-io\", \"neverbounce\"],\r\n          \"deployment\": \"docker-compose\",\r\n          \"monitoring\": \"custom-diagnostics\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"forwardPorts\": [3000, 5432],\r\n  \"postCreateCommand\": \"bash -lc 'set -e; echo \\\"🏗️  Setting up ProspectPro Development Environment...\\\"; sudo apt-get update && sudo apt-get install -y docker.io; if [ -f package-lock.json ]; then npm ci; else npm install; fi; npm i supabase --save-dev; npm run mcp:install; npm run mcp:test; echo \\\"🎨 Development environment ready with Vira Deepforest theme and MCP enabled!\\\"; echo \\\"🚀 ProspectPro development container is ready for API integration work\\\"'\",\r\n  \"postStartCommand\": \"bash -c 'echo \\\"🌲 ProspectPro Development Container Started\\\"; echo \\\"Theme: Vira Deepforest | MCP: Enabled | Ready for API Integration\\\"; echo \\\"💡 Use Copilot Chat for AI-assisted development with full system context\\\"'\",\r\n  \"runArgs\": [\"--init\", \"-v\", \"/var/run/docker.sock:/var/run/docker.sock\"],\r\n  \"remoteUser\": \"node\"\r\n}\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":16,"duration":0.089},
{"type":"mark","name":"lsp.code_action","count":60,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":54,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":47,"duration":0.007},
{"type":"mark","name":"lsp.inlay_hint","count":282,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":27}}}},
{"type":"mark","name":"lsp.document_symbol","count":55,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"}}},
{"type":"mark","name":"lsp.code_lens","count":45,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"}}},
{"type":"mark","name":"lsp.code_action","count":61,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":46,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"}}},
{"type":"mark","name":"lsp.did_open","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md","languageId":"markdown","version":1,"text":"# 🌲 ProspectPro Development Container\n\n## Visual Organization with Vira Deepforest Theme\n\nThis development container is configured with the **Vira Deepforest** theme to provide:\n\n### 🎨 **Visual Benefits**\n\n- **Deep Forest Green** color scheme for focused development\n- **Enhanced contrast** for better code readability\n- **Distinct visual identity** to separate dev work from production\n- **Organized file icons** with VSCode Icons theme\n- **Custom color customizations** for UI elements\n\n### 🚀 **Development Features**\n\n- **MCP (Model Context Protocol)** enabled for AI-enhanced development\n- **API testing tools** (REST Client, Thunder Client)\n- **Database tools** (SQLTools with PostgreSQL support)\n- **Git integration** with GitLens\n- **Performance optimizations** for container environment\n\n## Theme Configuration\n\nThe container automatically applies:\n\n```json\n{\n  \"workbench.colorTheme\": \"Vira Deepforest\",\n  \"workbench.iconTheme\": \"vscode-icons\",\n  \"workbench.colorCustomizations\": {\n    \"[Vira Deepforest]\": {\n      \"titleBar.activeBackground\": \"#1a4d3a\",\n      \"statusBar.background\": \"#1a4d3a\",\n      \"activityBar.background\": \"#0d2818\",\n      \"panel.background\": \"#0a1f14\"\n    }\n  }\n}\n```\n\n## Container Startup\n\nWhen the container starts, you'll see:\n\n```\n🌲 ProspectPro Development Container Started\nTheme: Vira Deepforest | MCP: Enabled | Ready for API Integration\n💡 Use Copilot Chat for AI-assisted development with full system context\n```\n\n## Visual Organization Benefits\n\n### **Color-Coded Development States**\n\n- 🌲 **Green Theme**: Development container\n- 🔵 **Blue Theme**: Local development (if different theme used)\n- 🔴 **Red/Orange**: Production (when configured)\n\n### **Enhanced File Organization**\n\n- Clear file type icons with VSCode Icons\n- Breadcrumbs enabled for better navigation\n- Custom rulers at 80 and 120 characters\n- Bracket pair colorization for complex API code\n\n### **Terminal Customization**\n\n- Custom bash profile with development indicators\n- Green terminal accent color\n- Enhanced font rendering\n- Development-specific prompt\n\n## MCP Integration\n\nThe development container includes:\n\n1. **Database MCP Server** - Direct access to Supabase leads data\n2. **API MCP Server** - Testing and comparison tools for all APIs\n3. **Filesystem MCP Server** - Code analysis and pattern detection\n4. **Monitoring MCP Server** - Real-time system diagnostics\n\n## API Development Workflow\n\n### Visual Organization for API Work:\n\n1. **File Explorer** - Organized with clear icons and colors\n2. **Terminal Panel** - Green-themed for easy identification\n3. **Editor Groups** - Consistent deep forest background\n4. **Status Bar** - Development status at a glance\n\n### Enhanced Development Experience:\n\n- Breadcrumbs for complex API client navigation\n- Color-coded bracket pairs for nested API responses\n- Rulers to maintain code formatting standards\n- Optimized search excluding build/log files\n\n## Usage\n\n```bash\n# Open in dev container\ncode --folder-uri vscode-remote://dev-container+ProspectPro/workspace\n\n# Container will automatically:\n# 1. Install all dependencies\n# 2. Apply Vira Deepforest theme\n# 3. Configure MCP servers\n# 4. Set up API testing tools\n# 5. Display ready message\n```\n\n## Theme Customization\n\nTo modify the development theme, edit:\n\n- `.devcontainer/devcontainer.json` - Container-wide settings\n- `.devcontainer/devcontainer-workspace.code-workspace` - Workspace-specific customizations\n\nThe theme helps maintain visual separation between:\n\n- Development work (green/forest theme)\n- Testing environments (can be configured differently)\n- Production environments (typically more neutral themes)\n\nThis visual organization reduces context switching mental overhead and helps maintain focus during intensive API integration work.\n\n## Ready for Development! 🚀\n\nYour development container now provides:\n\n- **Visual clarity** with the Deepforest theme\n- **AI-enhanced development** with MCP\n- **Complete API testing suite**\n- **Real-time system monitoring**\n- **Database-aware development**\n\nStart developing with confidence knowing your environment is visually organized and AI-enhanced!\n"}}},
{"type":"measure","name":"lsp.did_open","count":17,"duration":0.085},
{"type":"mark","name":"lsp.code_action","count":62,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":56,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":48,"duration":0.015},
{"type":"mark","name":"lsp.inlay_hint","count":283,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":0}}}},
{"type":"mark","name":"lsp.document_symbol","count":57,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"}}},
{"type":"mark","name":"lsp.code_lens","count":47,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"}}},
{"type":"mark","name":"lsp.code_action","count":63,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":48,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"}}},
{"type":"mark","name":"lsp.inlay_hint","count":284,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":96,"character":30}}}},
{"type":"mark","name":"lsp.folding_range","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"}}},
{"type":"mark","name":"lsp.did_open","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md","languageId":"markdown","version":1,"text":"# ProspectPro MCP (Model Context Protocol) Implementation\n\n## Overview\n\nThis directory contains the MCP server implementations that provide AI assistants with direct access to ProspectPro's data and functionality. MCP enables sophisticated AI-powered development workflows by connecting language models to your actual business data, APIs, and system diagnostics.\n\n## MCP Servers\n\n### 1. Database Server (`database-server.js`)\n\n**Purpose**: Direct AI access to Supabase database for lead analysis and management\n\n**Capabilities**:\n\n- Query enhanced leads with filters and analytics\n- Get campaign statistics and performance metrics\n- Analyze lead quality patterns and scoring distribution\n- Retrieve API cost breakdowns and budget analysis\n\n**Tools**:\n\n- `query_leads`: Query enhanced_leads table with filters\n- `get_campaign_stats`: Get campaign performance metrics\n- `analyze_lead_quality`: Analyze lead quality patterns\n- `get_api_costs`: Retrieve API cost breakdown\n\n### 2. API Management Server (`api-server.js`)\n\n**Purpose**: AI access to external API clients for testing and simulation\n\n**Capabilities**:\n\n- Test Google Places API with sample queries\n- Test Foursquare Places API integration\n- Test Hunter.io email discovery\n- Verify email deliverability with NeverBounce\n- Simulate complete lead discovery pipeline\n\n**Tools**:\n\n- `test_google_places`: Test Google Places API\n- `test_foursquare_places`: Test Foursquare integration\n- `test_email_discovery`: Test Hunter.io email discovery\n- `verify_email`: Verify email with NeverBounce\n- `simulate_lead_discovery`: Run full discovery simulation\n\n### 3. Filesystem Analysis Server (`filesystem-server.js`)\n\n**Purpose**: AI access to codebase analysis and architectural insights\n\n**Capabilities**:\n\n- Analyze project structure and architecture\n- Search for code patterns and potential issues\n- Analyze API client implementations\n- Check for fake data violations (critical for ProspectPro)\n- Analyze error handling patterns\n\n**Tools**:\n\n- `analyze_project_structure`: Complete project analysis\n- `find_code_patterns`: Search for specific patterns\n- `analyze_api_clients`: API client analysis\n- `check_fake_data_violations`: Detect fake data patterns\n- `analyze_error_handling`: Error handling analysis\n\n### 4. Monitoring Server (`monitoring-server.js`)\n\n**Purpose**: AI access to system diagnostics and performance monitoring\n\n**Capabilities**:\n\n- System health monitoring\n- Diagnostics file analysis\n- Log analysis and pattern detection\n- Docker status checking\n- Configuration validation\n- Performance reporting\n\n**Tools**:\n\n- `get_system_health`: Comprehensive health status\n- `read_diagnostics`: Analyze diagnostics.json\n- `analyze_logs`: Log pattern analysis\n- `check_docker_status`: Docker container status\n- `validate_configuration`: Config validation\n- `generate_performance_report`: Performance analysis\n\n## Installation & Setup\n\n### 1. Install MCP Dependencies\n\n```bash\n# Install MCP server dependencies\nnpm run mcp:install\n```\n\n### 2. Test MCP Implementation\n\n```bash\n# Test all MCP servers\nnpm run mcp:test\n```\n\n### 3. VS Code Configuration\n\nThe MCP configuration is automatically set up in:\n\n- `.vscode/mcp-config.json`: MCP server definitions\n- `.vscode/settings.json`: MCP enablement and configuration\n\n### 4. Environment Requirements\n\nMCP servers require the same environment variables as the main application:\n\n- `SUPABASE_URL`: Database connection\n- `SUPABASE_SECRET_KEY`: Database access\n- API keys for external services (when testing APIs)\n\n## Usage Examples\n\n### Database Queries via AI\n\n```\n\"Show me the top 10 leads with confidence scores above 85\"\n\"Analyze lead quality patterns for restaurants in New York\"\n\"What are the API costs for the last 24 hours?\"\n```\n\n### API Testing via AI\n\n```\n\"Test the Google Places API with a search for 'coffee shops in Seattle'\"\n\"Simulate lead discovery for 'restaurants' in 'San Francisco'\"\n\"Verify the email address john@example.com\"\n```\n\n### Codebase Analysis via AI\n\n```\n\"Analyze the project structure and identify key components\"\n\"Check for any fake data generation patterns in the code\"\n\"Find all error handling patterns in API clients\"\n```\n\n### System Monitoring via AI\n\n```\n\"Check the overall system health status\"\n\"Analyze recent application logs for errors\"\n\"Generate a performance report with recommendations\"\n```\n\n## Advanced AI Workflows\n\n### 1. Lead Quality Analysis\n\nAI can now directly query your database to provide insights like:\n\n- \"Which business types have the highest confidence scores?\"\n- \"What's the correlation between email confidence and overall lead quality?\"\n- \"Show me leads that failed validation and why\"\n\n### 2. API Cost Optimization\n\nAI can analyze your API usage patterns:\n\n- \"Which APIs are costing the most money?\"\n- \"Are we approaching any quota limits?\"\n- \"Suggest optimizations to reduce API costs\"\n\n### 3. Code Quality Assurance\n\nAI can continuously monitor code quality:\n\n- \"Are there any patterns that could lead to fake data generation?\"\n- \"Analyze error handling coverage across all modules\"\n- \"Check if all API clients follow the same patterns\"\n\n### 4. System Performance Monitoring\n\nAI can provide system insights:\n\n- \"Is the system performing optimally?\"\n- \"What are the largest files that might be slowing down development?\"\n- \"Are there any configuration issues that need attention?\"\n\n## MCP Server Management\n\n### Individual Server Commands\n\n```bash\n# Start specific MCP servers\nnpm run mcp:start:database    # Database access\nnpm run mcp:start:api         # API testing\nnpm run mcp:start:filesystem  # Code analysis\nnpm run mcp:start:monitoring  # System monitoring\n\n# Start all servers (for development)\nnpm run mcp:start:all\n```\n\n### Server Status Monitoring\n\n```bash\n# Test all servers\nnpm run mcp:test\n\n# Check detailed test results\ncat mcp-servers/test-results.json\n```\n\n## Security Considerations\n\n### Data Access Control\n\n- MCP servers use the same authentication as the main application\n- Database access is limited to read-only operations where appropriate\n- API keys are passed through environment variables only\n\n### AI Context Boundaries\n\n- MCP servers provide structured access to prevent unauthorized operations\n- Each server has defined capabilities and cannot exceed its scope\n- Error handling prevents sensitive information leakage\n\n## Troubleshooting\n\n### Common Issues\n\n1. **MCP Servers Not Starting**\n\n   - Check dependencies: `npm run mcp:install`\n   - Verify environment variables are set\n   - Run tests: `npm run mcp:test`\n\n2. **VS Code Not Recognizing MCP**\n\n   - Restart VS Code after configuration changes\n   - Check `.vscode/mcp-config.json` syntax\n   - Verify MCP is enabled in settings\n\n3. **Database Connection Issues**\n\n   - Check Supabase credentials\n   - Verify database server status\n   - Run diagnostics: `curl http://localhost:3000/diag`\n\n4. **API Testing Failures**\n   - Verify API keys are configured\n   - Check API quota limits\n   - Test individual APIs outside MCP first\n\n## Development Notes\n\n### Adding New MCP Tools\n\n1. Add tool definition to the server's `tools/list` handler\n2. Implement tool execution in `tools/call` handler\n3. Update this documentation\n4. Add tests to `test-servers.js`\n\n### Best Practices\n\n- Keep tools focused on specific functionality\n- Provide detailed error messages\n- Include usage examples in tool descriptions\n- Implement proper error handling and validation\n- Cache expensive operations where appropriate\n\n## Integration with ProspectPro Architecture\n\nThe MCP implementation follows ProspectPro's core principles:\n\n### Zero Fake Data Policy\n\n- The filesystem server actively checks for fake data patterns\n- All database queries return real, validated business data\n- API testing uses actual external service endpoints\n\n### Cost Optimization\n\n- API servers track usage and costs\n- Monitoring servers provide budget analysis\n- Caching strategies are implemented throughout\n\n### Performance Monitoring\n\n- Real-time system health monitoring\n- Performance analysis and recommendations\n- Comprehensive diagnostics and logging\n\nThis MCP implementation transforms ProspectPro development into an AI-enhanced workflow where intelligent assistants have direct access to your real business data, APIs, and system insights.\n"}}},
{"type":"measure","name":"lsp.did_open","count":18,"duration":0.1},
{"type":"mark","name":"lsp.code_action","count":64,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":58,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":49,"duration":0.012},
{"type":"mark","name":"lsp.inlay_hint","count":285,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":95,"character":0}}}},
{"type":"mark","name":"lsp.document_symbol","count":59,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md"}}},
{"type":"mark","name":"lsp.code_lens","count":49,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md"}}},
{"type":"mark","name":"lsp.code_action","count":65,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":286,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":94,"character":19}}}},
{"type":"mark","name":"lsp.code_lens","count":50,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md"}}},
{"type":"mark","name":"lsp.hover","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md"},"position":{"line":28,"character":49}}},
{"type":"mark","name":"lsp.folding_range","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md"}}},
{"type":"mark","name":"lsp.code_action","count":66,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":287,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":96,"character":30}}}},
{"type":"mark","name":"lsp.folding_range","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"}}},
{"type":"mark","name":"lsp.document_symbol","count":60,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"}}},
{"type":"mark","name":"lsp.code_lens","count":51,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"}}},
{"type":"mark","name":"lsp.code_action","count":67,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":68,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":288,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":27}}}},
{"type":"mark","name":"lsp.document_symbol","count":61,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"}}},
{"type":"mark","name":"lsp.code_lens","count":52,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"}}},
{"type":"mark","name":"lsp.code_action","count":69,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":289,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"},"range":{"start":{"line":0,"character":0},"end":{"line":96,"character":34}}}},
{"type":"mark","name":"lsp.folding_range","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"}}},
{"type":"mark","name":"lsp.code_action","count":70,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":1}},"severity":2,"message":"Missing property \"folders\"."}],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":290,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":4}}}},
{"type":"mark","name":"lsp.document_symbol","count":62,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"}}},
{"type":"mark","name":"lsp.code_lens","count":53,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"}}},
{"type":"mark","name":"lsp.code_action","count":71,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":1}},"severity":2,"message":"Missing property \"folders\"."}],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":291,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":0,"character":0},"end":{"line":96,"character":26}}}},
{"type":"mark","name":"lsp.folding_range","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"}}},
{"type":"mark","name":"lsp.code_lens","count":54,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"}}},
{"type":"mark","name":"lsp.did_open","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/launch.json","languageId":"jsonc","version":1,"text":"{\r\n  \"version\": \"0.2.0\",\r\n  \"configurations\": [\r\n    \r\n    {\r\n      \"name\": \"Debug Server\",\r\n      \"type\": \"node\",\r\n      \"request\": \"launch\",\r\n      \"program\": \"${workspaceFolder}/server.js\",\r\n      \"env\": {\r\n        \"NODE_ENV\": \"development\"\r\n      },\r\n      \"console\": \"integratedTerminal\",\r\n      \"skipFiles\": [\"<node_internals>/**\", \"**/node_modules/**\"],\r\n      \"outFiles\": [\"${workspaceFolder}/**/*.js\"],\r\n      \"resolveSourceMapLocations\": [\r\n        \"${workspaceFolder}/**\",\r\n        \"!**/node_modules/**\"\r\n      ],\r\n      \"restart\": true\r\n    },\r\n    {\r\n      \"name\": \"Debug Enhanced Server\",\r\n      \"type\": \"node\",\r\n      \"request\": \"launch\",\r\n      \"program\": \"${workspaceFolder}/server-enhanced.js\",\r\n      \"env\": {\r\n        \"NODE_ENV\": \"development\",\r\n        \"ALLOW_DEGRADED_START\": \"true\"\r\n      },\r\n      \"console\": \"integratedTerminal\",\r\n      \"skipFiles\": [\"<node_internals>/**\", \"**/node_modules/**\"],\r\n      \"outFiles\": [\"${workspaceFolder}/**/*.js\"],\r\n      \"resolveSourceMapLocations\": [\r\n        \"${workspaceFolder}/**\",\r\n        \"!**/node_modules/**\"\r\n      ],\r\n      \"restart\": true\r\n    },\r\n    {\r\n      \"name\": \"Debug Current File\",\r\n      \"type\": \"node\",\r\n      \"request\": \"launch\",\r\n      \"program\": \"${file}\",\r\n      \"env\": {\r\n        \"NODE_ENV\": \"development\"\r\n      },\r\n      \"skipFiles\": [\"<node_internals>/**\", \"**/node_modules/**\"],\r\n      \"console\": \"integratedTerminal\"\r\n    }\r\n  ]\r\n}\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":19,"duration":0.05},
{"type":"mark","name":"lsp.code_action","count":72,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/launch.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":63,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/launch.json"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":50,"duration":0.007},
{"type":"mark","name":"lsp.inlay_hint","count":292,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/launch.json"},"range":{"start":{"line":0,"character":0},"end":{"line":52,"character":0}}}},
{"type":"mark","name":"lsp.code_lens","count":55,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/launch.json"}}},
{"type":"mark","name":"lsp.document_symbol","count":64,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/launch.json"}}},
{"type":"mark","name":"lsp.code_lens","count":56,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/launch.json"}}},
{"type":"mark","name":"lsp.inlay_hint","count":293,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/launch.json"},"range":{"start":{"line":0,"character":0},"end":{"line":52,"character":0}}}},
{"type":"mark","name":"lsp.folding_range","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/launch.json"}}},
{"type":"mark","name":"lsp.did_close","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"measure","name":"lsp.did_close","count":13,"duration":0.036},
{"type":"mark","name":"lsp.code_action","count":73,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":1}},"severity":2,"message":"Missing property \"folders\"."}],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":294,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":0,"character":0},"end":{"line":96,"character":26}}}},
{"type":"mark","name":"lsp.folding_range","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"}}},
{"type":"mark","name":"lsp.code_lens","count":57,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"}}},
{"type":"mark","name":"lsp.document_symbol","count":65,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"}}},
{"type":"mark","name":"lsp.code_action","count":74,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":1}},"severity":2,"message":"Missing property \"folders\"."}],"triggerKind":2}}},
{"type":"mark","name":"lsp.hover","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"position":{"line":10,"character":41}}},
{"type":"mark","name":"lsp.code_action","count":75,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":5,"character":40},"end":{"line":5,"character":40}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_highlight","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"position":{"line":5,"character":29}}},
{"type":"mark","name":"lsp.code_action","count":76,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":5,"character":29},"end":{"line":5,"character":29}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.hover","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"position":{"line":5,"character":26}}},
{"type":"mark","name":"lsp.code_action","count":77,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":5,"character":26},"end":{"line":5,"character":26}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.hover","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"position":{"line":5,"character":26}}},
{"type":"mark","name":"lsp.code_action","count":78,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":5,"character":0},"end":{"line":6,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_highlight","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"position":{"line":5,"character":29}}},
{"type":"mark","name":"lsp.code_action","count":79,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":5,"character":29},"end":{"line":5,"character":29}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":80,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer-workspace.code-workspace"},"range":{"start":{"line":4,"character":44},"end":{"line":4,"character":44}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_open","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/extensions.json","languageId":"jsonc","version":1,"text":"{\n  \"recommendations\": [\n    // Core Project Requirements\n    \"denoland.vscode-deno\", // For Supabase functions\n    \"supabase.supabase-vscode\", // Supabase integration\n\n    // Development Essentials\n    \"dbaeumer.vscode-eslint\", // Code linting\n    \"esbenp.prettier-vscode\", // Code formatting\n    \"eamodio.gitlens\", // Enhanced git features\n\n    // API Development\n    \"humao.rest-client\", // For API testing\n\n    // Docker Support\n    \"ms-azuretools.vscode-docker\", // Docker integration\n\n    // Node.js Development\n    \"davidanson.vscode-markdownlint\", // Markdown linting\n\n    // JSON Support\n    \"redhat.vscode-yaml\", // YAML support for Docker files\n\n    // GitHub Integration\n    \"github.copilot\", // Copilot integration\n    \"github.copilot-chat\" // Copilot Chat\n  ],\n  \"unwantedRecommendations\": [\n    // Avoiding duplicate functionalities\n    \"rangav.vscode-thunder-client\", // REST Client already recommended\n    \"ms-vscode.js-debug-nightly\", // Use stable version instead\n    \"vscjava.vscode-java-debug\", // Not needed for this project\n    \"ms-python.python\" // Not needed for this project\n  ]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":20,"duration":0.056},
{"type":"mark","name":"lsp.code_action","count":81,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/extensions.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":66,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/extensions.json"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":51,"duration":0.007},
{"type":"mark","name":"lsp.inlay_hint","count":295,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/extensions.json"},"range":{"start":{"line":0,"character":0},"end":{"line":35,"character":0}}}},
{"type":"mark","name":"lsp.code_lens","count":58,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/extensions.json"}}},
{"type":"mark","name":"lsp.document_symbol","count":67,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/extensions.json"}}},
{"type":"mark","name":"lsp.code_lens","count":59,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/extensions.json"}}},
{"type":"mark","name":"lsp.inlay_hint","count":296,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/extensions.json"},"range":{"start":{"line":0,"character":0},"end":{"line":35,"character":0}}}},
{"type":"mark","name":"lsp.did_open","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json","languageId":"jsonc","version":2,"text":"{\n  \"[typescript]\": {\n    \"editor.defaultFormatter\": \"denoland.vscode-deno\"\n  },\n  \"deno.enablePaths\": [\"supabase/functions\"],\n  \"deno.lint\": true,\n  \"deno.unstable\": [\n    \"bare-node-builtins\",\n    \"byonm\",\n    \"sloppy-imports\",\n    \"unsafe-proto\",\n    \"webgpu\",\n    \"broadcast-channel\",\n    \"worker-options\",\n    \"cron\",\n    \"kv\",\n    \"ffi\",\n    \"fs\",\n    \"http\",\n    \"net\"\n  ],\n  \"git.ignoreLimitWarning\": true,\n\n  // === ENHANCED PRODUCTION WORKSPACE SETTINGS ===\n\n  \"github.copilot.enable\": {\n    \"*\": true,\n    \"plaintext\": false,\n    \"markdown\": true,\n    \"scminput\": false\n  },\n  \"github.copilot.inlineSuggest.enable\": true,\n\n  // Copilot Chat optimizations\n  \"github.copilot.chat.welcomeMessage\": \"none\",\n  \"github.copilot.chat.localeOverride\": \"en\",\n  \"github.copilot.chat.historyCount\": 8, // Limit chat history\n  \"github.copilot.chat.completionPhrasesEnabled\": false, // Disable unnecessary phrases\n  \"github.copilot.chat.dynamicContextTrailingLength\": 500, // Control context size\n\n  // Copilot performance settings\n  \"github.copilot.advanced.setAutoCompletionTriggerThreshold\": 30, // Less aggressive\n  \"github.copilot.advanced.connectionTimeout\": 45000, // Better performance on slower connections\n\n  // Editor performance optimizations\n  \"editor.minimap.enabled\": false, // Reduces CPU usage\n  \"editor.renderWhitespace\": \"none\", // Reduces rendering overhead\n  \"editor.renderControlCharacters\": false, // Reduces rendering overhead\n  \"editor.renderLineHighlight\": \"gutter\", // Less UI overhead than \"all\"\n  \"editor.bracketPairColorization.enabled\": false, // Reduces rendering overhead\n  \"editor.guides.bracketPairs\": false, // Reduces rendering overhead\n  \"workbench.colorTheme\": \"Default Dark Modern\", // Use built-in theme for performance\n  \"workbench.list.smoothScrolling\": false, // Better performance on lower-end machines\n  \"workbench.tree.renderIndentGuides\": \"none\", // Reduces UI overhead\n  \"workbench.editor.closeOnFileDelete\": true, // Prevents confusion with deleted files\n\n  // File system performance\n  \"files.exclude\": {\n    \"**/*.log\": true,\n    \"**/*.tmp\": true,\n    \"**/*.temp\": true,\n    \"**/diagnostics.json\": true,\n    \"**/startup.log\": true,\n    \"**/production*.log\": true,\n    \"**/database-validation.log\": true,\n    \"**/server-test.log\": true\n  },\n\n  \"files.watcherExclude\": {\n    \"**/*.log\": true,\n    \"**/*.tmp\": true,\n    \"**/*.temp\": true,\n    \"**/diagnostics.json\": true,\n    \"**/startup.log\": true,\n    \"**/node_modules/**\": true,\n    \"**/archive/**\": true,\n    \"**/.git/**\": true,\n    \"**/logs/**\": true,\n    \"**/dist/**\": true\n  },\n\n  \"search.exclude\": {\n    \"**/node_modules\": true,\n    \"**/*.log\": true,\n    \"**/*.tmp\": true,\n    \"**/*.temp\": true,\n    \"**/diagnostics.json\": true,\n    \"**/startup.log\": true,\n    \"**/production*.log\": true,\n    \"**/archive/**\": true,\n    \"**/.git\": true,\n    \"**/logs/**\": true,\n    \"**/dist/**\": true,\n    \"**/coverage/**\": true\n  },\n\n  \"search.searchOnType\": false, // Reduces search operations while typing\n  \"search.searchOnTypeDebouncePeriod\": 800, // Longer debounce for better performance\n\n  \"files.associations\": {\n    \"*.md\": \"markdown\",\n    \".copilot-instructions\": \"markdown\"\n  },\n\n  \"markdown.preview.breaks\": true,\n  \"markdown.preview.linkify\": true,\n\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": \"explicit\"\n  },\n\n  \"eslint.validate\": [\"javascript\", \"javascriptreact\", \"json\"],\n\n  \"files.autoSave\": \"afterDelay\",\n  \"files.autoSaveDelay\": 1000,\n\n  \"editor.formatOnSave\": true,\n  \"editor.formatOnPaste\": true,\n\n  \"javascript.updateImportsOnFileMove.enabled\": \"always\",\n  \"javascript.suggest.autoImports\": true,\n\n  // Node.js and npm performance optimizations\n  \"npm.packageManager\": \"npm\",\n  \"npm.exclude\": [\"**/node_modules/**\", \"**/archive/**\"],\n  \"npm.autoDetect\": \"off\", // Prevents constant scanning of folders\n  \"js/ts.implicitProjectConfig.checkJs\": false, // Reduces TypeScript checking overhead\n\n  // Git optimizations\n  \"git.autofetch\": true,\n  \"git.confirmSync\": false,\n  \"git.enableSmartCommit\": true,\n  \"git.fetchOnPull\": true,\n  \"git.mergeEditor\": true, // Better merge conflict resolution\n\n  // Terminal optimizations for Windows\n  \"terminal.integrated.defaultProfile.windows\": \"PowerShell\",\n  \"terminal.integrated.profiles.windows\": {\n    \"PowerShell\": {\n      \"source\": \"PowerShell\",\n      \"icon\": \"terminal-powershell\"\n    },\n    \"Command Prompt\": {\n      \"path\": \"cmd.exe\",\n      \"icon\": \"terminal-cmd\"\n    },\n    \"Windows PowerShell\": {\n      \"path\": \"powershell.exe\",\n      \"icon\": \"terminal-powershell\"\n    }\n  },\n  \"terminal.integrated.defaultProfile.linux\": \"bash\",\n  \"terminal.integrated.gpuAcceleration\": \"on\",\n  \"terminal.integrated.scrollback\": 1000, // Lower scrollback for memory optimization\n\n  // === MCP (Model Context Protocol) Configuration ===\n  \"mcp.enable\": true,\n  \"mcp.configFile\": \"${workspaceFolder}/.vscode/mcp-config.json\",\n  \"mcp.servers\": {\n    \"prospectpro-database\": {\n      \"enabled\": true,\n      \"autoStart\": true,\n      \"description\": \"ProspectPro Database Access via Supabase\"\n    },\n    \"prospectpro-apis\": {\n      \"enabled\": true,\n      \"autoStart\": false,\n      \"description\": \"ProspectPro API Clients (Google Places, Foursquare, Hunter.io)\"\n    },\n    \"prospectpro-filesystem\": {\n      \"enabled\": true,\n      \"autoStart\": true,\n      \"description\": \"ProspectPro Codebase Analysis and File Management\"\n    },\n    \"prospectpro-monitoring\": {\n      \"enabled\": true,\n      \"autoStart\": false,\n      \"description\": \"ProspectPro Monitoring and Diagnostics\"\n    },\n    \"prospectpro-production\": {\n      \"enabled\": true,\n      \"autoStart\": true,\n      \"description\": \"ProspectPro Production Environment Management and CI/CD Monitoring\"\n    }\n  },\n\n  // AI-Enhanced Development Settings\n  \"ai.contextAware\": true,\n  \"ai.projectContext\": {\n    \"type\": \"lead-generation-platform\",\n    \"framework\": \"node-express\",\n    \"database\": \"supabase\",\n    \"apis\": [\"google-places\", \"foursquare\", \"hunter-io\", \"neverbounce\"],\n    \"deployment\": \"docker-compose\",\n    \"monitoring\": \"custom-diagnostics\"\n  },\n  \"deno.enable\": true\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":21,"duration":0.108},
{"type":"mark","name":"lsp.document_symbol","count":68,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"}}},
{"type":"mark","name":"lsp.code_action","count":82,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":52,"duration":0.012},
{"type":"mark","name":"lsp.inlay_hint","count":297,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":0}}}},
{"type":"mark","name":"lsp.code_lens","count":60,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"}}},
{"type":"mark","name":"lsp.document_symbol","count":69,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"}}},
{"type":"mark","name":"lsp.code_action","count":83,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":61,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"}}},
{"type":"mark","name":"lsp.inlay_hint","count":298,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":0,"character":0},"end":{"line":96,"character":4}}}},
{"type":"mark","name":"lsp.folding_range","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"}}},
{"type":"mark","name":"lsp.inlay_hint","count":299,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":0,"character":0},"end":{"line":107,"character":23}}}},
{"type":"mark","name":"lsp.inlay_hint","count":300,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":0,"character":0},"end":{"line":120,"character":20}}}},
{"type":"mark","name":"lsp.inlay_hint","count":301,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":0,"character":0},"end":{"line":122,"character":23}}}},
{"type":"mark","name":"lsp.inlay_hint","count":302,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":0,"character":0},"end":{"line":125,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":303,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":0,"character":0},"end":{"line":136,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":304,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":0,"character":0},"end":{"line":146,"character":27}}}},
{"type":"mark","name":"lsp.inlay_hint","count":305,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":0,"character":0},"end":{"line":157,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":306,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":7,"character":0},"end":{"line":167,"character":43}}}},
{"type":"mark","name":"lsp.inlay_hint","count":307,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":17,"character":0},"end":{"line":178,"character":6}}}},
{"type":"mark","name":"lsp.code_lens","count":62,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"}}},
{"type":"mark","name":"lsp.code_action","count":84,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":100,"character":23},"end":{"line":100,"character":23}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":308,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":20,"character":0},"end":{"line":180,"character":4}}}},
{"type":"mark","name":"lsp.inlay_hint","count":309,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":22,"character":0},"end":{"line":183,"character":5}}}},
{"type":"mark","name":"lsp.inlay_hint","count":310,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":30,"character":0},"end":{"line":191,"character":24}}}},
{"type":"mark","name":"lsp.inlay_hint","count":311,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":36,"character":0},"end":{"line":196,"character":21}}}},
{"type":"mark","name":"lsp.inlay_hint","count":312,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":41,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":313,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":49,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":314,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":51,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":315,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":59,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":316,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":72,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":317,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":86,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.did_open","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js","languageId":"javascript","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":22,"duration":0.421},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":19,"duration":0.04},
{"type":"mark","name":"lsp.did_change_batched","count":11,"args":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},
{"type":"measure","name":"lsp.did_change_batched","count":11,"duration":266.481},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":53,"duration":0.01},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":20,"duration":0.036},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":11,"duration":0.016},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":54,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":55,"duration":0.024},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":56,"duration":0.023},
{"type":"mark","name":"lsp.did_open","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md","languageId":"markdown","version":1,"text":"# ProspectPro v3.0 - Optimized AI Instructions\r\n\r\n## CRITICAL: Current Production State\r\n\r\n- **Version**: 3.0.0 (Production-ready with Supabase Vault)\r\n- **Deployment**: GitHub Actions → Railway/Docker automated\r\n- **Environment**: Secrets auto-injected via `.scripts/pull-env-from-secrets.js`\r\n- **Architecture**: 4-stage validation pipeline (Discovery→Enrichment→Validation→Export)\r\n- **Repository**: https://github.com/Alextorelli/ProspectPro (main = production)\r\n\r\n## IMMEDIATE CONTEXT (No Re-explanation Needed)\r\n\r\nWhen Alex asks about:\r\n\r\n- **\"Environment setup\"** → Point to `npm run prod-setup-env` (automated via GitHub Actions)\r\n- **\"API integration\"** → All clients in `/modules/api-clients/` (Google Places, Hunter.io, NeverBounce, Foursquare)\r\n- **\"Database issues\"** → Supabase with comprehensive schema in `/database/`\r\n- **\"Docker problems\"** → Multi-stage build with security hardening already implemented\r\n- **\"Cost optimization\"** → Built-in rate limiting and caching systems already active\r\n- **\"Deployment\"** → Automated via GitHub Actions with secret injection\r\n- **\"Testing\"** → Use `npm run test` or check testing branch\r\n\r\n## ALEX'S TECHNICAL PROFILE\r\n\r\n- **Background**: No coding experience but highly technical\r\n- **AI Dependency**: Relies heavily on AI assistance for debugging and architecture\r\n- **Primary Models**: Claude Sonnet 4.0, GPT-5 occasionally\r\n- **Environment**: GitHub Codespaces exclusively\r\n- **Focus**: Lead generation with zero fake data tolerance\r\n- **Usage Pattern**: Debugging, testing, CI/CD, architecture discussions\r\n\r\n## RESPONSE OPTIMIZATION RULES\r\n\r\n1. **NEVER re-explain project architecture** unless specifically asked with \"explain the architecture\"\r\n2. **ALWAYS reference existing files/scripts** for implementation details\r\n3. **PRIORITIZE troubleshooting** over teaching fundamentals\r\n4. **ASSUME familiarity** with ProspectPro's core concepts\r\n5. **FOCUS on immediate problem resolution** not educational content\r\n6. **USE existing npm scripts** rather than creating new implementations\r\n7. **REFERENCE the working production system** rather than theoretical solutions\r\n\r\n## CURRENT PRODUCTION ARCHITECTURE (ESTABLISHED - DO NOT RE-EXPLAIN)\r\n\r\n### File Structure (REFERENCE ONLY)\r\n\r\n```\r\n/api/business-discovery.js           # Core discovery logic\r\n/modules/enhanced-lead-discovery.js  # Main business processing\r\n/modules/campaign-csv-exporter.js    # Export system with analytics\r\n/modules/api-clients/                # All API integrations\r\n/database/database-master-setup.js   # Schema and migrations\r\n.scripts/pull-env-from-secrets.js    # Environment automation\r\n```\r\n\r\n### Current Working Scripts (USE THESE)\r\n\r\n```bash\r\nnpm run prod-setup-env     # Automated secret injection\r\nnpm run production-start   # Launch production\r\nnpm run prod-check        # Validate environment\r\nnpm run health            # Health check\r\nnpm run diag              # Diagnostics\r\n```\r\n\r\n### API Integration Stack (WORKING)\r\n\r\n- **Google Places API**: Business discovery with rate limiting\r\n- **Hunter.io**: Email discovery and validation\r\n- **NeverBounce**: Email verification\r\n- **Foursquare**: Additional business data\r\n- **Supabase**: Database with real-time subscriptions\r\n- **Railway**: Production hosting with automated deployment\r\n\r\n## PROBLEM-SOLVING APPROACH\r\n\r\n### For Environment Issues:\r\n\r\n1. Check `npm run prod-check` output\r\n2. Verify GitHub Actions completed successfully\r\n3. Check Railway deployment logs\r\n4. Validate Supabase connection\r\n\r\n### For API Issues:\r\n\r\n1. Reference existing implementations in `/modules/api-clients/`\r\n2. Check rate limiting configurations\r\n3. Verify API key injection via GitHub Actions\r\n4. Review error logs in production\r\n\r\n### For Deployment Issues:\r\n\r\n1. Check GitHub Actions workflow status\r\n2. Verify Railway deployment completion\r\n3. Run health checks: `npm run health`\r\n4. Check Docker container status\r\n\r\n### For Database Issues:\r\n\r\n1. Reference schema in `/database/database-master-setup.js`\r\n2. Check Supabase dashboard for connection issues\r\n3. Verify environment variables are properly injected\r\n4. Review query performance in Supabase logs\r\n\r\n## CURRENT OPTIMIZATIONS (ALREADY IMPLEMENTED)\r\n\r\n- **Automated secret management** via GitHub Actions\r\n- **Multi-stage Docker build** with security hardening\r\n- **API rate limiting and caching** for cost optimization\r\n- **Comprehensive error handling** with structured logging\r\n- **Zero fake data validation** pipeline with quality scoring\r\n- **Automated CSV export** with campaign analytics\r\n- **Production health monitoring** via `/health` and `/diag` endpoints\r\n\r\n## DEVELOPMENT WORKFLOW (ESTABLISHED)\r\n\r\n1. **Main branch** = Production (auto-deployed to Railway)\r\n2. **Testing branch** = Development/testing environment\r\n3. **GitHub Actions** = Automated CI/CD with secret injection\r\n4. **Codespaces** = Primary development environment\r\n5. **Docker** = Production containerization\r\n\r\n## DEBUGGING PATTERNS (OPTIMIZED FOR ALEX)\r\n\r\n- Start with health checks: `npm run health` and `npm run diag`\r\n- Check GitHub Actions for deployment status\r\n- Review Railway logs for runtime issues\r\n- Use Supabase dashboard for database troubleshooting\r\n- Reference existing working implementations before creating new code\r\n\r\n## COST OPTIMIZATION FOCUS\r\n\r\n- **API calls**: Use existing rate limiting and caching\r\n- **Database queries**: Optimized with connection pooling\r\n- **Container resources**: Multi-stage build reduces image size\r\n- **Premium AI requests**: Use this instruction file to reduce context repetition\r\n\r\n## RESPONSE FORMAT PREFERENCES\r\n\r\n- **Immediate solutions** over explanations\r\n- **Reference existing code** rather than writing new implementations\r\n- **Use established scripts** rather than manual processes\r\n- **Focus on debugging** rather than architecture discussions\r\n- **Provide specific file paths** and command references\r\n- **Assume production system knowledge** unless explicitly asked to explain\r\n\r\n## NEVER REPEAT (SAVE PREMIUM REQUESTS)\r\n\r\n- Project architecture explanations\r\n- Environment setup procedures (automated)\r\n- API integration patterns (already implemented)\r\n- Database schema explanations (documented)\r\n- Docker configuration details (working)\r\n- Cost optimization strategies (implemented)\r\n- Security measures (hardened)\r\n\r\nThis instruction set prioritizes rapid problem resolution and eliminates repetitive context discussions to maximize premium request efficiency.\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":23,"duration":0.098},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":57,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":318,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":88,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.did_open","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro API MCP Server\n * Provides AI access to external API clients and testing capabilities\n */\n\nconst { Server } = require(\"@modelcontextprotocol/sdk/server/index.js\");\nconst {\n  StdioServerTransport,\n} = require(\"@modelcontextprotocol/sdk/server/stdio.js\");\nconst path = require(\"path\");\n\nclass ProspectProAPIServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-apis\",\n        version: \"1.0.0\",\n        description:\n          \"ProspectPro API MCP Server - AI access to external API clients\",\n      },\n      {\n        capabilities: {\n          tools: {},\n          resources: {},\n        },\n      }\n    );\n\n    this.apiClients = {};\n    this.setupHandlers();\n  }\n\n  async initializeAPIClients() {\n    try {\n      // Load API clients dynamically\n      const GooglePlacesClient = require(\"../modules/api-clients/google-places-client\");\n      const FoursquareClient = require(\"../modules/api-clients/foursquare-places-client\");\n      const HunterIOClient = require(\"../modules/api-clients/hunter-io-client\");\n      const NeverBounceClient = require(\"../modules/api-clients/neverbounce-client\");\n\n      this.apiClients = {\n        googlePlaces: new GooglePlacesClient(process.env.GOOGLE_PLACES_API_KEY),\n        foursquare: new FoursquareClient(process.env.FOURSQUARE_API_KEY),\n        hunterIO: new HunterIOClient(process.env.HUNTER_IO_API_KEY),\n        neverBounce: new NeverBounceClient(process.env.NEVERBOUNCE_API_KEY),\n      };\n    } catch (error) {\n      console.error(\n        \"Warning: Some API clients could not be loaded:\",\n        error.message\n      );\n      this.apiClients = {};\n    }\n  }\n\n  setupHandlers() {\n    // Tool definitions\n    this.server.setRequestHandler(\"tools/list\", async () => ({\n      tools: [\n        {\n          name: \"test_google_places\",\n          description: \"Test Google Places API with a sample query\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              query: {\n                type: \"string\",\n                description: \"Search query for businesses\",\n              },\n              location: {\n                type: \"string\",\n                description: \"Location to search in\",\n                default: \"New York, NY\",\n              },\n              limit: {\n                type: \"number\",\n                description: \"Number of results to return\",\n                default: 5,\n              },\n            },\n            required: [\"query\"],\n          },\n        },\n        {\n          name: \"test_foursquare_places\",\n          description: \"Test Foursquare Places API with a sample query\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              query: {\n                type: \"string\",\n                description: \"Search query for businesses\",\n              },\n              location: {\n                type: \"string\",\n                description: \"Location to search in\",\n                default: \"New York, NY\",\n              },\n              limit: {\n                type: \"number\",\n                description: \"Number of results to return\",\n                default: 5,\n              },\n            },\n            required: [\"query\"],\n          },\n        },\n        {\n          name: \"test_email_discovery\",\n          description: \"Test Hunter.io email discovery for a domain\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              domain: {\n                type: \"string\",\n                description: \"Domain to search for emails\",\n              },\n              limit: {\n                type: \"number\",\n                description: \"Number of emails to return\",\n                default: 5,\n              },\n            },\n            required: [\"domain\"],\n          },\n        },\n        {\n          name: \"verify_email\",\n          description: \"Verify email deliverability using NeverBounce\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              email: {\n                type: \"string\",\n                description: \"Email address to verify\",\n              },\n            },\n            required: [\"email\"],\n          },\n        },\n        {\n          name: \"get_api_usage_stats\",\n          description: \"Get usage statistics for all API clients\",\n          inputSchema: {\n            type: \"object\",\n            properties: {},\n          },\n        },\n        {\n          name: \"simulate_lead_discovery\",\n          description:\n            \"Simulate the full lead discovery process with real API calls\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              businessType: {\n                type: \"string\",\n                description: \"Type of business to search for\",\n              },\n              location: {\n                type: \"string\",\n                description: \"Location to search in\",\n              },\n              maxResults: {\n                type: \"number\",\n                description: \"Maximum number of leads to discover\",\n                default: 3,\n              },\n            },\n            required: [\"businessType\", \"location\"],\n          },\n        },\n        {\n          name: \"test_new_api_integration\",\n          description:\n            \"Test a newly integrated API (e.g., US Chamber, BBB, etc.)\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              apiName: {\n                type: \"string\",\n                description: \"Name of the API to test\",\n                enum: [\"us_chamber\", \"bbb\", \"linkedin_sales\", \"zoominfo\"],\n              },\n              testType: {\n                type: \"string\",\n                description: \"Type of test to perform\",\n                enum: [\n                  \"basic_search\",\n                  \"verification\",\n                  \"directory_lookup\",\n                  \"full_integration\",\n                ],\n                default: \"basic_search\",\n              },\n              query: {\n                type: \"string\",\n                description: \"Search query for testing\",\n              },\n              location: {\n                type: \"string\",\n                description: \"Location for testing\",\n              },\n              sampleBusiness: {\n                type: \"object\",\n                description: \"Sample business data for verification tests\",\n                properties: {\n                  name: { type: \"string\" },\n                  address: { type: \"string\" },\n                  phone: { type: \"string\" },\n                  website: { type: \"string\" },\n                },\n              },\n            },\n            required: [\"apiName\", \"testType\"],\n          },\n        },\n        {\n          name: \"compare_api_sources\",\n          description:\n            \"Compare results from multiple API sources for quality analysis\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              businessType: {\n                type: \"string\",\n                description: \"Type of business to search for comparison\",\n              },\n              location: {\n                type: \"string\",\n                description: \"Location to search in\",\n              },\n              sources: {\n                type: \"array\",\n                items: {\n                  type: \"string\",\n                  enum: [\"google_places\", \"foursquare\", \"us_chamber\", \"bbb\"],\n                },\n                description: \"API sources to compare\",\n                default: [\"google_places\", \"foursquare\"],\n              },\n              maxResults: {\n                type: \"number\",\n                description: \"Maximum results per source\",\n                default: 5,\n              },\n            },\n            required: [\"businessType\", \"location\"],\n          },\n        },\n      ],\n    }));\n\n    // Tool execution handlers\n    this.server.setRequestHandler(\"tools/call\", async (request) => {\n      const { name, arguments: args } = request.params;\n\n      try {\n        await this.initializeAPIClients();\n\n        switch (name) {\n          case \"test_google_places\":\n            return await this.testGooglePlaces(args);\n          case \"test_foursquare_places\":\n            return await this.testFoursquarePlaces(args);\n          case \"test_email_discovery\":\n            return await this.testEmailDiscovery(args);\n          case \"verify_email\":\n            return await this.verifyEmail(args);\n          case \"get_api_usage_stats\":\n            return await this.getAPIUsageStats();\n          case \"simulate_lead_discovery\":\n            return await this.simulateLeadDiscovery(args);\n          case \"test_new_api_integration\":\n            return await this.testNewAPIIntegration(args);\n          case \"compare_api_sources\":\n            return await this.compareAPISources(args);\n          default:\n            throw new Error(`Unknown tool: ${name}`);\n        }\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error: ${error.message}`,\n            },\n          ],\n          isError: true,\n        };\n      }\n    });\n\n    // Resource handlers\n    this.server.setRequestHandler(\"resources/list\", async () => ({\n      resources: [\n        {\n          uri: \"apis://google-places/config\",\n          name: \"Google Places API Configuration\",\n          description: \"Configuration and status of Google Places API client\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"apis://foursquare/config\",\n          name: \"Foursquare API Configuration\",\n          description: \"Configuration and status of Foursquare API client\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"apis://hunter-io/config\",\n          name: \"Hunter.io API Configuration\",\n          description: \"Configuration and status of Hunter.io API client\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"apis://neverbounce/config\",\n          name: \"NeverBounce API Configuration\",\n          description: \"Configuration and status of NeverBounce API client\",\n          mimeType: \"application/json\",\n        },\n      ],\n    }));\n  }\n\n  async testGooglePlaces(args) {\n    const { query, location = \"New York, NY\", limit = 5 } = args;\n\n    if (!this.apiClients.googlePlaces) {\n      throw new Error(\"Google Places API client not available\");\n    }\n\n    const results = await this.apiClients.googlePlaces.searchBusinesses(\n      query,\n      location,\n      limit\n    );\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Google Places\",\n              query,\n              location,\n              results: results.businesses || [],\n              success: results.found,\n              error: results.error || null,\n              usage_stats: this.apiClients.googlePlaces.getUsageStats(),\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async testFoursquarePlaces(args) {\n    const { query, location = \"New York, NY\", limit = 5 } = args;\n\n    if (!this.apiClients.foursquare) {\n      throw new Error(\"Foursquare API client not available\");\n    }\n\n    const results = await this.apiClients.foursquare.searchBusinesses(\n      query,\n      location,\n      limit\n    );\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Foursquare Places\",\n              query,\n              location,\n              results: results.businesses || [],\n              success: results.found,\n              error: results.error || null,\n              usage_stats: this.apiClients.foursquare.getUsageStats(),\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async testEmailDiscovery(args) {\n    const { domain, limit = 5 } = args;\n\n    if (!this.apiClients.hunterIO) {\n      throw new Error(\"Hunter.io API client not available\");\n    }\n\n    const results = await this.apiClients.hunterIO.findEmails(domain, limit);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Hunter.io\",\n              domain,\n              emails: results.emails || [],\n              success: results.found,\n              error: results.error || null,\n              usage_stats: this.apiClients.hunterIO.getUsageStats(),\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async verifyEmail(args) {\n    const { email } = args;\n\n    if (!this.apiClients.neverBounce) {\n      throw new Error(\"NeverBounce API client not available\");\n    }\n\n    const result = await this.apiClients.neverBounce.verifyEmail(email);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"NeverBounce\",\n              email,\n              verification: result,\n              usage_stats: this.apiClients.neverBounce.getUsageStats(),\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async getAPIUsageStats() {\n    const stats = {};\n\n    Object.entries(this.apiClients).forEach(([name, client]) => {\n      if (client && typeof client.getUsageStats === \"function\") {\n        stats[name] = client.getUsageStats();\n      }\n    });\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api_usage_statistics: stats,\n              generated_at: new Date().toISOString(),\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async simulateLeadDiscovery(args) {\n    const { businessType, location, maxResults = 3 } = args;\n\n    const results = {\n      businessType,\n      location,\n      maxResults,\n      discovery_results: {},\n      processing_summary: {\n        total_discovered: 0,\n        processing_stages: {},\n        errors: [],\n      },\n    };\n\n    try {\n      // Stage 1: Business Discovery\n      if (this.apiClients.foursquare) {\n        const foursquareResults =\n          await this.apiClients.foursquare.searchBusinesses(\n            businessType,\n            location,\n            maxResults\n          );\n        results.discovery_results.foursquare = foursquareResults;\n        results.processing_summary.total_discovered +=\n          foursquareResults.businesses?.length || 0;\n      }\n\n      if (this.apiClients.googlePlaces) {\n        const googleResults =\n          await this.apiClients.googlePlaces.searchBusinesses(\n            businessType,\n            location,\n            maxResults\n          );\n        results.discovery_results.google_places = googleResults;\n        results.processing_summary.total_discovered +=\n          googleResults.businesses?.length || 0;\n      }\n\n      // Stage 2: Email Discovery (sample with first business)\n      const sampleBusiness =\n        results.discovery_results.foursquare?.businesses?.[0] ||\n        results.discovery_results.google_places?.businesses?.[0];\n\n      if (\n        sampleBusiness &&\n        sampleBusiness.website &&\n        this.apiClients.hunterIO\n      ) {\n        const domain = new URL(sampleBusiness.website).hostname;\n        const emailResults = await this.apiClients.hunterIO.findEmails(\n          domain,\n          2\n        );\n        results.discovery_results.email_discovery = emailResults;\n\n        // Stage 3: Email Verification (sample)\n        if (\n          emailResults.emails &&\n          emailResults.emails.length > 0 &&\n          this.apiClients.neverBounce\n        ) {\n          const emailVerification =\n            await this.apiClients.neverBounce.verifyEmail(\n              emailResults.emails[0].email\n            );\n          results.discovery_results.email_verification = emailVerification;\n        }\n      }\n\n      // Compile usage statistics\n      results.api_usage = {};\n      Object.entries(this.apiClients).forEach(([name, client]) => {\n        if (client && typeof client.getUsageStats === \"function\") {\n          results.api_usage[name] = client.getUsageStats();\n        }\n      });\n    } catch (error) {\n      results.processing_summary.errors.push(error.message);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(results, null, 2),\n        },\n      ],\n    };\n  }\n\n  async testNewAPIIntegration(args) {\n    const { apiName, testType, query, location, sampleBusiness } = args;\n\n    const result = {\n      api_name: apiName,\n      test_type: testType,\n      timestamp: new Date().toISOString(),\n      success: false,\n      data: null,\n      error: null,\n    };\n\n    try {\n      switch (apiName) {\n        case \"us_chamber\":\n          result.data = await this.testUSChamberAPI(\n            testType,\n            query,\n            location,\n            sampleBusiness\n          );\n          result.success = true;\n          break;\n        case \"bbb\":\n          result.data = await this.testBBBAPI(\n            testType,\n            query,\n            location,\n            sampleBusiness\n          );\n          result.success = true;\n          break;\n        default:\n          throw new Error(\n            `API ${apiName} not yet implemented. Available: us_chamber, bbb`\n          );\n      }\n    } catch (error) {\n      result.error = error.message;\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(result, null, 2),\n        },\n      ],\n    };\n  }\n\n  async testUSChamberAPI(testType, query, location, sampleBusiness) {\n    // Load US Chamber API client dynamically\n    try {\n      const USChamberClient = require(\"../modules/api-clients/us-chamber-client\");\n      const chamberClient = new USChamberClient(process.env.USCHAMBER_API_KEY);\n\n      switch (testType) {\n        case \"basic_search\":\n          if (!query || !location) {\n            throw new Error(\"query and location required for basic_search\");\n          }\n          return await chamberClient.searchChamberMembers(query, location, 5);\n\n        case \"verification\":\n          if (!sampleBusiness) {\n            throw new Error(\"sampleBusiness required for verification test\");\n          }\n          return await chamberClient.verifyMembership(sampleBusiness);\n\n        case \"directory_lookup\":\n          // Example: NYC Chamber directory\n          return await chamberClient.getChamberDirectory(\"nyc-chamber\", query);\n\n        case \"full_integration\":\n          const searchResults = await chamberClient.searchChamberMembers(\n            query || \"restaurants\",\n            location || \"New York, NY\",\n            3\n          );\n          if (searchResults.businesses && searchResults.businesses.length > 0) {\n            const verificationResult = await chamberClient.verifyMembership(\n              searchResults.businesses[0]\n            );\n            return {\n              search_results: searchResults,\n              verification_sample: verificationResult,\n              usage_stats: chamberClient.getUsageStats(),\n            };\n          }\n          return searchResults;\n\n        default:\n          throw new Error(`Unknown test type: ${testType}`);\n      }\n    } catch (error) {\n      return {\n        error: `US Chamber API test failed: ${error.message}`,\n        note: \"Make sure US_CHAMBER_API_KEY is configured and the API client is properly implemented\",\n      };\n    }\n  }\n\n  async testBBBAPI(testType, query, location, sampleBusiness) {\n    // Placeholder for Better Business Bureau API\n    return {\n      note: \"BBB API integration not yet implemented\",\n      test_type: testType,\n      planned_features: [\n        \"Business accreditation lookup\",\n        \"Rating and review verification\",\n        \"Complaint history analysis\",\n      ],\n    };\n  }\n\n  async compareAPISources(args) {\n    const { businessType, location, sources, maxResults = 5 } = args;\n\n    const comparison = {\n      query: { businessType, location },\n      sources_tested: sources,\n      max_results: maxResults,\n      timestamp: new Date().toISOString(),\n      results: {},\n      analysis: {},\n    };\n\n    // Test each API source\n    for (const source of sources) {\n      try {\n        let sourceResult = null;\n\n        switch (source) {\n          case \"google_places\":\n            if (this.apiClients.googlePlaces) {\n              sourceResult =\n                await this.apiClients.googlePlaces.searchBusinesses(\n                  businessType,\n                  location,\n                  maxResults\n                );\n            }\n            break;\n\n          case \"foursquare\":\n            if (this.apiClients.foursquare) {\n              sourceResult = await this.apiClients.foursquare.searchBusinesses(\n                businessType,\n                location,\n                maxResults\n              );\n            }\n            break;\n\n          case \"us_chamber\":\n            try {\n              const USChamberClient = require(\"../modules/api-clients/us-chamber-client\");\n              const chamberClient = new USChamberClient(\n                process.env.USCHAMBER_API_KEY\n              );\n              sourceResult = await chamberClient.searchChamberMembers(\n                businessType,\n                location,\n                maxResults\n              );\n            } catch (error) {\n              sourceResult = {\n                error: `US Chamber API not available: ${error.message}`,\n              };\n            }\n            break;\n\n          case \"bbb\":\n            sourceResult = { error: \"BBB API not yet implemented\" };\n            break;\n\n          default:\n            sourceResult = { error: `Unknown API source: ${source}` };\n        }\n\n        comparison.results[source] = {\n          success: !sourceResult?.error,\n          businesses_found: sourceResult?.businesses?.length || 0,\n          data: sourceResult,\n          response_time: Date.now(), // Simplified timing\n        };\n      } catch (error) {\n        comparison.results[source] = {\n          success: false,\n          error: error.message,\n          businesses_found: 0,\n        };\n      }\n    }\n\n    // Generate analysis\n    comparison.analysis = this.analyzeSourceComparison(comparison.results);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(comparison, null, 2),\n        },\n      ],\n    };\n  }\n\n  analyzeSourceComparison(results) {\n    const analysis = {\n      total_sources: Object.keys(results).length,\n      successful_sources: 0,\n      total_businesses_found: 0,\n      source_ranking: [],\n      recommendations: [],\n    };\n\n    // Calculate metrics\n    Object.entries(results).forEach(([source, result]) => {\n      if (result.success) {\n        analysis.successful_sources++;\n      }\n      analysis.total_businesses_found += result.businesses_found;\n\n      analysis.source_ranking.push({\n        source,\n        success: result.success,\n        businesses_found: result.businesses_found,\n        performance_score: result.success\n          ? result.businesses_found * 10 + 50\n          : 0,\n      });\n    });\n\n    // Sort by performance\n    analysis.source_ranking.sort(\n      (a, b) => b.performance_score - a.performance_score\n    );\n\n    // Generate recommendations\n    if (analysis.successful_sources === 0) {\n      analysis.recommendations.push(\n        \"No API sources returned successful results - check API keys and network connectivity\"\n      );\n    } else if (analysis.successful_sources === 1) {\n      analysis.recommendations.push(\n        \"Consider adding more API sources for better coverage and reliability\"\n      );\n    } else {\n      analysis.recommendations.push(\n        `${analysis.successful_sources} sources working well - consider using top performers for production`\n      );\n    }\n\n    if (analysis.total_businesses_found === 0) {\n      analysis.recommendations.push(\n        \"No businesses found - try different search terms or broader location\"\n      );\n    }\n\n    return analysis;\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\"ProspectPro API MCP Server running...\");\n  }\n}\n\n// Start the server\nif (require.main === module) {\n  const server = new ProspectProAPIServer();\n  server.run().catch((error) => {\n    console.error(\"Failed to start API server:\", error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = ProspectProAPIServer;\n"}}},
{"type":"measure","name":"lsp.did_open","count":24,"duration":10.75},
{"type":"mark","name":"lsp.did_open","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro Database MCP Server\n * Provides AI access to Supabase database for lead analysis and management\n */\n\nconst { Server } = require(\"@modelcontextprotocol/sdk/server/index.js\");\nconst {\n  StdioServerTransport,\n} = require(\"@modelcontextprotocol/sdk/server/stdio.js\");\nconst { createClient } = require(\"@supabase/supabase-js\");\n\nclass ProspectProDatabaseServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-database\",\n        version: \"1.0.0\",\n        description:\n          \"ProspectPro Database MCP Server - AI access to lead data and analytics\",\n      },\n      {\n        capabilities: {\n          tools: {},\n          resources: {},\n        },\n      }\n    );\n\n    this.supabase = null;\n    this.setupHandlers();\n  }\n\n  async initializeSupabase() {\n    if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SECRET_KEY) {\n      throw new Error(\"Missing Supabase configuration\");\n    }\n\n    this.supabase = createClient(\n      process.env.SUPABASE_URL,\n      process.env.SUPABASE_SECRET_KEY\n    );\n\n    // Test connection\n    const { data, error } = await this.supabase\n      .from(\"enhanced_leads\")\n      .select(\"count\")\n      .limit(1);\n\n    if (error) {\n      throw new Error(`Supabase connection failed: ${error.message}`);\n    }\n  }\n\n  setupHandlers() {\n    // Tool definitions\n    this.server.setRequestHandler(\"tools/list\", async () => ({\n      tools: [\n        {\n          name: \"query_leads\",\n          description: \"Query enhanced_leads table with filters and analytics\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              filters: {\n                type: \"object\",\n                description: \"SQL WHERE clause conditions\",\n              },\n              limit: {\n                type: \"number\",\n                description: \"Number of results to return\",\n                default: 10,\n              },\n              orderBy: {\n                type: \"string\",\n                description: \"Column to order results by\",\n                default: \"confidence_score\",\n              },\n            },\n          },\n        },\n        {\n          name: \"get_campaign_stats\",\n          description: \"Get campaign statistics and performance metrics\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              campaignId: {\n                type: \"string\",\n                description: \"Campaign ID to analyze\",\n              },\n              timeRange: {\n                type: \"string\",\n                description: \"Time range for analysis (24h, 7d, 30d)\",\n                default: \"24h\",\n              },\n            },\n          },\n        },\n        {\n          name: \"analyze_lead_quality\",\n          description: \"Analyze lead quality patterns and scoring distribution\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              businessType: {\n                type: \"string\",\n                description: \"Filter by business type/industry\",\n              },\n              minConfidence: {\n                type: \"number\",\n                description: \"Minimum confidence score threshold\",\n                default: 70,\n              },\n            },\n          },\n        },\n        {\n          name: \"get_api_costs\",\n          description: \"Retrieve API cost breakdown and budget analysis\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              timeRange: {\n                type: \"string\",\n                description: \"Time range for cost analysis\",\n                default: \"24h\",\n              },\n            },\n          },\n        },\n      ],\n    }));\n\n    // Tool execution handlers\n    this.server.setRequestHandler(\"tools/call\", async (request) => {\n      const { name, arguments: args } = request.params;\n\n      try {\n        await this.initializeSupabase();\n\n        switch (name) {\n          case \"query_leads\":\n            return await this.queryLeads(args);\n          case \"get_campaign_stats\":\n            return await this.getCampaignStats(args);\n          case \"analyze_lead_quality\":\n            return await this.analyzeLeadQuality(args);\n          case \"get_api_costs\":\n            return await this.getApiCosts(args);\n          default:\n            throw new Error(`Unknown tool: ${name}`);\n        }\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error: ${error.message}`,\n            },\n          ],\n          isError: true,\n        };\n      }\n    });\n\n    // Resource handlers\n    this.server.setRequestHandler(\"resources/list\", async () => ({\n      resources: [\n        {\n          uri: \"database://enhanced_leads\",\n          name: \"Enhanced Leads Table\",\n          description:\n            \"Main table containing processed and validated business leads\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"database://campaigns\",\n          name: \"Campaigns Table\",\n          description: \"Campaign tracking and performance data\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"database://api_costs\",\n          name: \"API Costs Table\",\n          description: \"API usage and cost tracking data\",\n          mimeType: \"application/json\",\n        },\n      ],\n    }));\n  }\n\n  async queryLeads(args) {\n    const { filters = {}, limit = 10, orderBy = \"confidence_score\" } = args;\n\n    let query = this.supabase\n      .from(\"enhanced_leads\")\n      .select(\"*\")\n      .order(orderBy, { ascending: false })\n      .limit(limit);\n\n    // Apply filters\n    Object.entries(filters).forEach(([key, value]) => {\n      query = query.eq(key, value);\n    });\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw new Error(`Query failed: ${error.message}`);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              results: data,\n              count: data.length,\n              query_info: {\n                filters,\n                limit,\n                orderBy,\n              },\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async getCampaignStats(args) {\n    const { campaignId, timeRange = \"24h\" } = args;\n\n    // Convert time range to SQL interval\n    const intervalMap = {\n      \"24h\": \"1 day\",\n      \"7d\": \"7 days\",\n      \"30d\": \"30 days\",\n    };\n\n    const { data, error } = await this.supabase.rpc(\"get_campaign_statistics\", {\n      p_campaign_id: campaignId,\n      p_time_interval: intervalMap[timeRange] || \"1 day\",\n    });\n\n    if (error) {\n      throw new Error(`Campaign stats query failed: ${error.message}`);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              campaign_id: campaignId,\n              time_range: timeRange,\n              statistics: data,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async analyzeLeadQuality(args) {\n    const { businessType, minConfidence = 70 } = args;\n\n    let query = this.supabase\n      .from(\"enhanced_leads\")\n      .select(\n        \"confidence_score, business_name, email_confidence, phone_confidence, website_confidence\"\n      )\n      .gte(\"confidence_score\", minConfidence);\n\n    if (businessType) {\n      query = query.ilike(\"business_type\", `%${businessType}%`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw new Error(`Quality analysis failed: ${error.message}`);\n    }\n\n    // Calculate quality metrics\n    const analysis = {\n      total_leads: data.length,\n      average_confidence:\n        data.reduce((sum, lead) => sum + lead.confidence_score, 0) /\n        data.length,\n      confidence_distribution: {\n        high: data.filter((l) => l.confidence_score >= 85).length,\n        medium: data.filter(\n          (l) => l.confidence_score >= 70 && l.confidence_score < 85\n        ).length,\n        low: data.filter((l) => l.confidence_score < 70).length,\n      },\n      contact_quality: {\n        strong_email: data.filter((l) => l.email_confidence >= 80).length,\n        strong_phone: data.filter((l) => l.phone_confidence >= 80).length,\n        strong_website: data.filter((l) => l.website_confidence >= 80).length,\n      },\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(analysis, null, 2),\n        },\n      ],\n    };\n  }\n\n  async getApiCosts(args) {\n    const { timeRange = \"24h\" } = args;\n\n    const intervalMap = {\n      \"24h\": \"1 day\",\n      \"7d\": \"7 days\",\n      \"30d\": \"30 days\",\n    };\n\n    const { data, error } = await this.supabase\n      .from(\"api_costs\")\n      .select(\"*\")\n      .gte(\"created_at\", `now() - interval '${intervalMap[timeRange]}'`)\n      .order(\"created_at\", { ascending: false });\n\n    if (error) {\n      throw new Error(`API costs query failed: ${error.message}`);\n    }\n\n    // Aggregate costs by API\n    const costBreakdown = data.reduce((acc, record) => {\n      const api = record.api_name;\n      if (!acc[api]) {\n        acc[api] = { requests: 0, total_cost: 0 };\n      }\n      acc[api].requests += 1;\n      acc[api].total_cost += record.cost;\n      return acc;\n    }, {});\n\n    const totalCost = Object.values(costBreakdown).reduce(\n      (sum, api) => sum + api.total_cost,\n      0\n    );\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              time_range: timeRange,\n              total_cost: totalCost,\n              cost_breakdown: costBreakdown,\n              total_requests: data.length,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\"ProspectPro Database MCP Server running...\");\n  }\n}\n\n// Start the server\nif (require.main === module) {\n  const server = new ProspectProDatabaseServer();\n  server.run().catch((error) => {\n    console.error(\"Failed to start database server:\", error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = ProspectProDatabaseServer;\n"}}},
{"type":"measure","name":"lsp.did_open","count":25,"duration":3.498},
{"type":"mark","name":"lsp.did_open","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro Monitoring MCP Server\n * Provides AI access to real-time monitoring, diagnostics, and performance metrics\n */\n\nconst { Server } = require(\"@modelcontextprotocol/sdk/server/index.js\");\nconst {\n  StdioServerTransport,\n} = require(\"@modelcontextprotocol/sdk/server/stdio.js\");\nconst fs = require(\"fs\").promises;\nconst path = require(\"path\");\n\nclass ProspectProMonitoringServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-monitoring\",\n        version: \"1.0.0\",\n        description:\n          \"ProspectPro Monitoring MCP Server - AI access to system diagnostics and performance\",\n      },\n      {\n        capabilities: {\n          tools: {},\n          resources: {},\n        },\n      }\n    );\n\n    this.workspaceRoot = process.env.WORKSPACE_ROOT || process.cwd();\n    this.setupHandlers();\n  }\n\n  setupHandlers() {\n    // Tool definitions\n    this.server.setRequestHandler(\"tools/list\", async () => ({\n      tools: [\n        {\n          name: \"get_system_health\",\n          description: \"Get comprehensive system health status\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeDetailedMetrics: {\n                type: \"boolean\",\n                description: \"Include detailed performance metrics\",\n                default: false,\n              },\n            },\n          },\n        },\n        {\n          name: \"read_diagnostics\",\n          description: \"Read and analyze diagnostics.json file\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeHistory: {\n                type: \"boolean\",\n                description: \"Include historical diagnostic data if available\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"analyze_logs\",\n          description: \"Analyze application logs for patterns and issues\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              logType: {\n                type: \"string\",\n                description: \"Type of logs to analyze\",\n                enum: [\"startup\", \"error\", \"api\", \"all\"],\n                default: \"all\",\n              },\n              timeRange: {\n                type: \"string\",\n                description: \"Time range for log analysis\",\n                enum: [\"1h\", \"24h\", \"7d\"],\n                default: \"24h\",\n              },\n            },\n          },\n        },\n        {\n          name: \"check_docker_status\",\n          description: \"Check Docker container and service status\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeResourceUsage: {\n                type: \"boolean\",\n                description: \"Include resource usage statistics\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"validate_configuration\",\n          description: \"Validate system configuration and detect issues\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              strict: {\n                type: \"boolean\",\n                description: \"Enable strict validation mode\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"generate_performance_report\",\n          description: \"Generate comprehensive performance analysis report\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeRecommendations: {\n                type: \"boolean\",\n                description: \"Include performance optimization recommendations\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"monitor_api_quotas\",\n          description: \"Monitor API usage quotas and budget limits\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              alertThreshold: {\n                type: \"number\",\n                description: \"Alert when usage exceeds this percentage\",\n                default: 80,\n              },\n            },\n          },\n        },\n      ],\n    }));\n\n    // Tool execution handlers\n    this.server.setRequestHandler(\"tools/call\", async (request) => {\n      const { name, arguments: args } = request.params;\n\n      try {\n        switch (name) {\n          case \"get_system_health\":\n            return await this.getSystemHealth(args);\n          case \"read_diagnostics\":\n            return await this.readDiagnostics(args);\n          case \"analyze_logs\":\n            return await this.analyzeLogs(args);\n          case \"check_docker_status\":\n            return await this.checkDockerStatus(args);\n          case \"validate_configuration\":\n            return await this.validateConfiguration(args);\n          case \"generate_performance_report\":\n            return await this.generatePerformanceReport(args);\n          case \"monitor_api_quotas\":\n            return await this.monitorAPIQuotas(args);\n          default:\n            throw new Error(`Unknown tool: ${name}`);\n        }\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error: ${error.message}`,\n            },\n          ],\n          isError: true,\n        };\n      }\n    });\n\n    // Resource handlers\n    this.server.setRequestHandler(\"resources/list\", async () => ({\n      resources: [\n        {\n          uri: \"monitoring://system-health\",\n          name: \"System Health Status\",\n          description: \"Real-time system health and performance metrics\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"monitoring://diagnostics\",\n          name: \"Diagnostics Data\",\n          description: \"System diagnostic information and error reports\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"monitoring://logs\",\n          name: \"Application Logs\",\n          description: \"Application logs and error tracking\",\n          mimeType: \"text/plain\",\n        },\n      ],\n    }));\n  }\n\n  async getSystemHealth(args) {\n    const { includeDetailedMetrics = false } = args;\n\n    const health = {\n      timestamp: new Date().toISOString(),\n      status: \"unknown\",\n      components: {},\n      metrics: {},\n    };\n\n    try {\n      // Check basic file system health\n      const packageJson = await this.checkFile(\"package.json\");\n      const dockerCompose = await this.checkFile(\"docker-compose.yml\");\n      const server = await this.checkFile(\"server.js\");\n\n      health.components = {\n        filesystem: {\n          status: \"healthy\",\n          package_json: packageJson.exists,\n          docker_compose: dockerCompose.exists,\n          server_file: server.exists,\n        },\n      };\n\n      // Check diagnostics file\n      try {\n        const diagnosticsPath = path.join(\n          this.workspaceRoot,\n          \"diagnostics.json\"\n        );\n        const diagnosticsContent = await fs.readFile(diagnosticsPath, \"utf8\");\n        const diagnostics = JSON.parse(diagnosticsContent);\n\n        health.components.diagnostics = {\n          status: diagnostics.status || \"unknown\",\n          last_check: diagnostics.timestamp,\n          database_connection: diagnostics.database?.status === \"connected\",\n        };\n      } catch (error) {\n        health.components.diagnostics = {\n          status: \"unavailable\",\n          error: \"Diagnostics file not found or invalid\",\n        };\n      }\n\n      // Check VS Code configuration\n      const vscodeSettings = await this.checkFile(\".vscode/settings.json\");\n      const vscodeExtensions = await this.checkFile(\".vscode/extensions.json\");\n      const mcpConfig = await this.checkFile(\".vscode/mcp-config.json\");\n\n      health.components.vscode = {\n        status: vscodeSettings.exists ? \"configured\" : \"missing\",\n        settings: vscodeSettings.exists,\n        extensions: vscodeExtensions.exists,\n        mcp_config: mcpConfig.exists,\n      };\n\n      // Overall health determination\n      const criticalComponents = [\"filesystem\", \"vscode\"];\n      const healthyComponents = criticalComponents.filter(\n        (comp) =>\n          health.components[comp]?.status === \"healthy\" ||\n          health.components[comp]?.status === \"configured\"\n      );\n\n      if (healthyComponents.length === criticalComponents.length) {\n        health.status = \"healthy\";\n      } else if (healthyComponents.length > 0) {\n        health.status = \"degraded\";\n      } else {\n        health.status = \"unhealthy\";\n      }\n\n      if (includeDetailedMetrics) {\n        health.metrics = await this.gatherDetailedMetrics();\n      }\n    } catch (error) {\n      health.status = \"error\";\n      health.error = error.message;\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(health, null, 2),\n        },\n      ],\n    };\n  }\n\n  async checkFile(relativePath) {\n    try {\n      const filePath = path.join(this.workspaceRoot, relativePath);\n      const stats = await fs.stat(filePath);\n      return {\n        exists: true,\n        size: stats.size,\n        modified: stats.mtime,\n      };\n    } catch (error) {\n      return {\n        exists: false,\n        error: error.message,\n      };\n    }\n  }\n\n  async gatherDetailedMetrics() {\n    const metrics = {\n      disk_usage: {},\n      file_counts: {},\n      memory_estimates: {},\n    };\n\n    try {\n      // Calculate directory sizes\n      const directories = [\"modules\", \"api\", \"database\", \"docs\", \"mcp-servers\"];\n\n      for (const dir of directories) {\n        try {\n          const dirPath = path.join(this.workspaceRoot, dir);\n          const size = await this.getDirectorySize(dirPath);\n          metrics.disk_usage[dir] = size;\n        } catch (error) {\n          metrics.disk_usage[dir] = { error: error.message };\n        }\n      }\n\n      // Count files by type\n      const fileExtensions = await this.countFilesByExtension();\n      metrics.file_counts = fileExtensions;\n\n      // Estimate memory usage based on file sizes\n      const totalSize = Object.values(metrics.disk_usage)\n        .filter((item) => typeof item === \"number\")\n        .reduce((sum, size) => sum + size, 0);\n\n      metrics.memory_estimates = {\n        total_disk_usage: totalSize,\n        estimated_memory_footprint: Math.round(totalSize * 0.1), // Rough estimate\n      };\n    } catch (error) {\n      metrics.error = error.message;\n    }\n\n    return metrics;\n  }\n\n  async getDirectorySize(dirPath) {\n    let totalSize = 0;\n\n    try {\n      const items = await fs.readdir(dirPath);\n\n      for (const item of items) {\n        const itemPath = path.join(dirPath, item);\n        const stats = await fs.stat(itemPath);\n\n        if (stats.isDirectory()) {\n          if (item !== \"node_modules\" && !item.startsWith(\".\")) {\n            totalSize += await this.getDirectorySize(itemPath);\n          }\n        } else {\n          totalSize += stats.size;\n        }\n      }\n    } catch (error) {\n      // Skip inaccessible directories\n    }\n\n    return totalSize;\n  }\n\n  async countFilesByExtension() {\n    const counts = {};\n\n    const countInDirectory = async (dirPath) => {\n      try {\n        const items = await fs.readdir(dirPath);\n\n        for (const item of items) {\n          const itemPath = path.join(dirPath, item);\n          const stats = await fs.stat(itemPath);\n\n          if (stats.isDirectory()) {\n            if (\n              item !== \"node_modules\" &&\n              !item.startsWith(\".\") &&\n              item !== \"archive\"\n            ) {\n              await countInDirectory(itemPath);\n            }\n          } else {\n            const ext = path.extname(item) || \"no-extension\";\n            counts[ext] = (counts[ext] || 0) + 1;\n          }\n        }\n      } catch (error) {\n        // Skip inaccessible directories\n      }\n    };\n\n    await countInDirectory(this.workspaceRoot);\n    return counts;\n  }\n\n  async readDiagnostics(args) {\n    const { includeHistory = true } = args;\n\n    try {\n      const diagnosticsPath = path.join(this.workspaceRoot, \"diagnostics.json\");\n      const content = await fs.readFile(diagnosticsPath, \"utf8\");\n      const diagnostics = JSON.parse(content);\n\n      const analysis = {\n        current_diagnostics: diagnostics,\n        analysis: {\n          timestamp: diagnostics.timestamp,\n          status: diagnostics.status,\n          critical_issues: [],\n          warnings: [],\n          recommendations: [],\n        },\n      };\n\n      // Analyze diagnostics data\n      if (diagnostics.database) {\n        if (diagnostics.database.status !== \"connected\") {\n          analysis.analysis.critical_issues.push(\"Database connection failed\");\n        }\n        if (diagnostics.database.error) {\n          analysis.analysis.critical_issues.push(\n            `Database error: ${diagnostics.database.error}`\n          );\n        }\n      }\n\n      if (diagnostics.environment) {\n        const missingVars = diagnostics.environment.missing_variables || [];\n        if (missingVars.length > 0) {\n          analysis.analysis.warnings.push(\n            `Missing environment variables: ${missingVars.join(\", \")}`\n          );\n        }\n      }\n\n      // Generate recommendations\n      if (analysis.analysis.critical_issues.length > 0) {\n        analysis.analysis.recommendations.push(\n          \"Resolve database connection issues immediately\"\n        );\n      }\n      if (analysis.analysis.warnings.length > 0) {\n        analysis.analysis.recommendations.push(\n          \"Configure missing environment variables\"\n        );\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(analysis, null, 2),\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(\n              {\n                error: `Failed to read diagnostics: ${error.message}`,\n                suggestion:\n                  \"Run the application to generate diagnostics.json file\",\n              },\n              null,\n              2\n            ),\n          },\n        ],\n      };\n    }\n  }\n\n  async analyzeLogs(args) {\n    const { logType = \"all\", timeRange = \"24h\" } = args;\n\n    const logFiles = [\n      \"startup.log\",\n      \"production.log\",\n      \"database-validation.log\",\n      \"server-test.log\",\n    ];\n\n    const analysis = {\n      log_type: logType,\n      time_range: timeRange,\n      log_files_checked: [],\n      patterns_found: {\n        errors: [],\n        warnings: [],\n        info: [],\n      },\n      summary: {},\n    };\n\n    for (const logFile of logFiles) {\n      try {\n        const logPath = path.join(this.workspaceRoot, logFile);\n        const content = await fs.readFile(logPath, \"utf8\");\n        const stats = await fs.stat(logPath);\n\n        analysis.log_files_checked.push({\n          file: logFile,\n          size: stats.size,\n          last_modified: stats.mtime,\n          line_count: content.split(\"\\n\").length,\n        });\n\n        // Pattern matching for different log levels\n        const errorPatterns = content.match(/ERROR|Error:|error:/gi) || [];\n        const warningPatterns = content.match(/WARN|Warning:|warning:/gi) || [];\n        const infoPatterns = content.match(/INFO|info:/gi) || [];\n\n        if (errorPatterns.length > 0) {\n          analysis.patterns_found.errors.push({\n            file: logFile,\n            count: errorPatterns.length,\n            recent_errors: this.extractRecentLogEntries(content, \"error\", 5),\n          });\n        }\n\n        if (warningPatterns.length > 0) {\n          analysis.patterns_found.warnings.push({\n            file: logFile,\n            count: warningPatterns.length,\n            recent_warnings: this.extractRecentLogEntries(\n              content,\n              \"warning\",\n              3\n            ),\n          });\n        }\n\n        analysis.patterns_found.info.push({\n          file: logFile,\n          count: infoPatterns.length,\n        });\n      } catch (error) {\n        analysis.log_files_checked.push({\n          file: logFile,\n          error: `Could not read: ${error.message}`,\n        });\n      }\n    }\n\n    analysis.summary = {\n      total_log_files: analysis.log_files_checked.filter((f) => !f.error)\n        .length,\n      total_errors: analysis.patterns_found.errors.reduce(\n        (sum, e) => sum + e.count,\n        0\n      ),\n      total_warnings: analysis.patterns_found.warnings.reduce(\n        (sum, w) => sum + w.count,\n        0\n      ),\n      health_status:\n        analysis.patterns_found.errors.length === 0\n          ? \"healthy\"\n          : \"needs_attention\",\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(analysis, null, 2),\n        },\n      ],\n    };\n  }\n\n  extractRecentLogEntries(content, level, limit) {\n    const lines = content.split(\"\\n\");\n    const pattern = new RegExp(level, \"i\");\n    const matches = lines\n      .filter((line) => pattern.test(line))\n      .slice(-limit)\n      .map((line) => line.trim());\n\n    return matches;\n  }\n\n  async checkDockerStatus(args) {\n    const { includeResourceUsage = true } = args;\n\n    const dockerStatus = {\n      docker_available: false,\n      containers: [],\n      compose_files: [],\n      resource_usage: {},\n    };\n\n    // Check for Docker Compose files\n    const composeFiles = [\n      \"docker-compose.yml\",\n      \"docker-compose.dev.yml\",\n      \"docker-compose.secrets.yml\",\n    ];\n\n    for (const file of composeFiles) {\n      const fileInfo = await this.checkFile(file);\n      dockerStatus.compose_files.push({\n        name: file,\n        exists: fileInfo.exists,\n        size: fileInfo.size,\n      });\n    }\n\n    // Check Dockerfile\n    const dockerfile = await this.checkFile(\"Dockerfile\");\n    const dockerfileDev = await this.checkFile(\"Dockerfile.dev\");\n\n    dockerStatus.docker_files = {\n      dockerfile: dockerfile.exists,\n      dockerfile_dev: dockerfileDev.exists,\n    };\n\n    // Note: We can't actually check running containers without docker CLI\n    dockerStatus.note =\n      \"Container status requires Docker CLI access. Use terminal commands to check running containers.\";\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(dockerStatus, null, 2),\n        },\n      ],\n    };\n  }\n\n  async validateConfiguration(args) {\n    const { strict = true } = args;\n\n    const validation = {\n      validation_mode: strict ? \"strict\" : \"standard\",\n      results: {},\n      issues: [],\n      recommendations: [],\n    };\n\n    // Check critical files\n    const criticalFiles = [\n      \"package.json\",\n      \"server.js\",\n      \"docker-compose.yml\",\n      \".vscode/settings.json\",\n      \".vscode/mcp-config.json\",\n    ];\n\n    validation.results.critical_files = {};\n\n    for (const file of criticalFiles) {\n      const fileInfo = await this.checkFile(file);\n      validation.results.critical_files[file] = fileInfo;\n\n      if (!fileInfo.exists) {\n        validation.issues.push(`Missing critical file: ${file}`);\n      }\n    }\n\n    // Check directory structure\n    const requiredDirectories = [\"api\", \"modules\", \"config\", \"mcp-servers\"];\n    validation.results.directory_structure = {};\n\n    for (const dir of requiredDirectories) {\n      const dirInfo = await this.checkFile(dir);\n      validation.results.directory_structure[dir] = dirInfo;\n\n      if (!dirInfo.exists) {\n        validation.issues.push(`Missing required directory: ${dir}`);\n      }\n    }\n\n    // Validate VS Code configuration\n    try {\n      const settingsPath = path.join(\n        this.workspaceRoot,\n        \".vscode\",\n        \"settings.json\"\n      );\n      const settingsContent = await fs.readFile(settingsPath, \"utf8\");\n      const settings = JSON.parse(settingsContent);\n\n      validation.results.vscode_config = {\n        copilot_enabled: !!settings[\"github.copilot.enable\"],\n        mcp_enabled: !!settings[\"mcp.enable\"],\n        performance_optimized: !!settings[\"editor.minimap.enabled\"] === false,\n      };\n\n      if (!settings[\"mcp.enable\"]) {\n        validation.issues.push(\"MCP is not enabled in VS Code settings\");\n        validation.recommendations.push(\n          \"Enable MCP in VS Code settings for AI-powered development\"\n        );\n      }\n    } catch (error) {\n      validation.issues.push(\"Could not validate VS Code configuration\");\n    }\n\n    // Generate recommendations based on issues\n    if (validation.issues.length > 0) {\n      validation.recommendations.push(\n        \"Address all configuration issues before proceeding with development\"\n      );\n    } else {\n      validation.recommendations.push(\n        \"Configuration appears to be complete and healthy\"\n      );\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(validation, null, 2),\n        },\n      ],\n    };\n  }\n\n  async generatePerformanceReport(args) {\n    const { includeRecommendations = true } = args;\n\n    const report = {\n      generated_at: new Date().toISOString(),\n      performance_metrics: {},\n      analysis: {},\n      recommendations: [],\n    };\n\n    // File system performance metrics\n    const metrics = await this.gatherDetailedMetrics();\n    report.performance_metrics = metrics;\n\n    // Analyze performance characteristics\n    const totalFiles = Object.values(metrics.file_counts || {}).reduce(\n      (sum, count) => sum + count,\n      0\n    );\n    const jsFiles = metrics.file_counts?.[\".js\"] || 0;\n    const jsonFiles = metrics.file_counts?.[\".json\"] || 0;\n\n    report.analysis = {\n      total_files: totalFiles,\n      javascript_files: jsFiles,\n      configuration_files: jsonFiles,\n      code_to_config_ratio:\n        jsFiles > 0 ? (jsFiles / (jsonFiles + 1)).toFixed(2) : \"N/A\",\n      estimated_complexity: this.estimateProjectComplexity(metrics, totalFiles),\n    };\n\n    if (includeRecommendations) {\n      // Performance recommendations based on analysis\n      if (totalFiles > 1000) {\n        report.recommendations.push(\n          \"Consider implementing file watching exclusions for better VS Code performance\"\n        );\n      }\n\n      if (report.performance_metrics.total_disk_usage > 100000000) {\n        // > 100MB\n        report.recommendations.push(\n          \"Project size is large - consider archiving unused files\"\n        );\n      }\n\n      report.recommendations.push(\n        \"Enable VS Code performance optimizations as configured\"\n      );\n      report.recommendations.push(\n        \"Use MCP servers to offload AI processing tasks\"\n      );\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(report, null, 2),\n        },\n      ],\n    };\n  }\n\n  estimateProjectComplexity(metrics, totalFiles) {\n    const jsFiles = metrics.file_counts?.[\".js\"] || 0;\n    const sqlFiles = metrics.file_counts?.[\".sql\"] || 0;\n    const configFiles =\n      (metrics.file_counts?.[\".json\"] || 0) +\n      (metrics.file_counts?.[\".yml\"] || 0);\n\n    let complexity = \"simple\";\n\n    if (jsFiles > 50 || sqlFiles > 10 || configFiles > 15) {\n      complexity = \"complex\";\n    } else if (jsFiles > 20 || sqlFiles > 5 || configFiles > 8) {\n      complexity = \"moderate\";\n    }\n\n    return {\n      level: complexity,\n      factors: {\n        javascript_files: jsFiles,\n        sql_files: sqlFiles,\n        config_files: configFiles,\n        total_files: totalFiles,\n      },\n    };\n  }\n\n  async monitorAPIQuotas(args) {\n    const { alertThreshold = 80 } = args;\n\n    const quotaMonitoring = {\n      alert_threshold: alertThreshold,\n      api_services: {},\n      alerts: [],\n      recommendations: [],\n    };\n\n    // Mock API quota data (in real implementation, this would connect to actual APIs)\n    const apiServices = [\n      {\n        name: \"Google Places\",\n        quota: 1000,\n        used: 250,\n        cost_per_request: 0.032,\n      },\n      { name: \"Foursquare Places\", quota: 950, used: 150, cost_per_request: 0 },\n      { name: \"Hunter.io\", quota: 100, used: 45, cost_per_request: 0.04 },\n      { name: \"NeverBounce\", quota: 1000, used: 320, cost_per_request: 0.008 },\n    ];\n\n    apiServices.forEach((service) => {\n      const usagePercent = (service.used / service.quota) * 100;\n      const remainingRequests = service.quota - service.used;\n      const estimatedCost = service.used * service.cost_per_request;\n\n      quotaMonitoring.api_services[service.name] = {\n        quota_limit: service.quota,\n        requests_used: service.used,\n        usage_percentage: Math.round(usagePercent),\n        remaining_requests: remainingRequests,\n        estimated_cost: estimatedCost.toFixed(3),\n        status: usagePercent >= alertThreshold ? \"alert\" : \"ok\",\n      };\n\n      if (usagePercent >= alertThreshold) {\n        quotaMonitoring.alerts.push({\n          service: service.name,\n          usage_percent: Math.round(usagePercent),\n          remaining: remainingRequests,\n          severity: usagePercent >= 95 ? \"critical\" : \"warning\",\n        });\n      }\n    });\n\n    // Generate recommendations\n    if (quotaMonitoring.alerts.length > 0) {\n      quotaMonitoring.recommendations.push(\n        \"Monitor API usage closely - approaching quota limits\"\n      );\n      quotaMonitoring.recommendations.push(\n        \"Consider implementing more aggressive caching strategies\"\n      );\n    }\n\n    const totalCost = Object.values(quotaMonitoring.api_services).reduce(\n      (sum, service) => sum + parseFloat(service.estimated_cost),\n      0\n    );\n\n    quotaMonitoring.budget_summary = {\n      total_estimated_cost: totalCost.toFixed(3),\n      most_expensive_service: Object.entries(quotaMonitoring.api_services).sort(\n        ([, a], [, b]) =>\n          parseFloat(b.estimated_cost) - parseFloat(a.estimated_cost)\n      )[0]?.[0],\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(quotaMonitoring, null, 2),\n        },\n      ],\n    };\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\"ProspectPro Monitoring MCP Server running...\");\n  }\n}\n\n// Start the server\nif (require.main === module) {\n  const server = new ProspectProMonitoringServer();\n  server.run().catch((error) => {\n    console.error(\"Failed to start monitoring server:\", error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = ProspectProMonitoringServer;\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":21,"duration":0.053},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":22,"duration":0.038},
{"type":"measure","name":"lsp.did_open","count":26,"duration":18.704},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.did_open","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro Filesystem MCP Server\n * Provides AI access to codebase analysis and file management\n */\n\nconst { Server } = require(\"@modelcontextprotocol/sdk/server/index.js\");\nconst {\n  StdioServerTransport,\n} = require(\"@modelcontextprotocol/sdk/server/stdio.js\");\nconst fs = require(\"fs\").promises;\nconst path = require(\"path\");\n\nclass ProspectProFilesystemServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-filesystem\",\n        version: \"1.0.0\",\n        description:\n          \"ProspectPro Filesystem MCP Server - AI access to codebase analysis\",\n      },\n      {\n        capabilities: {\n          tools: {},\n          resources: {},\n        },\n      }\n    );\n\n    this.workspaceRoot = process.env.WORKSPACE_ROOT || process.cwd();\n    this.setupHandlers();\n  }\n\n  setupHandlers() {\n    // Tool definitions\n    this.server.setRequestHandler(\"tools/list\", async () => ({\n      tools: [\n        {\n          name: \"analyze_project_structure\",\n          description: \"Analyze the overall project structure and architecture\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeFiles: {\n                type: \"boolean\",\n                description: \"Include file counts and sizes\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"find_code_patterns\",\n          description: \"Search for specific code patterns across the project\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              pattern: {\n                type: \"string\",\n                description: \"Regex pattern or string to search for\",\n              },\n              fileExtensions: {\n                type: \"array\",\n                items: { type: \"string\" },\n                description: \"File extensions to search in\",\n                default: [\".js\", \".json\", \".md\", \".sql\"],\n              },\n              excludeDirectories: {\n                type: \"array\",\n                items: { type: \"string\" },\n                description: \"Directories to exclude from search\",\n                default: [\"node_modules\", \".git\", \"archive\"],\n              },\n            },\n            required: [\"pattern\"],\n          },\n        },\n        {\n          name: \"analyze_api_clients\",\n          description: \"Analyze API client implementations and patterns\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              detailed: {\n                type: \"boolean\",\n                description: \"Include detailed method analysis\",\n                default: false,\n              },\n            },\n          },\n        },\n        {\n          name: \"check_fake_data_violations\",\n          description: \"Check for potential fake data generation patterns\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              strict: {\n                type: \"boolean\",\n                description: \"Enable strict checking for suspicious patterns\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"analyze_error_handling\",\n          description: \"Analyze error handling patterns across the codebase\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeSuggestions: {\n                type: \"boolean\",\n                description: \"Include improvement suggestions\",\n                default: true,\n              },\n            },\n          },\n        },\n        {\n          name: \"get_configuration_overview\",\n          description:\n            \"Get an overview of all configuration files and settings\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              includeSecrets: {\n                type: \"boolean\",\n                description: \"Include information about secret management\",\n                default: false,\n              },\n            },\n          },\n        },\n      ],\n    }));\n\n    // Tool execution handlers\n    this.server.setRequestHandler(\"tools/call\", async (request) => {\n      const { name, arguments: args } = request.params;\n\n      try {\n        switch (name) {\n          case \"analyze_project_structure\":\n            return await this.analyzeProjectStructure(args);\n          case \"find_code_patterns\":\n            return await this.findCodePatterns(args);\n          case \"analyze_api_clients\":\n            return await this.analyzeAPIClients(args);\n          case \"check_fake_data_violations\":\n            return await this.checkFakeDataViolations(args);\n          case \"analyze_error_handling\":\n            return await this.analyzeErrorHandling(args);\n          case \"get_configuration_overview\":\n            return await this.getConfigurationOverview(args);\n          default:\n            throw new Error(`Unknown tool: ${name}`);\n        }\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error: ${error.message}`,\n            },\n          ],\n          isError: true,\n        };\n      }\n    });\n\n    // Resource handlers\n    this.server.setRequestHandler(\"resources/list\", async () => ({\n      resources: [\n        {\n          uri: \"filesystem://project-structure\",\n          name: \"Project Structure Analysis\",\n          description: \"Complete analysis of project directory structure\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"filesystem://api-clients\",\n          name: \"API Clients Directory\",\n          description: \"Analysis of API client implementations\",\n          mimeType: \"application/json\",\n        },\n        {\n          uri: \"filesystem://core-modules\",\n          name: \"Core Modules Directory\",\n          description: \"Analysis of core business logic modules\",\n          mimeType: \"application/json\",\n        },\n      ],\n    }));\n  }\n\n  async analyzeProjectStructure(args) {\n    const { includeFiles = true } = args;\n\n    const structure = await this.walkDirectory(\n      this.workspaceRoot,\n      includeFiles\n    );\n    const analysis = this.analyzeStructure(structure);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              workspace_root: this.workspaceRoot,\n              structure_analysis: analysis,\n              directory_tree: structure,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async walkDirectory(dirPath, includeFiles, currentDepth = 0, maxDepth = 4) {\n    if (currentDepth > maxDepth) return null;\n\n    const result = {\n      name: path.basename(dirPath),\n      type: \"directory\",\n      children: [],\n    };\n\n    try {\n      const items = await fs.readdir(dirPath);\n\n      for (const item of items) {\n        if (item.startsWith(\".\") && !item.includes(\"vscode\")) continue;\n        if ([\"node_modules\", \"archive\"].includes(item)) continue;\n\n        const itemPath = path.join(dirPath, item);\n        const stats = await fs.stat(itemPath);\n\n        if (stats.isDirectory()) {\n          const childResult = await this.walkDirectory(\n            itemPath,\n            includeFiles,\n            currentDepth + 1,\n            maxDepth\n          );\n          if (childResult) result.children.push(childResult);\n        } else if (includeFiles) {\n          result.children.push({\n            name: item,\n            type: \"file\",\n            size: stats.size,\n            extension: path.extname(item),\n          });\n        }\n      }\n    } catch (error) {\n      result.error = error.message;\n    }\n\n    return result;\n  }\n\n  analyzeStructure(structure) {\n    const analysis = {\n      total_directories: 0,\n      total_files: 0,\n      file_types: {},\n      largest_files: [],\n      key_directories: [],\n    };\n\n    const analyzeNode = (node) => {\n      if (node.type === \"directory\") {\n        analysis.total_directories++;\n\n        // Identify key directories\n        const keyDirs = [\n          \"api\",\n          \"modules\",\n          \"config\",\n          \"database\",\n          \"mcp-servers\",\n          \"scripts\",\n        ];\n        if (keyDirs.includes(node.name)) {\n          analysis.key_directories.push({\n            name: node.name,\n            children_count: node.children?.length || 0,\n          });\n        }\n\n        if (node.children) {\n          node.children.forEach(analyzeNode);\n        }\n      } else if (node.type === \"file\") {\n        analysis.total_files++;\n\n        const ext = node.extension || \"no-extension\";\n        analysis.file_types[ext] = (analysis.file_types[ext] || 0) + 1;\n\n        if (node.size > 10000) {\n          // Files larger than 10KB\n          analysis.largest_files.push({\n            name: node.name,\n            size: node.size,\n            extension: ext,\n          });\n        }\n      }\n    };\n\n    analyzeNode(structure);\n\n    // Sort largest files by size\n    analysis.largest_files.sort((a, b) => b.size - a.size);\n    analysis.largest_files = analysis.largest_files.slice(0, 10);\n\n    return analysis;\n  }\n\n  async findCodePatterns(args) {\n    const {\n      pattern,\n      fileExtensions = [\".js\", \".json\", \".md\", \".sql\"],\n      excludeDirectories = [\"node_modules\", \".git\", \"archive\"],\n    } = args;\n\n    const results = [];\n    const regex = new RegExp(pattern, \"gi\");\n\n    const searchInDirectory = async (dirPath) => {\n      try {\n        const items = await fs.readdir(dirPath);\n\n        for (const item of items) {\n          const itemPath = path.join(dirPath, item);\n          const stats = await fs.stat(itemPath);\n\n          if (stats.isDirectory()) {\n            if (!excludeDirectories.includes(item) && !item.startsWith(\".\")) {\n              await searchInDirectory(itemPath);\n            }\n          } else if (fileExtensions.includes(path.extname(item))) {\n            try {\n              const content = await fs.readFile(itemPath, \"utf8\");\n              const matches = [...content.matchAll(regex)];\n\n              if (matches.length > 0) {\n                const lines = content.split(\"\\n\");\n                const matchDetails = matches.map((match) => {\n                  const lineIndex =\n                    content.substring(0, match.index).split(\"\\n\").length - 1;\n                  return {\n                    match: match[0],\n                    line_number: lineIndex + 1,\n                    line_content: lines[lineIndex]?.trim(),\n                  };\n                });\n\n                results.push({\n                  file: path.relative(this.workspaceRoot, itemPath),\n                  matches: matchDetails.length,\n                  details: matchDetails,\n                });\n              }\n            } catch (readError) {\n              // Skip files that can't be read\n            }\n          }\n        }\n      } catch (error) {\n        // Skip directories that can't be accessed\n      }\n    };\n\n    await searchInDirectory(this.workspaceRoot);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              pattern,\n              search_config: { fileExtensions, excludeDirectories },\n              total_matches: results.reduce((sum, r) => sum + r.matches, 0),\n              files_with_matches: results.length,\n              results,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async analyzeAPIClients(args) {\n    const { detailed = false } = args;\n    const apiClientsPath = path.join(\n      this.workspaceRoot,\n      \"modules\",\n      \"api-clients\"\n    );\n\n    try {\n      const files = await fs.readdir(apiClientsPath);\n      const analysis = { clients: [], summary: {} };\n\n      for (const file of files) {\n        if (path.extname(file) === \".js\") {\n          const filePath = path.join(apiClientsPath, file);\n          const content = await fs.readFile(filePath, \"utf8\");\n\n          const clientAnalysis = {\n            name: file,\n            size: content.length,\n            class_count: (content.match(/class\\s+\\w+/g) || []).length,\n            method_count: (content.match(/async\\s+\\w+\\(|^\\s*\\w+\\s*\\(/gm) || [])\n              .length,\n            error_handling: (content.match(/try\\s*{|catch\\s*\\(/g) || []).length,\n            caching_implemented:\n              content.includes(\"cache\") || content.includes(\"Cache\"),\n            usage_tracking:\n              content.includes(\"usageStats\") || content.includes(\"usage\"),\n            api_key_required:\n              content.includes(\"apiKey\") || content.includes(\"API_KEY\"),\n          };\n\n          if (detailed) {\n            clientAnalysis.methods = this.extractMethods(content);\n            clientAnalysis.dependencies = this.extractDependencies(content);\n          }\n\n          analysis.clients.push(clientAnalysis);\n        }\n      }\n\n      analysis.summary = {\n        total_clients: analysis.clients.length,\n        total_methods: analysis.clients.reduce(\n          (sum, c) => sum + c.method_count,\n          0\n        ),\n        clients_with_caching: analysis.clients.filter(\n          (c) => c.caching_implemented\n        ).length,\n        clients_with_usage_tracking: analysis.clients.filter(\n          (c) => c.usage_tracking\n        ).length,\n      };\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(analysis, null, 2),\n          },\n        ],\n      };\n    } catch (error) {\n      throw new Error(`Failed to analyze API clients: ${error.message}`);\n    }\n  }\n\n  async checkFakeDataViolations(args) {\n    const { strict = true } = args;\n\n    const suspiciousPatterns = [\n      // Fake business names\n      /[\"']Artisan\\s+Bistro[\"']/gi,\n      /[\"']Downtown\\s+Café?[\"']/gi,\n      /[\"']Business\\s+LLC[\"']/gi,\n      /[\"']Company\\s+Inc\\.?[\"']/gi,\n\n      // Sequential addresses\n      /[\"']\\d+\\s+Main\\s+St[\"']/gi,\n      /[\"']\\d+\\s+First\\s+Ave[\"']/gi,\n\n      // Fake phone numbers\n      /\\(555\\)\\s*\\d{3}-\\d{4}/gi,\n      /\\(000\\)\\s*\\d{3}-\\d{4}/gi,\n\n      // Example domains\n      /[\"']https?:\\/\\/example\\.com[\"']/gi,\n      /[\"']https?:\\/\\/business\\.com[\"']/gi,\n\n      // Fake data generation functions\n      /generateFake\\w*/gi,\n      /createFake\\w*/gi,\n      /mockData/gi,\n    ];\n\n    if (strict) {\n      suspiciousPatterns.push(\n        /const\\s+\\w*businesses\\w*\\s*=\\s*\\[/gi, // Hardcoded business arrays\n        /const\\s+\\w*leads\\w*\\s*=\\s*\\[/gi, // Hardcoded lead arrays\n        /return\\s*\\[.*\".*business.*\".*\\]/gi // Return hardcoded business data\n      );\n    }\n\n    const violations = [];\n\n    for (const pattern of suspiciousPatterns) {\n      const patternResults = await this.findCodePatterns({\n        pattern: pattern.source,\n        fileExtensions: [\".js\", \".json\"],\n        excludeDirectories: [\"node_modules\", \".git\", \"archive\", \"tests\"],\n      });\n\n      if (patternResults.content[0].text) {\n        const data = JSON.parse(patternResults.content[0].text);\n        if (data.results.length > 0) {\n          violations.push({\n            pattern: pattern.source,\n            severity: strict ? \"HIGH\" : \"MEDIUM\",\n            matches: data.results,\n          });\n        }\n      }\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              check_mode: strict ? \"strict\" : \"standard\",\n              total_violations: violations.length,\n              violations,\n              recommendation:\n                violations.length > 0\n                  ? \"IMMEDIATE ACTION REQUIRED: Remove all fake data patterns\"\n                  : \"No fake data violations detected - good!\",\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async analyzeErrorHandling(args) {\n    const { includeSuggestions = true } = args;\n\n    const errorPatterns = await this.findCodePatterns({\n      pattern: \"try\\\\s*{|catch\\\\s*\\\\(|throw\\\\s+new|console\\\\.error\",\n      fileExtensions: [\".js\"],\n      excludeDirectories: [\"node_modules\", \".git\", \"archive\"],\n    });\n\n    const analysisData = JSON.parse(errorPatterns.content[0].text);\n\n    const analysis = {\n      error_handling_coverage: {\n        files_with_error_handling: analysisData.results.length,\n        total_error_patterns: analysisData.total_matches,\n        files_by_error_density: analysisData.results\n          .map((r) => ({\n            file: r.file,\n            error_patterns: r.matches,\n            density: r.matches, // Could calculate per line\n          }))\n          .sort((a, b) => b.error_patterns - a.error_patterns),\n      },\n    };\n\n    if (includeSuggestions) {\n      analysis.suggestions = [\n        \"Ensure all async operations have try-catch blocks\",\n        \"Use structured error responses in API endpoints\",\n        \"Implement global error handlers for unhandled exceptions\",\n        \"Add error logging with appropriate severity levels\",\n        \"Consider implementing circuit breakers for external API calls\",\n      ];\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(analysis, null, 2),\n        },\n      ],\n    };\n  }\n\n  async getConfigurationOverview(args) {\n    const { includeSecrets = false } = args;\n\n    const configFiles = [\n      \"package.json\",\n      \"docker-compose.yml\",\n      \"docker-compose.dev.yml\",\n      \"Dockerfile\",\n      \".vscode/settings.json\",\n      \".vscode/launch.json\",\n      \".vscode/mcp-config.json\",\n    ];\n\n    const overview = { configurations: [], summary: {} };\n\n    for (const configFile of configFiles) {\n      try {\n        const filePath = path.join(this.workspaceRoot, configFile);\n        const stats = await fs.stat(filePath);\n        const content = await fs.readFile(filePath, \"utf8\");\n\n        const config = {\n          file: configFile,\n          size: stats.size,\n          last_modified: stats.mtime,\n          type: path.extname(configFile) || \"config\",\n        };\n\n        if (includeSecrets) {\n          config.potential_secrets = this.findPotentialSecrets(content);\n        }\n\n        // Basic content analysis\n        if (configFile.endsWith(\".json\")) {\n          try {\n            const parsed = JSON.parse(content);\n            config.json_keys = Object.keys(parsed).length;\n          } catch (e) {\n            config.parse_error = e.message;\n          }\n        }\n\n        overview.configurations.push(config);\n      } catch (error) {\n        overview.configurations.push({\n          file: configFile,\n          error: `File not found or inaccessible: ${error.message}`,\n        });\n      }\n    }\n\n    overview.summary = {\n      total_config_files: overview.configurations.filter((c) => !c.error)\n        .length,\n      missing_files: overview.configurations.filter((c) => c.error).length,\n      total_size: overview.configurations\n        .filter((c) => c.size)\n        .reduce((sum, c) => sum + c.size, 0),\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(overview, null, 2),\n        },\n      ],\n    };\n  }\n\n  extractMethods(content) {\n    const methods = [];\n    const methodRegex = /(?:async\\s+)?(\\w+)\\s*\\([^)]*\\)\\s*{/g;\n    let match;\n\n    while ((match = methodRegex.exec(content)) !== null) {\n      methods.push({\n        name: match[1],\n        is_async: match[0].includes(\"async\"),\n      });\n    }\n\n    return methods;\n  }\n\n  extractDependencies(content) {\n    const deps = [];\n    const requireRegex = /require\\(['\"]([^'\"]+)['\"]\\)/g;\n    let match;\n\n    while ((match = requireRegex.exec(content)) !== null) {\n      deps.push(match[1]);\n    }\n\n    return [...new Set(deps)];\n  }\n\n  findPotentialSecrets(content) {\n    const secretPatterns = [\n      /\\bAPI_KEY\\b/gi,\n      /\\bSECRET\\b/gi,\n      /\\bTOKEN\\b/gi,\n      /\\bPASSWORD\\b/gi,\n      /\\b[A-Z0-9]{32,}\\b/g, // Long strings that might be keys\n    ];\n\n    const findings = [];\n    secretPatterns.forEach((pattern, index) => {\n      const matches = content.match(pattern) || [];\n      if (matches.length > 0) {\n        findings.push({\n          pattern_type: [\n            \"api_key\",\n            \"secret\",\n            \"token\",\n            \"password\",\n            \"long_string\",\n          ][index],\n          count: matches.length,\n        });\n      }\n    });\n\n    return findings;\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\"ProspectPro Filesystem MCP Server running...\");\n  }\n}\n\n// Start the server\nif (require.main === module) {\n  const server = new ProspectProFilesystemServer();\n  server.run().catch((error) => {\n    console.error(\"Failed to start filesystem server:\", error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = ProspectProFilesystemServer;\n"}}},
{"type":"measure","name":"lsp.testing_update","count":23,"duration":6.089},
{"type":"measure","name":"lsp.did_open","count":27,"duration":4.76},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":24,"duration":0.052},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":58,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":59,"duration":0.025},
{"type":"mark","name":"lsp.inlay_hint","count":319,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":96,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":60,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":320,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":88,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":61,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":321,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":96,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":322,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":99,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":323,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":107,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.hover","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"position":{"line":184,"character":0}}},
{"type":"mark","name":"lsp.code_action","count":85,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":158,"character":2},"end":{"line":184,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":158,"character":2},"end":{"line":184,"character":3}},"severity":4,"message":"Unknown Configuration Setting","tags":[1]}],"only":["quickfix"],"triggerKind":1}}},
{"type":"mark","name":"lsp.inlay_hint","count":324,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"},"range":{"start":{"line":117,"character":0},"end":{"line":198,"character":0}}}},
{"type":"mark","name":"lsp.did_open","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json","languageId":"json","version":1,"text":"{\n  \"timestamp\": \"2025-09-23T22:12:57.241Z\",\n  \"servers\": {\n    \"database-server\": {\n      \"name\": \"database-server\",\n      \"file\": \"./database-server.js\",\n      \"loadable\": true,\n      \"class_instantiable\": false,\n      \"methods_available\": false,\n      \"errors\": [\n        \"Cannot read properties of undefined (reading 'method')\"\n      ]\n    },\n    \"api-server\": {\n      \"name\": \"api-server\",\n      \"file\": \"./api-server.js\",\n      \"loadable\": true,\n      \"class_instantiable\": false,\n      \"methods_available\": false,\n      \"errors\": [\n        \"Cannot read properties of undefined (reading 'method')\"\n      ]\n    },\n    \"filesystem-server\": {\n      \"name\": \"filesystem-server\",\n      \"file\": \"./filesystem-server.js\",\n      \"loadable\": true,\n      \"class_instantiable\": false,\n      \"methods_available\": false,\n      \"errors\": [\n        \"Cannot read properties of undefined (reading 'method')\"\n      ]\n    },\n    \"monitoring-server\": {\n      \"name\": \"monitoring-server\",\n      \"file\": \"./monitoring-server.js\",\n      \"loadable\": true,\n      \"class_instantiable\": false,\n      \"methods_available\": false,\n      \"errors\": [\n        \"Cannot read properties of undefined (reading 'method')\"\n      ]\n    }\n  },\n  \"configuration\": {\n    \"vscode_config\": false,\n    \"mcp_config\": false,\n    \"errors\": [\n      \"Expected double-quoted property name in JSON at position 441 (line 24 column 3)\"\n    ]\n  },\n  \"dependencies\": {\n    \"package_json\": true,\n    \"mcp_sdk\": true,\n    \"supabase\": true,\n    \"errors\": []\n  },\n  \"overall_status\": \"needs_attention\"\n}"}}},
{"type":"measure","name":"lsp.did_open","count":28,"duration":0.065},
{"type":"mark","name":"lsp.code_action","count":86,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":70,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":62,"duration":0.013},
{"type":"mark","name":"lsp.inlay_hint","count":325,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"},"range":{"start":{"line":0,"character":0},"end":{"line":58,"character":1}}}},
{"type":"mark","name":"lsp.code_lens","count":63,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"}}},
{"type":"mark","name":"lsp.document_symbol","count":71,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"}}},
{"type":"mark","name":"lsp.code_action","count":87,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":64,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"}}},
{"type":"mark","name":"lsp.inlay_hint","count":326,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"},"range":{"start":{"line":0,"character":0},"end":{"line":58,"character":1}}}},
{"type":"mark","name":"lsp.folding_range","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"}}},
{"type":"mark","name":"lsp.code_action","count":88,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":72,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":327,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":16}}}},
{"type":"mark","name":"lsp.code_lens","count":65,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"}}},
{"type":"mark","name":"lsp.document_symbol","count":73,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":89,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":90,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.folding_range","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"}}},
{"type":"mark","name":"lsp.did_open","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/MCP_CONSOLIDATION_COMPLETE.md","languageId":"markdown","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":29,"duration":0.042},
{"type":"mark","name":"lsp.did_change_batched","count":12,"args":"file:///workspaces/ProspectPro/MCP_CONSOLIDATION_COMPLETE.md"},
{"type":"measure","name":"lsp.did_change_batched","count":12,"duration":18.405},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":63,"duration":0.132},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":64,"duration":0.013},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":12,"duration":0.025},
{"type":"mark","name":"lsp.code_action","count":91,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":65,"duration":0.014},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":66,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":67,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":68,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":69,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":70,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":71,"duration":0.018},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":72,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":73,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":13,"args":"file:///workspaces/ProspectPro/MCP_CONSOLIDATION_COMPLETE.md"},
{"type":"measure","name":"lsp.did_change_batched","count":13,"duration":0.08},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":74,"duration":0.001},
{"type":"mark","name":"lsp.inlay_hint","count":328,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":16}}}},
{"type":"mark","name":"lsp.did_change_batched","count":14,"args":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"},
{"type":"measure","name":"lsp.did_change_batched","count":14,"duration":294.29},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":75,"duration":0.01},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":13,"duration":0.007},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":25,"duration":0.067},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":76,"duration":0.023},
{"type":"mark","name":"lsp.code_action","count":92,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":77,"duration":0.022},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":14,"duration":0.024},
{"type":"mark","name":"lsp.code_action","count":93,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":15,"args":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},
{"type":"measure","name":"lsp.did_change_batched","count":15,"duration":56.635},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":26,"duration":0.062},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":78,"duration":0.013},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":79,"duration":0.023},
{"type":"mark","name":"lsp.folding_range","count":40,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"}}},
{"type":"mark","name":"lsp.code_lens","count":66,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"}}},
{"type":"mark","name":"lsp.inlay_hint","count":329,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":16}}}},
{"type":"mark","name":"lsp.document_symbol","count":74,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"}}},
{"type":"mark","name":"lsp.code_action","count":94,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":75,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":15,"duration":0.033},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":80,"duration":0.024},
{"type":"mark","name":"lsp.code_action","count":95,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":330,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":16}}}},
{"type":"mark","name":"lsp.code_action","count":96,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":331,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":97,"character":16}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":81,"duration":0.025},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":82,"duration":0.021},
{"type":"mark","name":"lsp.code_action","count":97,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/development-server.js"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":83,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":84,"duration":0.019},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":85,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":86,"duration":0.023},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":87,"duration":0.018},
{"type":"mark","name":"lsp.did_close","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/launch.json"}}},
{"type":"measure","name":"lsp.did_close","count":14,"duration":0.036},
{"type":"mark","name":"lsp.code_action","count":98,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":332,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"},"range":{"start":{"line":0,"character":0},"end":{"line":58,"character":1}}}},
{"type":"mark","name":"lsp.document_symbol","count":76,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"}}},
{"type":"mark","name":"lsp.folding_range","count":41,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"}}},
{"type":"mark","name":"lsp.code_lens","count":67,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"}}},
{"type":"mark","name":"lsp.code_action","count":99,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-results.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_close","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"measure","name":"lsp.did_close","count":15,"duration":0.034},
{"type":"mark","name":"lsp.did_close","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/api-server.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":27,"duration":0.059},
{"type":"measure","name":"lsp.did_close","count":16,"duration":1.353},
{"type":"mark","name":"lsp.did_close","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/database-server.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":28,"duration":0.046},
{"type":"measure","name":"lsp.did_close","count":17,"duration":0.384},
{"type":"mark","name":"lsp.did_close","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/monitoring-server.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":29,"duration":0.039},
{"type":"measure","name":"lsp.did_close","count":18,"duration":0.562},
{"type":"mark","name":"lsp.did_close","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/filesystem-server.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":30,"duration":0.03},
{"type":"measure","name":"lsp.did_close","count":19,"duration":0.45},
{"type":"mark","name":"lsp.did_open","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TECHNICAL_OVERVIEW.md","languageId":"markdown","version":1,"text":"# ProspectPro — Technical Overview\r\n\r\nThis document provides an end‑to‑end, implementation‑level overview of ProspectPro’s architecture, runtime, database schema, modules, and operational flows. It’s intended for developers deploying, extending, or operating the system.\r\n\r\n## 1. System Architecture\r\n\r\n- Platform: Node.js/Express backend, static frontend in `public/`\r\n- Database: Supabase (PostgreSQL) with RLS\r\n- External APIs: Google Places (discovery), Scrapingdog (scraping), Hunter.io (email discovery), NeverBounce (email validation)\r\n- Deployment: Railway (Nixpacks). App exposes `/health`, `/diag`, `/metrics`, `/ready`, and business APIs.\r\n- Observability: Prometheus metrics via `/metrics`, deployment monitoring via Railway webhooks\r\n\r\n### 1.1 Key Modules\r\n\r\n- `server.js`: Application entrypoint. Initializes Express, security middleware, metrics, health endpoints, routes, and async boot phases.\r\n- `config/supabase.js`: Lazy Supabase client initialization, diagnostics (`testConnection()`), and cached diagnostics accessors.\r\n- `modules/`:\r\n  - `enhanced-lead-discovery.js`, `enhanced-lead-discovery-orchestrator.js`: Core lead discovery pipeline and orchestration.\r\n  - `api-clients/`: Google Places, Hunter.io, NeverBounce, Scrapingdog, and state/registry clients.\r\n  - `validators/`: Pre-validation and data quality checks to enforce “zero fake data”.\r\n  - `prometheus-metrics.js`: Custom metrics (HTTP, DB, API costs, boot phases, webhook events).\r\n  - `railway-webhook-monitor.js`: Processes Railway webhooks, logs to DB, computes idempotency, dashboard diagnostics.\r\n  - `security-hardening.js`: App-layer security middleware and logging.\r\n- `api/`:\r\n  - `business-discovery.js`: HTTP routes for discovering and enriching leads.\r\n  - `dashboard-export.js`, `export.js`: Export endpoints.\r\n\r\n## 2. Data Pipeline (4 Stages)\r\n\r\n1. Discovery (free): Google Places + Yellow Pages scrapers; extracts core business candidates.\r\n2. Enrichment (paid): Scrapingdog for site content, Hunter.io for email discovery, owner discovery.\r\n3. Validation: Data/website validation, DNS checks, NeverBounce email deliverability.\r\n4. Export: Only verified, complete leads pass confidence thresholds and RLS policies.\r\n\r\n### 2.1 Cost Controls & Budgets\r\n\r\n- Budget caps via env: `DAILY_BUDGET_LIMIT`, `MONTHLY_BUDGET_LIMIT`, `PER_LEAD_COST_LIMIT`.\r\n- Pre-validation threshold (`MIN_PREVALIDATION_SCORE`) gates expensive API calls.\r\n- API usage/cost tracking persisted in `api_costs`/analytics tables.\r\n\r\n## 3. Database Schema & Security\r\n\r\n- Schema files: `database/01-05*.sql` and `all-phases-consolidated.sql`.\r\n- Monitoring tables: `railway_webhook_logs`, `deployment_metrics`, `deployment_failures` (Phase 3) with indexes (Phase 3) and RLS enabled (Phase 5).\r\n- Hardening:\r\n  - Function `search_path` pinned across functions to clear `function_search_path_mutable` lints.\r\n  - Extension management: `pg_trgm` moved to `extensions` schema for new installs; PostGIS may remain in `public` for existing installs (non-relocatable).\r\n  - RLS on user tables and analytics; system table constraints handled gracefully (managed DB limitations).\r\n- Webhook idempotency: `database/06-webhook-hardening.sql` adds `idempotency_key` and unique index to `railway_webhook_logs`.\r\n\r\n## 4. Runtime & Endpoints\r\n\r\n- Health & Diagnostics:\r\n  - `/health` — status with boot/supabase diagnostics\r\n  - `/ready` — readiness requiring privileged DB connection\r\n  - `/diag` — sanitized env snapshot + deployment status\r\n  - `/metrics` — Prometheus metrics\r\n  - `/loop-metrics` — event loop delay snapshot\r\n- Webhooks:\r\n  - `POST /railway-webhook` — validates HMAC or token, upserts to `railway_webhook_logs` by `idempotency_key`, updates in-memory deployment status.\r\n- Admin & Business:\r\n  - `/deployment-status?token=PERSONAL_ACCESS_TOKEN` — deployment analytics\r\n  - `/api/business/*` — discovery/enrichment endpoints\r\n  - `/api/export/*` — exports\r\n  - `/admin-dashboard.html` — admin dashboard (token-protected)\r\n\r\n## 5. Boot & Resilience\r\n\r\n- `modules/boot-debugger.js` tracks startup phases (dependencies-load, core-init, middleware-setup, google-places-init, auth-setup, health-endpoints, server-bind, supabase-test) and logs structured reports.\r\n- Degraded start mode: `ALLOW_DEGRADED_START=true` lets the server boot if DB is temporarily unavailable. Retry logic attempts to recover.\r\n- Global safety nets: `unhandledRejection` / `uncaughtException` handlers emit metrics and logs.\r\n\r\n## 6. Observability & Metrics\r\n\r\n- `prometheus-metrics.js` defines and records:\r\n  - HTTP request histograms\r\n  - Supabase connection success/failure and durations\r\n  - API usage/costs by provider/operation\r\n  - Boot phase durations and success/fail counts\r\n  - Webhook events and processing durations\r\n- `/metrics` exposes metrics in Prometheus format.\r\n\r\n## 7. Deployment Workflow\r\n\r\n- Railway: Nixpacks build (`railway.toml`), start command `node server.js`, `/health` as healthcheck path.\r\n- Webhooks: Railway → `POST /railway-webhook` → DB log → dashboards and analytics\r\n- Environment management: variables injected by Railway; local dev via `.env` + `dotenv`.\r\n\r\n## 8. Validation & Tests\r\n\r\n- SQL validation: `database/VALIDATION_QUERIES.sql` to check function search_path, extension schemas, and RLS statuses.\r\n- Webhook tests: `tests/integration/test-railway-webhook-integration.js`, E2E runner in `tests/e2e/test-railway-webhook-e2e.js`.\r\n- Debug scripts (optional): `debug/scripts/*` for environment and webhook validation.\r\n\r\n## 9. Security Considerations\r\n\r\n- Zero fake data policy enforced by validators; reject fake patterns for name/phone/address/email.\r\n- Website verification (HTTP 200–399), DNS validation, and NeverBounce ≥80% confidence.\r\n- RLS enabled broadly; policies ensure user isolation and service-role privileges for system writes.\r\n- Sanitized diagnostics: `/diag` redacts secret-like env keys.\r\n\r\n## 10. Common Ops Tasks\r\n\r\n- Rollback: Select previous successful deployment in Railway.\r\n- Rotate secrets: Update env vars in Railway and redeploy.\r\n- Analyze deployment health: Query views (e.g., `get_deployment_health_summary()`) and `/deployment-status`.\r\n- Cost governance: Inspect `api_costs` and dashboard analytics; tune thresholds via env.\r\n\r\n## 11. Known Constraints\r\n\r\n- PostGIS relocation is restricted in managed environments; acceptable to remain in `public` for existing installs.\r\n- System tables like `spatial_ref_sys` may not be modifiable (ownership), handled via graceful exceptions in SQL.\r\n\r\n## 12. File Map (selected)\r\n\r\n- `server.js` — main server\r\n- `modules/railway-webhook-monitor.js` — webhook processing and analytics\r\n- `modules/prometheus-metrics.js` — metrics\r\n- `modules/enhanced-lead-discovery.js` — lead pipeline core\r\n- `modules/api-clients/*` — external API integrations\r\n- `database/03-monitoring-and-analytics.sql` — analytics/webhook tables + indexes\r\n- `database/05-security-and-rls.sql` — RLS + security policies\r\n- `database/06-webhook-hardening.sql` — webhook idempotency\r\n- `public/*` — front-end assets and dashboards\r\n\r\n---\r\n\r\nFor deployment steps and webhook specifics, see `DEPLOYMENT.md` and `docs/WEBHOOKS.md`.\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":30,"duration":0.113},
{"type":"mark","name":"lsp.code_action","count":100,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TECHNICAL_OVERVIEW.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":77,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TECHNICAL_OVERVIEW.md"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":88,"duration":0.014},
{"type":"mark","name":"lsp.inlay_hint","count":333,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TECHNICAL_OVERVIEW.md"},"range":{"start":{"line":0,"character":0},"end":{"line":89,"character":0}}}},
{"type":"mark","name":"lsp.code_lens","count":68,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TECHNICAL_OVERVIEW.md"}}},
{"type":"mark","name":"lsp.document_symbol","count":78,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TECHNICAL_OVERVIEW.md"}}},
{"type":"mark","name":"lsp.code_action","count":101,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TECHNICAL_OVERVIEW.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":69,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TECHNICAL_OVERVIEW.md"}}},
{"type":"mark","name":"lsp.hover","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TECHNICAL_OVERVIEW.md"},"position":{"line":22,"character":29}}},
{"type":"mark","name":"lsp.inlay_hint","count":334,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TECHNICAL_OVERVIEW.md"},"range":{"start":{"line":0,"character":0},"end":{"line":88,"character":11}}}},
{"type":"mark","name":"lsp.inlay_hint","count":335,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TECHNICAL_OVERVIEW.md"},"range":{"start":{"line":0,"character":0},"end":{"line":88,"character":11}}}},
{"type":"mark","name":"lsp.folding_range","count":42,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TECHNICAL_OVERVIEW.md"}}},
{"type":"mark","name":"lsp.did_open","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/README.md","languageId":"markdown","version":1,"text":"# ProspectPro Documentation\n\n## 📚 Documentation Structure\n\n### 🚀 Quick Start\n- [API Keys Setup](setup/API_KEYS_SETUP.md) - Configure API keys for external services\n- [Campaign Setup](guides/CAMPAIGN_SETUP.md) - Set up and run lead generation campaigns\n- [Database Configuration](../database/README.md) - Database setup and configuration\n\n### 📖 User Guides  \n- [Business Discovery](guides/BUSINESS_DISCOVERY.md) - How to discover and validate businesses\n- [Campaign Management](guides/CAMPAIGN_SETUP.md) - Managing lead generation campaigns\n- [CSV Export](guides/CSV_EXPORT.md) - Exporting leads to CSV format\n\n### 🔧 Technical Documentation\n- [System Architecture](technical/ARCHITECTURE.md) - System design and components\n- [API Reference](technical/API_REFERENCE.md) - Complete API documentation\n- [Database Schema](technical/DATABASE_SCHEMA.md) - Database structure and relationships\n\n### 🚢 Deployment\n- [Production Deployment](deployment/PRODUCTION_DEPLOYMENT.md) - Deploy to production\n- [Supabase Setup](deployment/SUPABASE_SETUP.md) - Configure Supabase backend\n- [Monitoring & Diagnostics](deployment/MONITORING.md) - System monitoring and troubleshooting\n\n### 💻 Development\n- [Contributing Guidelines](development/CONTRIBUTING.md) - How to contribute to the project\n- [Testing Guide](development/TESTING.md) - Running and writing tests\n- [Debugging Guide](development/DEBUGGING.md) - Debugging common issues\n\n## 🗄️ Historical Documentation\n\nHistorical documents and legacy guides are preserved in dedicated archive branches:\n\n- `archive/development-phase` - Development artifacts and architecture docs\n- `archive/deployment-phase` - Deployment experiments and legacy guides  \n- `archive/testing-reports` - Test reports and validation documents\n- `archive/production-legacy` - Legacy production setup documentation\n\n## 📋 Archive Branch Access\n\nTo access historical documentation:\n\n```bash\n# List all archive branches\ngit branch -r | grep archive\n\n# Switch to specific archive branch\ngit checkout archive/development-phase\ngit checkout archive/deployment-phase  \ngit checkout archive/testing-reports\ngit checkout archive/production-legacy\n\n# Return to main branch\ngit checkout main\n```\n\n## 📏 Documentation Standards\n\n### Root Directory Policy\n- **MAXIMUM 3 .md FILES**: README.md, CHANGELOG.md, PRODUCTION_READY_REPORT.md\n- All other documentation must be in `docs/` subdirectories\n\n### File Organization\n- Setup guides → `docs/setup/`\n- User guides → `docs/guides/`\n- Technical docs → `docs/technical/`\n- Deployment guides → `docs/deployment/`\n- Development docs → `docs/development/`\n\n### Naming Conventions\n- Use UPPERCASE for major document names\n- Use descriptive, specific names\n- Include file extensions (.md for markdown)\n- Use underscores for multi-word names\n\n## 🔄 Maintenance\n\nThis documentation structure is actively maintained:\n\n- **Monthly**: Review for documentation sprawl\n- **Per Release**: Update relevant guides and references\n- **Per Feature**: Add/update technical documentation\n- **Archive Creation**: When starting major new development phases\n\nFor questions about documentation structure or to suggest improvements, please create an issue.\n"}}},
{"type":"measure","name":"lsp.did_open","count":31,"duration":0.07},
{"type":"mark","name":"lsp.code_action","count":102,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":79,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/README.md"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":89,"duration":0.006},
{"type":"mark","name":"lsp.inlay_hint","count":336,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":85,"character":0}}}},
{"type":"mark","name":"lsp.code_lens","count":70,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/README.md"}}},
{"type":"mark","name":"lsp.document_symbol","count":80,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/README.md"}}},
{"type":"mark","name":"lsp.code_action","count":103,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":71,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/README.md"}}},
{"type":"mark","name":"lsp.inlay_hint","count":337,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/README.md"},"range":{"start":{"line":0,"character":0},"end":{"line":85,"character":0}}}},
{"type":"mark","name":"lsp.folding_range","count":43,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/README.md"}}},
{"type":"mark","name":"lsp.did_open","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md","languageId":"markdown","version":1,"text":"# ProspectPro v3.0 - Optimized AI Instructions\r\n\r\n## CRITICAL: Current Production State\r\n\r\n- **Version**: 3.0.0 (Production-ready with Supabase Vault)\r\n- **Deployment**: GitHub Actions → Railway/Docker automated\r\n- **Environment**: Secrets auto-injected via `.scripts/pull-env-from-secrets.js`\r\n- **Architecture**: 4-stage validation pipeline (Discovery→Enrichment→Validation→Export)\r\n- **Repository**: https://github.com/Alextorelli/ProspectPro (main = production)\r\n\r\n## IMMEDIATE CONTEXT (No Re-explanation Needed)\r\n\r\nWhen Alex asks about:\r\n\r\n- **\"Environment setup\"** → Point to `npm run prod-setup-env` (automated via GitHub Actions)\r\n- **\"API integration\"** → All clients in `/modules/api-clients/` (Google Places, Hunter.io, NeverBounce, Foursquare)\r\n- **\"Database issues\"** → Supabase with comprehensive schema in `/database/`\r\n- **\"Docker problems\"** → Multi-stage build with security hardening already implemented\r\n- **\"Cost optimization\"** → Built-in rate limiting and caching systems already active\r\n- **\"Deployment\"** → Automated via GitHub Actions with secret injection\r\n- **\"Testing\"** → Use `npm run test` or check testing branch\r\n\r\n## ALEX'S TECHNICAL PROFILE\r\n\r\n- **Background**: No coding experience but highly technical\r\n- **AI Dependency**: Relies heavily on AI assistance for debugging and architecture\r\n- **Primary Models**: Claude Sonnet 4.0, GPT-5 occasionally\r\n- **Environment**: GitHub Codespaces exclusively\r\n- **Focus**: Lead generation with zero fake data tolerance\r\n- **Usage Pattern**: Debugging, testing, CI/CD, architecture discussions\r\n\r\n## RESPONSE OPTIMIZATION RULES\r\n\r\n1. **NEVER re-explain project architecture** unless specifically asked with \"explain the architecture\"\r\n2. **ALWAYS reference existing files/scripts** for implementation details\r\n3. **PRIORITIZE troubleshooting** over teaching fundamentals\r\n4. **ASSUME familiarity** with ProspectPro's core concepts\r\n5. **FOCUS on immediate problem resolution** not educational content\r\n6. **USE existing npm scripts** rather than creating new implementations\r\n7. **REFERENCE the working production system** rather than theoretical solutions\r\n\r\n## CURRENT PRODUCTION ARCHITECTURE (ESTABLISHED - DO NOT RE-EXPLAIN)\r\n\r\n### File Structure (REFERENCE ONLY)\r\n\r\n```\r\n/api/business-discovery.js           # Core discovery logic\r\n/modules/enhanced-lead-discovery.js  # Main business processing\r\n/modules/campaign-csv-exporter.js    # Export system with analytics\r\n/modules/api-clients/                # All API integrations\r\n/database/database-master-setup.js   # Schema and migrations\r\n.scripts/pull-env-from-secrets.js    # Environment automation\r\n```\r\n\r\n### Current Working Scripts (USE THESE)\r\n\r\n```bash\r\nnpm run prod-setup-env     # Automated secret injection\r\nnpm run production-start   # Launch production\r\nnpm run prod-check        # Validate environment\r\nnpm run health            # Health check\r\nnpm run diag              # Diagnostics\r\n```\r\n\r\n### API Integration Stack (WORKING)\r\n\r\n- **Google Places API**: Business discovery with rate limiting\r\n- **Hunter.io**: Email discovery and validation\r\n- **NeverBounce**: Email verification\r\n- **Foursquare**: Additional business data\r\n- **Supabase**: Database with real-time subscriptions\r\n- **Railway**: Production hosting with automated deployment\r\n\r\n## PROBLEM-SOLVING APPROACH\r\n\r\n### For Environment Issues:\r\n\r\n1. Check `npm run prod-check` output\r\n2. Verify GitHub Actions completed successfully\r\n3. Check Railway deployment logs\r\n4. Validate Supabase connection\r\n\r\n### For API Issues:\r\n\r\n1. Reference existing implementations in `/modules/api-clients/`\r\n2. Check rate limiting configurations\r\n3. Verify API key injection via GitHub Actions\r\n4. Review error logs in production\r\n\r\n### For Deployment Issues:\r\n\r\n1. Check GitHub Actions workflow status\r\n2. Verify Railway deployment completion\r\n3. Run health checks: `npm run health`\r\n4. Check Docker container status\r\n\r\n### For Database Issues:\r\n\r\n1. Reference schema in `/database/database-master-setup.js`\r\n2. Check Supabase dashboard for connection issues\r\n3. Verify environment variables are properly injected\r\n4. Review query performance in Supabase logs\r\n\r\n## CURRENT OPTIMIZATIONS (ALREADY IMPLEMENTED)\r\n\r\n- **Automated secret management** via GitHub Actions\r\n- **Multi-stage Docker build** with security hardening\r\n- **API rate limiting and caching** for cost optimization\r\n- **Comprehensive error handling** with structured logging\r\n- **Zero fake data validation** pipeline with quality scoring\r\n- **Automated CSV export** with campaign analytics\r\n- **Production health monitoring** via `/health` and `/diag` endpoints\r\n\r\n## DEVELOPMENT WORKFLOW (ESTABLISHED)\r\n\r\n1. **Main branch** = Production (auto-deployed to Railway)\r\n2. **Testing branch** = Development/testing environment\r\n3. **GitHub Actions** = Automated CI/CD with secret injection\r\n4. **Codespaces** = Primary development environment\r\n5. **Docker** = Production containerization\r\n\r\n## DEBUGGING PATTERNS (OPTIMIZED FOR ALEX)\r\n\r\n- Start with health checks: `npm run health` and `npm run diag`\r\n- Check GitHub Actions for deployment status\r\n- Review Railway logs for runtime issues\r\n- Use Supabase dashboard for database troubleshooting\r\n- Reference existing working implementations before creating new code\r\n\r\n## COST OPTIMIZATION FOCUS\r\n\r\n- **API calls**: Use existing rate limiting and caching\r\n- **Database queries**: Optimized with connection pooling\r\n- **Container resources**: Multi-stage build reduces image size\r\n- **Premium AI requests**: Use this instruction file to reduce context repetition\r\n\r\n## RESPONSE FORMAT PREFERENCES\r\n\r\n- **Immediate solutions** over explanations\r\n- **Reference existing code** rather than writing new implementations\r\n- **Use established scripts** rather than manual processes\r\n- **Focus on debugging** rather than architecture discussions\r\n- **Provide specific file paths** and command references\r\n- **Assume production system knowledge** unless explicitly asked to explain\r\n\r\n## NEVER REPEAT (SAVE PREMIUM REQUESTS)\r\n\r\n- Project architecture explanations\r\n- Environment setup procedures (automated)\r\n- API integration patterns (already implemented)\r\n- Database schema explanations (documented)\r\n- Docker configuration details (working)\r\n- Cost optimization strategies (implemented)\r\n- Security measures (hardened)\r\n\r\nThis instruction set prioritizes rapid problem resolution and eliminates repetitive context discussions to maximize premium request efficiency.\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":32,"duration":0.097},
{"type":"mark","name":"lsp.code_action","count":104,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":81,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":90,"duration":0.013},
{"type":"mark","name":"lsp.inlay_hint","count":338,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"},"range":{"start":{"line":0,"character":0},"end":{"line":96,"character":24}}}},
{"type":"mark","name":"lsp.code_lens","count":72,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.document_symbol","count":82,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.code_action","count":105,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":73,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.folding_range","count":44,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"mark","name":"lsp.did_open","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json","languageId":"json","version":1,"text":"{\n    \"name\": \"prospectpro-mcp-servers\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Model Context Protocol servers for ProspectPro AI-enhanced development\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n        \"start:database\": \"node database-server.js\",\n        \"start:api\": \"node api-server.js\",\n        \"start:filesystem\": \"node filesystem-server.js\",\n        \"start:monitoring\": \"node monitoring-server.js\",\n        \"start:all\": \"concurrently \\\"npm run start:database\\\" \\\"npm run start:filesystem\\\" \\\"npm run start:monitoring\\\"\",\n        \"test\": \"node test-servers.js\"\n    },\n    \"dependencies\": {\n        \"@modelcontextprotocol/sdk\": \"^1.0.0\",\n        \"@supabase/supabase-js\": \"^2.39.0\"\n    },\n    \"devDependencies\": {\n        \"concurrently\": \"^8.2.2\"\n    },\n    \"keywords\": [\n        \"mcp\",\n        \"model-context-protocol\",\n        \"ai\",\n        \"prospectpro\",\n        \"lead-generation\"\n    ],\n    \"author\": \"ProspectPro Team\",\n    \"license\": \"MIT\"\n}"}}},
{"type":"measure","name":"lsp.did_open","count":33,"duration":0.059},
