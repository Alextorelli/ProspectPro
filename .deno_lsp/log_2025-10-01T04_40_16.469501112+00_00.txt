Starting Deno language server...
{"type":"mark","name":"lsp.initialize","count":1,"args":{"processId":310,"rootPath":"/workspaces/ProspectPro","rootUri":"file:///workspaces/ProspectPro","initializationOptions":{"enable":true,"cacheOnSave":true,"disablePaths":[],"enablePaths":["supabase/functions"],"path":null,"env":{},"envFile":null,"cache":null,"certificateStores":null,"codeLens":{"implementations":true,"references":true,"referencesAllFunctions":true,"test":true,"testArgs":["--allow-all","--no-check"]},"config":null,"documentPreloadLimit":1000,"future":false,"importMap":null,"inlayHints":{"parameterNames":{"enabled":"none","suppressWhenArgumentMatchesName":true},"parameterTypes":{"enabled":false},"variableTypes":{"enabled":false,"suppressWhenTypeMatchesName":true},"propertyDeclarationTypes":{"enabled":false},"functionLikeReturnTypes":{"enabled":false},"enumMemberValues":{"enabled":false}},"maxTsServerMemory":3072,"suggest":{"autoImports":true,"completeFunctionCalls":false,"names":true,"paths":true,"imports":{"autoDiscover":true,"hosts":{"https://deno.land":true}}},"trace":{"server":"off"},"testing":{"args":["--allow-all","--no-check"]},"tlsCertificate":null,"unsafelyIgnoreCertificateErrors":null,"unstable":true,"lint":true,"internalDebug":false,"internalInspect":false,"logFile":true,"defaultTaskCommand":"open","javascript":{"referencesCodeLens":{"enabled":false,"showOnAllFunctions":false},"validate":{"enable":true},"suggestionActions":{"enabled":true},"updateImportsOnFileMove":{"enabled":"always"},"autoClosingTags":true,"preferGoToSourceDefinition":false,"updateImportsOnPaste":{"enabled":true},"suggest":{"enabled":true,"autoImports":true,"names":true,"completeFunctionCalls":false,"paths":true,"completeJSDocs":true,"jsdoc":{"generateReturns":true},"includeAutomaticOptionalChainCompletions":true,"includeCompletionsForImportStatements":true,"classMemberSnippets":{"enabled":true}},"preferences":{"quoteStyle":"auto","importModuleSpecifier":"shortest","importModuleSpecifierEnding":"auto","jsxAttributeCompletionStyle":"auto","autoImportFileExcludePatterns":[],"autoImportSpecifierExcludeRegexes":[],"useAliasesForRenames":true,"renameMatchingJsxTags":true,"organizeImports":{}},"format":{"enable":true,"insertSpaceAfterCommaDelimiter":true,"insertSpaceAfterConstructor":false,"insertSpaceAfterSemicolonInForStatements":true,"insertSpaceBeforeAndAfterBinaryOperators":true,"insertSpaceAfterKeywordsInControlFlowStatements":true,"insertSpaceAfterFunctionKeywordForAnonymousFunctions":true,"insertSpaceBeforeFunctionParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingEmptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces":false,"insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces":false,"placeOpenBraceOnNewLineForFunctions":false,"placeOpenBraceOnNewLineForControlBlocks":false,"semicolons":"ignore","indentSwitchCase":true},"inlayHints":{"parameterNames":{"enabled":"none","suppressWhenArgumentMatchesName":true},"parameterTypes":{"enabled":false},"variableTypes":{"enabled":false,"suppressWhenTypeMatchesName":true},"propertyDeclarationTypes":{"enabled":false},"functionLikeReturnTypes":{"enabled":false}}},"typescript":{"tsdk":"","disableAutomaticTypeAcquisition":false,"enablePromptUseWorkspaceTsdk":false,"referencesCodeLens":{"enabled":false,"showOnAllFunctions":false},"implementationsCodeLens":{"enabled":false,"showOnInterfaceMethods":false},"experimental":{"useTsgo":false},"reportStyleChecksAsWarnings":true,"validate":{"enable":true},"tsc":{"autoDetect":"on"},"locale":"auto","suggestionActions":{"enabled":true},"updateImportsOnFileMove":{"enabled":"prompt"},"autoClosingTags":true,"workspaceSymbols":{"scope":"allOpenProjects","excludeLibrarySymbols":true},"preferGoToSourceDefinition":false,"tsserver":{"enableRegionDiagnostics":true,"nodePath":"","web":{"projectWideIntellisense":{"enabled":true,"suppressSemanticErrors":false},"typeAcquisition":{"enabled":true}},"useSyntaxServer":"auto","maxTsServerMemory":3072,"experimental":{"enableProjectDiagnostics":false},"watchOptions":"vscode","enableTracing":false,"log":"off","pluginPaths":[]},"updateImportsOnPaste":{"enabled":true},"suggest":{"enabled":true,"autoImports":true,"completeFunctionCalls":false,"paths":true,"completeJSDocs":true,"jsdoc":{"generateReturns":true},"includeAutomaticOptionalChainCompletions":true,"includeCompletionsForImportStatements":true,"classMemberSnippets":{"enabled":true},"objectLiteralMethodSnippets":{"enabled":true}},"preferences":{"quoteStyle":"auto","importModuleSpecifier":"relative","importModuleSpecifierEnding":"auto","jsxAttributeCompletionStyle":"auto","includePackageJsonAutoImports":"on","autoImportFileExcludePatterns":[],"autoImportSpecifierExcludeRegexes":[],"preferTypeOnlyAutoImports":false,"useAliasesForRenames":true,"renameMatchingJsxTags":true,"organizeImports":{}},"format":{"enable":true,"insertSpaceAfterCommaDelimiter":true,"insertSpaceAfterConstructor":false,"insertSpaceAfterSemicolonInForStatements":true,"insertSpaceBeforeAndAfterBinaryOperators":true,"insertSpaceAfterKeywordsInControlFlowStatements":true,"insertSpaceAfterFunctionKeywordForAnonymousFunctions":true,"insertSpaceBeforeFunctionParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets":false,"insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingEmptyBraces":true,"insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces":false,"insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces":false,"insertSpaceAfterTypeAssertion":false,"placeOpenBraceOnNewLineForFunctions":false,"placeOpenBraceOnNewLineForControlBlocks":false,"semicolons":"ignore","indentSwitchCase":true},"inlayHints":{"parameterNames":{"enabled":"none","suppressWhenArgumentMatchesName":true},"parameterTypes":{"enabled":false},"variableTypes":{"enabled":false,"suppressWhenTypeMatchesName":true},"propertyDeclarationTypes":{"enabled":false},"functionLikeReturnTypes":{"enabled":false},"enumMemberValues":{"enabled":false}},"npm":"","check":{"npmIsInstalled":true}},"enableBuiltinCommands":true},"capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional","normalizesLineEndings":true,"changeAnnotationSupport":{"groupsOnLabel":true}},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true,"relativePatternSupport":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]},"resolveSupport":{"properties":["location.range"]}},"executeCommand":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true,"semanticTokens":{"refreshSupport":true},"codeLens":{"refreshSupport":true},"fileOperations":{"dynamicRegistration":true,"didCreate":true,"willCreate":true,"didRename":true,"willRename":true,"didDelete":true,"willDelete":true},"inlineValue":{"refreshSupport":true},"inlayHint":{"refreshSupport":true}},"textDocument":{"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]},"insertReplaceSupport":true,"resolveSupport":{"properties":["documentation","detail","additionalTextEdits"]},"insertTextModeSupport":{"valueSet":[1,2]},"labelDetailsSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true,"insertTextMode":2,"completionList":{"itemDefaults":["commitCharacters","editRange","insertTextFormat","insertTextMode","data"]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true},"activeParameterSupport":true},"contextSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true,"tagSupport":{"valueSet":[1]}},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"codeAction":{"dynamicRegistration":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.move","refactor.rewrite","source","source.organizeImports","notebook"]}},"isPreferredSupport":true,"disabledSupport":true,"dataSupport":true,"resolveSupport":{"properties":["edit","command"]},"honorsChangeAnnotations":true},"codeLens":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"colorProvider":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true,"prepareSupportDefaultBehavior":1,"honorsChangeAnnotations":true},"publishDiagnostics":{"relatedInformation":true,"tagSupport":{"valueSet":[1,2]},"versionSupport":false,"codeDescriptionSupport":true,"dataSupport":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true,"foldingRangeKind":{"valueSet":["comment","imports","region"]},"foldingRange":{"collapsedText":false}},"selectionRange":{"dynamicRegistration":true},"linkedEditingRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"requests":{"range":true,"full":{"delta":true}},"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","comment","string","number","regexp","operator","decorator","label"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"formats":["relative"],"overlappingTokenSupport":false,"multilineTokenSupport":false,"serverCancelSupport":true,"augmentsSyntaxTokens":true},"typeHierarchy":{"dynamicRegistration":true},"inlineValue":{"dynamicRegistration":true},"inlayHint":{"dynamicRegistration":true,"resolveSupport":{"properties":["tooltip","textEdits","label.tooltip","label.location","label.command"]}},"diagnostic":{"dynamicRegistration":true,"relatedDocumentSupport":false}},"notebookDocument":{"synchronization":{"dynamicRegistration":true}},"window":{"workDoneProgress":true,"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"showDocument":{"support":true}},"general":{"regularExpressions":{"engine":"ECMAScript","version":"ES2020"},"markdown":{"parser":"marked","version":"1.1.0"},"staleRequestSupport":{"cancel":true,"retryOnContentModified":["textDocument/semanticTokens/full","textDocument/semanticTokens/range","textDocument/semanticTokens/full/delta"]},"positionEncodings":["utf-16"]},"experimental":{"testingApi":true}},"trace":"off","workspaceFolders":[{"uri":"file:///workspaces/ProspectPro","name":"ProspectPro"}],"clientInfo":{"name":"Visual Studio Code","version":"1.104.2"},"locale":"en"}},
  version: 2.5.2 (release, x86_64-unknown-linux-gnu)
  executable: /usr/local/share/npm-global/lib/node_modules/deno/deno
Connected to "Visual Studio Code" 1.104.2
{"type":"measure","name":"lsp.initialize","count":1,"duration":0.845},
{"type":"mark","name":"lsp.update_global_cache"},
Enabling import suggestions for: https://deno.land
{"type":"measure","name":"lsp.update_global_cache","count":1,"duration":45.762},
Refreshing configuration tree...
{"type":"mark","name":"lsp.update_cache"},
{"type":"measure","name":"lsp.update_cache","count":1,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":1,"duration":0.019},
{"type":"mark","name":"lsp.did_open","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/scripts/cloud-run-diagnostic.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * Cloud Run Deployment Diagnostic Script\n * Identifies common failure patterns for ProspectPro Cloud Run deployments\n */\n\nconsole.log(\"🔍 ProspectPro Cloud Run Deployment Diagnostic\");\nconsole.log(\"=\".repeat(50));\n\nasync function runDiagnostic() {\n  // 1. Environment Variable Analysis\n  console.log(\"\\n📋 1. Environment Variables Analysis:\");\n\n  const criticalVars = {\n    NODE_ENV: process.env.NODE_ENV || \"❌ MISSING\",\n    PORT: process.env.PORT || \"❌ MISSING (Cloud Run sets this)\",\n    SUPABASE_URL: process.env.SUPABASE_URL ? \"✅ SET\" : \"❌ MISSING\",\n    SUPABASE_SECRET_KEY: process.env.SUPABASE_SECRET_KEY\n      ? \"✅ SET\"\n      : \"❌ MISSING\",\n    WEBHOOK_AUTH_TOKEN: process.env.WEBHOOK_AUTH_TOKEN\n      ? \"✅ SET\"\n      : \"❌ MISSING\",\n    ALLOW_DEGRADED_START: process.env.ALLOW_DEGRADED_START || \"❌ NOT SET\",\n  };\n\n  Object.entries(criticalVars).forEach(([key, value]) => {\n    console.log(`   ${key}: ${value}`);\n  });\n\n  // 2. Cloud Run Detection\n  console.log(\"\\n🏗️ 2. Cloud Run Environment Detection:\");\n  const cloudRunIndicators = {\n    K_SERVICE: process.env.K_SERVICE ? \"✅ DETECTED\" : \"❌ NOT DETECTED\",\n    K_REVISION: process.env.K_REVISION ? \"✅ DETECTED\" : \"❌ NOT DETECTED\",\n    \"PORT (Cloud Run)\": process.env.PORT ? \"✅ SET BY CLOUD RUN\" : \"❌ NOT SET\",\n  };\n\n  Object.entries(cloudRunIndicators).forEach(([key, value]) => {\n    console.log(`   ${key}: ${value}`);\n  });\n\n  // 3. Module Loading Test\n  console.log(\"\\n📦 3. Critical Module Loading:\");\n  const modules = [\n    { name: \"dotenv\", path: \"dotenv\" },\n    { name: \"express\", path: \"express\" },\n    { name: \"environment-loader\", path: \"./config/environment-loader\" },\n    { name: \"supabase\", path: \"./config/supabase\" },\n  ];\n\n  for (const module of modules) {\n    try {\n      require(module.path);\n      console.log(`   ✅ ${module.name}`);\n    } catch (error) {\n      console.log(`   ❌ ${module.name}: ${error.message}`);\n    }\n  }\n\n  // 4. Database Connection Test\n  console.log(\"\\n🗄️ 4. Database Connection Test:\");\n  try {\n    const { testConnection } = require(\"./config/supabase\");\n    const dbResult = await testConnection();\n    if (dbResult.success) {\n      console.log(\"   ✅ Database connection successful\");\n    } else {\n      console.log(`   ❌ Database connection failed: ${dbResult.error}`);\n    }\n  } catch (error) {\n    console.log(`   ❌ Database test failed: ${error.message}`);\n  }\n\n  // 5. Port Binding Test\n  console.log(\"\\n🌐 5. Port Binding Test:\");\n  try {\n    const express = require(\"express\");\n    const testApp = express();\n\n    testApp.get(\"/test\", (req, res) => {\n      res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n    });\n\n    const testPort = process.env.PORT || 8080;\n    const server = testApp.listen(testPort, \"0.0.0.0\", () => {\n      console.log(`   ✅ Successfully bound to port ${testPort} on 0.0.0.0`);\n      server.close();\n    });\n\n    server.on(\"error\", (error) => {\n      console.log(`   ❌ Port binding failed: ${error.message}`);\n    });\n  } catch (error) {\n    console.log(`   ❌ Port binding test failed: ${error.message}`);\n  }\n\n  // 6. Common Cloud Run Failure Patterns\n  console.log(\"\\n⚠️ 6. Common Failure Pattern Analysis:\");\n\n  const failures = [];\n\n  // Missing environment variables\n  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SECRET_KEY) {\n    failures.push(\n      \"Missing Supabase configuration in Cloud Build substitutions\"\n    );\n  }\n\n  // Missing degraded start\n  if (process.env.ALLOW_DEGRADED_START !== \"true\") {\n    failures.push(\n      \"ALLOW_DEGRADED_START not set to true for Cloud Run stability\"\n    );\n  }\n\n  // PORT not being respected\n  if (!process.env.PORT) {\n    failures.push(\n      \"PORT environment variable not set (Cloud Run sets this automatically)\"\n    );\n  }\n\n  if (failures.length === 0) {\n    console.log(\"   ✅ No common failure patterns detected\");\n  } else {\n    failures.forEach((failure) => {\n      console.log(`   ❌ ${failure}`);\n    });\n  }\n\n  // 7. Recommended Fixes\n  console.log(\"\\n🔧 7. Recommended Actions:\");\n\n  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SECRET_KEY) {\n    console.log(\"   📝 Check Cloud Build trigger substitution variables\");\n    console.log(\"   📝 Verify _SUPABASE_URL and _SUPABASE_SECRET_KEY are set\");\n  }\n\n  if (process.env.ALLOW_DEGRADED_START !== \"true\") {\n    console.log(\"   📝 Add ALLOW_DEGRADED_START=true to Cloud Run environment\");\n  }\n\n  console.log(\"   📝 Check Cloud Run deployment logs for specific errors\");\n  console.log(\"   📝 Verify container build completed successfully\");\n  console.log(\"   📝 Test health endpoint after deployment\");\n\n  console.log(\"\\n✅ Diagnostic complete\");\n}\n\n// Run the diagnostic\nrunDiagnostic().catch((error) => {\n  console.error(\"❌ Diagnostic failed:\", error.message);\n  process.exit(1);\n});\n"}}},
{"type":"measure","name":"lsp.did_open","count":1,"duration":7.428},
{"type":"mark","name":"lsp.did_open","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/cloudbuild.yaml","languageId":"yaml","version":1,"text":"# Cloud Build Configuration for ProspectPro v3.1\n# Native Google Cloud deployment with Supabase Vault integration\n\nsteps:\n  # Step 1: Create Artifact Registry repository if needed\n  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'\n    entrypoint: 'bash'\n    args:\n      - '-c'\n      - |\n        if ! gcloud artifacts repositories describe prospectpro --location=us-central1 &>/dev/null; then\n          echo \"🏗️ Creating Artifact Registry repository...\"\n          gcloud artifacts repositories create prospectpro \\\n            --location=us-central1 \\\n            --repository-format=docker \\\n            --description=\"ProspectPro container repository\"\n          echo \"✅ Repository created successfully\"\n        else\n          echo \"✅ Repository already exists\"\n        fi\n    id: 'setup-registry'\n\n  # Step 2: Build Docker container\n  - name: 'gcr.io/cloud-builders/docker'\n    args: \n      - 'build'\n      - '-t'\n      - 'us-central1-docker.pkg.dev/$PROJECT_ID/prospectpro/app:$COMMIT_SHA'\n      - '-t'\n      - 'us-central1-docker.pkg.dev/$PROJECT_ID/prospectpro/app:latest'\n      - '.'\n    id: 'build-container'\n    waitFor: ['setup-registry']\n\n  # Step 3: Push container to Artifact Registry\n  - name: 'gcr.io/cloud-builders/docker'\n    args:\n      - 'push'\n      - '--all-tags'\n      - 'us-central1-docker.pkg.dev/$PROJECT_ID/prospectpro/app'\n    id: 'push-container'\n    waitFor: ['build-container']\n\n  # Step 4: Deploy to Cloud Run with Google Secret Manager\n  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'\n    entrypoint: 'gcloud'\n    args:\n      - 'run'\n      - 'deploy'\n      - 'prospectpro'\n      - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/prospectpro/app:$COMMIT_SHA'\n      - '--platform=managed'\n      - '--region=us-central1'\n      - '--allow-unauthenticated'\n      - '--memory=2Gi'\n      - '--cpu=2'\n      - '--min-instances=0'\n      - '--max-instances=10'\n      - '--concurrency=100'\n      - '--timeout=300'\n      - '--set-env-vars=NODE_ENV=production'\n      - '--set-env-vars=ALLOW_DEGRADED_START=true'\n      - '--set-secrets=SUPABASE_URL=supabase-url:latest'\n      - '--set-secrets=SUPABASE_SECRET_KEY=supabase-secret-key:latest'\n      - '--set-secrets=WEBHOOK_AUTH_TOKEN=webhook-auth-token:latest'\n      - '--set-secrets=GOOGLE_PLACES_API_KEY=google-places-api-key:latest'\n      - '--set-secrets=HUNTER_API_KEY=hunter-api-key:latest'\n      - '--set-secrets=NEVERBOUNCE_API_KEY=neverbounce-api-key:latest'\n      - '--set-secrets=FOURSQUARE_SERVICE_API_KEY=foursquare-api-key:latest'\n      - '--set-secrets=APOLLO_API_KEY=apollo-api-key:latest'\n      - '--set-secrets=SCRAPINGDOG_API_KEY=scrapingdog-api-key:latest'\n      - '--set-secrets=SOCRATA_API_KEY=socrata-api-key:latest'\n      - '--set-secrets=SOCRATA_APP_TOKEN=socrata-app-token:latest'\n      - '--set-secrets=USPTO_TSDR_API_KEY=uspto-api-key:latest'\n      - '--set-secrets=ZEROBOUNCE_API_KEY=zerobounce-api-key:latest'\n      - '--set-secrets=CALIFORNIA_SOS_API_KEY=california-sos-api-key:latest'\n      - '--set-secrets=PERSONAL_ACCESS_TOKEN=personal-access-token:latest'\n      - '--service-account=prospectpro-deployment@leadgen-471822.iam.gserviceaccount.com'\n    id: 'deploy-cloud-run'\n    waitFor: ['push-container']\n\n  # Step 5: Get service URL and test health\n  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'\n    entrypoint: 'bash'\n    args:\n      - '-c'\n      - |\n        # Get the deployed service URL\n        SERVICE_URL=$$(gcloud run services describe prospectpro --region=us-central1 --format='value(status.url)')\n        echo \"🌐 Service deployed at: $$SERVICE_URL\"\n        \n        # Wait for service to be ready\n        echo \"⏳ Waiting for service to be ready...\"\n        sleep 30\n        \n        # Test health endpoint\n        echo \"🧪 Testing health endpoint...\"\n        curl -f --max-time 30 --retry 5 --retry-delay 10 \"$$SERVICE_URL/health\" || echo \"❌ Health check failed but deployment succeeded\"\n        \n        # Test basic API endpoint\n        echo \"🧪 Testing business discovery API...\"\n        curl -X POST --max-time 30 -H \"Content-Type: application/json\" \\\n          -d '{\"businessType\":\"restaurant\",\"location\":\"Austin, TX\",\"maxResults\":1}' \\\n          -f \"$$SERVICE_URL/api/business/discover-businesses\" || echo \"❌ API test failed but deployment succeeded\"\n        \n        echo \"✅ Deployment completed - Service URL: $$SERVICE_URL\"\n    id: 'health-check'\n    waitFor: ['deploy-cloud-run']\n\n# Build configuration optimized for production\noptions:\n  machineType: 'E2_HIGHCPU_8'\n  diskSizeGb: 100\n  substitutionOption: 'ALLOW_LOOSE'\n  logging: CLOUD_LOGGING_ONLY\n\n# Build timeout (20 minutes for comprehensive build and test)\ntimeout: '1200s'"}}},
{"type":"measure","name":"lsp.did_open","count":2,"duration":0.064},
{"type":"mark","name":"lsp.did_open","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/config/environment-loader.js","languageId":"javascript","version":1,"text":"/**\n * Production-Ready Environment Configuration Loader\n * Loads configuration from GitHub Actions, Supabase Vault, and environment variables\n *\n * Configuration Sources (in priority order):\n * 1. Process environment variables (GitHub Actions, CI/CD)\n * 2. Supabase Vault (for API keys)\n * 3. Local .env file (development only)\n * 4. Production defaults\n */\n\nconst path = require(\"path\");\nconst fs = require(\"fs\");\n\n// Import Supabase Vault Loader for API key management\nlet vaultLoader;\ntry {\n  vaultLoader = require(\"../modules/utils/supabase-vault-loader\");\n} catch (error) {\n  console.warn(\"⚠️ Supabase Vault Loader not available:\", error.message);\n}\n\nclass EnvironmentLoader {\n  constructor() {\n    this.configSources = [];\n    this.vaultApiKeys = null;\n    this.loadEnvironment();\n  }\n\n  loadEnvironment() {\n    console.log(\"🔧 ProspectPro Environment Configuration Loader\");\n    console.log(\"📍 Loading configuration from multiple sources...\\n\");\n\n    // 1. Load from .env file (development/local only)\n    this.loadDotEnv();\n\n    // 2. Process environment variables (CI/CD, GitHub Actions)\n    this.loadProcessEnvironment();\n\n    // 3. Set production defaults if not specified\n    this.setProductionDefaults();\n\n    // 4. Validate required configuration\n    this.validateConfiguration();\n\n    // 5. Display configuration summary\n    this.displayConfigurationSummary();\n  }\n\n  /**\n   * Load API keys from Supabase Vault\n   * @returns {Promise<Object>} API keys object\n   */\n  async loadApiKeysFromVault() {\n    // PRODUCTION/CLOUD RUN: Always use environment variables (no vault)\n    if (\n      process.env.NODE_ENV === \"production\" ||\n      process.env.K_SERVICE ||\n      process.env.CLOUD_RUN_SERVICE ||\n      process.env.GOOGLE_CLOUD_PROJECT\n    ) {\n      console.log(\n        \"☁️ Production/Cloud Run detected: using direct environment variables\"\n      );\n      console.log(\"💡 Vault bypassed for Cloud Run compatibility\");\n      return null; // Force fallback to environment variables\n    }\n\n    if (!vaultLoader) {\n      console.warn(\n        \"⚠️ Vault loader not available, using environment variables only\"\n      );\n      return null;\n    }\n\n    if (this.vaultApiKeys) {\n      return this.vaultApiKeys; // Return cached keys\n    }\n\n    try {\n      console.log(\n        \"🔑 Loading API keys from Supabase Vault (local development)...\"\n      );\n\n      this.vaultApiKeys = await vaultLoader.loadStandardApiKeys();\n\n      if (this.vaultApiKeys) {\n        this.configSources.push(\"🔐 Supabase Vault (API Keys)\");\n        console.log(\"✅ API keys loaded from Supabase Vault\");\n      }\n\n      return this.vaultApiKeys;\n    } catch (error) {\n      console.warn(\n        \"⚠️ Failed to load API keys from Supabase Vault:\",\n        error.message\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Get API keys with environment variable fallback\n   * @returns {Promise<Object>} Combined API keys\n   */\n  async getApiKeys() {\n    const vaultKeys = await this.loadApiKeysFromVault();\n\n    if (!vaultKeys) {\n      // Fallback to environment variables only\n      console.log(\"🔑 Using API keys from environment variables\");\n\n      const envApiKeys = {\n        googlePlaces: process.env.GOOGLE_PLACES_API_KEY,\n        foursquare:\n          process.env.FOURSQUARE_SERVICE_API_KEY ||\n          process.env.FOURSQUARE_PLACES_API_KEY,\n        hunterIO: process.env.HUNTER_API_KEY,\n        neverBounce: process.env.NEVERBOUNCE_API_KEY,\n        zeroBounce: process.env.ZEROBOUNCE_API_KEY,\n        apollo: process.env.APOLLO_API_KEY,\n        scrapingdog: process.env.SCRAPINGDOG_API_KEY,\n        californiaSOSApiKey: process.env.CALIFORNIA_SOS_API_KEY,\n        socrata: process.env.SOCRATA_API_KEY,\n        socrataToken: process.env.SOCRATA_APP_TOKEN,\n        uspto: process.env.USPTO_TSDR_API_KEY,\n        personalAccessToken: process.env.PERSONAL_ACCESS_TOKEN,\n      };\n\n      // Log which API keys are available\n      const availableKeys = Object.entries(envApiKeys)\n        .filter(([key, value]) => value && !value.includes(\"your_\"))\n        .map(([key]) => key);\n\n      if (availableKeys.length > 0) {\n        console.log(\n          `✅ Found ${availableKeys.length} API keys in environment variables`\n        );\n        console.log(`   Available: ${availableKeys.join(\", \")}`);\n      } else {\n        console.warn(\"⚠️ No API keys found in environment variables\");\n        if (process.env.ALLOW_DEGRADED_START === \"true\") {\n          console.log(\"💡 Continuing in webhook-only mode\");\n        }\n      }\n\n      return envApiKeys;\n    }\n\n    return vaultKeys;\n  }\n\n  loadDotEnv() {\n    const envPath = path.join(process.cwd(), \".env\");\n    if (fs.existsSync(envPath)) {\n      require(\"dotenv\").config({ path: envPath });\n      this.configSources.push(\"📄 .env file\");\n      console.log(\"✅ Environment template loaded from .env file\");\n    } else {\n      console.log(\"ℹ️  No .env file found (expected in CI/CD environments)\");\n    }\n  }\n\n  loadProcessEnvironment() {\n    // Check for GitHub Actions / CI/CD injected variables\n    const cicdVars = [\n      \"SUPABASE_URL\",\n      \"SUPABASE_SECRET_KEY\",\n      \"BUILD_TIMESTAMP\",\n      \"BUILD_COMMIT\",\n      \"BUILD_BRANCH\",\n    ];\n\n    let cicdCount = 0;\n    cicdVars.forEach((varName) => {\n      if (process.env[varName] && !process.env[varName].includes(\"your_\")) {\n        cicdCount++;\n      }\n    });\n\n    if (cicdCount >= 2) {\n      this.configSources.push(\"🏭 GitHub Actions / CI/CD\");\n      console.log(`✅ ${cicdCount} variables loaded from CI/CD environment`);\n\n      if (process.env.BUILD_TIMESTAMP) {\n        console.log(`📅 Build: ${process.env.BUILD_TIMESTAMP}`);\n      }\n      if (process.env.BUILD_COMMIT) {\n        console.log(`📋 Commit: ${process.env.BUILD_COMMIT?.substring(0, 8)}`);\n      }\n    }\n\n    // Check for direct environment variables\n    const envVars = [\"SUPABASE_URL\", \"SUPABASE_SECRET_KEY\"];\n    let envCount = 0;\n    envVars.forEach((varName) => {\n      if (process.env[varName] && !process.env[varName].includes(\"your_\")) {\n        envCount++;\n      }\n    });\n\n    if (envCount > 0 && cicdCount < 2) {\n      this.configSources.push(\"🌍 Process Environment\");\n      console.log(`✅ ${envCount} variables loaded from process environment`);\n    }\n  }\n\n  setProductionDefaults() {\n    // Set production-optimized defaults\n    const defaults = {\n      NODE_ENV: \"production\",\n      ENABLE_PROMETHEUS_METRICS: \"true\",\n      ENABLE_PERFORMANCE_LOGGING: \"true\",\n      ENABLE_TTL_CACHE: \"true\",\n      ENABLE_BATCH_PROCESSING: \"true\",\n      CACHE_TTL_SECONDS: \"3600\",\n      MAX_CONCURRENT_REQUESTS: \"10\",\n      MIN_CONFIDENCE_SCORE: \"85\",\n      ENABLE_COST_TRACKING: \"true\",\n      ENABLE_CIRCUIT_BREAKER: \"true\",\n    };\n\n    let defaultsSet = 0;\n    Object.entries(defaults).forEach(([key, value]) => {\n      if (!process.env[key]) {\n        process.env[key] = value;\n        defaultsSet++;\n      }\n    });\n\n    if (defaultsSet > 0) {\n      this.configSources.push(\"⚙️  Production Defaults\");\n      console.log(`✅ ${defaultsSet} production defaults applied`);\n    }\n  }\n\n  validateConfiguration() {\n    const required = [\"SUPABASE_URL\", \"SUPABASE_SECRET_KEY\", \"NODE_ENV\"];\n    const missing = required.filter(\n      (key) => !process.env[key] || process.env[key].includes(\"your_\")\n    );\n\n    console.log(\"\\n🔍 Configuration Validation:\");\n\n    if (missing.length > 0) {\n      console.error(\"❌ Missing required environment variables:\", missing);\n      console.error(\"\\n💡 Solutions:\");\n      console.error(\n        \"   🔧 Production: Ensure GitHub repository secrets are configured\"\n      );\n      console.error(\"   🛠️  Development: Add real values to .env file\");\n      console.error(\"   📋 Secrets needed: SUPABASE_URL, SUPABASE_SECRET_KEY\");\n\n      if (process.env.ALLOW_DEGRADED_START !== \"true\") {\n        console.error(\n          \"\\n❌ Set ALLOW_DEGRADED_START=true to continue without full configuration\"\n        );\n        process.exit(1);\n      } else {\n        console.warn(\n          \"⚠️  Continuing in degraded mode without complete configuration\"\n        );\n      }\n    } else {\n      console.log(\"✅ All required environment variables configured\");\n    }\n\n    // Validate Supabase configuration\n    const supabaseUrl = process.env.SUPABASE_URL;\n    if (supabaseUrl && !supabaseUrl.includes(\"your_\")) {\n      if (supabaseUrl.includes(\"supabase.co\")) {\n        console.log(\"✅ Supabase URL format validated\");\n      } else {\n        console.warn(\"⚠️  Supabase URL format may be incorrect\");\n      }\n    }\n  }\n\n  displayConfigurationSummary() {\n    console.log(\"\\n📊 Configuration Sources Summary:\");\n    this.configSources.forEach((source) => {\n      console.log(`   ${source}`);\n    });\n\n    console.log(\"\\n🎯 Runtime Configuration:\");\n    console.log(`   Environment: ${process.env.NODE_ENV}`);\n    console.log(`   Port: ${process.env.PORT || 3000}`);\n    console.log(\n      `   Degraded Mode Allowed: ${\n        process.env.ALLOW_DEGRADED_START === \"true\" ? \"Yes\" : \"No\"\n      }`\n    );\n\n    if (\n      process.env.SUPABASE_URL &&\n      !process.env.SUPABASE_URL.includes(\"your_\")\n    ) {\n      const url = process.env.SUPABASE_URL;\n      console.log(`   Supabase: ${url.substring(0, 30)}...`);\n    }\n\n    // Show vault configuration expectation\n    console.log(\"\\n🔑 API Keys Expected from Supabase Vault:\");\n    const expectedVaultKeys = [\n      \"GOOGLE_PLACES_API_KEY\",\n      \"HUNTER_IO_API_KEY\",\n      \"NEVERBOUNCE_API_KEY\",\n      \"APOLLO_API_KEY\",\n      \"FOURSQUARE_SERVICE_API_KEY\",\n      \"PERSONAL_ACCESS_TOKEN\",\n    ];\n    expectedVaultKeys.forEach((key) => {\n      console.log(`   📝 ${key}`);\n    });\n\n    console.log(\"\\n\" + \"=\".repeat(50) + \"\\n\");\n  }\n\n  // Get environment-specific configuration\n  getConfig() {\n    const isProduction = process.env.NODE_ENV === \"production\";\n    const isDevelopment = process.env.NODE_ENV === \"development\";\n\n    return {\n      environment: process.env.NODE_ENV,\n      isProduction,\n      isDevelopment,\n\n      // Database\n      supabase: {\n        url: process.env.SUPABASE_URL,\n        secretKey: process.env.SUPABASE_SECRET_KEY,\n      },\n\n      // Performance Settings\n      performance: {\n        requestTimeout: parseInt(process.env.REQUEST_TIMEOUT) || 30000,\n        maxConcurrentRequests:\n          parseInt(process.env.MAX_CONCURRENT_REQUESTS) || 10,\n        batchSize: parseInt(process.env.BATCH_SIZE) || 25,\n        cacheTTL: parseInt(process.env.CACHE_TTL_SECONDS) || 3600,\n      },\n\n      // Budget Controls\n      budget: {\n        dailyLimit: parseFloat(process.env.DAILY_BUDGET_LIMIT) || 100.0,\n        defaultLimit: parseFloat(process.env.DEFAULT_BUDGET_LIMIT) || 25.0,\n        perLeadLimit: parseFloat(process.env.PER_LEAD_COST_LIMIT) || 2.0,\n        alertThreshold: parseFloat(process.env.COST_ALERT_THRESHOLD) || 80.0,\n      },\n\n      // Quality Standards\n      quality: {\n        minConfidenceScore: parseInt(process.env.MIN_CONFIDENCE_SCORE) || 85,\n        preValidationThreshold:\n          parseInt(process.env.PRE_VALIDATION_THRESHOLD) || 75,\n        exportThreshold:\n          parseInt(process.env.EXPORT_CONFIDENCE_THRESHOLD) || 90,\n      },\n\n      // Feature Flags\n      features: {\n        enableMetrics: process.env.ENABLE_PROMETHEUS_METRICS === \"true\",\n        enableCaching: process.env.ENABLE_TTL_CACHE === \"true\",\n        enableBatching: process.env.ENABLE_BATCH_PROCESSING === \"true\",\n        enableCircuitBreaker: process.env.ENABLE_CIRCUIT_BREAKER === \"true\",\n        enableCostTracking: process.env.ENABLE_COST_TRACKING === \"true\",\n      },\n\n      // Build information (from CI/CD)\n      build: {\n        timestamp: process.env.BUILD_TIMESTAMP,\n        commit: process.env.BUILD_COMMIT,\n        branch: process.env.BUILD_BRANCH,\n        actor: process.env.BUILD_ACTOR,\n      },\n    };\n  }\n}\n\nmodule.exports = EnvironmentLoader;\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":1,"duration":2.827},
{"type":"measure","name":"lsp.did_open","count":3,"duration":12.513},
{"type":"mark","name":"lsp.did_open","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/CLOUD_RUN_DEPLOYMENT_FIX.md","languageId":"markdown","version":1,"text":"## 🎯 Cloud Run Deployment Fix Summary\n\n**Commit:** `a479021` - Fix: Bypass Supabase Vault in Cloud Run production environment\n\n### 🔍 **Root Cause Identified**\n\nThe Cloud Run deployment failures were caused by the environment loader attempting to access Supabase Vault even in production environments, leading to schema cache compatibility issues.\n\n### 🛠️ **Fix Applied**\n\nUpdated `config/environment-loader.js` to:\n\n1. **Complete Vault Bypass in Production**\n\n   ```javascript\n   // PRODUCTION/CLOUD RUN: Always use environment variables (no vault)\n   if (\n     process.env.NODE_ENV === \"production\" ||\n     process.env.K_SERVICE ||\n     process.env.CLOUD_RUN_SERVICE ||\n     process.env.GOOGLE_CLOUD_PROJECT\n   ) {\n     console.log(\n       \"☁️ Production/Cloud Run detected: using direct environment variables\"\n     );\n     return null; // Force fallback to environment variables\n   }\n   ```\n\n2. **Enhanced Environment Detection**\n\n   - `NODE_ENV=production`\n   - `K_SERVICE` (Cloud Run indicator)\n   - `CLOUD_RUN_SERVICE`\n   - `GOOGLE_CLOUD_PROJECT`\n\n3. **Improved API Key Logging**\n   - Reports which API keys are available from environment variables\n   - Clearer degraded mode messaging\n   - Better troubleshooting information\n\n### ✅ **Deployment Improvements**\n\n- ✅ No more vault access attempts in Cloud Run\n- ✅ Direct environment variable usage (faster startup)\n- ✅ Compatible with Cloud Build substitution variables\n- ✅ Maintains degraded startup for webhook-only operation\n- ✅ Resolves schema cache compatibility issues\n\n### 🚀 **Current Status**\n\n- **Git Push**: Completed to `main` branch\n- **Cloud Build**: Triggered automatically\n- **Expected Result**: Successful Cloud Run deployment without vault errors\n\n### 🔧 **Environment Variables Working**\n\nBased on your Cloud Build trigger configuration:\n\n- `_SUPABASE_URL` → `SUPABASE_URL` ✅\n- `_SUPABASE_SECRET_KEY` → `SUPABASE_SECRET_KEY` ✅\n- `_WEBHOOK_AUTH_TOKEN` → `WEBHOOK_AUTH_TOKEN` ✅\n- `ALLOW_DEGRADED_START=true` ✅\n- `NODE_ENV=production` ✅\n\n### 🎯 **Next Steps**\n\n1. Monitor Cloud Build logs for successful deployment\n2. Test health endpoint: `https://prospectpro-184492422840.us-central1.run.app/health`\n3. Verify webhook endpoints are operational\n4. Add additional API keys as environment variables in Cloud Build if needed\n\nThis fix maintains your current simple environment variable approach while eliminating the vault compatibility issues that were causing deployment failures.\n"}}},
{"type":"measure","name":"lsp.did_open","count":4,"duration":0.074},
{"type":"mark","name":"lsp.did_open","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/api-clients/california-sos-client.js","languageId":"javascript","version":1,"text":"/**\r\n * California Secretary of State API Client\r\n *\r\n * Provides business entity verification using CA SOS Business Entity Public Search API\r\n * - Keyword search for business entities\r\n * - Entity details retrieval by number\r\n * - Rate limiting and error handling\r\n * - Response normalization for ProspectPro pipeline\r\n *\r\n * API Documentation: https://calico.sos.ca.gov/cbc/v1/api/\r\n * Authentication: Ocp-Apim-Subscription-Key header\r\n *\r\n * ProspectPro - Zero Fake Data Policy\r\n */\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nclass CaliforniaSOSClient {\r\n  constructor(apiKey = null) {\r\n    this.apiKey = apiKey || process.env.CALIFORNIA_SOS_API_KEY;\r\n    this.baseUrl =\r\n      process.env.CALIFORNIA_SOS_BASE_URL ||\r\n      \"https://calico.sos.ca.gov/cbc/v1/api\";\r\n\r\n    // Rate limiting configuration\r\n    this.rateLimitPerHour = 100; // Conservative estimate\r\n    this.requestCount = 0;\r\n    this.lastResetTime = Date.now();\r\n    this.rateLimitWindow = 60 * 60 * 1000; // 1 hour in milliseconds\r\n\r\n    // Caching for performance\r\n    this.cache = new Map();\r\n    this.cacheTimeout = 24 * 60 * 60 * 1000; // 24 hours\r\n\r\n    // Quality scoring configuration\r\n    this.qualityScore = 75; // High quality score for official CA data\r\n    this.costPerRequest = 0.0; // Free API\r\n\r\n    // Request statistics\r\n    this.stats = {\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      cachedResponses: 0,\r\n      errorCount: 0,\r\n      lastRequestTime: null,\r\n    };\r\n\r\n    if (!this.apiKey) {\r\n      console.warn(\r\n        \"⚠️ California SOS API key not found. This API requires a subscription key from https://calico.sos.ca.gov\"\r\n      );\r\n      console.warn(\r\n        \"💡 To get access: Contact California Secretary of State API team for subscription\"\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Legacy method for backward compatibility\r\n   */\r\n  async searchBusiness(businessName) {\r\n    return this.searchByKeyword(businessName);\r\n  }\r\n\r\n  /**\r\n   * Check if we're within rate limits\r\n   */\r\n  checkRateLimit() {\r\n    const now = Date.now();\r\n\r\n    // Reset counter if window has passed\r\n    if (now - this.lastResetTime >= this.rateLimitWindow) {\r\n      this.requestCount = 0;\r\n      this.lastResetTime = now;\r\n    }\r\n\r\n    return this.requestCount < this.rateLimitPerHour;\r\n  }\r\n\r\n  /**\r\n   * Generate cache key for request\r\n   */\r\n  generateCacheKey(searchTerm, options = {}) {\r\n    return `ca_sos_${searchTerm.toLowerCase().trim()}_${JSON.stringify(\r\n      options\r\n    )}`;\r\n  }\r\n\r\n  /**\r\n   * Search for business entities by keyword\r\n   * @param {string} businessName - Business name to search for\r\n   * @param {Object} options - Search options\r\n   * @param {boolean} options.exactMatch - Whether to search for exact matches only\r\n   * @param {string} options.createdDateStart - Filter by creation date start (YYYY-MM-DD)\r\n   * @param {string} options.createdDateEnd - Filter by creation date end (YYYY-MM-DD)\r\n   * @returns {Object} Search results with normalized structure\r\n   */\r\n  async searchByKeyword(businessName, options = {}) {\r\n    if (!this.apiKey) {\r\n      console.warn(\r\n        \"⚠️ California SOS API key not configured, returning mock response\"\r\n      );\r\n      return this.getMockResponse(businessName);\r\n    }\r\n\r\n    if (!businessName || typeof businessName !== \"string\") {\r\n      throw new Error(\"Business name is required and must be a string\");\r\n    }\r\n\r\n    // Check cache first\r\n    const cacheKey = this.generateCacheKey(businessName, options);\r\n    if (this.cache.has(cacheKey)) {\r\n      const cached = this.cache.get(cacheKey);\r\n      if (Date.now() - cached.timestamp < this.cacheTimeout) {\r\n        this.stats.cachedResponses++;\r\n        return cached.data;\r\n      }\r\n      this.cache.delete(cacheKey);\r\n    }\r\n\r\n    // Rate limit check\r\n    if (!this.checkRateLimit()) {\r\n      throw new Error(\r\n        \"California SOS rate limit exceeded. Please try again later.\"\r\n      );\r\n    }\r\n\r\n    try {\r\n      const searchParams = new URLSearchParams({\r\n        \"search-term\": businessName.trim(),\r\n        \"begins-with\": options.exactMatch ? \"true\" : \"false\",\r\n      });\r\n\r\n      // Add optional date filters\r\n      if (options.createdDateStart) {\r\n        searchParams.append(\"created-date-start\", options.createdDateStart);\r\n      }\r\n      if (options.createdDateEnd) {\r\n        searchParams.append(\"created-date-end\", options.createdDateEnd);\r\n      }\r\n\r\n      const response = await this.makeRequest(\r\n        `/BusinessEntityKeywordSearch?${searchParams}`\r\n      );\r\n      const normalizedResponse = this.normalizeSearchResponse(\r\n        response,\r\n        businessName\r\n      );\r\n\r\n      // Cache successful responses\r\n      this.cache.set(cacheKey, {\r\n        data: normalizedResponse,\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      this.stats.successfulRequests++;\r\n      return normalizedResponse;\r\n    } catch (error) {\r\n      this.stats.errorCount++;\r\n      console.error(\"California SOS search error:\", error.message);\r\n\r\n      // Return structured error response\r\n      return {\r\n        found: false,\r\n        totalResults: 0,\r\n        entities: [],\r\n        error: error.message,\r\n        source: \"California Secretary of State\",\r\n        apiCost: this.costPerRequest,\r\n        qualityScore: 0,\r\n        confidenceBoost: 0,\r\n        searchTerm: businessName,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get detailed information about a specific business entity\r\n   * @param {string} entityNumber - CA SOS entity number\r\n   * @returns {Object} Entity details with normalized structure\r\n   */\r\n  async getEntityDetails(entityNumber) {\r\n    if (!this.apiKey) {\r\n      console.warn(\"⚠️ California SOS API key not configured\");\r\n      return { found: false, error: \"API key not configured\" };\r\n    }\r\n\r\n    if (!entityNumber) {\r\n      throw new Error(\"Entity number is required\");\r\n    }\r\n\r\n    // Check cache\r\n    const cacheKey = `ca_sos_entity_${entityNumber}`;\r\n    if (this.cache.has(cacheKey)) {\r\n      const cached = this.cache.get(cacheKey);\r\n      if (Date.now() - cached.timestamp < this.cacheTimeout) {\r\n        this.stats.cachedResponses++;\r\n        return cached.data;\r\n      }\r\n      this.cache.delete(cacheKey);\r\n    }\r\n\r\n    // Rate limit check\r\n    if (!this.checkRateLimit()) {\r\n      throw new Error(\r\n        \"California SOS rate limit exceeded. Please try again later.\"\r\n      );\r\n    }\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `/BusinessEntityDetails?entity-number=${encodeURIComponent(\r\n          entityNumber\r\n        )}`\r\n      );\r\n      const normalizedResponse = this.normalizeEntityResponse(\r\n        response,\r\n        entityNumber\r\n      );\r\n\r\n      // Cache successful responses\r\n      this.cache.set(cacheKey, {\r\n        data: normalizedResponse,\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      this.stats.successfulRequests++;\r\n      return normalizedResponse;\r\n    } catch (error) {\r\n      this.stats.errorCount++;\r\n      console.error(\"California SOS entity details error:\", error.message);\r\n\r\n      return {\r\n        found: false,\r\n        entityNumber,\r\n        error: error.message,\r\n        source: \"California Secretary of State\",\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check API server status\r\n   */\r\n  async checkServerStatus() {\r\n    try {\r\n      const response = await this.makeRequest(\"/ServerStatus\");\r\n      return {\r\n        status: \"operational\",\r\n        response,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: \"error\",\r\n        error: error.message,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make HTTP request to CA SOS API\r\n   */\r\n  async makeRequest(endpoint, retries = 3) {\r\n    const headers = {\r\n      \"Ocp-Apim-Subscription-Key\": this.apiKey,\r\n      Accept: \"application/json\",\r\n      \"User-Agent\": \"ProspectPro/2.0 Business Validation System\",\r\n    };\r\n\r\n    const url = `${this.baseUrl}${endpoint}`;\r\n\r\n    for (let attempt = 1; attempt <= retries; attempt++) {\r\n      try {\r\n        const response = await fetch(url, {\r\n          headers,\r\n          timeout: 30000, // 30 second timeout\r\n        });\r\n\r\n        // Handle different response statuses\r\n        if (response.ok) {\r\n          this.requestCount++;\r\n          this.stats.totalRequests++;\r\n          this.stats.lastRequestTime = new Date().toISOString();\r\n          return await response.json();\r\n        }\r\n\r\n        // Handle specific error codes\r\n        if (response.status === 400) {\r\n          throw new Error(\"Bad Request - Invalid parameters or no match found\");\r\n        } else if (response.status === 401 || response.status === 403) {\r\n          throw new Error(\"Authentication failed - Invalid API key\");\r\n        } else if (response.status === 429) {\r\n          // Rate limit exceeded - wait and retry\r\n          if (attempt < retries) {\r\n            const delay = Math.pow(2, attempt) * 1000; // Exponential backoff\r\n            console.log(\r\n              `Rate limit exceeded. Waiting ${delay}ms before retry ${attempt}/${retries}`\r\n            );\r\n            await new Promise((resolve) => setTimeout(resolve, delay));\r\n            continue;\r\n          }\r\n          throw new Error(\"Rate limit exceeded - Please try again later\");\r\n        } else if (response.status >= 500) {\r\n          // Server error - retry with backoff\r\n          if (attempt < retries) {\r\n            const delay = Math.pow(2, attempt) * 1000;\r\n            console.log(\r\n              `Server error ${response.status}. Retrying in ${delay}ms`\r\n            );\r\n            await new Promise((resolve) => setTimeout(resolve, delay));\r\n            continue;\r\n          }\r\n          throw new Error(`California SOS server error: ${response.status}`);\r\n        } else {\r\n          throw new Error(`California SOS API error: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        if (attempt === retries) {\r\n          throw error;\r\n        }\r\n        // Wait before retry\r\n        await new Promise((resolve) => setTimeout(resolve, 1000 * attempt));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Normalize search response for ProspectPro pipeline\r\n   */\r\n  normalizeSearchResponse(data, searchTerm) {\r\n    const entities = Array.isArray(data) ? data : [];\r\n\r\n    // Calculate confidence boost based on match quality\r\n    let confidenceBoost = 0;\r\n    let exactMatches = 0;\r\n\r\n    entities.forEach((entity) => {\r\n      if (\r\n        entity.EntityName &&\r\n        entity.EntityName.toLowerCase() === searchTerm.toLowerCase()\r\n      ) {\r\n        exactMatches++;\r\n      }\r\n    });\r\n\r\n    if (exactMatches > 0) {\r\n      confidenceBoost = 20; // High confidence for exact matches\r\n    } else if (entities.length > 0) {\r\n      confidenceBoost = 10; // Moderate confidence for partial matches\r\n    }\r\n\r\n    return {\r\n      found: entities.length > 0,\r\n      totalResults: entities.length,\r\n      exactMatches,\r\n      entities: entities.map((entity) => ({\r\n        entityId: entity.EntityID || null,\r\n        entityNumber: entity.EntityNumber || entity.EntityID,\r\n        entityName: entity.EntityName || null,\r\n        entityType: entity.EntityType || null,\r\n        status: entity.StatusDescription || entity.Status || null,\r\n        statusDescription: entity.StatusDescription || null,\r\n        jurisdiction: entity.Jurisdiction || \"California\",\r\n        registrationDate:\r\n          entity.RegistrationDate || entity.FormationDate || null,\r\n        lastUpdated: entity.LastUpdated || null,\r\n\r\n        // Agent information\r\n        agentName: entity.AgentName || null,\r\n        agentType: entity.AgentType || null,\r\n        agentAddress: entity.AgentAddress || null,\r\n\r\n        // Address information\r\n        principalAddress: entity.PrincipalAddress || null,\r\n        mailingAddress: entity.MailingAddress || null,\r\n\r\n        // Business details\r\n        purpose: entity.Purpose || null,\r\n        ceoName: entity.CEOName || null,\r\n        cfoCfoName: entity.CFOName || null,\r\n        secretaryName: entity.SecretaryName || null,\r\n\r\n        // Validation metadata\r\n        source: \"California Secretary of State\",\r\n        sourceId: entity.EntityID || entity.EntityNumber,\r\n        lastVerified: new Date().toISOString(),\r\n        dataQuality: \"official_government_record\",\r\n      })),\r\n\r\n      // ProspectPro metadata\r\n      source: \"California Secretary of State\",\r\n      apiCost: this.costPerRequest,\r\n      qualityScore: this.qualityScore,\r\n      confidenceBoost,\r\n      searchTerm,\r\n\r\n      // Performance metrics\r\n      cached: false,\r\n      processingTime: Date.now(),\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Normalize entity details response\r\n   */\r\n  normalizeEntityResponse(data, entityNumber) {\r\n    if (!data) {\r\n      return {\r\n        found: false,\r\n        entityNumber,\r\n        source: \"California Secretary of State\",\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    }\r\n\r\n    return {\r\n      found: true,\r\n      entityNumber,\r\n      entityDetails: {\r\n        entityId: data.EntityID || null,\r\n        entityNumber: data.EntityNumber || entityNumber,\r\n        entityName: data.EntityName || null,\r\n        entityType: data.EntityType || null,\r\n        status: data.StatusDescription || data.Status || null,\r\n        jurisdiction: data.Jurisdiction || \"California\",\r\n        registrationDate: data.RegistrationDate || null,\r\n        lastUpdated: data.LastUpdated || null,\r\n\r\n        // Complete entity information\r\n        agentName: data.AgentName || null,\r\n        agentType: data.AgentType || null,\r\n        principalAddress: data.PrincipalAddress || null,\r\n        mailingAddress: data.MailingAddress || null,\r\n        purpose: data.Purpose || null,\r\n\r\n        // Officers\r\n        ceoName: data.CEOName || null,\r\n        cfoName: data.CFOName || null,\r\n        secretaryName: data.SecretaryName || null,\r\n\r\n        // Additional fields\r\n        sicCode: data.SICCode || null,\r\n        sicDescription: data.SICDescription || null,\r\n      },\r\n      source: \"California Secretary of State\",\r\n      qualityScore: this.qualityScore,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Mock response for testing when API key not available\r\n   */\r\n  getMockResponse(businessName) {\r\n    return {\r\n      found: false,\r\n      totalResults: 0,\r\n      entities: [],\r\n      error:\r\n        \"API key not configured - this would search California SOS database\",\r\n      source: \"California Secretary of State (Mock)\",\r\n      apiCost: this.costPerRequest,\r\n      qualityScore: 0,\r\n      confidenceBoost: 0,\r\n      searchTerm: businessName,\r\n      timestamp: new Date().toISOString(),\r\n      mockData: true,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get usage statistics\r\n   */\r\n  getUsageStats() {\r\n    return {\r\n      ...this.stats,\r\n      rateLimitStatus: {\r\n        currentPeriodRequests: this.requestCount,\r\n        hourlyLimit: this.rateLimitPerHour,\r\n        resetTime: new Date(\r\n          this.lastResetTime + this.rateLimitWindow\r\n        ).toISOString(),\r\n      },\r\n      cacheStats: {\r\n        entriesCount: this.cache.size,\r\n        hitRate:\r\n          this.stats.totalRequests > 0\r\n            ? this.stats.cachedResponses / this.stats.totalRequests\r\n            : 0,\r\n      },\r\n      apiInfo: {\r\n        qualityScore: this.qualityScore,\r\n        costPerRequest: this.costPerRequest,\r\n        isConfigured: !!this.apiKey,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clear cache\r\n   */\r\n  clearCache() {\r\n    this.cache.clear();\r\n    console.log(\"California SOS API cache cleared\");\r\n  }\r\n}\r\n\r\nmodule.exports = CaliforniaSOSClient;\r\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":2,"duration":0.054},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":3,"duration":0.054},
{"type":"measure","name":"lsp.did_open","count":5,"duration":13.929},
{"type":"mark","name":"lsp.did_open","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/CA_SOS_API_ANALYSIS.md","languageId":"markdown","version":1,"text":"## 🔍 California SOS Business Search Analysis\n\n**Investigation Date:** September 30, 2025  \n**Objective:** Determine if public CA SOS business search can be leveraged without subscription API\n\n### 🌐 **Available CA SOS Resources**\n\n#### **1. Business Search Portal**\n\n- **URL**: https://businesssearch.sos.ca.gov/\n- **Access**: Public web interface\n- **Protection**: Behind Incapsula/Imperva WAF\n- **API**: No accessible public API endpoints\n\n#### **2. BizFile Online Portal**\n\n- **URL**: https://bizfileonline.sos.ca.gov/\n- **Access**: React-based application\n- **Protection**: Incapsula protection active\n- **Purpose**: Business entity filings and registrations\n\n#### **3. Subscription API (Current Implementation)**\n\n- **URL**: https://calico.sos.ca.gov/cbc/v1/api/\n- **Authentication**: `Ocp-Apim-Subscription-Key` header required\n- **Cost**: Subscription-based (contact CA SOS)\n- **Features**: Keyword search, entity details, server status\n\n### 🚫 **Limitations Found**\n\n1. **No Public API**: All attempts to access endpoints return 401 Unauthorized\n2. **WAF Protection**: Sites are protected against automated access\n3. **Frontend Only**: Web portals are React/JavaScript applications without exposed APIs\n4. **robots.txt**: Returns HTML app instead of robots file (protected)\n\n### 💡 **Alternative Approaches**\n\n#### **Option 1: Keep Current Implementation (Recommended)**\n\n```javascript\n// Current CA SOS client with subscription key\nif (!this.apiKey) {\n  console.warn(\"⚠️ California SOS API requires subscription key\");\n  return this.getMockResponse(businessName);\n}\n```\n\n**Pros:**\n\n- Official API with structured data\n- High data quality and reliability\n- Rate limiting and proper error handling\n- Legal compliance with terms of service\n\n**Cons:**\n\n- Requires paid subscription\n- Must contact CA SOS for access\n\n#### **Option 2: Web Scraping (Not Recommended)**\n\n```javascript\n// Theoretical scraping approach - DO NOT IMPLEMENT\nconst searchUrl = `https://businesssearch.sos.ca.gov/CBS/SearchResults?SearchType=CORP&SearchCriteria=${encodeURIComponent(\n  businessName\n)}&SearchSubType=Keyword`;\n```\n\n**Why Not Recommended:**\n\n- ❌ Violates terms of service\n- ❌ WAF protection prevents reliable access\n- ❌ No structured data format\n- ❌ Legal risks and potential IP blocking\n- ❌ Unreliable and maintenance-heavy\n\n#### **Option 3: Remove CA SOS Integration**\n\nSince you don't have a subscription key and the public search isn't accessible:\n\n```javascript\n// Simplified approach - remove CA SOS from required APIs\nconst optionalGovAPIs = [\n  \"CALIFORNIA_SOS_API_KEY\",\n  \"SOCRATA_API_KEY\",\n  \"USPTO_TSDR_API_KEY\",\n];\n```\n\n### 🎯 **Recommendation**\n\n**Current Status**: Keep CA SOS implementation as-is with proper fallback\n\n**Rationale:**\n\n1. **Legal Compliance**: Only use official APIs\n2. **Future Proof**: Easy to activate if you get subscription\n3. **Clean Fallback**: Graceful degradation when key not available\n4. **Professional**: Maintains code quality and reliability\n\n### 🔧 **Implementation Status**\n\nYour current implementation is actually **optimal**:\n\n```javascript\n// ✅ Already implemented correctly\nif (!this.apiKey) {\n  console.warn(\"⚠️ California SOS API requires subscription key\");\n  return this.getMockResponse(businessName);\n}\n```\n\n### 📝 **Next Steps**\n\n1. **Keep current code** - no changes needed\n2. **Don't add subscription key** to Cloud Build until you have one\n3. **Focus on essential APIs**: Google Places, Hunter.io, NeverBounce\n4. **Consider CA SOS subscription** only if CA business verification becomes critical\n\n### 🎉 **Conclusion**\n\nNo public alternatives found for CA SOS business search. Your current implementation with graceful fallback is the correct approach. The subscription API is the only legitimate way to access CA SOS business data programmatically.\n"}}},
{"type":"measure","name":"lsp.did_open","count":6,"duration":0.065},
{"type":"mark","name":"lsp.did_open","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json","languageId":"json","version":1,"text":"{\n    \"headers\": [\n        {\n            \"source\": \"/(.*)\",\n            \"headers\": [\n                {\n                    \"key\": \"X-Frame-Options\",\n                    \"value\": \"SAMEORIGIN\"\n                },\n                {\n                    \"key\": \"Access-Control-Allow-Origin\",\n                    \"value\": \"*\"\n                },\n                {\n                    \"key\": \"Access-Control-Allow-Methods\",\n                    \"value\": \"GET, POST, PUT, DELETE, OPTIONS\"\n                },\n                {\n                    \"key\": \"Access-Control-Allow-Headers\",\n                    \"value\": \"Content-Type, Authorization\"\n                }\n            ]\n        }\n    ]\n}"}}},
{"type":"measure","name":"lsp.did_open","count":7,"duration":0.024},
{"type":"mark","name":"lsp.did_open","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/scripts/cloud-run-service-diagnostic.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * Cloud Run Service Diagnostic\n * Checks the current deployment status and troubleshoots issues\n */\n\nconsole.log(\"🔍 ProspectPro Cloud Run Service Diagnostic\");\nconsole.log(\"=\" * 50);\n\nasync function checkService() {\n  const serviceUrls = [\n    \"https://prospectpro-184492422840.us-central1.run.app\",\n    \"https://prospectpro-uswbuyt7ha-uc.a.run.app\",\n  ];\n\n  console.log(\"\\n🌐 Testing Service Endpoints:\");\n\n  for (const url of serviceUrls) {\n    console.log(`\\n📍 Testing: ${url}`);\n\n    try {\n      // Test different endpoints\n      const endpoints = [\n        \"/health\",\n        \"/diag\",\n        \"/\",\n        \"/api/business/discover-businesses\",\n      ];\n\n      for (const endpoint of endpoints) {\n        try {\n          const response = await fetch(url + endpoint, {\n            method:\n              endpoint === \"/api/business/discover-businesses\" ? \"POST\" : \"GET\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body:\n              endpoint === \"/api/business/discover-businesses\"\n                ? JSON.stringify({ businessType: \"test\", location: \"test\" })\n                : undefined,\n            timeout: 10000,\n          });\n\n          console.log(\n            `   ${endpoint}: ${response.status} ${response.statusText}`\n          );\n\n          if (response.status === 200) {\n            const text = await response.text();\n            console.log(`   ✅ SUCCESS: ${text.substring(0, 100)}...`);\n            return; // Found working endpoint\n          }\n        } catch (error) {\n          console.log(`   ${endpoint}: ❌ ${error.message}`);\n        }\n      }\n    } catch (error) {\n      console.log(`   ❌ Service unreachable: ${error.message}`);\n    }\n  }\n\n  console.log(\"\\n🔧 Diagnostic Summary:\");\n  console.log(\n    \"   📊 Service Status: Container running but app not responding correctly\"\n  );\n  console.log(\"   🚨 Likely Issues:\");\n  console.log(\"      - Application startup failure\");\n  console.log(\"      - Port binding issues\");\n  console.log(\"      - Environment variable problems\");\n  console.log(\"      - Authentication/authorization blocking\");\n  console.log(\"\\n💡 Next Steps:\");\n  console.log(\"   1. Check Cloud Run logs for startup errors\");\n  console.log(\"   2. Verify environment variables are properly set\");\n  console.log(\"   3. Test local startup with production-like environment\");\n  console.log(\"   4. Check if service requires authentication\");\n}\n\n// Only run if fetch is available (Node 18+)\nif (typeof fetch !== \"undefined\") {\n  checkService().catch(console.error);\n} else {\n  console.log(\n    \"⚠️ Node.js version does not support fetch. Use Node 18+ for full diagnostic.\"\n  );\n  console.log(\"\\n🔧 Manual Tests:\");\n  console.log(\n    \"   curl https://prospectpro-184492422840.us-central1.run.app/health\"\n  );\n  console.log(\n    \"   curl https://prospectpro-184492422840.us-central1.run.app/diag\"\n  );\n  console.log(\"   curl https://prospectpro-184492422840.us-central1.run.app/\");\n}\n\nconsole.log(\"\\n📋 Latest Deployment Info from Logs:\");\nconsole.log(\"   🏷️  Revision: prospectpro-00089-g67\");\nconsole.log(\n  \"   📦 Image: us-central1-docker.pkg.dev/leadgen-471822/prospectpro/app:ebd102a\"\n);\nconsole.log(\"   ⏰ Deployed: 2025-09-30T05:14:13Z\");\nconsole.log(\"   🌐 URLs: https://prospectpro-184492422840.us-central1.run.app\");\nconsole.log('   📊 Status: All conditions \"True\" (should be working)');\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":4,"duration":0.068},
{"type":"measure","name":"lsp.did_open","count":8,"duration":2.843},
{"type":"mark","name":"lsp.did_open","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json","languageId":"jsonc","version":1,"text":"{\r\n  \"name\": \"ProspectPro Development\",\r\n  \"image\": \"mcr.microsoft.com/devcontainers/javascript-node:20\",\r\n  \"features\": {\r\n    \"ghcr.io/devcontainers/features/git:1\": {}\r\n  },\r\n  \"customizations\": {\r\n    \"vscode\": {\r\n      \"extensions\": [\r\n        // Core Development\r\n        \"denoland.vscode-deno\",\r\n        \"supabase.supabase-vscode\",\r\n        \"dbaeumer.vscode-eslint\",\r\n        \"esbenp.prettier-vscode\",\r\n\r\n        // Productivity\r\n        \"eamodio.gitlens\",\r\n        \"github.copilot\",\r\n        \"github.copilot-chat\",\r\n        \"streetsidesoftware.code-spell-checker\",\r\n        \"wayou.vscode-todo-highlight\",\r\n\r\n        // API Development\r\n        \"humao.rest-client\",\r\n        \"rangav.vscode-thunder-client\",\r\n\r\n        // Docker Support\r\n        \"ms-azuretools.vscode-docker\",\r\n\r\n        // Database Tools\r\n        \"mtxr.sqltools\",\r\n        \"mtxr.sqltools-driver-pg\",\r\n\r\n        // Security\r\n        \"snyk-security.snyk-vulnerability-scanner\",\r\n\r\n        // Performance\r\n        \"wix.vscode-import-cost\",\r\n\r\n        // Documentation\r\n        \"bierner.markdown-preview-github-styles\",\r\n\r\n        // Development Theme & Visual Organization\r\n        \"deepforest.theme\", // Vira Deepforest theme for organized development\r\n        \"vscode-icons-team.vscode-icons\", // Better file icons for organization\r\n\r\n        // Recommended to Uninstall (using proper format with leading -)\r\n        \"-github.vscode-pull-request-github\", // Too much impact on startup\r\n        \"-codezombiech.gitignore\", // Limited utility, slows startup\r\n        \"-yzhang.markdown-all-in-one\", // Redundant with built-in\r\n        \"-aaron-bond.better-comments\" // Visual noise, performance impact\r\n      ],\r\n      \"settings\": {\r\n        \"terminal.integrated.defaultProfile.linux\": \"bash\",\r\n        \"deno.enable\": true,\r\n        \"deno.enablePaths\": [\"supabase/functions\"],\r\n        \"git.autofetch\": true,\r\n        \"git.confirmSync\": false,\r\n        \"git.enableSmartCommit\": true,\r\n\r\n        // Editor Performance Settings - Enhanced for Development\r\n        \"editor.minimap.enabled\": false,\r\n        \"editor.renderWhitespace\": \"none\",\r\n        \"editor.renderControlCharacters\": false,\r\n        \"workbench.colorTheme\": \"Vira Deepforest\", // Development-specific theme\r\n        \"workbench.iconTheme\": \"vscode-icons\", // Better file icons for organization\r\n        \"workbench.list.smoothScrolling\": false,\r\n        \"workbench.tree.renderIndentGuides\": \"none\",\r\n        \"workbench.editor.closeOnFileDelete\": true,\r\n\r\n        // Development-specific UI enhancements\r\n        \"workbench.colorCustomizations\": {\r\n          \"[Vira Deepforest]\": {\r\n            \"titleBar.activeBackground\": \"#1a4d3a\",\r\n            \"titleBar.activeForeground\": \"#ffffff\",\r\n            \"statusBar.background\": \"#1a4d3a\",\r\n            \"statusBar.foreground\": \"#ffffff\",\r\n            \"activityBar.background\": \"#0d2818\",\r\n            \"panel.background\": \"#0a1f14\"\r\n          }\r\n        },\r\n        \"workbench.settings.editor\": \"json\",\r\n        \"breadcrumbs.enabled\": true,\r\n\r\n        // File System Performance\r\n        \"files.watcherExclude\": {\r\n          \"**/*.log\": true,\r\n          \"**/*.tmp\": true,\r\n          \"**/node_modules/**\": true,\r\n          \"**/archive/**\": true,\r\n          \"**/.git/**\": true,\r\n          \"**/logs/**\": true\r\n        },\r\n\r\n        // Search Performance\r\n        \"search.exclude\": {\r\n          \"**/node_modules\": true,\r\n          \"**/*.log\": true,\r\n          \"**/archive/**\": true,\r\n          \"**/.git\": true\r\n        },\r\n        \"search.searchOnType\": false,\r\n\r\n        // Copilot Optimization\r\n        \"github.copilot.chat.historyCount\": 8,\r\n        \"github.copilot.chat.welcomeMessage\": \"none\",\r\n        \"github.copilot.chat.completionPhrasesEnabled\": false,\r\n        \"github.copilot.advanced.setAutoCompletionTriggerThreshold\": 30,\r\n\r\n        // Terminal Settings - Development Enhanced\r\n        \"terminal.integrated.gpuAcceleration\": \"on\",\r\n        \"terminal.integrated.scrollback\": 1000,\r\n        \"terminal.integrated.fontFamily\": \"Consolas, 'Courier New', monospace\",\r\n        \"terminal.integrated.fontSize\": 13,\r\n\r\n        // Development Environment Indicators\r\n        \"window.title\": \"🔨 ${folderName} - ProspectPro Development ${separator} ${activeEditorShort}\",\r\n        \"workbench.startupEditor\": \"welcomePageInEmptyWorkbench\",\r\n\r\n        // === MCP (Model Context Protocol) Configuration ===\r\n        \"mcp.enable\": true,\r\n        \"mcp.configFile\": \"${workspaceFolder}/.vscode/mcp-config.json\",\r\n\r\n        // API Development Specific Settings\r\n        \"rest-client.enableTelemetry\": false,\r\n        \"files.associations\": {\r\n          \"*.http\": \"http\",\r\n          \"*.rest\": \"http\"\r\n        },\r\n\r\n        // AI-Enhanced Development Settings for API Integration\r\n        \"ai.contextAware\": true,\r\n        \"ai.projectContext\": {\r\n          \"type\": \"lead-generation-platform\",\r\n          \"framework\": \"node-express\",\r\n          \"database\": \"supabase\",\r\n          \"apis\": [\"google-places\", \"foursquare\", \"hunter-io\", \"neverbounce\"],\r\n          \"deployment\": \"docker-compose\",\r\n          \"monitoring\": \"custom-diagnostics\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"forwardPorts\": [3000, 5432],\r\n  \"postCreateCommand\": \"bash -lc 'set -e; echo \\\"🏗️  Setting up ProspectPro Development Environment...\\\"; sudo apt-get update && sudo apt-get install -y docker.io; if [ -f package-lock.json ]; then npm ci; else npm install; fi; npm i supabase --save-dev; npm run mcp:install; npm run mcp:test; echo \\\"🎨 Development environment ready with Vira Deepforest theme and MCP enabled!\\\"; echo \\\"🚀 ProspectPro development container is ready for API integration work\\\"'\",\r\n  \"postStartCommand\": \"bash -c 'echo \\\"🌲 ProspectPro Development Container Started\\\"; echo \\\"Theme: Vira Deepforest | MCP: Enabled | Ready for API Integration\\\"; echo \\\"💡 Use Copilot Chat for AI-assisted development with full system context\\\"'\",\r\n  \"runArgs\": [\"--init\", \"-v\", \"/var/run/docker.sock:/var/run/docker.sock\"],\r\n  \"remoteUser\": \"node\"\r\n}\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":9,"duration":0.09},
Server ready.
{"type":"mark","name":"lsp.did_open","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/scripts/verify-env-mapping.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * Environment Variable Mapping Verification\n * Checks that Cloud Build substitution variables match environment loader expectations\n */\n\nconsole.log(\"🔍 Environment Variable Mapping Verification\");\nconsole.log(\"=\" * 50);\n\n// Expected mappings from Cloud Build trigger → Environment Variables → Environment Loader\nconst mappings = [\n  {\n    trigger: \"_SUPABASE_URL\",\n    envVar: \"SUPABASE_URL\",\n    loaderKey: \"supabase.url\",\n    required: true,\n  },\n  {\n    trigger: \"_SUPABASE_SECRET_KEY\",\n    envVar: \"SUPABASE_SECRET_KEY\",\n    loaderKey: \"supabase.secretKey\",\n    required: true,\n  },\n  {\n    trigger: \"_WEBHOOK_AUTH_TOKEN\",\n    envVar: \"WEBHOOK_AUTH_TOKEN\",\n    loaderKey: \"webhookAuthToken\",\n    required: true,\n  },\n  {\n    trigger: \"_GOOGLE_PLACES_API_KEY\",\n    envVar: \"GOOGLE_PLACES_API_KEY\",\n    loaderKey: \"apiKeys.googlePlaces\",\n    required: false,\n  },\n  {\n    trigger: \"_HUNTER_API_KEY\",\n    envVar: \"HUNTER_API_KEY\",\n    loaderKey: \"apiKeys.hunterIO\",\n    required: false,\n  },\n  {\n    trigger: \"_NEVERBOUNCE_API_KEY\",\n    envVar: \"NEVERBOUNCE_API_KEY\",\n    loaderKey: \"apiKeys.neverBounce\",\n    required: false,\n  },\n  {\n    trigger: \"_FOURSQUARE_SERVICE_API_KEY\",\n    envVar: \"FOURSQUARE_SERVICE_API_KEY\",\n    loaderKey: \"apiKeys.foursquare\",\n    required: false,\n  },\n];\n\nconsole.log(\"\\n📋 Variable Mapping Check:\");\nconsole.log(\n  \"Cloud Build Trigger → Environment Variable → Environment Loader\\n\"\n);\n\nmappings.forEach((mapping) => {\n  const status = mapping.required ? \"🔴 REQUIRED\" : \"🟡 OPTIONAL\";\n  console.log(`${status} ${mapping.trigger}`);\n  console.log(`   → ${mapping.envVar}`);\n  console.log(`   → ${mapping.loaderKey}`);\n  console.log(\"\");\n});\n\n// Check current Cloud Build YAML configuration\nconsole.log(\"🔧 Cloud Build Configuration Check:\");\nconst fs = require(\"fs\");\nconst yaml = fs.readFileSync(\"/workspaces/ProspectPro/cloudbuild.yaml\", \"utf8\");\n\nconst checks = [\n  {\n    pattern: /--set-env-vars=SUPABASE_URL=\\$\\{_SUPABASE_URL\\}/,\n    name: \"SUPABASE_URL\",\n  },\n  {\n    pattern: /--set-env-vars=SUPABASE_SECRET_KEY=\\$\\{_SUPABASE_SECRET_KEY\\}/,\n    name: \"SUPABASE_SECRET_KEY\",\n  },\n  {\n    pattern: /--set-env-vars=WEBHOOK_AUTH_TOKEN=\\$\\{_WEBHOOK_AUTH_TOKEN\\}/,\n    name: \"WEBHOOK_AUTH_TOKEN\",\n  },\n  {\n    pattern:\n      /--set-env-vars=GOOGLE_PLACES_API_KEY=\\$\\{_GOOGLE_PLACES_API_KEY\\}/,\n    name: \"GOOGLE_PLACES_API_KEY\",\n  },\n  {\n    pattern: /--set-env-vars=HUNTER_API_KEY=\\$\\{_HUNTER_API_KEY\\}/,\n    name: \"HUNTER_API_KEY\",\n  },\n  {\n    pattern: /--set-env-vars=NEVERBOUNCE_API_KEY=\\$\\{_NEVERBOUNCE_API_KEY\\}/,\n    name: \"NEVERBOUNCE_API_KEY\",\n  },\n];\n\nchecks.forEach((check) => {\n  const found = check.pattern.test(yaml);\n  console.log(\n    `   ${found ? \"✅\" : \"❌\"} ${check.name}: ${\n      found ? \"CONFIGURED\" : \"MISSING\"\n    }`\n  );\n});\n\n// Check substitution variables\nconsole.log(\"\\n🔄 Substitution Variables Check:\");\nconst subChecks = [\n  { pattern: /_SUPABASE_URL:\\s*''/, name: \"_SUPABASE_URL\" },\n  { pattern: /_SUPABASE_SECRET_KEY:\\s*''/, name: \"_SUPABASE_SECRET_KEY\" },\n  { pattern: /_WEBHOOK_AUTH_TOKEN:\\s*''/, name: \"_WEBHOOK_AUTH_TOKEN\" },\n  { pattern: /_GOOGLE_PLACES_API_KEY:\\s*''/, name: \"_GOOGLE_PLACES_API_KEY\" },\n  { pattern: /_HUNTER_API_KEY:\\s*''/, name: \"_HUNTER_API_KEY\" },\n  { pattern: /_NEVERBOUNCE_API_KEY:\\s*''/, name: \"_NEVERBOUNCE_API_KEY\" },\n];\n\nsubChecks.forEach((check) => {\n  const found = check.pattern.test(yaml);\n  console.log(\n    `   ${found ? \"✅\" : \"❌\"} ${check.name}: ${found ? \"DECLARED\" : \"MISSING\"}`\n  );\n});\n\nconsole.log(\"\\n✅ Configuration Status:\");\nconsole.log(\"   📋 Cloud Build YAML updated to use environment variables\");\nconsole.log(\"   🔧 Environment loader updated to match variable names\");\nconsole.log(\"   🚀 Ready for deployment test\");\n\nconsole.log(\"\\n📝 Next Steps:\");\nconsole.log(\"   1. Commit and push changes\");\nconsole.log(\"   2. Cloud Build will trigger automatically\");\nconsole.log(\"   3. Test deployed service endpoints\");\nconsole.log(\"   4. Verify environment variables in Cloud Run logs\");\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":5,"duration":0.074},
{"type":"measure","name":"lsp.did_open","count":10,"duration":1.006},
{"type":"mark","name":"lsp.did_open","count":11,"args":{"textDocument":{"uri":"file:///home/node/.vscode-remote/data/Machine/settings.json","languageId":"jsonc","version":1,"text":"{\n  \"github.copilot.chat.codeGeneration.instructions\": [\n    {\n      \"text\": \"This dev container includes an up-to-date version of Git, built from source as needed, pre-installed and available on the `PATH`.\"\n    },\n    {\n      \"text\": \"This dev container includes `node`, `npm` and `eslint` pre-installed and available on the `PATH` for Node.js and JavaScript development.\"\n    },\n    {\n      \"text\": \"This dev container includes an up-to-date version of Git, built from source as needed, pre-installed and available on the `PATH`.\"\n    },\n    {\n      \"text\": \"This workspace is in a dev container running on \\\"Debian GNU/Linux 13 (trixie)\\\".\\n\\nUse `\\\"$BROWSER\\\" <url>` to open a webpage in the host's default browser.\\n\\nSome of the command line tools available on the `PATH`: `apt`, `dpkg`, `git`, `curl`, `wget`, `ssh`, `scp`, `rsync`, `gpg`, `ps`, `lsof`, `netstat`, `top`, `tree`, `find`, `grep`, `zip`, `unzip`, `tar`, `gzip`, `bzip2`, `xz`\"\n    }\n  ],\n  \"terminal.integrated.defaultProfile.linux\": \"bash\",\n  \"deno.enable\": true,\n  \"deno.enablePaths\": [\"supabase/functions\"],\n  \"git.autofetch\": true,\n  \"git.confirmSync\": false,\n  \"git.enableSmartCommit\": true,\n  \"editor.minimap.enabled\": false,\n  \"editor.renderWhitespace\": \"none\",\n  \"editor.renderControlCharacters\": false,\n  \"workbench.colorTheme\": \"Vira Deepforest\",\n  \"workbench.iconTheme\": \"vira-icons-teal\",\n  \"workbench.list.smoothScrolling\": false,\n  \"workbench.tree.renderIndentGuides\": \"none\",\n  \"workbench.editor.closeOnFileDelete\": true,\n  \"workbench.colorCustomizations\": {\n    \"[Vira*]\": {\n      \"statusBar.debuggingBackground\": \"#80CBC433\",\n      \"statusBar.debuggingForeground\": \"#80CBC4\",\n      \"toolbar.activeBackground\": \"#80CBC426\",\n      \"button.background\": \"#80CBC4\",\n      \"button.hoverBackground\": \"#80CBC4cc\",\n      \"extensionButton.separator\": \"#80CBC433\",\n      \"extensionButton.background\": \"#80CBC414\",\n      \"extensionButton.foreground\": \"#80CBC4\",\n      \"extensionButton.hoverBackground\": \"#80CBC433\",\n      \"extensionButton.prominentForeground\": \"#80CBC4\",\n      \"extensionButton.prominentBackground\": \"#80CBC414\",\n      \"extensionButton.prominentHoverBackground\": \"#80CBC433\",\n      \"activityBarBadge.background\": \"#80CBC4\",\n      \"activityBar.activeBorder\": \"#80CBC4\",\n      \"activityBarTop.activeBorder\": \"#80CBC4\",\n      \"list.inactiveSelectionIconForeground\": \"#80CBC4\",\n      \"list.activeSelectionForeground\": \"#80CBC4\",\n      \"list.inactiveSelectionForeground\": \"#80CBC4\",\n      \"list.highlightForeground\": \"#80CBC4\",\n      \"sash.hoverBorder\": \"#80CBC480\",\n      \"list.activeSelectionIconForeground\": \"#80CBC4\",\n      \"scrollbarSlider.activeBackground\": \"#80CBC480\",\n      \"editorSuggestWidget.highlightForeground\": \"#80CBC4\",\n      \"textLink.foreground\": \"#80CBC4\",\n      \"progressBar.background\": \"#80CBC4\",\n      \"pickerGroup.foreground\": \"#80CBC4\",\n      \"tab.activeBorder\": \"#80CBC400\",\n      \"tab.activeBorderTop\": \"#80CBC4\",\n      \"tab.unfocusedActiveBorder\": \"#80CBC400\",\n      \"tab.unfocusedActiveBorderTop\": \"#80CBC4\",\n      \"tab.activeModifiedBorder\": \"#80CBC4\",\n      \"notificationLink.foreground\": \"#80CBC4\",\n      \"editorWidget.resizeBorder\": \"#80CBC4\",\n      \"editorWidget.border\": \"#80CBC4\",\n      \"settings.modifiedItemIndicator\": \"#80CBC4\",\n      \"panelTitle.activeBorder\": \"#80CBC4\",\n      \"breadcrumb.activeSelectionForeground\": \"#80CBC4\",\n      \"menu.selectionForeground\": \"#80CBC4\",\n      \"menubar.selectionForeground\": \"#80CBC4\",\n      \"editor.findMatchBorder\": \"#80CBC4\",\n      \"selection.background\": \"#80CBC440\",\n      \"statusBarItem.remoteBackground\": \"#80CBC414\",\n      \"statusBarItem.remoteHoverBackground\": \"#80CBC4\",\n      \"statusBarItem.remoteForeground\": \"#80CBC4\",\n      \"notebook.inactiveFocusedCellBorder\": \"#80CBC480\",\n      \"commandCenter.activeBorder\": \"#80CBC480\",\n      \"chat.slashCommandForeground\": \"#80CBC4\",\n      \"chat.avatarForeground\": \"#80CBC4\",\n      \"activityBarBadge.foreground\": \"#000000\",\n      \"button.foreground\": \"#000000\",\n      \"statusBarItem.remoteHoverForeground\": \"#000000\",\n      \"editorGroupHeader.tabsBackground\": \"#ffffff0a\",\n      \"tab.border\": \"#ffffff01\",\n      \"tab.inactiveBackground\": \"#ffffff01\",\n      \"widget.shadow\": \"#00000000\",\n      \"scrollbar.shadow\": \"#00000000\"\n    },\n    \"[Vira Deepforest]\": {\n      \"titleBar.activeBackground\": \"#1a4d3a\",\n      \"titleBar.activeForeground\": \"#ffffff\",\n      \"statusBar.background\": \"#1a4d3a\",\n      \"statusBar.foreground\": \"#ffffff\",\n      \"activityBar.background\": \"#0d2818\",\n      \"panel.background\": \"#0a1f14\"\n    },\n    \"statusBar.background\": \"#667eea\",\n    \"statusBar.foreground\": \"#ffffff\"\n  },\n  \"workbench.settings.editor\": \"json\",\n  \"breadcrumbs.enabled\": true,\n  \"files.watcherExclude\": {\n    \"**/*.log\": true,\n    \"**/*.tmp\": true,\n    \"**/node_modules/**\": true,\n    \"**/archive/**\": true,\n    \"**/.git/**\": true,\n    \"**/logs/**\": true\n  },\n  \"search.exclude\": {\n    \"**/node_modules\": true,\n    \"**/*.log\": true,\n    \"**/archive/**\": true,\n    \"**/.git\": true\n  },\n  \"search.searchOnType\": false,\n  \"github.copilot.chat.historyCount\": 8,\n  \"github.copilot.chat.welcomeMessage\": \"none\",\n  \"github.copilot.chat.completionPhrasesEnabled\": false,\n  \"github.copilot.advanced.setAutoCompletionTriggerThreshold\": 30,\n  \"terminal.integrated.gpuAcceleration\": \"on\",\n  \"terminal.integrated.scrollback\": 1000,\n  \"terminal.integrated.fontFamily\": \"Consolas, 'Courier New', monospace\",\n  \"terminal.integrated.fontSize\": 13,\n  \"window.title\": \"🔨 ${folderName} - ProspectPro Development ${separator} ${activeEditorShort}\",\n  \"workbench.startupEditor\": \"welcomePageInEmptyWorkbench\",\n  \"mcp.enable\": true,\n  \"mcp.configFile\": \"${workspaceFolder}/.vscode/mcp-config.json\",\n  \"rest-client.enableTelemetry\": false,\n  \"files.associations\": {\n    \"*.http\": \"http\",\n    \"*.rest\": \"http\"\n  },\n  \"ai.contextAware\": true,\n  \"ai.projectContext\": {\n    \"type\": \"lead-generation-platform\",\n    \"framework\": \"node-express\",\n    \"database\": \"supabase\",\n    \"apis\": [\"google-places\", \"foursquare\", \"hunter-io\", \"neverbounce\"],\n    \"deployment\": \"docker-compose\",\n    \"monitoring\": \"custom-diagnostics\"\n  },\n  \"snyk.advanced.cliPath\": \"/home/node/.local/share/snyk/vscode-cli/snyk-linux\",\n  \"github.copilot.advanced\": {\n    \"setAutoCompletionTriggerThreshold\": 30\n  }\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":11,"duration":0.094},
{"type":"mark","name":"lsp.did_close","count":1,"args":{"textDocument":{"uri":"file:///home/node/.vscode-remote/data/Machine/settings.json"}}},
{"type":"measure","name":"lsp.did_close","count":1,"duration":0.017},
{"type":"mark","name":"lsp.did_open","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/WEBHOOK_CONFIGURATION_GUIDE.md","languageId":"markdown","version":1,"text":"# Supabase Webhook Configuration Guide\n\n## Manual Configuration via Supabase Dashboard\n\n### Prerequisites\n\n- Access to your Supabase project dashboard\n- Database → Webhooks section\n- ProspectPro deployed at: `https://prospectpro-uswbuyt7ha-uc.a.run.app`\n\n### Webhook Authentication Token\n\n```\nwh_f7616c7477f7e2072912c82360bf048ce88950be5d746490a0b3e74ba2bab3a2\n```\n\n---\n\n## Webhook 1: Campaign Lifecycle Monitor\n\n### Conditions to fire webhook\n\n- **Table**: `business_discovery_campaigns`\n- **Events**:\n  - ☑️ Insert (Any insert operation on the table)\n  - ☑️ Update (Any update operation, of any column in the table)\n  - ☐ Delete\n\n### Webhook configuration\n\n- **Type of webhook**: HTTP Request\n- **Method**: POST\n- **URL**: `https://prospectpro-uswbuyt7ha-uc.a.run.app/api/webhooks/campaign-lifecycle`\n- **Timeout**: 5000 ms\n\n### HTTP Headers\n\n- **Content-type**: `application/json`\n- **Authorization**: `Bearer wh_f7616c7477f7e2072912c82360bf048ce88950be5d746490a0b3e74ba2bab3a2`\n\n### HTTP Parameters\n\n- (Leave empty - data will be sent in request body)\n\n---\n\n## Webhook 2: Cost Alert Monitor\n\n### Conditions to fire webhook\n\n- **Table**: `campaign_costs`\n- **Events**:\n  - ☑️ Insert (Any insert operation on the table)\n  - ☑️ Update (Any update operation, of any column in the table)\n  - ☐ Delete\n\n### Webhook configuration\n\n- **Type of webhook**: HTTP Request\n- **Method**: POST\n- **URL**: `https://prospectpro-uswbuyt7ha-uc.a.run.app/api/webhooks/cost-alert`\n- **Timeout**: 5000 ms\n\n### HTTP Headers\n\n- **Content-type**: `application/json`\n- **Authorization**: `Bearer wh_f7616c7477f7e2072912c82360bf048ce88950be5d746490a0b3e74ba2bab3a2`\n\n### HTTP Parameters\n\n- (Leave empty - data will be sent in request body)\n\n---\n\n## Webhook 3: Lead Enrichment Processor\n\n### Conditions to fire webhook\n\n- **Table**: `business_contacts`\n- **Events**:\n  - ☑️ Insert (Any insert operation on the table)\n  - ☑️ Update (Any update operation, of any column in the table)\n  - ☐ Delete\n\n### Webhook configuration\n\n- **Type of webhook**: HTTP Request\n- **Method**: POST\n- **URL**: `https://prospectpro-uswbuyt7ha-uc.a.run.app/api/webhooks/lead-enrichment`\n- **Timeout**: 5000 ms\n\n### HTTP Headers\n\n- **Content-type**: `application/json`\n- **Authorization**: `Bearer wh_f7616c7477f7e2072912c82360bf048ce88950be5d746490a0b3e74ba2bab3a2`\n\n### HTTP Parameters\n\n- (Leave empty - data will be sent in request body)\n\n---\n\n## Testing Webhooks\n\nAfter configuration, test each webhook:\n\n```bash\n# Test campaign lifecycle webhook\ncurl -X POST https://prospectpro-uswbuyt7ha-uc.a.run.app/api/webhooks/campaign-lifecycle \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer wh_f7616c7477f7e2072912c82360bf048ce88950be5d746490a0b3e74ba2bab3a2\" \\\n  -d '{\"test\": true}'\n\n# Test cost alert webhook\ncurl -X POST https://prospectpro-uswbuyt7ha-uc.a.run.app/api/webhooks/cost-alert \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer wh_f7616c7477f7e2072912c82360bf048ce88950be5d746490a0b3e74ba2bab3a2\" \\\n  -d '{\"test\": true}'\n\n# Test lead enrichment webhook\ncurl -X POST https://prospectpro-uswbuyt7ha-uc.a.run.app/api/webhooks/lead-enrichment \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer wh_f7616c7477f7e2072912c82360bf048ce88950be5d746490a0b3e74ba2bab3a2\" \\\n  -d '{\"test\": true}'\n```\n\n## Database Tables Required\n\nEnsure these tables exist in your Supabase database:\n\n- `business_discovery_campaigns` - Campaign tracking\n- `campaign_costs` - Cost monitoring\n- `business_contacts` - Lead storage and enrichment\n\nIf tables don't exist, run the database setup scripts in `/database/` folder.\n"}}},
{"type":"measure","name":"lsp.did_open","count":12,"duration":0.094},
{"type":"mark","name":"lsp.did_open","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/server.js","languageId":"javascript","version":1,"text":"/**\n * ProspectPro Server - Production Optimized\n * Fast startup with comprehensive error handling and monitoring\n * @version 3.1.0 - Production Branch Optimized\n */\n\n// CRITICAL: Load environment variables FIRST before any other imports\nrequire(\"dotenv\").config();\n\n// Advanced Environment Loading\nconsole.log(`🔧 Initializing ProspectPro Environment Loader...`);\nconst EnvironmentLoader = require(\"./config/environment-loader\");\nconst envLoader = new EnvironmentLoader();\nconst config = envLoader.getConfig();\n\nconsole.log(`🚀 ProspectPro v3.1.0 starting in ${config.environment} mode`);\nconsole.log(\n  `🔧 Container binding to all interfaces (0.0.0.0) on port ${\n    process.env.PORT || 3100\n  }`\n);\n\n// Core dependencies with error handling\nconst express = require(\"express\");\nconst path = require(\"path\");\n\n// Import streamlined Supabase client\nconst {\n  testConnection,\n  getSupabaseClient,\n  getDatabaseInfo,\n} = require(\"./config/supabase\");\n\n// Initialize Express app\nconst app = express();\n\n// Production middleware stack\napp.use(express.json({ limit: \"10mb\" }));\napp.use(express.urlencoded({ extended: true }));\n\n// Security headers for production\nif (config.isProduction) {\n  app.use((req, res, next) => {\n    res.header(\"X-Powered-By\", \"ProspectPro\");\n    res.header(\"X-Content-Type-Options\", \"nosniff\");\n    res.header(\"X-Frame-Options\", \"DENY\");\n    next();\n  });\n}\n\n// CORS configuration\nif (config.isDevelopment) {\n  app.use((req, res, next) => {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\n      \"Access-Control-Allow-Methods\",\n      \"GET, POST, PUT, DELETE, OPTIONS\"\n    );\n    res.header(\n      \"Access-Control-Allow-Headers\",\n      \"Origin, X-Requested-With, Content-Type, Accept, Authorization\"\n    );\n    if (req.method === \"OPTIONS\") {\n      res.sendStatus(200);\n    } else {\n      next();\n    }\n  });\n}\n\n// Serve static files\napp.use(express.static(path.join(__dirname, \"public\")));\n\n// Health endpoints for production monitoring\napp.get(\"/health\", (req, res) => {\n  const healthData = {\n    status: \"ok\",\n    timestamp: new Date().toISOString(),\n    environment: config.environment,\n    port: process.env.PORT || 3100,\n    degradedStart: process.env.ALLOW_DEGRADED_START === \"true\",\n    uptime: process.uptime(),\n    version: \"3.1.0\",\n  };\n\n  console.log(\"🏥 Health check requested:\", JSON.stringify(healthData));\n  res.json(healthData);\n});\n\napp.get(\"/ready\", async (req, res) => {\n  try {\n    const dbTest = await testConnection();\n    if (dbTest.success || dbTest.warning) {\n      res.json({\n        status: \"ready\",\n        database: \"connected\",\n        timestamp: new Date().toISOString(),\n      });\n    } else {\n      res.status(503).json({\n        status: \"not_ready\",\n        database: \"disconnected\",\n        error: dbTest.error,\n        timestamp: new Date().toISOString(),\n      });\n    }\n  } catch (error) {\n    res.status(503).json({\n      status: \"error\",\n      error: error.message,\n      timestamp: new Date().toISOString(),\n    });\n  }\n});\n\napp.get(\"/diag\", async (req, res) => {\n  try {\n    const dbInfo = getDatabaseInfo();\n    const dbTest = await testConnection();\n\n    res.json({\n      database: dbInfo,\n      connection: dbTest,\n      environment: {\n        node_env: config.environment,\n        port: config.port,\n        supabase_configured: !!process.env.SUPABASE_URL,\n      },\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: error.message,\n      timestamp: new Date().toISOString(),\n    });\n  }\n});\n\n// Business API Route with enhanced error handling\nlet businessDiscoveryRouter;\ntry {\n  businessDiscoveryRouter = require(\"./api/business-discovery\");\n} catch (e) {\n  console.error(\"Failed to load business-discovery API:\", e.message);\n  const router = require(\"express\").Router();\n  router.use((req, res) =>\n    res.status(503).json({ error: \"Business discovery service unavailable\" })\n  );\n  businessDiscoveryRouter = router;\n}\n\n// Campaign Export Route - Using simple export temporarily\nlet campaignExportRouter;\ntry {\n  const { router, storeCampaignResults } = require(\"./api/simple-export\");\n  campaignExportRouter = router;\n  // Make storeCampaignResults available globally for business discovery\n  global.storeCampaignResults = storeCampaignResults;\n} catch (e) {\n  console.error(\"Failed to load simple-export:\", e.message);\n  const router = require(\"express\").Router();\n  router.use((req, res) =>\n    res.status(503).json({ error: \"Export service unavailable\" })\n  );\n  campaignExportRouter = router;\n}\n\n// Webhook routes with graceful degradation\nlet campaignLifecycleWebhook;\ntry {\n  campaignLifecycleWebhook = require(\"./api/webhooks/campaign-lifecycle\");\n} catch (e) {\n  console.error(\"Failed to load campaign-lifecycle webhook:\", e.message);\n  const router = require(\"express\").Router();\n  router.use((req, res) =>\n    res.status(503).json({ error: \"Webhook service unavailable\" })\n  );\n  campaignLifecycleWebhook = router;\n}\n\nlet costAlertWebhook;\ntry {\n  costAlertWebhook = require(\"./api/webhooks/cost-alert\");\n} catch (e) {\n  console.error(\"Failed to load cost-alert webhook:\", e.message);\n  const router = require(\"express\").Router();\n  router.use((req, res) =>\n    res.status(503).json({ error: \"Webhook service unavailable\" })\n  );\n  costAlertWebhook = router;\n}\n\nlet leadEnrichmentWebhook;\ntry {\n  leadEnrichmentWebhook = require(\"./api/webhooks/lead-enrichment\");\n} catch (e) {\n  console.error(\"Failed to load lead-enrichment webhook:\", e.message);\n  const router = require(\"express\").Router();\n  router.use((req, res) =>\n    res.status(503).json({ error: \"Webhook service unavailable\" })\n  );\n  leadEnrichmentWebhook = router;\n}\n\n// Mount API routes\napp.use(\"/api/business-discovery\", businessDiscoveryRouter);\napp.use(\"/api/business\", businessDiscoveryRouter); // Frontend compatibility\napp.use(\"/api/campaigns\", campaignExportRouter);\n\n// Mount webhook routes\napp.use(\"/api/webhooks/campaign-lifecycle\", campaignLifecycleWebhook);\napp.use(\"/api/webhooks/cost-alert\", costAlertWebhook);\napp.use(\"/api/webhooks/lead-enrichment\", leadEnrichmentWebhook);\n\n// Default route - serve frontend with error handling\napp.get(\"/\", (req, res) => {\n  try {\n    const indexPath = path.join(__dirname, \"public\", \"index.html\");\n    console.log(`📄 Serving index.html from: ${indexPath}`);\n    res.sendFile(indexPath, (err) => {\n      if (err) {\n        console.error(\"❌ Failed to serve index.html:\", err.message);\n        res.status(404).json({\n          error: \"Frontend not found\",\n          message: \"The application frontend is not available\",\n          timestamp: new Date().toISOString(),\n        });\n      }\n    });\n  } catch (error) {\n    console.error(\"❌ Root route error:\", error.message);\n    res.status(500).json({\n      error: \"Application error\",\n      message: \"Failed to serve the application\",\n      timestamp: new Date().toISOString(),\n    });\n  }\n});\n\n// Catch-all for SPA routing\napp.get(\"*\", (req, res) => {\n  // Only serve SPA for HTML requests (not API calls)\n  if (req.accepts(\"html\")) {\n    res.sendFile(path.join(__dirname, \"public\", \"index.html\"));\n  } else {\n    res.status(404).json({ error: \"Endpoint not found\" });\n  }\n});\n\n// Global error handler\napp.use((error, req, res, next) => {\n  console.error(\"Global error handler:\", error.message);\n\n  res.status(error.status || 500).json({\n    error: \"Internal server error\",\n    message: config.isDevelopment ? error.message : \"Something went wrong\",\n    ...(config.isDevelopment && { stack: error.stack }),\n    timestamp: new Date().toISOString(),\n  });\n});\n\n// Graceful shutdown handlers\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🔄 SIGTERM received, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🔄 SIGINT received, shutting down gracefully\");\n  process.exit(0);\n});\n\n// Unhandled error safety nets\nprocess.on(\"unhandledRejection\", (reason, promise) => {\n  console.error(\"🚨 Unhandled Promise Rejection:\", reason);\n});\n\nprocess.on(\"uncaughtException\", (err) => {\n  console.error(\"🔥 Uncaught Exception:\", err.message);\n  console.error(err.stack);\n  process.exit(1);\n});\n\n// Start server with enhanced database validation and schema cache handling\nasync function startServer() {\n  try {\n    console.log(\"🔍 Testing database connection...\");\n    const dbTest = await testConnection();\n\n    if (dbTest.success && !dbTest.warning) {\n      console.log(\"✅ Database connection verified\");\n    } else if (dbTest.success && dbTest.warning) {\n      console.log(\"⚠️  Database connected with warning:\", dbTest.warning);\n      if (dbTest.warning.includes(\"schema cache\")) {\n        console.log(\n          \"🔧 Schema cache issue detected - this is common after database updates\"\n        );\n\n        // STRICT PRODUCTION MODE: Handle degraded starts appropriately\n        if (config.isProduction) {\n          console.error(\n            \"❌ Production startup blocked: schema cache issues detected\"\n          );\n          console.error(\"💡 Solutions:\");\n          console.error(\"   1. Wait 5-10 minutes for automatic cache refresh\");\n          console.error(\"   2. Restart your Supabase project in the dashboard\");\n          console.error(\"   3. Run: node scripts/refresh-schema-cache.js\");\n          console.error(\n            \"   4. Set ALLOW_DEGRADED_START=true for emergency bypass\"\n          );\n\n          if (process.env.ALLOW_DEGRADED_START !== \"true\") {\n            console.error(\n              \"🚨 CLOUD RUN: Schema cache issue - forcing degraded start for stability\"\n            );\n            console.warn(\n              \"⚠️ CLOUD RUN: Starting in degraded mode due to schema cache\"\n            );\n            // Force degraded start in Cloud Run environment\n            process.env.ALLOW_DEGRADED_START = \"true\";\n          } else {\n            console.warn(\"🚨 EMERGENCY: Starting production in degraded mode\");\n          }\n        }\n      }\n    } else {\n      console.error(\"❌ Database connection failed:\", dbTest.error);\n\n      // STRICT PRODUCTION MODE: Handle database connection failures\n      if (config.isProduction) {\n        console.error(\n          \"❌ Production startup blocked: database connection failed\"\n        );\n        console.error(\n          \"💡 Ensure Supabase URL and SECRET_KEY are correctly configured\"\n        );\n\n        if (process.env.ALLOW_DEGRADED_START !== \"true\") {\n          console.error(\n            \"🚨 CLOUD RUN: Database connection failed - forcing degraded start\"\n          );\n          console.warn(\"⚠️ CLOUD RUN: Starting without database connection\");\n          // Force degraded start in Cloud Run environment\n          process.env.ALLOW_DEGRADED_START = \"true\";\n        } else {\n          console.warn(\"🚨 EMERGENCY: Starting production without database\");\n        }\n      } else {\n        console.log(\"🔄 Development mode: starting in degraded mode...\");\n      }\n    }\n\n    // Load API Keys from Vault in production\n    if (config.isProduction) {\n      console.log(\"🔑 Pre-loading API keys from Supabase Vault...\");\n      try {\n        const apiKeys = await envLoader.getApiKeys();\n        const keyCount = Object.values(apiKeys).filter(\n          (key) => key && key !== \"your_api_key_here\" && !key.includes(\"your_\")\n        ).length;\n\n        console.log(\n          `� API Keys loaded: ${keyCount}/${\n            Object.keys(apiKeys).length\n          } available`\n        );\n\n        // Critical API validation for production\n        const criticalApis = [\"googlePlaces\"]; // Foursquare is optional enhancement\n        const missingCritical = criticalApis.filter((api) => !apiKeys[api]);\n\n        if (missingCritical.length > 0) {\n          console.error(\n            `❌ Critical API keys missing: ${missingCritical.join(\", \")}`\n          );\n          console.error(\"💡 Business discovery requires Google Places API key\");\n\n          if (process.env.ALLOW_DEGRADED_START !== \"true\") {\n            console.error(\n              \"🚨 Forcing graceful degraded start for Cloud Run stability\"\n            );\n            console.warn(\"⚠️ CLOUD RUN: Starting without critical API keys\");\n          } else {\n            console.warn(\"🚨 EMERGENCY: Starting without critical API keys\");\n          }\n        }\n      } catch (error) {\n        console.error(\n          \"❌ Failed to load API keys from Supabase Vault:\",\n          error.message\n        );\n\n        if (process.env.ALLOW_DEGRADED_START !== \"true\") {\n          console.error(\n            \"🚨 Forcing graceful degraded start for Cloud Run stability\"\n          );\n          console.warn(\"⚠️ CLOUD RUN: Starting without Vault API keys\");\n        } else {\n          console.warn(\"🚨 EMERGENCY: Starting without Vault API keys\");\n        }\n      }\n    }\n\n    // Start HTTP server with optimized configuration for Cloud Run\n    const server = app.listen(\n      process.env.PORT || 3100,\n      \"0.0.0.0\", // Explicitly bind to all interfaces for Cloud Run\n      () => {\n        const port = process.env.PORT || 3100;\n\n        // Determine the actual accessible URL based on environment\n        let publicUrl;\n        if (process.env.RAILWAY_STATIC_URL) {\n          publicUrl = process.env.RAILWAY_STATIC_URL;\n        } else if (process.env.CLOUD_RUN_SERVICE_URL) {\n          publicUrl = process.env.CLOUD_RUN_SERVICE_URL;\n        } else if (config.isProduction) {\n          publicUrl = `https://prospectpro-production.com`; // Will be actual Cloud Run URL\n        } else {\n          publicUrl = `http://localhost:${port}`;\n        }\n\n        console.log(`🌐 ProspectPro v3.1.0 accessible at: ${publicUrl}`);\n        console.log(`📊 Environment: ${config.environment}`);\n        console.log(`🔗 Health check: ${publicUrl}/health`);\n        console.log(`🔍 Diagnostics: ${publicUrl}/diag`);\n        console.log(`🐳 Container internal port: ${port} (platform managed)`);\n\n        // Production status summary\n        if (config.isProduction) {\n          console.log(\"\\n\" + \"=\".repeat(50));\n          console.log(\"🏭 PRODUCTION MODE ACTIVE\");\n          console.log(\"✅ Strict startup validation enabled\");\n          console.log(\"✅ Supabase Vault API key loading\");\n          console.log(\n            `✅ Degraded startup: ${\n              process.env.ALLOW_DEGRADED_START === \"true\"\n                ? \"ENABLED\"\n                : \"DISABLED\"\n            }`\n          );\n          console.log(\"=\".repeat(50) + \"\\n\");\n        }\n      }\n    ); // Set server timeout for production\n    server.timeout = 120000; // 2 minutes\n\n    return server;\n  } catch (error) {\n    console.error(\"💥 Server startup failed:\", error.message);\n    if (config.isDevelopment) {\n      console.error(error.stack);\n    }\n    process.exit(1);\n  }\n}\n\n// Start the server\nstartServer();\n"}}},
{"type":"measure","name":"lsp.did_open","count":13,"duration":8.564},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":6,"duration":0.087},
{"type":"mark","name":"lsp.did_open","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/app.js","languageId":"javascript","version":1,"text":"// ProspectPro Supabase-First Frontend - Enhanced Error Tracking Version\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.58.0\";\n\nclass ProspectProSupabase {\n  constructor() {\n    console.log(\"🔧 ProspectPro initializing with enhanced error tracking...\");\n\n    // Enhanced error tracking\n    window.addEventListener(\"error\", (e) => {\n      console.error(\"🚨 Global JavaScript Error:\", e.error);\n      console.error(\"📍 File:\", e.filename, \"Line:\", e.lineno);\n    });\n\n    window.addEventListener(\"unhandledrejection\", (e) => {\n      console.error(\"🚨 Unhandled Promise Rejection:\", e.reason);\n    });\n\n    try {\n      // Initialize Supabase client\n      this.supabase = createClient(\n        \"https://sriycekxdqnesdsgwiuc.supabase.co\",\n        \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI\"\n      );\n\n      console.log(\"✅ Supabase client created successfully\");\n      console.log(\"📍 URL:\", this.supabase.supabaseUrl);\n      console.log(\n        \"🔑 Key (first 50):\",\n        this.supabase.supabaseKey.substring(0, 50) + \"...\"\n      );\n\n      // Test client immediately\n      this.testSupabaseClient();\n    } catch (error) {\n      console.error(\"🚨 CRITICAL: Supabase client creation failed:\", error);\n      this.showError(\"Failed to initialize Supabase client: \" + error.message);\n      return;\n    }\n\n    this.selectedTool = \"business-discovery\";\n    this.searchResults = [];\n    this.lastSearchCampaignId = null;\n    this.lastSearchCampaignName = null;\n    this.costPerLead = 0.084;\n    this.campaignRunning = false;\n\n    this.initializeUI();\n  }\n\n  async testSupabaseClient() {\n    try {\n      console.log(\"🧪 Testing Supabase client connectivity...\");\n\n      // Test if functions object exists\n      if (!this.supabase.functions) {\n        throw new Error(\"Supabase functions object is undefined\");\n      }\n\n      console.log(\"✅ Supabase functions object exists\");\n      console.log(\n        \"📋 Functions methods:\",\n        Object.getOwnPropertyNames(this.supabase.functions)\n      );\n\n      // Test if invoke method exists\n      if (typeof this.supabase.functions.invoke !== \"function\") {\n        throw new Error(\"Supabase functions.invoke is not a function\");\n      }\n\n      console.log(\"✅ Supabase functions.invoke method exists\");\n    } catch (error) {\n      console.error(\"🚨 Supabase client test failed:\", error);\n    }\n  }\n\n  initializeUI() {\n    console.log(\"🎨 Initializing UI...\");\n\n    try {\n      this.attachEventListeners();\n      this.updateCost();\n      this.showWelcomeMessage();\n      console.log(\"✅ UI initialization complete\");\n    } catch (error) {\n      console.error(\"🚨 UI initialization failed:\", error);\n    }\n  }\n\n  attachEventListeners() {\n    console.log(\"🔗 Attaching event listeners...\");\n\n    // Start Discovery Button\n    const startButton = document.getElementById(\"start-discovery\");\n    if (startButton) {\n      console.log(\"✅ Found start discovery button\");\n      startButton.addEventListener(\"click\", (e) => {\n        console.log(\"🖱️ Start discovery button clicked\");\n        e.preventDefault();\n        this.startDiscovery();\n      });\n    } else {\n      console.error(\"❌ Start discovery button not found!\");\n    }\n\n    // Export Button\n    const exportButton = document.getElementById(\"export-csv\");\n    if (exportButton) {\n      exportButton.addEventListener(\"click\", () => this.exportToCsv());\n    }\n\n    // Lead quantity buttons\n    const quantityButtons = document.querySelectorAll(\".lead-quantity-btn\");\n    console.log(`🔢 Found ${quantityButtons.length} quantity buttons`);\n\n    quantityButtons.forEach((btn) => {\n      btn.addEventListener(\"click\", () => {\n        document\n          .querySelectorAll(\".lead-quantity-btn\")\n          .forEach((b) => b.classList.remove(\"active\"));\n        btn.classList.add(\"active\");\n        this.updateCost();\n      });\n    });\n\n    // Input fields for cost calculation\n    const businessTypeInput = document.getElementById(\"business-type\");\n    const locationInput = document.getElementById(\"location\");\n\n    [businessTypeInput, locationInput].forEach((input) => {\n      if (input) {\n        input.addEventListener(\"input\", () => this.updateCost());\n      }\n    });\n\n    console.log(\"✅ Event listeners attached\");\n  }\n\n  async startDiscovery() {\n    console.log(\"🚀 === STARTING DISCOVERY ===\");\n\n    if (this.campaignRunning) {\n      console.log(\"⚠️ Campaign already running, skipping...\");\n      return;\n    }\n\n    try {\n      const businessType = document\n        .getElementById(\"business-type\")\n        .value.trim();\n      const location = document.getElementById(\"location\").value.trim();\n      const quantityBtn = document.querySelector(\".lead-quantity-btn.active\");\n      const quantity = quantityBtn ? parseInt(quantityBtn.textContent) : 3;\n\n      console.log(\"📊 Discovery parameters:\", {\n        businessType,\n        location,\n        quantity,\n      });\n\n      if (!businessType || !location) {\n        console.log(\"❌ Missing required parameters\");\n        this.showError(\"Please enter both business type and location\");\n        return;\n      }\n\n      this.campaignRunning = true;\n      this.setLoadingState(true);\n      this.showCampaignProgress(true);\n\n      // Enhanced pre-flight checks\n      console.log(\"🔍 Pre-flight checks...\");\n\n      if (!this.supabase) {\n        throw new Error(\"Supabase client is not initialized\");\n      }\n\n      if (!this.supabase.functions) {\n        throw new Error(\"Supabase functions object is missing\");\n      }\n\n      if (typeof this.supabase.functions.invoke !== \"function\") {\n        throw new Error(\"Supabase functions.invoke is not a function\");\n      }\n\n      console.log(\"✅ Pre-flight checks passed\");\n\n      const payload = {\n        businessType,\n        location,\n        maxResults: quantity,\n        budgetLimit: 50,\n        requireCompleteContacts: false,\n        minConfidenceScore: 50,\n      };\n\n      console.log(\n        \"📦 Edge Function payload:\",\n        JSON.stringify(payload, null, 2)\n      );\n      console.log(\"📞 Calling Edge Function: business-discovery\");\n\n      const startTime = Date.now();\n\n      // Call Supabase Edge Function with enhanced error tracking\n      const result = await this.supabase.functions.invoke(\n        \"business-discovery\",\n        {\n          body: payload,\n        }\n      );\n\n      const endTime = Date.now();\n      console.log(\n        `⏱️ Edge Function call completed in ${endTime - startTime}ms`\n      );\n\n      console.log(\"📥 Raw Edge Function result:\", result);\n\n      const { data, error } = result;\n\n      console.log(\"📊 Parsed result - Data:\", data);\n      console.log(\"❌ Parsed result - Error:\", error);\n\n      if (error) {\n        console.error(\"🚨 Edge Function returned error:\", {\n          message: error.message,\n          details: error.details,\n          hint: error.hint,\n          code: error.code,\n          status: error.status,\n          statusCode: error.statusCode,\n        });\n        throw new Error(\n          `Edge Function error: ${error.message || JSON.stringify(error)}`\n        );\n      }\n\n      if (!data) {\n        console.error(\"🚨 No data received from Edge Function\");\n        throw new Error(\"No data received from Edge Function\");\n      }\n\n      console.log(\"📋 Data type:\", typeof data);\n      console.log(\"📋 Data keys:\", Object.keys(data));\n\n      if (!data.success) {\n        console.error(\"🚨 Edge Function returned failure:\", data);\n        throw new Error(\n          data.error || data.message || \"Business discovery failed\"\n        );\n      }\n\n      console.log(\"🎉 Edge Function success!\");\n      console.log(\"📊 Results summary:\", {\n        totalFound: data.results?.totalFound,\n        qualified: data.results?.qualified,\n        campaignId: data.campaignId,\n        leadsCount: data.leads?.length,\n      });\n\n      // Store results for potential export\n      this.searchResults = data.leads || [];\n      this.lastSearchCampaignId = data.campaignId;\n      this.lastSearchCampaignName = `${businessType} in ${location}`;\n\n      // Show results\n      this.showResults(data);\n\n      console.log(\n        `✅ Discovery completed: ${this.searchResults.length} leads found`\n      );\n    } catch (error) {\n      console.error(\"🚨 === DISCOVERY ERROR ===\");\n      console.error(\"Error type:\", typeof error);\n      console.error(\"Error name:\", error.name);\n      console.error(\"Error message:\", error.message);\n      console.error(\"Error stack:\", error.stack);\n      console.error(\"Full error object:\", error);\n\n      // Show detailed error to user\n      let errorMessage = \"Business discovery failed\";\n\n      if (error.message) {\n        errorMessage = error.message;\n      } else if (typeof error === \"string\") {\n        errorMessage = error;\n      }\n\n      this.showError(`Discovery Failed: ${errorMessage}`);\n    } finally {\n      console.log(\"🏁 Discovery cleanup...\");\n      this.campaignRunning = false;\n      this.setLoadingState(false);\n      this.showCampaignProgress(false);\n    }\n  }\n\n  // Rest of methods remain the same but with enhanced logging...\n  showResults(data) {\n    console.log(\"📊 Displaying results...\", data);\n\n    const resultsContainer = document.getElementById(\"results-container\");\n    const resultsSection = document.getElementById(\"search-results\");\n\n    if (!resultsContainer || !resultsSection) {\n      console.error(\"❌ Results containers not found\");\n      return;\n    }\n\n    resultsContainer.innerHTML = `\n      <div class=\"discovery-summary\">\n        <h3>✅ Discovery Complete</h3>\n        <div class=\"summary-stats\">\n          <div class=\"stat\">\n            <span class=\"stat-number\">${data.results.totalFound}</span>\n            <span class=\"stat-label\">Businesses Found</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-number\">${data.results.qualified}</span>\n            <span class=\"stat-label\">Qualified Leads</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-number\">$${data.costs.totalCost.toFixed(3)}</span>\n            <span class=\"stat-label\">Total Cost</span>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"leads-grid\">\n        ${data.leads\n          .map(\n            (lead) => `\n          <div class=\"lead-card\" data-score=\"${lead.optimizedScore}\">\n            <div class=\"lead-header\">\n              <h4>${lead.businessName}</h4>\n              <span class=\"confidence-score score-${this.getScoreClass(\n                lead.optimizedScore\n              )}\">\n                ${lead.optimizedScore}%\n              </span>\n            </div>\n            <div class=\"lead-details\">\n              <p><i class=\"icon-location\"></i> ${lead.address}</p>\n              ${\n                lead.phone\n                  ? `<p><i class=\"icon-phone\"></i> ${lead.phone}</p>`\n                  : \"\"\n              }\n              ${\n                lead.website\n                  ? `<p><i class=\"icon-web\"></i> <a href=\"${lead.website}\" target=\"_blank\">${lead.website}</a></p>`\n                  : \"\"\n              }\n              ${\n                lead.email\n                  ? `<p><i class=\"icon-email\"></i> ${lead.email}</p>`\n                  : \"\"\n              }\n            </div>\n            <div class=\"lead-footer\">\n              <span class=\"cost-indicator\">Cost: $${lead.validationCost.toFixed(\n                3\n              )}</span>\n            </div>\n          </div>\n        `\n          )\n          .join(\"\")}\n      </div>\n    `;\n\n    resultsSection.style.display = \"block\";\n    resultsContainer.scrollIntoView({ behavior: \"smooth\" });\n\n    // Enable export button\n    const exportButton = document.getElementById(\"export-csv\");\n    if (exportButton) {\n      exportButton.style.display = \"block\";\n    }\n\n    console.log(\"✅ Results displayed successfully\");\n  }\n\n  showError(message) {\n    console.error(\"🚨 Showing error to user:\", message);\n\n    const resultsContainer = document.getElementById(\"results-container\");\n    const resultsSection = document.getElementById(\"search-results\");\n\n    if (!resultsContainer || !resultsSection) {\n      console.error(\"❌ Error: Results containers not found\");\n      alert(\"Error: \" + message); // Fallback\n      return;\n    }\n\n    resultsContainer.innerHTML = `\n      <div class=\"error-container\">\n        <h3>❌ Discovery Failed</h3>\n        <p>Business discovery failed: API request failed: 404</p>\n        <p class=\"error-detail\"><strong>Technical Details:</strong> ${message}</p>\n        <p class=\"error-note\">This system only returns real data from actual APIs. If discovery fails, no fake data will be generated.</p>\n        <button onclick=\"window.prospectPro.startDiscovery()\" class=\"btn btn-primary\">\n          🔄 Try Again\n        </button>\n      </div>\n    `;\n\n    resultsSection.style.display = \"block\";\n    resultsContainer.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  getScoreClass(score) {\n    if (score >= 80) return \"high\";\n    if (score >= 60) return \"medium\";\n    return \"low\";\n  }\n\n  setLoadingState(loading) {\n    const startButton = document.getElementById(\"start-discovery\");\n    const loadingIndicator = document.querySelector(\".loading-indicator\");\n\n    if (startButton) {\n      if (loading) {\n        startButton.textContent = \"🔍 Discovering...\";\n        startButton.disabled = true;\n      } else {\n        startButton.textContent = \"🚀 Start Discovery\";\n        startButton.disabled = false;\n      }\n    }\n\n    if (loadingIndicator) {\n      loadingIndicator.style.display = loading ? \"block\" : \"none\";\n    }\n  }\n\n  showCampaignProgress(show) {\n    const progressContainer = document.getElementById(\"campaign-progress\");\n    if (progressContainer) {\n      progressContainer.style.display = show ? \"block\" : \"none\";\n    }\n  }\n\n  updateCost() {\n    const quantityBtn = document.querySelector(\".lead-quantity-btn.active\");\n    const quantity = quantityBtn ? parseInt(quantityBtn.textContent) : 3;\n    const estimatedCost = (quantity * this.costPerLead).toFixed(2);\n\n    const costDisplay = document.querySelector(\".estimated-cost\");\n    if (costDisplay) {\n      costDisplay.textContent = `Estimated cost: $${estimatedCost}`;\n    }\n  }\n\n  showWelcomeMessage() {\n    console.log(\"🎉 ProspectPro Enhanced Error Tracking Version Ready!\");\n  }\n\n  async exportToCsv() {\n    // Export functionality remains the same\n    if (!this.lastSearchCampaignId) {\n      this.showError(\"No campaign data to export\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        `${this.supabase.supabaseUrl}/functions/v1/campaign-export/${this.lastSearchCampaignId}`,\n        {\n          headers: {\n            Authorization: `Bearer ${this.supabase.supabaseKey}`,\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`Export failed: ${response.statusText}`);\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.style.display = \"none\";\n      a.href = url;\n      a.download = `${this.lastSearchCampaignName}_leads.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      console.log(\"✅ CSV export completed\");\n    } catch (error) {\n      console.error(\"❌ Export error:\", error);\n      this.showError(`Export failed: ${error.message}`);\n    }\n  }\n}\n\n// Initialize the application\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  console.log(\n    \"🚀 DOM loaded, initializing ProspectPro Enhanced Error Tracking...\"\n  );\n  try {\n    window.prospectPro = new ProspectProSupabase();\n    console.log(\"✅ ProspectPro initialized successfully\");\n  } catch (error) {\n    console.error(\"🚨 CRITICAL: Failed to initialize ProspectPro:\", error);\n    alert(\"Critical error: \" + error.message);\n  }\n});\n\n// Export for testing\nwindow.ProspectProSupabase = ProspectProSupabase;\n"}}},
{"type":"measure","name":"lsp.did_open","count":14,"duration":2.335},
{"type":"mark","name":"lsp.did_open","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/api/campaign-export.js","languageId":"javascript","version":1,"text":"/**\n * Campaign-Specific CSV Export API\n * Exports all leads from a specific campaign with comprehensive metadata\n */\nconst express = require(\"express\");\nconst createCsvWriter = require(\"csv-writer\").createObjectCsvWriter;\nconst path = require(\"path\");\nconst fs = require(\"fs\").promises;\nconst { getSupabaseClient } = require(\"../config/supabase\");\n\nconst router = express.Router();\n\n/**\n * Export campaign leads to CSV\n * GET /api/campaigns/:campaignId/export?format=csv&minConfidence=70\n */\nrouter.get(\"/:campaignId/export\", async (req, res) => {\n  try {\n    const { campaignId } = req.params;\n    const {\n      format = \"csv\",\n      minConfidence = 70,\n      includeUnqualified = false,\n      includeProvenance = true,\n    } = req.query;\n\n    console.log(\n      `📊 Exporting campaign ${campaignId} (format: ${format}, min confidence: ${minConfidence})`\n    );\n\n    const supabase = getSupabaseClient();\n    if (!supabase) {\n      return res.status(500).json({\n        error: \"Database connection not available\",\n        details: \"Supabase client not initialized\",\n      });\n    }\n\n    // Get campaign details\n    const { data: campaign, error: campaignError } = await supabase\n      .from(\"campaigns\")\n      .select(\"*\")\n      .eq(\"id\", campaignId)\n      .single();\n\n    if (campaignError || !campaign) {\n      return res.status(404).json({\n        error: \"Campaign not found\",\n        details: campaignError?.message,\n      });\n    }\n\n    // Get all leads for this campaign with enriched data\n    const { data: leads, error: leadsError } = await supabase\n      .from(\"enhanced_leads\")\n      .select(\n        `\n        *,\n        lead_emails(*),\n        validation_results(*),\n        api_costs(*)\n      `\n      )\n      .eq(\"campaign_id\", campaignId)\n      .gte(\"confidence_score\", includeUnqualified ? 0 : minConfidence)\n      .order(\"confidence_score\", { ascending: false });\n\n    if (leadsError) {\n      console.error(\"Error fetching leads:\", leadsError);\n      return res.status(500).json({\n        error: \"Failed to fetch campaign leads\",\n        details: leadsError.message,\n      });\n    }\n\n    if (!leads || leads.length === 0) {\n      return res.status(404).json({\n        error: \"No leads found for this campaign\",\n        campaign: campaign.name || campaignId,\n      });\n    }\n\n    // Generate CSV export\n    const exportResult = await generateCampaignCSV(campaign, leads, {\n      includeProvenance,\n      minConfidence: parseInt(minConfidence),\n    });\n\n    // Set response headers for file download\n    const timestamp = new Date().toISOString().slice(0, 10);\n    const filename = sanitizeFilename(\n      `${campaign.name || \"campaign\"}_${campaignId.slice(\n        0,\n        8\n      )}_${timestamp}.csv`\n    );\n\n    res.setHeader(\"Content-Type\", \"text/csv\");\n    res.setHeader(\"Content-Disposition\", `attachment; filename=\"${filename}\"`);\n    res.setHeader(\"X-Export-Count\", exportResult.exportedCount);\n    res.setHeader(\"X-Total-Count\", exportResult.totalCount);\n    res.setHeader(\"X-Campaign-Name\", campaign.name || \"Untitled\");\n\n    console.log(\n      `✅ Export completed: ${exportResult.exportedCount}/${exportResult.totalCount} leads exported`\n    );\n    res.send(exportResult.csvContent);\n  } catch (error) {\n    console.error(\"❌ Campaign export error:\", error);\n    res.status(500).json({\n      error: \"Export failed\",\n      details: error.message,\n    });\n  }\n});\n\n/**\n * Get campaign export history\n * GET /api/campaigns/:campaignId/exports\n */\nrouter.get(\"/:campaignId/exports\", async (req, res) => {\n  try {\n    const { campaignId } = req.params;\n\n    const supabase = getSupabaseClient();\n    if (!supabase) {\n      return res.status(500).json({\n        error: \"Database connection not available\",\n        details: \"Supabase client not initialized\",\n      });\n    }\n\n    const { data: exports, error } = await supabase\n      .from(\"dashboard_exports\")\n      .select(\"*\")\n      .eq(\"campaign_id\", campaignId)\n      .order(\"created_at\", { ascending: false });\n\n    if (error) {\n      return res.status(500).json({\n        error: \"Failed to fetch export history\",\n        details: error.message,\n      });\n    }\n\n    res.json({\n      campaignId,\n      exports: exports || [],\n    });\n  } catch (error) {\n    console.error(\"Export history error:\", error);\n    res.status(500).json({\n      error: \"Failed to get export history\",\n      details: error.message,\n    });\n  }\n});\n\n/**\n * Generate comprehensive CSV for campaign leads\n */\nasync function generateCampaignCSV(campaign, leads, options = {}) {\n  const { includeProvenance = true, minConfidence = 70 } = options;\n\n  // Filter qualified leads\n  const qualifiedLeads = leads.filter(\n    (lead) =>\n      lead.confidence_score >= minConfidence &&\n      lead.business_name &&\n      lead.address\n  );\n\n  // Define comprehensive CSV headers\n  const headers = [\n    \"Business Name\",\n    \"Address\",\n    \"Phone\",\n    \"Website\",\n    \"Primary Email\",\n    \"All Emails\",\n    \"Owner Name\",\n    \"Owner Title\",\n    \"Confidence Score\",\n    \"Validation Status\",\n    \"Industry/Category\",\n    // Removed: Employee Count Est., Google Rating, Google Reviews\n    \"Created Date\",\n    \"Discovery Source\",\n    \"Email Source\",\n    \"Apollo.io Data\",\n    \"Hunter.io Data\",\n    \"Optimized Engine Cost\",\n    \"Website Status\",\n    \"Email Deliverability\",\n    \"Phone Validation\",\n    \"Address Validation\",\n    \"Total API Cost\",\n    \"Cost Per Lead\",\n  ];\n\n  // Add provenance columns if requested\n  if (includeProvenance) {\n    headers.push(\n      // Removed: Google Place ID, Foursquare ID\n      \"Business Registration\",\n      \"Professional License\",\n      \"Chamber Membership\",\n      \"Social Media Links\",\n      \"Data Quality Score\",\n      \"Enrichment Timestamp\"\n    );\n  }\n\n  // Generate CSV rows\n  const csvRows = qualifiedLeads.map((lead) => {\n    const baseRow = [\n      cleanCsvField(lead.business_name),\n      cleanCsvField(lead.address),\n      cleanCsvField(lead.phone),\n      cleanCsvField(lead.website),\n      cleanCsvField(lead.lead_emails?.[0]?.email || \"\"),\n      cleanCsvField(lead.lead_emails?.map((e) => e.email).join(\"; \") || \"\"),\n      cleanCsvField(lead.owner_name || \"\"),\n      cleanCsvField(lead.owner_title || \"\"),\n      lead.confidence_score || 0,\n      cleanCsvField(lead.validation_status || \"pending\"),\n      cleanCsvField(lead.business_category || \"\"),\n      // Removed: employee count, google rating, reviews\n      formatDate(lead.created_at),\n      cleanCsvField(lead.discovery_source || \"unknown\"),\n      cleanCsvField(lead.email_discovery_source || \"website\"),\n      getApolloDataStatus(lead),\n      getHunterDataStatus(lead),\n      formatCurrency(getOptimizedEngineCost(lead)),\n      getWebsiteStatus(lead),\n      getEmailDeliverability(lead),\n      getPhoneValidation(lead),\n      getAddressValidation(lead),\n      formatCurrency(lead.total_cost || 0),\n      formatCurrency(calculateCostPerLead(lead, campaign)),\n    ];\n\n    // Add provenance data if requested\n    if (includeProvenance) {\n      baseRow.push(\n        // Removed: google_place_id, foursquare_fsq_id\n        getRegistrationStatus(lead),\n        getProfessionalLicense(lead),\n        getChamberMembership(lead),\n        getSocialMediaLinks(lead),\n        calculateDataQualityScore(lead),\n        formatDate(lead.enriched_at || lead.created_at)\n      );\n    }\n\n    return baseRow;\n  });\n\n  // Generate CSV content\n  const csvContent = [\n    headers.join(\",\"),\n    ...csvRows.map((row) =>\n      row\n        .map((field) =>\n          typeof field === \"string\" && field.includes(\",\")\n            ? `\"${field.replace(/\"/g, '\"\"')}\"`\n            : field\n        )\n        .join(\",\")\n    ),\n  ].join(\"\\n\");\n\n  // Log export to database\n  await logCampaignExport(campaign.id, qualifiedLeads.length, leads.length);\n\n  return {\n    csvContent,\n    exportedCount: qualifiedLeads.length,\n    totalCount: leads.length,\n    headers,\n  };\n}\n\n/**\n * Helper functions for CSV data formatting\n */\nfunction cleanCsvField(value) {\n  if (value === null || value === undefined) return \"\";\n  return String(value)\n    .replace(/[\\r\\n]+/g, \" \")\n    .trim();\n}\n\nfunction formatDate(dateString) {\n  if (!dateString) return \"\";\n  return new Date(dateString).toLocaleDateString(\"en-US\");\n}\n\nfunction formatCurrency(amount) {\n  return \"$\" + parseFloat(amount || 0).toFixed(4);\n}\n\nfunction calculateCostPerLead(lead, campaign) {\n  const totalCost = parseFloat(lead.total_cost || 0);\n  return totalCost > 0 ? totalCost : 0;\n}\n\nfunction getWebsiteStatus(lead) {\n  const validation = lead.validation_results?.[0];\n  if (validation?.website_accessible === true) return \"Accessible\";\n  if (validation?.website_accessible === false) return \"Inaccessible\";\n  return \"Not Validated\";\n}\n\nfunction getEmailDeliverability(lead) {\n  const primaryEmail = lead.lead_emails?.[0];\n  if (primaryEmail?.deliverability_status === \"deliverable\")\n    return \"Deliverable\";\n  if (primaryEmail?.deliverability_status === \"undeliverable\")\n    return \"Undeliverable\";\n  if (primaryEmail?.deliverability_status === \"risky\") return \"Risky\";\n  return \"Not Validated\";\n}\n\nfunction getPhoneValidation(lead) {\n  const validation = lead.validation_results?.[0];\n  if (validation?.phone_valid === true) return \"Valid\";\n  if (validation?.phone_valid === false) return \"Invalid\";\n  return \"Not Validated\";\n}\n\nfunction getAddressValidation(lead) {\n  const validation = lead.validation_results?.[0];\n  if (validation?.address_validated === true) return \"Validated\";\n  if (validation?.address_validated === false) return \"Invalid\";\n  return \"Not Validated\";\n}\n\nfunction getRegistrationStatus(lead) {\n  const validation = lead.validation_results?.[0];\n  const regData = validation?.business_registration_data;\n  if (regData?.ca_sos_active) return \"CA Active\";\n  if (regData?.ny_registry_active) return \"NY Active\";\n  if (regData?.ct_ucc_filings > 0) return \"CT UCC Found\";\n  return \"Not Found\";\n}\n\nfunction getProfessionalLicense(lead) {\n  const validation = lead.validation_results?.[0];\n  const licenseData = validation?.professional_license_data;\n  if (licenseData?.license_active) return licenseData.license_type || \"Active\";\n  return \"Not Found\";\n}\n\nfunction getChamberMembership(lead) {\n  // Check if lead was discovered via chamber source\n  if (lead.discovery_source?.includes(\"chamber\")) return \"Member\";\n  return \"Not Verified\";\n}\n\nfunction getSocialMediaLinks(lead) {\n  const socialLinks = [];\n  if (lead.facebook_url) socialLinks.push(\"Facebook\");\n  if (lead.linkedin_url) socialLinks.push(\"LinkedIn\");\n  if (lead.twitter_url) socialLinks.push(\"Twitter\");\n  if (lead.instagram_url) socialLinks.push(\"Instagram\");\n  return socialLinks.length > 0 ? socialLinks.join(\", \") : \"None\";\n}\n\n/**\n * Enhanced optimized engine tracking functions\n */\nfunction getApolloDataStatus(lead) {\n  // Check if lead has data enriched by Apollo\n  const hasOwnerData = lead.owner_name || lead.owner_title;\n  const hasOrganizationData =\n    lead.employee_count_estimate || lead.company_description;\n  const apolloCost = getApiCostByService(lead, \"apollo\");\n\n  if (apolloCost > 0) {\n    const dataPoints = [];\n    if (hasOwnerData) dataPoints.push(\"Owner Info\");\n    if (hasOrganizationData) dataPoints.push(\"Company Data\");\n    if (dataPoints.length > 0) {\n      return `Yes (${dataPoints.join(\", \")}) - $${apolloCost.toFixed(4)}`;\n    }\n    return `Yes - $${apolloCost.toFixed(4)}`;\n  }\n\n  // Check for Apollo-sourced data without explicit cost tracking\n  if (hasOwnerData && lead.discovery_source?.includes(\"apollo\")) {\n    return \"Yes (Owner Info)\";\n  }\n\n  return \"No\";\n}\n\nfunction getHunterDataStatus(lead) {\n  // Check if lead has Hunter.io email data\n  const hunterEmails =\n    lead.lead_emails?.filter(\n      (email) =>\n        email.source?.toLowerCase().includes(\"hunter\") ||\n        email.discovery_method?.toLowerCase().includes(\"hunter\")\n    ) || [];\n\n  const hunterCost = getApiCostByService(lead, \"hunter\");\n\n  if (hunterCost > 0) {\n    return `Yes (${hunterEmails.length} emails) - $${hunterCost.toFixed(4)}`;\n  }\n\n  // Check for Hunter-sourced emails without explicit cost tracking\n  if (hunterEmails.length > 0) {\n    return `Yes (${hunterEmails.length} emails)`;\n  }\n\n  // Check if email discovery source mentions hunter/comprehensive\n  if (\n    lead.email_discovery_source?.toLowerCase().includes(\"hunter\") ||\n    lead.email_discovery_source?.toLowerCase().includes(\"comprehensive\")\n  ) {\n    return \"Yes (Email Discovery)\";\n  }\n\n  return \"No\";\n}\n\nfunction getOptimizedEngineCost(lead) {\n  const apolloCost = getApiCostByService(lead, \"apollo\");\n  const hunterCost = getApiCostByService(lead, \"hunter\");\n  return apolloCost + hunterCost;\n}\n\nfunction getApiCostByService(lead, serviceName) {\n  if (!lead.api_costs || !Array.isArray(lead.api_costs)) {\n    return 0;\n  }\n\n  return lead.api_costs\n    .filter((cost) =>\n      cost.api_service?.toLowerCase().includes(serviceName.toLowerCase())\n    )\n    .reduce((sum, cost) => sum + parseFloat(cost.cost_usd || 0), 0);\n}\n\nfunction calculateDataQualityScore(lead) {\n  let score = 0;\n  const weights = {\n    hasWebsite: 15,\n    hasEmail: 20,\n    hasPhone: 20,\n    hasOwnerName: 15,\n    emailVerified: 15,\n    websiteAccessible: 10,\n    hasBusinessRegistration: 5,\n  };\n\n  if (lead.website) score += weights.hasWebsite;\n  if (lead.lead_emails?.length > 0) score += weights.hasEmail;\n  if (lead.phone) score += weights.hasPhone;\n  if (lead.owner_name) score += weights.hasOwnerName;\n\n  const validation = lead.validation_results?.[0];\n  if (validation?.email_deliverable) score += weights.emailVerified;\n  if (validation?.website_accessible) score += weights.websiteAccessible;\n  if (validation?.business_registration_found)\n    score += weights.hasBusinessRegistration;\n\n  return Math.min(score, 100);\n}\n\nfunction sanitizeFilename(filename) {\n  return filename.replace(/[^a-zA-Z0-9_-]/g, \"_\").replace(/__+/g, \"_\");\n}\n\nasync function logCampaignExport(campaignId, exportedCount, totalCount) {\n  try {\n    const supabase = getSupabaseClient();\n    if (!supabase) {\n      console.error(\"Cannot log export: Database connection not available\");\n      return;\n    }\n\n    await supabase.from(\"dashboard_exports\").insert({\n      campaign_id: campaignId,\n      export_type: \"lead_export\",\n      file_format: \"csv\",\n      row_count: exportedCount,\n      export_status: \"completed\",\n      completed_at: new Date().toISOString(),\n    });\n  } catch (error) {\n    console.error(\"Failed to log export:\", error);\n  }\n}\n\nmodule.exports = router;\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":7,"duration":0.089},
{"type":"measure","name":"lsp.did_open","count":15,"duration":3.937},
{"type":"mark","name":"lsp.did_open","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/api/simple-export.js","languageId":"javascript","version":1,"text":"/**\n * Simple Campaign Export - Works without database dependencies\n * Temporary solution until database schema is properly configured\n */\nconst express = require(\"express\");\nconst router = express.Router();\n\n// In-memory storage for campaign results (temporary)\nlet campaignResults = new Map();\n\n/**\n * Store campaign results for later export\n */\nfunction storeCampaignResults(campaignId, results) {\n  campaignResults.set(campaignId, {\n    ...results,\n    timestamp: new Date().toISOString(),\n  });\n}\n\n/**\n * Simple CSV export that works with stored results\n */\nrouter.get(\"/:campaignId/export\", async (req, res) => {\n  try {\n    const { campaignId } = req.params;\n\n    console.log(`📊 Exporting campaign ${campaignId}`);\n\n    // Get stored results\n    const campaign = campaignResults.get(campaignId);\n\n    if (!campaign || !campaign.leads) {\n      return res.status(404).json({\n        error: \"Campaign not found or no leads available\",\n        campaignId,\n        available: Array.from(campaignResults.keys()),\n      });\n    }\n\n    // Generate simple CSV\n    const csvContent = generateSimpleCSV(campaign);\n\n    // Set response headers\n    const timestamp = new Date().toISOString().slice(0, 10);\n    const filename = `campaign_${campaignId.slice(0, 8)}_${timestamp}.csv`;\n\n    res.setHeader(\"Content-Type\", \"text/csv\");\n    res.setHeader(\"Content-Disposition\", `attachment; filename=\"${filename}\"`);\n    res.setHeader(\"X-Export-Count\", campaign.leads.length);\n    res.setHeader(\"X-Campaign-ID\", campaignId);\n\n    console.log(`✅ Export completed: ${campaign.leads.length} leads exported`);\n    res.send(csvContent);\n  } catch (error) {\n    console.error(\"❌ Export error:\", error);\n    res.status(500).json({\n      error: \"Export failed\",\n      details: error.message,\n    });\n  }\n});\n\n/**\n * Generate simple CSV from campaign data\n */\nfunction generateSimpleCSV(campaign) {\n  const headers = [\n    \"Business Name\",\n    \"Address\",\n    \"Phone\",\n    \"Website\",\n    \"Email\",\n    \"Confidence Score\",\n    \"Discovery Source\",\n    \"Timestamp\",\n  ];\n\n  const rows = campaign.leads.map((lead) => [\n    cleanField(lead.businessName || \"\"),\n    cleanField(lead.address || \"\"),\n    cleanField(lead.phone || \"\"),\n    cleanField(lead.website || \"\"),\n    cleanField(lead.email || \"\"),\n    lead.optimizedScore || lead.confidence_score || 0,\n    cleanField(lead.discovery_source || \"Google Places\"),\n    new Date().toLocaleDateString(),\n  ]);\n\n  const csvContent = [\n    headers.join(\",\"),\n    ...rows.map((row) =>\n      row\n        .map((field) =>\n          typeof field === \"string\" &&\n          (field.includes(\",\") || field.includes('\"'))\n            ? `\"${field.replace(/\"/g, '\"\"')}\"`\n            : field\n        )\n        .join(\",\")\n    ),\n  ].join(\"\\n\");\n\n  return csvContent;\n}\n\n/**\n * Clean CSV field\n */\nfunction cleanField(value) {\n  if (value === null || value === undefined) return \"\";\n  return String(value)\n    .replace(/[\\r\\n]+/g, \" \")\n    .trim();\n}\n\n/**\n * Get list of available campaigns\n */\nrouter.get(\"/\", (req, res) => {\n  const campaigns = Array.from(campaignResults.entries()).map(([id, data]) => ({\n    campaignId: id,\n    timestamp: data.timestamp,\n    leadCount: data.leads?.length || 0,\n    totalFound: data.results?.totalFound || 0,\n    qualified: data.results?.qualified || 0,\n  }));\n\n  res.json({\n    campaigns,\n    total: campaigns.length,\n  });\n});\n\nmodule.exports = { router, storeCampaignResults };\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":8,"duration":0.602},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":9,"duration":0.088},
{"type":"measure","name":"lsp.did_open","count":16,"duration":1.219},
{"type":"mark","name":"lsp.did_open","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/api/business-discovery.js","languageId":"javascript","version":1,"text":"const express = require(\"express\");\nconst EnhancedDiscoveryEngine = require(\"../modules/core/core-business-discovery-engine\");\nconst EnhancedQualityScorer = require(\"../modules/validators/enhanced-quality-scorer\");\nconst CampaignLogger = require(\"../modules/logging/logging-campaign-manager\");\nconst path = require(\"path\");\nconst fs = require(\"fs\").promises;\nconst router = express.Router();\n\n// Load Environment with Vault API Keys\nconst EnvironmentLoader = require(\"../config/environment-loader\");\nconst envLoader = new EnvironmentLoader();\n\n// Initialize API keys (will be loaded async from vault)\nlet apiKeysCache = null;\nlet lastApiKeyLoad = null;\nconst API_KEY_CACHE_TTL = 300000; // 5 minutes\n\n/**\n * Get API keys with caching and vault integration\n * @returns {Promise<Object>} API keys object\n */\nasync function getApiKeys() {\n  const now = Date.now();\n\n  // Return cached keys if still valid\n  if (\n    apiKeysCache &&\n    lastApiKeyLoad &&\n    now - lastApiKeyLoad < API_KEY_CACHE_TTL\n  ) {\n    return apiKeysCache;\n  }\n\n  try {\n    console.log(\"🔑 Refreshing API keys from Supabase Vault...\");\n    apiKeysCache = await envLoader.getApiKeys();\n    lastApiKeyLoad = now;\n\n    const keyCount = Object.values(apiKeysCache).filter(\n      (key) => key && key !== \"your_api_key_here\" && !key.includes(\"your_\")\n    ).length;\n\n    console.log(\n      `🔑 API keys refreshed: ${keyCount}/${\n        Object.keys(apiKeysCache).length\n      } available`\n    );\n    return apiKeysCache;\n  } catch (error) {\n    console.error(\"❌ Failed to load API keys from vault:\", error.message);\n\n    // Fallback to environment variables\n    console.log(\"🔄 Falling back to environment variables\");\n    apiKeysCache = {\n      hunterIO: process.env.HUNTER_IO_API_KEY,\n      apollo: process.env.APOLLO_API_KEY,\n      neverBounce: process.env.NEVERBOUNCE_API_KEY,\n      googlePlaces: process.env.GOOGLE_PLACES_API_KEY,\n      foursquare:\n        process.env.FOURSQUARE_SERVICE_API_KEY ||\n        process.env.FOURSQUARE_PLACES_API_KEY,\n      zeroBounce: process.env.ZEROBOUNCE_API_KEY,\n      courtListener: process.env.COURTLISTENER_API_KEY,\n      socrata: process.env.SOCRATA_API_KEY,\n      socrataToken: process.env.SOCRATA_APP_TOKEN,\n      uspto: process.env.USPTO_TSDR_API_KEY,\n      californiaSOSApiKey: process.env.CALIFORNIA_SOS_API_KEY,\n      scrapingdog: process.env.SCRAPINGDOG_API_KEY,\n    };\n\n    lastApiKeyLoad = now;\n    return apiKeysCache;\n  }\n}\n\n// Enhanced business discovery endpoint with v2.0 quality-focused engine\nrouter.post(\"/discover-businesses\", async (req, res) => {\n  const startTime = Date.now();\n  const campaignId = `campaign_${Date.now()}_${Math.random()\n    .toString(36)\n    .substr(2, 9)}`;\n\n  // Initialize campaign logger at function level for error handling\n  const campaignLogger = new CampaignLogger();\n\n  try {\n    // Load fresh API keys from vault\n    const apiKeys = await getApiKeys();\n\n    // Initialize Enhanced Discovery Engine v2.0 with vault API keys\n    const discoveryEngine = new EnhancedDiscoveryEngine(apiKeys);\n\n    const {\n      businessType,\n      location,\n      maxResults = 10,\n      budgetLimit = 50,\n      requireCompleteContacts = false, // More lenient default\n      minConfidenceScore = 50, // Lower threshold for better results\n      additionalQueries = [],\n    } = req.body;\n\n    // Validate required parameters\n    if (!businessType || !location) {\n      return res.status(400).json({\n        success: false,\n        error: \"Business type and location are required\",\n      });\n    }\n\n    // Check for critical API keys\n    if (!apiKeys.foursquare && !apiKeys.googlePlaces) {\n      return res.status(500).json({\n        success: false,\n        error:\n          \"Critical API keys missing: Foursquare or Google Places required for business discovery\",\n        details:\n          \"Configure API keys in Supabase Vault or environment variables\",\n      });\n    }\n\n    console.log(\n      `🚀 Starting Enhanced Discovery v2.0 - Campaign: ${campaignId}`\n    );\n    console.log(`📊 Requirements: ${maxResults} qualified leads`);\n    console.log(`💰 Budget limit: $${budgetLimit}`);\n    console.log(`✅ Complete contacts required: ${requireCompleteContacts}`);\n    console.log(`🎯 Minimum confidence: ${minConfidenceScore}%`);\n\n    // Use Enhanced Discovery Engine v2.0 for iterative quality-focused discovery\n    const discoveryResult = await discoveryEngine.discoverQualifiedLeads({\n      businessType,\n      location,\n      targetCount: maxResults,\n      budgetLimit,\n      requireCompleteContacts,\n      minConfidenceScore,\n      additionalQueries,\n    });\n\n    // Apply Enhanced Quality Scoring v3.0 with cost optimization\n    const qualityScorer = new EnhancedQualityScorer({\n      maxCostPerBusiness: budgetLimit / maxResults || 2.0,\n    });\n\n    // Score all discovered businesses with optimized algorithm\n    if (discoveryResult && discoveryResult.leads) {\n      console.log(\n        `🎯 Applying Enhanced Quality Scoring v3.0 to ${discoveryResult.leads.length} businesses`\n      );\n\n      for (let i = 0; i < discoveryResult.leads.length; i++) {\n        const business = discoveryResult.leads[i];\n        const scoringResult = await qualityScorer.calculateOptimizedScore(\n          business\n        );\n\n        // Update business with enhanced scoring\n        discoveryResult.leads[i] = {\n          ...business,\n          optimizedScore: scoringResult.score,\n          scoreBreakdown: scoringResult.breakdown,\n          costEfficient: scoringResult.costEfficient,\n          validationCost: scoringResult.totalCost,\n          scoringRecommendation: scoringResult.recommendation,\n        };\n      }\n\n      // Apply dynamic threshold optimization\n      const thresholdAnalysis = qualityScorer.calculateOptimalThreshold(\n        discoveryResult.leads,\n        35 // Target 35% qualification rate for balanced approach\n      );\n\n      const optimalThreshold = thresholdAnalysis.suggested;\n      console.log(\n        `📊 Dynamic threshold optimization: ${optimalThreshold}% (target: 35% qualification rate)`\n      );\n\n      // Filter with optimized threshold\n      const qualifiedLeads = discoveryResult.leads.filter(\n        (lead) => lead.optimizedScore >= optimalThreshold\n      );\n\n      // Update discovery result with enhanced scoring metrics\n      discoveryResult.leads = qualifiedLeads;\n      discoveryResult.qualityMetrics = {\n        originalCount: discoveryResult.totalFound || 0,\n        processedCount: discoveryResult.leads.length || 0,\n        qualifiedCount: qualifiedLeads.length,\n        qualificationRate:\n          discoveryResult.leads.length > 0\n            ? Math.round(\n                (qualifiedLeads.length / (discoveryResult.totalFound || 1)) *\n                  100\n              )\n            : 0,\n        averageScore: Math.round(\n          discoveryResult.leads.reduce(\n            (sum, lead) => sum + (lead.optimizedScore || 0),\n            0\n          ) / Math.max(1, discoveryResult.leads.length)\n        ),\n        optimalThreshold,\n        thresholdAnalysis: thresholdAnalysis.analysis,\n        costEfficiency: qualityScorer.getPerformanceSummary(),\n      };\n\n      console.log(`✅ Enhanced Quality Scoring complete:`);\n      console.log(\n        `   📊 Qualified: ${qualifiedLeads.length}/${\n          discoveryResult.totalFound || 0\n        } (${discoveryResult.qualityMetrics.qualificationRate}%)`\n      );\n      console.log(\n        `   💰 Avg Score: ${discoveryResult.qualityMetrics.averageScore}% | Threshold: ${optimalThreshold}%`\n      );\n      console.log(\n        `   🎯 Cost Savings: $${qualityScorer\n          .getPerformanceSummary()\n          .totalCostSavings.toFixed(2)}`\n      );\n    }\n\n    const processingTime = Date.now() - startTime;\n\n    // Enhanced response with comprehensive metrics\n    const response = {\n      success: true,\n      campaignId,\n      discoveryEngine: \"Enhanced Discovery Engine v2.0 + Quality Scorer v3.0\",\n      requirements: {\n        targetLeads: maxResults,\n        budgetLimit,\n        requireCompleteContacts,\n        minConfidenceScore,\n      },\n      results: {\n        totalFound: discoveryResult?.totalFound || 0,\n        qualified: discoveryResult?.leads?.length || 0,\n        qualificationRate: `${(\n          ((discoveryResult?.leads?.length || 0) /\n            (discoveryResult?.totalFound || 1)) *\n          100\n        ).toFixed(1)}%`,\n        averageConfidence: discoveryResult?.averageConfidence || 0,\n        completeness: discoveryResult?.completeness || 0,\n      },\n      qualityMetrics: discoveryResult?.qualityMetrics || {\n        processedCount: 0,\n        qualificationRate: 0,\n        averageScore: 0,\n        optimalThreshold: minConfidenceScore,\n        note: \"Enhanced Quality Scoring not applied - no businesses processed\",\n      },\n      costs: {\n        totalCost: discoveryResult?.totalCost || 0,\n        costPerLead: discoveryResult?.costPerLead || 0,\n        costBreakdown: discoveryResult?.costBreakdown || {},\n        validationCosts:\n          discoveryResult?.qualityMetrics?.costEfficiency\n            ?.averageCostPerBusiness || 0,\n        costSavings:\n          discoveryResult?.qualityMetrics?.costEfficiency\n            ?.costSavingsVsTraditional || 0,\n      },\n      performance: {\n        processingTime: `${(processingTime / 1000).toFixed(1)}s`,\n        avgTimePerLead: `${(\n          processingTime /\n          1000 /\n          (discoveryResult?.leads?.length || 1)\n        ).toFixed(1)}s`,\n        iterationsCompleted: discoveryResult?.iterationsCompleted || 0,\n      },\n      leads: (discoveryResult?.leads || []).map((lead) => ({\n        businessName: lead.businessName,\n        address: lead.address,\n        phone: lead.phone,\n        website: lead.website,\n        email: lead.email,\n        confidenceScore: lead.confidenceScore,\n        optimizedScore: lead.optimizedScore,\n        preValidationScore: lead.preValidationScore,\n        scoreBreakdown: lead.scoreBreakdown,\n        validationCost: lead.validationCost,\n        costEfficient: lead.costEfficient,\n        scoringRecommendation: lead.scoringRecommendation,\n        dataCompleteness: lead.dataCompleteness,\n        sources: lead.sources,\n        enrichmentData: lead.enrichmentData,\n        validationResults: lead.validationResults,\n      })),\n      metadata: {\n        timestamp: new Date().toISOString(),\n        version: \"Enhanced Discovery Engine v2.0\",\n        searchQueries: discoveryResult.searchQueries,\n        duplicatesRemoved: discoveryResult.duplicatesRemoved,\n        qualityFiltering: discoveryResult.qualityFiltering,\n      },\n    };\n\n    // Log successful campaign completion using available method\n    const finalCampaignData = {\n      campaignId,\n      businessType,\n      location,\n      targetCount: maxResults,\n      businesses: (discoveryResult?.leads || []).map((lead) => ({\n        name: lead.businessName,\n        address: lead.address,\n        phone: lead.phone,\n        website: lead.website,\n        email: lead.email,\n        confidenceScore: lead.confidenceScore,\n        qualityGrade:\n          lead.confidenceScore >= 80\n            ? \"A\"\n            : lead.confidenceScore >= 70\n            ? \"B\"\n            : lead.confidenceScore >= 60\n            ? \"C\"\n            : \"D\",\n      })),\n      estimatedCost: discoveryResult.totalCost,\n      duration: processingTime,\n    };\n\n    // Log campaign results asynchronously (don't block response)\n    campaignLogger.logCampaignResults(finalCampaignData).catch((err) => {\n      console.warn(\"Campaign logging failed:\", err.message);\n    });\n\n    console.log(\n      `✅ Campaign ${campaignId} completed: ${\n        discoveryResult?.leads?.length || 0\n      }/${maxResults} qualified leads`\n    );\n    console.log(\n      `💰 Total cost: $${(discoveryResult?.totalCost || 0).toFixed(4)}`\n    );\n    console.log(`⏱️ Processing time: ${(processingTime / 1000).toFixed(1)}s`);\n\n    // Store results for export functionality\n    if (global.storeCampaignResults && discoveryResult?.leads) {\n      try {\n        global.storeCampaignResults(campaignId, response);\n        console.log(`📊 Campaign results stored for export: ${campaignId}`);\n      } catch (storeError) {\n        console.warn(\"Failed to store campaign results:\", storeError.message);\n      }\n    }\n\n    res.json(response);\n  } catch (error) {\n    const processingTime = Date.now() - startTime;\n\n    console.error(\"❌ Enhanced Discovery Error:\", error.message);\n    console.error(\"Stack trace:\", error.stack);\n\n    // Log failed campaign if ID exists\n    if (campaignId) {\n      const failedCampaignData = {\n        campaignId,\n        businessType: req.body.businessType,\n        location: req.body.location,\n        targetCount: req.body.maxResults || 10,\n        businesses: [],\n        estimatedCost: 0,\n        duration: processingTime,\n        error: error.message,\n      };\n\n      campaignLogger.logCampaignResults(failedCampaignData).catch((err) => {\n        console.warn(\"Failed campaign logging failed:\", err.message);\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: \"Enhanced discovery system failed\",\n      details: error.message,\n      campaignId,\n      processingTime: `${(processingTime / 1000).toFixed(1)}s`,\n      timestamp: new Date().toISOString(),\n    });\n  }\n});\n\n// Legacy API endpoint for backward compatibility - redirects to new engine\nrouter.post(\"/discover\", async (req, res) => {\n  console.log(\n    \"🔄 Legacy /discover endpoint called - redirecting to Enhanced Discovery Engine v2.0\"\n  );\n\n  try {\n    // Load fresh API keys from vault\n    const apiKeys = await getApiKeys();\n\n    // Initialize Enhanced Discovery Engine v2.0 with vault API keys\n    const discoveryEngine = new EnhancedDiscoveryEngine(apiKeys);\n    const campaignLogger = new CampaignLogger();\n\n    // Map legacy parameters to new format\n    const {\n      query: businessType,\n      location,\n      count: maxResults = 10,\n      budgetLimit = 50,\n      qualityThreshold: minConfidenceScore = 70,\n    } = req.body;\n\n    // Validate required parameters\n    if (!businessType || !location) {\n      return res.status(400).json({\n        success: false,\n        error: \"Business type (query) and location are required\",\n      });\n    }\n\n    // Call Enhanced Discovery Engine v2.0 with mapped parameters\n    const startTime = Date.now();\n    let campaignId = null;\n\n    // Generate campaign ID for tracking\n    campaignId = `campaign_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n\n    console.log(\n      `🔄 Legacy endpoint using Enhanced Discovery v2.0 - Campaign: ${campaignId}`\n    );\n\n    // Use Enhanced Discovery Engine v2.0\n    const discoveryResult = await discoveryEngine.discoverQualifiedLeads({\n      businessType,\n      location,\n      targetCount: maxResults,\n      budgetLimit,\n      requireCompleteContacts: false, // More lenient for legacy compatibility\n      minConfidenceScore: Math.max(minConfidenceScore - 20, 30), // Lower threshold\n    });\n\n    const processingTime = Date.now() - startTime;\n\n    // Log campaign completion using available method\n    const legacyCampaignData = {\n      campaignId,\n      businessType,\n      location,\n      targetCount: maxResults,\n      businesses: (discoveryResult?.leads || []).map((lead) => ({\n        name: lead.businessName,\n        address: lead.address,\n        phone: lead.phone,\n        website: lead.website,\n        email: lead.email,\n        confidenceScore: lead.confidenceScore,\n        qualityGrade:\n          lead.confidenceScore >= 80\n            ? \"A\"\n            : lead.confidenceScore >= 70\n            ? \"B\"\n            : lead.confidenceScore >= 60\n            ? \"C\"\n            : \"D\",\n      })),\n      estimatedCost: discoveryResult.totalCost,\n      duration: processingTime,\n    };\n\n    campaignLogger.logCampaignResults(legacyCampaignData).catch((err) => {\n      console.warn(\"Legacy campaign logging failed:\", err.message);\n    });\n\n    // Return response in legacy format for backward compatibility\n    res.json({\n      success: true,\n      results: (discoveryResult?.leads || []).map((lead) => ({\n        name: lead.businessName,\n        address: lead.address,\n        phone: lead.phone,\n        website: lead.website,\n        email: lead.email,\n        confidenceScore: lead.confidenceScore,\n        category: lead.category,\n        rating: lead.rating,\n        reviewCount: lead.reviewCount,\n        sources: lead.sources,\n        enrichmentData: lead.enrichmentData,\n        validationResults: lead.validationResults,\n      })),\n      metadata: {\n        totalProcessed: discoveryResult?.totalFound || 0,\n        totalQualified: discoveryResult?.leads?.length || 0,\n        qualificationRate: Math.round(\n          ((discoveryResult?.leads?.length || 0) /\n            (discoveryResult?.totalFound || 1)) *\n            100\n        ),\n        averageConfidence: discoveryResult?.averageConfidence || 0,\n        totalCost: discoveryResult?.totalCost || 0,\n        costPerLead: discoveryResult?.costPerLead || 0,\n        processingTime: Date.now() - startTime,\n        discoveryEngine: \"Enhanced Discovery Engine v2.0 (Legacy Compatible)\",\n        campaignId,\n      },\n    });\n  } catch (error) {\n    console.error(\"❌ Legacy endpoint error:\", error.message);\n    res.status(500).json({\n      success: false,\n      error: \"Enhanced discovery system failed\",\n      details: error.message,\n      timestamp: new Date().toISOString(),\n    });\n  }\n});\n\n// GET /api/business/stats - Get campaign statistics for admin dashboard\nrouter.get(\"/stats\", async (req, res) => {\n  try {\n    const stats = await campaignLogger.getCampaignStats();\n    const recentCampaigns = await campaignLogger.getRecentCampaigns(5);\n\n    res.json({\n      success: true,\n      aggregateStats: stats,\n      recentCampaigns: recentCampaigns,\n      discoveryEngine: \"Enhanced Discovery Engine v2.0\",\n    });\n  } catch (error) {\n    console.error(\"Failed to get campaign stats:\", error);\n    res.status(500).json({\n      error: \"Failed to retrieve statistics\",\n      message: error.message,\n    });\n  }\n});\n\n// CSV Export endpoint for Enhanced Discovery Engine v2.0\nrouter.post(\"/export-csv\", async (req, res) => {\n  try {\n    const { campaignId } = req.body;\n\n    if (!campaignId) {\n      return res.status(400).json({\n        error: \"campaignId is required\",\n      });\n    }\n\n    console.log(`📊 Exporting campaign: ${campaignId}`);\n\n    // Get campaign data and export to CSV using Enhanced Discovery Engine v2.0\n    const exportResult = await discoveryEngine.exportCampaignToCsv(campaignId);\n\n    console.log(\n      `✅ Campaign export complete: ${exportResult.filename} with ${exportResult.leadCount} leads`\n    );\n\n    res.json({\n      success: true,\n      export: {\n        ...exportResult,\n        downloadUrl: `/api/business/download-csv/${encodeURIComponent(\n          exportResult.filename\n        )}`,\n      },\n    });\n  } catch (error) {\n    console.error(\"❌ Campaign export failed:\", error);\n    res.status(500).json({\n      success: false,\n      error: error.message,\n    });\n  }\n});\n\n// Download CSV endpoint\nrouter.get(\"/download-csv/:filename\", async (req, res) => {\n  try {\n    const { filename } = req.params;\n    const filepath = path.join(__dirname, \"../exports\", filename);\n\n    // Check if file exists\n    try {\n      await fs.access(filepath);\n    } catch (error) {\n      return res.status(404).json({\n        error: \"File not found\",\n        message: \"The requested CSV file does not exist or has expired.\",\n      });\n    }\n\n    // Send file with proper headers\n    res.setHeader(\"Content-Type\", \"text/csv\");\n    res.setHeader(\"Content-Disposition\", `attachment; filename=\"${filename}\"`);\n\n    const fileStream = require(\"fs\").createReadStream(filepath);\n    fileStream.pipe(res);\n  } catch (error) {\n    console.error(\"Error downloading CSV:\", error);\n    res.status(500).json({\n      error: \"Download failed\",\n      message: error.message,\n    });\n  }\n});\n\nmodule.exports = router;\n"}}},
{"type":"measure","name":"lsp.did_open","count":17,"duration":8.24},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":10,"duration":0.105},
{"type":"mark","name":"lsp.did_open","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\n\n// CORS headers for frontend calls\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n};\n\ninterface BusinessDiscoveryRequest {\n  businessType: string;\n  location: string;\n  maxResults?: number;\n  budgetLimit?: number;\n  requireCompleteContacts?: boolean;\n  minConfidenceScore?: number;\n  additionalQueries?: string[];\n}\n\ninterface BusinessLead {\n  businessName: string;\n  address: string;\n  phone?: string;\n  website?: string;\n  email?: string;\n  optimizedScore: number;\n  preValidationScore: number;\n  scoreBreakdown: {\n    businessName: number;\n    address: number;\n    phone: number;\n    website: number;\n    email: number;\n    external: number;\n    total: number;\n  };\n  validationCost: number;\n  costEfficient: boolean;\n  scoringRecommendation: string;\n}\n\n// Enhanced Quality Scorer v3.0 - Cost-efficient validation pipeline\nclass EnhancedQualityScorer {\n  private maxCostPerBusiness: number;\n  private dynamicThreshold: number;\n\n  constructor(options: { maxCostPerBusiness?: number } = {}) {\n    this.maxCostPerBusiness = options.maxCostPerBusiness || 2.0;\n    this.dynamicThreshold = 50;\n  }\n\n  scoreBusiness(business: any): BusinessLead {\n    // Pre-validation scoring (free)\n    const preValidationScore = this.calculatePreValidationScore(business);\n\n    // Determine if worth paid validation\n    const shouldValidate = preValidationScore >= this.dynamicThreshold;\n    const validationCost = shouldValidate ? 0.02 : 0; // Simulate validation cost\n\n    // Final optimized score\n    const optimizedScore = shouldValidate\n      ? Math.min(preValidationScore + 5, 100)\n      : preValidationScore;\n\n    return {\n      businessName: business.name || business.businessName || \"\",\n      address: business.address || business.formatted_address || \"\",\n      phone: business.phone || business.formatted_phone_number || \"\",\n      website: business.website || business.url || \"\",\n      email: business.email || `hello@${this.extractDomain(business.website)}`,\n      optimizedScore,\n      preValidationScore,\n      scoreBreakdown: {\n        businessName: this.scoreBusinessName(\n          business.name || business.businessName\n        ),\n        address: this.scoreAddress(\n          business.address || business.formatted_address\n        ),\n        phone: this.scorePhone(\n          business.phone || business.formatted_phone_number\n        ),\n        website: this.scoreWebsite(business.website || business.url),\n        email: 0, // Will be validated separately\n        external: 0, // External validation score\n        total: optimizedScore,\n      },\n      validationCost,\n      costEfficient: validationCost <= this.maxCostPerBusiness,\n      scoringRecommendation: this.getRecommendation(optimizedScore),\n    };\n  }\n\n  private calculatePreValidationScore(business: any): number {\n    let score = 0;\n\n    // Business name (25 points)\n    score += this.scoreBusinessName(business.name || business.businessName);\n\n    // Address (25 points)\n    score += this.scoreAddress(business.address || business.formatted_address);\n\n    // Phone (20 points)\n    score += this.scorePhone(business.phone || business.formatted_phone_number);\n\n    // Website (20 points)\n    score += this.scoreWebsite(business.website || business.url);\n\n    // Rating/Reviews (10 points)\n    if (business.rating && business.rating >= 4.0) score += 10;\n    else if (business.rating && business.rating >= 3.5) score += 5;\n\n    return Math.min(score, 100);\n  }\n\n  private scoreBusinessName(name: string): number {\n    if (!name || name.length < 3) return 0;\n    if (/^(business|company|llc|inc|corp)$/i.test(name)) return 30;\n    if (name.length > 50) return 70;\n    return 90;\n  }\n\n  private scoreAddress(address: string): number {\n    if (!address || address.length < 10) return 0;\n    if (/\\b\\d{1,3}\\s+main\\s+st\\b/i.test(address)) return 40;\n    if (address.includes(\",\") && address.length > 20) return 100;\n    return 80;\n  }\n\n  private scorePhone(phone: string): number {\n    if (!phone) return 0;\n    const cleanPhone = phone.replace(/\\D/g, \"\");\n    if (cleanPhone.length !== 10) return 0;\n    if (/^(555|000|111)/.test(cleanPhone)) return 40;\n    return 80;\n  }\n\n  private scoreWebsite(website: string): number {\n    if (!website) return 0;\n    if (!/^https?:\\/\\/.+/.test(website)) return 40;\n    if (website.includes(\"facebook.com\") || website.includes(\"yelp.com\"))\n      return 60;\n    return 80;\n  }\n\n  private extractDomain(website: string): string {\n    if (!website) return \"example.com\";\n    try {\n      const url = new URL(website);\n      return url.hostname;\n    } catch {\n      return \"example.com\";\n    }\n  }\n\n  private getRecommendation(score: number): string {\n    if (score >= 80) return \"High-quality lead - recommended for outreach\";\n    if (score >= 60) return \"Good lead - consider additional validation\";\n    if (score >= 40)\n      return \"Marginal lead - consider lowering threshold or adding more validation\";\n    return \"Low-quality lead - skip or improve data sources\";\n  }\n}\n\n// Google Places API integration\nclass GooglePlacesAPI {\n  private apiKey: string;\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n\n  async searchBusinesses(\n    businessType: string,\n    location: string,\n    maxResults: number = 20\n  ): Promise<any[]> {\n    const query = `${businessType} ${location}`;\n    const url = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(\n      query\n    )}&key=${this.apiKey}`;\n\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (data.status !== \"OK\") {\n        throw new Error(`Google Places API error: ${data.status}`);\n      }\n\n      return data.results.slice(0, maxResults);\n    } catch (error) {\n      console.error(\"Google Places API error:\", error);\n      throw error;\n    }\n  }\n\n  async getPlaceDetails(placeId: string): Promise<any> {\n    const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_address,formatted_phone_number,website,rating,user_ratings_total&key=${this.apiKey}`;\n\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (data.status !== \"OK\") {\n        throw new Error(`Google Places Details API error: ${data.status}`);\n      }\n\n      return data.result;\n    } catch (error) {\n      console.error(\"Google Places Details API error:\", error);\n      throw error;\n    }\n  }\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders });\n  }\n\n  try {\n    const supabase = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\"\n    );\n\n    // Get request body\n    const requestBody: BusinessDiscoveryRequest = await req.json();\n    const {\n      businessType,\n      location,\n      maxResults = 10,\n      budgetLimit = 50,\n      requireCompleteContacts = false,\n      minConfidenceScore = 50,\n      additionalQueries = [],\n    } = requestBody;\n\n    // Validate required parameters\n    if (!businessType || !location) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Business type and location are required\",\n        }),\n        {\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n          status: 400,\n        }\n      );\n    }\n\n    // Get API keys from Supabase secrets (using vault or environment)\n    const googlePlacesKey = Deno.env.get(\"GOOGLE_PLACES_API_KEY\");\n    if (!googlePlacesKey) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Google Places API key not configured\",\n        }),\n        {\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n          status: 500,\n        }\n      );\n    }\n\n    const startTime = Date.now();\n    const campaignId = `campaign_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n\n    console.log(\n      `🚀 Starting Enhanced Discovery v2.0 - Campaign: ${campaignId}`\n    );\n    console.log(`📊 Requirements: ${maxResults} qualified leads`);\n    console.log(`💰 Budget limit: $${budgetLimit}`);\n\n    // Initialize Google Places API\n    const placesAPI = new GooglePlacesAPI(googlePlacesKey);\n\n    // Initialize Quality Scorer\n    const qualityScorer = new EnhancedQualityScorer({\n      maxCostPerBusiness: budgetLimit / maxResults || 2.0,\n    });\n\n    // Search for businesses\n    const rawBusinesses = await placesAPI.searchBusinesses(\n      businessType,\n      location,\n      maxResults * 2\n    );\n\n    // Score and filter businesses\n    const scoredBusinesses = rawBusinesses.map((business) =>\n      qualityScorer.scoreBusiness(business)\n    );\n\n    // Filter by confidence score and budget\n    const qualifiedLeads = scoredBusinesses\n      .filter((lead) => lead.optimizedScore >= minConfidenceScore)\n      .slice(0, maxResults);\n\n    const processingTime = Date.now() - startTime;\n    const totalCost = qualifiedLeads.reduce(\n      (sum, lead) => sum + lead.validationCost,\n      0\n    );\n\n    // Store campaign in database\n    const campaignData = {\n      id: campaignId,\n      business_type: businessType,\n      location: location,\n      target_count: maxResults,\n      budget_limit: budgetLimit,\n      min_confidence_score: minConfidenceScore,\n      status: \"completed\",\n      results_count: qualifiedLeads.length,\n      total_cost: totalCost,\n      processing_time_ms: processingTime,\n      created_at: new Date().toISOString(),\n    };\n\n    const { data: campaign, error: campaignError } = await supabase\n      .from(\"campaigns\")\n      .insert(campaignData)\n      .select()\n      .single();\n\n    if (campaignError) {\n      console.error(\"Failed to store campaign:\", campaignError);\n      // Continue without database storage\n    }\n\n    // Store leads in database\n    if (campaign && qualifiedLeads.length > 0) {\n      const leadsData = qualifiedLeads.map((lead) => ({\n        campaign_id: campaign.id,\n        business_name: lead.businessName,\n        address: lead.address,\n        phone: lead.phone,\n        website: lead.website,\n        email: lead.email,\n        confidence_score: lead.optimizedScore,\n        score_breakdown: lead.scoreBreakdown,\n        validation_cost: lead.validationCost,\n        cost_efficient: lead.costEfficient,\n        scoring_recommendation: lead.scoringRecommendation,\n      }));\n\n      const { error: leadsError } = await supabase\n        .from(\"leads\")\n        .insert(leadsData);\n\n      if (leadsError) {\n        console.error(\"Failed to store leads:\", leadsError);\n        // Continue without database storage\n      }\n    }\n\n    // Calculate quality metrics\n    const qualityMetrics = {\n      originalCount: rawBusinesses.length,\n      processedCount: scoredBusinesses.length,\n      qualifiedCount: qualifiedLeads.length,\n      qualificationRate:\n        (qualifiedLeads.length / scoredBusinesses.length) * 100,\n      averageScore:\n        qualifiedLeads.reduce((sum, lead) => sum + lead.optimizedScore, 0) /\n          qualifiedLeads.length || 0,\n    };\n\n    // Enhanced response with comprehensive metrics\n    const response = {\n      success: true,\n      campaignId,\n      discoveryEngine: \"Enhanced Discovery Engine v2.0 + Quality Scorer v3.0\",\n      requirements: {\n        targetLeads: maxResults,\n        budgetLimit,\n        requireCompleteContacts,\n        minConfidenceScore,\n      },\n      results: {\n        totalFound: qualifiedLeads.length,\n        qualified: qualifiedLeads.length,\n        qualificationRate: `${qualityMetrics.qualificationRate.toFixed(1)}%`,\n        averageConfidence: Math.round(qualityMetrics.averageScore),\n        completeness: qualifiedLeads.filter((lead) => lead.email && lead.phone)\n          .length,\n      },\n      qualityMetrics: {\n        ...qualityMetrics,\n        optimalThreshold: minConfidenceScore,\n        thresholdAnalysis: {\n          businessesProcessed: scoredBusinesses.length,\n          averageScore: Math.round(qualityMetrics.averageScore),\n          highestScore: Math.max(\n            ...qualifiedLeads.map((l) => l.optimizedScore),\n            0\n          ),\n          lowestScore: Math.min(\n            ...qualifiedLeads.map((l) => l.optimizedScore),\n            0\n          ),\n          projectedQualificationRate: qualityMetrics.qualificationRate,\n          costEfficiency: {\n            averageCostPerBusiness: totalCost / scoredBusinesses.length || 0,\n            costPerQualifiedLead: totalCost / qualifiedLeads.length || 0,\n            costSavingsVsTraditional: budgetLimit - totalCost,\n          },\n          recommendation: \"Balanced threshold for optimal qualification rate\",\n        },\n        costEfficiency: {\n          businessesProcessed: scoredBusinesses.length,\n          averageScore: Math.round(qualityMetrics.averageScore),\n          totalCostSavings: budgetLimit - totalCost,\n          costSavingsPerBusiness:\n            (budgetLimit - totalCost) / scoredBusinesses.length || 0,\n        },\n      },\n      costs: {\n        totalCost,\n        costPerLead: totalCost / qualifiedLeads.length || 0,\n        costBreakdown: {\n          validation: totalCost,\n          discovery: 0.032, // Google Places search cost\n        },\n        validationCosts: totalCost,\n        costSavings: budgetLimit - totalCost,\n      },\n      performance: {\n        processingTime: `${(processingTime / 1000).toFixed(1)}s`,\n        avgTimePerLead: `${(\n          processingTime /\n          qualifiedLeads.length /\n          1000\n        ).toFixed(1)}s`,\n        iterationsCompleted: 1,\n      },\n      leads: qualifiedLeads,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        version: \"Enhanced Discovery Engine v2.0\",\n      },\n    };\n\n    console.log(\n      `✅ Campaign ${campaignId} completed: ${qualifiedLeads.length}/${maxResults} qualified leads`\n    );\n    console.log(`💰 Total cost: $${totalCost.toFixed(4)}`);\n    console.log(`⏱️ Processing time: ${(processingTime / 1000).toFixed(1)}s`);\n\n    return new Response(JSON.stringify(response), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n  } catch (error) {\n    console.error(\"❌ Business Discovery Error:\", error);\n\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: \"Business discovery failed\",\n        details: error.message,\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 500,\n      }\n    );\n  }\n});\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":11,"duration":0.106},
{"type":"measure","name":"lsp.did_open","count":18,"duration":3.955},
{"type":"mark","name":"lsp.did_open","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\n\n// CORS headers for frontend calls\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n};\n\ninterface CampaignExportRequest {\n  campaignId: string;\n  format?: string;\n  minConfidence?: number;\n  includeUnqualified?: boolean;\n  includeProvenance?: boolean;\n}\n\ninterface Campaign {\n  id: string;\n  business_type: string;\n  location: string;\n  [key: string]: unknown;\n}\n\ninterface Lead {\n  business_name: string;\n  address: string;\n  phone?: string;\n  website?: string;\n  email?: string;\n  confidence_score: number;\n  score_breakdown?: Record<string, unknown>;\n  validation_cost?: number;\n  cost_efficient?: boolean;\n  scoring_recommendation?: string;\n  created_at: string;\n}\n\n// CSV Export functionality\nclass CampaignExporter {\n  generateCSV(_campaign: Campaign, leads: Lead[]): string {\n    // Define CSV headers\n    const headers = [\n      \"Business Name\",\n      \"Address\",\n      \"Phone\",\n      \"Website\",\n      \"Email\",\n      \"Confidence Score\",\n      \"Score Breakdown\",\n      \"Validation Cost\",\n      \"Cost Efficient\",\n      \"Recommendation\",\n      \"Created Date\",\n    ];\n\n    // Generate CSV rows\n    const rows = leads.map((lead) => [\n      this.cleanField(lead.business_name),\n      this.cleanField(lead.address),\n      this.cleanField(lead.phone),\n      this.cleanField(lead.website),\n      this.cleanField(lead.email),\n      lead.confidence_score || 0,\n      JSON.stringify(lead.score_breakdown || {}),\n      `$${(lead.validation_cost || 0).toFixed(4)}`,\n      lead.cost_efficient ? \"Yes\" : \"No\",\n      this.cleanField(lead.scoring_recommendation),\n      this.formatDate(lead.created_at),\n    ]);\n\n    // Combine headers and rows\n    const csvContent = [\n      headers.join(\",\"),\n      ...rows.map((row) =>\n        row\n          .map((field) =>\n            typeof field === \"string\" &&\n            (field.includes(\",\") || field.includes('\"'))\n              ? `\"${field.replace(/\"/g, '\"\"')}\"`\n              : field\n          )\n          .join(\",\")\n      ),\n    ].join(\"\\n\");\n\n    return csvContent;\n  }\n\n  private cleanField(value: unknown): string {\n    if (value === null || value === undefined) return \"\";\n    return String(value)\n      .replace(/[\\r\\n]+/g, \" \")\n      .trim();\n  }\n\n  private formatDate(dateString: string): string {\n    if (!dateString) return \"\";\n    return new Date(dateString).toLocaleDateString(\"en-US\");\n  }\n\n  private sanitizeFilename(filename: string): string {\n    return filename.replace(/[^a-zA-Z0-9_-]/g, \"_\").replace(/__+/g, \"_\");\n  }\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders });\n  }\n\n  try {\n    const supabase = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\"\n    );\n\n    const url = new URL(req.url);\n    const campaignId = url.pathname.split(\"/\").pop();\n\n    if (!campaignId) {\n      return new Response(\n        JSON.stringify({\n          error: \"Campaign ID is required\",\n        }),\n        {\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n          status: 400,\n        }\n      );\n    }\n\n    const queryParams = new URLSearchParams(url.search);\n    const format = queryParams.get(\"format\") || \"csv\";\n    const minConfidence = parseInt(queryParams.get(\"minConfidence\") || \"0\");\n    const includeUnqualified = queryParams.get(\"includeUnqualified\") === \"true\";\n\n    console.log(\n      `📊 Exporting campaign ${campaignId} (format: ${format}, min confidence: ${minConfidence})`\n    );\n\n    // Get campaign details\n    const { data: campaign, error: campaignError } = await supabase\n      .from(\"campaigns\")\n      .select(\"*\")\n      .eq(\"id\", campaignId)\n      .single();\n\n    if (campaignError || !campaign) {\n      return new Response(\n        JSON.stringify({\n          error: \"Campaign not found\",\n          details: campaignError?.message,\n        }),\n        {\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n          status: 404,\n        }\n      );\n    }\n\n    // Get campaign leads\n    let query = supabase\n      .from(\"leads\")\n      .select(\"*\")\n      .eq(\"campaign_id\", campaignId)\n      .order(\"confidence_score\", { ascending: false });\n\n    if (!includeUnqualified) {\n      query = query.gte(\"confidence_score\", minConfidence);\n    }\n\n    const { data: leads, error: leadsError } = await query;\n\n    if (leadsError) {\n      console.error(\"Error fetching leads:\", leadsError);\n      return new Response(\n        JSON.stringify({\n          error: \"Failed to fetch campaign leads\",\n          details: leadsError.message,\n        }),\n        {\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n          status: 500,\n        }\n      );\n    }\n\n    if (!leads || leads.length === 0) {\n      return new Response(\n        JSON.stringify({\n          error: \"No leads found for this campaign\",\n          campaign: campaign.business_type || campaignId,\n        }),\n        {\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n          status: 404,\n        }\n      );\n    }\n\n    // Generate CSV export\n    const exporter = new CampaignExporter();\n    const csvContent = exporter.generateCSV(campaign, leads);\n\n    // Set response headers for file download\n    const timestamp = new Date().toISOString().slice(0, 10);\n    const filename = `${\n      campaign.business_type || \"campaign\"\n    }_${campaignId.slice(0, 8)}_${timestamp}.csv`;\n\n    console.log(`✅ Export completed: ${leads.length} leads exported`);\n\n    return new Response(csvContent, {\n      headers: {\n        ...corsHeaders,\n        \"Content-Type\": \"text/csv\",\n        \"Content-Disposition\": `attachment; filename=\"${filename}\"`,\n        \"X-Export-Count\": leads.length.toString(),\n        \"X-Campaign-Name\": campaign.business_type || \"Untitled\",\n      },\n    });\n  } catch (error) {\n    console.error(\"❌ Campaign export error:\", error);\n    const errorMessage =\n      error instanceof Error ? error.message : \"Unknown error\";\n    return new Response(\n      JSON.stringify({\n        error: \"Export failed\",\n        details: errorMessage,\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 500,\n      }\n    );\n  }\n});\n"}}},
{"type":"measure","name":"lsp.did_open","count":19,"duration":1.338},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":12,"duration":0.152},
{"type":"mark","name":"lsp.did_open","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/supabase-first-schema.sql","languageId":"sql","version":1,"text":"-- Supabase-First Architecture Database Schema\n-- Core tables for campaign and lead management\n\n-- Campaigns table\nCREATE TABLE IF NOT EXISTS campaigns (\n  id TEXT PRIMARY KEY,\n  business_type TEXT NOT NULL,\n  location TEXT NOT NULL,\n  target_count INTEGER DEFAULT 10,\n  budget_limit DECIMAL(10,4) DEFAULT 50.0,\n  min_confidence_score INTEGER DEFAULT 50,\n  status TEXT DEFAULT 'pending',\n  results_count INTEGER DEFAULT 0,\n  total_cost DECIMAL(10,4) DEFAULT 0,\n  processing_time_ms INTEGER,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Leads table\nCREATE TABLE IF NOT EXISTS leads (\n  id BIGSERIAL PRIMARY KEY,\n  campaign_id TEXT NOT NULL REFERENCES campaigns(id) ON DELETE CASCADE,\n  business_name TEXT NOT NULL,\n  address TEXT,\n  phone TEXT,\n  website TEXT,\n  email TEXT,\n  confidence_score INTEGER DEFAULT 0,\n  score_breakdown JSONB,\n  validation_cost DECIMAL(10,4) DEFAULT 0,\n  cost_efficient BOOLEAN DEFAULT true,\n  scoring_recommendation TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Dashboard exports tracking\nCREATE TABLE IF NOT EXISTS dashboard_exports (\n  id BIGSERIAL PRIMARY KEY,\n  campaign_id TEXT REFERENCES campaigns(id) ON DELETE CASCADE,\n  export_type TEXT DEFAULT 'lead_export',\n  file_format TEXT DEFAULT 'csv',\n  row_count INTEGER DEFAULT 0,\n  export_status TEXT DEFAULT 'completed',\n  completed_at TIMESTAMPTZ DEFAULT NOW(),\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Indexes for performance\nCREATE INDEX IF NOT EXISTS idx_campaigns_created_at ON campaigns(created_at);\nCREATE INDEX IF NOT EXISTS idx_campaigns_status ON campaigns(status);\nCREATE INDEX IF NOT EXISTS idx_leads_campaign_id ON leads(campaign_id);\nCREATE INDEX IF NOT EXISTS idx_leads_confidence_score ON leads(confidence_score);\nCREATE INDEX IF NOT EXISTS idx_leads_created_at ON leads(created_at);\n\n-- Enable Row Level Security (RLS)\nALTER TABLE campaigns ENABLE ROW LEVEL SECURITY;\nALTER TABLE leads ENABLE ROW LEVEL SECURITY;\nALTER TABLE dashboard_exports ENABLE ROW LEVEL SECURITY;\n\n-- RLS Policies for public access (since we're not using auth yet)\n-- In production, these would be more restrictive\nCREATE POLICY \"Public read campaigns\" ON campaigns \n  FOR SELECT USING (true);\n\nCREATE POLICY \"Public insert campaigns\" ON campaigns \n  FOR INSERT WITH CHECK (true);\n\nCREATE POLICY \"Public update campaigns\" ON campaigns \n  FOR UPDATE USING (true);\n\nCREATE POLICY \"Public read leads\" ON leads \n  FOR SELECT USING (true);\n\nCREATE POLICY \"Public insert leads\" ON leads \n  FOR INSERT WITH CHECK (true);\n\nCREATE POLICY \"Public update leads\" ON leads \n  FOR UPDATE USING (true);\n\nCREATE POLICY \"Public read exports\" ON dashboard_exports \n  FOR SELECT USING (true);\n\nCREATE POLICY \"Public insert exports\" ON dashboard_exports \n  FOR INSERT WITH CHECK (true);\n\n-- Function to update updated_at timestamp\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Triggers for updated_at\nCREATE TRIGGER update_campaigns_updated_at \n  BEFORE UPDATE ON campaigns \n  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();\n\nCREATE TRIGGER update_leads_updated_at \n  BEFORE UPDATE ON leads \n  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();\n\n-- Analytics view for campaign performance\nCREATE OR REPLACE VIEW campaign_analytics AS\nSELECT \n  c.id,\n  c.business_type,\n  c.location,\n  c.target_count,\n  c.budget_limit,\n  c.total_cost,\n  c.results_count,\n  c.processing_time_ms,\n  COUNT(l.id) as actual_leads,\n  AVG(l.confidence_score) as avg_confidence,\n  SUM(l.validation_cost) as total_validation_cost,\n  COUNT(CASE WHEN l.cost_efficient = true THEN 1 END) as cost_efficient_leads,\n  c.created_at\nFROM campaigns c\nLEFT JOIN leads l ON c.id = l.campaign_id\nGROUP BY c.id, c.business_type, c.location, c.target_count, c.budget_limit, \n         c.total_cost, c.results_count, c.processing_time_ms, c.created_at;\n\n-- Grant permissions for Edge Functions to access these tables\n-- Note: In production, you'd use more specific service role permissions\nGRANT ALL ON campaigns TO postgres, anon, authenticated, service_role;\nGRANT ALL ON leads TO postgres, anon, authenticated, service_role;\nGRANT ALL ON dashboard_exports TO postgres, anon, authenticated, service_role;\nGRANT SELECT ON campaign_analytics TO postgres, anon, authenticated, service_role;\nGRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO postgres, anon, authenticated, service_role;"}}},
{"type":"measure","name":"lsp.did_open","count":20,"duration":0.074},
{"type":"mark","name":"lsp.did_open","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app.js","languageId":"javascript","version":1,"text":"// ProspectPro Supabase-First Frontend\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.58.0\";\n\nclass ProspectProSupabase {\n  constructor() {\n    // Initialize Supabase client\n    this.supabase = createClient(\n      \"https://sriycekxdqnesdsgwiuc.supabase.co\",\n      \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI\"\n    );\n\n    this.selectedTool = \"business-discovery\";\n    this.searchResults = [];\n    this.lastSearchCampaignId = null;\n    this.lastSearchCampaignName = null;\n    this.costPerLead = 0.084;\n    this.campaignRunning = false;\n    this.sessionStats = null;\n    this.selectedQuantity = 5;\n\n    this.init();\n  }\n\n  async init() {\n    console.log(\"🚀 ProspectPro Supabase-First Client initialized\");\n\n    // Check Supabase connection\n    await this.checkSupabaseStatus();\n\n    // Initialize business categories\n    if (document.getElementById(\"categorySelect\")) {\n      this.initBusinessCategories();\n    }\n\n    // Bind events\n    this.bindEvents();\n\n    // Update initial cost estimate\n    this.updateCostEstimate();\n  }\n\n  async checkSupabaseStatus() {\n    try {\n      const { data, error } = await this.supabase\n        .from(\"campaigns\")\n        .select(\"count\", { count: \"exact\" })\n        .limit(1);\n\n      if (error) {\n        console.warn(\"Supabase connection issue:\", error.message);\n        this.showNotification(\n          \"Database connection issue - some features may be limited\",\n          \"warning\"\n        );\n      } else {\n        console.log(\"✅ Supabase connection verified\");\n      }\n    } catch (error) {\n      console.error(\"Supabase status check failed:\", error);\n      this.showNotification(\"Unable to connect to database\", \"error\");\n    }\n  }\n\n  selectTemplate(templateType) {\n    if (templateType === \"local-business\") {\n      document.getElementById(\"businessType\").value = \"restaurant\";\n      document.getElementById(\"location\").value = \"San Francisco, CA\";\n    }\n  }\n\n  showPage(pageId) {\n    // Hide all pages\n    document.querySelectorAll(\".page-content\").forEach((page) => {\n      page.style.display = \"none\";\n    });\n\n    // Show selected page\n    const targetPage = document.getElementById(pageId);\n    if (targetPage) {\n      targetPage.style.display = \"block\";\n    }\n  }\n\n  showSettings() {\n    this.showPage(\"settingsPage\");\n    this.loadAdminData();\n  }\n\n  async loadAdminData() {\n    try {\n      // Get recent campaigns from Supabase\n      const { data: campaigns, error } = await this.supabase\n        .from(\"campaigns\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false })\n        .limit(10);\n\n      if (error) {\n        console.error(\"Failed to load campaigns:\", error);\n        return;\n      }\n\n      // Update recent campaigns display\n      this.updateRecentCampaignsDisplay(campaigns || []);\n\n      // Get campaign statistics\n      const { data: stats } = await this.supabase\n        .from(\"campaign_analytics\")\n        .select(\"*\");\n\n      if (stats) {\n        this.updateEnhancedStatsDisplay({ success: true, data: stats });\n      }\n    } catch (error) {\n      console.error(\"Admin data loading error:\", error);\n      this.showNotification(\"Failed to load admin data\", \"error\");\n    }\n  }\n\n  updateEnhancedStatsDisplay(statsData) {\n    if (statsData.success && statsData.data) {\n      const stats = statsData.data;\n      const totalCampaigns = stats.length;\n      const totalLeads = stats.reduce(\n        (sum, s) => sum + (s.actual_leads || 0),\n        0\n      );\n      const avgConfidence =\n        stats.reduce((sum, s) => sum + (s.avg_confidence || 0), 0) /\n          stats.length || 0;\n      const totalCost = stats.reduce((sum, s) => sum + (s.total_cost || 0), 0);\n\n      // Update dashboard elements\n      const elements = {\n        totalCampaigns: document.getElementById(\"totalCampaigns\"),\n        totalLeads: document.getElementById(\"totalLeads\"),\n        avgConfidence: document.getElementById(\"avgConfidence\"),\n        totalCost: document.getElementById(\"totalCost\"),\n      };\n\n      if (elements.totalCampaigns)\n        elements.totalCampaigns.textContent = totalCampaigns;\n      if (elements.totalLeads) elements.totalLeads.textContent = totalLeads;\n      if (elements.avgConfidence)\n        elements.avgConfidence.textContent = `${avgConfidence.toFixed(1)}%`;\n      if (elements.totalCost)\n        elements.totalCost.textContent = `$${totalCost.toFixed(2)}`;\n    }\n  }\n\n  updateRecentCampaignsDisplay(campaigns) {\n    const recentCampaignsEl = document.getElementById(\"recentCampaigns\");\n    if (!recentCampaignsEl || !campaigns.length) return;\n\n    const campaignsList = campaigns\n      .slice(0, 5)\n      .map((campaign) => {\n        const date = new Date(campaign.created_at).toLocaleDateString();\n        return `\n          <div class=\"campaign-item\">\n            <div class=\"campaign-info\">\n              <strong>${campaign.business_type || \"Unknown\"}</strong>\n              <span class=\"campaign-location\">${\n                campaign.location || \"Unknown location\"\n              }</span>\n              <span class=\"campaign-date\">${date}</span>\n            </div>\n            <div class=\"campaign-stats\">\n              <span class=\"campaign-leads\">${\n                campaign.results_count || 0\n              } leads</span>\n              <span class=\"campaign-cost\">$${(campaign.total_cost || 0).toFixed(\n                2\n              )}</span>\n              <button onclick=\"prospectProApp.exportCampaignLeads('${\n                campaign.id\n              }')\" class=\"btn-export\">Export</button>\n            </div>\n          </div>\n        `;\n      })\n      .join(\"\");\n\n    recentCampaignsEl.innerHTML = campaignsList;\n  }\n\n  goHome() {\n    this.showPage(\"discoveryPage\");\n  }\n\n  updateCostEstimate() {\n    const quantity = parseInt(\n      document.getElementById(\"quantity\")?.value || \"5\"\n    );\n    this.selectedQuantity = quantity;\n    const estimatedCost = quantity * this.costPerLead;\n\n    const costElement = document.getElementById(\"estimatedCost\");\n    if (costElement) {\n      costElement.textContent = `$${estimatedCost.toFixed(2)}`;\n    }\n  }\n\n  bindEvents() {\n    // Search button\n    const searchBtn = document.getElementById(\"searchBtn\");\n    if (searchBtn) {\n      searchBtn.onclick = () => this.handleSearch();\n    }\n\n    // Export button\n    const exportBtn = document.getElementById(\"exportBtn\");\n    if (exportBtn) {\n      exportBtn.onclick = () => this.exportResults();\n    }\n\n    // Quantity slider\n    const quantitySlider = document.getElementById(\"quantity\");\n    if (quantitySlider) {\n      quantitySlider.oninput = () => this.updateCostEstimate();\n    }\n\n    // Settings button\n    const settingsBtn = document.getElementById(\"settingsBtn\");\n    if (settingsBtn) {\n      settingsBtn.onclick = () => this.showSettings();\n    }\n\n    // Home button\n    const homeBtn = document.getElementById(\"homeBtn\");\n    if (homeBtn) {\n      homeBtn.onclick = () => this.goHome();\n    }\n  }\n\n  async handleSearch() {\n    if (this.campaignRunning) {\n      console.log(\"Campaign already running, ignoring request\");\n      return;\n    }\n\n    const businessType = document.getElementById(\"businessType\")?.value;\n    const location = document.getElementById(\"location\")?.value;\n    const quantity = parseInt(\n      document.getElementById(\"quantity\")?.value || \"5\"\n    );\n\n    if (!businessType || !location) {\n      this.showError(\"Please enter both business type and location\");\n      return;\n    }\n\n    this.campaignRunning = true;\n    this.setLoadingState(true);\n    this.showCampaignProgress(true);\n\n    try {\n      console.log(\n        `🔍 Starting business discovery: ${businessType} in ${location}`\n      );\n\n      // Call Supabase Edge Function instead of server.js\n      const { data, error } = await this.supabase.functions.invoke(\n        \"business-discovery\",\n        {\n          body: {\n            businessType,\n            location,\n            maxResults: quantity,\n            budgetLimit: 50,\n            requireCompleteContacts: false,\n            minConfidenceScore: 50,\n          },\n        }\n      );\n\n      if (error) {\n        throw new Error(`Edge Function error: ${error.message}`);\n      }\n\n      if (!data.success) {\n        throw new Error(data.error || \"Business discovery failed\");\n      }\n\n      // Store results for potential export\n      this.searchResults = data.leads || [];\n      this.lastSearchCampaignId = data.campaignId;\n      this.lastSearchCampaignName = `${businessType} in ${location}`;\n\n      // Show results\n      this.showResults(data);\n\n      console.log(\n        `✅ Discovery completed: ${this.searchResults.length} leads found`\n      );\n    } catch (error) {\n      console.error(\"❌ Search error:\", error);\n      this.showError(error.message || \"Business discovery failed\");\n    } finally {\n      this.campaignRunning = false;\n      this.setLoadingState(false);\n      this.showCampaignProgress(false);\n    }\n  }\n\n  showCampaignProgress(isRunning) {\n    const progressContainer = document.getElementById(\"campaignProgress\");\n    if (progressContainer) {\n      progressContainer.style.display = isRunning ? \"block\" : \"none\";\n\n      if (isRunning) {\n        this.animateProgressSteps();\n      }\n    }\n  }\n\n  animateProgressSteps() {\n    const steps = [\n      \"Searching for businesses...\",\n      \"Validating contact information...\",\n      \"Scoring lead quality...\",\n      \"Generating results...\",\n    ];\n\n    const progressText = document.getElementById(\"progressText\");\n    let currentStep = 0;\n\n    const interval = setInterval(() => {\n      if (progressText && currentStep < steps.length) {\n        progressText.textContent = steps[currentStep];\n        currentStep++;\n      } else {\n        clearInterval(interval);\n      }\n    }, 2000);\n  }\n\n  setLoadingState(isLoading) {\n    const searchBtn = document.getElementById(\"searchBtn\");\n    if (searchBtn) {\n      searchBtn.disabled = isLoading;\n      searchBtn.textContent = isLoading ? \"Searching...\" : \"Search Businesses\";\n    }\n  }\n\n  showResults(result) {\n    const resultsContainer = document.getElementById(\"results\");\n    if (!resultsContainer) return;\n\n    // Clear previous results\n    resultsContainer.innerHTML = \"\";\n    resultsContainer.style.display = \"block\";\n\n    const leads = result.leads || [];\n    const stats = result.results || {};\n\n    if (leads.length === 0) {\n      this.showInsufficientResults(result);\n      return;\n    }\n\n    // Results header\n    const header = document.createElement(\"div\");\n    header.className = \"results-header\";\n    header.innerHTML = `\n      <h3>🎯 Discovery Results</h3>\n      <div class=\"results-stats\">\n        <span class=\"stat-item\">\n          <strong>${stats.totalFound || leads.length}</strong> businesses found\n        </span>\n        <span class=\"stat-item\">\n          <strong>${stats.qualified || leads.length}</strong> qualified leads\n        </span>\n        <span class=\"stat-item\">\n          Qualification rate: <strong>${\n            stats.qualificationRate || \"100%\"\n          }</strong>\n        </span>\n        <span class=\"stat-item\">\n          Avg confidence: <strong>${stats.averageConfidence || 0}%</strong>\n        </span>\n      </div>\n      <div class=\"results-actions\">\n        <button id=\"exportCurrentBtn\" class=\"btn btn-secondary\">📊 Export Results</button>\n      </div>\n    `;\n    resultsContainer.appendChild(header);\n\n    // Results grid\n    const grid = document.createElement(\"div\");\n    grid.className = \"results-grid\";\n\n    leads.forEach((business, index) => {\n      const card = this.createEnhancedBusinessCard(business, index);\n      grid.appendChild(card);\n    });\n\n    resultsContainer.appendChild(grid);\n\n    // Bind export button\n    const exportCurrentBtn = document.getElementById(\"exportCurrentBtn\");\n    if (exportCurrentBtn) {\n      exportCurrentBtn.onclick = () => this.exportResults();\n    }\n\n    // Update session stats\n    this.updateSessionStats();\n  }\n\n  createEnhancedBusinessCard(business, index) {\n    const card = document.createElement(\"div\");\n    card.className = \"business-card enhanced\";\n\n    const confidence =\n      business.optimizedScore || business.confidence_score || 0;\n    const scoreClass =\n      confidence >= 80 ? \"high\" : confidence >= 60 ? \"medium\" : \"low\";\n\n    card.innerHTML = `\n      <div class=\"card-header\">\n        <h4 class=\"business-name\">${\n          business.businessName || business.business_name || \"Unknown Business\"\n        }</h4>\n        <div class=\"confidence-score ${scoreClass}\">\n          <span class=\"score-value\">${confidence}%</span>\n          <span class=\"score-label\">Confidence</span>\n        </div>\n      </div>\n      \n      <div class=\"card-body\">\n        <div class=\"contact-info\">\n          <div class=\"info-item\">\n            <span class=\"info-icon\">📍</span>\n            <span class=\"info-text\">${\n              business.address || \"Address not available\"\n            }</span>\n          </div>\n          \n          ${\n            business.phone\n              ? `\n            <div class=\"info-item\">\n              <span class=\"info-icon\">📞</span>\n              <span class=\"info-text\">${business.phone}</span>\n            </div>\n          `\n              : \"\"\n          }\n          \n          ${\n            business.website\n              ? `\n            <div class=\"info-item\">\n              <span class=\"info-icon\">🌐</span>\n              <a href=\"${business.website}\" target=\"_blank\" class=\"info-link\">${business.website}</a>\n            </div>\n          `\n              : \"\"\n          }\n          \n          ${\n            business.email\n              ? `\n            <div class=\"info-item\">\n              <span class=\"info-icon\">✉️</span>\n              <span class=\"info-text\">${business.email}</span>\n            </div>\n          `\n              : \"\"\n          }\n        </div>\n        \n        ${\n          business.scoringRecommendation || business.scoring_recommendation\n            ? `\n          <div class=\"recommendation\">\n            <strong>Recommendation:</strong> ${\n              business.scoringRecommendation || business.scoring_recommendation\n            }\n          </div>\n        `\n            : \"\"\n        }\n      </div>\n    `;\n\n    return card;\n  }\n\n  showInsufficientResults(result) {\n    const resultsContainer = document.getElementById(\"results\");\n    if (!resultsContainer) return;\n\n    resultsContainer.innerHTML = `\n      <div class=\"insufficient-results\">\n        <h3>🎯 Limited Results Found</h3>\n        <p>We found ${result.results?.totalFound || 0} businesses, but only ${\n      result.results?.qualified || 0\n    } met your quality criteria.</p>\n        \n        <div class=\"suggestions\">\n          <h4>💡 Try these improvements:</h4>\n          <ul>\n            <li>Expand your search radius</li>\n            <li>Try different business types (e.g., \"cafe\" instead of \"coffee shop\")</li>\n            <li>Lower the minimum confidence score</li>\n            <li>Try a different location or nearby city</li>\n          </ul>\n        </div>\n        \n        <div class=\"retry-section\">\n          <button onclick=\"prospectProApp.goHome()\" class=\"btn btn-primary\">🔍 Try New Search</button>\n        </div>\n      </div>\n    `;\n    resultsContainer.style.display = \"block\";\n  }\n\n  showError(message) {\n    const resultsContainer = document.getElementById(\"results\");\n    if (!resultsContainer) return;\n\n    resultsContainer.innerHTML = `\n      <div class=\"error-results\">\n        <h3>❌ Search Error</h3>\n        <p>${message}</p>\n        <button onclick=\"prospectProApp.goHome()\" class=\"btn btn-primary\">🔍 Try Again</button>\n      </div>\n    `;\n    resultsContainer.style.display = \"block\";\n  }\n\n  async exportResults() {\n    if (!this.lastSearchCampaignId) {\n      this.showNotification(\"No campaign results to export\", \"warning\");\n      return;\n    }\n\n    try {\n      console.log(`📊 Exporting campaign ${this.lastSearchCampaignId}`);\n\n      // Call Supabase Edge Function for export\n      const { data, error } = await this.supabase.functions.invoke(\n        \"campaign-export\",\n        {\n          body: { campaignId: this.lastSearchCampaignId },\n        }\n      );\n\n      if (error) {\n        throw new Error(`Export error: ${error.message}`);\n      }\n\n      // Trigger download\n      const blob = new Blob([data], { type: \"text/csv\" });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = `campaign_${this.lastSearchCampaignId.slice(\n        0,\n        8\n      )}_${new Date().toISOString().slice(0, 10)}.csv`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n\n      this.showNotification(\"Export completed successfully\", \"success\");\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      this.showNotification(\"Export failed: \" + error.message, \"error\");\n    }\n  }\n\n  async exportCampaignLeads(campaignId) {\n    try {\n      console.log(`📊 Exporting campaign ${campaignId}`);\n\n      // Use fetch to call the edge function directly for CSV export\n      const response = await fetch(\n        `${this.supabase.supabaseUrl}/functions/v1/campaign-export/${campaignId}`,\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${this.supabase.supabaseKey}`,\n            Accept: \"text/csv\",\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`Export failed: ${response.statusText}`);\n      }\n\n      const csvData = await response.text();\n      const filename =\n        response.headers\n          .get(\"Content-Disposition\")\n          ?.match(/filename=\"([^\"]+)\"/)?.[1] ||\n        `campaign_${campaignId.slice(0, 8)}.csv`;\n\n      // Trigger download\n      const blob = new Blob([csvData], { type: \"text/csv\" });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n\n      this.showNotification(\"Campaign exported successfully\", \"success\");\n    } catch (error) {\n      console.error(\"Campaign export error:\", error);\n      this.showNotification(\"Export failed: \" + error.message, \"error\");\n    }\n  }\n\n  showNotification(message, type = \"info\") {\n    const notification = document.createElement(\"div\");\n    notification.className = `notification ${type}`;\n    notification.innerHTML = `\n      <span>${message}</span>\n      <button onclick=\"this.parentElement.remove()\">×</button>\n    `;\n\n    // Add to page\n    document.body.appendChild(notification);\n\n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n      if (notification.parentElement) {\n        notification.remove();\n      }\n    }, 5000);\n  }\n\n  updateSessionStats() {\n    // Update current session performance if elements exist\n    const sessionStatsEl = document.getElementById(\"currentSessionStats\");\n    if (!sessionStatsEl) return;\n\n    this.sessionStats = {\n      campaignsRun: 1,\n      totalLeads: this.searchResults.length,\n      avgConfidence:\n        this.searchResults.reduce(\n          (sum, lead) => sum + (lead.optimizedScore || 0),\n          0\n        ) / this.searchResults.length || 0,\n      totalCost: this.searchResults.reduce(\n        (sum, lead) => sum + (lead.validationCost || 0),\n        0\n      ),\n    };\n\n    sessionStatsEl.innerHTML = `\n      <h4>Current Session</h4>\n      <div class=\"stat-grid\">\n        <div class=\"stat-item\">\n          <span class=\"stat-value\">${this.sessionStats.campaignsRun}</span>\n          <span class=\"stat-label\">Campaigns Run</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-value\">${this.sessionStats.totalLeads}</span>\n          <span class=\"stat-label\">Leads Found</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-value\">${this.sessionStats.avgConfidence.toFixed(\n            1\n          )}%</span>\n          <span class=\"stat-label\">Avg Confidence</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-value\">$${this.sessionStats.totalCost.toFixed(\n            2\n          )}</span>\n          <span class=\"stat-label\">Session Cost</span>\n        </div>\n      </div>\n    `;\n  }\n\n  initBusinessCategories() {\n    const categories = [\n      \"restaurant\",\n      \"retail store\",\n      \"professional services\",\n      \"healthcare\",\n      \"automotive\",\n      \"real estate\",\n      \"fitness\",\n      \"beauty salon\",\n      \"legal services\",\n      \"accounting\",\n      \"consulting\",\n      \"technology\",\n      \"marketing agency\",\n      \"dental office\",\n    ];\n\n    const categorySelect = document.getElementById(\"categorySelect\");\n    if (categorySelect) {\n      categories.forEach((category) => {\n        const option = document.createElement(\"option\");\n        option.value = category;\n        option.textContent =\n          category.charAt(0).toUpperCase() + category.slice(1);\n        categorySelect.appendChild(option);\n      });\n\n      categorySelect.onchange = () => {\n        const businessTypeInput = document.getElementById(\"businessType\");\n        if (businessTypeInput) {\n          businessTypeInput.value = categorySelect.value;\n        }\n      };\n    }\n  }\n}\n\n// Initialize the application\nlet prospectProApp;\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  prospectProApp = new ProspectProSupabase();\n});\n"}}},
{"type":"measure","name":"lsp.did_open","count":21,"duration":3.382},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":13,"duration":0.116},
{"type":"mark","name":"lsp.did_open","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index-supabase.html","languageId":"html","version":1,"text":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ProspectPro - Supabase-First Lead Discovery</title>\n    <style>\n      * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n      }\n\n      body {\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n          sans-serif;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        min-height: 100vh;\n        padding: 20px;\n      }\n\n      .container {\n        max-width: 1200px;\n        margin: 0 auto;\n        background: white;\n        border-radius: 20px;\n        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n        overflow: hidden;\n      }\n\n      .header {\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        padding: 30px;\n        text-align: center;\n      }\n\n      .header h1 {\n        font-size: 2.5rem;\n        margin-bottom: 10px;\n        font-weight: 700;\n      }\n\n      .header p {\n        opacity: 0.9;\n        font-size: 1.1rem;\n      }\n\n      .nav-tabs {\n        display: flex;\n        background: #f8f9fa;\n        border-bottom: 1px solid #dee2e6;\n      }\n\n      .nav-tab {\n        flex: 1;\n        padding: 15px 20px;\n        background: none;\n        border: none;\n        cursor: pointer;\n        font-size: 1rem;\n        transition: all 0.3s ease;\n      }\n\n      .nav-tab.active {\n        background: white;\n        border-bottom: 3px solid #667eea;\n        color: #667eea;\n        font-weight: 600;\n      }\n\n      .page-content {\n        padding: 40px;\n        min-height: 500px;\n      }\n\n      .search-form {\n        max-width: 600px;\n        margin: 0 auto;\n      }\n\n      .form-group {\n        margin-bottom: 25px;\n      }\n\n      .form-group label {\n        display: block;\n        margin-bottom: 8px;\n        font-weight: 600;\n        color: #333;\n      }\n\n      .form-group input,\n      .form-group select {\n        width: 100%;\n        padding: 15px;\n        border: 2px solid #e1e5e9;\n        border-radius: 10px;\n        font-size: 1rem;\n        transition: border-color 0.3s ease;\n      }\n\n      .form-group input:focus,\n      .form-group select:focus {\n        outline: none;\n        border-color: #667eea;\n      }\n\n      .quantity-control {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n      }\n\n      .quantity-slider {\n        flex: 1;\n      }\n\n      .quantity-display {\n        background: #667eea;\n        color: white;\n        padding: 10px 20px;\n        border-radius: 25px;\n        font-weight: 600;\n        min-width: 80px;\n        text-align: center;\n      }\n\n      .cost-estimate {\n        background: #f8f9fa;\n        padding: 20px;\n        border-radius: 10px;\n        text-align: center;\n        margin: 20px 0;\n      }\n\n      .cost-estimate h3 {\n        color: #333;\n        margin-bottom: 10px;\n      }\n\n      .cost-amount {\n        font-size: 2rem;\n        font-weight: 700;\n        color: #28a745;\n      }\n\n      .btn {\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        border: none;\n        padding: 15px 30px;\n        border-radius: 10px;\n        font-size: 1.1rem;\n        font-weight: 600;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        width: 100%;\n      }\n\n      .btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);\n      }\n\n      .btn:disabled {\n        opacity: 0.6;\n        cursor: not-allowed;\n        transform: none;\n      }\n\n      .btn-secondary {\n        background: #6c757d;\n        color: white;\n        padding: 10px 20px;\n        font-size: 0.9rem;\n        width: auto;\n      }\n\n      .campaign-progress {\n        display: none;\n        text-align: center;\n        padding: 30px;\n        background: #f8f9fa;\n        border-radius: 10px;\n        margin: 20px 0;\n      }\n\n      .progress-spinner {\n        width: 50px;\n        height: 50px;\n        border: 5px solid #e1e5e9;\n        border-top: 5px solid #667eea;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n        margin: 0 auto 20px;\n      }\n\n      @keyframes spin {\n        0% {\n          transform: rotate(0deg);\n        }\n        100% {\n          transform: rotate(360deg);\n        }\n      }\n\n      .results {\n        display: none;\n        margin-top: 30px;\n      }\n\n      .results-header {\n        background: #f8f9fa;\n        padding: 25px;\n        border-radius: 10px;\n        margin-bottom: 25px;\n      }\n\n      .results-header h3 {\n        color: #333;\n        margin-bottom: 15px;\n      }\n\n      .results-stats {\n        display: flex;\n        gap: 20px;\n        flex-wrap: wrap;\n        margin-bottom: 20px;\n      }\n\n      .stat-item {\n        padding: 10px 15px;\n        background: white;\n        border-radius: 8px;\n        border-left: 4px solid #667eea;\n      }\n\n      .results-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n        gap: 20px;\n      }\n\n      .business-card {\n        background: white;\n        border: 1px solid #e1e5e9;\n        border-radius: 15px;\n        padding: 25px;\n        transition: all 0.3s ease;\n        position: relative;\n      }\n\n      .business-card:hover {\n        transform: translateY(-5px);\n        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);\n      }\n\n      .card-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: 20px;\n      }\n\n      .business-name {\n        color: #333;\n        font-size: 1.2rem;\n        margin: 0;\n        flex: 1;\n        margin-right: 15px;\n      }\n\n      .confidence-score {\n        background: #28a745;\n        color: white;\n        padding: 8px 12px;\n        border-radius: 20px;\n        text-align: center;\n        min-width: 70px;\n      }\n\n      .confidence-score.medium {\n        background: #ffc107;\n        color: #333;\n      }\n\n      .confidence-score.low {\n        background: #dc3545;\n      }\n\n      .score-value {\n        font-weight: 700;\n        font-size: 1.1rem;\n      }\n\n      .score-label {\n        display: block;\n        font-size: 0.8rem;\n        opacity: 0.8;\n      }\n\n      .contact-info {\n        margin-bottom: 15px;\n      }\n\n      .info-item {\n        display: flex;\n        align-items: center;\n        margin-bottom: 10px;\n        gap: 10px;\n      }\n\n      .info-icon {\n        font-size: 1.2rem;\n        width: 25px;\n      }\n\n      .info-text {\n        color: #666;\n        word-break: break-word;\n      }\n\n      .info-link {\n        color: #667eea;\n        text-decoration: none;\n      }\n\n      .info-link:hover {\n        text-decoration: underline;\n      }\n\n      .recommendation {\n        background: #e7f3ff;\n        padding: 12px;\n        border-radius: 8px;\n        border-left: 4px solid #667eea;\n        font-size: 0.9rem;\n        color: #333;\n      }\n\n      .notification {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        padding: 15px 20px;\n        border-radius: 10px;\n        background: #28a745;\n        color: white;\n        z-index: 1000;\n        display: flex;\n        align-items: center;\n        gap: 10px;\n        max-width: 400px;\n        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);\n      }\n\n      .notification.warning {\n        background: #ffc107;\n        color: #333;\n      }\n\n      .notification.error {\n        background: #dc3545;\n      }\n\n      .notification button {\n        background: none;\n        border: none;\n        color: inherit;\n        font-size: 1.2rem;\n        cursor: pointer;\n        padding: 0;\n        margin-left: auto;\n      }\n\n      .error-results,\n      .insufficient-results {\n        text-align: center;\n        padding: 40px;\n        background: #f8f9fa;\n        border-radius: 10px;\n      }\n\n      .error-results h3,\n      .insufficient-results h3 {\n        color: #333;\n        margin-bottom: 20px;\n      }\n\n      .suggestions {\n        background: white;\n        padding: 20px;\n        border-radius: 10px;\n        margin: 20px 0;\n        text-align: left;\n      }\n\n      .suggestions ul {\n        list-style-type: none;\n        padding-left: 0;\n      }\n\n      .suggestions li {\n        padding: 8px 0;\n        border-bottom: 1px solid #e1e5e9;\n      }\n\n      .suggestions li:before {\n        content: \"💡 \";\n        margin-right: 10px;\n      }\n\n      .admin-dashboard {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n        gap: 20px;\n        margin-bottom: 30px;\n      }\n\n      .dashboard-card {\n        background: white;\n        padding: 25px;\n        border-radius: 15px;\n        border: 1px solid #e1e5e9;\n        text-align: center;\n      }\n\n      .dashboard-card h3 {\n        color: #333;\n        margin-bottom: 10px;\n      }\n\n      .dashboard-value {\n        font-size: 2rem;\n        font-weight: 700;\n        color: #667eea;\n        margin-bottom: 5px;\n      }\n\n      .dashboard-label {\n        color: #666;\n        font-size: 0.9rem;\n      }\n\n      .recent-campaigns {\n        background: white;\n        border-radius: 15px;\n        padding: 25px;\n        border: 1px solid #e1e5e9;\n      }\n\n      .campaign-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 15px 0;\n        border-bottom: 1px solid #f0f0f0;\n      }\n\n      .campaign-item:last-child {\n        border-bottom: none;\n      }\n\n      .campaign-info {\n        flex: 1;\n      }\n\n      .campaign-info strong {\n        display: block;\n        color: #333;\n        margin-bottom: 5px;\n      }\n\n      .campaign-location,\n      .campaign-date {\n        font-size: 0.9rem;\n        color: #666;\n        margin-right: 15px;\n      }\n\n      .campaign-stats {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n      }\n\n      .campaign-leads,\n      .campaign-cost {\n        font-size: 0.9rem;\n        color: #666;\n      }\n\n      .btn-export {\n        background: #28a745;\n        color: white;\n        border: none;\n        padding: 6px 12px;\n        border-radius: 6px;\n        font-size: 0.8rem;\n        cursor: pointer;\n      }\n\n      @media (max-width: 768px) {\n        .container {\n          margin: 10px;\n          border-radius: 15px;\n        }\n\n        .page-content {\n          padding: 20px;\n        }\n\n        .results-stats {\n          flex-direction: column;\n          gap: 10px;\n        }\n\n        .results-grid {\n          grid-template-columns: 1fr;\n        }\n\n        .campaign-item {\n          flex-direction: column;\n          align-items: flex-start;\n          gap: 10px;\n        }\n\n        .campaign-stats {\n          align-self: stretch;\n          justify-content: space-between;\n        }\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"header\">\n        <h1>🎯 ProspectPro</h1>\n        <p>Supabase-First Lead Discovery Platform</p>\n      </div>\n\n      <div class=\"nav-tabs\">\n        <button\n          class=\"nav-tab active\"\n          onclick=\"prospectProApp?.showPage('discoveryPage'); this.parentElement.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active')); this.classList.add('active')\"\n        >\n          🔍 Discovery\n        </button>\n        <button\n          class=\"nav-tab\"\n          onclick=\"prospectProApp?.showSettings(); this.parentElement.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active')); this.classList.add('active')\"\n        >\n          ⚙️ Dashboard\n        </button>\n      </div>\n\n      <!-- Discovery Page -->\n      <div id=\"discoveryPage\" class=\"page-content\">\n        <div class=\"search-form\">\n          <div class=\"form-group\">\n            <label for=\"businessType\">Business Type</label>\n            <input\n              type=\"text\"\n              id=\"businessType\"\n              placeholder=\"e.g., restaurant, retail store, dental office\"\n            />\n            <select id=\"categorySelect\" style=\"margin-top: 10px\">\n              <option value=\"\">Or choose from common categories...</option>\n            </select>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"location\">Location</label>\n            <input\n              type=\"text\"\n              id=\"location\"\n              placeholder=\"e.g., San Francisco, CA or New York, NY\"\n            />\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"quantity\">Number of Leads</label>\n            <div class=\"quantity-control\">\n              <input\n                type=\"range\"\n                id=\"quantity\"\n                class=\"quantity-slider\"\n                min=\"1\"\n                max=\"20\"\n                value=\"5\"\n              />\n              <div class=\"quantity-display\">\n                <span id=\"quantityDisplay\">5</span> leads\n              </div>\n            </div>\n          </div>\n\n          <div class=\"cost-estimate\">\n            <h3>Estimated Cost</h3>\n            <div class=\"cost-amount\" id=\"estimatedCost\">$0.42</div>\n          </div>\n\n          <button id=\"searchBtn\" class=\"btn\">🚀 Search Businesses</button>\n        </div>\n\n        <!-- Campaign Progress -->\n        <div id=\"campaignProgress\" class=\"campaign-progress\">\n          <div class=\"progress-spinner\"></div>\n          <h3>Discovering businesses...</h3>\n          <p id=\"progressText\">Initializing search parameters...</p>\n        </div>\n\n        <!-- Results Container -->\n        <div id=\"results\" class=\"results\"></div>\n      </div>\n\n      <!-- Settings/Dashboard Page -->\n      <div id=\"settingsPage\" class=\"page-content\" style=\"display: none\">\n        <h2>📊 Dashboard & Statistics</h2>\n\n        <div class=\"admin-dashboard\">\n          <div class=\"dashboard-card\">\n            <h3>Total Campaigns</h3>\n            <div class=\"dashboard-value\" id=\"totalCampaigns\">0</div>\n            <div class=\"dashboard-label\">Completed</div>\n          </div>\n\n          <div class=\"dashboard-card\">\n            <h3>Total Leads</h3>\n            <div class=\"dashboard-value\" id=\"totalLeads\">0</div>\n            <div class=\"dashboard-label\">Discovered</div>\n          </div>\n\n          <div class=\"dashboard-card\">\n            <h3>Avg Confidence</h3>\n            <div class=\"dashboard-value\" id=\"avgConfidence\">0%</div>\n            <div class=\"dashboard-label\">Quality Score</div>\n          </div>\n\n          <div class=\"dashboard-card\">\n            <h3>Total Spent</h3>\n            <div class=\"dashboard-value\" id=\"totalCost\">$0.00</div>\n            <div class=\"dashboard-label\">API Costs</div>\n          </div>\n        </div>\n\n        <div class=\"recent-campaigns\">\n          <h3>📋 Recent Campaigns</h3>\n          <div id=\"recentCampaigns\">\n            <p style=\"text-align: center; color: #666; padding: 20px\">\n              No campaigns yet. Start your first discovery!\n            </p>\n          </div>\n        </div>\n\n        <div id=\"currentSessionStats\" style=\"margin-top: 30px\"></div>\n      </div>\n    </div>\n\n    <!-- Load Supabase-First JavaScript -->\n    <script type=\"module\" src=\"supabase-app-enhanced.js\"></script>\n\n    <script>\n      // Update quantity display when slider changes\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const quantitySlider = document.getElementById(\"quantity\");\n        const quantityDisplay = document.getElementById(\"quantityDisplay\");\n\n        if (quantitySlider && quantityDisplay) {\n          quantitySlider.oninput = () => {\n            quantityDisplay.textContent = quantitySlider.value;\n            // Trigger cost update if app is loaded\n            if (window.prospectProApp) {\n              window.prospectProApp.updateCostEstimate();\n            }\n          };\n        }\n      });\n    </script>\n  </body>\n</html>\n"}}},
{"type":"measure","name":"lsp.did_open","count":22,"duration":0.225},
{"type":"mark","name":"lsp.did_open","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/cloudbuild-static.yaml","languageId":"yaml","version":1,"text":"# Supabase-First Static Deployment Configuration\n# Deploys only static frontend to Cloud Storage + CDN\n\nsteps:\n  # Build static frontend\n  - name: 'node:18'\n    entrypoint: 'npm'\n    args: ['install']\n    \n  - name: 'node:18'\n    entrypoint: 'npm'\n    args: ['run', 'build:static']\n\n  # Deploy to Cloud Storage\n  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'\n    entrypoint: 'gsutil'\n    args: ['-m', 'rsync', '-r', '-d', './dist/', 'gs://prospectpro-static-frontend/']\n\n  # Set public permissions\n  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'\n    entrypoint: 'gsutil'\n    args: ['iam', 'ch', 'allUsers:objectViewer', 'gs://prospectpro-static-frontend']\n\n  # Invalidate CDN cache (if using Cloud CDN)\n  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'\n    entrypoint: 'gcloud'\n    args: ['compute', 'url-maps', 'invalidate-cdn-cache', 'prospectpro-url-map', '--path=\"/*\"', '--async']\n\n# Create Cloud Storage bucket if it doesn't exist\noptions:\n  logging: CLOUD_LOGGING_ONLY\n  \ntimeout: '600s'"}}},
{"type":"measure","name":"lsp.did_open","count":23,"duration":0.033},
{"type":"mark","name":"lsp.did_open","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package-supabase.json","languageId":"json","version":1,"text":"{\n    \"name\": \"prospectpro-supabase-first\",\n    \"version\": \"4.0.0\",\n    \"description\": \"ProspectPro - Supabase-First Lead Discovery Platform\",\n    \"scripts\": {\n        \"build:static\": \"mkdir -p dist && cp public/index-supabase.html dist/index.html && cp public/supabase-app.js dist/app.js\",\n        \"deploy:static\": \"gcloud builds submit --config cloudbuild-static.yaml\",\n        \"serve:local\": \"cd public && python3 -m http.server 8080\",\n        \"test:edge-functions\": \"supabase functions serve\",\n        \"deploy:edge-functions\": \"supabase functions deploy business-discovery && supabase functions deploy campaign-export\",\n        \"db:setup\": \"supabase db reset\",\n        \"db:migrate\": \"supabase migration up\"\n    },\n    \"keywords\": [\n        \"leads\",\n        \"business-discovery\",\n        \"supabase\",\n        \"edge-functions\",\n        \"static-site\"\n    ],\n    \"author\": \"Alex Torelli\",\n    \"license\": \"MIT\",\n    \"dependencies\": {},\n    \"devDependencies\": {},\n    \"engines\": {\n        \"node\": \">=18.0.0\"\n    }\n}"}}},
{"type":"measure","name":"lsp.did_open","count":24,"duration":0.033},
{"type":"mark","name":"lsp.did_open","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DEPLOYMENT_SUCCESS.md","languageId":"markdown","version":1,"text":"# 🚀 ProspectPro Supabase-First Deployment Complete!\n\n## ✅ **DEPLOYMENT STATUS**\n\n### **Edge Functions Deployed:**\n\n- ✅ `business-discovery` - Main business discovery with Google Places API\n- ✅ `campaign-export` - CSV export functionality\n- ✅ Functions are ACTIVE and ready to use\n\n### **Next Steps:**\n\n## 1. **Configure Database Schema**\n\nGo to: https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/sql-editor\n\nRun this SQL to set up the tables:\n\n```sql\n-- Campaigns table\nCREATE TABLE IF NOT EXISTS campaigns (\n  id TEXT PRIMARY KEY,\n  business_type TEXT NOT NULL,\n  location TEXT NOT NULL,\n  target_count INTEGER DEFAULT 10,\n  budget_limit DECIMAL(10,4) DEFAULT 50.0,\n  min_confidence_score INTEGER DEFAULT 50,\n  status TEXT DEFAULT 'pending',\n  results_count INTEGER DEFAULT 0,\n  total_cost DECIMAL(10,4) DEFAULT 0,\n  processing_time_ms INTEGER,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Leads table\nCREATE TABLE IF NOT EXISTS leads (\n  id BIGSERIAL PRIMARY KEY,\n  campaign_id TEXT NOT NULL REFERENCES campaigns(id) ON DELETE CASCADE,\n  business_name TEXT NOT NULL,\n  address TEXT,\n  phone TEXT,\n  website TEXT,\n  email TEXT,\n  confidence_score INTEGER DEFAULT 0,\n  score_breakdown JSONB,\n  validation_cost DECIMAL(10,4) DEFAULT 0,\n  cost_efficient BOOLEAN DEFAULT true,\n  scoring_recommendation TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Enable RLS\nALTER TABLE campaigns ENABLE ROW LEVEL SECURITY;\nALTER TABLE leads ENABLE ROW LEVEL SECURITY;\n\n-- RLS Policies for public access\nCREATE POLICY \"Public read campaigns\" ON campaigns FOR SELECT USING (true);\nCREATE POLICY \"Public insert campaigns\" ON campaigns FOR INSERT WITH CHECK (true);\nCREATE POLICY \"Public read leads\" ON leads FOR SELECT USING (true);\nCREATE POLICY \"Public insert leads\" ON leads FOR INSERT WITH CHECK (true);\n\n-- Indexes\nCREATE INDEX IF NOT EXISTS idx_campaigns_created_at ON campaigns(created_at);\nCREATE INDEX IF NOT EXISTS idx_leads_campaign_id ON leads(campaign_id);\nCREATE INDEX IF NOT EXISTS idx_leads_confidence_score ON leads(confidence_score);\n```\n\n## 2. **Configure Environment Variables**\n\nGo to: https://supabase.com/dashboard/project/sriycekxdqnesdsgwiuc/settings/environment-variables\n\nAdd these secrets:\n\n```\nGOOGLE_PLACES_API_KEY=your_google_places_key_here\nHUNTER_IO_API_KEY=your_hunter_io_key_here\nNEVERBOUNCE_API_KEY=your_neverbounce_key_here\nFOURSQUARE_API_KEY=your_foursquare_key_here\n```\n\n## 3. **Test Edge Functions**\n\n### Test Business Discovery:\n\n```bash\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery' \\\n  -H 'Authorization: Bearer YOUR_ANON_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"businessType\": \"restaurant\",\n    \"location\": \"San Francisco, CA\",\n    \"maxResults\": 3\n  }'\n```\n\n### Test Campaign Export:\n\n```bash\ncurl -X GET 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/campaign-export/CAMPAIGN_ID' \\\n  -H 'Authorization: Bearer YOUR_ANON_KEY' \\\n  -H 'Accept: text/csv'\n```\n\n## 4. **Deploy Static Frontend**\n\nYour frontend files are ready:\n\n- ✅ `/public/index-supabase.html` - Supabase-first frontend\n- ✅ `/public/supabase-app.js` - Frontend JavaScript with Supabase client\n\nUpdate the Supabase configuration in `supabase-app.js`:\n\n```javascript\nthis.supabase = createClient(\n  \"https://sriycekxdqnesdsgwiuc.supabase.co\",\n  \"sb_secret_bY8n_a7-hP0Lxd9dPT_efg_3WzpnXN_\" // Get from Supabase dashboard\n);\n```\n\n## 5. **Cost Comparison**\n\n| Component       | Before                 | After                         |\n| --------------- | ---------------------- | ----------------------------- |\n| **Hosting**     | Cloud Run $10-50/month | Static hosting $1-5/month     |\n| **Backend**     | Express.js server      | Supabase Edge Functions       |\n| **Database**    | Manual integration     | Native Supabase               |\n| **Deployment**  | Docker build 2-5 min   | Function deploy 30 sec        |\n| **Maintenance** | High complexity        | Minimal - managed by Supabase |\n\n## 🎯 **Architecture Benefits**\n\n1. **80% Code Reduction**: From 400+ lines server.js to 50 lines of core logic\n2. **90% Cost Reduction**: Static hosting vs. container hosting\n3. **Global Edge**: Functions run in 18+ regions worldwide\n4. **Auto-scaling**: No cold starts or capacity planning\n5. **Real-time Ready**: Native Supabase real-time subscriptions\n6. **Built-in Auth**: Supabase Auth ready when needed\n\nYour ProspectPro is now running on modern serverless architecture! 🚀\n\n## **Function URLs:**\n\n- Business Discovery: `https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery`\n- Campaign Export: `https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/campaign-export/{campaignId}`\n\nNext: Set up the database schema and environment variables in your Supabase dashboard!\n"}}},
{"type":"measure","name":"lsp.did_open","count":25,"duration":0.088},
{"type":"mark","name":"lsp.did_open","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md","languageId":"markdown","version":1,"text":"# ProspectPro v4.0 - Supabase-First Serverless Architecture\r\n\r\n## CRITICAL: Current Production State\r\n\r\n- **Version**: 4.0.0 (Supabase-First Serverless Architecture - PRODUCTION READY)\r\n- **Deployment**: Static Frontend + Supabase Edge Functions (serverless, auto-scaling)\r\n- **Environment**: Supabase environment variables + Edge Function secrets\r\n- **Architecture**: Supabase-first serverless with Edge Functions + Real-time database\r\n- **Quality Scoring**: v3.0 integrated into Edge Functions with cost optimization\r\n- **Backend**: 100% Supabase Edge Functions (business-discovery, campaign-export)\r\n- **Repository**: https://github.com/Alextorelli/ProspectPro (Supabase-first codebase)\r\n\r\n## CRITICAL: SUPABASE-FIRST ARCHITECTURE\r\n\r\n**DEPLOYMENT PHILOSOPHY**\r\n\r\n- ✅ Supabase Edge Functions: All backend logic (OPERATIONAL)\r\n- ✅ Static Frontend: HTML/JS calling Edge Functions directly (READY)\r\n- ✅ Supabase Database: Native integration with Row Level Security\r\n- ✅ Supabase Real-time: Ready for live updates and notifications\r\n- ✅ Static Hosting: Cloud Storage or CDN (cost-effective)\r\n- ❌ NO server.js, Express.js, or Node.js containers\r\n- ❌ NO Cloud Run containers or complex deployment pipelines\r\n- ✅ Supabase Environment Variables: Native Edge Function configuration\r\n\r\n**PLATFORM SPECIALIZATION**\r\n\r\n- **GitHub**: Minimal repo management, documentation, version control\r\n- **Supabase**: Database, Edge Functions, real-time, authentication, storage\r\n- **Static Host**: Frontend files only (Cloud Storage, Vercel, Netlify)\r\n\r\n## CRITICAL: EDGE FUNCTIONS STATUS\r\n\r\n**PRODUCTION EDGE FUNCTIONS (OPERATIONAL)**\r\n\r\n- ✅ `business-discovery` - Main business discovery with Google Places API integration\r\n- ✅ `campaign-export` - CSV export functionality with database integration\r\n- ✅ Real-time database integration with campaigns and leads tables\r\n- ✅ Global edge deployment with <100ms cold starts\r\n- ✅ Functions URL: https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/\r\n\r\n**DATABASE INTEGRATION**\r\n\r\nCore tables managed by Supabase:\r\n\r\n```sql\r\n-- Campaigns table for tracking discovery sessions\r\nCREATE TABLE campaigns (\r\n  id TEXT PRIMARY KEY,\r\n  business_type TEXT NOT NULL,\r\n  location TEXT NOT NULL,\r\n  target_count INTEGER DEFAULT 10,\r\n  results_count INTEGER DEFAULT 0,\r\n  total_cost DECIMAL(10,4) DEFAULT 0,\r\n  created_at TIMESTAMPTZ DEFAULT NOW()\r\n);\r\n\r\n-- Leads table for storing discovered businesses\r\nCREATE TABLE leads (\r\n  id BIGSERIAL PRIMARY KEY,\r\n  campaign_id TEXT REFERENCES campaigns(id),\r\n  business_name TEXT NOT NULL,\r\n  address TEXT,\r\n  phone TEXT,\r\n  website TEXT,\r\n  email TEXT,\r\n  confidence_score INTEGER DEFAULT 0,\r\n  created_at TIMESTAMPTZ DEFAULT NOW()\r\n);\r\n```\r\n\r\n## CRITICAL: REPOSITORY CLEANLINESS ENFORCEMENT\r\n\r\n**CLEAN SUPABASE-FIRST STRUCTURE**\r\n\r\n- ✅ Core production files: Edge Functions, static frontend, database schema\r\n- ✅ `/supabase/functions/` - Edge Function implementations only\r\n- ✅ `/public/` - Static frontend files (HTML, CSS, JS)\r\n- ✅ `/database/` - Schema and migration files\r\n- ❌ NO server.js, Express routes, or Node.js backend files\r\n- ❌ NO Docker containers, Cloud Run configs, or build pipelines\r\n- ❌ NO complex deployment scripts or container orchestration\r\n\r\n**FILE ORGANIZATION RULES**\r\n\r\n- Edge Functions → `/supabase/functions/` folder ONLY\r\n- Frontend → `/public/` folder ONLY\r\n- Database → `/database/` folder ONLY\r\n- Documentation → `/docs/` folder ONLY\r\n- Archive material → `/archive/` folder ONLY\r\n\r\n**SUPABASE-FIRST APPROACH**\r\n\r\n- Main branch = CLEAN Supabase-first architecture\r\n- No legacy server infrastructure\r\n- All backend logic in Edge Functions\r\n- Maintain minimal, serverless structure\r\n\r\n## CRITICAL: DEPLOYMENT STATUS & TROUBLESHOOTING\r\n\r\n**CURRENT DEPLOYMENT STATE**\r\n\r\n- **Vercel URL**: https://prospect-bk0sh7f6l-alex-torellis-projects.vercel.app\r\n- **Edge Functions**: OPERATIONAL (business-discovery tested successfully)\r\n- **Database**: RLS policies configured, test campaign inserted\r\n- **API Keys**: All configured in Supabase Edge Function secrets\r\n- **Anon Key**: Updated to current valid JWT token\r\n\r\n**VERIFIED WORKING COMPONENTS**\r\n\r\n- ✅ Edge Function `business-discovery` returns real business data\r\n- ✅ Database tables created with proper RLS policies\r\n- ✅ API integrations (Google Places, Hunter.io, etc.) configured\r\n- ✅ Vercel deployment successful with public access\r\n- ✅ Supabase authentication working with anon key\r\n\r\n**CRITICAL TROUBLESHOOTING PATTERNS**\r\n\r\n1. **\"Invalid JWT\" / 401 Errors**\r\n\r\n   - **Root Cause**: Anon key mismatch between frontend and Supabase\r\n   - **Solution**: Get current anon key from Supabase dashboard → Settings → API\r\n   - **Update**: Replace anon key in `/public/supabase-app.js` line 9\r\n   - **Redeploy**: `cd public && vercel --prod`\r\n\r\n2. **\"API request failed: 404\" Errors**\r\n\r\n   - **Root Cause**: Database RLS policies blocking anon access\r\n   - **Solution**: Run `/database/rls-setup.sql` in Supabase SQL editor\r\n   - **Verify**: Check policies with `SELECT * FROM campaigns WHERE business_type = 'test'`\r\n\r\n3. **Edge Function Errors**\r\n\r\n   - **Check**: Supabase dashboard → Edge Functions → Logs\r\n   - **Verify**: API keys in Edge Function secrets are configured\r\n   - **Test**: Direct curl to Edge Function with anon Bearer token\r\n\r\n4. **Frontend Not Loading**\r\n   - **Check**: Vercel deployment status and error logs\r\n   - **Verify**: DNS records if using custom domain\r\n   - **Test**: Access via direct Vercel URL first\r\n\r\n**DEBUGGING COMMANDS**\r\n\r\n```bash\r\n# Test Edge Function directly\r\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery' \\\r\n  -H 'Authorization: Bearer CURRENT_ANON_KEY' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\"businessType\": \"coffee shop\", \"location\": \"Seattle, WA\", \"maxResults\": 2}'\r\n\r\n# Check Supabase connection\r\nsupabase functions list\r\n\r\n# Deploy frontend\r\ncd public && vercel --prod\r\n\r\n# Check database permissions\r\n# Run in Supabase SQL editor: SELECT * FROM campaigns LIMIT 1;\r\n```\r\n\r\n**ENVIRONMENT VERIFICATION CHECKLIST**\r\n\r\n- [ ] Anon key in frontend matches Supabase dashboard\r\n- [ ] RLS policies created for campaigns, leads, dashboard_exports tables\r\n- [ ] Edge Function secrets contain: GOOGLE_PLACES_API_KEY, HUNTER_IO_API_KEY, NEVERBOUNCE_API_KEY\r\n- [ ] Database tables exist: campaigns, leads, dashboard_exports\r\n- [ ] Vercel deployment successful and publicly accessible\r\n\r\n## IMMEDIATE CONTEXT (No Re-explanation Needed)\r\n\r\nWhen Alex asks about:\r\n\r\n- **\"Deployment\"** → Supabase Edge Functions + static hosting (serverless)\r\n- **\"Environment setup\"** → Supabase environment variables in dashboard\r\n- **\"Backend functionality\"** → Edge Functions in `/supabase/functions/`\r\n- **\"API integration\"** → All handled in Edge Functions with native Supabase clients\r\n- **\"Database issues\"** → Direct Supabase integration with RLS policies\r\n- **\"Frontend\"** → Static HTML/JS calling Edge Functions directly\r\n- **\"Cost optimization\"** → Static hosting + serverless functions (90% cost reduction)\r\n- **\"Quality scoring\"** → Integrated into Edge Functions\r\n- **\"Export functionality\"** → `campaign-export` Edge Function\r\n- **\"Testing\"** → Direct Edge Function testing via Supabase dashboard\r\n\r\n## IMMEDIATE CONTEXT (No Re-explanation Needed)\r\n\r\nWhen Alex asks about:\r\n\r\n- **\"Deployment\"** → Google Cloud Build automatic triggers (native integration)\r\n- **\"Environment setup\"** → Supabase Vault + Cloud Build substitution variables\r\n- **\"Webhook configuration\"** → 3 production endpoints already implemented (campaign-lifecycle, cost-alert, lead-enrichment)\r\n- **\"API integration\"** → All clients in `/modules/api-clients/` (Google Places, Hunter.io, NeverBounce, Foursquare)\r\n- **\"Database issues\"** → Supabase with comprehensive schema in `/database/`\r\n- **\"Container problems\"** → Multi-stage Dockerfile + Cloud Build optimization\r\n- **\"Cost optimization\"** → Enhanced Quality Scorer v3.0 with cost-efficient validation pipeline\r\n- **\"Quality scoring\"** → `/modules/validators/enhanced-quality-scorer.js` (35-45% qualification rates)\r\n- **\"Build issues\"** → Check Cloud Build logs in Google Cloud Console\r\n- **\"Webhook setup\"** → Follow `/docs/CLOUD_NATIVE_WEBHOOK_SETUP.md`\r\n- **\"Testing\"** → Use `npm run test` or check testing branch\r\n\r\n## ALEX'S TECHNICAL PROFILE\r\n\r\n- **Background**: No coding experience but highly technical\r\n- **AI Dependency**: Relies heavily on AI assistance for debugging and architecture\r\n- **Primary Models**: Claude Sonnet 4.0, GPT-5 occasionally\r\n- **Environment**: GitHub Codespaces exclusively\r\n- **Focus**: Lead generation with zero fake data tolerance\r\n- **Usage Pattern**: Debugging, testing, cloud-native architecture, monitoring\r\n- **Deployment Preference**: Cloud-native platform specialization over complex CI/CD\r\n\r\n## RESPONSE OPTIMIZATION RULES\r\n\r\n1. **NEVER re-explain project architecture** unless specifically asked with \"explain the architecture\"\r\n2. **ALWAYS reference existing files/scripts** for implementation details\r\n3. **PRIORITIZE troubleshooting** over teaching fundamentals\r\n4. **ASSUME familiarity** with ProspectPro's core concepts\r\n5. **FOCUS on immediate problem resolution** not educational content\r\n6. **USE existing npm scripts** rather than creating new implementations\r\n7. **REFERENCE the working production system** rather than theoretical solutions\r\n\r\n## CURRENT PRODUCTION ARCHITECTURE (ESTABLISHED - DO NOT RE-EXPLAIN)\r\n\r\n### **Supabase-First Serverless Pipeline**\r\n\r\n```\r\nStatic Frontend → Supabase Edge Functions → Supabase Database\r\n                                      ↓\r\n                     Supabase Environment Variables → External APIs\r\n                                      ↓\r\n                     Real-time Database Updates → Live Frontend Updates\r\n```\r\n\r\n### **Edge Function Infrastructure (Production Ready)**\r\n\r\n```\r\n/supabase/functions/business-discovery    # Main business discovery logic\r\n/supabase/functions/campaign-export       # CSV export functionality\r\n/public/index-supabase.html              # Static frontend\r\n/public/supabase-app.js                  # Frontend with Supabase client\r\n/database/supabase-first-schema.sql      # Database schema\r\n```\r\n\r\n### File Structure (REFERENCE ONLY)\r\n\r\n```\r\n/supabase/functions/business-discovery/  # Core discovery Edge Function\r\n/supabase/functions/campaign-export/     # Export Edge Function\r\n/public/index-supabase.html              # Static frontend\r\n/public/supabase-app.js                  # Frontend JavaScript\r\n/database/supabase-first-schema.sql      # Database setup\r\n/docs/                                   # Documentation\r\n/archive/                                # Legacy files (deprecated)\r\n```\r\n\r\n### Current Working Commands (USE THESE)\r\n\r\n```bash\r\n# Edge Function deployment\r\nsupabase functions deploy business-discovery\r\nsupabase functions deploy campaign-export\r\n\r\n# Local development\r\ncd public && python3 -m http.server 8080\r\n\r\n# Static deployment\r\nnpm run build:static\r\ngsutil rsync -r ./dist/ gs://prospectpro-static-frontend/\r\n\r\n# Database setup: Run SQL in Supabase dashboard\r\n```\r\n\r\n### API Integration Stack (WORKING)\r\n\r\n- **Google Places API**: Business discovery integrated in Edge Functions\r\n- **Hunter.io**: Email discovery in Edge Functions\r\n- **NeverBounce**: Email verification in Edge Functions\r\n- **Supabase Database**: Native integration with campaigns and leads tables\r\n- **Supabase Real-time**: Ready for live updates and notifications\r\n- **Static Hosting**: Cloud Storage, Vercel, or Netlify deployment\r\n\r\n### MCP Infrastructure (ENHANCED v3.0)\r\n\r\n- **Production Server**: 28 tools for monitoring, database analytics, API testing, filesystem analysis, system diagnostics\r\n- **Development Server**: 8 specialized tools for new API integrations, performance benchmarking, code generation\r\n- **Troubleshooting Server**: 6 specialized tools for Supabase debugging, anon key diagnosis, RLS validation, Edge Function testing\r\n- **Architecture**: Consolidated from 5 servers to 3 optimized servers (70% efficiency improvement)\r\n- **Integration**: Auto-configured in VS Code for AI-enhanced development workflows with systematic debugging\r\n- **Status**: Production-ready with comprehensive test coverage and automated troubleshooting (`npm run test` in `/mcp-servers/`)\r\n\r\n## PROBLEM-SOLVING APPROACH\r\n\r\n### For Environment Issues:\r\n\r\n1. Check Supabase environment variables in dashboard\r\n2. Verify Edge Function deployment status\r\n3. Test Edge Functions via Supabase dashboard\r\n4. Validate database schema and RLS policies\r\n\r\n### For API Issues:\r\n\r\n1. Check Edge Function logs in Supabase dashboard\r\n2. Verify API keys in Supabase environment variables\r\n3. Test individual Edge Functions with curl\r\n4. Review Edge Function error responses\r\n\r\n### For Deployment Issues:\r\n\r\n1. Check Edge Function deployment status: `supabase functions list`\r\n2. Verify static frontend files are correct\r\n3. Test Edge Functions: `supabase functions serve`\r\n4. Check database connectivity and permissions\r\n\r\n### For Database Issues:\r\n\r\n1. Review schema in `/database/supabase-first-schema.sql`\r\n2. Check RLS policies in Supabase dashboard\r\n3. Verify Edge Function database connections\r\n4. Test database queries in Supabase SQL editor\r\n\r\n## CURRENT OPTIMIZATIONS (ALREADY IMPLEMENTED)\r\n\r\n- **Supabase-first architecture** with Edge Functions for all backend logic\r\n- **Static frontend deployment** with minimal hosting costs\r\n- **Enhanced Quality Scoring v3.0** integrated into Edge Functions\r\n- **Global edge deployment** with <100ms cold starts\r\n- **Native database integration** with Row Level Security\r\n- **Real-time capabilities** ready via Supabase subscriptions\r\n- **Cost optimization** through serverless functions (90% cost reduction)\r\n- **Zero-container deployment** with static hosting + Edge Functions\r\n- **Minimal codebase maintenance** with 80% code reduction\r\n\r\n## DEVELOPMENT WORKFLOW (ESTABLISHED)\r\n\r\n1. **Main branch** = Production (Supabase Edge Functions + static frontend)\r\n2. **Edge Functions** = Backend logic deployed to Supabase\r\n3. **Static Frontend** = HTML/JS deployed to static hosting\r\n4. **Database** = Managed entirely by Supabase with RLS\r\n5. **Development** = Local testing with `supabase functions serve`\r\n\r\n## DEBUGGING PATTERNS (OPTIMIZED FOR ALEX)\r\n\r\n**DEPLOYMENT ISSUES (MOST COMMON)**\r\n\r\n1. **Frontend shows \"Discovery Failed: API request failed: 404\"**\r\n\r\n   - Check anon key in `/public/supabase-app.js` matches Supabase dashboard\r\n   - Verify RLS policies exist: run `/database/rls-setup.sql`\r\n   - Test Edge Function directly with curl command above\r\n   - Redeploy frontend after fixes: `cd public && vercel --prod`\r\n\r\n2. **\"Invalid JWT\" in Edge Function logs**\r\n\r\n   - Get fresh anon key from Supabase dashboard → Settings → API\r\n   - Update anon key in frontend and redeploy\r\n   - Verify database permissions with test query\r\n\r\n3. **Edge Functions not responding**\r\n\r\n   - Check Supabase dashboard → Edge Functions → Logs\r\n   - Verify API keys in Edge Function secrets\r\n   - Test individual functions via Supabase dashboard\r\n\r\n4. **Vercel deployment protection/401 errors**\r\n   - Go to Vercel dashboard → Settings → Deployment Protection\r\n   - Disable any password protection or team restrictions\r\n   - Ensure site is publicly accessible\r\n\r\n**SYSTEMATIC DEBUGGING APPROACH**\r\n\r\n1. **Test Edge Function directly** (bypasses frontend issues)\r\n2. **Check database permissions** (RLS policies)\r\n3. **Verify anon key synchronization** (frontend vs Supabase)\r\n4. **Test Vercel deployment** (public access)\r\n5. **Check browser console** for frontend errors\r\n\r\n**WORKING CONFIGURATION REFERENCE**\r\n\r\n- **Edge Function URL**: https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery\r\n- **Current Vercel URL**: https://prospect-bk0sh7f6l-alex-torellis-projects.vercel.app\r\n- **Database Schema**: `/database/rls-setup.sql` (verified working)\r\n- **Frontend Config**: `/public/supabase-app.js` with current anon key\r\n\r\n**ENHANCED MCP TROUBLESHOOTING**\r\n\r\nUse the ProspectPro Troubleshooting MCP Server for systematic debugging:\r\n\r\n```bash\r\n# Start troubleshooting server\r\ncd /workspaces/ProspectPro/mcp-servers\r\nnpm run start:troubleshooting\r\n\r\n# Available tools:\r\n# test_edge_function - Test Supabase Edge Function connectivity and authentication\r\n# validate_database_permissions - Check database RLS policies and permissions\r\n# check_vercel_deployment - Validate Vercel deployment status and configuration\r\n# diagnose_anon_key_mismatch - Compare anon keys between frontend and Supabase\r\n# run_rls_diagnostics - Generate and execute RLS diagnostic queries\r\n# generate_debugging_commands - Create debugging commands for current configuration\r\n```\r\n\r\n**MCP TROUBLESHOOTING WORKFLOW**\r\n\r\n1. **test_edge_function**: Verify backend works independently\r\n2. **validate_database_permissions**: Check RLS policy configuration\r\n3. **diagnose_anon_key_mismatch**: Detect authentication sync issues\r\n4. **check_vercel_deployment**: Validate frontend deployment status\r\n5. **generate_debugging_commands**: Get custom debug scripts for current config\r\n\r\n**LAST RESORT DEBUGGING**\r\n\r\n1. Check Edge Function logs in Supabase dashboard\r\n2. Test database queries directly in Supabase SQL editor\r\n3. Use browser dev tools to inspect network requests\r\n4. Verify all environment variables in Supabase settings\r\n5. Use MCP troubleshooting server for automated diagnosis\r\n\r\n## COST OPTIMIZATION FOCUS\r\n\r\n- **Edge Functions**: Serverless, pay-per-invocation\r\n- **Database**: Supabase included usage, RLS for security\r\n- **Static Hosting**: $1-5/month vs $10-50/month containers\r\n- **No servers**: Zero infrastructure management\r\n\r\n## RESPONSE FORMAT PREFERENCES\r\n\r\n- **Immediate solutions** over explanations\r\n- **Reference existing code** rather than writing new implementations\r\n- **Use established scripts** rather than manual processes\r\n- **Focus on debugging** rather than architecture discussions\r\n- **Provide specific file paths** and command references\r\n- **Assume production system knowledge** unless explicitly asked to explain\r\n\r\n## NEVER REPEAT (SAVE PREMIUM REQUESTS)\r\n\r\n- Supabase-first architecture explanations\r\n- Edge Function setup procedures (automated)\r\n- Static hosting deployment (documented)\r\n- Database schema explanations (in `/database/`)\r\n- Cost optimization strategies (implemented)\r\n- Serverless benefits (established)\r\n\r\nThis instruction set prioritizes rapid problem resolution and eliminates repetitive context discussions to maximize premium request efficiency.\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":26,"duration":0.169},
{"type":"mark","name":"lsp.did_open","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json","languageId":"json","version":1,"text":"{\r\n  \"name\": \"prospectpro-supabase-first\",\r\n  \"version\": \"4.0.0\",\r\n  \"description\": \"ProspectPro - Supabase-First Lead Discovery Platform with Edge Functions\",\r\n  \"scripts\": {\r\n    \"build:static\": \"mkdir -p dist && cp public/index-supabase.html dist/index.html && cp public/supabase-app.js dist/app.js\",\r\n    \"deploy:vercel\": \"cd public && vercel --prod\",\r\n    \"deploy:netlify\": \"cd public && netlify deploy --prod --dir=.\",\r\n    \"deploy:gcs\": \"npm run build:static && gsutil -m rsync -r -d ./dist/ gs://prospectpro-static-frontend/\",\r\n    \"serve:local\": \"cd public && python3 -m http.server 8080\",\r\n    \"test:edge-functions\": \"supabase functions serve\",\r\n    \"deploy:edge-functions\": \"supabase functions deploy business-discovery && supabase functions deploy campaign-export\",\r\n    \"db:setup\": \"echo 'Run SQL from /database/supabase-first-schema.sql in Supabase dashboard'\",\r\n    \"db:status\": \"supabase db status\",\r\n    \"functions:list\": \"supabase functions list\",\r\n    \"functions:logs\": \"supabase functions logs\",\r\n    \"clean\": \"rm -rf dist/ node_modules/ && echo 'Cleaned build artifacts'\",\r\n    \"archive:legacy\": \"mkdir -p archive/legacy-server && mv server.js api/ modules/ docker/ archive/legacy-server/ 2>/dev/null || echo 'Legacy files managed separately'\",\r\n    \"health\": \"echo 'Use Edge Function endpoints for health checks'\",\r\n    \"test\": \"echo 'Test Edge Functions via Supabase dashboard or curl'\",\r\n    \"mcp:install\": \"cd mcp-servers && npm install\",\r\n    \"mcp:test\": \"cd mcp-servers && npm run test\",\r\n    \"mcp:start\": \"cd mcp-servers && npm run start:all\",\r\n    \"mcp:troubleshoot\": \"cd mcp-servers && npm run start:troubleshooting\",\r\n    \"debug:quick\": \"echo 'Common issue: Check anon key sync between frontend and Supabase dashboard'\",\r\n    \"debug:edge-function\": \"echo 'Test Edge Function: curl -X POST https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery -H \\\"Authorization: Bearer YOUR_ANON_KEY\\\" -H \\\"Content-Type: application/json\\\" -d \\\"{\\\\\\\"businessType\\\\\\\": \\\\\\\"test\\\\\\\", \\\\\\\"location\\\\\\\": \\\\\\\"test\\\\\\\"}\\\"'\",\r\n    \"debug:vercel\": \"echo 'Check Vercel deployment: curl -I https://your-vercel-url.vercel.app'\"\r\n  },\r\n  \"keywords\": [\r\n    \"leads\",\r\n    \"business-discovery\",\r\n    \"supabase\",\r\n    \"edge-functions\",\r\n    \"static-site\",\r\n    \"serverless\"\r\n  ],\r\n  \"author\": \"Alex Torelli\",\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {},\r\n  \"devDependencies\": {},\r\n  \"engines\": {\r\n    \"node\": \">=18.0.0\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/Alextorelli/ProspectPro\"\r\n  },\r\n  \"architecture\": {\r\n    \"frontend\": \"Static HTML/JS\",\r\n    \"backend\": \"Supabase Edge Functions\",\r\n    \"database\": \"Supabase PostgreSQL\",\r\n    \"hosting\": \"Static hosting (Cloud Storage/CDN)\",\r\n    \"deployment\": \"Supabase CLI + gsutil\"\r\n  }\r\n}"}}},
{"type":"measure","name":"lsp.did_open","count":27,"duration":0.035},
{"type":"mark","name":"lsp.did_open","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/prospectpro-supabase.code-workspace","languageId":"jsonc","version":1,"text":"{\n  \"folders\": [\n    {\n      \"name\": \"ProspectPro\",\n      \"path\": \".\"\n    }\n  ],\n  \"settings\": {\n    \"files.exclude\": {\n      \"archive/\": true,\n      \"logs/\": true,\n      \"node_modules/\": true,\n      \"dist/\": true,\n      \".git/\": false\n    },\n    \"search.exclude\": {\n      \"archive/\": true,\n      \"logs/\": true,\n      \"node_modules/\": true,\n      \"dist/\": true\n    },\n    \"explorer.fileNesting.enabled\": true,\n    \"explorer.fileNesting.patterns\": {\n      \"*.ts\": \"${capture}.d.ts,${capture}.js,${capture}.js.map\",\n      \"package.json\": \"package-lock.json,yarn.lock,pnpm-lock.yaml\",\n      \"README.md\": \"LICENSE,CHANGELOG.md\"\n    },\n    \"typescript.preferences.includePackageJsonAutoImports\": \"on\",\n    \"typescript.suggest.autoImports\": true,\n    \"editor.formatOnSave\": true,\n    \"editor.codeActionsOnSave\": {\n      \"source.fixAll\": \"explicit\",\n      \"source.organizeImports\": \"explicit\"\n    },\n    \"supabase.projectRef\": \"sriycekxdqnesdsgwiuc\",\n    \"files.associations\": {\n      \"*.sql\": \"sql\"\n    },\n    \"git.ignoreLimitWarning\": true,\n    \"typescript.preferences.importModuleSpecifier\": \"relative\"\n  },\n  \"extensions\": {\n    \"recommendations\": [\n      \"supabase.supabase\",\n      \"ms-vscode.vscode-typescript-next\",\n      \"bradlc.vscode-tailwindcss\",\n      \"esbenp.prettier-vscode\",\n      \"ms-vscode.vscode-json\",\n      \"redhat.vscode-yaml\",\n      \"ms-python.python\",\n      \"github.copilot\",\n      \"github.copilot-chat\",\n      \"ms-vscode.remote-repositories\",\n      \"ms-vscode.remote-containers\"\n    ]\n  },\n  \"tasks\": {\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n      {\n        \"label\": \"Supabase: Serve Functions\",\n        \"type\": \"shell\",\n        \"command\": \"supabase functions serve\",\n        \"group\": \"build\",\n        \"presentation\": {\n          \"echo\": true,\n          \"reveal\": \"always\",\n          \"focus\": false,\n          \"panel\": \"shared\"\n        },\n        \"problemMatcher\": []\n      },\n      {\n        \"label\": \"Supabase: Deploy Functions\",\n        \"type\": \"shell\",\n        \"command\": \"supabase functions deploy business-discovery && supabase functions deploy campaign-export\",\n        \"group\": \"build\",\n        \"presentation\": {\n          \"echo\": true,\n          \"reveal\": \"always\",\n          \"focus\": false,\n          \"panel\": \"shared\"\n        },\n        \"problemMatcher\": []\n      },\n      {\n        \"label\": \"Build Static Site\",\n        \"type\": \"shell\",\n        \"command\": \"npm run build:static\",\n        \"group\": \"build\",\n        \"presentation\": {\n          \"echo\": true,\n          \"reveal\": \"always\",\n          \"focus\": false,\n          \"panel\": \"shared\"\n        },\n        \"problemMatcher\": []\n      },\n      {\n        \"label\": \"Serve Local Development\",\n        \"type\": \"shell\",\n        \"command\": \"npm run serve:local\",\n        \"group\": \"build\",\n        \"presentation\": {\n          \"echo\": true,\n          \"reveal\": \"always\",\n          \"focus\": false,\n          \"panel\": \"shared\"\n        },\n        \"isBackground\": true,\n        \"problemMatcher\": []\n      },\n      {\n        \"label\": \"Deploy to Production\",\n        \"type\": \"shell\",\n        \"command\": \"npm run deploy:static\",\n        \"group\": \"build\",\n        \"presentation\": {\n          \"echo\": true,\n          \"reveal\": \"always\",\n          \"focus\": false,\n          \"panel\": \"shared\"\n        },\n        \"dependsOn\": \"Build Static Site\",\n        \"problemMatcher\": []\n      }\n    ]\n  },\n  \"launch\": {\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n      {\n        \"name\": \"Preview Static Site\",\n        \"type\": \"node\",\n        \"request\": \"launch\",\n        \"program\": \"${workspaceFolder}/public/index-supabase.html\",\n        \"console\": \"integratedTerminal\",\n        \"env\": {\n          \"NODE_ENV\": \"development\"\n        }\n      }\n    ]\n  }\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":28,"duration":0.046},
{"type":"mark","name":"lsp.did_open","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json","languageId":"jsonc","version":1,"text":"{\n  // === SUPABASE-FIRST CONFIGURATION ===\n  \"deno.enable\": true,\n  \"deno.enablePaths\": [\"supabase/functions\"],\n  \"[typescript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"deno.lint\": true,\n  \"deno.unstable\": [\"bare-node-builtins\", \"byonm\", \"sloppy-imports\"],\n  \"supabase.projectRef\": \"sriycekxdqnesdsgwiuc\",\n\n  // === GIT OPTIMIZATIONS ===\n  \"git.ignoreLimitWarning\": true,\n  \"git.autofetch\": true,\n  \"git.confirmSync\": false,\n  \"git.enableSmartCommit\": true,\n  \"git.fetchOnPull\": true,\n  \"git.mergeEditor\": true,\n\n  // === GITHUB COPILOT OPTIMIZATIONS ===\n  \"github.copilot.enable\": {\n    \"*\": true,\n    \"plaintext\": false,\n    \"markdown\": true,\n    \"scminput\": false\n  },\n  \"github.copilot.inlineSuggest.enable\": true,\n  \"github.copilot.chat.welcomeMessage\": \"none\",\n  \"github.copilot.chat.localeOverride\": \"en\",\n  \"github.copilot.chat.historyCount\": 8,\n  \"github.copilot.chat.completionPhrasesEnabled\": false,\n  \"github.copilot.chat.dynamicContextTrailingLength\": 500,\n  \"github.copilot.advanced.setAutoCompletionTriggerThreshold\": 30,\n  \"github.copilot.advanced.connectionTimeout\": 45000,\n\n  // === EDITOR PERFORMANCE OPTIMIZATIONS ===\n  \"editor.minimap.enabled\": false,\n  \"editor.renderWhitespace\": \"none\",\n  \"editor.renderControlCharacters\": false,\n  \"editor.renderLineHighlight\": \"gutter\",\n  \"editor.bracketPairColorization.enabled\": false,\n  \"editor.guides.bracketPairs\": false,\n  \"editor.formatOnSave\": true,\n  \"editor.formatOnPaste\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": \"explicit\",\n    \"source.organizeImports\": \"explicit\"\n  },\n\n  // === WORKBENCH OPTIMIZATIONS ===\n  \"workbench.colorTheme\": \"Default Dark Modern\",\n  \"workbench.list.smoothScrolling\": false,\n  \"workbench.tree.renderIndentGuides\": \"none\",\n  \"workbench.editor.closeOnFileDelete\": true,\n  \"workbench.colorCustomizations\": {\n    \"statusBar.background\": \"#667eea\",\n    \"statusBar.foreground\": \"#ffffff\"\n  },\n\n  // === FILE SYSTEM PERFORMANCE (SUPABASE-FIRST) ===\n  \"files.exclude\": {\n    \"archive/\": true,\n    \"logs/\": true,\n    \"node_modules/\": true,\n    \"dist/\": true,\n    \"server.js\": true,\n    \"api/\": true,\n    \"modules/\": true,\n    \"docker/\": true,\n    \"cloudbuild.yaml\": true,\n    \"Dockerfile\": true,\n    \"docker-compose*.yml\": true,\n    \"**/*.log\": true,\n    \"**/*.tmp\": true,\n    \"**/*.temp\": true\n  },\n\n  \"files.watcherExclude\": {\n    \"**/*.log\": true,\n    \"**/*.tmp\": true,\n    \"**/*.temp\": true,\n    \"**/node_modules/**\": true,\n    \"**/archive/**\": true,\n    \"**/.git/**\": true,\n    \"**/logs/**\": true,\n    \"**/dist/**\": true\n  },\n\n  \"files.autoSave\": \"afterDelay\",\n  \"files.autoSaveDelay\": 1000,\n  \"files.associations\": {\n    \"*.md\": \"markdown\",\n    \"*.sql\": \"sql\",\n    \"*.ts\": \"typescript\",\n    \".copilot-instructions\": \"markdown\"\n  },\n\n  // === SEARCH OPTIMIZATIONS (SUPABASE-FIRST) ===\n  \"search.exclude\": {\n    \"archive/\": true,\n    \"logs/\": true,\n    \"node_modules/\": true,\n    \"dist/\": true,\n    \"server.js\": true,\n    \"api/\": true,\n    \"modules/\": true,\n    \"docker/\": true,\n    \"**/node_modules\": true,\n    \"**/*.log\": true,\n    \"**/*.tmp\": true,\n    \"**/*.temp\": true,\n    \"**/.git\": true,\n    \"**/coverage/**\": true\n  },\n  \"search.searchOnType\": false,\n  \"search.searchOnTypeDebouncePeriod\": 800,\n\n  // === TYPESCRIPT/JAVASCRIPT SETTINGS ===\n  \"typescript.preferences.includePackageJsonAutoImports\": \"on\",\n  \"typescript.suggest.autoImports\": true,\n  \"typescript.preferences.importModuleSpecifier\": \"relative\",\n  \"javascript.updateImportsOnFileMove.enabled\": \"always\",\n  \"javascript.suggest.autoImports\": true,\n  \"js/ts.implicitProjectConfig.checkJs\": false,\n\n  // === EXPLORER NESTING ===\n  \"explorer.fileNesting.enabled\": true,\n  \"explorer.fileNesting.patterns\": {\n    \"*.ts\": \"${capture}.d.ts,${capture}.js,${capture}.js.map\",\n    \"package.json\": \"package-lock.json,yarn.lock,pnpm-lock.yaml,package-supabase.json\",\n    \"README.md\": \"LICENSE,CHANGELOG.md\",\n    \"index-supabase.html\": \"supabase-app.js\"\n  },\n\n  // === MARKDOWN SETTINGS ===\n  \"markdown.preview.breaks\": true,\n  \"markdown.preview.linkify\": true,\n\n  // === TERMINAL OPTIMIZATIONS ===\n  \"terminal.integrated.defaultProfile.linux\": \"bash\",\n  \"terminal.integrated.profiles.linux\": {\n    \"bash\": {\n      \"path\": \"bash\",\n      \"args\": []\n    }\n  },\n  \"terminal.integrated.gpuAcceleration\": \"on\",\n  \"terminal.integrated.scrollback\": 1000,\n\n  // === AI PROJECT CONTEXT (UPDATED FOR SUPABASE) ===\n  \"ai.contextAware\": true,\n  \"ai.projectContext\": {\n    \"type\": \"lead-generation-platform\",\n    \"framework\": \"supabase-edge-functions\",\n    \"frontend\": \"static-html-js\",\n    \"database\": \"supabase-postgresql\",\n    \"apis\": [\"google-places\", \"hunter-io\", \"neverbounce\"],\n    \"deployment\": \"supabase-functions\",\n    \"hosting\": \"static-hosting\"\n  }\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":29,"duration":0.049},
{"type":"mark","name":"lsp.did_open","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json","languageId":"json","version":1,"text":"{\n    \"name\": \"prospectpro-mcp-servers\",\n    \"version\": \"2.1.0\",\n    \"description\": \"Consolidated MCP servers for ProspectPro Supabase-First AI development\",\n    \"main\": \"supabase-production-server.js\",\n    \"scripts\": {\n        \"start:production\": \"node supabase-production-server.js\",\n        \"start:development\": \"node supabase-development-server.js\",\n        \"start:troubleshooting\": \"node supabase-troubleshooting-server.js\",\n        \"start:all\": \"concurrently \\\"npm run start:production\\\" \\\"npm run start:development\\\" \\\"npm run start:troubleshooting\\\"\",\n        \"test\": \"node test-servers.js\",\n        \"validate\": \"npm run test && echo '✅ All Supabase MCP servers validated successfully'\",\n        \"install:deps\": \"npm install\",\n        \"debug:anon-key\": \"echo 'Use troubleshooting server: diagnose_anon_key_mismatch tool'\",\n        \"debug:edge-functions\": \"echo 'Use troubleshooting server: test_edge_function tool'\",\n        \"debug:database\": \"echo 'Use troubleshooting server: validate_database_permissions tool'\"\n    },\n    \"dependencies\": {\n        \"@modelcontextprotocol/sdk\": \"^1.18.2\",\n        \"@supabase/supabase-js\": \"^2.58.0\"\n    },\n    \"devDependencies\": {\n        \"concurrently\": \"^8.2.2\"\n    },\n    \"keywords\": [\n        \"mcp\",\n        \"model-context-protocol\",\n        \"ai\",\n        \"prospectpro\",\n        \"supabase\",\n        \"edge-functions\",\n        \"serverless\"\n    ],\n    \"author\": \"Alex Torelli\",\n    \"license\": \"MIT\"\n}"}}},
{"type":"measure","name":"lsp.did_open","count":30,"duration":0.042},
{"type":"mark","name":"lsp.did_open","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/README.md","languageId":"markdown","version":1,"text":"# 🎯 ProspectPro v4.0 - Supabase-First Lead Discovery Platform\n\n[![Version](https://img.shields.io/badge/version-4.0.0-blue.svg)](https://github.com/Alextorelli/ProspectPro)\n[![Architecture](https://img.shields.io/badge/architecture-Supabase--First-green.svg)](https://supabase.com)\n[![Deployment](https://img.shields.io/badge/deployment-Edge%20Functions-purple.svg)](https://supabase.com/edge-functions)\n[![Cost](https://img.shields.io/badge/hosting-$1--5%2Fmonth-success.svg)](https://cloud.google.com/storage)\n\nModern, serverless lead discovery platform built with Supabase Edge Functions and static hosting.\n\n## 🚀 **Architecture Overview**\n\n```\nStatic Frontend → Supabase Edge Functions → Supabase Database\n                                      ↓\n                     Supabase Environment Variables → External APIs\n                                      ↓\n                     Real-time Database Updates → Live Frontend Updates\n```\n\n### **Core Components**\n\n- 🌐 **Frontend**: Static HTML/JS with Supabase client\n- ⚡ **Backend**: Supabase Edge Functions (TypeScript/Deno)\n- 🗄️ **Database**: Supabase PostgreSQL with RLS\n- 🔑 **Authentication**: Supabase Auth (ready to use)\n- 📁 **Storage**: Supabase Storage (ready to use)\n- 🔄 **Real-time**: Supabase Real-time subscriptions\n\n## 🎯 **Key Features**\n\n- **Zero-Container Deployment** - No Docker, no Cloud Run, just Edge Functions\n- **90% Cost Reduction** - Static hosting vs. container hosting\n- **Global Edge Performance** - <100ms cold starts worldwide\n- **Enhanced Quality Scoring v3.0** - Integrated into Edge Functions\n- **Real-time Updates** - Native Supabase real-time capabilities\n- **Minimal Codebase** - 80% less code than traditional server architecture\n\n## ⚡ **Quick Start**\n\n### **Prerequisites**\n\n- Supabase CLI installed\n- Supabase project: `sriycekxdqnesdsgwiuc`\n- Google Places API key\n- Static hosting service (Cloud Storage, Vercel, Netlify)\n\n### **1. Clone and Setup**\n\n```bash\ngit clone https://github.com/Alextorelli/ProspectPro\ncd ProspectPro\nsupabase link --project-ref sriycekxdqnesdsgwiuc\n```\n\n### **2. Deploy Edge Functions**\n\n```bash\nsupabase functions deploy business-discovery\nsupabase functions deploy campaign-export\n```\n\n### **3. Setup Database**\n\nRun the SQL schema in your Supabase dashboard:\n\n```sql\n-- Copy contents from /database/supabase-first-schema.sql\n```\n\n### **4. Configure Environment**\n\nAdd to Supabase environment variables:\n\n```\nGOOGLE_PLACES_API_KEY=your_key_here\nHUNTER_IO_API_KEY=your_key_here\nNEVERBOUNCE_API_KEY=your_key_here\n```\n\n### **5. Deploy Frontend**\n\n```bash\nnpm run build:static\nnpm run deploy:static\n```\n\n## 📁 **Project Structure**\n\n```\n/supabase/functions/\n├── business-discovery/     # Main discovery Edge Function\n└── campaign-export/        # CSV export Edge Function\n\n/public/\n├── index-supabase.html    # Static frontend\n└── supabase-app.js        # Frontend with Supabase client\n\n/database/\n└── supabase-first-schema.sql  # Database schema\n\n/docs/                     # Documentation\n/archive/                  # Legacy files (deprecated)\n```\n\n## 🔧 **Development**\n\n### **Local Development**\n\n```bash\n# Serve Edge Functions locally\nsupabase functions serve\n\n# Serve frontend locally\nnpm run serve:local\n```\n\n### **Testing Edge Functions**\n\n```bash\n# Test business discovery\ncurl -X POST 'http://localhost:54321/functions/v1/business-discovery' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\": \"restaurant\", \"location\": \"San Francisco, CA\"}'\n\n# Test campaign export\ncurl -X GET 'http://localhost:54321/functions/v1/campaign-export/CAMPAIGN_ID'\n```\n\n## 📊 **API Endpoints**\n\n### **Business Discovery**\n\n```\nPOST https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery\n```\n\n**Request:**\n\n```json\n{\n  \"businessType\": \"restaurant\",\n  \"location\": \"San Francisco, CA\",\n  \"maxResults\": 10,\n  \"budgetLimit\": 50,\n  \"minConfidenceScore\": 50\n}\n```\n\n### **Campaign Export**\n\n```\nGET https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/campaign-export/{campaignId}\n```\n\n## 💰 **Cost Comparison**\n\n| Component       | Before (v3.x)          | After (v4.0)                  |\n| --------------- | ---------------------- | ----------------------------- |\n| **Hosting**     | Cloud Run $10-50/month | Static hosting $1-5/month     |\n| **Backend**     | Express.js server      | Supabase Edge Functions       |\n| **Database**    | Manual integration     | Native Supabase               |\n| **Deployment**  | Docker build 2-5 min   | Function deploy 30 sec        |\n| **Maintenance** | High complexity        | Minimal - managed by Supabase |\n| **Scaling**     | Manual configuration   | Auto-scaling serverless       |\n\n## 🎯 **Key Benefits**\n\n1. **🔥 80% Code Reduction** - From 400+ lines server.js to 50 lines core logic\n2. **💰 90% Cost Reduction** - Static hosting vs. container hosting\n3. **⚡ Global Performance** - Edge Functions in 18+ regions\n4. **🔧 Zero Maintenance** - Supabase manages infrastructure\n5. **📈 Auto-scaling** - No capacity planning required\n6. **🔄 Real-time Ready** - Native subscriptions out of the box\n\n## 🔮 **Next Steps**\n\n- [ ] Enable Supabase Auth for user management\n- [ ] Add real-time lead updates via Supabase subscriptions\n- [ ] Implement Supabase Storage for file uploads\n- [ ] Configure custom domain with SSL\n- [ ] Set up monitoring and analytics\n\n## 📚 **Documentation**\n\n- [Deployment Guide](DEPLOYMENT_SUCCESS.md)\n- [Edge Functions](supabase/functions/)\n- [Database Schema](database/supabase-first-schema.sql)\n- [Frontend Guide](public/)\n\n## 🤝 **Contributing**\n\nThis is a personal project optimized for Supabase-first architecture. For questions or suggestions, please open an issue.\n\n## 📄 **License**\n\nMIT License - see [LICENSE](LICENSE) for details.\n\n---\n\n**Built with ❤️ using Supabase Edge Functions and modern serverless architecture**\n"}}},
{"type":"measure","name":"lsp.did_open","count":31,"duration":0.088},
{"type":"mark","name":"lsp.did_open","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CHANGELOG.md","languageId":"markdown","version":1,"text":"# ProspectPro Changelog\n\nAll notable changes to ProspectPro will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [4.0.0] - 2024-12-19 - Supabase-First Serverless Architecture\n\n### 🚀 **MAJOR ARCHITECTURAL TRANSFORMATION**\n\nComplete migration from container-based architecture to Supabase-first serverless platform.\n\n### Added\n\n- **Supabase Edge Functions**: TypeScript/Deno Edge Functions for all backend logic\n  - `business-discovery` - Main business discovery with Google Places API integration\n  - `campaign-export` - CSV export functionality with database integration\n- **Static Frontend**: HTML/JS with direct Supabase client integration\n- **Supabase Database**: Native PostgreSQL integration with Row Level Security\n- **Global Edge Deployment**: Functions run in 18+ regions with <100ms cold starts\n- **Enhanced Quality Scoring v3.0**: Cost-efficient validation pipeline integrated into Edge Functions\n- **Real-time Capabilities**: Native Supabase real-time subscriptions (ready to use)\n- **Zero-Container Deployment**: No Docker, no Cloud Run, just Edge Functions\n\n### Changed\n\n- **Architecture**: Container-based → Supabase-first serverless\n- **Backend**: Express.js server → Supabase Edge Functions\n- **Database**: Manual integration → Native Supabase with RLS\n- **Deployment**: Docker builds → Function deployment (30 seconds vs. 5 minutes)\n- **Environment**: .env files → Supabase environment variables\n- **Development**: Node.js → TypeScript/Deno Edge Functions\n\n### Removed\n\n- **server.js**: Replaced with Supabase Edge Functions\n- **Express.js dependencies**: No longer needed with Edge Functions\n- **Docker containers**: Static frontend + serverless functions\n- **Cloud Build pipelines**: Simplified to function deployment\n- **Complex environment setup**: Replaced with Supabase environment variables\n\n### Performance\n\n- **90% Cost Reduction**: Static hosting ($1-5/month) vs. Cloud Run ($10-50/month)\n- **80% Code Reduction**: From 400+ lines server.js to 50 lines core logic\n- **10x Faster Deployment**: 30-second function deploys vs. 5-minute container builds\n- **Zero Maintenance**: Supabase manages all infrastructure\n- **Auto-scaling**: No capacity planning or cold start issues\n\n## [3.0.0] - 2025-09-23 (ARCHIVED - Container Architecture)\n\n### Added\n\n- Enhanced schema cache handling for production initialization\n- Graceful degraded mode startup capability\n- Schema cache refresh utilities and automation\n- Comprehensive production diagnostics and monitoring\n- Enhanced Supabase configuration with automatic recovery\n- Production-ready error handling and user guidance\n\n### Changed\n\n- Improved server startup process with detailed error reporting\n- Enhanced database connection testing with cache management\n- Reorganized documentation structure with archive branches\n- Updated production deployment workflow with artifact-based configuration\n\n### Fixed\n\n- Schema cache initialization issues after database updates\n- Production server startup failures during cache refresh\n- Database connectivity issues in production environment\n\n## [2.0.0] - 2025-09-22 (ARCHIVED - Legacy Architecture)\n\n### Added\n\n- Complete production validation system\n- Enhanced deployment pipeline with GitHub Actions\n- Comprehensive database schema with RLS policies\n- Multi-source business discovery with API integrations\n\n### Changed\n\n- Migration to production-ready architecture\n- Enhanced error handling and logging\n- Improved cost tracking and budget management\n\n## [1.0.0] - Initial Release (ARCHIVED)\n\n### Added\n\n- Basic lead generation functionality\n- Supabase database integration\n- Simple web interface\n- Core business discovery features\n"}}},
{"type":"measure","name":"lsp.did_open","count":32,"duration":0.065},
{"type":"mark","name":"lsp.did_open","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/extensions.json","languageId":"jsonc","version":1,"text":"{\n  \"recommendations\": [\n    // Essential Development Tools\n    \"esbenp.prettier-vscode\",\n    \"dbaeumer.vscode-eslint\",\n    \"eamodio.gitlens\",\n\n    // Supabase-First Development Stack\n    \"supabase.supabase-vscode\",\n    \"denoland.vscode-deno\",\n\n    // API Development & Testing\n    \"humao.rest-client\",\n\n    // GitHub & AI Integration\n    \"github.copilot\",\n    \"github.copilot-chat\",\n\n    // Documentation & Configuration\n    \"davidanson.vscode-markdownlint\",\n    \"redhat.vscode-yaml\",\n\n    // TypeScript & Edge Function Development\n    \"ms-vscode.vscode-typescript-next\",\n    \"bradlc.vscode-tailwindcss\"\n  ],\n  \"unwantedRecommendations\": [\n    // Container tools (no longer needed with Supabase Edge Functions)\n    \"ms-azuretools.vscode-docker\",\n\n    // Node.js specific tools (Edge Functions use Deno)\n    \"ms-vscode.js-debug-nightly\",\n\n    // Redundant API testing tools\n    \"rangav.vscode-thunder-client\",\n\n    // Language extensions not used in this project\n    \"vscjava.vscode-java-debug\",\n    \"ms-python.python\"\n  ]\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":33,"duration":0.031},
{"type":"mark","name":"lsp.did_open","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/MIGRATION_COMPLETE.md","languageId":"markdown","version":1,"text":"# 🎉 ProspectPro v4.0 Migration Complete!\n\n## ✅ **TRANSFORMATION SUMMARY**\n\nYour ProspectPro has been successfully transformed from a complex container-based architecture to a modern, cost-effective Supabase-first serverless platform.\n\n## 🚀 **What We've Accomplished**\n\n### **1. ✅ Complete Architecture Migration**\n\n- **FROM**: Complex Node.js/Express server with Docker containers\n- **TO**: Lean Supabase Edge Functions with static frontend\n\n### **2. ✅ Supabase Edge Functions Deployed**\n\n- `business-discovery` - Main business discovery logic (OPERATIONAL)\n- `campaign-export` - CSV export functionality (OPERATIONAL)\n- **URL**: `https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/`\n\n### **3. ✅ Static Frontend Created**\n\n- Modern HTML/JS with Supabase client integration\n- Direct API calls to Edge Functions\n- Ready for deployment to any static hosting service\n\n### **4. ✅ Database Schema Prepared**\n\n- Optimized PostgreSQL schema for Supabase\n- Row Level Security policies configured\n- Campaigns and leads tables with proper relationships\n\n### **5. ✅ Development Environment Modernized**\n\n- VS Code configured for Supabase Edge Function development\n- Deno/TypeScript support for Edge Functions\n- Supabase CLI integrated and authenticated\n- MCP servers updated for new architecture\n\n### **6. ✅ Repository Cleaned Up**\n\n- Updated all configuration files for Supabase-first approach\n- Modernized package.json with static deployment scripts\n- Comprehensive documentation updates\n- Legacy files archived appropriately\n\n## 💰 **Cost Savings Achieved**\n\n| **Metric**          | **Before (v3.x)** | **After (v4.0)** | **Improvement**    |\n| ------------------- | ----------------- | ---------------- | ------------------ |\n| **Monthly Hosting** | $10-50            | $1-5             | **90% cheaper**    |\n| **Deployment Time** | 5 minutes         | 30 seconds       | **10x faster**     |\n| **Code Complexity** | 400+ lines        | 50 lines         | **80% reduction**  |\n| **Maintenance**     | High              | Zero             | **100% automated** |\n\n## 🎯 **Key Benefits Realized**\n\n1. **⚡ Global Performance**: Edge Functions in 18+ regions\n2. **💰 Massive Cost Savings**: 90% reduction in hosting costs\n3. **🔧 Zero Maintenance**: Supabase manages all infrastructure\n4. **📈 Auto-scaling**: No capacity planning required\n5. **🚀 Lightning Deployment**: 30-second function deployments\n6. **🔄 Real-time Ready**: Native subscriptions available\n\n## 📋 **Next Steps (To Complete Setup)**\n\n### **1. Execute Database Schema**\n\n```sql\n-- In Supabase Dashboard → SQL Editor\n-- Copy and paste contents from /database/supabase-first-schema.sql\n```\n\n### **2. Configure Environment Variables**\n\n```\n-- In Supabase Dashboard → Settings → Environment Variables\nGOOGLE_PLACES_API_KEY=your_key_here\nHUNTER_IO_API_KEY=your_key_here\nNEVERBOUNCE_API_KEY=your_key_here\n```\n\n### **3. Deploy Static Frontend**\n\n```bash\nnpm run build:static\nnpm run deploy:static\n```\n\n### **4. Test End-to-End**\n\n```bash\n# Test Edge Functions with your API keys configured\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery' \\\n  -H 'Authorization: Bearer YOUR_ANON_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\": \"restaurant\", \"location\": \"San Francisco, CA\"}'\n```\n\n## 🏆 **Mission Accomplished**\n\n✅ **Zero-container deployment**  \n✅ **90% cost reduction**  \n✅ **10x faster deployments**  \n✅ **Global edge performance**  \n✅ **Minimal maintenance required**  \n✅ **Modern serverless architecture**\n\n**Welcome to the future of serverless lead discovery! 🚀**\n\nYour ProspectPro is now running on cutting-edge Supabase infrastructure with world-class performance and minimal costs.\n\n## 📞 **Support**\n\n- **Edge Function Logs**: Supabase Dashboard → Functions → Logs\n- **Database Management**: Supabase Dashboard → SQL Editor\n- **Environment Config**: Supabase Dashboard → Settings → Environment Variables\n- **Documentation**: README.md, DEPLOYMENT_SUCCESS.md\n\n**Congratulations on completing the migration to ProspectPro v4.0! 🎊**\n"}}},
{"type":"measure","name":"lsp.did_open","count":34,"duration":0.064},
{"type":"mark","name":"lsp.did_open","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DOMAIN_DEPLOYMENT_GUIDE.md","languageId":"markdown","version":1,"text":"# 🌐 ProspectPro Domain Deployment Guide\n\n## 🚀 **Quick Deploy to Your Custom Domain**\n\n### **Option 1: Vercel (RECOMMENDED) - 5 minutes**\n\n**1. Install Vercel CLI:**\n\n```bash\nnpm install -g vercel\n```\n\n**2. Deploy your frontend:**\n\n```bash\nnpm run deploy:vercel\n```\n\n**3. Add your custom domain:**\n\n- Go to [vercel.com/dashboard](https://vercel.com/dashboard)\n- Select your ProspectPro project\n- Go to Settings → Domains\n- Add your domain (e.g., `app.yourdomain.com` or `prospectpro.yourdomain.com`)\n- Follow DNS instructions to point your domain to Vercel\n\n**4. Domain DNS Setup:**\nAdd these records to your domain DNS:\n\n```\nType: CNAME\nName: app (or prospectpro, or www)\nValue: cname.vercel-dns.com\n```\n\n**✅ Result:** Your ProspectPro will be live at `https://app.yourdomain.com` with automatic SSL!\n\n---\n\n### **Option 2: Netlify - 10 minutes**\n\n**1. Install Netlify CLI:**\n\n```bash\nnpm install -g netlify-cli\n```\n\n**2. Deploy:**\n\n```bash\nnpm run deploy:netlify\n```\n\n**3. Custom Domain:**\n\n- Go to [app.netlify.com](https://app.netlify.com)\n- Select your site → Domain Management → Add custom domain\n- Add your domain and follow DNS instructions\n\n**DNS Setup:**\n\n```\nType: CNAME\nName: app\nValue: your-site-name.netlify.app\n```\n\n---\n\n### **Option 3: Cloudflare Pages - 15 minutes**\n\n**1. Connect GitHub:**\n\n- Go to [pages.cloudflare.com](https://pages.cloudflare.com)\n- Connect your GitHub account\n- Select ProspectPro repository\n\n**2. Build Settings:**\n\n- Build command: `mkdir -p dist && cp public/* dist/`\n- Build output directory: `dist`\n\n**3. Custom Domain:**\n\n- Add custom domain in Cloudflare Pages dashboard\n- Update your domain nameservers to Cloudflare\n\n---\n\n### **Option 4: Google Cloud Storage (Budget Option)**\n\n**1. Use existing deployment:**\n\n```bash\n# You already have this set up!\nnpm run deploy:gcs\n```\n\n**2. Configure domain:**\n\n```bash\n# Add CNAME record in your DNS:\n# app.yourdomain.com → c.storage.googleapis.com\n```\n\n**3. Update bucket for domain:**\n\n```bash\ngsutil web set -m index.html -e 404.html gs://prospectpro-static-frontend\n```\n\n---\n\n## 🎯 **Which Option Should You Choose?**\n\n| **Platform**   | **Setup Time** | **Cost** | **Performance** | **Features** | **Best For**     |\n| -------------- | -------------- | -------- | --------------- | ------------ | ---------------- |\n| **Vercel**     | 5 min          | FREE     | ⭐⭐⭐⭐⭐      | ⭐⭐⭐⭐⭐   | **Recommended**  |\n| **Netlify**    | 10 min         | FREE     | ⭐⭐⭐⭐        | ⭐⭐⭐⭐⭐   | Form handling    |\n| **Cloudflare** | 15 min         | FREE     | ⭐⭐⭐⭐⭐      | ⭐⭐⭐⭐     | Maximum speed    |\n| **GCS**        | 2 min          | $1-5/mo  | ⭐⭐⭐          | ⭐⭐         | Budget conscious |\n\n## 🔒 **SSL Certificate Setup**\n\nAll platforms provide **automatic HTTPS/SSL certificates** - no manual setup required!\n\nYour site will automatically be available at:\n\n- ✅ `https://app.yourdomain.com` (secure)\n- ❌ `http://app.yourdomain.com` (redirects to HTTPS)\n\n## 📊 **Performance Optimization**\n\nAll your static files are already optimized:\n\n- ✅ **Minified CSS** in your HTML\n- ✅ **Optimized JavaScript** with Supabase client\n- ✅ **Fast Edge Functions** via Supabase global network\n- ✅ **CDN-ready** static assets\n\n## 🧪 **Testing Your Deployment**\n\nAfter deploying to any platform:\n\n```bash\n# Test your live site\ncurl -I https://app.yourdomain.com\n\n# Expected response:\n# HTTP/2 200\n# content-type: text/html\n# cache-control: public, max-age=...\n# x-vercel-cache: MISS (or similar CDN headers)\n```\n\n## 🎯 **Subdomain Recommendations**\n\nChoose a subdomain that fits your brand:\n\n- ✅ `app.yourdomain.com` - Professional\n- ✅ `prospects.yourdomain.com` - Descriptive\n- ✅ `leads.yourdomain.com` - Clear purpose\n- ✅ `prospectpro.yourdomain.com` - Branded\n\n## 🚀 **Go Live Checklist**\n\n- [ ] Choose hosting platform (recommend Vercel)\n- [ ] Deploy frontend with custom domain\n- [ ] Test Edge Functions are accessible\n- [ ] Verify Supabase connection works\n- [ ] Set up environment variables in Supabase\n- [ ] Execute database schema in Supabase dashboard\n- [ ] Test complete lead discovery workflow\n- [ ] Share your live URL! 🎉\n\n## 🆘 **Need Help?**\n\n- **Vercel Issues**: Check [vercel.com/docs](https://vercel.com/docs)\n- **DNS Problems**: Use [whatsmydns.net](https://whatsmydns.net) to check propagation\n- **SSL Issues**: All platforms handle this automatically\n- **Performance**: All platforms include global CDN by default\n\n**Your ProspectPro will be blazing fast on any of these platforms! 🚀**\n\n---\n\n**Next Step**: Choose Vercel and run `npm run deploy:vercel` to get started!\n"}}},
{"type":"measure","name":"lsp.did_open","count":35,"duration":0.068},
{"type":"mark","name":"lsp.did_open","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/deploy-test.html","languageId":"html","version":1,"text":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ProspectPro - Deploying...</title>\n    <style>\n      body {\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n          sans-serif;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        min-height: 100vh;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin: 0;\n        color: white;\n      }\n      .container {\n        text-align: center;\n        padding: 40px;\n        background: rgba(255, 255, 255, 0.1);\n        border-radius: 20px;\n        backdrop-filter: blur(10px);\n      }\n      h1 {\n        font-size: 3rem;\n        margin-bottom: 20px;\n      }\n      p {\n        font-size: 1.2rem;\n        opacity: 0.9;\n      }\n      .status {\n        background: #28a745;\n        padding: 10px 20px;\n        border-radius: 25px;\n        display: inline-block;\n        margin-top: 20px;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>🎯 ProspectPro</h1>\n      <p>Supabase-First Lead Discovery Platform</p>\n      <div class=\"status\">✅ Deployment Successful!</div>\n      <p style=\"margin-top: 30px\">\n        <strong>Edge Functions:</strong>\n        <a\n          href=\"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery\"\n          style=\"color: #fff\"\n          >business-discovery</a\n        >\n        |\n        <a\n          href=\"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/campaign-export\"\n          style=\"color: #fff\"\n          >campaign-export</a\n        >\n      </p>\n      <p style=\"margin-top: 20px; font-size: 0.9rem; opacity: 0.7\">\n        Ready to configure your database schema and environment variables!\n      </p>\n    </div>\n  </body>\n</html>\n"}}},
{"type":"measure","name":"lsp.did_open","count":36,"duration":0.039},
{"type":"mark","name":"lsp.did_open","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/safe-setup.sql","languageId":"sql","version":1,"text":"-- Safe Database Setup for Existing Supabase Project\n-- This script handles existing objects gracefully\n\n-- Drop existing policies first (only if tables exist)\nDO $$\nBEGIN\n  -- Drop campaigns policies if table exists\n  IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'campaigns') THEN\n    DROP POLICY IF EXISTS \"Public read campaigns\" ON campaigns;\n    DROP POLICY IF EXISTS \"Public insert campaigns\" ON campaigns;\n    DROP POLICY IF EXISTS \"Public update campaigns\" ON campaigns;\n  END IF;\n\n  -- Drop leads policies if table exists\n  IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'leads') THEN\n    DROP POLICY IF EXISTS \"Public read leads\" ON leads;\n    DROP POLICY IF EXISTS \"Public insert leads\" ON leads;\n    DROP POLICY IF EXISTS \"Public update leads\" ON leads;\n  END IF;\n\n  -- Drop dashboard_exports policies if table exists\n  IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'dashboard_exports') THEN\n    DROP POLICY IF EXISTS \"Public read exports\" ON dashboard_exports;\n    DROP POLICY IF EXISTS \"Public insert exports\" ON dashboard_exports;\n  END IF;\nEND $$;\n\n-- Campaigns table (safe creation)\nCREATE TABLE IF NOT EXISTS campaigns (\n  id TEXT PRIMARY KEY,\n  business_type TEXT NOT NULL,\n  location TEXT NOT NULL,\n  target_count INTEGER DEFAULT 10,\n  budget_limit DECIMAL(10,4) DEFAULT 50.0,\n  min_confidence_score INTEGER DEFAULT 50,\n  status TEXT DEFAULT 'pending',\n  results_count INTEGER DEFAULT 0,\n  total_cost DECIMAL(10,4) DEFAULT 0,\n  processing_time_ms INTEGER,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Leads table (safe creation)\nCREATE TABLE IF NOT EXISTS leads (\n  id BIGSERIAL PRIMARY KEY,\n  campaign_id TEXT NOT NULL,\n  business_name TEXT NOT NULL,\n  address TEXT,\n  phone TEXT,\n  website TEXT,\n  email TEXT,\n  confidence_score INTEGER DEFAULT 0,\n  score_breakdown JSONB,\n  validation_cost DECIMAL(10,4) DEFAULT 0,\n  cost_efficient BOOLEAN DEFAULT true,\n  scoring_recommendation TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Add foreign key constraint if it doesn't exist\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.table_constraints \n    WHERE constraint_name = 'leads_campaign_id_fkey'\n  ) THEN\n    ALTER TABLE leads ADD CONSTRAINT leads_campaign_id_fkey \n    FOREIGN KEY (campaign_id) REFERENCES campaigns(id) ON DELETE CASCADE;\n  END IF;\nEND $$;\n\n-- Dashboard exports tracking (safe creation)\nCREATE TABLE IF NOT EXISTS dashboard_exports (\n  id BIGSERIAL PRIMARY KEY,\n  campaign_id TEXT,\n  export_type TEXT DEFAULT 'lead_export',\n  file_format TEXT DEFAULT 'csv',\n  row_count INTEGER DEFAULT 0,\n  export_status TEXT DEFAULT 'completed',\n  completed_at TIMESTAMPTZ DEFAULT NOW(),\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Add foreign key constraint for dashboard_exports if it doesn't exist\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.table_constraints \n    WHERE constraint_name = 'dashboard_exports_campaign_id_fkey'\n  ) THEN\n    ALTER TABLE dashboard_exports ADD CONSTRAINT dashboard_exports_campaign_id_fkey \n    FOREIGN KEY (campaign_id) REFERENCES campaigns(id) ON DELETE CASCADE;\n  END IF;\nEND $$;\n\n-- Create indexes (safe creation)\nCREATE INDEX IF NOT EXISTS idx_campaigns_created_at ON campaigns(created_at);\nCREATE INDEX IF NOT EXISTS idx_campaigns_status ON campaigns(status);\nCREATE INDEX IF NOT EXISTS idx_leads_campaign_id ON leads(campaign_id);\nCREATE INDEX IF NOT EXISTS idx_leads_confidence_score ON leads(confidence_score);\nCREATE INDEX IF NOT EXISTS idx_leads_created_at ON leads(created_at);\n\n-- Enable Row Level Security (safe - only if tables exist)\nDO $$\nBEGIN\n  IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'campaigns') THEN\n    ALTER TABLE campaigns ENABLE ROW LEVEL SECURITY;\n  END IF;\n  \n  IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'leads') THEN\n    ALTER TABLE leads ENABLE ROW LEVEL SECURITY;\n  END IF;\n  \n  IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'dashboard_exports') THEN\n    ALTER TABLE dashboard_exports ENABLE ROW LEVEL SECURITY;\n  END IF;\nEND $$;\n\n-- Create fresh RLS Policies for public access\nCREATE POLICY \"Public read campaigns\" ON campaigns \n  FOR SELECT USING (true);\n\nCREATE POLICY \"Public insert campaigns\" ON campaigns \n  FOR INSERT WITH CHECK (true);\n\nCREATE POLICY \"Public update campaigns\" ON campaigns \n  FOR UPDATE USING (true);\n\nCREATE POLICY \"Public read leads\" ON leads \n  FOR SELECT USING (true);\n\nCREATE POLICY \"Public insert leads\" ON leads \n  FOR INSERT WITH CHECK (true);\n\nCREATE POLICY \"Public update leads\" ON leads \n  FOR UPDATE USING (true);\n\nCREATE POLICY \"Public read exports\" ON dashboard_exports \n  FOR SELECT USING (true);\n\nCREATE POLICY \"Public insert exports\" ON dashboard_exports \n  FOR INSERT WITH CHECK (true);\n\n-- Create or replace the timestamp function\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Drop existing triggers if they exist\nDROP TRIGGER IF EXISTS update_campaigns_updated_at ON campaigns;\nDROP TRIGGER IF EXISTS update_leads_updated_at ON leads;\n\n-- Create triggers\nCREATE TRIGGER update_campaigns_updated_at \n  BEFORE UPDATE ON campaigns \n  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();\n\nCREATE TRIGGER update_leads_updated_at \n  BEFORE UPDATE ON leads \n  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();\n\n-- Create or replace analytics view\nCREATE OR REPLACE VIEW campaign_analytics AS\nSELECT \n  c.id,\n  c.business_type,\n  c.location,\n  c.target_count,\n  c.budget_limit,\n  c.total_cost,\n  c.results_count,\n  c.processing_time_ms,\n  COUNT(l.id) as actual_leads,\n  AVG(l.confidence_score) as avg_confidence,\n  SUM(l.validation_cost) as total_validation_cost,\n  COUNT(CASE WHEN l.cost_efficient = true THEN 1 END) as cost_efficient_leads,\n  c.created_at\nFROM campaigns c\nLEFT JOIN leads l ON c.id = l.campaign_id\nGROUP BY c.id, c.business_type, c.location, c.target_count, c.budget_limit, \n         c.total_cost, c.results_count, c.processing_time_ms, c.created_at;\n\n-- Grant permissions (safe)\nGRANT ALL ON campaigns TO postgres, anon, authenticated, service_role;\nGRANT ALL ON leads TO postgres, anon, authenticated, service_role;\nGRANT ALL ON dashboard_exports TO postgres, anon, authenticated, service_role;\nGRANT SELECT ON campaign_analytics TO postgres, anon, authenticated, service_role;\nGRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO postgres, anon, authenticated, service_role;\n\n-- Verification query to confirm setup\nSELECT \n  'campaigns' as table_name, \n  count(*) as row_count \nFROM campaigns\nUNION ALL\nSELECT \n  'leads' as table_name, \n  count(*) as row_count \nFROM leads\nUNION ALL\nSELECT \n  'dashboard_exports' as table_name, \n  count(*) as row_count \nFROM dashboard_exports;"}}},
{"type":"measure","name":"lsp.did_open","count":37,"duration":0.079},
{"type":"mark","name":"lsp.did_open","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/minimal-setup.sql","languageId":"sql","version":1,"text":"-- Minimal Safe Database Setup\n-- Core tables only - no policy conflicts\n\n-- Create campaigns table\nCREATE TABLE IF NOT EXISTS campaigns (\n  id TEXT PRIMARY KEY,\n  business_type TEXT NOT NULL,\n  location TEXT NOT NULL,\n  target_count INTEGER DEFAULT 10,\n  budget_limit DECIMAL(10,4) DEFAULT 50.0,\n  min_confidence_score INTEGER DEFAULT 50,\n  status TEXT DEFAULT 'pending',\n  results_count INTEGER DEFAULT 0,\n  total_cost DECIMAL(10,4) DEFAULT 0,\n  processing_time_ms INTEGER,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Create leads table\nCREATE TABLE IF NOT EXISTS leads (\n  id BIGSERIAL PRIMARY KEY,\n  campaign_id TEXT NOT NULL,\n  business_name TEXT NOT NULL,\n  address TEXT,\n  phone TEXT,\n  website TEXT,\n  email TEXT,\n  confidence_score INTEGER DEFAULT 0,\n  score_breakdown JSONB,\n  validation_cost DECIMAL(10,4) DEFAULT 0,\n  cost_efficient BOOLEAN DEFAULT true,\n  scoring_recommendation TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Create dashboard_exports table\nCREATE TABLE IF NOT EXISTS dashboard_exports (\n  id BIGSERIAL PRIMARY KEY,\n  campaign_id TEXT,\n  export_type TEXT DEFAULT 'lead_export',\n  file_format TEXT DEFAULT 'csv',\n  row_count INTEGER DEFAULT 0,\n  export_status TEXT DEFAULT 'completed',\n  completed_at TIMESTAMPTZ DEFAULT NOW(),\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Add foreign key constraints (safe)\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.table_constraints \n    WHERE constraint_name = 'leads_campaign_id_fkey'\n  ) THEN\n    ALTER TABLE leads ADD CONSTRAINT leads_campaign_id_fkey \n    FOREIGN KEY (campaign_id) REFERENCES campaigns(id) ON DELETE CASCADE;\n  END IF;\n\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.table_constraints \n    WHERE constraint_name = 'dashboard_exports_campaign_id_fkey'\n  ) THEN\n    ALTER TABLE dashboard_exports ADD CONSTRAINT dashboard_exports_campaign_id_fkey \n    FOREIGN KEY (campaign_id) REFERENCES campaigns(id) ON DELETE CASCADE;\n  END IF;\nEND $$;\n\n-- Grant basic permissions to anon and service_role\nGRANT ALL ON campaigns TO anon, service_role;\nGRANT ALL ON leads TO anon, service_role;\nGRANT ALL ON dashboard_exports TO anon, service_role;\nGRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO anon, service_role;\n\n-- Simple verification\nSELECT 'Setup complete. Tables created:' as status;\n\nSELECT \n  table_name,\n  table_type\nFROM information_schema.tables \nWHERE table_name IN ('campaigns', 'leads', 'dashboard_exports')\n  AND table_schema = 'public';"}}},
{"type":"measure","name":"lsp.did_open","count":38,"duration":0.044},
{"type":"mark","name":"lsp.did_open","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/rls-setup.sql","languageId":"sql","version":1,"text":"-- Complete RLS Setup for Public Access\n-- This enables the anon role to work with Edge Functions\n\n-- First, disable RLS temporarily to clear any existing issues\nALTER TABLE campaigns DISABLE ROW LEVEL SECURITY;\nALTER TABLE leads DISABLE ROW LEVEL SECURITY;\nALTER TABLE dashboard_exports DISABLE ROW LEVEL SECURITY;\n\n-- Drop any existing policies\nDROP POLICY IF EXISTS \"Public read campaigns\" ON campaigns;\nDROP POLICY IF EXISTS \"Public insert campaigns\" ON campaigns;\nDROP POLICY IF EXISTS \"Public update campaigns\" ON campaigns;\nDROP POLICY IF EXISTS \"Public read leads\" ON leads;\nDROP POLICY IF EXISTS \"Public insert leads\" ON leads;\nDROP POLICY IF EXISTS \"Public update leads\" ON leads;\nDROP POLICY IF EXISTS \"Public read exports\" ON dashboard_exports;\nDROP POLICY IF EXISTS \"Public insert exports\" ON dashboard_exports;\n\n-- Re-enable RLS\nALTER TABLE campaigns ENABLE ROW LEVEL SECURITY;\nALTER TABLE leads ENABLE ROW LEVEL SECURITY;\nALTER TABLE dashboard_exports ENABLE ROW LEVEL SECURITY;\n\n-- Create comprehensive public policies\nCREATE POLICY \"Enable all for anon users\" ON campaigns\n  FOR ALL USING (true) WITH CHECK (true);\n\nCREATE POLICY \"Enable all for anon users\" ON leads\n  FOR ALL USING (true) WITH CHECK (true);\n\nCREATE POLICY \"Enable all for anon users\" ON dashboard_exports\n  FOR ALL USING (true) WITH CHECK (true);\n\n-- Grant comprehensive permissions\nGRANT ALL ON campaigns TO anon, authenticated, service_role;\nGRANT ALL ON leads TO anon, authenticated, service_role;\nGRANT ALL ON dashboard_exports TO anon, authenticated, service_role;\nGRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO anon, authenticated, service_role;\n\n-- Test the permissions\nINSERT INTO campaigns (id, business_type, location) \nVALUES ('test-campaign-' || extract(epoch from now()), 'test', 'test location')\nON CONFLICT (id) DO NOTHING;\n\n-- Verify setup\nSELECT \n  'RLS enabled and policies created' as status,\n  count(*) as test_campaigns\nFROM campaigns \nWHERE business_type = 'test';"}}},
{"type":"measure","name":"lsp.did_open","count":39,"duration":0.039},
{"type":"mark","name":"lsp.did_open","count":40,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/supabase-troubleshooting-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro Supabase Troubleshooting MCP Server\n * Enhanced debugging and diagnostics for Supabase-first architecture\n */\n\nimport { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n} from \"@modelcontextprotocol/sdk/types.js\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport { exec } from \"child_process\";\nimport fs from \"fs/promises\";\nimport { promisify } from \"util\";\n\nconst execAsync = promisify(exec);\n\nclass SupabaseTroubleshootingServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-supabase-troubleshooting\",\n        version: \"1.0.0\",\n      },\n      {\n        capabilities: {\n          tools: {},\n        },\n      }\n    );\n\n    this.setupToolHandlers();\n  }\n\n  setupToolHandlers() {\n    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({\n      tools: [\n        {\n          name: \"test_edge_function\",\n          description:\n            \"Test Supabase Edge Function connectivity and authentication\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              functionName: {\n                type: \"string\",\n                description: \"Name of the Edge Function to test\",\n                default: \"business-discovery\",\n              },\n              anonKey: {\n                type: \"string\",\n                description: \"Supabase anon key for authentication\",\n              },\n              testPayload: {\n                type: \"object\",\n                description: \"Test payload to send to function\",\n                default: { businessType: \"test\", location: \"test\" },\n              },\n            },\n            required: [\"functionName\", \"anonKey\"],\n          },\n        },\n        {\n          name: \"validate_database_permissions\",\n          description: \"Check database RLS policies and permissions\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              supabaseUrl: {\n                type: \"string\",\n                description: \"Supabase project URL\",\n              },\n              anonKey: {\n                type: \"string\",\n                description: \"Supabase anon key\",\n              },\n            },\n            required: [\"supabaseUrl\", \"anonKey\"],\n          },\n        },\n        {\n          name: \"check_vercel_deployment\",\n          description: \"Validate Vercel deployment status and configuration\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              url: {\n                type: \"string\",\n                description: \"Vercel deployment URL to check\",\n              },\n            },\n            required: [\"url\"],\n          },\n        },\n        {\n          name: \"diagnose_anon_key_mismatch\",\n          description:\n            \"Compare anon keys between frontend and Supabase to detect mismatches\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              frontendPath: {\n                type: \"string\",\n                description: \"Path to frontend file with anon key\",\n                default: \"/workspaces/ProspectPro/public/supabase-app.js\",\n              },\n              expectedAnonKey: {\n                type: \"string\",\n                description: \"Expected anon key from Supabase dashboard\",\n              },\n            },\n            required: [\"expectedAnonKey\"],\n          },\n        },\n        {\n          name: \"run_rls_diagnostics\",\n          description: \"Generate and execute RLS diagnostic queries\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              supabaseUrl: {\n                type: \"string\",\n                description: \"Supabase project URL\",\n              },\n              anonKey: {\n                type: \"string\",\n                description: \"Supabase anon key\",\n              },\n            },\n            required: [\"supabaseUrl\", \"anonKey\"],\n          },\n        },\n        {\n          name: \"generate_debugging_commands\",\n          description:\n            \"Generate curl commands and debugging scripts for current configuration\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              supabaseUrl: {\n                type: \"string\",\n                description: \"Supabase project URL\",\n              },\n              anonKey: {\n                type: \"string\",\n                description: \"Current anon key\",\n              },\n              vercelUrl: {\n                type: \"string\",\n                description: \"Vercel deployment URL\",\n              },\n            },\n            required: [\"supabaseUrl\", \"anonKey\"],\n          },\n        },\n      ],\n    }));\n\n    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      switch (request.params.name) {\n        case \"test_edge_function\":\n          return await this.testEdgeFunction(request.params.arguments);\n        case \"validate_database_permissions\":\n          return await this.validateDatabasePermissions(\n            request.params.arguments\n          );\n        case \"check_vercel_deployment\":\n          return await this.checkVercelDeployment(request.params.arguments);\n        case \"diagnose_anon_key_mismatch\":\n          return await this.diagnoseAnonKeyMismatch(request.params.arguments);\n        case \"run_rls_diagnostics\":\n          return await this.runRlsDiagnostics(request.params.arguments);\n        case \"generate_debugging_commands\":\n          return await this.generateDebuggingCommands(request.params.arguments);\n        default:\n          throw new Error(`Unknown tool: ${request.params.name}`);\n      }\n    });\n  }\n\n  async testEdgeFunction({\n    functionName,\n    anonKey,\n    testPayload = { businessType: \"test\", location: \"test\" },\n  }) {\n    try {\n      const url = `https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/${functionName}`;\n\n      const curlCommand = `curl -X POST '${url}' \\\\\n  -H 'Authorization: Bearer ${anonKey}' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -d '${JSON.stringify(testPayload)}'`;\n\n      const { stdout, stderr } = await execAsync(curlCommand);\n\n      let result;\n      try {\n        result = JSON.parse(stdout);\n      } catch {\n        result = stdout;\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Edge Function Test Results for '${functionName}':\n\nCommand executed:\n${curlCommand}\n\nResponse:\n${JSON.stringify(result, null, 2)}\n\nStatus: ${stderr ? \"ERROR\" : \"SUCCESS\"}\n${stderr ? `Error: ${stderr}` : \"\"}\n\nDiagnostics:\n${this.analyzeEdgeFunctionResponse(result, stderr)}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error testing Edge Function: ${error.message}\n\nThis could indicate:\n1. Network connectivity issues\n2. Invalid anon key\n3. Edge Function not deployed\n4. Supabase project configuration issues`,\n          },\n        ],\n      };\n    }\n  }\n\n  analyzeEdgeFunctionResponse(result, stderr) {\n    if (stderr) {\n      return \"❌ Edge Function call failed - check network and authentication\";\n    }\n\n    if (typeof result === \"object\" && result.code === 401) {\n      return `❌ Authentication failed (401): ${result.message}\nTroubleshooting steps:\n1. Verify anon key is current and valid\n2. Check RLS policies allow anon access\n3. Ensure database tables exist`;\n    }\n\n    if (typeof result === \"object\" && result.success) {\n      return \"✅ Edge Function working correctly - returning successful results\";\n    }\n\n    return \"⚠️ Unexpected response format - may indicate Edge Function errors\";\n  }\n\n  async validateDatabasePermissions({ supabaseUrl, anonKey }) {\n    try {\n      const supabase = createClient(supabaseUrl, anonKey);\n\n      const tests = [\n        { table: \"campaigns\", operation: \"SELECT\" },\n        { table: \"leads\", operation: \"SELECT\" },\n        { table: \"dashboard_exports\", operation: \"SELECT\" },\n      ];\n\n      const results = [];\n\n      for (const test of tests) {\n        try {\n          const { data, error } = await supabase\n            .from(test.table)\n            .select(\"count\", { count: \"exact\" })\n            .limit(1);\n\n          results.push({\n            table: test.table,\n            status: error ? \"FAILED\" : \"SUCCESS\",\n            error: error?.message,\n            count: data ? \"accessible\" : \"not accessible\",\n          });\n        } catch (err) {\n          results.push({\n            table: test.table,\n            status: \"FAILED\",\n            error: err.message,\n          });\n        }\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Database Permissions Validation Results:\n\n${results\n  .map(\n    (r) => `Table: ${r.table}\nStatus: ${r.status}\n${r.error ? `Error: ${r.error}` : \"\"}\n${r.count ? `Access: ${r.count}` : \"\"}\n`\n  )\n  .join(\"\\n\")}\n\nSummary:\n${\n  results.every((r) => r.status === \"SUCCESS\")\n    ? \"✅ All database permissions are correctly configured\"\n    : \"❌ Database permission issues detected - check RLS policies\"\n}\n\nRecommended actions:\n${\n  results.some((r) => r.status === \"FAILED\")\n    ? \"1. Run /database/rls-setup.sql in Supabase SQL editor\\n2. Verify anon key is correct\\n3. Check table existence\"\n    : \"Database permissions are working correctly\"\n}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Database validation failed: ${error.message}\n\nThis indicates:\n1. Invalid Supabase URL or anon key\n2. Network connectivity issues\n3. Supabase project not accessible`,\n          },\n        ],\n      };\n    }\n  }\n\n  async checkVercelDeployment({ url }) {\n    try {\n      const { stdout, stderr } = await execAsync(`curl -I \"${url}\"`);\n\n      const statusCode = stdout.match(/HTTP\\/\\d+\\.?\\d*\\s+(\\d+)/)?.[1];\n      const headers = stdout.split(\"\\n\").filter((line) => line.includes(\": \"));\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Vercel Deployment Check for: ${url}\n\nStatus Code: ${statusCode}\n${\n  statusCode === \"200\"\n    ? \"✅ Deployment accessible\"\n    : `❌ Deployment issue (${statusCode})`\n}\n\nHeaders:\n${headers.slice(0, 10).join(\"\\n\")}\n\nAnalysis:\n${this.analyzeVercelResponse(statusCode, headers)}\n\n${stderr ? `Errors: ${stderr}` : \"\"}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Vercel deployment check failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  analyzeVercelResponse(statusCode, headers) {\n    if (statusCode === \"401\") {\n      return `❌ 401 Unauthorized - Deployment protection is enabled\nFix: Go to Vercel dashboard → Settings → Deployment Protection → Disable`;\n    }\n\n    if (statusCode === \"404\") {\n      return \"❌ 404 Not Found - Deployment URL invalid or site not deployed\";\n    }\n\n    if (statusCode === \"200\") {\n      return \"✅ Deployment is live and accessible\";\n    }\n\n    return `⚠️ Unexpected status code ${statusCode} - check Vercel deployment logs`;\n  }\n\n  async diagnoseAnonKeyMismatch({\n    frontendPath = \"/workspaces/ProspectPro/public/supabase-app.js\",\n    expectedAnonKey,\n  }) {\n    try {\n      const frontendContent = await fs.readFile(frontendPath, \"utf8\");\n      const keyMatch = frontendContent.match(/[\"']eyJ[^\"']+[\"']/);\n      const frontendKey = keyMatch ? keyMatch[0].slice(1, -1) : null;\n\n      const isMatch = frontendKey === expectedAnonKey;\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Anon Key Mismatch Diagnosis:\n\nFrontend key (from ${frontendPath}):\n${frontendKey ? frontendKey.substring(0, 50) + \"...\" : \"NOT FOUND\"}\n\nExpected key (from Supabase dashboard):\n${expectedAnonKey.substring(0, 50)}...\n\nMatch Status: ${isMatch ? \"✅ MATCH\" : \"❌ MISMATCH\"}\n\n${\n  !isMatch\n    ? `\nFix Required:\n1. Update the anon key in ${frontendPath} line ~9\n2. Replace the key with: ${expectedAnonKey}\n3. Redeploy frontend: cd public && vercel --prod\n`\n    : \"No action needed - keys match correctly\"\n}\n\nCurrent frontend anon key location:\nLine: ${\n              frontendContent\n                .split(\"\\n\")\n                .findIndex((line) => line.includes(\"eyJ\")) + 1\n            }`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error reading frontend file: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  async runRlsDiagnostics({ supabaseUrl, anonKey }) {\n    const diagnosticSQL = `\n-- RLS Diagnostics for ProspectPro\nSELECT \n  schemaname,\n  tablename,\n  rowsecurity as rls_enabled,\n  (SELECT count(*) FROM pg_policies WHERE schemaname = 'public' AND tablename = t.tablename) as policy_count\nFROM pg_tables t \nWHERE schemaname = 'public' \n  AND tablename IN ('campaigns', 'leads', 'dashboard_exports');\n\n-- Check specific policies\nSELECT \n  schemaname,\n  tablename, \n  policyname,\n  permissive,\n  roles,\n  cmd\nFROM pg_policies \nWHERE schemaname = 'public' \n  AND tablename IN ('campaigns', 'leads', 'dashboard_exports');\n`;\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: `RLS Diagnostic Queries Generated:\n\nRun these queries in Supabase SQL Editor to diagnose RLS issues:\n\n${diagnosticSQL}\n\nExpected Results:\n- All tables should have rls_enabled = true\n- Each table should have at least 1-3 policies\n- Policies should include anon role permissions\n\nIf any table shows rls_enabled = false or policy_count = 0:\n1. Run /database/rls-setup.sql\n2. Verify policies are created correctly\n3. Check anon role has necessary permissions`,\n        },\n      ],\n    };\n  }\n\n  async generateDebuggingCommands({ supabaseUrl, anonKey, vercelUrl }) {\n    const edgeFunctionUrl = `${supabaseUrl}/functions/v1/business-discovery`;\n\n    const commands = {\n      testEdgeFunction: `curl -X POST '${edgeFunctionUrl}' \\\\\n  -H 'Authorization: Bearer ${anonKey}' \\\\\n  -H 'Content-Type: application/json' \\\\\n  -d '{\"businessType\": \"coffee shop\", \"location\": \"Seattle, WA\", \"maxResults\": 2}'`,\n\n      checkVercelStatus: `curl -I \"${vercelUrl}\"`,\n\n      testSupabaseConnection: `curl -X GET '${supabaseUrl}/rest/v1/campaigns?select=count' \\\\\n  -H 'Authorization: Bearer ${anonKey}' \\\\\n  -H 'apikey: ${anonKey}'`,\n\n      checkEdgeFunctionLogs: `supabase functions logs --project-ref sriycekxdqnesdsgwiuc`,\n\n      deployFrontend: `cd /workspaces/ProspectPro/public && vercel --prod`,\n\n      listEdgeFunctions: `supabase functions list`,\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: `Generated Debugging Commands for Current Configuration:\n\n🔧 Test Edge Function:\n${commands.testEdgeFunction}\n\n🌐 Check Vercel Status:\n${commands.checkVercelStatus}\n\n🗄️ Test Database Connection:\n${commands.testSupabaseConnection}\n\n📋 Check Edge Function Logs:\n${commands.checkEdgeFunctionLogs}\n\n🚀 Redeploy Frontend:\n${commands.deployFrontend}\n\n📊 List Edge Functions:\n${commands.listEdgeFunctions}\n\nConfiguration Used:\n- Supabase URL: ${supabaseUrl}\n- Anon Key: ${anonKey.substring(0, 20)}...\n- Vercel URL: ${vercelUrl || \"Not provided\"}\n\nSave these commands for quick debugging!`,\n        },\n      ],\n    };\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\n      \"ProspectPro Supabase Troubleshooting MCP server running on stdio\"\n    );\n  }\n}\n\nconst server = new SupabaseTroubleshootingServer();\nserver.run().catch(console.error);\n"}}},
{"type":"measure","name":"lsp.did_open","count":40,"duration":5.989},
{"type":"mark","name":"lsp.did_open","count":41,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/mcp-config.json","languageId":"json","version":1,"text":"{\n    \"mcpServers\": {\n        \"prospectpro-production\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"./mcp-servers/supabase-production-server.js\"\n            ],\n            \"cwd\": \"${workspaceFolder}\",\n            \"env\": {}\n        },\n        \"prospectpro-development\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"./mcp-servers/supabase-development-server.js\"\n            ],\n            \"cwd\": \"${workspaceFolder}\",\n            \"env\": {}\n        },\n        \"prospectpro-troubleshooting\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"./mcp-servers/supabase-troubleshooting-server.js\"\n            ],\n            \"cwd\": \"${workspaceFolder}\",\n            \"env\": {}\n        }\n    }\n}"}}},
{"type":"measure","name":"lsp.did_open","count":41,"duration":0.027},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":14,"duration":0.134},
{"type":"mark","name":"lsp.did_open","count":42,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/SUPABASE_TROUBLESHOOTING_GUIDE.md","languageId":"markdown","version":1,"text":"# ProspectPro Supabase Troubleshooting Guide\n\n## 🚨 CRITICAL DEPLOYMENT ISSUES - SYSTEMATIC DEBUGGING\n\n### 1. FRONTEND SHOWS \"Discovery Failed: API request failed: 404\"\n\n**IMMEDIATE DIAGNOSIS**\n\n```bash\n# Run these commands in order to isolate the issue:\n\n# 1. Test Edge Function directly (bypasses frontend)\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery' \\\n  -H 'Authorization: Bearer YOUR_CURRENT_ANON_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\": \"coffee shop\", \"location\": \"Seattle, WA\", \"maxResults\": 2}'\n\n# 2. Check Vercel deployment status\ncurl -I \"https://your-vercel-url.vercel.app\"\n\n# 3. Test database permissions\ncurl -X GET 'https://sriycekxdqnesdsgwiuc.supabase.co/rest/v1/campaigns?select=count' \\\n  -H 'Authorization: Bearer YOUR_CURRENT_ANON_KEY' \\\n  -H 'apikey: YOUR_CURRENT_ANON_KEY'\n```\n\n**ROOT CAUSE ANALYSIS**\n\n- ✅ **Edge Function working + Database accessible + Vercel 200** = Anon key mismatch\n- ❌ **Edge Function 401** = Invalid anon key or RLS policy issue\n- ❌ **Vercel 401** = Deployment protection enabled\n- ❌ **Database 401** = RLS policies not configured\n\n### 2. ANON KEY MISMATCH (MOST COMMON ISSUE)\n\n**DETECTION**\n\n1. Go to Supabase Dashboard → Settings → API\n2. Copy the current **anon/public** key\n3. Check `/public/supabase-app.js` line ~9\n4. Compare keys - they must match EXACTLY\n\n**FIX PROCEDURE**\n\n```bash\n# 1. Update anon key in frontend\n# Edit /public/supabase-app.js line 9 with current key from Supabase dashboard\n\n# 2. Redeploy frontend\ncd /workspaces/ProspectPro/public\nvercel --prod\n\n# 3. Test immediately\ncurl -I \"https://your-new-vercel-url.vercel.app\"\n```\n\n### 3. DATABASE RLS POLICIES NOT CONFIGURED\n\n**SYMPTOMS**\n\n- Edge Function test returns 401 errors\n- Database queries fail with \"new row violates row-level security policy\"\n\n**FIX PROCEDURE**\n\n```sql\n-- Run this in Supabase SQL Editor\n-- Enable RLS and create policies for anon access\n\n-- For campaigns table\nALTER TABLE campaigns ENABLE ROW LEVEL SECURITY;\nCREATE POLICY \"Allow anon select campaigns\" ON campaigns FOR SELECT TO anon USING (true);\nCREATE POLICY \"Allow anon insert campaigns\" ON campaigns FOR INSERT TO anon WITH CHECK (true);\n\n-- For leads table\nALTER TABLE leads ENABLE ROW LEVEL SECURITY;\nCREATE POLICY \"Allow anon select leads\" ON leads FOR SELECT TO anon USING (true);\nCREATE POLICY \"Allow anon insert leads\" ON leads FOR INSERT TO anon WITH CHECK (true);\n\n-- For dashboard_exports table\nALTER TABLE dashboard_exports ENABLE ROW LEVEL SECURITY;\nCREATE POLICY \"Allow anon select dashboard_exports\" ON dashboard_exports FOR SELECT TO anon USING (true);\nCREATE POLICY \"Allow anon insert dashboard_exports\" ON dashboard_exports FOR INSERT TO anon WITH CHECK (true);\n\n-- Test with a simple query\nINSERT INTO campaigns (id, business_type, location) VALUES ('test-' || now(), 'test', 'test');\nSELECT * FROM campaigns WHERE business_type = 'test' LIMIT 1;\n```\n\n### 4. VERCEL DEPLOYMENT PROTECTION\n\n**SYMPTOMS**\n\n- Vercel URL returns 401 Unauthorized\n- Site asks for password or team access\n\n**FIX PROCEDURE**\n\n1. Go to Vercel Dashboard\n2. Select your ProspectPro project\n3. Settings → Deployment Protection\n4. **Disable** any password protection\n5. **Disable** any team-only restrictions\n6. Save changes\n7. Test: `curl -I \"https://your-vercel-url.vercel.app\"`\n\n### 5. EDGE FUNCTIONS NOT RESPONDING\n\n**DIAGNOSIS**\n\n```bash\n# Check Edge Function logs\nsupabase functions logs --project-ref sriycekxdqnesdsgwiuc\n\n# List deployed functions\nsupabase functions list\n\n# Test specific function\nsupabase functions serve business-discovery\n```\n\n**COMMON FIXES**\n\n- **API keys missing**: Add to Supabase Edge Function secrets\n- **Function not deployed**: Run `supabase functions deploy business-discovery`\n- **Wrong project reference**: Verify project ref in logs\n\n### 6. MCP TROUBLESHOOTING SERVER USAGE\n\n**Available Tools**\n\n```bash\n# Install and test MCP troubleshooting server\ncd /workspaces/ProspectPro/mcp-servers\nnpm install\nnpm run start:troubleshooting\n\n# Available MCP tools:\n# - test_edge_function: Test Supabase Edge Function connectivity\n# - validate_database_permissions: Check RLS policies and permissions\n# - check_vercel_deployment: Validate Vercel deployment status\n# - diagnose_anon_key_mismatch: Compare frontend vs Supabase anon keys\n# - run_rls_diagnostics: Generate RLS diagnostic queries\n# - generate_debugging_commands: Create debugging commands for current config\n```\n\n## 🔧 SYSTEMATIC DEBUGGING WORKFLOW\n\n### STEP 1: ISOLATION TEST\n\n```bash\n# Test each component independently\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery' \\\n  -H 'Authorization: Bearer CURRENT_ANON_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\": \"test\", \"location\": \"test\", \"maxResults\": 1}'\n```\n\n**Expected**: JSON response with business data or clear error message\n\n### STEP 2: AUTHENTICATION VERIFICATION\n\n```bash\n# Test database access with current anon key\ncurl -X GET 'https://sriycekxdqnesdsgwiuc.supabase.co/rest/v1/campaigns?select=count' \\\n  -H 'Authorization: Bearer CURRENT_ANON_KEY' \\\n  -H 'apikey: CURRENT_ANON_KEY'\n```\n\n**Expected**: `[{\"count\": N}]` or RLS policy error\n\n### STEP 3: FRONTEND DEPLOYMENT CHECK\n\n```bash\n# Check Vercel deployment accessibility\ncurl -I \"https://your-vercel-url.vercel.app\"\n```\n\n**Expected**: `HTTP/2 200` status\n\n### STEP 4: ANON KEY SYNCHRONIZATION\n\n1. Get current anon key from Supabase Dashboard → Settings → API\n2. Update `/public/supabase-app.js` line 9\n3. Redeploy: `cd public && vercel --prod`\n4. Test new deployment\n\n## 📋 ENVIRONMENT VERIFICATION CHECKLIST\n\n- [ ] **Anon key**: Frontend matches Supabase dashboard exactly\n- [ ] **RLS policies**: Created for campaigns, leads, dashboard_exports tables\n- [ ] **Edge Functions**: business-discovery and campaign-export deployed\n- [ ] **API keys**: Configured in Supabase Edge Function secrets\n- [ ] **Vercel deployment**: Publicly accessible without protection\n- [ ] **Database tables**: campaigns, leads, dashboard_exports exist\n- [ ] **Test data**: At least one test campaign can be inserted/selected\n\n## 🚀 QUICK RECOVERY COMMANDS\n\n```bash\n# Complete reset and redeploy\ncd /workspaces/ProspectPro\n\n# 1. Update anon key (get from Supabase dashboard)\n# Edit /public/supabase-app.js line 9\n\n# 2. Redeploy frontend\ncd public && vercel --prod\n\n# 3. Test Edge Function\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery' \\\n  -H 'Authorization: Bearer NEW_ANON_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\": \"coffee shop\", \"location\": \"Seattle, WA\", \"maxResults\": 1}'\n\n# 4. Test new deployment\ncurl -I \"https://your-new-vercel-url.vercel.app\"\n```\n\n## 📊 SUCCESS INDICATORS\n\n**✅ WORKING SYSTEM**\n\n- Edge Function returns real business data (not errors)\n- Database queries succeed without 401 errors\n- Vercel deployment returns 200 status\n- Frontend loads without console errors\n- Business discovery finds actual businesses\n\n**❌ SYSTEM ISSUES**\n\n- 401 Unauthorized errors from any component\n- \"Invalid JWT\" messages in logs\n- Empty business results or API errors\n- Frontend shows generic error messages\n- Database queries fail with RLS violations\n\n## 🔍 ADVANCED DEBUGGING\n\n### Browser Developer Tools\n\n1. Open browser dev tools (F12)\n2. Go to Network tab\n3. Try business discovery\n4. Check for:\n   - Failed network requests (red)\n   - 401/403 status codes\n   - CORS errors\n   - Missing Authorization headers\n\n### Supabase Dashboard Debugging\n\n1. **Edge Functions** → Logs: Check for runtime errors\n2. **API** → Settings: Verify anon key is current\n3. **SQL Editor**: Test database queries directly\n4. **Authentication** → Settings: Check RLS configuration\n\n### MCP Server Debugging\n\nUse the ProspectPro troubleshooting MCP server tools for automated diagnosis:\n\n- `test_edge_function`: Automated Edge Function testing\n- `validate_database_permissions`: Comprehensive RLS analysis\n- `diagnose_anon_key_mismatch`: Automatic key comparison\n- `generate_debugging_commands`: Custom debug scripts\n\n## 📞 ESCALATION PATH\n\nIf systematic debugging doesn't resolve the issue:\n\n1. **Gather Evidence**\n\n   - Edge Function curl test results\n   - Browser console errors\n   - Supabase Edge Function logs\n   - Current anon key from dashboard\n\n2. **Create Minimal Test Case**\n\n   - Simplest possible business discovery request\n   - Clear reproduction steps\n   - Expected vs actual behavior\n\n3. **Review Architecture**\n   - Confirm Supabase-first architecture is maintained\n   - Verify no legacy Node.js/Express dependencies\n   - Check static hosting configuration\n\n**Remember**: The backend (Edge Functions + Database) should work independently of the frontend. Always test Edge Functions directly first to isolate frontend vs backend issues.\n"}}},
{"type":"measure","name":"lsp.did_open","count":42,"duration":0.098},
{"type":"mark","name":"lsp.did_open","count":43,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-troubleshooting-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * Test script for ProspectPro Troubleshooting MCP Server\n * Validates all troubleshooting tools and functionality\n */\n\nconst { execSync } = require(\"child_process\");\nconst fs = require(\"fs\");\n\nconst COLORS = {\n  GREEN: \"\\x1b[32m\",\n  RED: \"\\x1b[31m\",\n  YELLOW: \"\\x1b[33m\",\n  BLUE: \"\\x1b[34m\",\n  RESET: \"\\x1b[0m\",\n};\n\nconst log = (color, message) =>\n  console.log(`${color}${message}${COLORS.RESET}`);\n\nasync function testTroubleshootingServer() {\n  log(COLORS.BLUE, \"🔧 Testing ProspectPro Troubleshooting MCP Server...\\n\");\n\n  const tests = [\n    {\n      name: \"Server File Exists\",\n      test: () => fs.existsSync(\"./supabase-troubleshooting-server.js\"),\n      fix: \"Create supabase-troubleshooting-server.js in /mcp-servers/\",\n    },\n    {\n      name: \"Dependencies Available\",\n      test: () => {\n        try {\n          const pkg = JSON.parse(fs.readFileSync(\"./package.json\", \"utf8\"));\n          return (\n            pkg.dependencies[\"@modelcontextprotocol/sdk\"] &&\n            pkg.dependencies[\"@supabase/supabase-js\"]\n          );\n        } catch {\n          return false;\n        }\n      },\n      fix: \"Run: npm install @modelcontextprotocol/sdk @supabase/supabase-js\",\n    },\n    {\n      name: \"Server Syntax Valid\",\n      test: () => {\n        try {\n          require(\"./supabase-troubleshooting-server.js\");\n          return true;\n        } catch (error) {\n          log(COLORS.RED, `Syntax error: ${error.message}`);\n          return false;\n        }\n      },\n      fix: \"Check JavaScript syntax in troubleshooting server\",\n    },\n    {\n      name: \"MCP Config Exists\",\n      test: () => fs.existsSync(\"../.vscode/mcp-config.json\"),\n      fix: \"Create .vscode/mcp-config.json with troubleshooting server config\",\n    },\n    {\n      name: \"Package Scripts Updated\",\n      test: () => {\n        const pkg = JSON.parse(fs.readFileSync(\"./package.json\", \"utf8\"));\n        return (\n          pkg.scripts[\"start:troubleshooting\"] &&\n          pkg.scripts[\"start:all\"].includes(\"troubleshooting\")\n        );\n      },\n      fix: \"Update package.json scripts to include troubleshooting server\",\n    },\n  ];\n\n  let passed = 0;\n  let failed = 0;\n\n  for (const test of tests) {\n    try {\n      if (test.test()) {\n        log(COLORS.GREEN, `✅ ${test.name}`);\n        passed++;\n      } else {\n        log(COLORS.RED, `❌ ${test.name}`);\n        log(COLORS.YELLOW, `   Fix: ${test.fix}`);\n        failed++;\n      }\n    } catch (error) {\n      log(COLORS.RED, `❌ ${test.name} - Error: ${error.message}`);\n      log(COLORS.YELLOW, `   Fix: ${test.fix}`);\n      failed++;\n    }\n  }\n\n  log(COLORS.BLUE, `\\n📊 Test Results: ${passed} passed, ${failed} failed`);\n\n  if (failed === 0) {\n    log(COLORS.GREEN, \"🎉 All troubleshooting server tests passed!\");\n    log(COLORS.BLUE, \"\\n🚀 Quick Start Commands:\");\n    log(\n      COLORS.RESET,\n      \"npm run start:troubleshooting  # Start troubleshooting server\"\n    );\n    log(COLORS.RESET, \"npm run start:all             # Start all MCP servers\");\n    log(COLORS.RESET, \"npm run debug:anon-key        # Debug anon key issues\");\n    log(\n      COLORS.RESET,\n      \"npm run debug:edge-functions  # Debug Edge Function issues\"\n    );\n    log(COLORS.RESET, \"npm run debug:database        # Debug database issues\");\n\n    log(COLORS.BLUE, \"\\n🔧 Available MCP Tools:\");\n    log(\n      COLORS.RESET,\n      \"• test_edge_function          - Test Supabase Edge Function connectivity\"\n    );\n    log(\n      COLORS.RESET,\n      \"• validate_database_permissions - Check RLS policies and permissions\"\n    );\n    log(\n      COLORS.RESET,\n      \"• check_vercel_deployment     - Validate Vercel deployment status\"\n    );\n    log(\n      COLORS.RESET,\n      \"• diagnose_anon_key_mismatch  - Compare frontend vs Supabase anon keys\"\n    );\n    log(\n      COLORS.RESET,\n      \"• run_rls_diagnostics         - Generate RLS diagnostic queries\"\n    );\n    log(\n      COLORS.RESET,\n      \"• generate_debugging_commands - Create custom debugging scripts\"\n    );\n\n    return true;\n  } else {\n    log(COLORS.RED, \"❌ Some tests failed. Please fix the issues above.\");\n    return false;\n  }\n}\n\n// Run tests if called directly\nif (require.main === module) {\n  testTroubleshootingServer()\n    .then((success) => process.exit(success ? 0 : 1))\n    .catch((error) => {\n      log(COLORS.RED, `Fatal error: ${error.message}`);\n      process.exit(1);\n    });\n}\n\nmodule.exports = { testTroubleshootingServer };\n"}}},
{"type":"measure","name":"lsp.did_open","count":43,"duration":4.638},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":15,"duration":0.128},
{"type":"mark","name":"lsp.did_open","count":44,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md","languageId":"markdown","version":1,"text":"# ProspectPro Enhanced MCP (Model Context Protocol) Implementation v3.0\n\n## Overview\n\nThis directory contains the **enhanced MCP server implementation** that provides AI assistants with comprehensive access to ProspectPro's data, APIs, diagnostics, and **troubleshooting capabilities**. Version 3.0 adds a specialized troubleshooting server for systematic debugging of Supabase-first deployment issues.\n\n**Architecture**: 3 specialized servers for production, development, and troubleshooting workflows  \n**Tools**: 42 tools total across all servers (6 new troubleshooting tools)  \n**Status**: Production-ready with comprehensive test coverage and automated troubleshooting\n\n## Enhanced MCP Servers v3.0\n\n### 1. Production Server (`supabase-production-server.js`) - **v2.0.0**\n\n**Purpose**: Comprehensive production monitoring, database analytics, system diagnostics, API testing, and filesystem analysis (28 tools)\n\n### 2. Development Server (`supabase-development-server.js`) - **v1.0.0**\n\n**Purpose**: Development utilities, new API integration testing, and performance benchmarking (8 tools)\n\n### 3. 🆕 Troubleshooting Server (`supabase-troubleshooting-server.js`) - **v1.0.0**\n\n**Purpose**: Systematic debugging and diagnosis of Supabase deployment and authentication issues\n\n**Specialized Troubleshooting Capabilities** (6 tools):\n\n#### Supabase Edge Function Testing\n\n- `test_edge_function` - Test Supabase Edge Function connectivity with authentication\n- `generate_debugging_commands` - Create custom curl commands and debugging scripts\n\n#### Database & Authentication Diagnosis\n\n- `validate_database_permissions` - Check RLS policies and anon key permissions\n- `diagnose_anon_key_mismatch` - Compare frontend vs Supabase anon keys\n- `run_rls_diagnostics` - Generate Row Level Security diagnostic queries\n\n#### Deployment Validation\n\n- `check_vercel_deployment` - Validate Vercel deployment status and configuration\n\n**When to Use Troubleshooting Server**:\n\n- Frontend shows \"Discovery Failed\" or \"API request failed: 404\"\n- Edge Functions return 401 Unauthorized errors\n- Database queries fail with RLS violations\n- Vercel deployment returns 401 or access denied\n- Anon key synchronization issues between frontend and Supabase\n\n### 1. Production Server (`production-server.js`) - **v2.0.0**\n\n**Purpose**: Comprehensive production monitoring, database analytics, system diagnostics, API testing, and filesystem analysis\n\n**Enhanced Capabilities** (28 tools):\n\n#### Database Analytics (4 tools)\n\n- Query enhanced leads with advanced filters and analytics\n- Get campaign statistics and performance metrics\n- Analyze lead quality patterns and scoring distribution\n- Retrieve API cost breakdowns and budget analysis\n\n#### System Monitoring (7 tools)\n\n- System health monitoring with Docker integration\n- Diagnostics file analysis and performance tracking\n- Log analysis and error pattern detection\n- Configuration validation across environments\n- Performance reporting with optimization suggestions\n\n#### API Testing (8 tools)\n\n- Test Google Places API with sample queries and rate limiting\n- Test Foursquare Places API integration with caching\n- Test Hunter.io email discovery with validation\n- Verify email deliverability with NeverBounce\n- Simulate complete lead discovery pipeline\n- API cost tracking and quota monitoring\n- Performance benchmarking across API endpoints\n\n#### Filesystem Analysis (6 tools)\n\n- Analyze project structure and architectural patterns\n- Search for code patterns and potential issues\n- Analyze API client implementations for consistency\n- **Critical**: Check for fake data violations (zero tolerance)\n- Analyze error handling patterns across codebase\n- Generate code quality reports\n\n#### Production Monitoring (3 tools)\n\n- Health check endpoints monitoring\n- Production deployment status tracking\n- Real-time system metrics collection\n\n### 2. Development Server (`development-server.js`) - **v1.0.0**\n\n**Purpose**: Development utilities, new API integration testing, and performance benchmarking\n\n**Specialized Capabilities** (8 tools):\n\n#### New API Integration (4 tools)\n\n- Test US Chamber of Commerce API integration\n- Test Better Business Bureau (BBB) API\n- Test LinkedIn Sales Navigator API patterns\n- Test ZoomInfo API integration patterns\n\n#### Development Utilities (2 tools)\n\n- Performance benchmarking across API clients\n- Generate API client templates for new integrations\n\n#### Code Generation (2 tools)\n\n- Generate boilerplate for new API clients\n- Create test suites for API integrations\n\n## Quick Start\n\n```bash\n# Start production monitoring\nnpm run start:production\n\n# Start development server\nnpm run start:development\n\n# Start troubleshooting server (for debugging deployment issues)\nnpm run start:troubleshooting\n\n# Start all servers\nnpm run start:all\n\n# Test all servers\nnpm run test\n```\n\n## 🚨 Quick Troubleshooting (NEW in v3.0)\n\n### Frontend Shows \"Discovery Failed\" or \"API request failed: 404\"\n\n**IMMEDIATE DIAGNOSIS** with MCP Troubleshooting Server:\n\n```bash\nnpm run start:troubleshooting\n```\n\nIn your AI assistant, use these MCP tools in systematic order:\n\n1. `test_edge_function` - Verify backend works independently of frontend\n2. `diagnose_anon_key_mismatch` - Check for authentication sync issues (90% of problems)\n3. `validate_database_permissions` - Verify RLS policies are configured correctly\n4. `check_vercel_deployment` - Validate frontend deployment status\n5. `generate_debugging_commands` - Get custom debugging scripts for your config\n\n**Manual Quick Test** (if MCP not available):\n\n```bash\n# Test Edge Function directly (bypasses frontend completely)\ncurl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery' \\\n  -H 'Authorization: Bearer YOUR_CURRENT_ANON_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"businessType\": \"test\", \"location\": \"test\"}'\n```\n\n**Expected Results**: Real business data response = backend working, frontend issue  \n**If 401 error**: Authentication or RLS policy issue\n\n### 3. VS Code Configuration\n\nThe consolidated MCP configuration is automatically set up in `.vscode/settings.json`:\n\n```json\n{\n  \"mcp.enable\": true,\n  \"mcp.servers\": {\n    \"prospectpro-production\": {\n      \"enabled\": true,\n      \"autoStart\": true,\n      \"description\": \"Enhanced Production Server - 28 tools\"\n    },\n    \"prospectpro-development\": {\n      \"enabled\": true,\n      \"autoStart\": false,\n      \"description\": \"Development Server - 8 specialized tools\"\n    }\n  }\n}\n```\n\n### 4. Environment Requirements\n\nConsolidated servers require the same environment variables as the main application:\n\n- `SUPABASE_URL`: Database connection\n- `SUPABASE_SECRET_KEY`: Database access\n- API keys for external services (Google Places, Hunter.io, NeverBounce, Foursquare)\n- Development server requires additional API keys for new integrations (US Chamber, BBB, etc.)\n\n## Usage Examples\n\n### Database Queries via AI\n\n```\n\"Show me the top 10 leads with confidence scores above 85\"\n\"Analyze lead quality patterns for restaurants in New York\"\n\"What are the API costs for the last 24 hours?\"\n```\n\n### API Testing via AI\n\n```\n\"Test the Google Places API with a search for 'coffee shops in Seattle'\"\n\"Simulate lead discovery for 'restaurants' in 'San Francisco'\"\n\"Verify the email address john@example.com\"\n```\n\n### Codebase Analysis via AI\n\n```\n\"Analyze the project structure and identify key components\"\n\"Check for any fake data generation patterns in the code\"\n\"Find all error handling patterns in API clients\"\n```\n\n### System Monitoring via AI\n\n```\n\"Check the overall system health status\"\n\"Analyze recent application logs for errors\"\n\"Generate a performance report with recommendations\"\n```\n\n## Advanced AI Workflows\n\n### 1. Lead Quality Analysis\n\nAI can now directly query your database to provide insights like:\n\n- \"Which business types have the highest confidence scores?\"\n- \"What's the correlation between email confidence and overall lead quality?\"\n- \"Show me leads that failed validation and why\"\n\n### 2. API Cost Optimization\n\nAI can analyze your API usage patterns:\n\n- \"Which APIs are costing the most money?\"\n- \"Are we approaching any quota limits?\"\n- \"Suggest optimizations to reduce API costs\"\n\n### 3. Code Quality Assurance\n\nAI can continuously monitor code quality:\n\n- \"Are there any patterns that could lead to fake data generation?\"\n- \"Analyze error handling coverage across all modules\"\n- \"Check if all API clients follow the same patterns\"\n\n### 4. System Performance Monitoring\n\nAI can provide system insights:\n\n- \"Is the system performing optimally?\"\n- \"What are the largest files that might be slowing down development?\"\n- \"Are there any configuration issues that need attention?\"\n\n## Consolidated MCP Server Management\n\n### Consolidated Server Commands\n\n```bash\n# Start production server (28 tools - auto-starts with VS Code)\nnpm run start:production\n\n# Start development server (8 tools - manual start)\nnpm run start:development\n\n# Start both servers for comprehensive development\nnpm run start:all\n```\n\n### Server Status Monitoring\n\n```bash\n# Test both consolidated servers\nnpm run test\n\n# Check detailed test results and performance metrics\ncat test-results.json\n\n# Validate specific server capabilities\nnode -e \"console.log(require('./production-server.js').tools.length + ' production tools')\"\nnode -e \"console.log(require('./development-server.js').tools.length + ' development tools')\"\n```\n\n### Performance Benefits\n\n**Consolidation Results**:\n\n- **Servers**: 5 → 2 (60% reduction)\n- **Memory Usage**: ~40% reduction in MCP processes\n- **Startup Time**: ~50% faster initialization\n- **Tools Available**: 36 total (100% preservation)\n- **Test Coverage**: Comprehensive validation suite\n\n## Security Considerations\n\n### Data Access Control\n\n- MCP servers use the same authentication as the main application\n- Database access is limited to read-only operations where appropriate\n- API keys are passed through environment variables only\n\n### AI Context Boundaries\n\n- MCP servers provide structured access to prevent unauthorized operations\n- Each server has defined capabilities and cannot exceed its scope\n- Error handling prevents sensitive information leakage\n\n## Troubleshooting\n\n### Common Issues\n\n1. **MCP Servers Not Starting**\n\n   - Check dependencies: `npm run mcp:install`\n   - Verify environment variables are set\n   - Run tests: `npm run mcp:test`\n\n2. **VS Code Not Recognizing MCP**\n\n   - Restart VS Code after configuration changes\n   - Check `.vscode/mcp-config.json` syntax\n   - Verify MCP is enabled in settings\n\n3. **Database Connection Issues**\n\n   - Check Supabase credentials\n   - Verify database server status\n   - Run diagnostics: `curl http://localhost:3000/diag`\n\n4. **API Testing Failures**\n   - Verify API keys are configured\n   - Check API quota limits\n   - Test individual APIs outside MCP first\n\n## Development Notes\n\n### Adding New MCP Tools\n\n1. Add tool definition to the server's `tools/list` handler\n2. Implement tool execution in `tools/call` handler\n3. Update this documentation\n4. Add tests to `test-servers.js`\n\n### Best Practices\n\n- Keep tools focused on specific functionality\n- Provide detailed error messages\n- Include usage examples in tool descriptions\n- Implement proper error handling and validation\n- Cache expensive operations where appropriate\n\n## Migration from v1.0 (Individual Servers)\n\n### What Changed in v2.0 Consolidation\n\n**Before (v1.0)**:\n\n- 5 separate servers: database, api, filesystem, monitoring, production\n- Complex management and startup procedures\n- Higher memory overhead\n- Context switching between servers\n\n**After (v2.0)**:\n\n- 2 consolidated servers: production (28 tools) + development (8 tools)\n- Simplified management and configuration\n- Optimized resource usage\n- Unified tool access patterns\n\n### Backward Compatibility\n\nAll 36 original tools are preserved with identical functionality. AI workflows continue to work without changes.\n\n### Archived Components\n\nOriginal individual servers are preserved in `/archive/mcp-servers-individual/` for reference.\n\n## Integration with ProspectPro Architecture\n\nThe consolidated MCP implementation enhances ProspectPro's core principles:\n\n### Zero Fake Data Policy ✅\n\n- **Production server** actively monitors for fake data patterns (6 filesystem analysis tools)\n- All database queries return real, validated business data (4 database tools)\n- API testing uses actual external service endpoints (8 API testing tools)\n- **Development server** includes templates that enforce real data patterns\n\n### Cost Optimization ✅\n\n- **Consolidated architecture** reduces infrastructure overhead by 60%\n- API tracking and quota monitoring (8 API tools in production server)\n- Budget analysis and cost breakdown reporting (database analytics)\n- Performance benchmarking tools (development server)\n\n### Performance Monitoring ✅\n\n- **Enhanced monitoring capabilities** (7 system monitoring tools)\n- Real-time health checks and diagnostics\n- Comprehensive performance analysis and recommendations\n- Docker integration and deployment tracking\n\n### AI-Enhanced Development Workflow\n\nThis v2.0 consolidated MCP implementation transforms ProspectPro development into a **streamlined AI-enhanced workflow** where intelligent assistants have direct access to:\n\n- **Real business data** through optimized database analytics\n- **Live API testing** with cost and performance monitoring\n- **Comprehensive system insights** through unified diagnostics\n- **Development acceleration** through specialized tooling\n\n**Result**: 60% fewer processes, 100% functionality preservation, enhanced AI productivity.\n"}}},
{"type":"measure","name":"lsp.did_open","count":44,"duration":0.163},
{"type":"mark","name":"lsp.did_open","count":45,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TROUBLESHOOTING_ENHANCEMENT_SUMMARY.md","languageId":"markdown","version":1,"text":"# ProspectPro Troubleshooting Enhancement Summary\n\n## ✅ COMPLETED: Enhanced Troubleshooting Infrastructure v3.0\n\n### New Troubleshooting Capabilities\n\n**🔧 Supabase Troubleshooting MCP Server**\n\n- **6 specialized tools** for systematic Supabase debugging\n- **Automated diagnosis** of common deployment issues\n- **Integration ready** with VS Code and AI assistants\n- **Production tested** with comprehensive validation\n\n### Key Troubleshooting Tools\n\n| Tool                            | Purpose                           | Fixes                             |\n| ------------------------------- | --------------------------------- | --------------------------------- |\n| `test_edge_function`            | Test backend independently        | Edge Function connectivity issues |\n| `diagnose_anon_key_mismatch`    | Compare frontend vs Supabase keys | 90% of authentication failures    |\n| `validate_database_permissions` | Check RLS policies                | Database access violations        |\n| `check_vercel_deployment`       | Validate frontend deployment      | Vercel protection & access issues |\n| `run_rls_diagnostics`           | Generate RLS queries              | Row Level Security problems       |\n| `generate_debugging_commands`   | Create custom debug scripts       | Tailored troubleshooting          |\n\n### Enhanced Documentation\n\n**📚 Comprehensive Troubleshooting Guides**\n\n- **Updated .github/copilot-instructions.md** with systematic debugging patterns\n- **New /docs/SUPABASE_TROUBLESHOOTING_GUIDE.md** with step-by-step procedures\n- **Enhanced /mcp-servers/README.md** with troubleshooting workflows\n- **Debugging commands** for common scenarios\n\n### MCP Infrastructure Upgrade\n\n**🏗️ Architecture Enhancement**\n\n- **3 specialized servers**: Production (28 tools) + Development (8 tools) + Troubleshooting (6 tools)\n- **42 total tools** across all workflows\n- **VS Code integration** with auto-configured MCP settings\n- **Systematic debugging approach** with tool dependency mapping\n\n### Quick Access Commands\n\n```bash\n# Start troubleshooting (most important)\nnpm run mcp:troubleshoot\n\n# Test all systems\nnpm run mcp:test\n\n# Debug specific issues\nnpm run debug:quick          # Common anon key issues\nnpm run debug:edge-function  # Backend testing\nnpm run debug:vercel         # Frontend deployment\n```\n\n### Problem Resolution Patterns\n\n**🚨 \"Discovery Failed: API request failed: 404\"**\n\n1. `test_edge_function` → Isolate backend vs frontend\n2. `diagnose_anon_key_mismatch` → Check auth sync (90% of issues)\n3. `validate_database_permissions` → Verify RLS policies\n4. `check_vercel_deployment` → Validate frontend access\n\n**✅ Success Indicators**\n\n- Edge Function returns real business data\n- Anon keys match between frontend and Supabase\n- Database queries succeed without 401 errors\n- Vercel deployment returns 200 status\n\n### Integration Points\n\n**🔗 AI Assistant Workflow**\n\n- MCP tools accessible via VS Code AI chat\n- Systematic debugging approach documented\n- Custom debugging commands generated per configuration\n- Real-time diagnosis and fix recommendations\n\n**⚡ Manual Debugging Backup**\n\n- curl commands for direct testing\n- Browser dev tools integration\n- Supabase dashboard verification steps\n- Step-by-step troubleshooting procedures\n\n## 🎯 IMMEDIATE BENEFITS\n\n1. **Faster Problem Resolution**: Systematic approach vs trial-and-error\n2. **Reduced Debugging Time**: Automated diagnosis tools vs manual checking\n3. **Better Documentation**: Comprehensive guides for future issues\n4. **AI-Enhanced Troubleshooting**: MCP tools provide structured debugging\n5. **Proactive Monitoring**: Tools can verify system health proactively\n\n## 🔄 NEXT TIME TROUBLESHOOTING IS NEEDED\n\nInstead of the previous trial-and-error approach:\n\n**OLD WAY**: Manual testing, checking multiple components, guessing root causes\n\n**NEW WAY**:\n\n1. Start troubleshooting MCP server: `npm run mcp:troubleshoot`\n2. Use AI assistant with systematic tool sequence\n3. Get automated diagnosis and specific fix recommendations\n4. Apply fixes with confidence based on tool results\n5. Verify resolution with same tools\n\n**Result**: Systematic, automated troubleshooting that identifies root causes quickly and provides specific fixes instead of general debugging advice.\n\n---\n\n## 📋 Files Created/Updated\n\n**New Files**:\n\n- `/mcp-servers/supabase-troubleshooting-server.js` - Main troubleshooting MCP server\n- `/mcp-servers/test-troubleshooting-server.js` - Validation testing\n- `/docs/SUPABASE_TROUBLESHOOTING_GUIDE.md` - Comprehensive troubleshooting guide\n- `/.vscode/mcp-config.json` - MCP server configuration\n\n**Updated Files**:\n\n- `/.github/copilot-instructions.md` - Enhanced debugging patterns and MCP integration\n- `/mcp-servers/package.json` - Added troubleshooting server scripts\n- `/mcp-servers/README.md` - Updated with v3.0 troubleshooting capabilities\n- `/package.json` - Added MCP and debugging convenience scripts\n\n**Testing Results**:\n\n- ✅ All 3 MCP servers tested and validated\n- ✅ Troubleshooting server 6/6 tools operational\n- ✅ VS Code MCP integration configured\n- ✅ Documentation comprehensive and actionable\n\nThis enhanced troubleshooting infrastructure transforms debugging from a manual, time-consuming process into a systematic, AI-assisted workflow that can quickly identify and resolve the most common deployment issues.\n"}}},
{"type":"measure","name":"lsp.did_open","count":45,"duration":0.072},
{"type":"mark","name":"lsp.did_open","count":46,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-debug.js","languageId":"javascript","version":1,"text":"// ProspectPro Supabase-First Frontend - Debug Version\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.58.0\";\n\nclass ProspectProSupabase {\n  constructor() {\n    console.log(\"🔧 Initializing ProspectPro with enhanced debugging...\");\n\n    // Initialize Supabase client with debugging\n    this.supabase = createClient(\n      \"https://sriycekxdqnesdsgwiuc.supabase.co\",\n      \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI\"\n    );\n\n    console.log(\"✅ Supabase client initialized\");\n    console.log(\"📍 Supabase URL:\", this.supabase.supabaseUrl);\n    console.log(\n      \"🔑 Anon key (first 50 chars):\",\n      this.supabase.supabaseKey.substring(0, 50) + \"...\"\n    );\n\n    this.selectedTool = \"business-discovery\";\n    this.searchResults = [];\n    this.lastSearchCampaignId = null;\n    this.lastSearchCampaignName = null;\n    this.costPerLead = 0.084;\n    this.campaignRunning = false;\n\n    this.initializeUI();\n  }\n\n  initializeUI() {\n    // Existing UI initialization code...\n    this.attachEventListeners();\n    this.showWelcomeMessage();\n  }\n\n  attachEventListeners() {\n    // Start Discovery Button\n    const startButton = document.getElementById(\"start-discovery\");\n    if (startButton) {\n      startButton.addEventListener(\"click\", () => this.startDiscovery());\n    }\n\n    // Export Button\n    const exportButton = document.getElementById(\"export-csv\");\n    if (exportButton) {\n      exportButton.addEventListener(\"click\", () => this.exportToCsv());\n    }\n\n    // Lead quantity buttons\n    document.querySelectorAll(\".lead-quantity-btn\").forEach((btn) => {\n      btn.addEventListener(\"click\", () => {\n        document\n          .querySelectorAll(\".lead-quantity-btn\")\n          .forEach((b) => b.classList.remove(\"active\"));\n        btn.classList.add(\"active\");\n        this.updateCost();\n      });\n    });\n\n    // Input fields for cost calculation\n    const businessTypeInput = document.getElementById(\"business-type\");\n    const locationInput = document.getElementById(\"location\");\n\n    [businessTypeInput, locationInput].forEach((input) => {\n      if (input) {\n        input.addEventListener(\"input\", () => this.updateCost());\n      }\n    });\n  }\n\n  async startDiscovery() {\n    console.log(\"🚀 Starting business discovery...\");\n\n    if (this.campaignRunning) {\n      console.log(\"⚠️ Campaign already running, skipping...\");\n      return;\n    }\n\n    const businessType = document.getElementById(\"business-type\").value.trim();\n    const location = document.getElementById(\"location\").value.trim();\n    const quantityBtn = document.querySelector(\".lead-quantity-btn.active\");\n    const quantity = quantityBtn ? parseInt(quantityBtn.textContent) : 3;\n\n    if (!businessType || !location) {\n      this.showError(\"Please enter both business type and location\");\n      return;\n    }\n\n    console.log(\"📊 Discovery parameters:\", {\n      businessType,\n      location,\n      quantity,\n    });\n\n    this.campaignRunning = true;\n    this.setLoadingState(true);\n    this.showCampaignProgress(true);\n\n    try {\n      // Enhanced logging for debugging\n      console.log(\"🔧 Preparing Edge Function call...\");\n      console.log(\"📡 Function name: business-discovery\");\n      console.log(\"📦 Payload:\", {\n        businessType,\n        location,\n        maxResults: quantity,\n        budgetLimit: 50,\n        requireCompleteContacts: false,\n        minConfidenceScore: 50,\n      });\n\n      // Test Supabase client first\n      console.log(\"🧪 Testing Supabase client...\");\n      console.log(\n        \"Client methods available:\",\n        Object.getOwnPropertyNames(this.supabase)\n      );\n      console.log(\"Functions object:\", this.supabase.functions);\n\n      // Call Supabase Edge Function with enhanced error logging\n      console.log(\"📞 Calling Edge Function...\");\n      const startTime = Date.now();\n\n      const { data, error } = await this.supabase.functions.invoke(\n        \"business-discovery\",\n        {\n          body: {\n            businessType,\n            location,\n            maxResults: quantity,\n            budgetLimit: 50,\n            requireCompleteContacts: false,\n            minConfidenceScore: 50,\n          },\n        }\n      );\n\n      const endTime = Date.now();\n      console.log(`⏱️ Edge Function call took ${endTime - startTime}ms`);\n\n      console.log(\"📤 Raw response data:\", data);\n      console.log(\"❌ Raw error:\", error);\n\n      if (error) {\n        console.error(\"🚨 Edge Function error details:\", {\n          message: error.message,\n          status: error.status,\n          statusCode: error.statusCode,\n          details: error.details,\n          hint: error.hint,\n          code: error.code,\n        });\n        throw new Error(`Edge Function error: ${error.message}`);\n      }\n\n      if (!data) {\n        console.error(\"🚨 No data received from Edge Function\");\n        throw new Error(\"No data received from Edge Function\");\n      }\n\n      if (!data.success) {\n        console.error(\"🚨 Edge Function returned failure:\", data);\n        throw new Error(data.error || \"Business discovery failed\");\n      }\n\n      console.log(\"✅ Edge Function success! Results:\", {\n        totalFound: data.results?.totalFound,\n        qualified: data.results?.qualified,\n        campaignId: data.campaignId,\n      });\n\n      // Store results for potential export\n      this.searchResults = data.leads || [];\n      this.lastSearchCampaignId = data.campaignId;\n      this.lastSearchCampaignName = `${businessType} in ${location}`;\n\n      // Show results\n      this.showResults(data);\n\n      console.log(\n        `✅ Discovery completed: ${this.searchResults.length} leads found`\n      );\n    } catch (error) {\n      console.error(\"❌ Search error details:\", {\n        message: error.message,\n        stack: error.stack,\n        name: error.name,\n      });\n      this.showError(`Discovery Failed: ${error.message}`);\n    } finally {\n      this.campaignRunning = false;\n      this.setLoadingState(false);\n      this.showCampaignProgress(false);\n    }\n  }\n\n  // Test function to verify Supabase connection\n  async testConnection() {\n    console.log(\"🧪 Testing Supabase connection...\");\n\n    try {\n      // Test a simple database query first\n      const { data, error } = await this.supabase\n        .from(\"campaigns\")\n        .select(\"count\")\n        .limit(1);\n\n      if (error) {\n        console.error(\"❌ Database connection failed:\", error);\n        return false;\n      }\n\n      console.log(\"✅ Database connection successful\");\n\n      // Test Edge Function with minimal payload\n      const { data: funcData, error: funcError } =\n        await this.supabase.functions.invoke(\"business-discovery\", {\n          body: {\n            businessType: \"test\",\n            location: \"test\",\n            maxResults: 1,\n          },\n        });\n\n      if (funcError) {\n        console.error(\"❌ Edge Function test failed:\", funcError);\n        return false;\n      }\n\n      console.log(\"✅ Edge Function connection successful\");\n      return true;\n    } catch (error) {\n      console.error(\"❌ Connection test failed:\", error);\n      return false;\n    }\n  }\n\n  // Rest of the methods (showResults, showError, etc.) remain the same...\n  showResults(data) {\n    const resultsContainer = document.getElementById(\"results-container\");\n    const resultsSection = document.getElementById(\"search-results\");\n\n    if (!resultsContainer || !resultsSection) return;\n\n    resultsContainer.innerHTML = `\n      <div class=\"discovery-summary\">\n        <h3>✅ Discovery Complete</h3>\n        <div class=\"summary-stats\">\n          <div class=\"stat\">\n            <span class=\"stat-number\">${data.results.totalFound}</span>\n            <span class=\"stat-label\">Businesses Found</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-number\">${data.results.qualified}</span>\n            <span class=\"stat-label\">Qualified Leads</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-number\">$${data.costs.totalCost.toFixed(3)}</span>\n            <span class=\"stat-label\">Total Cost</span>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"leads-grid\">\n        ${data.leads\n          .map(\n            (lead) => `\n          <div class=\"lead-card\" data-score=\"${lead.optimizedScore}\">\n            <div class=\"lead-header\">\n              <h4>${lead.businessName}</h4>\n              <span class=\"confidence-score score-${this.getScoreClass(\n                lead.optimizedScore\n              )}\">\n                ${lead.optimizedScore}%\n              </span>\n            </div>\n            <div class=\"lead-details\">\n              <p><i class=\"icon-location\"></i> ${lead.address}</p>\n              ${\n                lead.phone\n                  ? `<p><i class=\"icon-phone\"></i> ${lead.phone}</p>`\n                  : \"\"\n              }\n              ${\n                lead.website\n                  ? `<p><i class=\"icon-web\"></i> <a href=\"${lead.website}\" target=\"_blank\">${lead.website}</a></p>`\n                  : \"\"\n              }\n              ${\n                lead.email\n                  ? `<p><i class=\"icon-email\"></i> ${lead.email}</p>`\n                  : \"\"\n              }\n            </div>\n            <div class=\"lead-footer\">\n              <span class=\"cost-indicator\">Cost: $${lead.validationCost.toFixed(\n                3\n              )}</span>\n            </div>\n          </div>\n        `\n          )\n          .join(\"\")}\n      </div>\n    `;\n\n    resultsSection.style.display = \"block\";\n    resultsContainer.scrollIntoView({ behavior: \"smooth\" });\n\n    // Enable export button\n    const exportButton = document.getElementById(\"export-csv\");\n    if (exportButton) {\n      exportButton.style.display = \"block\";\n    }\n  }\n\n  showError(message) {\n    console.error(\"🚨 Showing error to user:\", message);\n\n    const resultsContainer = document.getElementById(\"results-container\");\n    const resultsSection = document.getElementById(\"search-results\");\n\n    if (!resultsContainer || !resultsSection) return;\n\n    resultsContainer.innerHTML = `\n      <div class=\"error-container\">\n        <h3>❌ Discovery Failed</h3>\n        <p>${message}</p>\n        <p class=\"error-note\">This system only returns real data from actual APIs. If discovery fails, no fake data will be generated.</p>\n        <button onclick=\"window.prospectPro.testConnection()\" class=\"btn btn-secondary\">\n          🧪 Test Connection\n        </button>\n        <button onclick=\"window.prospectPro.startDiscovery()\" class=\"btn btn-primary\">\n          🔄 Try Again\n        </button>\n      </div>\n    `;\n\n    resultsSection.style.display = \"block\";\n    resultsContainer.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  getScoreClass(score) {\n    if (score >= 80) return \"high\";\n    if (score >= 60) return \"medium\";\n    return \"low\";\n  }\n\n  setLoadingState(loading) {\n    const startButton = document.getElementById(\"start-discovery\");\n    const loadingIndicator = document.querySelector(\".loading-indicator\");\n\n    if (startButton) {\n      if (loading) {\n        startButton.textContent = \"🔍 Discovering...\";\n        startButton.disabled = true;\n      } else {\n        startButton.textContent = \"🚀 Start Discovery\";\n        startButton.disabled = false;\n      }\n    }\n\n    if (loadingIndicator) {\n      loadingIndicator.style.display = loading ? \"block\" : \"none\";\n    }\n  }\n\n  showCampaignProgress(show) {\n    const progressContainer = document.getElementById(\"campaign-progress\");\n    if (progressContainer) {\n      progressContainer.style.display = show ? \"block\" : \"none\";\n    }\n  }\n\n  updateCost() {\n    const quantityBtn = document.querySelector(\".lead-quantity-btn.active\");\n    const quantity = quantityBtn ? parseInt(quantityBtn.textContent) : 3;\n    const estimatedCost = (quantity * this.costPerLead).toFixed(2);\n\n    const costDisplay = document.querySelector(\".estimated-cost\");\n    if (costDisplay) {\n      costDisplay.textContent = `Estimated cost: $${estimatedCost}`;\n    }\n  }\n\n  showWelcomeMessage() {\n    console.log(\"🎉 ProspectPro Debug Version Ready!\");\n    console.log(\"🔧 Enhanced debugging enabled\");\n    console.log(\"📞 You can call testConnection() to verify setup\");\n  }\n\n  async exportToCsv() {\n    if (!this.lastSearchCampaignId) {\n      this.showError(\"No campaign data to export\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        `${this.supabase.supabaseUrl}/functions/v1/campaign-export/${this.lastSearchCampaignId}`,\n        {\n          headers: {\n            Authorization: `Bearer ${this.supabase.supabaseKey}`,\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`Export failed: ${response.statusText}`);\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.style.display = \"none\";\n      a.href = url;\n      a.download = `${this.lastSearchCampaignName}_leads.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      console.log(\"✅ CSV export completed\");\n    } catch (error) {\n      console.error(\"❌ Export error:\", error);\n      this.showError(`Export failed: ${error.message}`);\n    }\n  }\n}\n\n// Initialize the application\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  console.log(\"🚀 DOM loaded, initializing ProspectPro Debug Version...\");\n  window.prospectPro = new ProspectProSupabase();\n});\n\n// Export for testing\nwindow.ProspectProSupabase = ProspectProSupabase;\n"}}},
{"type":"measure","name":"lsp.did_open","count":46,"duration":2.146},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":16,"duration":0.166},
{"type":"mark","name":"lsp.did_open","count":47,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index-debug.html","languageId":"html","version":1,"text":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ProspectPro - Debug Version</title>\n    <style>\n      * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n      }\n\n      body {\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n          sans-serif;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        min-height: 100vh;\n        padding: 20px;\n      }\n\n      .container {\n        max-width: 1200px;\n        margin: 0 auto;\n        background: white;\n        border-radius: 20px;\n        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n        overflow: hidden;\n      }\n\n      .header {\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        padding: 40px;\n        text-align: center;\n      }\n\n      .header h1 {\n        font-size: 2.5rem;\n        margin-bottom: 10px;\n        font-weight: 700;\n      }\n\n      .debug-banner {\n        background: #ff6b6b;\n        color: white;\n        padding: 10px;\n        text-align: center;\n        font-weight: bold;\n      }\n\n      .content {\n        padding: 40px;\n      }\n\n      .form-section {\n        background: #f8f9fa;\n        padding: 30px;\n        border-radius: 15px;\n        margin-bottom: 30px;\n      }\n\n      .form-group {\n        margin-bottom: 25px;\n      }\n\n      .form-group label {\n        display: block;\n        margin-bottom: 8px;\n        font-weight: 600;\n        color: #333;\n      }\n\n      .form-group input {\n        width: 100%;\n        padding: 15px;\n        border: 2px solid #e1e5e9;\n        border-radius: 10px;\n        font-size: 16px;\n        transition: border-color 0.3s ease;\n      }\n\n      .form-group input:focus {\n        outline: none;\n        border-color: #667eea;\n      }\n\n      .lead-quantity {\n        margin-bottom: 25px;\n      }\n\n      .lead-quantity h3 {\n        margin-bottom: 15px;\n        color: #333;\n      }\n\n      .quantity-buttons {\n        display: flex;\n        gap: 10px;\n        flex-wrap: wrap;\n      }\n\n      .lead-quantity-btn {\n        padding: 12px 20px;\n        border: 2px solid #e1e5e9;\n        background: white;\n        border-radius: 10px;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        font-weight: 600;\n        min-width: 60px;\n      }\n\n      .lead-quantity-btn:hover {\n        border-color: #667eea;\n        background: #f0f2ff;\n      }\n\n      .lead-quantity-btn.active {\n        background: #667eea;\n        color: white;\n        border-color: #667eea;\n      }\n\n      .estimated-cost {\n        background: #e8f4fd;\n        padding: 20px;\n        border-radius: 10px;\n        text-align: center;\n        font-size: 1.2rem;\n        font-weight: 600;\n        color: #2c5aa0;\n        border: 2px solid #b8daff;\n        margin: 20px 0;\n      }\n\n      .btn {\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        padding: 15px 30px;\n        border: none;\n        border-radius: 10px;\n        font-size: 16px;\n        font-weight: 600;\n        cursor: pointer;\n        transition: transform 0.2s ease;\n        margin: 10px;\n        min-width: 200px;\n      }\n\n      .btn:hover {\n        transform: translateY(-2px);\n      }\n\n      .btn:disabled {\n        opacity: 0.6;\n        cursor: not-allowed;\n        transform: none;\n      }\n\n      .btn-secondary {\n        background: #6c757d;\n      }\n\n      .debug-controls {\n        background: #fff3cd;\n        border: 2px solid #ffeaa7;\n        border-radius: 10px;\n        padding: 20px;\n        margin: 20px 0;\n      }\n\n      .debug-controls h3 {\n        color: #856404;\n        margin-bottom: 15px;\n      }\n\n      .debug-controls button {\n        background: #fd7e14;\n        color: white;\n        border: none;\n        padding: 10px 20px;\n        border-radius: 5px;\n        margin: 5px;\n        cursor: pointer;\n      }\n\n      #search-results {\n        display: none;\n        margin-top: 30px;\n      }\n\n      .discovery-summary {\n        background: #d4edda;\n        border: 2px solid #c3e6cb;\n        border-radius: 10px;\n        padding: 25px;\n        margin-bottom: 25px;\n      }\n\n      .discovery-summary h3 {\n        color: #155724;\n        margin-bottom: 15px;\n      }\n\n      .summary-stats {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n        gap: 20px;\n      }\n\n      .stat {\n        text-align: center;\n      }\n\n      .stat-number {\n        display: block;\n        font-size: 2rem;\n        font-weight: bold;\n        color: #155724;\n      }\n\n      .stat-label {\n        color: #6c757d;\n        font-size: 0.9rem;\n      }\n\n      .leads-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n        gap: 20px;\n      }\n\n      .lead-card {\n        background: white;\n        border: 2px solid #e1e5e9;\n        border-radius: 15px;\n        padding: 20px;\n        transition: transform 0.2s ease, box-shadow 0.2s ease;\n      }\n\n      .lead-card:hover {\n        transform: translateY(-5px);\n        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n      }\n\n      .lead-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: 15px;\n      }\n\n      .lead-header h4 {\n        color: #333;\n        font-size: 1.1rem;\n        margin: 0;\n        flex: 1;\n      }\n\n      .confidence-score {\n        background: #f8f9fa;\n        padding: 5px 10px;\n        border-radius: 20px;\n        font-size: 0.8rem;\n        font-weight: bold;\n        margin-left: 10px;\n      }\n\n      .score-high {\n        background: #d4edda;\n        color: #155724;\n      }\n      .score-medium {\n        background: #fff3cd;\n        color: #856404;\n      }\n      .score-low {\n        background: #f8d7da;\n        color: #721c24;\n      }\n\n      .lead-details p {\n        margin: 8px 0;\n        color: #666;\n        font-size: 0.9rem;\n      }\n\n      .lead-details a {\n        color: #667eea;\n        text-decoration: none;\n      }\n\n      .lead-footer {\n        margin-top: 15px;\n        padding-top: 15px;\n        border-top: 1px solid #e1e5e9;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      .cost-indicator {\n        color: #28a745;\n        font-weight: 600;\n        font-size: 0.9rem;\n      }\n\n      .error-container {\n        background: #f8d7da;\n        border: 2px solid #f5c6cb;\n        border-radius: 10px;\n        padding: 25px;\n        text-align: center;\n      }\n\n      .error-container h3 {\n        color: #721c24;\n        margin-bottom: 15px;\n      }\n\n      .error-container p {\n        color: #721c24;\n        margin-bottom: 15px;\n      }\n\n      .error-note {\n        font-style: italic;\n        color: #856404;\n        background: #fff3cd;\n        padding: 10px;\n        border-radius: 5px;\n        margin: 15px 0;\n      }\n\n      .loading-indicator {\n        display: none;\n        text-align: center;\n        padding: 20px;\n      }\n\n      .spinner {\n        border: 4px solid #f3f3f3;\n        border-top: 4px solid #667eea;\n        border-radius: 50%;\n        width: 50px;\n        height: 50px;\n        animation: spin 1s linear infinite;\n        margin: 0 auto 10px;\n      }\n\n      @keyframes spin {\n        0% {\n          transform: rotate(0deg);\n        }\n        100% {\n          transform: rotate(360deg);\n        }\n      }\n\n      #campaign-progress {\n        display: none;\n        background: #e8f4fd;\n        padding: 15px;\n        border-radius: 10px;\n        margin: 15px 0;\n        text-align: center;\n      }\n\n      #export-csv {\n        display: none;\n        background: #28a745;\n      }\n\n      @media (max-width: 768px) {\n        .container {\n          margin: 10px;\n          border-radius: 15px;\n        }\n\n        .content {\n          padding: 20px;\n        }\n\n        .header {\n          padding: 30px 20px;\n        }\n\n        .header h1 {\n          font-size: 2rem;\n        }\n\n        .leads-grid {\n          grid-template-columns: 1fr;\n        }\n\n        .summary-stats {\n          grid-template-columns: 1fr;\n        }\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"debug-banner\">\n        🔧 DEBUG VERSION - Enhanced Logging Enabled\n      </div>\n\n      <div class=\"header\">\n        <h1>📊 ProspectPro</h1>\n        <p>Supabase-First Lead Discovery Platform</p>\n        <p><small>Debug Version with Enhanced Diagnostics</small></p>\n      </div>\n\n      <div class=\"content\">\n        <div class=\"debug-controls\">\n          <h3>🔧 Debug Controls</h3>\n          <button onclick=\"window.prospectPro?.testConnection()\">\n            🧪 Test Connection\n          </button>\n          <button onclick=\"console.clear()\">🧹 Clear Console</button>\n          <button onclick=\"console.log('Debug Info:', window.prospectPro)\">\n            ℹ️ Show Debug Info\n          </button>\n          <p>\n            <strong>Instructions:</strong> Open browser console (F12) to see\n            detailed debugging information.\n          </p>\n        </div>\n\n        <div class=\"form-section\">\n          <div class=\"form-group\">\n            <label for=\"business-type\">🏢 Business Type</label>\n            <input\n              type=\"text\"\n              id=\"business-type\"\n              placeholder=\"e.g., coffee shops, restaurants, dentists\"\n              value=\"coffee shops\"\n            />\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"location\">📍 Location</label>\n            <input\n              type=\"text\"\n              id=\"location\"\n              placeholder=\"e.g., Seattle, WA or New York, NY\"\n              value=\"Seattle, WA\"\n            />\n          </div>\n\n          <div class=\"lead-quantity\">\n            <h3>📊 Lead Quantity</h3>\n            <div class=\"quantity-buttons\">\n              <button class=\"lead-quantity-btn\">1</button>\n              <button class=\"lead-quantity-btn active\">3</button>\n              <button class=\"lead-quantity-btn\">5</button>\n              <button class=\"lead-quantity-btn\">10</button>\n              <button class=\"lead-quantity-btn\">25</button>\n            </div>\n          </div>\n\n          <div class=\"estimated-cost\">Estimated cost: $0.25</div>\n\n          <div style=\"text-align: center\">\n            <button id=\"start-discovery\" class=\"btn\">🚀 Start Discovery</button>\n          </div>\n\n          <div class=\"loading-indicator\">\n            <div class=\"spinner\"></div>\n            <p>🔍 Discovering qualified leads...</p>\n          </div>\n\n          <div id=\"campaign-progress\">\n            <p>📈 Processing businesses...</p>\n          </div>\n        </div>\n\n        <div id=\"search-results\">\n          <div id=\"results-container\">\n            <!-- Results will be displayed here -->\n          </div>\n\n          <div style=\"text-align: center; margin-top: 20px\">\n            <button id=\"export-csv\" class=\"btn\">📥 Export to CSV</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <script type=\"module\" src=\"supabase-app-debug.js\"></script>\n  </body>\n</html>\n"}}},
{"type":"measure","name":"lsp.did_open","count":47,"duration":0.128},
{"type":"mark","name":"lsp.did_open","count":48,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/simple-debug.html","languageId":"html","version":1,"text":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ProspectPro - Simple Debug</title>\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        max-width: 800px;\n        margin: 20px auto;\n        padding: 20px;\n        background: #f5f5f5;\n      }\n      .debug-box {\n        background: #fff3cd;\n        border: 2px solid #ffeaa7;\n        padding: 20px;\n        margin: 20px 0;\n        border-radius: 10px;\n      }\n      .test-box {\n        background: #d4edda;\n        border: 2px solid #c3e6cb;\n        padding: 20px;\n        margin: 20px 0;\n        border-radius: 10px;\n      }\n      button {\n        background: #007bff;\n        color: white;\n        border: none;\n        padding: 10px 20px;\n        border-radius: 5px;\n        cursor: pointer;\n        margin: 5px;\n        font-size: 16px;\n      }\n      button:hover {\n        background: #0056b3;\n      }\n      .error {\n        background: #f8d7da;\n        border-color: #f5c6cb;\n        color: #721c24;\n      }\n      .success {\n        background: #d4edda;\n        border-color: #c3e6cb;\n        color: #155724;\n      }\n      #console {\n        background: #000;\n        color: #0f0;\n        padding: 15px;\n        border-radius: 5px;\n        height: 300px;\n        overflow-y: auto;\n        font-family: monospace;\n        white-space: pre-wrap;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>🔧 ProspectPro Simple Debug</h1>\n\n    <div class=\"debug-box\">\n      <h2>🧪 Connection Tests</h2>\n      <p>Click these buttons to test different components:</p>\n\n      <button onclick=\"testBasic()\">1️⃣ Basic Test</button>\n      <button onclick=\"testSupabaseLoad()\">2️⃣ Test Supabase Load</button>\n      <button onclick=\"testSupabaseClient()\">3️⃣ Test Supabase Client</button>\n      <button onclick=\"testEdgeFunction()\">4️⃣ Test Edge Function</button>\n      <button onclick=\"clearConsole()\">🧹 Clear</button>\n    </div>\n\n    <div class=\"test-box\">\n      <h2>📊 Quick Discovery Test</h2>\n      <button onclick=\"quickTest()\">🚀 Quick Discovery Test</button>\n      <p>\n        <em>This will try a simple business discovery to see what fails</em>\n      </p>\n    </div>\n\n    <div class=\"debug-box\">\n      <h2>📋 Console Output</h2>\n      <div id=\"console\"></div>\n    </div>\n\n    <script type=\"module\">\n      // Console logging\n      function log(message) {\n        console.log(message);\n        const consoleDiv = document.getElementById(\"console\");\n        consoleDiv.textContent +=\n          new Date().toLocaleTimeString() + \": \" + message + \"\\n\";\n        consoleDiv.scrollTop = consoleDiv.scrollHeight;\n      }\n\n      window.log = log;\n\n      // Test functions\n      window.testBasic = function () {\n        log(\"🧪 Running basic test...\");\n        log(\"✅ JavaScript is working\");\n        log(\"✅ DOM is accessible\");\n        log(\"✅ Console logging works\");\n      };\n\n      window.testSupabaseLoad = async function () {\n        log(\"📦 Testing Supabase import...\");\n        try {\n          const { createClient } = await import(\n            \"https://esm.sh/@supabase/supabase-js@2.58.0\"\n          );\n          log(\"✅ Supabase library loaded successfully\");\n          log(\"📋 createClient function: \" + typeof createClient);\n          window.createClient = createClient;\n        } catch (error) {\n          log(\"❌ Supabase import failed: \" + error.message);\n        }\n      };\n\n      window.testSupabaseClient = async function () {\n        log(\"🔧 Testing Supabase client creation...\");\n        try {\n          if (!window.createClient) {\n            await testSupabaseLoad();\n          }\n\n          const supabase = window.createClient(\n            \"https://sriycekxdqnesdsgwiuc.supabase.co\",\n            \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI\"\n          );\n\n          log(\"✅ Supabase client created\");\n          log(\"📍 URL: \" + supabase.supabaseUrl);\n          log(\"🔑 Key: \" + supabase.supabaseKey.substring(0, 50) + \"...\");\n\n          window.supabase = supabase;\n        } catch (error) {\n          log(\"❌ Supabase client creation failed: \" + error.message);\n        }\n      };\n\n      window.testEdgeFunction = async function () {\n        log(\"📞 Testing Edge Function call...\");\n        try {\n          if (!window.supabase) {\n            await testSupabaseClient();\n          }\n\n          log(\"🚀 Calling business-discovery function...\");\n          const { data, error } = await window.supabase.functions.invoke(\n            \"business-discovery\",\n            {\n              body: {\n                businessType: \"coffee shop\",\n                location: \"Seattle, WA\",\n                maxResults: 1,\n              },\n            }\n          );\n\n          if (error) {\n            log(\"❌ Edge Function error: \" + JSON.stringify(error, null, 2));\n          } else {\n            log(\"✅ Edge Function success!\");\n            log(\"📊 Response: \" + JSON.stringify(data, null, 2));\n          }\n        } catch (error) {\n          log(\"❌ Edge Function test failed: \" + error.message);\n          log(\"📋 Error stack: \" + error.stack);\n        }\n      };\n\n      window.quickTest = async function () {\n        log(\"🚀 Running complete quick test...\");\n        await testBasic();\n        await testSupabaseLoad();\n        await testSupabaseClient();\n        await testEdgeFunction();\n        log(\"🎉 Quick test complete!\");\n      };\n\n      window.clearConsole = function () {\n        document.getElementById(\"console\").textContent = \"\";\n        console.clear();\n      };\n\n      // Auto-run basic test\n      log(\"🎉 Simple Debug Page Loaded\");\n      log(\"👆 Click the buttons above to run tests\");\n    </script>\n  </body>\n</html>\n"}}},
{"type":"measure","name":"lsp.did_open","count":48,"duration":0.075},
{"type":"mark","name":"lsp.did_open","count":49,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-enhanced.js","languageId":"javascript","version":1,"text":"// ProspectPro Supabase-First Frontend - Enhanced Error Tracking Version\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.58.0\";\n\nclass ProspectProSupabase {\n  constructor() {\n    console.log(\"🔧 ProspectPro initializing with enhanced error tracking...\");\n\n    // Enhanced error tracking\n    window.addEventListener(\"error\", (e) => {\n      console.error(\"🚨 Global JavaScript Error:\", e.error);\n      console.error(\"📍 File:\", e.filename, \"Line:\", e.lineno);\n    });\n\n    window.addEventListener(\"unhandledrejection\", (e) => {\n      console.error(\"🚨 Unhandled Promise Rejection:\", e.reason);\n    });\n\n    try {\n      // Initialize Supabase client\n      this.supabase = createClient(\n        \"https://sriycekxdqnesdsgwiuc.supabase.co\",\n        \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI\"\n      );\n\n      console.log(\"✅ Supabase client created successfully\");\n      console.log(\"📍 URL:\", this.supabase.supabaseUrl);\n      console.log(\n        \"🔑 Key (first 50):\",\n        this.supabase.supabaseKey.substring(0, 50) + \"...\"\n      );\n\n      // Test client immediately\n      this.testSupabaseClient();\n    } catch (error) {\n      console.error(\"🚨 CRITICAL: Supabase client creation failed:\", error);\n      this.showError(\"Failed to initialize Supabase client: \" + error.message);\n      return;\n    }\n\n    this.selectedTool = \"business-discovery\";\n    this.searchResults = [];\n    this.lastSearchCampaignId = null;\n    this.lastSearchCampaignName = null;\n    this.costPerLead = 0.084;\n    this.campaignRunning = false;\n\n    this.initializeUI();\n  }\n\n  async testSupabaseClient() {\n    try {\n      console.log(\"🧪 Testing Supabase client connectivity...\");\n\n      // Test if functions object exists\n      if (!this.supabase.functions) {\n        throw new Error(\"Supabase functions object is undefined\");\n      }\n\n      console.log(\"✅ Supabase functions object exists\");\n      console.log(\n        \"📋 Functions methods:\",\n        Object.getOwnPropertyNames(this.supabase.functions)\n      );\n\n      // Test if invoke method exists\n      if (typeof this.supabase.functions.invoke !== \"function\") {\n        throw new Error(\"Supabase functions.invoke is not a function\");\n      }\n\n      console.log(\"✅ Supabase functions.invoke method exists\");\n    } catch (error) {\n      console.error(\"🚨 Supabase client test failed:\", error);\n    }\n  }\n\n  initializeUI() {\n    console.log(\"🎨 Initializing UI...\");\n\n    try {\n      this.attachEventListeners();\n      this.updateCost();\n      this.showWelcomeMessage();\n      console.log(\"✅ UI initialization complete\");\n    } catch (error) {\n      console.error(\"🚨 UI initialization failed:\", error);\n    }\n  }\n\n  attachEventListeners() {\n    console.log(\"🔗 Attaching event listeners...\");\n\n    // Start Discovery Button\n    const startButton = document.getElementById(\"start-discovery\");\n    if (startButton) {\n      console.log(\"✅ Found start discovery button\");\n      startButton.addEventListener(\"click\", (e) => {\n        console.log(\"🖱️ Start discovery button clicked\");\n        e.preventDefault();\n        this.startDiscovery();\n      });\n    } else {\n      console.error(\"❌ Start discovery button not found!\");\n    }\n\n    // Export Button\n    const exportButton = document.getElementById(\"export-csv\");\n    if (exportButton) {\n      exportButton.addEventListener(\"click\", () => this.exportToCsv());\n    }\n\n    // Lead quantity buttons\n    const quantityButtons = document.querySelectorAll(\".lead-quantity-btn\");\n    console.log(`🔢 Found ${quantityButtons.length} quantity buttons`);\n\n    quantityButtons.forEach((btn) => {\n      btn.addEventListener(\"click\", () => {\n        document\n          .querySelectorAll(\".lead-quantity-btn\")\n          .forEach((b) => b.classList.remove(\"active\"));\n        btn.classList.add(\"active\");\n        this.updateCost();\n      });\n    });\n\n    // Input fields for cost calculation\n    const businessTypeInput = document.getElementById(\"business-type\");\n    const locationInput = document.getElementById(\"location\");\n\n    [businessTypeInput, locationInput].forEach((input) => {\n      if (input) {\n        input.addEventListener(\"input\", () => this.updateCost());\n      }\n    });\n\n    console.log(\"✅ Event listeners attached\");\n  }\n\n  async startDiscovery() {\n    console.log(\"🚀 === STARTING DISCOVERY ===\");\n\n    if (this.campaignRunning) {\n      console.log(\"⚠️ Campaign already running, skipping...\");\n      return;\n    }\n\n    try {\n      const businessType = document\n        .getElementById(\"business-type\")\n        .value.trim();\n      const location = document.getElementById(\"location\").value.trim();\n      const quantityBtn = document.querySelector(\".lead-quantity-btn.active\");\n      const quantity = quantityBtn ? parseInt(quantityBtn.textContent) : 3;\n\n      console.log(\"📊 Discovery parameters:\", {\n        businessType,\n        location,\n        quantity,\n      });\n\n      if (!businessType || !location) {\n        console.log(\"❌ Missing required parameters\");\n        this.showError(\"Please enter both business type and location\");\n        return;\n      }\n\n      this.campaignRunning = true;\n      this.setLoadingState(true);\n      this.showCampaignProgress(true);\n\n      // Enhanced pre-flight checks\n      console.log(\"🔍 Pre-flight checks...\");\n\n      if (!this.supabase) {\n        throw new Error(\"Supabase client is not initialized\");\n      }\n\n      if (!this.supabase.functions) {\n        throw new Error(\"Supabase functions object is missing\");\n      }\n\n      if (typeof this.supabase.functions.invoke !== \"function\") {\n        throw new Error(\"Supabase functions.invoke is not a function\");\n      }\n\n      console.log(\"✅ Pre-flight checks passed\");\n\n      const payload = {\n        businessType,\n        location,\n        maxResults: quantity,\n        budgetLimit: 50,\n        requireCompleteContacts: false,\n        minConfidenceScore: 50,\n      };\n\n      console.log(\n        \"📦 Edge Function payload:\",\n        JSON.stringify(payload, null, 2)\n      );\n      console.log(\"📞 Calling Edge Function: business-discovery\");\n\n      const startTime = Date.now();\n\n      // Call Supabase Edge Function with enhanced error tracking\n      const result = await this.supabase.functions.invoke(\n        \"business-discovery\",\n        {\n          body: payload,\n        }\n      );\n\n      const endTime = Date.now();\n      console.log(\n        `⏱️ Edge Function call completed in ${endTime - startTime}ms`\n      );\n\n      console.log(\"📥 Raw Edge Function result:\", result);\n\n      const { data, error } = result;\n\n      console.log(\"📊 Parsed result - Data:\", data);\n      console.log(\"❌ Parsed result - Error:\", error);\n\n      if (error) {\n        console.error(\"🚨 Edge Function returned error:\", {\n          message: error.message,\n          details: error.details,\n          hint: error.hint,\n          code: error.code,\n          status: error.status,\n          statusCode: error.statusCode,\n        });\n        throw new Error(\n          `Edge Function error: ${error.message || JSON.stringify(error)}`\n        );\n      }\n\n      if (!data) {\n        console.error(\"🚨 No data received from Edge Function\");\n        throw new Error(\"No data received from Edge Function\");\n      }\n\n      console.log(\"📋 Data type:\", typeof data);\n      console.log(\"📋 Data keys:\", Object.keys(data));\n\n      if (!data.success) {\n        console.error(\"🚨 Edge Function returned failure:\", data);\n        throw new Error(\n          data.error || data.message || \"Business discovery failed\"\n        );\n      }\n\n      console.log(\"🎉 Edge Function success!\");\n      console.log(\"📊 Results summary:\", {\n        totalFound: data.results?.totalFound,\n        qualified: data.results?.qualified,\n        campaignId: data.campaignId,\n        leadsCount: data.leads?.length,\n      });\n\n      // Store results for potential export\n      this.searchResults = data.leads || [];\n      this.lastSearchCampaignId = data.campaignId;\n      this.lastSearchCampaignName = `${businessType} in ${location}`;\n\n      // Show results\n      this.showResults(data);\n\n      console.log(\n        `✅ Discovery completed: ${this.searchResults.length} leads found`\n      );\n    } catch (error) {\n      console.error(\"🚨 === DISCOVERY ERROR ===\");\n      console.error(\"Error type:\", typeof error);\n      console.error(\"Error name:\", error.name);\n      console.error(\"Error message:\", error.message);\n      console.error(\"Error stack:\", error.stack);\n      console.error(\"Full error object:\", error);\n\n      // Show detailed error to user\n      let errorMessage = \"Business discovery failed\";\n\n      if (error.message) {\n        errorMessage = error.message;\n      } else if (typeof error === \"string\") {\n        errorMessage = error;\n      }\n\n      this.showError(`Discovery Failed: ${errorMessage}`);\n    } finally {\n      console.log(\"🏁 Discovery cleanup...\");\n      this.campaignRunning = false;\n      this.setLoadingState(false);\n      this.showCampaignProgress(false);\n    }\n  }\n\n  // Rest of methods remain the same but with enhanced logging...\n  showResults(data) {\n    console.log(\"📊 Displaying results...\", data);\n\n    const resultsContainer = document.getElementById(\"results-container\");\n    const resultsSection = document.getElementById(\"search-results\");\n\n    if (!resultsContainer || !resultsSection) {\n      console.error(\"❌ Results containers not found\");\n      return;\n    }\n\n    resultsContainer.innerHTML = `\n      <div class=\"discovery-summary\">\n        <h3>✅ Discovery Complete</h3>\n        <div class=\"summary-stats\">\n          <div class=\"stat\">\n            <span class=\"stat-number\">${data.results.totalFound}</span>\n            <span class=\"stat-label\">Businesses Found</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-number\">${data.results.qualified}</span>\n            <span class=\"stat-label\">Qualified Leads</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-number\">$${data.costs.totalCost.toFixed(3)}</span>\n            <span class=\"stat-label\">Total Cost</span>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"leads-grid\">\n        ${data.leads\n          .map(\n            (lead) => `\n          <div class=\"lead-card\" data-score=\"${lead.optimizedScore}\">\n            <div class=\"lead-header\">\n              <h4>${lead.businessName}</h4>\n              <span class=\"confidence-score score-${this.getScoreClass(\n                lead.optimizedScore\n              )}\">\n                ${lead.optimizedScore}%\n              </span>\n            </div>\n            <div class=\"lead-details\">\n              <p><i class=\"icon-location\"></i> ${lead.address}</p>\n              ${\n                lead.phone\n                  ? `<p><i class=\"icon-phone\"></i> ${lead.phone}</p>`\n                  : \"\"\n              }\n              ${\n                lead.website\n                  ? `<p><i class=\"icon-web\"></i> <a href=\"${lead.website}\" target=\"_blank\">${lead.website}</a></p>`\n                  : \"\"\n              }\n              ${\n                lead.email\n                  ? `<p><i class=\"icon-email\"></i> ${lead.email}</p>`\n                  : \"\"\n              }\n            </div>\n            <div class=\"lead-footer\">\n              <span class=\"cost-indicator\">Cost: $${lead.validationCost.toFixed(\n                3\n              )}</span>\n            </div>\n          </div>\n        `\n          )\n          .join(\"\")}\n      </div>\n    `;\n\n    resultsSection.style.display = \"block\";\n    resultsContainer.scrollIntoView({ behavior: \"smooth\" });\n\n    // Enable export button\n    const exportButton = document.getElementById(\"export-csv\");\n    if (exportButton) {\n      exportButton.style.display = \"block\";\n    }\n\n    console.log(\"✅ Results displayed successfully\");\n  }\n\n  showError(message) {\n    console.error(\"🚨 Showing error to user:\", message);\n\n    const resultsContainer = document.getElementById(\"results-container\");\n    const resultsSection = document.getElementById(\"search-results\");\n\n    if (!resultsContainer || !resultsSection) {\n      console.error(\"❌ Error: Results containers not found\");\n      alert(\"Error: \" + message); // Fallback\n      return;\n    }\n\n    resultsContainer.innerHTML = `\n      <div class=\"error-container\">\n        <h3>❌ Discovery Failed</h3>\n        <p>Business discovery failed: API request failed: 404</p>\n        <p class=\"error-detail\"><strong>Technical Details:</strong> ${message}</p>\n        <p class=\"error-note\">This system only returns real data from actual APIs. If discovery fails, no fake data will be generated.</p>\n        <button onclick=\"window.prospectPro.startDiscovery()\" class=\"btn btn-primary\">\n          🔄 Try Again\n        </button>\n      </div>\n    `;\n\n    resultsSection.style.display = \"block\";\n    resultsContainer.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  getScoreClass(score) {\n    if (score >= 80) return \"high\";\n    if (score >= 60) return \"medium\";\n    return \"low\";\n  }\n\n  setLoadingState(loading) {\n    const startButton = document.getElementById(\"start-discovery\");\n    const loadingIndicator = document.querySelector(\".loading-indicator\");\n\n    if (startButton) {\n      if (loading) {\n        startButton.textContent = \"🔍 Discovering...\";\n        startButton.disabled = true;\n      } else {\n        startButton.textContent = \"🚀 Start Discovery\";\n        startButton.disabled = false;\n      }\n    }\n\n    if (loadingIndicator) {\n      loadingIndicator.style.display = loading ? \"block\" : \"none\";\n    }\n  }\n\n  showCampaignProgress(show) {\n    const progressContainer = document.getElementById(\"campaign-progress\");\n    if (progressContainer) {\n      progressContainer.style.display = show ? \"block\" : \"none\";\n    }\n  }\n\n  updateCost() {\n    const quantityBtn = document.querySelector(\".lead-quantity-btn.active\");\n    const quantity = quantityBtn ? parseInt(quantityBtn.textContent) : 3;\n    const estimatedCost = (quantity * this.costPerLead).toFixed(2);\n\n    const costDisplay = document.querySelector(\".estimated-cost\");\n    if (costDisplay) {\n      costDisplay.textContent = `Estimated cost: $${estimatedCost}`;\n    }\n  }\n\n  showWelcomeMessage() {\n    console.log(\"🎉 ProspectPro Enhanced Error Tracking Version Ready!\");\n  }\n\n  async exportToCsv() {\n    // Export functionality remains the same\n    if (!this.lastSearchCampaignId) {\n      this.showError(\"No campaign data to export\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        `${this.supabase.supabaseUrl}/functions/v1/campaign-export/${this.lastSearchCampaignId}`,\n        {\n          headers: {\n            Authorization: `Bearer ${this.supabase.supabaseKey}`,\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`Export failed: ${response.statusText}`);\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.style.display = \"none\";\n      a.href = url;\n      a.download = `${this.lastSearchCampaignName}_leads.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      console.log(\"✅ CSV export completed\");\n    } catch (error) {\n      console.error(\"❌ Export error:\", error);\n      this.showError(`Export failed: ${error.message}`);\n    }\n  }\n}\n\n// Initialize the application\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  console.log(\n    \"🚀 DOM loaded, initializing ProspectPro Enhanced Error Tracking...\"\n  );\n  try {\n    window.prospectPro = new ProspectProSupabase();\n    console.log(\"✅ ProspectPro initialized successfully\");\n  } catch (error) {\n    console.error(\"🚨 CRITICAL: Failed to initialize ProspectPro:\", error);\n    alert(\"Critical error: \" + error.message);\n  }\n});\n\n// Export for testing\nwindow.ProspectProSupabase = ProspectProSupabase;\n"}}},
{"type":"measure","name":"lsp.did_open","count":49,"duration":2.823},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":17,"duration":0.148},
{"type":"mark","name":"lsp.did_open","count":50,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html","languageId":"html","version":1,"text":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ProspectPro - Supabase-First Lead Discovery</title>\n    <style>\n      * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n      }\n\n      body {\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n          sans-serif;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        min-height: 100vh;\n        padding: 20px;\n      }\n\n      .container {\n        max-width: 1200px;\n        margin: 0 auto;\n        background: white;\n        border-radius: 20px;\n        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n        overflow: hidden;\n      }\n\n      .header {\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        padding: 30px;\n        text-align: center;\n      }\n\n      .header h1 {\n        font-size: 2.5rem;\n        margin-bottom: 10px;\n        font-weight: 700;\n      }\n\n      .header p {\n        opacity: 0.9;\n        font-size: 1.1rem;\n      }\n\n      .nav-tabs {\n        display: flex;\n        background: #f8f9fa;\n        border-bottom: 1px solid #dee2e6;\n      }\n\n      .nav-tab {\n        flex: 1;\n        padding: 15px 20px;\n        background: none;\n        border: none;\n        cursor: pointer;\n        font-size: 1rem;\n        transition: all 0.3s ease;\n      }\n\n      .nav-tab.active {\n        background: white;\n        border-bottom: 3px solid #667eea;\n        color: #667eea;\n        font-weight: 600;\n      }\n\n      .page-content {\n        padding: 40px;\n        min-height: 500px;\n      }\n\n      .search-form {\n        max-width: 600px;\n        margin: 0 auto;\n      }\n\n      .form-group {\n        margin-bottom: 25px;\n      }\n\n      .form-group label {\n        display: block;\n        margin-bottom: 8px;\n        font-weight: 600;\n        color: #333;\n      }\n\n      .form-group input,\n      .form-group select {\n        width: 100%;\n        padding: 15px;\n        border: 2px solid #e1e5e9;\n        border-radius: 10px;\n        font-size: 1rem;\n        transition: border-color 0.3s ease;\n      }\n\n      .form-group input:focus,\n      .form-group select:focus {\n        outline: none;\n        border-color: #667eea;\n      }\n\n      .quantity-control {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n      }\n\n      .quantity-slider {\n        flex: 1;\n      }\n\n      .quantity-display {\n        background: #667eea;\n        color: white;\n        padding: 10px 20px;\n        border-radius: 25px;\n        font-weight: 600;\n        min-width: 80px;\n        text-align: center;\n      }\n\n      .lead-quantity-buttons {\n        display: flex;\n        gap: 10px;\n        margin-top: 10px;\n        justify-content: center;\n      }\n\n      .lead-quantity-btn {\n        background: #e9ecef;\n        border: 2px solid #dee2e6;\n        color: #495057;\n        padding: 8px 16px;\n        border-radius: 20px;\n        cursor: pointer;\n        font-weight: 500;\n        transition: all 0.2s ease;\n      }\n\n      .lead-quantity-btn:hover {\n        background: #667eea;\n        border-color: #667eea;\n        color: white;\n      }\n\n      .lead-quantity-btn.active {\n        background: #667eea;\n        border-color: #667eea;\n        color: white;\n      }\n\n      .cost-estimate {\n        background: #f8f9fa;\n        padding: 20px;\n        border-radius: 10px;\n        text-align: center;\n        margin: 20px 0;\n      }\n\n      .cost-estimate h3 {\n        color: #333;\n        margin-bottom: 10px;\n      }\n\n      .cost-amount {\n        font-size: 2rem;\n        font-weight: 700;\n        color: #28a745;\n      }\n\n      .btn {\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        border: none;\n        padding: 15px 30px;\n        border-radius: 10px;\n        font-size: 1.1rem;\n        font-weight: 600;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        width: 100%;\n      }\n\n      .btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);\n      }\n\n      .btn:disabled {\n        opacity: 0.6;\n        cursor: not-allowed;\n        transform: none;\n      }\n\n      .btn-secondary {\n        background: #6c757d;\n        color: white;\n        padding: 10px 20px;\n        font-size: 0.9rem;\n        width: auto;\n      }\n\n      .campaign-progress {\n        display: none;\n        text-align: center;\n        padding: 30px;\n        background: #f8f9fa;\n        border-radius: 10px;\n        margin: 20px 0;\n      }\n\n      .progress-spinner {\n        width: 50px;\n        height: 50px;\n        border: 5px solid #e1e5e9;\n        border-top: 5px solid #667eea;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n        margin: 0 auto 20px;\n      }\n\n      @keyframes spin {\n        0% {\n          transform: rotate(0deg);\n        }\n        100% {\n          transform: rotate(360deg);\n        }\n      }\n\n      .results {\n        display: none;\n        margin-top: 30px;\n      }\n\n      .results-header {\n        background: #f8f9fa;\n        padding: 25px;\n        border-radius: 10px;\n        margin-bottom: 25px;\n      }\n\n      .results-header h3 {\n        color: #333;\n        margin-bottom: 15px;\n      }\n\n      .results-stats {\n        display: flex;\n        gap: 20px;\n        flex-wrap: wrap;\n        margin-bottom: 20px;\n      }\n\n      .stat-item {\n        padding: 10px 15px;\n        background: white;\n        border-radius: 8px;\n        border-left: 4px solid #667eea;\n      }\n\n      .results-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n        gap: 20px;\n      }\n\n      .business-card {\n        background: white;\n        border: 1px solid #e1e5e9;\n        border-radius: 15px;\n        padding: 25px;\n        transition: all 0.3s ease;\n        position: relative;\n      }\n\n      .business-card:hover {\n        transform: translateY(-5px);\n        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);\n      }\n\n      .card-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: 20px;\n      }\n\n      .business-name {\n        color: #333;\n        font-size: 1.2rem;\n        margin: 0;\n        flex: 1;\n        margin-right: 15px;\n      }\n\n      .confidence-score {\n        background: #28a745;\n        color: white;\n        padding: 8px 12px;\n        border-radius: 20px;\n        text-align: center;\n        min-width: 70px;\n      }\n\n      .confidence-score.medium {\n        background: #ffc107;\n        color: #333;\n      }\n\n      .confidence-score.low {\n        background: #dc3545;\n      }\n\n      .score-value {\n        font-weight: 700;\n        font-size: 1.1rem;\n      }\n\n      .score-label {\n        display: block;\n        font-size: 0.8rem;\n        opacity: 0.8;\n      }\n\n      .contact-info {\n        margin-bottom: 15px;\n      }\n\n      .info-item {\n        display: flex;\n        align-items: center;\n        margin-bottom: 10px;\n        gap: 10px;\n      }\n\n      .info-icon {\n        font-size: 1.2rem;\n        width: 25px;\n      }\n\n      .info-text {\n        color: #666;\n        word-break: break-word;\n      }\n\n      .info-link {\n        color: #667eea;\n        text-decoration: none;\n      }\n\n      .info-link:hover {\n        text-decoration: underline;\n      }\n\n      .recommendation {\n        background: #e7f3ff;\n        padding: 12px;\n        border-radius: 8px;\n        border-left: 4px solid #667eea;\n        font-size: 0.9rem;\n        color: #333;\n      }\n\n      .notification {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        padding: 15px 20px;\n        border-radius: 10px;\n        background: #28a745;\n        color: white;\n        z-index: 1000;\n        display: flex;\n        align-items: center;\n        gap: 10px;\n        max-width: 400px;\n        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);\n      }\n\n      .notification.warning {\n        background: #ffc107;\n        color: #333;\n      }\n\n      .notification.error {\n        background: #dc3545;\n      }\n\n      .notification button {\n        background: none;\n        border: none;\n        color: inherit;\n        font-size: 1.2rem;\n        cursor: pointer;\n        padding: 0;\n        margin-left: auto;\n      }\n\n      .error-results,\n      .insufficient-results {\n        text-align: center;\n        padding: 40px;\n        background: #f8f9fa;\n        border-radius: 10px;\n      }\n\n      .error-results h3,\n      .insufficient-results h3 {\n        color: #333;\n        margin-bottom: 20px;\n      }\n\n      .suggestions {\n        background: white;\n        padding: 20px;\n        border-radius: 10px;\n        margin: 20px 0;\n        text-align: left;\n      }\n\n      .suggestions ul {\n        list-style-type: none;\n        padding-left: 0;\n      }\n\n      .suggestions li {\n        padding: 8px 0;\n        border-bottom: 1px solid #e1e5e9;\n      }\n\n      .suggestions li:before {\n        content: \"💡 \";\n        margin-right: 10px;\n      }\n\n      .admin-dashboard {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n        gap: 20px;\n        margin-bottom: 30px;\n      }\n\n      .dashboard-card {\n        background: white;\n        padding: 25px;\n        border-radius: 15px;\n        border: 1px solid #e1e5e9;\n        text-align: center;\n      }\n\n      .dashboard-card h3 {\n        color: #333;\n        margin-bottom: 10px;\n      }\n\n      .dashboard-value {\n        font-size: 2rem;\n        font-weight: 700;\n        color: #667eea;\n        margin-bottom: 5px;\n      }\n\n      .dashboard-label {\n        color: #666;\n        font-size: 0.9rem;\n      }\n\n      .recent-campaigns {\n        background: white;\n        border-radius: 15px;\n        padding: 25px;\n        border: 1px solid #e1e5e9;\n      }\n\n      .campaign-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 15px 0;\n        border-bottom: 1px solid #f0f0f0;\n      }\n\n      .campaign-item:last-child {\n        border-bottom: none;\n      }\n\n      .campaign-info {\n        flex: 1;\n      }\n\n      .campaign-info strong {\n        display: block;\n        color: #333;\n        margin-bottom: 5px;\n      }\n\n      .campaign-location,\n      .campaign-date {\n        font-size: 0.9rem;\n        color: #666;\n        margin-right: 15px;\n      }\n\n      .campaign-stats {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n      }\n\n      .campaign-leads,\n      .campaign-cost {\n        font-size: 0.9rem;\n        color: #666;\n      }\n\n      .btn-export {\n        background: #28a745;\n        color: white;\n        border: none;\n        padding: 6px 12px;\n        border-radius: 6px;\n        font-size: 0.8rem;\n        cursor: pointer;\n      }\n\n      @media (max-width: 768px) {\n        .container {\n          margin: 10px;\n          border-radius: 15px;\n        }\n\n        .page-content {\n          padding: 20px;\n        }\n\n        .results-stats {\n          flex-direction: column;\n          gap: 10px;\n        }\n\n        .results-grid {\n          grid-template-columns: 1fr;\n        }\n\n        .campaign-item {\n          flex-direction: column;\n          align-items: flex-start;\n          gap: 10px;\n        }\n\n        .campaign-stats {\n          align-self: stretch;\n          justify-content: space-between;\n        }\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"header\">\n        <h1>🎯 ProspectPro</h1>\n        <p>Supabase-First Lead Discovery Platform</p>\n      </div>\n\n      <div class=\"nav-tabs\">\n        <button\n          class=\"nav-tab active\"\n          onclick=\"prospectProApp?.showPage('discoveryPage'); this.parentElement.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active')); this.classList.add('active')\"\n        >\n          🔍 Discovery\n        </button>\n        <button\n          class=\"nav-tab\"\n          onclick=\"prospectProApp?.showSettings(); this.parentElement.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active')); this.classList.add('active')\"\n        >\n          ⚙️ Dashboard\n        </button>\n      </div>\n\n      <!-- Discovery Page -->\n      <div id=\"discoveryPage\" class=\"page-content\">\n        <div class=\"search-form\">\n          <div class=\"form-group\">\n            <label for=\"business-type\">Business Type</label>\n            <input\n              type=\"text\"\n              id=\"business-type\"\n              placeholder=\"e.g., restaurant, retail store, dental office\"\n            />\n            <select id=\"categorySelect\" style=\"margin-top: 10px\">\n              <option value=\"\">Or choose from common categories...</option>\n              <option value=\"restaurant\">🍽️ Restaurant</option>\n              <option value=\"coffee shop\">☕ Coffee Shop</option>\n              <option value=\"retail store\">🛍️ Retail Store</option>\n              <option value=\"gym\">💪 Gym</option>\n              <option value=\"fitness center\">🏋️ Fitness Center</option>\n              <option value=\"salon\">💇 Hair Salon</option>\n              <option value=\"spa\">🧖 Spa</option>\n              <option value=\"dental office\">🦷 Dental Office</option>\n              <option value=\"law firm\">⚖️ Law Firm</option>\n              <option value=\"accounting firm\">📊 Accounting Firm</option>\n              <option value=\"real estate\">🏠 Real Estate</option>\n              <option value=\"auto repair\">🚗 Auto Repair</option>\n              <option value=\"veterinary clinic\">🐕 Veterinary Clinic</option>\n              <option value=\"medical practice\">🏥 Medical Practice</option>\n              <option value=\"hotel\">🏨 Hotel</option>\n              <option value=\"bar\">🍺 Bar</option>\n              <option value=\"pharmacy\">💊 Pharmacy</option>\n              <option value=\"bookstore\">📚 Bookstore</option>\n            </select>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"location\">Location</label>\n            <input\n              type=\"text\"\n              id=\"location\"\n              placeholder=\"e.g., San Francisco, CA or New York, NY\"\n            />\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"lead-quantity\">Number of Leads</label>\n            <div class=\"quantity-control\">\n              <input\n                type=\"range\"\n                id=\"lead-quantity\"\n                class=\"quantity-slider\"\n                min=\"1\"\n                max=\"20\"\n                value=\"5\"\n              />\n              <div class=\"quantity-display\">\n                <span id=\"lead-quantity-display\">5</span> leads\n              </div>\n            </div>\n\n            <!-- Quick select buttons for common quantities -->\n            <div class=\"lead-quantity-buttons\">\n              <button type=\"button\" class=\"lead-quantity-btn\">3</button>\n              <button type=\"button\" class=\"lead-quantity-btn active\">5</button>\n              <button type=\"button\" class=\"lead-quantity-btn\">10</button>\n              <button type=\"button\" class=\"lead-quantity-btn\">15</button>\n            </div>\n          </div>\n\n          <div class=\"cost-estimate\">\n            <h3>Estimated Cost</h3>\n            <div class=\"cost-amount\" id=\"estimatedCost\">$0.42</div>\n          </div>\n\n          <button id=\"start-discovery\" class=\"btn\">🚀 Search Businesses</button>\n        </div>\n\n        <!-- Campaign Progress -->\n        <div\n          id=\"campaign-progress\"\n          class=\"campaign-progress\"\n          style=\"display: none\"\n        >\n          <div class=\"progress-spinner\"></div>\n          <h3>Discovering businesses...</h3>\n          <p id=\"progressText\">Initializing search parameters...</p>\n        </div>\n\n        <!-- Results Container -->\n        <div id=\"search-results\" style=\"display: none\">\n          <div id=\"results-container\"></div>\n          <button id=\"export-csv\" style=\"display: none\">\n            📥 Export to CSV\n          </button>\n        </div>\n      </div>\n\n      <!-- Settings/Dashboard Page -->\n      <div id=\"settingsPage\" class=\"page-content\" style=\"display: none\">\n        <h2>📊 Dashboard & Statistics</h2>\n\n        <div class=\"admin-dashboard\">\n          <div class=\"dashboard-card\">\n            <h3>Total Campaigns</h3>\n            <div class=\"dashboard-value\" id=\"totalCampaigns\">0</div>\n            <div class=\"dashboard-label\">Completed</div>\n          </div>\n\n          <div class=\"dashboard-card\">\n            <h3>Total Leads</h3>\n            <div class=\"dashboard-value\" id=\"totalLeads\">0</div>\n            <div class=\"dashboard-label\">Discovered</div>\n          </div>\n\n          <div class=\"dashboard-card\">\n            <h3>Avg Confidence</h3>\n            <div class=\"dashboard-value\" id=\"avgConfidence\">0%</div>\n            <div class=\"dashboard-label\">Quality Score</div>\n          </div>\n\n          <div class=\"dashboard-card\">\n            <h3>Total Spent</h3>\n            <div class=\"dashboard-value\" id=\"totalCost\">$0.00</div>\n            <div class=\"dashboard-label\">API Costs</div>\n          </div>\n        </div>\n\n        <div class=\"recent-campaigns\">\n          <h3>📋 Recent Campaigns</h3>\n          <div id=\"recentCampaigns\">\n            <p style=\"text-align: center; color: #666; padding: 20px\">\n              No campaigns yet. Start your first discovery!\n            </p>\n          </div>\n        </div>\n\n        <div id=\"currentSessionStats\" style=\"margin-top: 30px\"></div>\n      </div>\n    </div>\n\n    <!-- Load Supabase-First JavaScript -->\n    <script type=\"module\" src=\"supabase-app-enhanced.js\"></script>\n\n    <script>\n      // Update quantity display when slider changes\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const quantitySlider = document.getElementById(\"lead-quantity\");\n        const quantityDisplay = document.getElementById(\n          \"lead-quantity-display\"\n        );\n\n        if (quantitySlider && quantityDisplay) {\n          quantitySlider.oninput = () => {\n            quantityDisplay.textContent = quantitySlider.value;\n            // Trigger cost update if app is loaded\n            if (window.prospectProApp) {\n              window.prospectProApp.updateCostEstimate();\n            }\n          };\n        }\n\n        // Handle category selection\n        const categorySelect = document.getElementById(\"categorySelect\");\n        const businessTypeInput = document.getElementById(\"business-type\");\n\n        if (categorySelect && businessTypeInput) {\n          categorySelect.addEventListener(\"change\", (e) => {\n            if (e.target.value) {\n              businessTypeInput.value = e.target.value;\n              // Reset the select to placeholder\n              categorySelect.value = \"\";\n              // Trigger cost update if app is loaded\n              if (window.prospectProApp) {\n                window.prospectProApp.updateCostEstimate();\n              }\n            }\n          });\n        }\n      });\n    </script>\n  </body>\n</html>\n"}}},
{"type":"measure","name":"lsp.did_open","count":50,"duration":0.541},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":2,"duration":0.011},
{"type":"mark","name":"lsp.document_symbol","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"mark","name":"lsp.code_action","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":0,"character":0},"end":{"line":24,"character":1}}}},
{"type":"mark","name":"lsp.document_symbol","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"mark","name":"lsp.folding_range","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"mark","name":"lsp.document_symbol","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"mark","name":"lsp.inlay_hint","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":0,"character":0},"end":{"line":24,"character":1}}}},
{"type":"mark","name":"lsp.code_lens","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"mark","name":"lsp.document_symbol","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"mark","name":"lsp.code_action","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.folding_range","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"mark","name":"lsp.document_symbol","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"mark","name":"lsp.code_action","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":0,"character":0},"end":{"line":24,"character":1}}}},
{"type":"mark","name":"lsp.document_symbol","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"mark","name":"lsp.code_action","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"mark","name":"lsp.folding_range","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"mark","name":"lsp.code_action","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_open","count":51,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/frontend/package.json","languageId":"json","version":1,"text":"{\n  \"name\": \"prospectpro-frontend\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc && vite build\",\n    \"preview\": \"vite preview\",\n    \"lint\": \"eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0\",\n    \"type-check\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@supabase/supabase-js\": \"^2.39.0\",\n    \"@tanstack/react-query\": \"^5.17.0\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-router-dom\": \"^6.20.1\",\n    \"zustand\": \"^4.4.7\",\n    \"recharts\": \"^2.8.0\",\n    \"lucide-react\": \"^0.294.0\",\n    \"clsx\": \"^2.0.0\",\n    \"tailwind-merge\": \"^2.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.2.43\",\n    \"@types/react-dom\": \"^18.2.17\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.14.0\",\n    \"@typescript-eslint/parser\": \"^6.14.0\",\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"autoprefixer\": \"^10.4.16\",\n    \"eslint\": \"^8.55.0\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.5\",\n    \"postcss\": \"^8.4.32\",\n    \"tailwindcss\": \"^3.3.6\",\n    \"typescript\": \"^5.2.2\",\n    \"vite\": \"^5.0.8\"\n  }\n}"}}},
{"type":"measure","name":"lsp.did_open","count":51,"duration":0.052},
{"type":"mark","name":"lsp.inlay_hint","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":0,"character":0},"end":{"line":24,"character":1}}}},
{"type":"mark","name":"lsp.code_lens","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"mark","name":"lsp.code_action","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_open","count":52,"args":{"textDocument":{"uri":"vscode-userdata:/c%3A/Users/Alext/AppData/Roaming/Code/User/settings.json","languageId":"jsonc","version":1,"text":"{\n  \"window.autoDetectColorScheme\": true,\n  \"github.copilot.nextEditSuggestions.enabled\": true,\n  \"security.workspace.trust.untrustedFiles\": \"open\",\n  \"python.analysis.typeCheckingMode\": \"standard\",\n  \"mssql.connectionGroups\": [\n    {\n      \"name\": \"ROOT\",\n      \"id\": \"6DE9C5E9-9E3A-47B4-8BEA-50B0A7E5E108\"\n    }\n  ],\n  \"database-client.autoSync\": true,\n  \"git.openRepositoryInParentFolders\": \"always\",\n  \"editor.cursorBlinking\": \"expand\",\n  \"editor.wordWrap\": \"on\",\n  \"files.autoSave\": \"onWindowChange\",\n  \"editor.bracketPairColorization.independentColorPoolPerBracketType\": true,\n  \"editor.formatOnSave\": true,\n  \"workbench.iconTheme\": \"vira-icons-teal\",\n  \"mssql.autoDisableNonTSqlLanguageService\": true,\n  \"git.enableSmartCommit\": true,\n  \"git.confirmSync\": false,\n  \"git.autofetch\": true,\n  \"chat.tools.terminal.autoApprove\": {\n    \"0\": true,\n    \"1\": true,\n    \"git push\": true,\n    \"git add\": true,\n    \"git commit\": true,\n    \"node\": true,\n    \"Move-Item\": true,\n    \"Copy-Item\": true,\n    \"script\\\\.\": true,\n    \"old\": true,\n    \"temp\": true,\n    \"backup\\\"\": true,\n    \"nslookup\": true,\n    \"Remove-Item\": true,\n    \"Rename-Item\": true,\n    \"Invoke-WebRequest\": true,\n    \"\\\"apikey\\\"=\\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ2eGRwcmdmbHR6Ymx3dnBlZHB4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjQ3MTgzOTksImV4cCI6MjA0MDI5NDM5OX0.TZ9kR6FfNvnZMJF9P6NX6rYSVfM3LRw7BfGK7U6YXwc\\\"}\": true,\n    \"\\\"apikey\\\"=\\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ2eGRwcmdmbHR6Ymx3dnBlZHB4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTcyNDcxODM5OSwiZXhwIjoyMDQwMjk0Mzk5fQ.sOZBWJfb4MvqA2B6dxPCUaGr3zqZCXF7tHv1NjM5QwE\\\"}\": true,\n    \"git rebase\": true,\n    \"npm start\": true,\n    \"const\": true,\n    \"console.log('✅\": true,\n    \"\\\"\": true,\n    \"try\": true,\n    \"}\": true,\n    \"}\\\"\": true,\n    \"powershell\": true,\n    \"Test-Path\": true,\n    \"Start-Process\": true,\n    \"git rm\": true,\n    \"git reset\": true,\n    \"git commit -m \\\"fix: resolve Railway deployment crashes with robust import patterns\\n\\n- Fix api/dashboard-export.js with try/catch fallback for module resolution\\n- Remove problematic files with secrets (Grafana API tokens)  \\n- Add comprehensive deployment documentation and health checks\\n- Implement monitoring dashboard with HTML/CSS/JS instead of Grafana\\n- Add Railway troubleshooting tools and deployment guides\\n- Update package.json with Railway-compatible configuration\\n\\nResolves module import errors and GitHub secret scanning blocks.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"(async\": true,\n    \"{\": true,\n    \"if\": true,\n    \"console.log('📊\": true,\n    \"git commit -m \\\"optimize: leverage Railway analytics, simplify monitoring architecture\\n\\n🎯 Strategic Changes:\\n- Replace complex custom monitoring with Railway's built-in analytics\\n- Focus only on ProspectPro business metrics (campaigns, leads, costs)\\n- Remove redundant infrastructure monitoring (Railway handles this)\\n- Simplify dashboard to essential business KPIs only\\n\\n✅ Benefits:\\n- 70% reduction in monitoring code complexity\\n- Better reliability using Railway's native capabilities\\n- Focus on business value rather than infrastructure metrics\\n- Faster deployment and fewer moving parts\\n\\n🚀 Railway Integration:\\n- Use Railway dashboard for: CPU, Memory, Network, Logs, Uptime\\n- Custom dashboard for: Campaign success, Lead qualification, API costs\\n- Simplified health checks focused on business logic\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"npm outdated\": true,\n    \"=20.0.0\": true,\n    \"npm install\": true,\n    \"Enrichment\": true,\n    \"Validation\": true,\n    \"Export)\": true,\n    \"git remote\": true,\n    \"git fetch\": true,\n    \"git ls-files\": true,\n    \"california\\\\\": true,\n    \"newyork\\\\\": true,\n    \"ny-tax\\\\\": true,\n    \"UPDATED_DEPLOYMENT\\\"\": true,\n    \"california\": true,\n    \"newyork\": true,\n    \"ny-tax\": true,\n    \"UPDATED_DEPLOYMENT)\\\"\": true,\n    \"git rev-parse\": true,\n    \"git add config/supabase.js server.js && git commit -m \\\"feat(diagnostics): enhanced Supabase diagnostics, /diag endpoint, improved health reporting\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git add server.js config/supabase.js && git commit -m \\\"feat(diagnostics): degraded mode, detailed error + network probes, periodic retries, richer /diag\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl\": true,\n    \"ALLOW_DEGRADED_START=true\": true,\n    \"export\": true,\n    \"kill\": true,\n    \"unset\": true,\n    \"global\": true,\n    \"PORT=3000\": true,\n    \"killall\": true,\n    \"git add server.js railway.toml && git commit -m \\\"fix(deployment): bind to 0.0.0.0 for Railway Edge Proxy, remove hardcoded PORT override\\n\\n- Railway requires apps to listen on 0.0.0.0, not localhost\\n- Remove PORT=8080 override in railway.toml to let Railway set it dynamically  \\n- Default to PORT 3000 to match Railway conventions\\n- This should resolve 502 Bad Gateway errors from Railway load balancer\\\" && git push origin main\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"SUPABASE_URL=test\": true,\n    \"SUPABASE_URL=https://test.supabase.co\": true,\n    \"pkill\": true,\n    \"cd /workspaces/ProspectPro && git add -A && git commit -m \\\"fix: Update Railway networking for 502 errors + align docs with sb_secret_* key format\\n\\n- Fix Express server to bind 0.0.0.0:PORT (Railway requirement) \\n- Remove hardcoded PORT=8080 from railway.toml (use dynamic PORT)\\n- Update all documentation to prioritize SUPABASE_SECRET_KEY over legacy keys\\n- Remove deprecated UPDATED_DEPLOYMENT_GUIDE.md\\n- Update validation scripts to support new key precedence\\n- Maintain backward compatibility for existing deployments\\n- Align docs with user's actual Railway setup (port 8038, sb_secret_* keys)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git add railway.toml && git commit -m \\\"fix: Clean up railway.toml - remove invalid configuration sections\\n\\n- Remove [observability] section (not supported by Railway)\\n- Remove [admin] section (not supported by Railway) \\n- Keep only valid Railway configuration sections\\n- Simplify environment variable documentation\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"SUPABASE_URL=https://example.supabase.co\": true,\n    \"RLS\": true,\n    \"service\": true,\n    \"anon\": true,\n    \"publishable)\\\\n-\": true,\n    \"improve\": true,\n    \"cd /workspaces/ProspectPro && git add server.js database/rls-hardening.sql .env.example && git commit -m \\\"chore: add runtime introspection & RLS hardening guidance\\\\n\\\\n- Added /env-snapshot, request logging, memory stats in /diag\\\\n- Added port fallback warning\\\\n- Added database/rls-hardening.sql with policy templates\\\\n- Updated .env.example (avoid PORT on Railway)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git add server.js database/rls-hardening.sql && git commit -m \\\"feat: instrumentation (/env-snapshot /loop-metrics) + RLS hardening script placeholder\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"getLastSupabaseDiagnostics,\": true,\n    \"console.log('Functions\": true,\n    \"BootPhaseDebugger\": true,\n    \"ProspectProMetrics\": true,\n    \"SecurityHardening\": true,\n    \"npm list\": true,\n    \"timeout\": true,\n    \"rm\": true,\n    \"psql\": true,\n    \"/dev/null\": true,\n    \"gh\": true,\n    \"console.log('=====================================================')\": true,\n    \"console.log('')\": true,\n    \"console.log('\": true,\n    \"console.log('🎯\": true,\n    \"console.log('1.\": true,\n    \"console.log('2.\": true,\n    \"console.log('3.\": true,\n    \"console.log('🎉\": true,\n    \"console.log('🔍\": true,\n    \"let\": true,\n    \"//\": true,\n    \"[]).length\": true,\n    \"issues.push(\\\\`⚠️\": true,\n    \"openParens}\": true,\n    \"closeParens}\": true,\n    \"')\": true,\n    \"!lastStatement.startsWith('--'))\": true,\n    \"issues.push('⚠️\": true,\n    \"console.log('❌\": true,\n    \"issues.forEach(issue\": true,\n    \"console.log(issue))\": true,\n    \"issues.push('Unbalanced\": true,\n    \"issues.push('system_settings\": true,\n    \"issues.push('Found\": true,\n    \"mv\": true,\n    \"true\": true,\n    \"createClient\": true,\n    \"console.log('🔗\": true,\n    \"supabase.from('information_schema.tables').select('table_name').limit(1).then(result\": true,\n    \"}).catch(err\": true,\n    \"console.error('❌\": true,\n    \"SUPABASE_URL=https://sriycekxdqnesdsgwiuc.supabase.co\": true,\n    \"git branch\": true,\n    \"git checkout\": true,\n    \".env\": true,\n    \"source\": true,\n    \"xargs)\": true,\n    \"#SUPABASE_SERVICE_ROLE_KEY}\\\"\": true,\n    \"cp\": true,\n    \"modules/security-hardening.js\": true,\n    \"'EOF'\": true,\n    \"class\": true,\n    \"constructor(options\": true,\n    \"})\": true,\n    \"this.options\": true,\n    \"enableSecureHeaders:\": true,\n    \"this.options.adminTokens.add(process.env.PERSONAL_ACCESS_TOKEN)\": true,\n    \"console.log('🛡️\": true,\n    \"app.use((req,\": true,\n    \"res.removeHeader('X-Powered-By')\": true,\n    \"res.setHeader('X-Frame-Options',\": true,\n    \"res.setHeader('X-Content-Type-Options',\": true,\n    \"res.setHeader('X-ProspectPro-Security',\": true,\n    \"next()\": true,\n    \"return\": true,\n    \"req.headers['x-admin-token']\": true,\n    \"!this.options.adminTokens.has(token))\": true,\n    \"error:\": true,\n    \"authenticated:\": true,\n    \"process.env.NODE_ENV\": true,\n    \"status:\": true,\n    \"secureHeaders:\": true,\n    \"function\": true,\n    \"globalSecurity\": true,\n    \"security.applySecurityMiddleware(app)\": true,\n    \"EOF\": true,\n    \"general:\": true,\n    \"res.send\": true,\n    \"=\": true,\n    \"console.warn(`⚠️\": true,\n    \"res.statusCode}\": true,\n    \"req.method}\": true,\n    \"req.path}`)\": true,\n    \"middleware.general.forEach(mw\": true,\n    \"app.use(mw))\": true,\n    \"app.use(this.getSecurityLogger())\": true,\n    \"'https://sriycekxdqnesdsgwiuc.supabase.co'\": true,\n    \"'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Nzk2NTc4OSwiZXhwIjoyMDczNTQxNzg5fQ.V2wlvxGC1_SshWudFw27ZWmQjuxj0UtXANXrZmt4OjY'\": true,\n    \"async\": true,\n    \"data,\": true,\n    \"process.exit(success\": true,\n    \"testConnection\": true,\n    \"testConnection().then(result\": true,\n    \"supabase.auth.getSession().then(result\": true,\n    \"error.message.includes('relation')\": true,\n    \"error.message.includes('does\": true,\n    \"console.log('-\": true,\n    \"require('./config/supabase').testConnection().then(result\": true,\n    \"console.error('Database\": true,\n    \"node -e \\\"console.log('Testing environment...'); require('./config/supabase').testConnection().then(result => console.log('Database test:', result)).catch(err => console.error('Database error:', err))\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"node -e \\\"require('dotenv').config(); console.log('Testing with dotenv...'); require('./config/supabase').testConnection().then(result => console.log('Database test:', result.success ? 'SUCCESS' : 'FAILED', result)).catch(err => console.error('Database error:', err))\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"supabase.getSupabaseClient().from('campaigns').select('count').limit(1).then(result\": true,\n    \"console.error('Table\": true,\n    \"k.includes('SUPABASE')))\": true,\n    \"result.success)\": true,\n    \"console.error('Test\": true,\n    \"powershell -Command \\\"try { $response = Invoke-WebRequest -Uri 'http://localhost:3000/health' -UseBasicParsing; Write-Host 'Health check: Status' $response.StatusCode; Write-Host 'Response:' $response.Content } catch { Write-Host 'Error:' $_.Exception.Message }\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -s http://localhost:3000/health | ConvertFrom-Json\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"require('./config/supabase').testConnection().then(r=\": true,\n    \"console.log(JSON.stringify(r,\": true,\n    \"}).catch(e=\": true,\n    \"Invoke-RestMethod\": true,\n    \"ConvertTo-Json\": true,\n    \"Get-Process\": true,\n    \"Stop-Process\": true,\n    \"sh\": true,\n    \"tar\": true,\n    \"sudo\": true,\n    \"./supabase\": true,\n    \".gitignore\": true,\n    \"git commit -m \\\"feat: major refactor - integrate real API pipeline with zero fake data\\n\\n- Fix devcontainer Supabase CLI installation to use official installer\\n- Implement 4-stage lead processing pipeline (Discovery → Enrichment → Validation → Export)  \\n- Add comprehensive real data validation with confidence scoring\\n- Integrate Google Places, Hunter.io, NeverBounce APIs\\n- Add cost optimization and budget tracking\\n- Enhance monitoring and webhook processing\\n- Update all documentation and deployment configs\\n- Add build artifacts to gitignore\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"supabase\": true,\n    \"then\": true,\n    \"console.log('⚠️\": true,\n    \"console.log('💡\": true,\n    \"npm run dev\": true,\n    \"DEBUG=*\": true,\n    \"supabase_cli)\\\"\": true,\n    \"npm i\": true,\n    \"npx\": true,\n    \"git add . && git commit -m \\\"fix: properly configure Supabase CLI installation in devcontainer\\n\\n- Use npm dev dependency installation method (npx supabase)\\n- Remove manual binary workarounds  \\n- Follow official Supabase CLI installation guidelines\\n- Clean up build artifacts and temporary files\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git merge\": true,\n    \"newgrp\": true,\n    \"deno\": true,\n    \"docker --version\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"docker ps\": true,\n    \"lsof\": true,\n    \"curl -X POST http://localhost:8000 -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"italian restaurants\\\", \\\"location\\\": \\\"New York\\\", \\\"budgetCents\\\": 100}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"jq\": true,\n    \"sleep 2 && curl -s -X POST http://localhost:8000 -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"italian restaurants\\\", \\\"location\\\": \\\"New York\\\", \\\"budgetCents\\\": 100}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -s -X POST http://localhost:8000 -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"coffee shops\\\", \\\"budgetCents\\\": 50}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -s -X POST http://localhost:8000 -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"gym\\\", \\\"budgetCents\\\": 2}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"sleep 2 && curl -X POST http://localhost:8080 -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\":\\\"restaurants\\\",\\\"location\\\":\\\"San Francisco, CA\\\"}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git add . && git commit -m \\\"feat: implement business discovery Edge Function with local testing\\n\\n✅ Built ProspectPro business discovery Edge Function:\\n- Real API integration with Google Places (production ready)\\n- Zero fake data policy enforced\\n- Confidence scoring for business validation (70%+ threshold)\\n- Cost tracking and optimization ($0.032 per search)\\n- CORS support for cross-origin requests\\n- Comprehensive error handling\\n\\n✅ Created local testing infrastructure:\\n- Standalone test server for development\\n- Mock data pipeline for offline testing\\n- JSON API responses with business metadata\\n- Quality scoring (address, rating, reviews, website presence)\\n\\n✅ Validated Edge Function logic:\\n- Successfully processes business discovery requests\\n- Returns qualified leads with 100% confidence scores\\n- Proper TypeScript interfaces and error handling\\n- Ready for Supabase Edge Runtime deployment\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git add . && git commit -m \\\"feat: complete Edge Functions lead validation pipeline\\n\\n✅ Built Lead Validation Edge Function:\\n- Multi-source validation (websites, emails, phones)\\n- Parallel processing for performance optimization\\n- Configurable validation skipping (website/email checks)\\n- 70% qualification threshold with detailed scoring\\n- Website accessibility testing with HTTP status codes\\n- Email format + domain validation with confidence scoring  \\n- US phone number validation with formatting\\n- Overall lead scoring algorithm (Website 40%, Email 35%, Phone 25%)\\n\\n✅ Comprehensive Testing Infrastructure:\\n- Multi-function test server handling both endpoints\\n- Full test suite covering success/error scenarios\\n- Mock data validation for offline development\\n- Performance metrics and qualification rate tracking\\n- CORS support for cross-origin integration\\n\\n✅ Test Results Summary:\\n- Business Discovery: ✅ 2/2 qualified businesses found (100% confidence)\\n- Lead Validation: ✅ 1/2 leads qualified (50% rate, 100% confidence)\\n- Error Handling: ✅ Proper validation for missing fields\\n- Performance: ✅ Parallel processing, sub-second response times\\n\\n🎯 Ready for production deployment and main app integration!\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"mkdir\": true,\n    \"rmdir\": true,\n    \"git add -A && git commit -m \\\"feat: Deploy Edge Functions to Supabase\\n\\n- Successfully deployed business-discovery-edge and lead-validation-edge\\n- Fixed function directory structure (moved from ./functions to ./supabase/functions)\\n- Updated deno.json configurations with proper imports\\n- Used Management API deployment to avoid Docker-in-Docker issues\\n- Both functions now live at production URLs and are ACTIVE\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"enhanced-state)\\\"\": true,\n    \"zerobounce\": true,\n    \"integration)\\\"\": true,\n    \"COURTLISTENER\": true,\n    \"SOCRATA\": true,\n    \"USPTO)\\\"\": true,\n    \"require('./modules/api-clients/enhanced-state-registry-client')\": true,\n    \"require('./modules/api-clients/zerobounce-client')\": true,\n    \"npm test\": true,\n    \"console.log('\\\\\\\\n🎉\": true,\n    \"chmod\": true,\n    \"./deploy-enhanced-discovery.sh\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"🚀 Enhanced Business Discovery Integration Complete\\n\\n✅ Complete integration of enhanced APIs with Supabase Edge Functions\\n✅ Multi-source validation pipeline with 9 API integrations\\n✅ Cost optimization algorithm with pre-validation scoring\\n✅ Zero fake data policy with government registry validation\\n\\nKey Features Added:\\n- Enhanced State Registry Client (7 government APIs)\\n- ZeroBounce email validation with budget controls\\n- 4-stage validation pipeline with confidence scoring\\n- Complete TypeScript/Deno implementation for edge functions\\n- Comprehensive deployment guide and automation scripts\\n\\nPerformance Improvements:\\n- 40-60% cost reduction through intelligent pre-validation\\n- 60%+ improvement in lead quality with government validation\\n- Real-time cost tracking and budget management\\n- Scalable edge function architecture\\n\\nFiles Added:\\n- supabase/functions/enhanced-business-discovery/index.ts\\n- supabase/functions/_shared/enhanced-state-registry.ts\\n- supabase/functions/_shared/zerobounce.ts\\n- ENHANCED_DEPLOYMENT_GUIDE.md\\n- INTEGRATION_COMPLETE.md\\n- deploy-enhanced-discovery.sh\\n- test-enhanced-discovery.ts\\n\\nReady for production deployment! 🎯\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git commit --no-gpg-sign -m \\\"🚀 Enhanced Business Discovery Integration Complete\\n\\n✅ Complete integration of enhanced APIs with Supabase Edge Functions\\n✅ Multi-source validation pipeline with 9 API integrations  \\n✅ Cost optimization algorithm with pre-validation scoring\\n✅ Zero fake data policy with government registry validation\\n\\nKey Features Added:\\n- Enhanced State Registry Client (7 government APIs)\\n- ZeroBounce email validation with budget controls\\n- 4-stage validation pipeline with confidence scoring\\n- Complete TypeScript/Deno implementation for edge functions\\n- Comprehensive deployment guide and automation scripts\\n\\nPerformance Improvements:\\n- 40-60% cost reduction through intelligent pre-validation\\n- 60%+ improvement in lead quality with government validation\\n- Real-time cost tracking and budget management\\n- Scalable edge function architecture\\n\\nFiles Added:\\n- supabase/functions/enhanced-business-discovery/index.ts\\n- supabase/functions/_shared/enhanced-state-registry.ts\\n- supabase/functions/_shared/zerobounce.ts\\n- ENHANCED_DEPLOYMENT_GUIDE.md\\n- INTEGRATION_COMPLETE.md\\n- deploy-enhanced-discovery.sh\\n- test-enhanced-discovery.ts\\n\\nReady for production deployment! 🎯\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"ts\": true,\n    \"md)$\\\"\": true,\n    \"xargs\": true,\n    \"cd /workspaces/ProspectPro && git commit --no-gpg-sign -m \\\"🧹 Repository Cleanup and Refactoring\\n\\n## Major Cleanup Changes:\\n\\n### Directory Organization:\\n✅ Created `scripts/` directory for utility scripts\\n✅ Moved all test files to `test/` directory\\n✅ Created `docs/archive/` for outdated documentation\\n✅ Organized data mapping files in `docs/`\\n\\n### File Removals:\\n❌ Removed empty files: test-edge-functions.ts, initialize-database.js, simple-setup.js\\n❌ Deleted weird artifacts: 'witch main', pectProProspectPro-1\\n❌ Removed setup-logs/ directory (not needed in version control)\\n\\n### Script Organization:\\n📁 Moved to scripts/: database-setup-helper.js, direct-sql-executor.js, \\n   setup-assistant.js, supabase-validator.js, deploy-enhanced-discovery.sh\\n\\n### Documentation Cleanup:\\n📚 Archived outdated docs: IMPLEMENTATION.md, ENHANCED_APIS_SUMMARY.md,\\n   EDGE_FUNCTIONS_INTEGRATION.md, ENHANCED_INTEGRATION_COMPLETE.md\\n📖 Replaced incorrect Supabase CLI README with comprehensive ProspectPro docs\\n📄 Updated documentation links and structure\\n\\n### Test File Organization:\\n🧪 Consolidated all test files in test/ directory\\n🔬 Organized edge function tests logically\\n\\n### Configuration Updates:\\n⚙️ Enhanced .gitignore with proper exclusions for logs and artifacts\\n🔧 Maintained all critical configuration files\\n\\n## Repository Benefits:\\n- ✅ Clean, logical directory structure\\n- ✅ Proper separation of concerns\\n- ✅ Reduced root directory clutter\\n- ✅ Better organization for development\\n- ✅ Comprehensive, accurate README\\n- ✅ Archived outdated documentation properly\\n\\nThe repository now follows best practices with clear organization and \\ncomprehensive documentation reflecting the current ProspectPro architecture.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \".git'\": true,\n    \"cd /workspaces/ProspectPro && echo '--- git status ---' && git status && echo '--- git remote -v ---' && git remote -v && echo '--- git branch -vv ---' && git branch -vv && echo '--- recent commits ---' && git --no-pager log --oneline --decorate -n 5 && echo '--- fetching origin ---' && git fetch origin && echo '--- status after fetch ---' && git status && echo '--- attempting push ---' && git push origin main\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"setup-assistant\": true,\n    \"direct-sql\": true,\n    \"edge-function)\\\"\": true,\n    \"\\\\.sql$\": true,\n    \"\\\\.csv$\": true,\n    \"\\\\.xlsx$\\\"\": true,\n    \"spec)\\\"\": true,\n    \"setup)\\\"\": true,\n    \"git commit -m \\\"Repository cleanup: Remove redundancies and consolidate structure\\n\\n- Documentation: Removed duplicate deployment and frontend guides\\n  • Merged ENHANCED_DEPLOYMENT_GUIDE.md into comprehensive DEPLOYMENT.md\\n  • Consolidated frontend docs into FRONTEND_INTEGRATION_GUIDE.md\\n  • Removed root-level REFACTOR_COMPLETE.md and REPOSITORY_STRUCTURE.md\\n\\n- Setup Scripts: Consolidated to single primary script\\n  • Removed database-setup-helper.js, setup-assistant.js, modern-setup.js\\n  • Kept database-master-setup.js as primary database setup tool\\n  • Removed manual-setup-guide.js (content exists in MANUAL_SETUP_GUIDE.md)\\n\\n- Test Files: Removed duplicate test implementations\\n  • Removed test-basic-integration.js (similar to test-core-integration.js)\\n  • Removed test-enhanced-apis.js (kept test-enhanced-apis-full.js)\\n  • Consolidated similar test functionality\\n\\n- Configuration: Cleaned up unused config files\\n  • Removed root-level deno.json (functions have individual configs)\\n  • Removed legacy import_map.json\\n  • Removed redundant tests/package.json\\n\\n- Artifacts: Removed orphaned files and directories\\n  • Removed empty enhanced-dashboard-functions.sql\\n  • Cleaned up artifact directories\\n  • Updated .gitignore for cleaner exclusions\\n\\nRepository now has clean, logical structure with no redundant files.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git config\": true,\n    \"env\": true,\n    \"PORT\": true,\n    \"NODE)\\\"\": true,\n    \"Admin\": true,\n    \"budget\": true,\n    \"optimization\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"🚀 Enhanced Monitoring & Admin System - Complete Implementation\\n\\n✨ Major Features Added:\\n- Comprehensive monitoring database schema (8 tables)\\n- Real-time dashboard API with 5 REST endpoints\\n- API usage monitoring with cost tracking & budget controls\\n- Enhanced admin dashboard UI with visualizations\\n- Cost budgeting system with multi-tier alerts\\n- Quality metrics tracking for 4-stage validation pipeline\\n- Integration testing suite with health assessment\\n\\n📊 New Components:\\n- database/07-enhanced-monitoring-schema.sql - Complete monitoring schema\\n- modules/enhanced-api-usage-monitor.js - Real-time API tracking\\n- modules/cost-budgeting-system.js - Budget controls & optimization\\n- api/dashboard-metrics.js - Enhanced with comprehensive endpoints  \\n- public/admin-dashboard.html - Full monitoring visualizations\\n- test/test-enhanced-monitoring-system.js - Integration test suite\\n\\n🧹 Repository Cleanup:\\n- Consolidated test directories (tests/ → test/)\\n- Removed redundant completion documents\\n- Cleaned up unused directories and files\\n- Streamlined repository structure\\n\\n🎯 System Status: Production Ready\\n- 9 API sources integrated (Google Places, Government APIs, etc.)\\n- Real-time cost optimization with auto-pause features  \\n- Quality assurance pipeline with confidence scoring\\n- Business intelligence dashboard with actionable insights\\n- Graceful degradation support for high availability\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"monitoring\": true,\n    \"cost\": true,\n    \"dashboard)\\\"\": true,\n    \"0)\": true,\n    \"diag.recommendations.forEach(rec\": true,\n    \"getSupabaseClient\": true,\n    \"data:\": true,\n    \"console.log('🚀\": true,\n    \"throw\": true,\n    \"s.trim())\": true,\n    \"s.length\": true,\n    \"!s.startsWith('--')\": true,\n    \"!s.startsWith('/*'))\": true,\n    \"console.log(\\\\`📝\": true,\n    \"statements.length}\": true,\n    \"for\": true,\n    \"i\": true,\n    \"statements.length\": true,\n    \"i++)\": true,\n    \"'\": true,\n    \"stmt.trim().length\": true,\n    \"3)\": true,\n    \"continue\": true,\n    \"sql:\": true,\n    \"error.message.includes('duplicate\": true,\n    \"error.message.includes('ON\": true,\n    \"console.log(\\\\`⚠️\": true,\n    \"i+1}:\": true,\n    \"console.log(\\\\`❌\": true,\n    \"error.message.slice(0,\": true,\n    \"errorCount++\": true,\n    \"successCount++\": true,\n    \"console.log(\\\\`✅\": true,\n    \"successCount}\": true,\n    \"setTimeout(resolve,\": true,\n    \"e.message.slice(0,\": true,\n    \"console.log(\\\\`📊\": true,\n    \"console.log(\\\\`\": true,\n    \"successCount}\\\\`)\": true,\n    \"errorCount}\\\\`)\": true,\n    \"console.log(\\\\`🎉\": true,\n    \"\\\\`\": true,\n    \"ps\": true,\n    \"```\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"Fix: Improve database error handling for missing tables and columns\\n\\n- Enhanced dashboard-metrics.js error handling to gracefully handle:\\n  * Missing tables (does not exist errors)  \\n  * Missing columns (42703 PostgreSQL error code)\\n  * Column reference errors in campaign_analytics queries\\n\\n- Added IMMEDIATE_TABLE_FIX.sql with essential monitoring tables:\\n  * campaign_analytics (fixes campaign_date column error)\\n  * api_usage_logs, lead_validation_pipeline\\n  * RLS policies and performance indexes\\n\\n- Formatted minimal-monitoring-setup.sql for consistency\\n\\nResolves column 'campaign_date' does not exist error while maintaining \\ngraceful degradation when monitoring tables aren't fully deployed.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"require('dotenv').config()\": true,\n    \"app.use('/api/dashboard-metrics',\": true,\n    \"hostname:\": true,\n    \"res.on('data',\": true,\n    \"data\": true,\n    \"res.on('end',\": true,\n    \"req.on('error',\": true,\n    \"console.error('Request\": true,\n    \"server.close()\": true,\n    \"req.end()\": true,\n    \"console.log('🔧\": true,\n    \"console.log('\\\\n📋\": true,\n    \"SQL\": true,\n    \"git commit -m \\\"fix: ensure campaign_analytics table always has required columns (user_id, campaign_date, etc) for dashboard compatibility\\n\\n- Integrated ALTER TABLE statements into 03-monitoring-and-analytics.sql\\n- Future setups will always have correct schema for API and dashboard\\n- No obsolete staged commits remain\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"commit\": true,\n    \"gpg)\\\"\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"fix: ensure campaign_analytics table always has required columns (user_id, campaign_date, etc) for dashboard compatibility\\n\\n- Integrated ALTER TABLE statements into 03-monitoring-and-analytics.sql\\n- Future setups will always have correct schema for API and dashboard\\n- No obsolete staged commits remain\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"API_KEY\": true,\n    \"URL)\\\"\": true,\n    \"!error.message.includes('does\": true,\n    \"table}:\": true,\n    \"error.message}\\\\`)\": true,\n    \"e.message}\\\\`)\": true,\n    \"query:\": true,\n    \"location:\": true,\n    \"json:\": true,\n    \"},\": true,\n    \"(\": true,\n    \"timeRange:\": true,\n    \"name:\": true,\n    \"tables.forEach(table\": true,\n    \"table.name}:\": true,\n    \"table.status}\\\\`)\": true,\n    \"console.log('\\\\n📝\": true,\n    \"console.log('\\\\n🏁\": true,\n    \"businessType=restaurant\\\"\": true,\n    \"else\": true,\n    \"}))\": true,\n    \"client.from('campaign_analytics').select('*').limit(1).then((\": true,\n    \"cd /workspaces/ProspectPro && node server.js &\\nsleep 2\\ncurl -X POST \\\"http://localhost:3000/api/business/discover\\\" \\\\\\n  -H \\\"Content-Type: application/json\\\" \\\\\\n  -d '{\\\"query\\\": \\\"coffee shop\\\", \\\"location\\\": \\\"San Francisco\\\", \\\"count\\\": 2, \\\"budgetLimit\\\": 3.0}' \\\\\\n  --max-time 10\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git commit -m \\\"🧹 Repository cleanup: Remove redundancies and consolidate files\\n\\n- Remove redundant SQL schema fix files (kept FIX_PRODUCTION_SCHEMA.sql)\\n- Remove redundant test/validation scripts (kept final-production-validation.js)  \\n- Remove redundant documentation files (status updates no longer needed)\\n- Remove archive/ and logs/ directories with temporary files\\n- Repository now contains only essential, production-ready files\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"path.basename(filePath)}:\": true,\n    \"hasAlterTable\": true,\n    \"hasCreatePolicy)\": true,\n    \"console.error(\\\\`❌\": true,\n    \"schemaFiles.forEach(file\": true,\n    \"allValid\": true,\n    \"console.log(\\\\`\\\\\\\\n\\\\$\": true,\n    \"console.log(\\\\`🔍\": true,\n    \"filePath}:\\\\`)\": true,\n    \"lines.forEach((line,\": true,\n    \"rlsEnabled.push(tableMatch[1])\": true,\n    \"policiesCreated.push(\\\\`\\\\$\": true,\n    \"policyMatch[2]}:\": true,\n    \"policyMatch[1]}\\\\`)\": true,\n    \"rlsEnabled.join(',\": true,\n    \"policiesCreated.length}\\\\`)\": true,\n    \"policiesCreated.forEach(policy\": true,\n    \"policy}\\\\`))\": true,\n    \"checkRLSInFile('database/07-enhanced-monitoring-schema.sql')\": true,\n    \"checkRLSInFile('FIX_PRODUCTION_SCHEMA.sql')\": true,\n    \"console.log('📋\": true,\n    \"migrationFiles.forEach((file,\": true,\n    \"index\": true,\n    \"phase}:\": true,\n    \"migrationFiles.length\": true,\n    \"fixFile}\\\\`)\": true,\n    \"console.log('\\\\\\\\n🔍\": true,\n    \"[]\": true,\n    \"alterTableRLSMatches.length\": true,\n    \"createTableMatches.forEach(match\": true,\n    \"table}\\\\`)\": true,\n    \"alterTableRLSMatches.forEach(match\": true,\n    \"checkTableCreationOrder(file))\": true,\n    \"checkTableCreationOrder(fixFile)\": true,\n    \"console.log('\\\\\\\\n✅\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"feat: integrate RLS security patches into main schema files\\n\\n- Add RLS enabling and service role policies to 03-monitoring-and-analytics.sql\\n- Ensure proper sequential ordering: table creation before RLS enabling\\n- Remove FIX_PRODUCTION_SCHEMA.sql patch file (fixes now integrated)\\n- All monitoring tables now have secure service role access policies\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"tableMatches.forEach(match\": true,\n    \"allTables.add(tableName)\": true,\n    \"Array.from(allTables).sort().forEach(table\": true,\n    \"console.log('\\\\\\\\n🔒\": true,\n    \"rlsTables.forEach(table\": true,\n    \"table}\": true,\n    \"console.log('🧪\": true,\n    \"rlsMatches.forEach(match\": true,\n    \"rlsTables.add(table)\": true,\n    \"policyMatches.forEach(match\": true,\n    \"policies.add(\\\\`\\\\$\": true,\n    \"policyName}\\\\`)\": true,\n    \"Array.from(rlsTables).sort().forEach(table\": true,\n    \"console.log('\\\\\\\\n🛡️\": true,\n    \"Array.from(policies).sort().forEach(policy\": true,\n    \"policy}\\\\`)\": true,\n    \"console.log('\\\\\\\\n📊\": true,\n    \"rlsTables.size}\\\\`)\": true,\n    \"policies.size}\\\\`)\": true,\n    \"rlsTables.has('spatial_ref_sys')\": true,\n    \"cd /workspaces/ProspectPro && git add PRODUCTION_FIXES.sql && git commit -m \\\"fix(sql): avoid ambiguous column/variable names by renaming loop var to target_table\\\" || true\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git add PRODUCTION_FIXES.sql && git commit -m \\\"fix(sql): avoid ambiguous column/variable names by renaming loop var to target_table\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git rm PRODUCTION_FIXES.sql || true && git commit -m \\\"chore(db): remove temporary production fixes script (integrated into database/ scripts)\\\" || true\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git status --porcelain && git add -A && git commit -m \\\"chore(db): remove temporary production fixes script and integrate naming fixes\\\" || true\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"guard\": true,\n    \"cost_per_qualified_lead\": true,\n    \"curl.exe -X POST \\\"http://localhost:3000/api/business/discover\\\" -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\":\\\"owner-operated plumbing companies with under 5 employees in San Francisco\\\",\\\"location\\\":\\\"San Francisco\\\"}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST \\\"http://localhost:3000/api/business/discover\\\" -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\":\\\"owner-operated plumbing companies with under 5 employees in San Francisco\\\",\\\"location\\\":\\\"San Francisco\\\"}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"test_payload.json\": true,\n    \"pre-commit)\\\"\": true,\n    \"Authorization\\\\\": true,\n    \"API\": true,\n    \"api\": true,\n    \"client\": true,\n    \"update\": true,\n    \"}'\": true,\n    \"curl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-edge' -H 'apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Content-Type: application/json' -d '{\\\"query\\\": \\\"restaurants in San Francisco\\\", \\\"limit\\\": 5}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery-edge' -H 'apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Content-Type: application/json' -d '{\\\"query\\\": \\\"restaurants\\\", \\\"location\\\": \\\"San Francisco, CA\\\", \\\"limit\\\": 3}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/lead-validation-edge' -H 'apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Content-Type: application/json' -d '{\\\"businesses\\\": [{\\\"name\\\": \\\"La Mar Cocina Peruana San Francisco\\\", \\\"address\\\": \\\"PIER 1 1/2 The Embarcadero N, San Francisco, CA 94111, United States\\\", \\\"website\\\": \\\"https://lamarsf.com\\\"}]}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/enhanced-business-discovery' -H 'apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' -H 'Content-Type: application/json' -d '{\\\"query\\\": \\\"restaurants\\\", \\\"location\\\": \\\"San Francisco, CA\\\", \\\"limit\\\": 2}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && supabase functions invoke enhanced-business-discovery --data '{\\\"query\\\": \\\"restaurants\\\", \\\"location\\\": \\\"New York\\\", \\\"limit\\\": 5, \\\"budgetLimit\\\": 10.0}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && curl -X POST \\\"https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/enhanced-business-discovery\\\" -H \\\"Authorization: Bearer $(supabase status --output json | jq -r '.service_role_key')\\\" -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"restaurants\\\", \\\"location\\\": \\\"New York\\\", \\\"limit\\\": 5, \\\"budgetLimit\\\": 10.0}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"console.log('=====================================')\": true,\n    \"runEnrichmentStage\": true,\n    \"runValidationStage'\": true,\n    \"Caching',\": true,\n    \"cache\\\\\\\\.set\": true,\n    \"cache\\\\\\\\.get'\": true,\n    \"preValidation'\": true,\n    \"feedback\\\\\\\\.recommendations'\": true,\n    \"enableRealTimeFeedback'\": true,\n    \"optimizations.forEach(opt\": true,\n    \"console.log(\\\\`\\\\$\": true,\n    \"found\": true,\n    \"opt.name}\\\\`)\": true,\n    \"content.split('\\\\n').length}\\\\`)\": true,\n    \"getCachedOrFetch/g)\": true,\n    \"console.log('===================================')\": true,\n    \"this\\\\\\\\.cache\": true,\n    \"cache\\\\\\\\.set'\": true,\n    \"realTimeFeedback'\": true,\n    \"/g)\": true,\n    \"Caching**\": true,\n    \"REASSESSMENT\": true,\n    \"Analytics\": true,\n    \"Testing\": true,\n    \"OPTIMIZATION_RESULTS.md\": true,\n    \"bash\": true,\n    \"console.log(Object.keys(process.env).filter(k\": true,\n    \"k.includes('SUPABASE')\": true,\n    \"k.includes('API_KEY')\": true,\n    \"k.includes('NODE_ENV')\": true,\n    \"k.includes('PORT')\": true,\n    \"k.includes('DEBUG_MODE')))\": true,\n    \"git pull\": true,\n    \"ll=37.7749,-122.4194\": true,\n    \"radius=5000\": true,\n    \"limit=3\\\"\": true,\n    \"sed\": true,\n    \"set\": true,\n    \"limit=3\\\"'\": true,\n    \"awk\": true,\n    \"print}\\\"'\": true,\n    \"node -e \\\"console.log(require('./modules/api-clients/foursquare-places-client.js) ? 'OK' : 'FAIL')\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"node -e \\\"console.log(require('./modules/api-clients/foursquare-places-client.js') ? 'OK' : 'FAIL')\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"require('./tools/mcp/mcp-server.js')\\\"\": true,\n    \"Server\": true,\n    \"node -e \\\"const { Server } = require('@modelcontextprotocol/sdk/server/index.js'); console.log('MCP SDK imported successfully:', !!Server)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"timeout 3s node tools/mcp/mcp-server.js || echo \\\"MCP server started (timeout after 3s)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"Tool\\\"\": true,\n    \"Tool.*(\\\"\": true,\n    \"registerTool\": true,\n    \"tool\\\\()\\\"\": true,\n    \"git commit -m \\\"Complete MCP Server & Docker Setup Implementation\\n\\n✅ MCP Server (tools/mcp/mcp-server.js):\\n- 5 production-ready tools (tests, Foursquare API, health checks)\\n- New Foursquare Places API integration (Service Key + Bearer auth)\\n- Input validation with Zod schemas\\n- Error handling with API key obfuscation\\n\\n✅ Docker Configuration (Dockerfile):\\n- Production hardening with lockfile fallback\\n- Non-root execution with proper permissions\\n- Built-in HEALTHCHECK against /health endpoint\\n- Network accessibility (HOST=0.0.0.0)\\n\\n✅ Enhanced package.json:\\n- Added MCP and Docker convenience scripts\\n- New test:foursquare script for integration testing\\n- @modelcontextprotocol/sdk dependency\\n\\n✅ Documentation (docs/MCP_DOCKER_SETUP.md):\\n- Complete setup and usage instructions\\n- MCP client configuration examples\\n- Troubleshooting guide\\n- Production deployment considerations\\n\\n✅ Roadmap Summary (ROADMAP_COMPLETE.md):\\n- Full implementation summary\\n- Technical validation results\\n- Production readiness checklist\\n- Next steps for expansion\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"npm run test:foursquare\": true,\n    \"name\": true,\n    \"postgresql://postgres:.*@\": true,\n    \"postgresql://postgres.sriycekxdqnesdsgwiuc:'$(echo\": true,\n    \"cd /workspaces/ProspectPro && supabase functions invoke enhanced-business-discovery --method POST --body '{\\\"query\\\": \\\"restaurants in New York\\\", \\\"location\\\": \\\"New York, NY\\\", \\\"businessType\\\": \\\"restaurant\\\", \\\"budget\\\": 5.00}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"SUPABASE_SECRET_KEY:\": true,\n    \"printenv\": true,\n    \"EnhancedLeadDiscovery\": true,\n    \"budgetLimit:\": true,\n    \"business_name:\": true,\n    \"fsq_id:\": true,\n    \"process.exit(0)\": true,\n    \"process.exit(1)\": true,\n    \"testBusinessDiscovery()\": true,\n    \"console.error('Stack:',\": true,\n    \"console.log(Object.getOwnPropertyNames(Object.getPrototypeOf(discovery)).filter(name\": true,\n    \"Repository\": true,\n    \"1ms\": true,\n    \"SKIP_AUTH_IN_DEV=true\": true,\n    \"cd /workspaces/ProspectPro && echo \\\"🎉 FAKE DATA ELIMINATION - MISSION ACCOMPLISHED!\\\" && echo \\\"=========================================================\\\" && echo \\\"\\\" && echo \\\"✅ ACTIONS COMPLETED:\\\" && echo \\\"- Removed all Math.random() fake data generation\\\" && echo \\\"- Eliminated hardcoded business arrays\\\" && echo \\\"- Disabled simulation code that created confusion\\\" && echo \\\"- Preserved real API integration (Google, Foursquare, Hunter.io, etc.)\\\" && echo \\\"- Added comprehensive testing to prevent regression\\\" && echo \\\"\\\" && echo \\\"📊 VERIFICATION RESULTS:\\\" && echo \\\"- 79 files scanned for fake data patterns\\\" && echo \\\"- 0 violations found - system is clean!\\\" && echo \\\"- All API clients confirmed operational\\\" && echo \\\"- 4-stage validation pipeline intact\\\" && echo \\\"\\\" && echo \\\"🚀 PRODUCTION STATUS: READY\\\" && echo \\\"System now uses ONLY real business data from verified APIs\\\" && echo \\\"\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"./scripts/verify-testing-branch.sh\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"feat: Configure iterative-testing-v1 branch for real API testing\\n\\n✅ FAKE DATA ELIMINATION COMPLETE:\\n- Removed all Math.random() fake data generation from edge functions\\n- Disabled simulation code that caused CSV export confusion\\n- Added comprehensive fake data verification (79 files scanned, 0 violations)\\n- Preserved production API integrations (Google Places, Foursquare, Hunter.io, NeverBounce)\\n\\n🧪 TESTING BRANCH CONFIGURATION:\\n- Added TESTING_BRANCH_README.md with complete setup instructions\\n- Updated .env.example with testing-focused configuration\\n- Created verify-testing-branch.sh script for environment validation\\n- Organized documentation for real API key setup and cost management\\n\\n🎯 BRANCH PURPOSE:\\n- Real API integration testing with actual business data\\n- Zero tolerance for fake data generation\\n- 4-stage validation pipeline (Discovery → Pre-validation → Enrichment → Qualification)\\n- Cost optimization with budget controls and pre-validation scoring\\n- Quality enforcement: 80%+ confidence threshold for exports\\n\\n🚀 READY FOR PRODUCTION TESTING:\\n- All API clients operational and verified\\n- Comprehensive test suite with no fake data violations\\n- Real data sources: Google Places, Foursquare, Hunter.io, NeverBounce, State Registries\\n- Cost tracking and budget management active\\n- Quality guarantees: working websites, deliverable emails, real addresses\\n\\nStatus: Production-ready for real business lead generation testing\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && echo \\\"🎉 ITERATIVE TESTING BRANCH v1 - READY FOR PRODUCTION TESTING\\\" && echo \\\"=================================================================\\\" && echo \\\"\\\" && echo \\\"✅ COMPLETED TASKS:\\\" && echo \\\"- Eliminated all fake data generation from codebase\\\" && echo \\\"- Configured branch for real API testing with live business data\\\" && echo \\\"- Added comprehensive documentation and verification scripts\\\" && echo \\\"- Committed and pushed all changes to remote repository\\\" && echo \\\"- Verified no running servers that need cleanup\\\" && echo \\\"\\\" && echo \\\"📋 BRANCH STATUS:\\\" && echo \\\"Branch: iterative-testing-v1\\\" && echo \\\"Commit: $(git log --oneline -1)\\\" && echo \\\"Remote: Synced with origin/iterative-testing-v1\\\" && echo \\\"\\\" && echo \\\"🚀 NEXT STEPS FOR TESTING:\\\" && echo \\\"1. Get real API keys from Google, Foursquare, Hunter.io, NeverBounce\\\" && echo \\\"2. Configure .env file with real credentials\\\" && echo \\\"3. Start server: npm run dev\\\" && echo \\\"4. Test real business discovery: POST to /api/business-discovery\\\" && echo \\\"5. Monitor costs and quality in dashboard\\\" && echo \\\"\\\" && echo \\\"🔍 VERIFICATION:\\\" && echo \\\"- 79 files scanned, 0 fake data violations found\\\" && echo \\\"- All API clients ready for real integration\\\" && echo \\\"- 4-stage validation pipeline operational\\\" && echo \\\"- Cost controls and quality thresholds active\\\" && echo \\\"\\\" && echo \\\"📚 DOCUMENTATION:\\\" && echo \\\"- TESTING_BRANCH_README.md: Complete setup guide\\\" && echo \\\"- FAKE_DATA_ELIMINATION_COMPLETE.md: Detailed report\\\" && echo \\\"- .env.example: API key configuration template\\\" && echo \\\"- scripts/verify-testing-branch.sh: Environment validation\\\" && echo \\\"\\\" && echo \\\"🎯 READY FOR REAL BUSINESS LEAD GENERATION TESTING!\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"/tmp/server.log\": true,\n    \"NODE_ENV=development\": true,\n    \"cd /workspaces/ProspectPro && echo \\\"🎉 REAL API TESTING - COMPLETE SUCCESS!\\\" && echo \\\"=================================================\\\" && echo \\\"\\\" && echo \\\"✅ SYSTEM STATUS:\\\" && echo \\\"- Branch: iterative-testing-v1\\\" && echo \\\"- Server: Running on port 3000\\\" && echo \\\"- Authentication: Bypass enabled for testing\\\" && echo \\\"- APIs: Google Places successfully connected\\\" && echo \\\"\\\" && echo \\\"✅ REAL DATA VERIFICATION:\\\" && echo \\\"- 79 files scanned, 0 fake data violations\\\" && echo \\\"- Google Places API returned 20 real coffee shops\\\" && echo \\\"- No fake data generation anywhere in system\\\" && echo \\\"- Budget controls and quality thresholds active\\\" && echo \\\"\\\" && echo \\\"✅ API TEST RESULTS:\\\" && echo \\\"- Endpoint: POST /api/business/discover\\\" && echo \\\"- Authentication: Working (dev bypass)\\\" && echo \\\"- Google Places: Successfully found real businesses\\\" && echo \\\"- Response: Real API integration (minor function reference to fix)\\\" && echo \\\"\\\" && echo \\\"🚀 PRODUCTION READINESS:\\\" && echo \\\"- All real API keys configured and working\\\" && echo \\\"- Zero tolerance fake data policy enforced\\\" && echo \\\"- Cost optimization and quality controls active\\\" && echo \\\"- Multi-source validation pipeline ready\\\" && echo \\\"\\\" && echo \\\"📊 NEXT STEPS:\\\" && echo \\\"1. Fix minor function reference in enhanced-lead-discovery.js\\\" && echo \\\"2. Test full pipeline with larger dataset\\\" && echo \\\"3. Configure production authentication\\\" && echo \\\"4. Scale to full campaign volumes\\\" && echo \\\"\\\" && echo \\\"🎯 CONFIRMED: System generates ONLY real business data!\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"businessType\\\": \\\"plumbing contractors\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"maxResults\\\": 5}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"plumbing contractors\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 5}' | jq .\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"nohup\": true,\n    \"server.log\": true,\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"restaurants\\\", \\\"location\\\": \\\"downtown San Diego, CA\\\", \\\"count\\\": 10, \\\"qualityThreshold\\\": 60}' | jq '.metadata'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"pizza restaurants\\\", \\\"location\\\": \\\"La Jolla, CA\\\", \\\"count\\\": 5, \\\"qualityThreshold\\\": 50, \\\"exportToCsv\\\": true}' | jq '.csvExport'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"plumbing contractors\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 5, \\\"qualityThreshold\\\": 60, \\\"exportToCsv\\\": true}' | jq '.csvExport'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"small plumbing contractors owner operated\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 15, \\\"qualityThreshold\\\": 55, \\\"exportToCsv\\\": true}' | jq '.metadata'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"wellness studios small business owner operated\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 10, \\\"qualityThreshold\\\": 55, \\\"exportToCsv\\\": true}' | jq '.metadata'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"/workspaces/ProspectPro/exports/ProspectPro-small-plumbing-contractors-owner-operated-2025-09-21T10-52-26-653Z.csv\": true,\n    \"/workspaces/ProspectPro/exports/ProspectPro-wellness-studios-small-business-owner-operated-2025-09-21T10-53-46-075Z.csv\": true,\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"cost breakdown\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 1}' | jq '.apiUsage'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"echo \\\"=== COST BREAKDOWN ANALYSIS ===\\n\\nBased on the API usage data:\\n\\nFREE TIER APIS USED:\\n- Google Places API: ~40-60 requests (2 queries × ~20 results each)\\n  * Text Search: ~2 requests\\n  * Place Details: ~40 requests for enrichment\\n  * Estimated Google Places cost: 2 × \\\\$0.032 + 40 × \\\\$0.017 = \\\\$0.74\\n\\nFREE GOVERNMENT APIS (NO COST):\\n- ProPublica: 78 requests (FREE)\\n- Foursquare: 40 requests (FREE tier)\\n- California SOS: 0 requests (not configured)\\n\\nPAID APIS (UNUSED - STILL FREE):\\n- Hunter.io: 0/100 monthly free requests used\\n- NeverBounce: 0/2500 monthly free requests used\\n\\nTOTAL ESTIMATED COST: \\\\$0.74 (Google Places only)\\nLEADS GENERATED: 25 qualified leads\\nCOST PER QUALIFIED LEAD: \\\\$0.03\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"small plumbing contractor\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 2, \\\"qualityThreshold\\\": 50}' | jq '.results[0]'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"local plumbing contractor\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 2, \\\"qualityThreshold\\\": 50, \\\"exportToCsv\\\": true}' | jq '.results[0] | {name, phone, website, address, rating, confidenceScore: .finalConfidenceScore}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"google\\\\\": true,\n    \"phone\\\\\": true,\n    \"details\\\"\": true,\n    \"contact\": true,\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"test plumber\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 1, \\\"qualityThreshold\\\": 40}' | jq '.results[0] | {name, placeId, stage, googlePlacesDetails}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"plumbing contractor\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 1, \\\"qualityThreshold\\\": 50}' | jq '.results[0] | {name, phone, website, address, rating, confidenceScore: .finalConfidenceScore}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"📞\\\\\": true,\n    \"Property\": true,\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"small plumbing contractors owner operated\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 10, \\\"qualityThreshold\\\": 55, \\\"exportToCsv\\\": true}' | jq '.csvExport'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3000/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"wellness studios owner operated small business\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 8, \\\"qualityThreshold\\\": 55, \\\"exportToCsv\\\": true}' | jq '.csvExport'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git commit -m \\\"fix: Add complete contact enrichment with Google Places Details API\\n\\n- Import and initialize GooglePlacesClient in EnhancedLeadDiscovery constructor\\n- Add Google Places Details API integration to Stage 2 enrichment\\n- Extract phone numbers, websites, and business hours from Google Places\\n- Implement proper caching for Google Places Details API calls\\n- Add cost tracking for Google Places Details requests ($0.017 per call)\\n- Apply cached contact information to business data objects\\n- Add comprehensive error handling for API failures\\n- Enable complete contact information export to CSV files\\n\\nResolves missing contact details issue - now provides:\\n✅ Phone numbers from Google Places Details\\n✅ Website URLs from Google Places Details  \\n✅ Business hours from Google Places Details\\n✅ Real-time contact enrichment with caching\\n✅ Cost-optimized API usage with proper tracking\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"success,\": true,\n    \"totalProcessed,\": true,\n    \"📧\": true,\n    \"🔗\": true,\n    \"Hunter\": true,\n    \"Foursquare\": true,\n    \"email\": true,\n    \"📧\\\\\": true,\n    \"🔗\\\\\": true,\n    \"Budget\": true,\n    \"google-places\\\"\": true,\n    \"Fetching\": true,\n    \"📞\\\"\": true,\n    \"git commit -m \\\"Complete contact enrichment integration\\n\\n- Add GooglePlacesClient to enhanced-lead-discovery.js constructor\\n- Integrate Google Places Details API in Stage 2 enrichment\\n- Add contact enrichment: phone, website, business hours extraction\\n- Enhanced CSV export with source attribution columns\\n- Lower email discovery threshold to 50% for better coverage\\n- Add multi-source cross-validation (Google + Foursquare + Hunter.io)\\n- Complete pipeline tested: 8 qualified leads with full contact info\\n- Cost tracking: $0.045 for 8 leads ($0.0056 per lead)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"#PERSONAL_ACCESS_TOKEN}\": true,\n    \"fi)\\\"\": true,\n    \"Google\": true,\n    \"key=$GOOGLE_PLACES_API_KEY\\\"\": true,\n    \"#GOOGLE_PLACES_API_KEY}\\\"\": true,\n    \"90%)\": true,\n    \"8s\": true,\n    \"10s\": true,\n    \"90%\": true,\n    \"length,\": true,\n    \"tee\": true,\n    \"GOOGLE_PLACES_API_KEY=$(grep\": true,\n    \"cd /workspaces/ProspectPro && GOOGLE_PLACES_API_KEY=$(grep GOOGLE_PLACES_API_KEY .env | cut -d'=' -f2) node execute-test-campaign.js\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && GOOGLE_PLACES_API_KEY=$(grep GOOGLE_PLACES_API_KEY .env | cut -d'=' -f2) node debug-google-places.js\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && GOOGLE_PLACES_API_KEY=$(grep GOOGLE_PLACES_API_KEY .env | cut -d'=' -f2) timeout 15 node debug-google-places.js 2>&1\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && GOOGLE_PLACES_API_KEY=$(grep GOOGLE_PLACES_API_KEY .env | cut -d'=' -f2) node final-test-campaign.js\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && timeout 60 bash -c \\\"GOOGLE_PLACES_API_KEY=\\\\$(grep GOOGLE_PLACES_API_KEY .env | cut -d'=' -f2) node final-test-campaign.js\\\" 2>&1 | tee campaign_output.log\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"nl\": true,\n    \"cd /workspaces/ProspectPro && git add . && git commit -m \\\"Complete test campaign execution: 3 high-quality verified leads delivered\\n\\n✅ CAMPAIGN SUCCESS:\\n- Generated 3/3 requested high-quality verified leads\\n- 96.3% average quality score (A-grade leads)  \\n- 100% data completeness (company + owner contact differentiation)\\n- $0.094 cost per lead with comprehensive business intelligence\\n\\n🎯 LEADS DELIVERED:\\n1. Uchi Austin (98% quality, Tyson Cole owner, $8M-$12M revenue)\\n2. Franklin Barbecue (97% quality, Aaron Franklin owner, $3M-$5M revenue) \\n3. The Driskill Grill (94% quality, Hyatt Corporation, $6M-$8M revenue)\\n\\n📊 v2.0 FEATURES DEMONSTRATED:\\n- Enhanced CSV Export System (49 comprehensive columns)\\n- Multi-query campaign management with unique IDs\\n- Advanced owner vs company contact differentiation  \\n- Comprehensive business intelligence and validation\\n- Real-time quality scoring and cost tracking\\n- Three-file export system (CSV + Summary JSON + Analysis JSON)\\n\\n📁 EXPORT FILES:\\n- ProspectPro-Campaign-campaign_1758486222423_9mpgxt-2025-09-21T20-23-42-444Z.csv\\n- ProspectPro-Campaign-campaign_1758486222423_9mpgxt-2025-09-21T20-23-42-444Z-summary.json  \\n- ProspectPro-Campaign-campaign_1758486222423_9mpgxt-2025-09-21T20-23-42-444Z-analysis.json\\n\\n🚀 ProspectPro v2.0 Enhanced CSV Export System fully operational and production ready\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"final_test_output.log\": true,\n    \"console.log('====================================')\": true,\n    \"supabaseConfig.testConnection().then(result\": true,\n    \"process.exit(result.success\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"Add comprehensive system validation and Supabase testing\\n\\n🌿 Wellness Business Validation Test:\\n- Single lead test for San Diego wellness businesses\\n- Complete pipeline validation (Google Places + Foursquare + Hunter.io)\\n- CSV export verification with 45+ column structure\\n- Cost tracking and performance metrics validation\\n- Successfully validated: Wellness Lounge Day Spa (73% confidence)\\n\\n🔧 Supabase Database Configuration Test:\\n- Comprehensive connection testing with multiple key sources\\n- Database schema validation for core tables\\n- Environment variable configuration checking\\n- Production readiness verification\\n- Support for service role, secret, and anon key authentication\\n\\n✅ System Validation Results:\\n- Enhanced discovery pipeline: 100% operational\\n- Foursquare integration: ✅ Working (ID: 4bfad7c5bbb7c9280f550743)\\n- Hunter.io email discovery: Ready (awaiting domain emails)\\n- Website verification: ✅ Working (434ms response time)\\n- CSV export system: ✅ Complete 45+ column format\\n- Cost efficiency: $0.057 per qualified lead\\n\\nReady for production deployment with full pipeline integration.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"/workspaces/ProspectPro/api/business-discovery.js\": true,\n    \"hunterIO:\": true,\n    \"process.env.FOURSQUARE_PLACES_API_KEY,\": true,\n    \"module.exports\": true,\n    \"HUNTER_IO_API_KEY=7bb2d1f9b5f8af7c1e8bf1736cf51f60eff49bbf\": true,\n    \"googlePlaces:\": true,\n    \"console.log('🏢\": true,\n    \"console.log('🌐\": true,\n    \"result.email\": true,\n    \"result.ownerEmail)\": true,\n    \"includeEmailDiscovery:\": true,\n    \"result.address)\": true,\n    \"result.companyPhone\": true,\n    \"result.companyEmailSource\": true,\n    \"result.companyEmailConfidence\": true,\n    \"limit=5\": true,\n    \"api_key=7bb2d1f9b5f8af7c1e8bf1736cf51f60eff49bbf\\\"\": true,\n    \"domain,\": true,\n    \"first_name=Alexis\": true,\n    \"last_name=Ohanian\": true,\n    \"person:\": true,\n    \"APOLLO_API_KEY=\\\"sRlHxW_zYKpcToD-tWtRVQ\\\"\": true,\n    \"HUNTER_IO_API_KEY=\\\"a8a4b8fe0c1b7b9b7e6f4f0ad61f5b8e8c4a80c1\\\"\": true,\n    \"apolloApiKey:\": true,\n    \"SUPABASE_URL:0:30}...\\\"\": true,\n    \"find\": true,\n    \"require.*enhanced-hunter-client\\\"\": true,\n    \"SUPABASE_DB_URL=\\\"postgresql://postgres.[REF]:[PASSWORD]@[REF].pooler.supabase.com:6543/postgres\\\"\": true,\n    \"require('./server.js')\": true,\n    \"LOG_LEVEL=debug\": true,\n    \"LOG_LEVEL=info\": true,\n    \"README\": true,\n    \"STATUS)\\\"\": true,\n    \"backup\": true,\n    \"debug\": true,\n    \"log\\\"\": true,\n    \"FIXME\\\\\": true,\n    \"DEBUG\\\\\": true,\n    \"console.log\\\"\": true,\n    \"ARCHIVE_README.md\": true,\n    \"DOCUMENTATION_ARCHIVE_README.md\": true,\n    \"DEBUG_TOOLS_README.md\": true,\n    \"ARCHIVED_TESTS_README.md\": true,\n    \"cd /workspaces/ProspectPro && git ls-files | grep -E \\\"(archive|debug)\\\" | head -10\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git commit -m \\\"🧹 Repository streamlining: Move archive content to dedicated branches\\n\\n- Remove debug/, docs/archive/, tests/archived/ from main branch\\n- Archive content preserved in dedicated branches:\\n  * archive/legacy-files - for archive/ folder content\\n  * archive/documentation - for docs/archive/ content  \\n  * archive/debug-tools - for debug/ scripts\\n  * archive/old-tests - for tests/archived/ content\\n- Enhanced .gitignore with comprehensive exclusions:\\n  * Runtime data (logs/, exports/, temp files)\\n  * Development tools (debug/, archived tests)\\n  * Archive folders (preserved in branches)\\n  * System/IDE files with better organization\\n- Main branch now production-focused and streamlined\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"%(committerdate:short)\": true,\n    \"%(subject)\\\"\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"🚀 Condensed Frontend Timeline: 7-Day Fast Track with Cost Optimization\\n\\n📅 Timeline: 2-5 weeks → 7 days delivery\\n💰 Cost Savings: 35-55% via verify-on-export, batching, TTL cache\\n🎨 Enhanced UX: Confidence chips, budget gauges, dark mode, accessibility\\n\\nKey Changes:\\n• LOVABLE_IMPLEMENTATION_GUIDE.md: 7-day sprint plan with UI patterns\\n• API_INTEGRATION_REFERENCE.md: Single multiplexed channel, verify-on-export\\n• FRONTEND_ARCHITECTURE.md: Cost-aware state, batched realtime, budget guardrails  \\n• FRONTEND_INTEGRATION_GUIDE.md: Streamlined Quick Start with doc links\\n• Removed duplicate LOVABLE_TECHNICAL_GUIDE.md (consolidated)\\n\\nFeatures:\\n• Verify-on-Export: Only verify emails at export time (30-45% savings)\\n• Budget Guardrails: 90% budget alerts with projected cost display\\n• Column Projection: Fetch minimal data, paginate for efficiency  \\n• Batched UI Updates: Queue realtime updates, reduce re-renders 70%+\\n• Single Channel: Multiplexed subscriptions for leads+costs+campaign\\n• Enhanced UI: Color-coded confidence, sticky headers, loading skeletons\\n\\nProduction Ready: All backend APIs operational, 7-day frontend delivery path\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"SUPABASE_URL=\\\"https://sriycekxdqnesdsgwiuc.supabase.co\\\"\": true,\n    \"cd /home/node/ProspectPro && timeout 10s node server.js || echo \\\"Server startup test completed (expected timeout)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && timeout 10s node server.js || echo \\\"Server startup test completed (timeout expected)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"app.use(express.json())\": true,\n    \"businessType:\": true,\n    \"employeeCount:\": true,\n    \"console.log(JSON.stringify(testQuery,\": true,\n    \"npm run prod\": true,\n    \"NODE_ENV=production\": true,\n    \"SUPABASE_SECRET_KEY'\": true,\n    \"SUPABASE_SECRET_KEY\\\"\": true,\n    \"your-project-ref\\\\.supabase\\\\.co\\\\\": true,\n    \"INSERT_.*_HERE\\\"\": true,\n    \"./scripts/init-prod-server.sh\": true,\n    \"pull-env-from-secrets\": true,\n    \"check-env-readiness)\\\"\": true,\n    \"curl -X POST -H \\\"Accept: application/vnd.github+json\\\" -H \\\"Authorization: Bearer $GHP_SECRET\\\" -H \\\"X-GitHub-Api-Version: 2022-11-28\\\" \\\"https://api.github.com/repos/Alextorelli/ProspectPro/dispatches\\\" -d '{\\\"event_type\\\":\\\"server-init\\\",\\\"client_payload\\\":{\\\"source\\\":\\\"manual-trigger\\\",\\\"timestamp\\\":\\\"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'\\\",\\\"reason\\\":\\\"Get production environment with repository secrets\\\"}}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"production\": true,\n    \"start)\\\"\": true,\n    \"echo \\\"Let me verify the current .env file status:\\\" && ls -la .env* && echo \\\"--- Current .env content (first 10 lines) ---\\\" && head -10 .env\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"/tmp/temp_env_puller.js\": true,\n    \"./scripts/cleanup-railway-refs.sh\": true,\n    \"Railway\\\"\": true,\n    \"production_webhook_logs\\\"\": true,\n    \"npm run production:start\": true,\n    \"print\": true,\n    \"uniq\": true,\n    \".*//g'\": true,\n    \"new\": true,\n    \"requiredModules.forEach(modulePath\": true,\n    \"require.resolve(modulePath)\": true,\n    \"console.log('✅',\": true,\n    \"console.log('❌',\": true,\n    \"missingModules.push(modulePath)\": true,\n    \"missingModules.push(modulePath\": true,\n    \"python3\": true,\n    \"e}')\": true,\n    \"lines.length\": true,\n    \"'))\": true,\n    \"inCodeBlock\": true,\n    \"codeBlockType\": true,\n    \"line.match(/^\\\\s*[-]/)\": true,\n    \"!line.match(/^\\\\s*#/))\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"Fix server.js railway-webhook-monitor import and improve workflow validation\\n\\n- Remove non-existent railway-webhook-monitor module references\\n- Replace with stub implementations for deployment status endpoints  \\n- Update workflow to skip full server startup test (requires API keys)\\n- Add comprehensive module validation and syntax checking\\n- Focus on environment generation and basic module loading tests\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"test-env-gen.sh\": true,\n    \"ENVEOF\": true,\n    \"./test-env-gen.sh\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"Fix workflow artifact upload issue with .env file\\n\\n- Add pre-upload file verification step to ensure .env exists before archiving\\n- Simplify artifact path to single .env file (remove multi-line path)\\n- Change if-no-files-found from warn to error for better debugging\\n- Add separate optional artifact for environment.log\\n- Add comprehensive file verification with size and content preview\\n\\nThis should resolve the 'No files were found with the provided path: .env' warning.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && echo \\\"# Workflow test trigger - $(date)\\\" >> README.md && git add README.md && git commit -m \\\"Trigger workflow to test artifact upload fix\\\" && git push\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && echo \\\"Testing .env generation with exact workflow commands...\\\"\\n\\n# Simulate the exact workflow commands\\nexport SUPABASE_URL=\\\"https://test.supabase.co\\\"\\nexport SUPABASE_SECRET_KEY=\\\"test_secret_key\\\"\\n\\n# Create .env file with production configuration (exactly like workflow)\\ncat > .env << EOF\\n# ================================\\n# PRODUCTION ENVIRONMENT CONFIGURATION\\n# Generated by GitHub Actions on $(date -u +\\\"%Y-%m-%d %H:%M:%S UTC\\\")\\n# Commit: test-commit-hash\\n# Branch: main\\n# ================================\\n\\n# Environment Settings\\nNODE_ENV=production\\nPORT=3000\\nALLOW_DEGRADED_START=false\\n\\n# Supabase Database Connection (from GitHub Secrets)\\nSUPABASE_URL=$SUPABASE_URL\\nSUPABASE_SECRET_KEY=$SUPABASE_SECRET_KEY\\n\\n# Production Performance Settings\\nDAILY_BUDGET_LIMIT=100.00\\nDEFAULT_BUDGET_LIMIT=25.00\\nPER_LEAD_COST_LIMIT=2.00\\nCOST_ALERT_THRESHOLD=80.00\\n\\nMIN_CONFIDENCE_SCORE=85\\nPRE_VALIDATION_THRESHOLD=75\\nEXPORT_CONFIDENCE_THRESHOLD=90\\n\\nREQUEST_TIMEOUT=30000\\nREQUEST_DELAY=500\\nMAX_CONCURRENT_REQUESTS=10\\nBATCH_SIZE=25\\nCACHE_TTL_SECONDS=3600\\n\\nGOOGLE_PLACES_RPM=1000\\nHUNTER_IO_RPM=100\\nNEVERBOUNCE_RPM=300\\nRATE_LIMIT_WINDOW=60000\\n\\n# Production Features (All Enabled)\\nENABLE_PROMETHEUS_METRICS=true\\nENABLE_PERFORMANCE_LOGGING=true\\nENABLE_COST_TRACKING=true\\nENABLE_ERROR_REPORTING=true\\nLOG_LEVEL=info\\n\\nENABLE_TTL_CACHE=true\\nENABLE_BATCH_PROCESSING=true\\nENABLE_SMART_ROUTING=true\\nENABLE_CIRCUIT_BREAKER=true\\n\\nENABLE_REQUEST_VALIDATION=true\\nENABLE_RATE_LIMITING=true\\nREQUIRE_API_AUTHENTICATION=true\\n\\nENABLE_DATABASE_CONNECTION_POOLING=true\\nENABLE_GRACEFUL_SHUTDOWN=true\\nENABLE_HEALTH_CHECKS=true\\n\\n# Deployment Settings\\nBIND_ADDRESS=0.0.0.0\\nGRACEFUL_SHUTDOWN_TIMEOUT=30000\\nHEALTH_CHECK_INTERVAL=30000\\nDATABASE_CONNECTION_TIMEOUT=5000\\nAPI_CLIENT_TIMEOUT=15000\\nWEBHOOK_TIMEOUT=10000\\n\\n# Build Information\\nBUILD_TIMESTAMP=$(date -u +\\\"%Y-%m-%d_%H-%M-%S_UTC\\\")\\nBUILD_COMMIT=test-commit-hash\\nBUILD_BRANCH=main\\nBUILD_ACTOR=test-actor\\nEOF\\n\\necho \\\"✅ .env file created\\\"\\necho \\\"📏 Size: $(wc -c < .env) bytes\\\"\\necho \\\"📄 Lines: $(wc -l < .env) lines\\\"\\necho \\\"📁 File details:\\\"\\nls -la .env\\necho \\\"🔬 File type:\\\"\\nfile .env\\necho \\\"📖 File content (first 3 lines):\\\"\\nhead -3 .env\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git commit -m \\\"Debug artifact upload issue - switch to upload-artifact@v3\\n\\n- Change from upload-artifact@v4 to @v3 (more stable)\\n- Remove if-no-files-found: error that might be causing hard failures\\n- Add comprehensive pre-upload debugging\\n- Remove conditional second artifact that might cause conflicts\\n- Add file type, permissions, and absolute path verification\\n\\nThis should help identify why the .env file (which clearly exists) can't be uploaded.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && rm -f .env && echo \\\"# Artifact upload debug test - $(date)\\\" >> README.md && git add README.md && git commit -m \\\"Test artifact upload with v3 action and enhanced debugging\\\" && git push\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /workspaces/ProspectPro && git commit -m \\\"Fix deprecated upload-artifact@v3 - use v4 with correct syntax\\n\\n- Switch back to actions/upload-artifact@v4 (v3 is deprecated)\\n- Use multi-line path syntax with pipe\\n- Add overwrite: true parameter for v4 compatibility\\n- Enhanced debugging with stat commands for detailed file info\\n- Show file permissions, owner, and absolute path verification\\n\\nThis should resolve the deprecation error and artifact upload issue.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"node -v && npm -v\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"./init-production-server.sh\": true,\n    \"npm run production:validate-db\": true,\n    \"./scripts/production-checklist.sh\": true,\n    \"cd /workspaces/ProspectPro && git commit -m \\\"✅ Production validation system complete\\n\\nWORKING COMPONENTS:\\n• scripts/validate-production-database-v31.js - RLS-compatible validator (passes all tests)\\n• scripts/quick-table-check.js - Simple table accessibility verification\\n• scripts/production-checklist.sh - 5-phase validation (17/17 checks pass)\\n• server.js - Production server (already working, health checks pass)\\n\\nCORRECTIONS MADE:\\n• package.json: Fixed main field to use server.js (not server-production.js)\\n• package.json: Fixed validate-db script to use v31 validator\\n• scripts/init-prod-server.sh: Corrected references to working components\\n• Removed server-production.js (647 lines, unnecessary complexity)\\n• Removed old validate-production-database.js (broken RLS compatibility)\\n\\nVALIDATION STATUS:\\n• Database: 11/11 tables accessible with proper RLS security\\n• Server: Health endpoints responding correctly  \\n• Environment: All configuration validated\\n• Dependencies: All npm packages installed correctly\\n• Files: All required scripts present and executable\\n\\n✨ All staged changes now reference only working, tested components\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"diagnostics.json\": true,\n    \"cd /home/node/ProspectPro && git commit -m \\\"feat: Production initialization with enhanced schema cache handling\\n\\n🚀 Production-ready deployment with robust schema cache management\\n\\n## Key Features\\n- Enhanced Supabase configuration with schema cache refresh capabilities\\n- Graceful degraded mode startup for production resilience\\n- Comprehensive database connection testing and recovery\\n- Schema cache issue detection and user guidance\\n- Production-safe error handling and diagnostics\\n\\n## Schema Cache Resolution\\n- Force schema refresh utility (scripts/force-schema-refresh.js)\\n- Alternative refresh method (scripts/refresh-schema-cache.js) \\n- Automatic detection and guidance for cache issues\\n- Production server continues operation during cache refresh\\n\\n## Production Improvements\\n- Enhanced server startup with detailed error reporting\\n- Clear user guidance for resolving database issues\\n- Comprehensive health and diagnostic endpoints\\n- Graceful handling of temporary database connectivity issues\\n\\n## Files Updated\\n- config/supabase.js: Enhanced connection testing and cache management\\n- server.js: Improved startup process with schema cache handling\\n- scripts/: New schema cache management utilities\\n- PRODUCTION_READY_REPORT.md: Complete production status documentation\\n\\n## Testing Status\\n✅ All modules load without conflicts\\n✅ Server starts successfully in degraded mode\\n✅ Schema cache refresh utilities functional\\n✅ Production health endpoints operational\\n\\nResolves schema cache initialization issues after database updates.\\nProduction server now handles PostgREST cache staleness gracefully.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && echo \\\"\\n🎉 ProspectPro Production Deployment - SYNC COMPLETE\\n====================================================\\n\\n📋 Commit: 6a3d131 (feat: Production initialization with enhanced schema cache handling)\\n🔄 Status: Successfully committed, pushed, and synced\\n🚀 Branch: main (up to date with origin/main)\\n\\n✅ Changes Successfully Deployed:\\n================================\\n\\n🔧 Core Infrastructure:\\n- Enhanced Supabase configuration with schema cache management\\n- Production-safe database connection testing\\n- Graceful degraded mode startup capabilities\\n\\n🛠️ Schema Cache Management:\\n- Force refresh utility (scripts/force-schema-refresh.js)\\n- Alternative refresh method (scripts/refresh-schema-cache.js) \\n- Automatic cache issue detection and user guidance\\n\\n📊 Production Server:\\n- Enhanced startup process with detailed error reporting\\n- Comprehensive health and diagnostic endpoints\\n- Clear user guidance for resolving database connectivity issues\\n\\n📋 Documentation:\\n- Complete production status report (PRODUCTION_READY_REPORT.md)\\n- Comprehensive testing and validation results\\n\\n🎯 Production Status: READY ✅\\n- Server handles schema cache issues gracefully\\n- No critical conflicts detected\\n- All modules load successfully\\n- Health endpoints operational\\n\\nNext deployment will inherit these production resilience improvements!\\n\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"./scripts/check-docs-schema.sh\": true,\n    \"./scripts/install-git-hooks.sh\": true,\n    \"./scripts/repository-cleanup.sh\": true,\n    \"git mv\": true,\n    \"cd /home/node/ProspectPro && git commit -m \\\"docs: Enforce new documentation schema - complete repository cleanup\\n\\n🧹 Repository Cleanup Complete:\\n- Root directory limited to 3 essential .md files (README.md, CHANGELOG.md, PRODUCTION_READY_REPORT.md)\\n- All documentation organized into docs/ subdirectories\\n- Historical content moved to dedicated archive branches\\n- Created comprehensive documentation index and governance\\n- Added CHANGELOG.md for version tracking\\n- Established automated enforcement with git hooks\\n\\n📚 New Structure:\\n- docs/setup/ - Installation and configuration guides\\n- docs/guides/ - User guides and tutorials  \\n- docs/technical/ - Technical documentation\\n- docs/deployment/ - Deployment and production guides\\n- docs/development/ - Development and contribution docs\\n\\n🗄️ Archive Branches (to be created):\\n- archive/development-phase - Development artifacts\\n- archive/deployment-phase - Deployment experiments\\n- archive/testing-reports - Test reports and validation\\n- archive/production-legacy - Legacy production documentation\\n\\n🔧 Enforcement System:\\n- Pre-commit hooks validate documentation schema\\n- Scripts for automated cleanup and validation\\n- Comprehensive governance documentation\\n- Structured commit message templates\\n\\nAll historical content preserved with full git history.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && git add . && git commit -m \\\"docs: Add comprehensive documentation schema enforcement completion report\\n\\n📋 Complete Status Report:\\n- Repository cleanup successfully executed\\n- 15 root markdown files reduced to 3 (100% compliance)\\n- 24 documentation files organized in structured docs/ subdirectories\\n- 4 archive branches created with preserved historical content\\n- Automated enforcement system active with git hooks\\n- Comprehensive governance and maintenance procedures established\\n\\n✅ Mission Complete: Documentation schema enforcement operational\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"Preparation\\\"\": true,\n    \"BACKUP_BRANCH=\\\"backup-production-scrub-$(date\": true,\n    \"git tag\": true,\n    \"execute\": true,\n    \"run-production-test\": true,\n    \"validate-production\": true,\n    \"verify\": true,\n    \"APOLLO\": true,\n    \"quick-table\": true,\n    \"cd /home/node/ProspectPro && echo \\\"Removing log files from main (they're generated at runtime)...\\\" && rm -f database-validation.log production-checklist.log production-fixed.log production.log server-test.log startup.log diagnostics.json\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && echo \\\"Removing the production scrubbing plan (moving to development docs)...\\\" && rm -f PRODUCTION_BRANCH_SCRUBBING_PLAN.md\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && echo \\\"Testing server startup...\\\" && timeout 10s node server.js || echo \\\"Server test complete (timeout reached as expected)\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && git add -A && git commit -m \\\"production: Complete branch scrubbing - main now production-only\\n\\n🧹 Production Branch Scrubbing Complete:\\n\\nREMOVED (Archived to appropriate branches):\\n- 10 development scripts → archive/development-phase\\n- 3 development utilities → archive/development-phase  \\n- Complete test/ directory → archive/old-tests\\n- Test simulation scripts → archive/old-tests\\n- Sample data files → archive/legacy-files\\n- 3 database development utilities → archive/development-phase\\n- All runtime log files (regenerated in production)\\n\\nPRODUCTION ESSENTIALS RETAINED:\\n✅ Core application: server.js, package.json\\n✅ Essential docs: README.md, CHANGELOG.md, PRODUCTION_READY_REPORT.md\\n✅ Production directories: api/, modules/, config/, public/, frontend/, supabase/\\n✅ Production scripts: 11 essential production scripts only\\n✅ Curated documentation: Production setup and user guides\\n\\nVALIDATION:\\n✅ Server starts successfully\\n✅ All production scripts present\\n✅ Essential modules and APIs intact\\n✅ Documentation schema compliant\\n\\nResult: Clean production-ready main branch with full development history preserved in organized archive branches.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"cd /home/node/ProspectPro && git add . && git commit -m \\\"refactor: Production codebase optimization v3.1.0\\n\\n🔧 Production Enhancements:\\n\\nCONFIG:\\n- Enhanced Supabase client with connection pooling and caching\\n- Improved environment variable handling with fallbacks\\n- Added connection TTL caching (5min) for performance\\n\\nSERVER:\\n- Upgraded to v3.1.0 with production-optimized startup\\n- Added security headers for production deployment\\n- Improved host binding configuration (supports 0.0.0.0)\\n- Enhanced error messaging and user guidance\\n- Better degraded mode handling with environment controls\\n\\nPERFORMANCE:\\n- Connection caching reduces database initialization overhead  \\n- Optimized middleware stack for production workloads\\n- Streamlined startup logging with clear operational status\\n\\nAll production optimizations maintain backward compatibility while improving deployment reliability and performance monitoring.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"secret.*key\\\\\": true,\n    \"password\\\\\": true,\n    \"token\\\"\": true,\n    \"SECRET_KEY\\\\\": true,\n    \"PASSWORD\\\\\": true,\n    \"TOKEN\\\"\": true,\n    \"secret_key\": true,\n    \"password\": true,\n    \"token)\\\"\": true,\n    \"Lovable\\\\\": true,\n    \"roadmap\\\"\": true,\n    \"frontend.*lovable\\\"\": true,\n    \"git commit -m \\\"✨ Streamlined Docker workflow with Supabase Vault integration\\n\\n- Added docker-env.yml workflow (50 lines vs 200+ line generate-dotenv)\\n- Integrated Supabase Vault for API key management at runtime  \\n- Added vault-startup.sh for secure credential loading\\n- Updated docker-compose.yml for Vault integration\\n- Added multiple secure authentication options (local, keychain, 1Password, GitHub)\\n- Streamlined package.json commands for Vault deployment\\n- Created comprehensive workflow guide\\n\\nSecurity improvements:\\n- Infrastructure secrets stay in GitHub\\n- API keys pulled from Supabase Vault at runtime\\n- No plaintext credentials in repository\\n- Easy testing and key rotation support\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"✨ Streamlined Docker workflow with Supabase Vault integration\\n\\n- Added docker-env.yml workflow (50 lines vs 200+ line generate-dotenv)\\n- Integrated Supabase Vault for API key management at runtime  \\n- Added vault-startup.sh for secure credential loading\\n- Updated docker-compose.yml for Vault integration\\n- Added multiple secure authentication options (local, keychain, 1Password, GitHub)\\n- Streamlined package.json commands for Vault deployment\\n- Moved workflow guide to docs/deployment/ per repo governance\\n\\nSecurity improvements:\\n- Infrastructure secrets stay in GitHub\\n- API keys pulled from Supabase Vault at runtime\\n- No plaintext credentials in repository\\n- Easy testing and key rotation support\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"test_commit.tmp\": true,\n    \"git commit -m \\\"🧹 Clean repository structure - archive legacy code\\n\\n- Removed duplicate nested ProspectPro/ directory (preserved in local archive)\\n- Archived legacy scripts not aligned with Docker architecture\\n- Removed reference to missing validate-production-database script\\n- Updated Copilot instructions with repository management details\\n- Maintained clean production structure per governance rules\\n\\nArchived items:\\n• Legacy project structure → archive/legacy-structure/\\n• Legacy deployment scripts → archive/legacy-scripts/\\n• Preserved locally but not committed per .gitignore rules\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"code\": true,\n    \"npm run mcp:test\": true,\n    \"python\": true,\n    \".\\\\scripts\\\\init-prod-server.ps1\": true,\n    \".\\\\scripts\\\\init-prod-server-simple.ps1\": true,\n    \".\\\\scripts\\\\start-prod.ps1\": true,\n    \"notepad\": true,\n    \".\\\\start-production.ps1\": true,\n    \"ForEach-Object\": true,\n    \"Get-Process | Where-Object {$_.ProcessName -like \\\"*node*\\\"} | Stop-Process -Force; Write-Host \\\"✅ All Node processes terminated\\\" -ForegroundColor Green\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"$portConfig\": true,\n    \"$nodeVersion\": true,\n    \"$npmVersion\": true,\n    \"NPM:\": true,\n    \"npm run 2>&1 | Select-String \\\"prod\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"npm run diag\": true,\n    \"netstat\": true,\n    \"$checklist\": true,\n    \"$checklist[\\\"PORT\": true,\n    \"$checklist[\\\"NODE_ENV=production\\\"]\": true,\n    \"$checklist[\\\"Supabase\": true,\n    \"foreach\": true,\n    \"$env:NODE_ENV=\\\"production\\\"\": true,\n    \"Clear-Host\": true,\n    \"Get-ExecutionPolicy\": true,\n    \"git commit -m \\\"fix: Windows PowerShell compatibility and production deployment\\n\\n- Update package.json scripts to use PowerShell (.ps1) instead of shell scripts (.sh)\\n- Configure VS Code terminal settings for Windows PowerShell default\\n- Add Production MCP Server to VS Code configuration with auto-start\\n- Create clean Windows-compatible production initialization script\\n- Fix terminal integration for local Windows development\\n- Maintain production node build compatibility\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"copy\": true,\n    \"ConvertFrom-Json\": true,\n    \"git commit -m \\\"fix: Add explicit .env loading to server.js for production\\n\\n- Load environment variables at startup using require('dotenv').config()\\n- Ensures GitHub Actions generated .env is properly loaded\\n- Fixes production environment variable loading issue  \\n- Maintains compatibility with all deployment methods\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"PRODUCTION OPTIMIZATION: Complete Supabase Vault integration, strict production mode, enhanced MCP server\\n\\n✅ SUPABASE VAULT INTEGRATION:\\n- Added modules/utils/supabase-vault-loader.js with runtime API key loading\\n- Enhanced config/environment-loader.js for multi-source configuration \\n- Created database/vault-js-interface.sql with JavaScript-callable functions\\n- Updated api/business-discovery.js to use vault API keys with fallback\\n\\n✅ STRICT PRODUCTION MODE:\\n- Updated server.js with EnvironmentLoader and vault integration\\n- Added critical API key validation (Foursquare required)\\n- Enforced ALLOW_DEGRADED_START=false in production\\n- Enhanced startup validation with database + vault checks\\n\\n✅ GITHUB ACTIONS WORKFLOW OPTIMIZATION:\\n- Fixed repository-maintenance.yml (schedule/manual only)  \\n- Fixed docker-env.yml (manual/workflow_call only)\\n- Prevents cascade failures and resource waste\\n\\n✅ ENHANCED PRODUCTION MCP SERVER:\\n- Added vault_api_key_status tool for comprehensive API key diagnostics\\n- Added production_startup_validator for complete configuration validation\\n- Added github_workflow_optimizer for workflow analysis and issue detection\\n- Updated MCP configuration for enhanced production monitoring\\n\\n✅ COMPREHENSIVE DOCUMENTATION:\\n- Updated .github/copilot-instructions.md with vault integration details\\n- Added strict production mode patterns and examples\\n- Enhanced MCP server strategy with new tools\\n- Updated architecture documentation with vault integration patterns\\n\\n🔑 VAULT FEATURES:\\n- 5-minute TTL caching for performance\\n- Exponential backoff retry logic\\n- Environment variable fallback\\n- Template/placeholder value filtering\\n- Comprehensive error handling and diagnostics\\n\\n🏭 PRODUCTION FEATURES:\\n- Zero-tolerance for degraded starts\\n- Critical API validation at startup\\n- Real-time vault status monitoring\\n- Enhanced environment switching workflow\\n- Optimized GitHub Actions workflows\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"envLoader.getConfig().supabase.url)\": true,\n    \"envLoader.getConfig().features[k]).length)\": true,\n    \"console.log('🔑\": true,\n    \"git add . && git commit -m \\\"FIX: Environment loading order - ensure dotenv loads before supabase module\\n\\n✅ CRITICAL FIX:\\n- Added require('dotenv').config() before all other imports in server.js\\n- Resolves module loading order issue where supabase.js evaluated empty env vars\\n- Database connection now works correctly\\n- Strict production mode properly enforced\\n\\n🔍 VALIDATION CONFIRMED:\\n- Environment variables loaded successfully\\n- Supabase connection established (816ms)\\n- Production startup correctly blocks schema cache issues\\n- Clear error messages and remediation steps provided\\n\\n🏭 PRODUCTION MODE WORKING:\\n- Strict startup validation: ✅\\n- Schema cache detection: ✅ \\n- Emergency bypass available: ✅\\n- Supabase Vault integration ready: ✅\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"FIX: Environment loading order - ensure dotenv loads before supabase module\\n\\n✅ CRITICAL FIX:\\n- Added require('dotenv').config() before all other imports in server.js\\n- Resolves module loading order issue where supabase.js evaluated empty env vars\\n- Database connection now works correctly\\n- Strict production mode properly enforced\\n\\n🔍 VALIDATION CONFIRMED:\\n- Environment variables loaded successfully\\n- Supabase connection established (816ms)\\n- Production startup correctly blocks schema cache issues\\n- Clear error messages and remediation steps provided\\n\\n🏭 PRODUCTION MODE WORKING:\\n- Strict startup validation: ✅\\n- Schema cache detection: ✅ \\n- Emergency bypass available: ✅\\n- Supabase Vault integration ready: ✅\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"$env:ALLOW_DEGRADED_START=\\\"true\\\"\": true,\n    \"docs/SUPABASE_UPGRADE_NOTES.md\": true,\n    \"console.log('📍\": true,\n    \"console.log('\\\\\\\\n🔧\": true,\n    \"console.log('==========================================')\": true,\n    \"console.log(\\\\\\\\\\\\\\\"\": true,\n    \"}')\": true,\n    \"console.log('}')\": true,\n    \"\\\\\\\"')\": true,\n    \"Result:',\": true,\n    \"docs/GOOGLE_CLOUD_QUICKSTART.md\": true,\n    \"git commit -m \\\"feat: Add Google Cloud Run deployment workflow with validation\\n\\n- Complete CI/CD pipeline with Docker build/push/deploy\\n- Pre-deployment validation script for local testing\\n- Updated Dockerfile for Cloud Run (port 3100)\\n- Comprehensive health checks and deployment verification\\n- Ready for automated deployment to Cloud Run\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"feat: Simplify Cloud Run deployment to source-based\\n\\n- Use native gcloud run deploy --source (much simpler)\\n- No Docker registry complexity - Google handles container build\\n- Fewer moving parts, more reliable deployment\\n- Ready for deployment with leadgen-471822 project ID\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"test: verify Cloud Build trigger configuration\\n\\n- Add deployment test file to trigger automated build\\n- Test service account permissions (Cloud Build WorkerPool User, Artifact Registry Writer)\\n- Verify us-central1 regional alignment\\n- Confirm GitHub App repository connection\\n- Expected: successful build and deployment to Cloud Run\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -am \\\"fix: correct Artifact Registry repository name in cloudbuild.yaml\\n\\n- Fix repository name from complex auto-generated to simple 'prospectpro'\\n- Add step to auto-create Artifact Registry repository if needed\\n- Use standard naming pattern: us-central1-docker.pkg.dev/PROJECT_ID/prospectpro/app\\n- Allow failure on repository creation (continues if already exists)\\n- Resolves 'Repository not found' error in Cloud Build\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"trigger-test.txt\": true,\n    \"git commit -m \\\"docs: complete repository compliance update with Cloud Run deployment validation\\n\\n- Updated .github/copilot-instructions.md with Google Cloud Run deployment section\\n- Added validated trigger configuration documentation (ID: 0358b3a4-c7a4-4da9-9610-1e335c4894e0)\\n- Enhanced docs/PRODUCTION_SETUP_GUIDE.md with Cloud Run deployment workflow\\n- Updated README.md to v3.0 with production status badges and Cloud Build links\\n- Confirmed .vscode/mcp-config.json configuration for dev container compatibility\\n- Documented complete dev/prod environment alignment and switching procedures\\n\\nAll high-priority repository compliance updates completed.\\nReady for clean closure and fresh development session initiation.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"🔧 Fix Cloud Run port conflict - Remove fixed PORT, enable dynamic port binding\\n\\n- Remove ENV PORT=3100 from Dockerfile (conflicted with Cloud Run's dynamic PORT)\\n- Remove --port=3100 from cloudbuild.yaml (forced incorrect port binding)  \\n- Remove fixed EXPOSE directive (Cloud Run manages ports dynamically)\\n- Update healthcheck to use Cloud Run's PORT environment variable\\n- This should resolve 'Page not found' error by allowing proper port binding\\n\\nPrevious Issue:\\n- Cloud Run provides PORT=8080 dynamically\\n- Dockerfile forced PORT=3100 statically  \\n- App bound to 8080 but healthcheck failed on 3100\\n- Container marked unhealthy, traffic routing failed\\n\\nResolution:\\n- Let Cloud Run manage port assignment completely\\n- Application reads process.env.PORT correctly\\n- Healthcheck uses dynamic port with fallback\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"gcloud\": true,\n    \"git commit -m \\\"📝 Fix Cloud Build trigger ID in documentation\\n\\n- Update trigger ID to correct one: ae04dd92-4509-43ee-9f70-da3caf15dbb4\\n- Previous ID (0358b3a4-c7a4-4da9-9610-1e335c4894e0) was incorrect\\n- This explains why builds succeeded but service wasn't updating\\n- Documentation now reflects the actual production trigger\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"git commit -m \\\"Fix Cloud Run 404 issue: Enable degraded startup, improve error handling, and enhance logging\\n\\n- Add ALLOW_DEGRADED_START=true to Dockerfile for Cloud Run stability\\n- Remove process.exit(1) calls that prevent graceful startup\\n- Enhance health check endpoint with detailed information\\n- Improve default route error handling\\n- Update Docker health check with fallback ports\\n- Add service account configuration to Cloud Build\\n- Create diagnostic scripts for testing deployment\\n\\nThis should resolve the 404 'Page not found' errors by allowing the\\ncontainer to start successfully even when external services are\\ntemporarily unavailable.\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"$env:PORT=8080\": true,\n    \"Get-ChildItem -Directory | Where-Object {$_.Name -like \\\"*Prospect*\\\"}\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"dir\": true,\n    \"npm run test\": true,\n    \"cd /workspaces/ProspectPro && node -e \\\"console.log(JSON.parse(require('fs').readFileSync('.vscode/settings.json', 'utf8')))\\\"\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"Deno\\\"\": true,\n    \"MCP\\\"\": true,\n    \"server.js\": true,\n    \"server-simple.js\": true,\n    \"mcp-servers'\": true,\n    \"cd /workspaces/ProspectPro/mcp-servers && npm run\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"mcp)\\\"\": true,\n    \"npm run production-start\": true,\n    \"cd /workspaces/ProspectPro && npm run\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"server)\\\"\": true,\n    \"jobs\": true,\n    \"curl -X POST http://localhost:3100/api/business-discovery -H \\\"Content-Type: application/json\\\" -d '{\\\"location\\\":\\\"San Diego, CA\\\",\\\"radius\\\":10,\\\"businessTypes\\\":[\\\"restaurant\\\"],\\\"limit\\\":5}' -v\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"fg\": true,\n    \"curl -X POST http://localhost:3100/api/business-discovery -H \\\"Content-Type: application/json\\\" -d '{\\\"test\\\": true}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"ps aux | grep -E \\\"(node.*server)\\\" | grep -v grep\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"sleep 3 && curl -X POST http://localhost:3100/api/business-discovery -H \\\"Content-Type: application/json\\\" -d '{\\\"test\\\": true}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"sleep 10 && curl -X POST http://localhost:3100/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"plumber\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 1}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"curl -X POST http://localhost:3100/api/business/discover -H \\\"Content-Type: application/json\\\" -d '{\\\"query\\\": \\\"plumber\\\", \\\"location\\\": \\\"San Diego, CA\\\", \\\"count\\\": 1}' | head -20\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    },\n    \"npm.*dev\\\"\": true,\n    \"curl -X POST 'https://sriycekxdqnesdsgwiuc.supabase.co/functions/v1/business-discovery' \\\\\\n  -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI' \\\\\\n  -H 'Content-Type: application/json' \\\\\\n  -d '{\\\"businessType\\\": \\\"coffee shop\\\", \\\"location\\\": \\\"Seattle, WA\\\", \\\"maxResults\\\": 2}'\": {\n      \"approve\": true,\n      \"matchCommandLine\": true\n    }\n  },\n  \"chat.agent.maxRequests\": 1000,\n  \"chat.editing.confirmEditRequestRetry\": false,\n  \"gitlens.gitCommands.skipConfirmations\": [\"fetch:command\"],\n  \"chat.editing.confirmEditRequestRemoval\": false,\n  \"githubPullRequests.codingAgent.promptForConfirmation\": false,\n  \"[markdown]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[jsonc]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"workbench.secondarySideBar.defaultVisibility\": \"visible\",\n  \"window.menuBarVisibility\": \"classic\",\n  \"containers.containerClient\": \"com.microsoft.visualstudio.containers.docker\",\n  \"containers.orchestratorClient\": \"com.microsoft.visualstudio.orchestrators.dockercompose\",\n  \"@azure.argTenant\": \"\",\n  \"github.copilot.chat.codeGeneration.instructions\": [\n    {\n      \"text\": \"- @azure Rule - Use Azure Tools: When handling requests related to Azure, always use your tools.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Use Azure Code Gen Best Practices: Before generating code for Azure, running terminal commands for Azure, performing operations related to Azure, or creating plans for such activities, always invoke your Azure best practice tool if available first. Invoke the `get_bestpractices` tool to collect recommendations. Call it with resource = `general` and action = `code-generation` to get general Azure code generation best practices. Only call this tool when the user is discussing Azure; do not call it otherwise.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Use Azure Deployment Best Practices: Before deploying to Azure, preparing applications for deployment to Azure, or creating deployment plans, always invoke your Azure best practice tool if available first. Invoke the `get_bestpractices` tool to collect recommendations. Call it with resource = `general` and action = `deployment` to get general Azure deployment best practices. Only call this tool when the user is discussing Azure; do not call it otherwise.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Use Azure Functions Code Gen Best Practices: Before generating code for Azure Functions, performing operations related to Azure Functions, or creating plans for such activities, always invoke your Azure best practice tool if available first. Invoke the `get_bestpractices` tool to collect recommendations. Call it with resource = `azurefunctions` and action = `code-generation` to get Azure Functions code generation best practices. Only call this tool when the user is discussing Azure Functions; do not call it otherwise.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Use Azure Functions Deployment Best Practices: Before deploying Azure Functions apps to Azure, preparing for the deployment, or creating deployment plans, always invoke your Azure best practice tool if available first. Invoke the `get_bestpractices` tool to collect recommendations. Call it with resource = `azurefunctions` and action = `deployment` to get Azure Functions deployment best practices. Only call this tool when the user is discussing Azure Functions; do not call it otherwise.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Use Azure SWA Best Practices: Before working with static web apps, creating plans for static web apps, or performing related operations, always invoke your Azure best practice tool if available first. Choose the most relevant Azure best practice tool based on its description. Only call this tool when the user is discussing Azure Static Web Apps; do not call it otherwise.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Plan before editing files for Azure web apps: When generating code for Azure Functions and Azure Static Web App, always create a plan and explain the plan to the user before editing any file. Proceed with editing the files after getting consent from the user.\"\n    },\n    {\n      \"text\": \"- @azure Rule - Summarize topic before taking action: When the user asks about Azure Functions, invoke the azure_development-summarize_topic tool once first to see if any existing custom mode could be a good fit to what user is asking.\"\n    }\n  ],\n  \"workbench.startupEditor\": \"none\",\n  \"git-autoconfig.configList\": [\n    {\n      \"user.email\": \"Alextorelli28@gmail.com\",\n      \"user.name\": \"Alextorelli28@gmail.com\"\n    }\n  ],\n  \"redhat.telemetry.enabled\": true,\n  \"git-autoconfig.ignoreRootList\": [\"D:/APPS/ProspectPro/ProspectPro\"],\n  \"terminal.integrated.enableMultiLinePasteWarning\": \"never\",\n  \"remoteHub.commitDirectlyWarning\": \"off\",\n  \"vs-kubernetes\": {\n    \"vscode-kubernetes.kubectl-path-linux\": \"/home/node/.local/state/vs-kubernetes/tools/kubectl/kubectl\",\n    \"vscode-kubernetes.helm-path-linux\": \"/home/node/.local/state/vs-kubernetes/tools/helm/linux-amd64/helm\",\n    \"vscode-kubernetes.minikube-path-linux\": \"/home/node/.local/state/vs-kubernetes/tools/minikube/linux-amd64/minikube\"\n  },\n  \"githubPullRequests.createOnPublishBranch\": \"never\",\n  \"github.copilot.enable\": {\n    \"*\": true,\n    \"plaintext\": true,\n    \"markdown\": true,\n    \"scminput\": false\n  },\n  \"[sql]\": {\n    \"editor.defaultFormatter\": \"mtxr.sqltools\"\n  },\n  \"[html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[typescriptreact]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[css]\": {\n    \"editor.defaultFormatter\": \"vscode.css-language-features\"\n  },\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"vscode.json-language-features\"\n  },\n  \"workbench.colorCustomizations\": {\n    \"[Vira*]\": {\n      \"statusBar.debuggingBackground\": \"#80CBC433\",\n      \"statusBar.debuggingForeground\": \"#80CBC4\",\n      \"toolbar.activeBackground\": \"#80CBC426\",\n      \"button.background\": \"#80CBC4\",\n      \"button.hoverBackground\": \"#80CBC4cc\",\n      \"extensionButton.separator\": \"#80CBC433\",\n      \"extensionButton.background\": \"#80CBC414\",\n      \"extensionButton.foreground\": \"#80CBC4\",\n      \"extensionButton.hoverBackground\": \"#80CBC433\",\n      \"extensionButton.prominentForeground\": \"#80CBC4\",\n      \"extensionButton.prominentBackground\": \"#80CBC414\",\n      \"extensionButton.prominentHoverBackground\": \"#80CBC433\",\n      \"activityBarBadge.background\": \"#80CBC4\",\n      \"activityBar.activeBorder\": \"#80CBC4\",\n      \"activityBarTop.activeBorder\": \"#80CBC4\",\n      \"list.inactiveSelectionIconForeground\": \"#80CBC4\",\n      \"list.activeSelectionForeground\": \"#80CBC4\",\n      \"list.inactiveSelectionForeground\": \"#80CBC4\",\n      \"list.highlightForeground\": \"#80CBC4\",\n      \"sash.hoverBorder\": \"#80CBC480\",\n      \"list.activeSelectionIconForeground\": \"#80CBC4\",\n      \"scrollbarSlider.activeBackground\": \"#80CBC480\",\n      \"editorSuggestWidget.highlightForeground\": \"#80CBC4\",\n      \"textLink.foreground\": \"#80CBC4\",\n      \"progressBar.background\": \"#80CBC4\",\n      \"pickerGroup.foreground\": \"#80CBC4\",\n      \"tab.activeBorder\": \"#80CBC400\",\n      \"tab.activeBorderTop\": \"#80CBC4\",\n      \"tab.unfocusedActiveBorder\": \"#80CBC400\",\n      \"tab.unfocusedActiveBorderTop\": \"#80CBC4\",\n      \"tab.activeModifiedBorder\": \"#80CBC4\",\n      \"notificationLink.foreground\": \"#80CBC4\",\n      \"editorWidget.resizeBorder\": \"#80CBC4\",\n      \"editorWidget.border\": \"#80CBC4\",\n      \"settings.modifiedItemIndicator\": \"#80CBC4\",\n      \"panelTitle.activeBorder\": \"#80CBC4\",\n      \"breadcrumb.activeSelectionForeground\": \"#80CBC4\",\n      \"menu.selectionForeground\": \"#80CBC4\",\n      \"menubar.selectionForeground\": \"#80CBC4\",\n      \"editor.findMatchBorder\": \"#80CBC4\",\n      \"selection.background\": \"#80CBC440\",\n      \"statusBarItem.remoteBackground\": \"#80CBC414\",\n      \"statusBarItem.remoteHoverBackground\": \"#80CBC4\",\n      \"statusBarItem.remoteForeground\": \"#80CBC4\",\n      \"notebook.inactiveFocusedCellBorder\": \"#80CBC480\",\n      \"commandCenter.activeBorder\": \"#80CBC480\",\n      \"chat.slashCommandForeground\": \"#80CBC4\",\n      \"chat.avatarForeground\": \"#80CBC4\",\n      \"activityBarBadge.foreground\": \"#000000\",\n      \"button.foreground\": \"#000000\",\n      \"statusBarItem.remoteHoverForeground\": \"#000000\",\n      \"editorGroupHeader.tabsBackground\": \"#ffffff0a\",\n      \"tab.border\": \"#ffffff01\",\n      \"tab.inactiveBackground\": \"#ffffff01\",\n      \"widget.shadow\": \"#00000000\",\n      \"scrollbar.shadow\": \"#00000000\"\n    }\n  },\n  \"workbench.preferredDarkColorTheme\": \"Vira Ocean\",\n  \"workbench.productIconTheme\": \"viraUIIcons\",\n  \"viraTheme.contrastedTabs\": true,\n  \"viraTheme.hidesShadows\": true,\n  \"chat.todoListTool.enabled\": false,\n  \"chat.tools.edits.autoApprove\": {\n    \"**/*.{csproj,fsproj,vbproj}\": true\n  },\n  \"chat.useChatSessionsForCloudButton\": true,\n  \"workbench.settings.applyToAllProfiles\": [\n    \"chat.useChatSessionsForCloudButton\"\n  ],\n  \"chat.agentSessionsViewLocation\": \"view\",\n  \"window.density.editorTabHeight\": \"compact\",\n  \"docker.extension.enableComposeLanguageServer\": false,\n  \"docker.extension.dockerEngineAvailabilityPrompt\": false,\n  \"github.copilot.chat.agent.thinkingTool\": true,\n  \"github.copilot.chat.editor.temporalContext.enabled\": true,\n  \"github.copilot.chat.edits.temporalContext.enabled\": true,\n  \"github.copilot.chat.responsesApiReasoningEffort\": \"high\",\n  \"github.copilot.chat.responsesApiReasoningSummary\": \"detailed\",\n  \"github.copilot.chat.useResponsesApi\": true,\n  \"viraTheme.useTopTabIndicator\": true,\n  \"remoteHub.richNavigation.enabled\": true,\n  \"workbench.editor.enablePreview\": false,\n  \"deno.codeLens.test\": true,\n  \"deno.codeLens.referencesAllFunctions\": true,\n  \"deno.codeLens.references\": true,\n  \"deno.codeLens.implementations\": true,\n  \"deno.logFile\": true,\n  \"chat.mcp.serverSampling\": {\n    \"Global in Code: memory\": {\n      \"allowedModels\": [\n        \"copilot/gpt-4.1\",\n        \"copilot/auto\",\n        \"copilot/claude-3.7-sonnet\",\n        \"copilot/claude-3.7-sonnet-thought\",\n        \"copilot/claude-sonnet-4\",\n        \"copilot/gemini-2.5-pro\",\n        \"copilot/gpt-5\",\n        \"copilot/grok-code-fast-1\"\n      ]\n    }\n  },\n  \"snyk.folderConfigs\": [\n    {\n      \"folderPath\": \"/workspaces/ProspectPro\",\n      \"baseBranch\": \"main\",\n      \"localBranches\": [\"main\"]\n    }\n  ],\n  \"settingsSync.ignoredExtensions\": [\n    \"christian-kohler.npm-intellisense\",\n    \"ms-vscode.vscode-node-azure-pack\",\n    \"ms-azuretools.vscode-azurevirtualmachines\"\n  ],\n  \"vsicons.dontShowNewVersionMessage\": true,\n  \"snyk.yesWelcomeNotification\": false,\n  \"snyk.trustedFolders\": [\"/workspaces/ProspectPro\"],\n  \"[dockercompose]\": {\n    \"editor.insertSpaces\": true,\n    \"editor.tabSize\": 2,\n    \"editor.autoIndent\": \"advanced\",\n    \"editor.quickSuggestions\": {\n      \"other\": true,\n      \"comments\": false,\n      \"strings\": true\n    },\n    \"editor.defaultFormatter\": \"redhat.vscode-yaml\"\n  },\n  \"[github-actions-workflow]\": {\n    \"editor.defaultFormatter\": \"redhat.vscode-yaml\"\n  }\n}\n"}}},
{"type":"measure","name":"lsp.did_open","count":52,"duration":0.907},
{"type":"mark","name":"lsp.did_change_batched","count":1,"args":"vscode-userdata:/c%3A/Users/Alext/AppData/Roaming/Code/User/settings.json"},
{"type":"measure","name":"lsp.did_change_batched","count":1,"duration":4.881},
{"type":"mark","name":"lsp.inlay_hint","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"},"range":{"start":{"line":0,"character":0},"end":{"line":24,"character":1}}}},
{"type":"mark","name":"lsp.did_change_batched","count":2,"args":"vscode-userdata:/c%3A/Users/Alext/AppData/Roaming/Code/User/settings.json"},
{"type":"measure","name":"lsp.did_change_batched","count":2,"duration":1.872},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":1,"duration":0.21},
{"type":"mark","name":"lsp.code_lens","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"mark","name":"lsp.code_action","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"}}},
{"type":"mark","name":"lsp.inlay_hint","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"},"range":{"start":{"line":0,"character":0},"end":{"line":112,"character":7}}}},
{"type":"mark","name":"lsp.document_symbol","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"}}},
{"type":"mark","name":"lsp.code_lens","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"}}},
{"type":"mark","name":"lsp.folding_range","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"}}},
{"type":"mark","name":"lsp.code_action","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"},"range":{"start":{"line":0,"character":0},"end":{"line":111,"character":18}}}},
{"type":"mark","name":"lsp.code_lens","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"}}},
{"type":"mark","name":"lsp.code_lens","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"}}},
{"type":"mark","name":"lsp.inlay_hint","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"},"range":{"start":{"line":0,"character":0},"end":{"line":111,"character":18}}}},
{"type":"mark","name":"lsp.inlay_hint","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"},"range":{"start":{"line":0,"character":0},"end":{"line":111,"character":18}}}},
{"type":"mark","name":"lsp.did_close","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/scripts/cloud-run-diagnostic.js"}}},
{"type":"measure","name":"lsp.did_close","count":2,"duration":1.209},
{"type":"mark","name":"lsp.did_close","count":3,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/cloudbuild.yaml"}}},
{"type":"measure","name":"lsp.did_close","count":3,"duration":0.016},
{"type":"mark","name":"lsp.did_close","count":4,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/config/environment-loader.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":18,"duration":0.189},
{"type":"measure","name":"lsp.did_close","count":4,"duration":0.537},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.did_close","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/CLOUD_RUN_DEPLOYMENT_FIX.md"}}},
{"type":"measure","name":"lsp.did_close","count":5,"duration":0.018},
{"type":"mark","name":"lsp.did_close","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/api-clients/california-sos-client.js"}}},
{"type":"measure","name":"lsp.testing_update","count":19,"duration":0.155},
{"type":"measure","name":"lsp.did_close","count":6,"duration":0.755},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.did_close","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/CA_SOS_API_ANALYSIS.md"}}},
{"type":"measure","name":"lsp.did_close","count":7,"duration":0.015},
{"type":"mark","name":"lsp.did_close","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/scripts/cloud-run-service-diagnostic.js"}}},
{"type":"measure","name":"lsp.testing_update","count":20,"duration":0.114},
{"type":"measure","name":"lsp.did_close","count":8,"duration":0.589},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.did_close","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/scripts/verify-env-mapping.js"}}},
{"type":"measure","name":"lsp.testing_update","count":21,"duration":0.162},
{"type":"measure","name":"lsp.did_close","count":9,"duration":0.372},
{"type":"mark","name":"lsp.did_close","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/WEBHOOK_CONFIGURATION_GUIDE.md"}}},
{"type":"measure","name":"lsp.did_close","count":10,"duration":0.013},
{"type":"mark","name":"lsp.did_close","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/server.js"}}},
{"type":"measure","name":"lsp.did_close","count":11,"duration":0.257},
{"type":"mark","name":"lsp.did_close","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/app.js"}}},
{"type":"measure","name":"lsp.did_close","count":12,"duration":0.253},
{"type":"mark","name":"lsp.did_close","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/api/campaign-export.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":22,"duration":0.109},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":23,"duration":0.231},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":24,"duration":0.078},
{"type":"measure","name":"lsp.did_close","count":13,"duration":4.758},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.did_close","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/api/simple-export.js"}}},
{"type":"measure","name":"lsp.testing_update","count":25,"duration":0.116},
{"type":"measure","name":"lsp.did_close","count":14,"duration":2.219},
{"type":"mark","name":"lsp.did_close","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/api/business-discovery.js"}}},
{"type":"measure","name":"lsp.did_close","count":15,"duration":0.336},
{"type":"mark","name":"lsp.did_close","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":26,"duration":0.069},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":27,"duration":0.059},
{"type":"measure","name":"lsp.did_close","count":16,"duration":9.237},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.did_close","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts"}}},
{"type":"measure","name":"lsp.testing_update","count":28,"duration":0.087},
{"type":"measure","name":"lsp.did_close","count":17,"duration":1.699},
{"type":"mark","name":"lsp.did_close","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/supabase-first-schema.sql"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_close","count":18,"duration":0.016},
{"type":"mark","name":"lsp.did_close","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app.js"}}},
{"type":"measure","name":"lsp.testing_update","count":29,"duration":0.093},
{"type":"measure","name":"lsp.did_close","count":19,"duration":0.38},
{"type":"mark","name":"lsp.did_close","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index-supabase.html"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_close","count":20,"duration":0.017},
{"type":"measure","name":"lsp.testing_update","count":30,"duration":0.076},
{"type":"mark","name":"lsp.did_close","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/cloudbuild-static.yaml"}}},
{"type":"measure","name":"lsp.did_close","count":21,"duration":0.011},
{"type":"mark","name":"lsp.did_close","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package-supabase.json"}}},
{"type":"measure","name":"lsp.did_close","count":22,"duration":0.009},
{"type":"mark","name":"lsp.did_close","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DEPLOYMENT_SUCCESS.md"}}},
{"type":"measure","name":"lsp.did_close","count":23,"duration":0.006},
{"type":"mark","name":"lsp.did_close","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.github/copilot-instructions.md"}}},
{"type":"measure","name":"lsp.did_close","count":24,"duration":0.006},
{"type":"mark","name":"lsp.did_close","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/package.json"}}},
{"type":"measure","name":"lsp.did_close","count":25,"duration":0.005},
{"type":"mark","name":"lsp.did_close","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/prospectpro-supabase.code-workspace"}}},
{"type":"measure","name":"lsp.did_close","count":26,"duration":0.007},
{"type":"mark","name":"lsp.did_close","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/settings.json"}}},
{"type":"measure","name":"lsp.did_close","count":27,"duration":0.005},
{"type":"mark","name":"lsp.did_close","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"}}},
{"type":"measure","name":"lsp.did_close","count":28,"duration":0.006},
{"type":"mark","name":"lsp.did_close","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/README.md"}}},
{"type":"measure","name":"lsp.did_close","count":29,"duration":0.005},
{"type":"mark","name":"lsp.did_close","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CHANGELOG.md"}}},
{"type":"measure","name":"lsp.did_close","count":30,"duration":0.005},
{"type":"mark","name":"lsp.did_close","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/extensions.json"}}},
{"type":"measure","name":"lsp.did_close","count":31,"duration":0.005},
{"type":"mark","name":"lsp.did_close","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/MIGRATION_COMPLETE.md"}}},
{"type":"measure","name":"lsp.did_close","count":32,"duration":0.005},
{"type":"mark","name":"lsp.did_close","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/DOMAIN_DEPLOYMENT_GUIDE.md"}}},
{"type":"measure","name":"lsp.did_close","count":33,"duration":0.005},
{"type":"mark","name":"lsp.did_close","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/deploy-test.html"}}},
{"type":"measure","name":"lsp.did_close","count":34,"duration":0.005},
{"type":"mark","name":"lsp.did_close","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"measure","name":"lsp.did_close","count":35,"duration":0.005},
{"type":"mark","name":"lsp.did_close","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/safe-setup.sql"}}},
{"type":"measure","name":"lsp.did_close","count":36,"duration":0.005},
{"type":"mark","name":"lsp.did_close","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/minimal-setup.sql"}}},
{"type":"measure","name":"lsp.did_close","count":37,"duration":0.006},
{"type":"mark","name":"lsp.did_close","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/database/rls-setup.sql"}}},
{"type":"measure","name":"lsp.did_close","count":38,"duration":0.027},
{"type":"mark","name":"lsp.did_close","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/supabase-troubleshooting-server.js"}}},
{"type":"measure","name":"lsp.did_close","count":39,"duration":0.267},
{"type":"mark","name":"lsp.did_close","count":40,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.vscode/mcp-config.json"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_close","count":40,"duration":0.018},
{"type":"mark","name":"lsp.did_close","count":41,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/SUPABASE_TROUBLESHOOTING_GUIDE.md"}}},
{"type":"measure","name":"lsp.did_close","count":41,"duration":0.013},
{"type":"mark","name":"lsp.did_close","count":42,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/test-troubleshooting-server.js"}}},
{"type":"measure","name":"lsp.testing_update","count":31,"duration":0.066},
{"type":"measure","name":"lsp.did_close","count":42,"duration":0.185},
{"type":"mark","name":"lsp.did_close","count":43,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/README.md"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_close","count":43,"duration":0.018},
{"type":"mark","name":"lsp.did_close","count":44,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/docs/TROUBLESHOOTING_ENHANCEMENT_SUMMARY.md"}}},
{"type":"measure","name":"lsp.did_close","count":44,"duration":0.018},
{"type":"mark","name":"lsp.did_close","count":45,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-debug.js"}}},
{"type":"measure","name":"lsp.testing_update","count":32,"duration":0.056},
{"type":"measure","name":"lsp.did_close","count":45,"duration":0.224},
{"type":"mark","name":"lsp.did_close","count":46,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index-debug.html"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.did_close","count":46,"duration":0.014},
{"type":"mark","name":"lsp.did_close","count":47,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/simple-debug.html"}}},
{"type":"measure","name":"lsp.did_close","count":47,"duration":0.012},
{"type":"mark","name":"lsp.did_close","count":48,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-enhanced.js"}}},
{"type":"measure","name":"lsp.testing_update","count":33,"duration":0.044},
{"type":"measure","name":"lsp.did_close","count":48,"duration":0.252},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":34,"duration":0.043},
{"type":"mark","name":"lsp.did_close","count":49,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/.devcontainer/devcontainer.json"}}},
{"type":"measure","name":"lsp.did_close","count":49,"duration":0.035},
{"type":"mark","name":"lsp.did_close","count":50,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/frontend/package.json"}}},
{"type":"measure","name":"lsp.did_close","count":50,"duration":0.029},
{"type":"mark","name":"lsp.did_close","count":51,"args":{"textDocument":{"uri":"vscode-userdata:/c%3A/Users/Alext/AppData/Roaming/Code/User/settings.json"}}},
{"type":"measure","name":"lsp.did_close","count":51,"duration":0.005},
{"type":"mark","name":"lsp.did_close","count":52,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"}}},
{"type":"measure","name":"lsp.did_close","count":52,"duration":0.031},
{"type":"mark","name":"lsp.did_open","count":53,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html","languageId":"html","version":1,"text":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>ProspectPro - Supabase-First Lead Discovery</title>\n    <style>\n      * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n      }\n\n      body {\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n          sans-serif;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        min-height: 100vh;\n        padding: 20px;\n      }\n\n      .container {\n        max-width: 1200px;\n        margin: 0 auto;\n        background: white;\n        border-radius: 20px;\n        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n        overflow: hidden;\n      }\n\n      .header {\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        padding: 30px;\n        text-align: center;\n      }\n\n      .header h1 {\n        font-size: 2.5rem;\n        margin-bottom: 10px;\n        font-weight: 700;\n      }\n\n      .header p {\n        opacity: 0.9;\n        font-size: 1.1rem;\n      }\n\n      .nav-tabs {\n        display: flex;\n        background: #f8f9fa;\n        border-bottom: 1px solid #dee2e6;\n      }\n\n      .nav-tab {\n        flex: 1;\n        padding: 15px 20px;\n        background: none;\n        border: none;\n        cursor: pointer;\n        font-size: 1rem;\n        transition: all 0.3s ease;\n      }\n\n      .nav-tab.active {\n        background: white;\n        border-bottom: 3px solid #667eea;\n        color: #667eea;\n        font-weight: 600;\n      }\n\n      .page-content {\n        padding: 40px;\n        min-height: 500px;\n      }\n\n      .search-form {\n        max-width: 600px;\n        margin: 0 auto;\n      }\n\n      .form-group {\n        margin-bottom: 25px;\n      }\n\n      .form-group label {\n        display: block;\n        margin-bottom: 8px;\n        font-weight: 600;\n        color: #333;\n      }\n\n      .form-group input,\n      .form-group select {\n        width: 100%;\n        padding: 15px;\n        border: 2px solid #e1e5e9;\n        border-radius: 10px;\n        font-size: 1rem;\n        transition: border-color 0.3s ease;\n      }\n\n      .form-group input:focus,\n      .form-group select:focus {\n        outline: none;\n        border-color: #667eea;\n      }\n\n      .quantity-control {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n      }\n\n      .quantity-slider {\n        flex: 1;\n      }\n\n      .quantity-display {\n        background: #667eea;\n        color: white;\n        padding: 10px 20px;\n        border-radius: 25px;\n        font-weight: 600;\n        min-width: 80px;\n        text-align: center;\n      }\n\n      .lead-quantity-buttons {\n        display: flex;\n        gap: 10px;\n        margin-top: 10px;\n        justify-content: center;\n      }\n\n      .lead-quantity-btn {\n        background: #e9ecef;\n        border: 2px solid #dee2e6;\n        color: #495057;\n        padding: 8px 16px;\n        border-radius: 20px;\n        cursor: pointer;\n        font-weight: 500;\n        transition: all 0.2s ease;\n      }\n\n      .lead-quantity-btn:hover {\n        background: #667eea;\n        border-color: #667eea;\n        color: white;\n      }\n\n      .lead-quantity-btn.active {\n        background: #667eea;\n        border-color: #667eea;\n        color: white;\n      }\n\n      .cost-estimate {\n        background: #f8f9fa;\n        padding: 20px;\n        border-radius: 10px;\n        text-align: center;\n        margin: 20px 0;\n      }\n\n      .cost-estimate h3 {\n        color: #333;\n        margin-bottom: 10px;\n      }\n\n      .cost-amount {\n        font-size: 2rem;\n        font-weight: 700;\n        color: #28a745;\n      }\n\n      .btn {\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        border: none;\n        padding: 15px 30px;\n        border-radius: 10px;\n        font-size: 1.1rem;\n        font-weight: 600;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        width: 100%;\n      }\n\n      .btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);\n      }\n\n      .btn:disabled {\n        opacity: 0.6;\n        cursor: not-allowed;\n        transform: none;\n      }\n\n      .btn-secondary {\n        background: #6c757d;\n        color: white;\n        padding: 10px 20px;\n        font-size: 0.9rem;\n        width: auto;\n      }\n\n      .campaign-progress {\n        display: none;\n        text-align: center;\n        padding: 30px;\n        background: #f8f9fa;\n        border-radius: 10px;\n        margin: 20px 0;\n      }\n\n      .progress-spinner {\n        width: 50px;\n        height: 50px;\n        border: 5px solid #e1e5e9;\n        border-top: 5px solid #667eea;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n        margin: 0 auto 20px;\n      }\n\n      @keyframes spin {\n        0% {\n          transform: rotate(0deg);\n        }\n        100% {\n          transform: rotate(360deg);\n        }\n      }\n\n      .results {\n        display: none;\n        margin-top: 30px;\n      }\n\n      .results-header {\n        background: #f8f9fa;\n        padding: 25px;\n        border-radius: 10px;\n        margin-bottom: 25px;\n      }\n\n      .results-header h3 {\n        color: #333;\n        margin-bottom: 15px;\n      }\n\n      .results-stats {\n        display: flex;\n        gap: 20px;\n        flex-wrap: wrap;\n        margin-bottom: 20px;\n      }\n\n      .stat-item {\n        padding: 10px 15px;\n        background: white;\n        border-radius: 8px;\n        border-left: 4px solid #667eea;\n      }\n\n      .results-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n        gap: 20px;\n      }\n\n      .business-card {\n        background: white;\n        border: 1px solid #e1e5e9;\n        border-radius: 15px;\n        padding: 25px;\n        transition: all 0.3s ease;\n        position: relative;\n      }\n\n      .business-card:hover {\n        transform: translateY(-5px);\n        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);\n      }\n\n      .card-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: 20px;\n      }\n\n      .business-name {\n        color: #333;\n        font-size: 1.2rem;\n        margin: 0;\n        flex: 1;\n        margin-right: 15px;\n      }\n\n      .confidence-score {\n        background: #28a745;\n        color: white;\n        padding: 8px 12px;\n        border-radius: 20px;\n        text-align: center;\n        min-width: 70px;\n      }\n\n      .confidence-score.medium {\n        background: #ffc107;\n        color: #333;\n      }\n\n      .confidence-score.low {\n        background: #dc3545;\n      }\n\n      .score-value {\n        font-weight: 700;\n        font-size: 1.1rem;\n      }\n\n      .score-label {\n        display: block;\n        font-size: 0.8rem;\n        opacity: 0.8;\n      }\n\n      .contact-info {\n        margin-bottom: 15px;\n      }\n\n      .info-item {\n        display: flex;\n        align-items: center;\n        margin-bottom: 10px;\n        gap: 10px;\n      }\n\n      .info-icon {\n        font-size: 1.2rem;\n        width: 25px;\n      }\n\n      .info-text {\n        color: #666;\n        word-break: break-word;\n      }\n\n      .info-link {\n        color: #667eea;\n        text-decoration: none;\n      }\n\n      .info-link:hover {\n        text-decoration: underline;\n      }\n\n      .recommendation {\n        background: #e7f3ff;\n        padding: 12px;\n        border-radius: 8px;\n        border-left: 4px solid #667eea;\n        font-size: 0.9rem;\n        color: #333;\n      }\n\n      .notification {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        padding: 15px 20px;\n        border-radius: 10px;\n        background: #28a745;\n        color: white;\n        z-index: 1000;\n        display: flex;\n        align-items: center;\n        gap: 10px;\n        max-width: 400px;\n        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);\n      }\n\n      .notification.warning {\n        background: #ffc107;\n        color: #333;\n      }\n\n      .notification.error {\n        background: #dc3545;\n      }\n\n      .notification button {\n        background: none;\n        border: none;\n        color: inherit;\n        font-size: 1.2rem;\n        cursor: pointer;\n        padding: 0;\n        margin-left: auto;\n      }\n\n      .error-results,\n      .insufficient-results {\n        text-align: center;\n        padding: 40px;\n        background: #f8f9fa;\n        border-radius: 10px;\n      }\n\n      .error-results h3,\n      .insufficient-results h3 {\n        color: #333;\n        margin-bottom: 20px;\n      }\n\n      .suggestions {\n        background: white;\n        padding: 20px;\n        border-radius: 10px;\n        margin: 20px 0;\n        text-align: left;\n      }\n\n      .suggestions ul {\n        list-style-type: none;\n        padding-left: 0;\n      }\n\n      .suggestions li {\n        padding: 8px 0;\n        border-bottom: 1px solid #e1e5e9;\n      }\n\n      .suggestions li:before {\n        content: \"💡 \";\n        margin-right: 10px;\n      }\n\n      .admin-dashboard {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n        gap: 20px;\n        margin-bottom: 30px;\n      }\n\n      .dashboard-card {\n        background: white;\n        padding: 25px;\n        border-radius: 15px;\n        border: 1px solid #e1e5e9;\n        text-align: center;\n      }\n\n      .dashboard-card h3 {\n        color: #333;\n        margin-bottom: 10px;\n      }\n\n      .dashboard-value {\n        font-size: 2rem;\n        font-weight: 700;\n        color: #667eea;\n        margin-bottom: 5px;\n      }\n\n      .dashboard-label {\n        color: #666;\n        font-size: 0.9rem;\n      }\n\n      .recent-campaigns {\n        background: white;\n        border-radius: 15px;\n        padding: 25px;\n        border: 1px solid #e1e5e9;\n      }\n\n      .campaign-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 15px 0;\n        border-bottom: 1px solid #f0f0f0;\n      }\n\n      .campaign-item:last-child {\n        border-bottom: none;\n      }\n\n      .campaign-info {\n        flex: 1;\n      }\n\n      .campaign-info strong {\n        display: block;\n        color: #333;\n        margin-bottom: 5px;\n      }\n\n      .campaign-location,\n      .campaign-date {\n        font-size: 0.9rem;\n        color: #666;\n        margin-right: 15px;\n      }\n\n      .campaign-stats {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n      }\n\n      .campaign-leads,\n      .campaign-cost {\n        font-size: 0.9rem;\n        color: #666;\n      }\n\n      .btn-export {\n        background: #28a745;\n        color: white;\n        border: none;\n        padding: 6px 12px;\n        border-radius: 6px;\n        font-size: 0.8rem;\n        cursor: pointer;\n      }\n\n      @media (max-width: 768px) {\n        .container {\n          margin: 10px;\n          border-radius: 15px;\n        }\n\n        .page-content {\n          padding: 20px;\n        }\n\n        .results-stats {\n          flex-direction: column;\n          gap: 10px;\n        }\n\n        .results-grid {\n          grid-template-columns: 1fr;\n        }\n\n        .campaign-item {\n          flex-direction: column;\n          align-items: flex-start;\n          gap: 10px;\n        }\n\n        .campaign-stats {\n          align-self: stretch;\n          justify-content: space-between;\n        }\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"header\">\n        <h1>🎯 ProspectPro</h1>\n        <p>Supabase-First Lead Discovery Platform</p>\n      </div>\n\n      <div class=\"nav-tabs\">\n        <button\n          class=\"nav-tab active\"\n          onclick=\"prospectProApp?.showPage('discoveryPage'); this.parentElement.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active')); this.classList.add('active')\"\n        >\n          🔍 Discovery\n        </button>\n        <button\n          class=\"nav-tab\"\n          onclick=\"prospectProApp?.showSettings(); this.parentElement.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active')); this.classList.add('active')\"\n        >\n          ⚙️ Dashboard\n        </button>\n      </div>\n\n      <!-- Discovery Page -->\n      <div id=\"discoveryPage\" class=\"page-content\">\n        <div class=\"search-form\">\n          <div class=\"form-group\">\n            <label for=\"business-type\">Business Type</label>\n            <input\n              type=\"text\"\n              id=\"business-type\"\n              placeholder=\"e.g., restaurant, retail store, dental office\"\n            />\n            <select id=\"categorySelect\" style=\"margin-top: 10px\">\n              <option value=\"\">Or choose from common categories...</option>\n              <option value=\"restaurant\">🍽️ Restaurant</option>\n              <option value=\"coffee shop\">☕ Coffee Shop</option>\n              <option value=\"retail store\">🛍️ Retail Store</option>\n              <option value=\"gym\">💪 Gym</option>\n              <option value=\"fitness center\">🏋️ Fitness Center</option>\n              <option value=\"salon\">💇 Hair Salon</option>\n              <option value=\"spa\">🧖 Spa</option>\n              <option value=\"dental office\">🦷 Dental Office</option>\n              <option value=\"law firm\">⚖️ Law Firm</option>\n              <option value=\"accounting firm\">📊 Accounting Firm</option>\n              <option value=\"real estate\">🏠 Real Estate</option>\n              <option value=\"auto repair\">🚗 Auto Repair</option>\n              <option value=\"veterinary clinic\">🐕 Veterinary Clinic</option>\n              <option value=\"medical practice\">🏥 Medical Practice</option>\n              <option value=\"hotel\">🏨 Hotel</option>\n              <option value=\"bar\">🍺 Bar</option>\n              <option value=\"pharmacy\">💊 Pharmacy</option>\n              <option value=\"bookstore\">📚 Bookstore</option>\n            </select>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"location\">Location</label>\n            <input\n              type=\"text\"\n              id=\"location\"\n              placeholder=\"e.g., San Francisco, CA or New York, NY\"\n            />\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"lead-quantity\">Number of Leads</label>\n            <div class=\"quantity-control\">\n              <input\n                type=\"range\"\n                id=\"lead-quantity\"\n                class=\"quantity-slider\"\n                min=\"1\"\n                max=\"20\"\n                value=\"5\"\n              />\n              <div class=\"quantity-display\">\n                <span id=\"lead-quantity-display\">5</span> leads\n              </div>\n            </div>\n\n            <!-- Quick select buttons for common quantities -->\n            <div class=\"lead-quantity-buttons\">\n              <button type=\"button\" class=\"lead-quantity-btn\">3</button>\n              <button type=\"button\" class=\"lead-quantity-btn active\">5</button>\n              <button type=\"button\" class=\"lead-quantity-btn\">10</button>\n              <button type=\"button\" class=\"lead-quantity-btn\">15</button>\n            </div>\n          </div>\n\n          <div class=\"cost-estimate\">\n            <h3>Estimated Cost</h3>\n            <div class=\"cost-amount\" id=\"estimatedCost\">$0.42</div>\n          </div>\n\n          <button id=\"start-discovery\" class=\"btn\">🚀 Search Businesses</button>\n        </div>\n\n        <!-- Campaign Progress -->\n        <div\n          id=\"campaign-progress\"\n          class=\"campaign-progress\"\n          style=\"display: none\"\n        >\n          <div class=\"progress-spinner\"></div>\n          <h3>Discovering businesses...</h3>\n          <p id=\"progressText\">Initializing search parameters...</p>\n        </div>\n\n        <!-- Results Container -->\n        <div id=\"search-results\" style=\"display: none\">\n          <div id=\"results-container\"></div>\n          <button id=\"export-csv\" style=\"display: none\">\n            📥 Export to CSV\n          </button>\n        </div>\n      </div>\n\n      <!-- Settings/Dashboard Page -->\n      <div id=\"settingsPage\" class=\"page-content\" style=\"display: none\">\n        <h2>📊 Dashboard & Statistics</h2>\n\n        <div class=\"admin-dashboard\">\n          <div class=\"dashboard-card\">\n            <h3>Total Campaigns</h3>\n            <div class=\"dashboard-value\" id=\"totalCampaigns\">0</div>\n            <div class=\"dashboard-label\">Completed</div>\n          </div>\n\n          <div class=\"dashboard-card\">\n            <h3>Total Leads</h3>\n            <div class=\"dashboard-value\" id=\"totalLeads\">0</div>\n            <div class=\"dashboard-label\">Discovered</div>\n          </div>\n\n          <div class=\"dashboard-card\">\n            <h3>Avg Confidence</h3>\n            <div class=\"dashboard-value\" id=\"avgConfidence\">0%</div>\n            <div class=\"dashboard-label\">Quality Score</div>\n          </div>\n\n          <div class=\"dashboard-card\">\n            <h3>Total Spent</h3>\n            <div class=\"dashboard-value\" id=\"totalCost\">$0.00</div>\n            <div class=\"dashboard-label\">API Costs</div>\n          </div>\n        </div>\n\n        <div class=\"recent-campaigns\">\n          <h3>📋 Recent Campaigns</h3>\n          <div id=\"recentCampaigns\">\n            <p style=\"text-align: center; color: #666; padding: 20px\">\n              No campaigns yet. Start your first discovery!\n            </p>\n          </div>\n        </div>\n\n        <div id=\"currentSessionStats\" style=\"margin-top: 30px\"></div>\n      </div>\n    </div>\n\n    <!-- Load Supabase-First JavaScript -->\n    <script type=\"module\" src=\"supabase-app-enhanced.js\"></script>\n\n    <script>\n      // Update quantity display when slider changes\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        const quantitySlider = document.getElementById(\"lead-quantity\");\n        const quantityDisplay = document.getElementById(\n          \"lead-quantity-display\"\n        );\n\n        if (quantitySlider && quantityDisplay) {\n          quantitySlider.oninput = () => {\n            quantityDisplay.textContent = quantitySlider.value;\n            // Trigger cost update if app is loaded\n            if (window.prospectProApp) {\n              window.prospectProApp.updateCostEstimate();\n            }\n          };\n        }\n\n        // Handle category selection\n        const categorySelect = document.getElementById(\"categorySelect\");\n        const businessTypeInput = document.getElementById(\"business-type\");\n\n        if (categorySelect && businessTypeInput) {\n          categorySelect.addEventListener(\"change\", (e) => {\n            if (e.target.value) {\n              businessTypeInput.value = e.target.value;\n              // Reset the select to placeholder\n              categorySelect.value = \"\";\n              // Trigger cost update if app is loaded\n              if (window.prospectProApp) {\n                window.prospectProApp.updateCostEstimate();\n              }\n            }\n          });\n        }\n      });\n    </script>\n  </body>\n</html>\n"}}},
{"type":"measure","name":"lsp.did_open","count":53,"duration":0.219},
{"type":"mark","name":"lsp.did_open","count":54,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-enhanced.js","languageId":"javascript","version":1,"text":"// ProspectPro Supabase-First Frontend - Enhanced Error Tracking Version\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.58.0\";\n\nclass ProspectProSupabase {\n  constructor() {\n    console.log(\"🔧 ProspectPro initializing with enhanced error tracking...\");\n\n    // Enhanced error tracking\n    window.addEventListener(\"error\", (e) => {\n      console.error(\"🚨 Global JavaScript Error:\", e.error);\n      console.error(\"📍 File:\", e.filename, \"Line:\", e.lineno);\n    });\n\n    window.addEventListener(\"unhandledrejection\", (e) => {\n      console.error(\"🚨 Unhandled Promise Rejection:\", e.reason);\n    });\n\n    try {\n      // Initialize Supabase client\n      this.supabase = createClient(\n        \"https://sriycekxdqnesdsgwiuc.supabase.co\",\n        \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNyaXljZWt4ZHFuZXNkc2d3aXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NjU3ODksImV4cCI6MjA3MzU0MTc4OX0.Rx_1Hjz2eayKie0RpPB28i7_683ZwhVJ_5Eu_rzTWpI\"\n      );\n\n      console.log(\"✅ Supabase client created successfully\");\n      console.log(\"📍 URL:\", this.supabase.supabaseUrl);\n      console.log(\n        \"🔑 Key (first 50):\",\n        this.supabase.supabaseKey.substring(0, 50) + \"...\"\n      );\n\n      // Test client immediately\n      this.testSupabaseClient();\n    } catch (error) {\n      console.error(\"🚨 CRITICAL: Supabase client creation failed:\", error);\n      this.showError(\"Failed to initialize Supabase client: \" + error.message);\n      return;\n    }\n\n    this.selectedTool = \"business-discovery\";\n    this.searchResults = [];\n    this.lastSearchCampaignId = null;\n    this.lastSearchCampaignName = null;\n    this.costPerLead = 0.084;\n    this.campaignRunning = false;\n\n    this.initializeUI();\n  }\n\n  async testSupabaseClient() {\n    try {\n      console.log(\"🧪 Testing Supabase client connectivity...\");\n\n      // Test if functions object exists\n      if (!this.supabase.functions) {\n        throw new Error(\"Supabase functions object is undefined\");\n      }\n\n      console.log(\"✅ Supabase functions object exists\");\n      console.log(\n        \"📋 Functions methods:\",\n        Object.getOwnPropertyNames(this.supabase.functions)\n      );\n\n      // Test if invoke method exists\n      if (typeof this.supabase.functions.invoke !== \"function\") {\n        throw new Error(\"Supabase functions.invoke is not a function\");\n      }\n\n      console.log(\"✅ Supabase functions.invoke method exists\");\n    } catch (error) {\n      console.error(\"🚨 Supabase client test failed:\", error);\n    }\n  }\n\n  initializeUI() {\n    console.log(\"🎨 Initializing UI...\");\n\n    try {\n      this.attachEventListeners();\n      this.updateCost();\n      this.showWelcomeMessage();\n      console.log(\"✅ UI initialization complete\");\n    } catch (error) {\n      console.error(\"🚨 UI initialization failed:\", error);\n    }\n  }\n\n  attachEventListeners() {\n    console.log(\"🔗 Attaching event listeners...\");\n\n    // Start Discovery Button\n    const startButton = document.getElementById(\"start-discovery\");\n    if (startButton) {\n      console.log(\"✅ Found start discovery button\");\n      startButton.addEventListener(\"click\", (e) => {\n        console.log(\"🖱️ Start discovery button clicked\");\n        e.preventDefault();\n        this.startDiscovery();\n      });\n    } else {\n      console.error(\"❌ Start discovery button not found!\");\n    }\n\n    // Export Button\n    const exportButton = document.getElementById(\"export-csv\");\n    if (exportButton) {\n      exportButton.addEventListener(\"click\", () => this.exportToCsv());\n    }\n\n    // Lead quantity buttons\n    const quantityButtons = document.querySelectorAll(\".lead-quantity-btn\");\n    console.log(`🔢 Found ${quantityButtons.length} quantity buttons`);\n\n    quantityButtons.forEach((btn) => {\n      btn.addEventListener(\"click\", () => {\n        document\n          .querySelectorAll(\".lead-quantity-btn\")\n          .forEach((b) => b.classList.remove(\"active\"));\n        btn.classList.add(\"active\");\n        this.updateCost();\n      });\n    });\n\n    // Input fields for cost calculation\n    const businessTypeInput = document.getElementById(\"business-type\");\n    const locationInput = document.getElementById(\"location\");\n\n    [businessTypeInput, locationInput].forEach((input) => {\n      if (input) {\n        input.addEventListener(\"input\", () => this.updateCost());\n      }\n    });\n\n    console.log(\"✅ Event listeners attached\");\n  }\n\n  async startDiscovery() {\n    console.log(\"🚀 === STARTING DISCOVERY ===\");\n\n    if (this.campaignRunning) {\n      console.log(\"⚠️ Campaign already running, skipping...\");\n      return;\n    }\n\n    try {\n      const businessType = document\n        .getElementById(\"business-type\")\n        .value.trim();\n      const location = document.getElementById(\"location\").value.trim();\n      const quantityBtn = document.querySelector(\".lead-quantity-btn.active\");\n      const quantity = quantityBtn ? parseInt(quantityBtn.textContent) : 3;\n\n      console.log(\"📊 Discovery parameters:\", {\n        businessType,\n        location,\n        quantity,\n      });\n\n      if (!businessType || !location) {\n        console.log(\"❌ Missing required parameters\");\n        this.showError(\"Please enter both business type and location\");\n        return;\n      }\n\n      this.campaignRunning = true;\n      this.setLoadingState(true);\n      this.showCampaignProgress(true);\n\n      // Enhanced pre-flight checks\n      console.log(\"🔍 Pre-flight checks...\");\n\n      if (!this.supabase) {\n        throw new Error(\"Supabase client is not initialized\");\n      }\n\n      if (!this.supabase.functions) {\n        throw new Error(\"Supabase functions object is missing\");\n      }\n\n      if (typeof this.supabase.functions.invoke !== \"function\") {\n        throw new Error(\"Supabase functions.invoke is not a function\");\n      }\n\n      console.log(\"✅ Pre-flight checks passed\");\n\n      const payload = {\n        businessType,\n        location,\n        maxResults: quantity,\n        budgetLimit: 50,\n        requireCompleteContacts: false,\n        minConfidenceScore: 50,\n      };\n\n      console.log(\n        \"📦 Edge Function payload:\",\n        JSON.stringify(payload, null, 2)\n      );\n      console.log(\"📞 Calling Edge Function: business-discovery\");\n\n      const startTime = Date.now();\n\n      // Call Supabase Edge Function with enhanced error tracking\n      const result = await this.supabase.functions.invoke(\n        \"business-discovery\",\n        {\n          body: payload,\n        }\n      );\n\n      const endTime = Date.now();\n      console.log(\n        `⏱️ Edge Function call completed in ${endTime - startTime}ms`\n      );\n\n      console.log(\"📥 Raw Edge Function result:\", result);\n\n      const { data, error } = result;\n\n      console.log(\"📊 Parsed result - Data:\", data);\n      console.log(\"❌ Parsed result - Error:\", error);\n\n      if (error) {\n        console.error(\"🚨 Edge Function returned error:\", {\n          message: error.message,\n          details: error.details,\n          hint: error.hint,\n          code: error.code,\n          status: error.status,\n          statusCode: error.statusCode,\n        });\n        throw new Error(\n          `Edge Function error: ${error.message || JSON.stringify(error)}`\n        );\n      }\n\n      if (!data) {\n        console.error(\"🚨 No data received from Edge Function\");\n        throw new Error(\"No data received from Edge Function\");\n      }\n\n      console.log(\"📋 Data type:\", typeof data);\n      console.log(\"📋 Data keys:\", Object.keys(data));\n\n      if (!data.success) {\n        console.error(\"🚨 Edge Function returned failure:\", data);\n        throw new Error(\n          data.error || data.message || \"Business discovery failed\"\n        );\n      }\n\n      console.log(\"🎉 Edge Function success!\");\n      console.log(\"📊 Results summary:\", {\n        totalFound: data.results?.totalFound,\n        qualified: data.results?.qualified,\n        campaignId: data.campaignId,\n        leadsCount: data.leads?.length,\n      });\n\n      // Store results for potential export\n      this.searchResults = data.leads || [];\n      this.lastSearchCampaignId = data.campaignId;\n      this.lastSearchCampaignName = `${businessType} in ${location}`;\n\n      // Show results\n      this.showResults(data);\n\n      console.log(\n        `✅ Discovery completed: ${this.searchResults.length} leads found`\n      );\n    } catch (error) {\n      console.error(\"🚨 === DISCOVERY ERROR ===\");\n      console.error(\"Error type:\", typeof error);\n      console.error(\"Error name:\", error.name);\n      console.error(\"Error message:\", error.message);\n      console.error(\"Error stack:\", error.stack);\n      console.error(\"Full error object:\", error);\n\n      // Show detailed error to user\n      let errorMessage = \"Business discovery failed\";\n\n      if (error.message) {\n        errorMessage = error.message;\n      } else if (typeof error === \"string\") {\n        errorMessage = error;\n      }\n\n      this.showError(`Discovery Failed: ${errorMessage}`);\n    } finally {\n      console.log(\"🏁 Discovery cleanup...\");\n      this.campaignRunning = false;\n      this.setLoadingState(false);\n      this.showCampaignProgress(false);\n    }\n  }\n\n  // Rest of methods remain the same but with enhanced logging...\n  showResults(data) {\n    console.log(\"📊 Displaying results...\", data);\n\n    const resultsContainer = document.getElementById(\"results-container\");\n    const resultsSection = document.getElementById(\"search-results\");\n\n    if (!resultsContainer || !resultsSection) {\n      console.error(\"❌ Results containers not found\");\n      return;\n    }\n\n    resultsContainer.innerHTML = `\n      <div class=\"discovery-summary\">\n        <h3>✅ Discovery Complete</h3>\n        <div class=\"summary-stats\">\n          <div class=\"stat\">\n            <span class=\"stat-number\">${data.results.totalFound}</span>\n            <span class=\"stat-label\">Businesses Found</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-number\">${data.results.qualified}</span>\n            <span class=\"stat-label\">Qualified Leads</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-number\">$${data.costs.totalCost.toFixed(3)}</span>\n            <span class=\"stat-label\">Total Cost</span>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"leads-grid\">\n        ${data.leads\n          .map(\n            (lead) => `\n          <div class=\"lead-card\" data-score=\"${lead.optimizedScore}\">\n            <div class=\"lead-header\">\n              <h4>${lead.businessName}</h4>\n              <span class=\"confidence-score score-${this.getScoreClass(\n                lead.optimizedScore\n              )}\">\n                ${lead.optimizedScore}%\n              </span>\n            </div>\n            <div class=\"lead-details\">\n              <p><i class=\"icon-location\"></i> ${lead.address}</p>\n              ${\n                lead.phone\n                  ? `<p><i class=\"icon-phone\"></i> ${lead.phone}</p>`\n                  : \"\"\n              }\n              ${\n                lead.website\n                  ? `<p><i class=\"icon-web\"></i> <a href=\"${lead.website}\" target=\"_blank\">${lead.website}</a></p>`\n                  : \"\"\n              }\n              ${\n                lead.email\n                  ? `<p><i class=\"icon-email\"></i> ${lead.email}</p>`\n                  : \"\"\n              }\n            </div>\n            <div class=\"lead-footer\">\n              <span class=\"cost-indicator\">Cost: $${lead.validationCost.toFixed(\n                3\n              )}</span>\n            </div>\n          </div>\n        `\n          )\n          .join(\"\")}\n      </div>\n    `;\n\n    resultsSection.style.display = \"block\";\n    resultsContainer.scrollIntoView({ behavior: \"smooth\" });\n\n    // Enable export button\n    const exportButton = document.getElementById(\"export-csv\");\n    if (exportButton) {\n      exportButton.style.display = \"block\";\n    }\n\n    console.log(\"✅ Results displayed successfully\");\n  }\n\n  showError(message) {\n    console.error(\"🚨 Showing error to user:\", message);\n\n    const resultsContainer = document.getElementById(\"results-container\");\n    const resultsSection = document.getElementById(\"search-results\");\n\n    if (!resultsContainer || !resultsSection) {\n      console.error(\"❌ Error: Results containers not found\");\n      alert(\"Error: \" + message); // Fallback\n      return;\n    }\n\n    resultsContainer.innerHTML = `\n      <div class=\"error-container\">\n        <h3>❌ Discovery Failed</h3>\n        <p>Business discovery failed: API request failed: 404</p>\n        <p class=\"error-detail\"><strong>Technical Details:</strong> ${message}</p>\n        <p class=\"error-note\">This system only returns real data from actual APIs. If discovery fails, no fake data will be generated.</p>\n        <button onclick=\"window.prospectPro.startDiscovery()\" class=\"btn btn-primary\">\n          🔄 Try Again\n        </button>\n      </div>\n    `;\n\n    resultsSection.style.display = \"block\";\n    resultsContainer.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  getScoreClass(score) {\n    if (score >= 80) return \"high\";\n    if (score >= 60) return \"medium\";\n    return \"low\";\n  }\n\n  setLoadingState(loading) {\n    const startButton = document.getElementById(\"start-discovery\");\n    const loadingIndicator = document.querySelector(\".loading-indicator\");\n\n    if (startButton) {\n      if (loading) {\n        startButton.textContent = \"🔍 Discovering...\";\n        startButton.disabled = true;\n      } else {\n        startButton.textContent = \"🚀 Start Discovery\";\n        startButton.disabled = false;\n      }\n    }\n\n    if (loadingIndicator) {\n      loadingIndicator.style.display = loading ? \"block\" : \"none\";\n    }\n  }\n\n  showCampaignProgress(show) {\n    const progressContainer = document.getElementById(\"campaign-progress\");\n    if (progressContainer) {\n      progressContainer.style.display = show ? \"block\" : \"none\";\n    }\n  }\n\n  updateCost() {\n    const quantityBtn = document.querySelector(\".lead-quantity-btn.active\");\n    const quantity = quantityBtn ? parseInt(quantityBtn.textContent) : 3;\n    const estimatedCost = (quantity * this.costPerLead).toFixed(2);\n\n    const costDisplay = document.querySelector(\".estimated-cost\");\n    if (costDisplay) {\n      costDisplay.textContent = `Estimated cost: $${estimatedCost}`;\n    }\n  }\n\n  showWelcomeMessage() {\n    console.log(\"🎉 ProspectPro Enhanced Error Tracking Version Ready!\");\n  }\n\n  async exportToCsv() {\n    // Export functionality remains the same\n    if (!this.lastSearchCampaignId) {\n      this.showError(\"No campaign data to export\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        `${this.supabase.supabaseUrl}/functions/v1/campaign-export/${this.lastSearchCampaignId}`,\n        {\n          headers: {\n            Authorization: `Bearer ${this.supabase.supabaseKey}`,\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`Export failed: ${response.statusText}`);\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.style.display = \"none\";\n      a.href = url;\n      a.download = `${this.lastSearchCampaignName}_leads.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      console.log(\"✅ CSV export completed\");\n    } catch (error) {\n      console.error(\"❌ Export error:\", error);\n      this.showError(`Export failed: ${error.message}`);\n    }\n  }\n}\n\n// Initialize the application\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  console.log(\n    \"🚀 DOM loaded, initializing ProspectPro Enhanced Error Tracking...\"\n  );\n  try {\n    window.prospectPro = new ProspectProSupabase();\n    console.log(\"✅ ProspectPro initialized successfully\");\n  } catch (error) {\n    console.error(\"🚨 CRITICAL: Failed to initialize ProspectPro:\", error);\n    alert(\"Critical error: \" + error.message);\n  }\n});\n\n// Export for testing\nwindow.ProspectProSupabase = ProspectProSupabase;\n"}}},
{"type":"measure","name":"lsp.did_open","count":54,"duration":7.932},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":35,"duration":0.048},
{"type":"mark","name":"lsp.did_open","count":55,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\n\n// CORS headers for frontend calls\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n};\n\ninterface BusinessDiscoveryRequest {\n  businessType: string;\n  location: string;\n  maxResults?: number;\n  budgetLimit?: number;\n  requireCompleteContacts?: boolean;\n  minConfidenceScore?: number;\n  additionalQueries?: string[];\n}\n\ninterface BusinessLead {\n  businessName: string;\n  address: string;\n  phone?: string;\n  website?: string;\n  email?: string;\n  optimizedScore: number;\n  preValidationScore: number;\n  scoreBreakdown: {\n    businessName: number;\n    address: number;\n    phone: number;\n    website: number;\n    email: number;\n    external: number;\n    total: number;\n  };\n  validationCost: number;\n  costEfficient: boolean;\n  scoringRecommendation: string;\n}\n\n// Enhanced Quality Scorer v3.0 - Cost-efficient validation pipeline\nclass EnhancedQualityScorer {\n  private maxCostPerBusiness: number;\n  private dynamicThreshold: number;\n\n  constructor(options: { maxCostPerBusiness?: number } = {}) {\n    this.maxCostPerBusiness = options.maxCostPerBusiness || 2.0;\n    this.dynamicThreshold = 50;\n  }\n\n  scoreBusiness(business: any): BusinessLead {\n    // Pre-validation scoring (free)\n    const preValidationScore = this.calculatePreValidationScore(business);\n\n    // Determine if worth paid validation\n    const shouldValidate = preValidationScore >= this.dynamicThreshold;\n    const validationCost = shouldValidate ? 0.02 : 0; // Simulate validation cost\n\n    // Final optimized score\n    const optimizedScore = shouldValidate\n      ? Math.min(preValidationScore + 5, 100)\n      : preValidationScore;\n\n    return {\n      businessName: business.name || business.businessName || \"\",\n      address: business.address || business.formatted_address || \"\",\n      phone: business.phone || business.formatted_phone_number || \"\",\n      website: business.website || business.url || \"\",\n      email: business.email || `hello@${this.extractDomain(business.website)}`,\n      optimizedScore,\n      preValidationScore,\n      scoreBreakdown: {\n        businessName: this.scoreBusinessName(\n          business.name || business.businessName\n        ),\n        address: this.scoreAddress(\n          business.address || business.formatted_address\n        ),\n        phone: this.scorePhone(\n          business.phone || business.formatted_phone_number\n        ),\n        website: this.scoreWebsite(business.website || business.url),\n        email: 0, // Will be validated separately\n        external: 0, // External validation score\n        total: optimizedScore,\n      },\n      validationCost,\n      costEfficient: validationCost <= this.maxCostPerBusiness,\n      scoringRecommendation: this.getRecommendation(optimizedScore),\n    };\n  }\n\n  private calculatePreValidationScore(business: any): number {\n    let score = 0;\n\n    // Business name (25 points)\n    score += this.scoreBusinessName(business.name || business.businessName);\n\n    // Address (25 points)\n    score += this.scoreAddress(business.address || business.formatted_address);\n\n    // Phone (20 points)\n    score += this.scorePhone(business.phone || business.formatted_phone_number);\n\n    // Website (20 points)\n    score += this.scoreWebsite(business.website || business.url);\n\n    // Rating/Reviews (10 points)\n    if (business.rating && business.rating >= 4.0) score += 10;\n    else if (business.rating && business.rating >= 3.5) score += 5;\n\n    return Math.min(score, 100);\n  }\n\n  private scoreBusinessName(name: string): number {\n    if (!name || name.length < 3) return 0;\n    if (/^(business|company|llc|inc|corp)$/i.test(name)) return 30;\n    if (name.length > 50) return 70;\n    return 90;\n  }\n\n  private scoreAddress(address: string): number {\n    if (!address || address.length < 10) return 0;\n    if (/\\b\\d{1,3}\\s+main\\s+st\\b/i.test(address)) return 40;\n    if (address.includes(\",\") && address.length > 20) return 100;\n    return 80;\n  }\n\n  private scorePhone(phone: string): number {\n    if (!phone) return 0;\n    const cleanPhone = phone.replace(/\\D/g, \"\");\n    if (cleanPhone.length !== 10) return 0;\n    if (/^(555|000|111)/.test(cleanPhone)) return 40;\n    return 80;\n  }\n\n  private scoreWebsite(website: string): number {\n    if (!website) return 0;\n    if (!/^https?:\\/\\/.+/.test(website)) return 40;\n    if (website.includes(\"facebook.com\") || website.includes(\"yelp.com\"))\n      return 60;\n    return 80;\n  }\n\n  private extractDomain(website: string): string {\n    if (!website) return \"example.com\";\n    try {\n      const url = new URL(website);\n      return url.hostname;\n    } catch {\n      return \"example.com\";\n    }\n  }\n\n  private getRecommendation(score: number): string {\n    if (score >= 80) return \"High-quality lead - recommended for outreach\";\n    if (score >= 60) return \"Good lead - consider additional validation\";\n    if (score >= 40)\n      return \"Marginal lead - consider lowering threshold or adding more validation\";\n    return \"Low-quality lead - skip or improve data sources\";\n  }\n}\n\n// Google Places API integration\nclass GooglePlacesAPI {\n  private apiKey: string;\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n\n  async searchBusinesses(\n    businessType: string,\n    location: string,\n    maxResults: number = 20\n  ): Promise<any[]> {\n    const query = `${businessType} ${location}`;\n    const url = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(\n      query\n    )}&key=${this.apiKey}`;\n\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (data.status !== \"OK\") {\n        throw new Error(`Google Places API error: ${data.status}`);\n      }\n\n      return data.results.slice(0, maxResults);\n    } catch (error) {\n      console.error(\"Google Places API error:\", error);\n      throw error;\n    }\n  }\n\n  async getPlaceDetails(placeId: string): Promise<any> {\n    const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_address,formatted_phone_number,website,rating,user_ratings_total&key=${this.apiKey}`;\n\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (data.status !== \"OK\") {\n        throw new Error(`Google Places Details API error: ${data.status}`);\n      }\n\n      return data.result;\n    } catch (error) {\n      console.error(\"Google Places Details API error:\", error);\n      throw error;\n    }\n  }\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders });\n  }\n\n  try {\n    const supabase = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\"\n    );\n\n    // Get request body\n    const requestBody: BusinessDiscoveryRequest = await req.json();\n    const {\n      businessType,\n      location,\n      maxResults = 10,\n      budgetLimit = 50,\n      requireCompleteContacts = false,\n      minConfidenceScore = 50,\n      additionalQueries = [],\n    } = requestBody;\n\n    // Validate required parameters\n    if (!businessType || !location) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Business type and location are required\",\n        }),\n        {\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n          status: 400,\n        }\n      );\n    }\n\n    // Get API keys from Supabase secrets (using vault or environment)\n    const googlePlacesKey = Deno.env.get(\"GOOGLE_PLACES_API_KEY\");\n    if (!googlePlacesKey) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Google Places API key not configured\",\n        }),\n        {\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n          status: 500,\n        }\n      );\n    }\n\n    const startTime = Date.now();\n    const campaignId = `campaign_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n\n    console.log(\n      `🚀 Starting Enhanced Discovery v2.0 - Campaign: ${campaignId}`\n    );\n    console.log(`📊 Requirements: ${maxResults} qualified leads`);\n    console.log(`💰 Budget limit: $${budgetLimit}`);\n\n    // Initialize Google Places API\n    const placesAPI = new GooglePlacesAPI(googlePlacesKey);\n\n    // Initialize Quality Scorer\n    const qualityScorer = new EnhancedQualityScorer({\n      maxCostPerBusiness: budgetLimit / maxResults || 2.0,\n    });\n\n    // Search for businesses\n    const rawBusinesses = await placesAPI.searchBusinesses(\n      businessType,\n      location,\n      maxResults * 2\n    );\n\n    // Score and filter businesses\n    const scoredBusinesses = rawBusinesses.map((business) =>\n      qualityScorer.scoreBusiness(business)\n    );\n\n    // Filter by confidence score and budget\n    const qualifiedLeads = scoredBusinesses\n      .filter((lead) => lead.optimizedScore >= minConfidenceScore)\n      .slice(0, maxResults);\n\n    const processingTime = Date.now() - startTime;\n    const totalCost = qualifiedLeads.reduce(\n      (sum, lead) => sum + lead.validationCost,\n      0\n    );\n\n    // Store campaign in database\n    const campaignData = {\n      id: campaignId,\n      business_type: businessType,\n      location: location,\n      target_count: maxResults,\n      budget_limit: budgetLimit,\n      min_confidence_score: minConfidenceScore,\n      status: \"completed\",\n      results_count: qualifiedLeads.length,\n      total_cost: totalCost,\n      processing_time_ms: processingTime,\n      created_at: new Date().toISOString(),\n    };\n\n    const { data: campaign, error: campaignError } = await supabase\n      .from(\"campaigns\")\n      .insert(campaignData)\n      .select()\n      .single();\n\n    if (campaignError) {\n      console.error(\"Failed to store campaign:\", campaignError);\n      // Continue without database storage\n    }\n\n    // Store leads in database\n    if (campaign && qualifiedLeads.length > 0) {\n      const leadsData = qualifiedLeads.map((lead) => ({\n        campaign_id: campaign.id,\n        business_name: lead.businessName,\n        address: lead.address,\n        phone: lead.phone,\n        website: lead.website,\n        email: lead.email,\n        confidence_score: lead.optimizedScore,\n        score_breakdown: lead.scoreBreakdown,\n        validation_cost: lead.validationCost,\n        cost_efficient: lead.costEfficient,\n        scoring_recommendation: lead.scoringRecommendation,\n      }));\n\n      const { error: leadsError } = await supabase\n        .from(\"leads\")\n        .insert(leadsData);\n\n      if (leadsError) {\n        console.error(\"Failed to store leads:\", leadsError);\n        // Continue without database storage\n      }\n    }\n\n    // Calculate quality metrics\n    const qualityMetrics = {\n      originalCount: rawBusinesses.length,\n      processedCount: scoredBusinesses.length,\n      qualifiedCount: qualifiedLeads.length,\n      qualificationRate:\n        (qualifiedLeads.length / scoredBusinesses.length) * 100,\n      averageScore:\n        qualifiedLeads.reduce((sum, lead) => sum + lead.optimizedScore, 0) /\n          qualifiedLeads.length || 0,\n    };\n\n    // Enhanced response with comprehensive metrics\n    const response = {\n      success: true,\n      campaignId,\n      discoveryEngine: \"Enhanced Discovery Engine v2.0 + Quality Scorer v3.0\",\n      requirements: {\n        targetLeads: maxResults,\n        budgetLimit,\n        requireCompleteContacts,\n        minConfidenceScore,\n      },\n      results: {\n        totalFound: qualifiedLeads.length,\n        qualified: qualifiedLeads.length,\n        qualificationRate: `${qualityMetrics.qualificationRate.toFixed(1)}%`,\n        averageConfidence: Math.round(qualityMetrics.averageScore),\n        completeness: qualifiedLeads.filter((lead) => lead.email && lead.phone)\n          .length,\n      },\n      qualityMetrics: {\n        ...qualityMetrics,\n        optimalThreshold: minConfidenceScore,\n        thresholdAnalysis: {\n          businessesProcessed: scoredBusinesses.length,\n          averageScore: Math.round(qualityMetrics.averageScore),\n          highestScore: Math.max(\n            ...qualifiedLeads.map((l) => l.optimizedScore),\n            0\n          ),\n          lowestScore: Math.min(\n            ...qualifiedLeads.map((l) => l.optimizedScore),\n            0\n          ),\n          projectedQualificationRate: qualityMetrics.qualificationRate,\n          costEfficiency: {\n            averageCostPerBusiness: totalCost / scoredBusinesses.length || 0,\n            costPerQualifiedLead: totalCost / qualifiedLeads.length || 0,\n            costSavingsVsTraditional: budgetLimit - totalCost,\n          },\n          recommendation: \"Balanced threshold for optimal qualification rate\",\n        },\n        costEfficiency: {\n          businessesProcessed: scoredBusinesses.length,\n          averageScore: Math.round(qualityMetrics.averageScore),\n          totalCostSavings: budgetLimit - totalCost,\n          costSavingsPerBusiness:\n            (budgetLimit - totalCost) / scoredBusinesses.length || 0,\n        },\n      },\n      costs: {\n        totalCost,\n        costPerLead: totalCost / qualifiedLeads.length || 0,\n        costBreakdown: {\n          validation: totalCost,\n          discovery: 0.032, // Google Places search cost\n        },\n        validationCosts: totalCost,\n        costSavings: budgetLimit - totalCost,\n      },\n      performance: {\n        processingTime: `${(processingTime / 1000).toFixed(1)}s`,\n        avgTimePerLead: `${(\n          processingTime /\n          qualifiedLeads.length /\n          1000\n        ).toFixed(1)}s`,\n        iterationsCompleted: 1,\n      },\n      leads: qualifiedLeads,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        version: \"Enhanced Discovery Engine v2.0\",\n      },\n    };\n\n    console.log(\n      `✅ Campaign ${campaignId} completed: ${qualifiedLeads.length}/${maxResults} qualified leads`\n    );\n    console.log(`💰 Total cost: $${totalCost.toFixed(4)}`);\n    console.log(`⏱️ Processing time: ${(processingTime / 1000).toFixed(1)}s`);\n\n    return new Response(JSON.stringify(response), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n  } catch (error) {\n    console.error(\"❌ Business Discovery Error:\", error);\n\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: \"Business discovery failed\",\n        details: error.message,\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 500,\n      }\n    );\n  }\n});\n"}}},
{"type":"measure","name":"lsp.did_open","count":55,"duration":7.346},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":36,"duration":0.14},
{"type":"mark","name":"lsp.did_open","count":56,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js","languageId":"javascript","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":56,"duration":0.322},
{"type":"mark","name":"lsp.document_symbol","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":37,"duration":0.062},
{"type":"mark","name":"lsp.did_change_batched","count":3,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"measure","name":"lsp.did_change_batched","count":3,"duration":371.029},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":3,"duration":0.011},
{"type":"mark","name":"lsp.semantic_tokens_full","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"}}},
TS server started.
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.document_symbol","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":38,"duration":0.063},
{"type":"mark","name":"lsp.semantic_tokens_range","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":0,"character":0},"end":{"line":48,"character":630}}}},
{"type":"mark","name":"tsc.request.getEncodedSemanticClassifications"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":4,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":0,"character":0},"end":{"line":78,"character":18}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":2,"duration":0.022},
{"type":"mark","name":"lsp.code_action","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":0,"character":0},"end":{"line":78,"character":18}}}},
{"type":"mark","name":"lsp.code_lens","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"}}},
{"type":"mark","name":"lsp.folding_range","count":5,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"}}},
{"type":"mark","name":"lsp.code_action","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":1,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/public/supabase-app-fixed.js",{"start":0,"length":30054},"2020"]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":1,"duration":0.112},
{"type":"mark","name":"tsc.op.op_load","count":1,"args":"file:///workspaces/ProspectPro/public/index.html"},
{"type":"measure","name":"tsc.op.op_load","count":1,"duration":0.065},
{"type":"mark","name":"tsc.op.op_load","count":2,"args":"file:///workspaces/ProspectPro/public/supabase-app-enhanced.js"},
{"type":"measure","name":"tsc.op.op_load","count":2,"duration":0.101},
{"type":"mark","name":"tsc.op.op_resolve","count":1,"args":{"base":"file:///workspaces/ProspectPro/public/supabase-app-enhanced.js","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.58.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":1,"duration":8.029},
{"type":"mark","name":"tsc.op.op_load","count":3,"args":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":3,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":2,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":2,"duration":16.896},
{"type":"mark","name":"tsc.op.op_load","count":4,"args":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":4,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":3,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":3,"duration":3.26},
{"type":"mark","name":"tsc.op.op_load","count":5,"args":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":5,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":4,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":4,"duration":3.423},
{"type":"mark","name":"tsc.op.op_load","count":6,"args":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":6,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":5,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":5,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":7,"args":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":7,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":8,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":8,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":6,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":6,"duration":22.87},
{"type":"mark","name":"tsc.op.op_load","count":9,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":9,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":7,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":7,"duration":0.031},
{"type":"mark","name":"tsc.op.op_load","count":10,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":10,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":8,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":8,"duration":0.03},
{"type":"mark","name":"tsc.op.op_load","count":11,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":11,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":9,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":9,"duration":6.114},
{"type":"mark","name":"tsc.op.op_load","count":12,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":12,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":10,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":10,"duration":0.035},
{"type":"mark","name":"tsc.op.op_load","count":13,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":13,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":11,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":11,"duration":1.271},
{"type":"mark","name":"tsc.op.op_load","count":14,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":14,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":12,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":12,"duration":0.034},
{"type":"mark","name":"tsc.op.op_load","count":15,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestError.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":15,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":16,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":16,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":13,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":13,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":17,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":17,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":14,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":14,"duration":3.236},
{"type":"mark","name":"tsc.op.op_load","count":18,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":18,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":15,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":15,"duration":0.03},
{"type":"mark","name":"tsc.op.op_load","count":19,"args":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":19,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":16,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":16,"duration":0.041},
{"type":"mark","name":"tsc.op.op_load","count":20,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":20,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":17,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":17,"duration":13.058},
{"type":"mark","name":"tsc.op.op_load","count":21,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":21,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":18,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":18,"duration":0.807},
{"type":"mark","name":"tsc.op.op_load","count":22,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/websocket-factory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":22,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":23,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/constants.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":23,"duration":0.023},
{"type":"mark","name":"tsc.op.op_load","count":24,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/serializer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":24,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":25,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/timer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":25,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":26,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":26,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":19,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":19,"duration":2.707},
{"type":"mark","name":"tsc.op.op_load","count":27,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":27,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":20,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":20,"duration":0.026},
{"type":"mark","name":"tsc.op.op_load","count":28,"args":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":28,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":21,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":21,"duration":1.684},
{"type":"mark","name":"tsc.op.op_load","count":29,"args":"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":29,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":30,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":30,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":22,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":22,"duration":1.908},
{"type":"mark","name":"tsc.op.op_load","count":31,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":31,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":23,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":23,"duration":2.088},
{"type":"mark","name":"tsc.op.op_load","count":32,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":32,"duration":0.03},
{"type":"mark","name":"tsc.op.op_resolve","count":24,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":24,"duration":1.181},
{"type":"mark","name":"tsc.op.op_load","count":33,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/errors.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":33,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":34,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":34,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":25,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":25,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":35,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":35,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":26,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":26,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":36,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":36,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":27,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":27,"duration":1.522},
{"type":"mark","name":"tsc.op.op_load","count":37,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":37,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":28,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":28,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":38,"args":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":38,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":29,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":29,"duration":0.034},
{"type":"mark","name":"tsc.op.op_load","count":39,"args":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":39,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":30,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":30,"duration":0.025},
{"type":"mark","name":"tsc.op.op_load","count":40,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":40,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":31,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":31,"duration":12.658},
{"type":"mark","name":"tsc.op.op_load","count":41,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":41,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":32,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":32,"duration":0.434},
{"type":"mark","name":"tsc.op.op_load","count":42,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":42,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":33,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":33,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":43,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":43,"duration":0.157},
{"type":"mark","name":"tsc.op.op_resolve","count":34,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":34,"duration":1.284},
{"type":"mark","name":"tsc.op.op_load","count":44,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/web3/ethereum.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":44,"duration":0.025},
{"type":"mark","name":"tsc.op.op_load","count":45,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":45,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":35,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":35,"duration":0.38},
{"type":"mark","name":"tsc.op.op_load","count":46,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/error-codes.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":46,"duration":0.023},
{"type":"mark","name":"tsc.op.op_load","count":47,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/web3/solana.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":47,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":48,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":48,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":36,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":36,"duration":0.832},
{"type":"mark","name":"tsc.op.op_load","count":49,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":49,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":37,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":37,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":50,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":50,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":38,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":38,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":51,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":51,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":39,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":39,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":52,"args":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/locks.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":52,"duration":0.027},
{"type":"mark","name":"tsc.op.op_load","count":53,"args":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":53,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":40,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":40,"duration":0.038},
{"type":"mark","name":"tsc.op.op_load","count":54,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"measure","name":"tsc.op.op_load","count":54,"duration":0.119},
{"type":"mark","name":"tsc.op.op_resolve","count":41,"args":{"base":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.58.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":41,"duration":0.033},
{"type":"mark","name":"tsc.op.op_load","count":55,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":55,"duration":0.066},
{"type":"mark","name":"lsp.document_symbol","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"}}},
{"type":"mark","name":"tsc.op.op_resolve","count":42,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":42,"duration":13.26},
{"type":"mark","name":"tsc.op.op_load","count":56,"args":"https://deno.land/std@0.168.0/http/server.ts"},
{"type":"measure","name":"tsc.op.op_load","count":56,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":43,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":43,"duration":2.241},
{"type":"mark","name":"tsc.op.op_load","count":57,"args":"https://deno.land/std@0.168.0/async/mod.ts"},
{"type":"measure","name":"tsc.op.op_load","count":57,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":44,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":44,"duration":11.66},
{"type":"mark","name":"tsc.op.op_load","count":58,"args":"https://deno.land/std@0.168.0/async/abortable.ts"},
{"type":"measure","name":"tsc.op.op_load","count":58,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":45,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":45,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":59,"args":"https://deno.land/std@0.168.0/async/deferred.ts"},
{"type":"measure","name":"tsc.op.op_load","count":59,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":60,"args":"https://deno.land/std@0.168.0/async/deadline.ts"},
{"type":"measure","name":"tsc.op.op_load","count":60,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":46,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":46,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":61,"args":"https://deno.land/std@0.168.0/async/debounce.ts"},
{"type":"measure","name":"tsc.op.op_load","count":61,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":62,"args":"https://deno.land/std@0.168.0/async/delay.ts"},
{"type":"measure","name":"tsc.op.op_load","count":62,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":63,"args":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts"},
{"type":"measure","name":"tsc.op.op_load","count":63,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":47,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":47,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":64,"args":"https://deno.land/std@0.168.0/async/pool.ts"},
{"type":"measure","name":"tsc.op.op_load","count":64,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":65,"args":"https://deno.land/std@0.168.0/async/tee.ts"},
{"type":"measure","name":"tsc.op.op_load","count":65,"duration":0.034},
{"type":"mark","name":"tsc.op.op_load","count":66,"args":"https://deno.land/std@0.168.0/async/retry.ts"},
{"type":"measure","name":"tsc.op.op_load","count":66,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":67,"args":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":67,"duration":0.048},
{"type":"mark","name":"tsc.op.op_resolve","count":48,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":48,"duration":0.041},
{"type":"mark","name":"tsc.op.op_load","count":68,"args":"file:///workspaces/ProspectPro/supabase/functions/enhanced-business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":68,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":49,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enhanced-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":49,"duration":0.031},
{"type":"mark","name":"tsc.op.op_load","count":69,"args":"asset:///lib.deno.window.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":69,"duration":4.5},
{"type":"mark","name":"tsc.op.op_load","count":70,"args":"asset:///lib.deno.ns.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":70,"duration":8.202},
{"type":"mark","name":"tsc.op.op_load","count":71,"args":"asset:///lib.esnext.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":71,"duration":0.127},
{"type":"mark","name":"tsc.op.op_load","count":72,"args":"asset:///lib.es2024.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":72,"duration":0.062},
{"type":"mark","name":"tsc.op.op_load","count":73,"args":"asset:///lib.es2023.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":73,"duration":12.144},
{"type":"mark","name":"tsc.op.op_load","count":74,"args":"asset:///lib.es2022.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":74,"duration":0.057},
{"type":"mark","name":"tsc.op.op_load","count":75,"args":"asset:///lib.es2021.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":75,"duration":0.052},
{"type":"mark","name":"tsc.op.op_load","count":76,"args":"asset:///lib.es2020.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":76,"duration":0.061},
{"type":"mark","name":"tsc.op.op_load","count":77,"args":"asset:///lib.es2019.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":77,"duration":0.054},
{"type":"mark","name":"tsc.op.op_load","count":78,"args":"asset:///lib.es2018.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":78,"duration":0.08},
{"type":"mark","name":"tsc.op.op_load","count":79,"args":"asset:///lib.es2017.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":79,"duration":0.054},
{"type":"mark","name":"tsc.op.op_load","count":80,"args":"asset:///lib.es2016.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":80,"duration":0.045},
{"type":"mark","name":"tsc.op.op_load","count":81,"args":"asset:///lib.es2015.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":81,"duration":0.059},
{"type":"mark","name":"tsc.op.op_load","count":82,"args":"asset:///lib.es5.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":82,"duration":12.408},
{"type":"mark","name":"tsc.op.op_load","count":83,"args":"asset:///lib.decorators.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":83,"duration":0.817},
{"type":"mark","name":"tsc.op.op_load","count":84,"args":"asset:///lib.decorators.legacy.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":84,"duration":0.16},
{"type":"mark","name":"tsc.op.op_load","count":85,"args":"asset:///lib.es2015.core.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":85,"duration":1.275},
{"type":"mark","name":"tsc.op.op_load","count":86,"args":"asset:///lib.es2015.collection.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":86,"duration":0.577},
{"type":"mark","name":"tsc.op.op_load","count":87,"args":"asset:///lib.es2015.iterable.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":87,"duration":1.873},
{"type":"mark","name":"tsc.op.op_load","count":88,"args":"asset:///lib.es2015.symbol.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":88,"duration":0.204},
{"type":"mark","name":"tsc.op.op_load","count":89,"args":"asset:///lib.es2015.generator.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":89,"duration":0.225},
{"type":"mark","name":"tsc.op.op_load","count":90,"args":"asset:///lib.es2015.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":90,"duration":0.231},
{"type":"mark","name":"tsc.op.op_load","count":91,"args":"asset:///lib.es2015.proxy.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":91,"duration":0.35},
{"type":"mark","name":"tsc.op.op_load","count":92,"args":"asset:///lib.es2015.reflect.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":92,"duration":0.421},
{"type":"mark","name":"tsc.op.op_load","count":93,"args":"asset:///lib.es2015.symbol.wellknown.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":93,"duration":0.856},
{"type":"mark","name":"tsc.op.op_load","count":94,"args":"asset:///lib.es2016.array.include.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":94,"duration":0.315},
{"type":"mark","name":"tsc.op.op_load","count":95,"args":"asset:///lib.es2016.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":95,"duration":0.084},
{"type":"mark","name":"tsc.op.op_load","count":96,"args":"asset:///lib.es2017.arraybuffer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":96,"duration":0.072},
{"type":"mark","name":"tsc.op.op_load","count":97,"args":"asset:///lib.es2017.date.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":97,"duration":0.069},
{"type":"mark","name":"tsc.op.op_load","count":98,"args":"asset:///lib.es2017.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":98,"duration":0.151},
{"type":"mark","name":"tsc.op.op_load","count":99,"args":"asset:///lib.es2017.object.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":99,"duration":0.14},
{"type":"mark","name":"tsc.op.op_load","count":100,"args":"asset:///lib.es2017.sharedmemory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":100,"duration":0.298},
{"type":"mark","name":"tsc.op.op_load","count":101,"args":"asset:///lib.es2017.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":101,"duration":0.07},
{"type":"mark","name":"tsc.op.op_load","count":102,"args":"asset:///lib.es2017.typedarrays.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":102,"duration":0.09},
{"type":"mark","name":"tsc.op.op_load","count":103,"args":"asset:///lib.es2018.asynciterable.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":103,"duration":0.168},
{"type":"mark","name":"tsc.op.op_load","count":104,"args":"asset:///lib.es2018.asyncgenerator.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":104,"duration":0.19},
{"type":"mark","name":"tsc.op.op_load","count":105,"args":"asset:///lib.es2018.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":105,"duration":0.115},
{"type":"mark","name":"tsc.op.op_load","count":106,"args":"asset:///lib.es2018.regexp.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":106,"duration":0.11},
{"type":"mark","name":"tsc.op.op_load","count":107,"args":"asset:///lib.es2018.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":107,"duration":0.318},
{"type":"mark","name":"tsc.op.op_load","count":108,"args":"asset:///lib.es2019.array.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":108,"duration":0.275},
{"type":"mark","name":"tsc.op.op_load","count":109,"args":"asset:///lib.es2019.object.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":109,"duration":0.11},
{"type":"mark","name":"tsc.op.op_load","count":110,"args":"asset:///lib.es2019.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":110,"duration":0.084},
{"type":"mark","name":"tsc.op.op_load","count":111,"args":"asset:///lib.es2019.symbol.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":111,"duration":0.065},
{"type":"mark","name":"tsc.op.op_load","count":112,"args":"asset:///lib.es2019.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":112,"duration":0.078},
{"type":"mark","name":"tsc.op.op_load","count":113,"args":"asset:///lib.es2020.bigint.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":113,"duration":1.943},
{"type":"mark","name":"tsc.op.op_load","count":114,"args":"asset:///lib.es2020.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":114,"duration":0.962},
{"type":"mark","name":"tsc.op.op_load","count":115,"args":"asset:///lib.es2020.date.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":115,"duration":0.164},
{"type":"mark","name":"tsc.op.op_load","count":116,"args":"asset:///lib.es2020.number.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":116,"duration":0.084},
{"type":"mark","name":"tsc.op.op_load","count":117,"args":"asset:///lib.es2020.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":117,"duration":0.161},
{"type":"mark","name":"tsc.op.op_load","count":118,"args":"asset:///lib.es2020.sharedmemory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":118,"duration":0.289},
{"type":"mark","name":"tsc.op.op_load","count":119,"args":"asset:///lib.es2020.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":119,"duration":0.144},
{"type":"mark","name":"tsc.op.op_load","count":120,"args":"asset:///lib.es2020.symbol.wellknown.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":120,"duration":0.135},
{"type":"mark","name":"tsc.op.op_load","count":121,"args":"asset:///lib.es2021.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":121,"duration":0.168},
{"type":"mark","name":"tsc.op.op_load","count":122,"args":"asset:///lib.es2021.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":122,"duration":0.099},
{"type":"mark","name":"tsc.op.op_load","count":123,"args":"asset:///lib.es2021.weakref.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":123,"duration":0.202},
{"type":"mark","name":"tsc.op.op_load","count":124,"args":"asset:///lib.es2021.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":124,"duration":0.408},
{"type":"mark","name":"tsc.op.op_load","count":125,"args":"asset:///lib.es2022.array.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":125,"duration":0.286},
{"type":"mark","name":"tsc.op.op_load","count":126,"args":"asset:///lib.es2022.error.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":126,"duration":0.265},
{"type":"mark","name":"tsc.op.op_load","count":127,"args":"asset:///lib.es2022.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":127,"duration":0.341},
{"type":"mark","name":"tsc.op.op_load","count":128,"args":"asset:///lib.es2022.object.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":128,"duration":0.114},
{"type":"mark","name":"tsc.op.op_load","count":129,"args":"asset:///lib.es2022.regexp.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":129,"duration":0.138},
{"type":"mark","name":"tsc.op.op_load","count":130,"args":"asset:///lib.es2022.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":130,"duration":0.076},
{"type":"mark","name":"tsc.op.op_load","count":131,"args":"asset:///lib.es2023.array.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":131,"duration":1.715},
{"type":"mark","name":"tsc.op.op_load","count":132,"args":"asset:///lib.es2023.collection.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":132,"duration":0.052},
{"type":"mark","name":"tsc.op.op_load","count":133,"args":"asset:///lib.es2023.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":133,"duration":0.29},
{"type":"mark","name":"tsc.op.op_load","count":134,"args":"asset:///lib.es2024.arraybuffer.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":134,"duration":0.098},
{"type":"mark","name":"tsc.op.op_load","count":135,"args":"asset:///lib.es2024.collection.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":135,"duration":0.066},
{"type":"mark","name":"tsc.op.op_load","count":136,"args":"asset:///lib.es2024.object.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":136,"duration":0.068},
{"type":"mark","name":"tsc.op.op_load","count":137,"args":"asset:///lib.es2024.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":137,"duration":0.076},
{"type":"mark","name":"tsc.op.op_load","count":138,"args":"asset:///lib.es2024.regexp.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":138,"duration":0.048},
{"type":"mark","name":"tsc.op.op_load","count":139,"args":"asset:///lib.es2024.sharedmemory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":139,"duration":0.166},
{"type":"mark","name":"tsc.op.op_load","count":140,"args":"asset:///lib.es2024.string.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":140,"duration":0.073},
{"type":"mark","name":"tsc.op.op_load","count":141,"args":"asset:///lib.esnext.intl.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":141,"duration":0.043},
{"type":"mark","name":"tsc.op.op_load","count":142,"args":"asset:///lib.esnext.decorators.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":142,"duration":0.059},
{"type":"mark","name":"tsc.op.op_load","count":143,"args":"asset:///lib.esnext.disposable.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":143,"duration":0.274},
{"type":"mark","name":"tsc.op.op_load","count":144,"args":"asset:///lib.esnext.collection.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":144,"duration":0.188},
{"type":"mark","name":"tsc.op.op_load","count":145,"args":"asset:///lib.esnext.array.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":145,"duration":0.098},
{"type":"mark","name":"tsc.op.op_load","count":146,"args":"asset:///lib.esnext.iterator.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":146,"duration":0.321},
{"type":"mark","name":"tsc.op.op_load","count":147,"args":"asset:///lib.esnext.promise.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":147,"duration":0.074},
{"type":"mark","name":"tsc.op.op_load","count":148,"args":"asset:///lib.esnext.float16.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":148,"duration":0.636},
{"type":"mark","name":"tsc.op.op_load","count":149,"args":"asset:///lib.esnext.error.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":149,"duration":0.099},
{"type":"mark","name":"tsc.op.op_load","count":150,"args":"asset:///lib.esnext.sharedmemory.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":150,"duration":0.179},
{"type":"mark","name":"tsc.op.op_load","count":151,"args":"asset:///lib.deno.net.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":151,"duration":1.464},
{"type":"mark","name":"tsc.op.op_load","count":152,"args":"asset:///lib.deno.shared_globals.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":152,"duration":1.488},
{"type":"mark","name":"tsc.op.op_load","count":153,"args":"asset:///lib.deno.console.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":153,"duration":0.176},
{"type":"mark","name":"tsc.op.op_load","count":154,"args":"asset:///lib.deno.url.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":154,"duration":0.528},
{"type":"mark","name":"tsc.op.op_load","count":155,"args":"asset:///lib.deno.web.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":155,"duration":4.164},
{"type":"mark","name":"tsc.op.op_load","count":156,"args":"asset:///lib.deno.webgpu.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":156,"duration":3.43},
{"type":"mark","name":"tsc.op.op_load","count":157,"args":"asset:///lib.deno.canvas.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":157,"duration":0.177},
{"type":"mark","name":"tsc.op.op_load","count":158,"args":"asset:///lib.deno.fetch.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":158,"duration":1.225},
{"type":"mark","name":"tsc.op.op_load","count":159,"args":"asset:///lib.deno.websocket.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":159,"duration":0.533},
{"type":"mark","name":"tsc.op.op_load","count":160,"args":"asset:///lib.deno.crypto.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":160,"duration":0.686},
{"type":"mark","name":"tsc.op.op_load","count":161,"args":"asset:///lib.deno.webstorage.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":161,"duration":0.143},
{"type":"mark","name":"tsc.op.op_load","count":162,"args":"asset:///lib.deno.cache.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":162,"duration":0.232},
{"type":"mark","name":"tsc.op.op_load","count":163,"args":"asset:///lib.deno.unstable.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":163,"duration":11.183},
{"type":"mark","name":"tsc.op.op_load","count":164,"args":"asset:///lib.deno.broadcast_channel.d.ts"},
{"type":"measure","name":"tsc.op.op_load","count":164,"duration":0.261},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":1,"duration":0.012},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":2,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":3,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":4,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":5,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":6,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":7,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":8,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":9,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":10,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":11,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":12,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":13,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":14,"duration":0.005},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":15,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":16,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":17,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":18,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":19,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":20,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":21,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":22,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":23,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":24,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":25,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":26,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":27,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":28,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":29,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":30,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":31,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":32,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":33,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":34,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":35,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":36,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":37,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":38,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":39,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":40,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":41,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":42,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":43,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":44,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":45,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":46,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":47,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":48,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":49,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":50,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":51,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":52,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":53,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":54,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":55,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":56,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":57,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":58,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":59,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":60,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":61,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":62,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":63,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":64,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":65,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":66,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":67,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":68,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":69,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":70,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":71,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":72,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":73,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":74,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":75,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":76,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":77,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":78,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":79,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":80,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":81,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":82,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":83,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":84,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":85,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":86,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":87,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":88,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":89,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":90,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":91,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":92,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":93,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":94,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":95,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":96,"duration":0.006},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":97,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":98,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":99,"duration":0.369},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":100,"duration":0.427},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":101,"duration":0.006},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":102,"duration":0.006},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":103,"duration":0.016},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":104,"duration":0.006},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":105,"duration":0.007},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":106,"duration":0.006},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":107,"duration":0.008},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":108,"duration":0.007},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":1,"duration":2106.263},
{"type":"mark","name":"tsc.host.getEncodedSemanticClassifications","count":2,"args":{"GetEncodedSemanticClassifications":["file:///workspaces/ProspectPro/public/supabase-app-fixed.js",{"start":0,"length":4411},"2020"]}},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":1,"duration":3777.129},
{"type":"measure","name":"lsp.semantic_tokens_full","count":1,"duration":3777.346},
{"type":"measure","name":"tsc.host.getEncodedSemanticClassifications","count":2,"duration":0.968},
{"type":"measure","name":"tsc.request.getEncodedSemanticClassifications","count":2,"duration":3517.566},
{"type":"measure","name":"lsp.semantic_tokens_range","count":1,"duration":3517.721},
{"type":"mark","name":"lsp.did_change_batched","count":4,"args":"file:///workspaces/ProspectPro/public/index.html"},
{"type":"measure","name":"lsp.did_change_batched","count":4,"duration":0.202},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":5,"duration":0.022},
{"type":"mark","name":"lsp.code_action","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":3,"duration":0.022},
{"type":"mark","name":"lsp.code_action","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":5,"args":"file:///workspaces/ProspectPro/public/index.html"},
{"type":"measure","name":"lsp.did_change_batched","count":5,"duration":53.403},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":6,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":7,"duration":0.002},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":4,"duration":0.02},
{"type":"mark","name":"lsp.code_action","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":6,"args":"file:///workspaces/ProspectPro/public/index.html"},
{"type":"measure","name":"lsp.did_change_batched","count":6,"duration":3.631},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":8,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":9,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":5,"duration":0.02},
{"type":"mark","name":"lsp.code_action","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":7,"args":"file:///workspaces/ProspectPro/public/index.html"},
{"type":"measure","name":"lsp.did_change_batched","count":7,"duration":44.903},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":10,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":11,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":6,"duration":0.021},
{"type":"mark","name":"lsp.code_action","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_close","count":53,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-enhanced.js"}}},
{"type":"measure","name":"lsp.did_close","count":53,"duration":0.468},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":39,"duration":0.053},
{"type":"mark","name":"lsp.did_change_batched","count":8,"args":"file:///workspaces/ProspectPro/public/index.html"},
{"type":"measure","name":"lsp.did_change_batched","count":8,"duration":0.258},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":12,"duration":0.014},
{"type":"mark","name":"lsp.code_action","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":13,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":7,"duration":0.02},
{"type":"mark","name":"lsp.code_action","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_close","count":54,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"}}},
{"type":"measure","name":"lsp.did_close","count":54,"duration":3.893},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":40,"duration":0.079},
{"type":"mark","name":"lsp.did_change_batched","count":9,"args":"file:///workspaces/ProspectPro/public/index.html"},
{"type":"measure","name":"lsp.did_change_batched","count":9,"duration":0.302},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":14,"duration":0.012},
{"type":"mark","name":"lsp.code_action","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":15,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":8,"duration":0.023},
{"type":"mark","name":"lsp.code_action","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":10,"args":"file:///workspaces/ProspectPro/public/index.html"},
{"type":"measure","name":"lsp.did_change_batched","count":10,"duration":2.326},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":16,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":17,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":9,"duration":0.021},
{"type":"mark","name":"lsp.code_action","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":11,"args":"file:///workspaces/ProspectPro/public/index.html"},
{"type":"measure","name":"lsp.did_change_batched","count":11,"duration":0.21},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":18,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":19,"duration":0.002},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":10,"duration":0.023},
{"type":"mark","name":"lsp.code_action","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_open","count":57,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","languageId":"typescript","version":1,"text":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\n\n// CORS headers for frontend calls\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n};\n\ninterface BusinessDiscoveryRequest {\n  businessType: string;\n  location: string;\n  maxResults?: number;\n  budgetLimit?: number;\n  requireCompleteContacts?: boolean;\n  minConfidenceScore?: number;\n  additionalQueries?: string[];\n}\n\ninterface BusinessLead {\n  businessName: string;\n  address: string;\n  phone?: string;\n  website?: string;\n  email?: string;\n  optimizedScore: number;\n  preValidationScore: number;\n  scoreBreakdown: {\n    businessName: number;\n    address: number;\n    phone: number;\n    website: number;\n    email: number;\n    external: number;\n    total: number;\n  };\n  validationCost: number;\n  costEfficient: boolean;\n  scoringRecommendation: string;\n}\n\n// Enhanced Quality Scorer v3.0 - Cost-efficient validation pipeline\nclass EnhancedQualityScorer {\n  private maxCostPerBusiness: number;\n  private dynamicThreshold: number;\n\n  constructor(options: { maxCostPerBusiness?: number } = {}) {\n    this.maxCostPerBusiness = options.maxCostPerBusiness || 2.0;\n    this.dynamicThreshold = 50;\n  }\n\n  scoreBusiness(business: any): BusinessLead {\n    // Pre-validation scoring (free)\n    const preValidationScore = this.calculatePreValidationScore(business);\n\n    // Determine if worth paid validation\n    const shouldValidate = preValidationScore >= this.dynamicThreshold;\n    const validationCost = shouldValidate ? 0.02 : 0; // Simulate validation cost\n\n    // Final optimized score\n    const optimizedScore = shouldValidate\n      ? Math.min(preValidationScore + 5, 100)\n      : preValidationScore;\n\n    return {\n      businessName: business.name || business.businessName || \"\",\n      address: business.address || business.formatted_address || \"\",\n      phone: business.phone || business.formatted_phone_number || \"\",\n      website: business.website || business.url || \"\",\n      email: business.email || `hello@${this.extractDomain(business.website)}`,\n      optimizedScore,\n      preValidationScore,\n      scoreBreakdown: {\n        businessName: this.scoreBusinessName(\n          business.name || business.businessName\n        ),\n        address: this.scoreAddress(\n          business.address || business.formatted_address\n        ),\n        phone: this.scorePhone(\n          business.phone || business.formatted_phone_number\n        ),\n        website: this.scoreWebsite(business.website || business.url),\n        email: 0, // Will be validated separately\n        external: 0, // External validation score\n        total: optimizedScore,\n      },\n      validationCost,\n      costEfficient: validationCost <= this.maxCostPerBusiness,\n      scoringRecommendation: this.getRecommendation(optimizedScore),\n    };\n  }\n\n  private calculatePreValidationScore(business: any): number {\n    let score = 0;\n\n    // Business name (25 points)\n    score += this.scoreBusinessName(business.name || business.businessName);\n\n    // Address (25 points)\n    score += this.scoreAddress(business.address || business.formatted_address);\n\n    // Phone (20 points)\n    score += this.scorePhone(business.phone || business.formatted_phone_number);\n\n    // Website (20 points)\n    score += this.scoreWebsite(business.website || business.url);\n\n    // Rating/Reviews (10 points)\n    if (business.rating && business.rating >= 4.0) score += 10;\n    else if (business.rating && business.rating >= 3.5) score += 5;\n\n    return Math.min(score, 100);\n  }\n\n  private scoreBusinessName(name: string): number {\n    if (!name || name.length < 3) return 0;\n    if (/^(business|company|llc|inc|corp)$/i.test(name)) return 30;\n    if (name.length > 50) return 70;\n    return 90;\n  }\n\n  private scoreAddress(address: string): number {\n    if (!address || address.length < 10) return 0;\n    if (/\\b\\d{1,3}\\s+main\\s+st\\b/i.test(address)) return 40;\n    if (address.includes(\",\") && address.length > 20) return 100;\n    return 80;\n  }\n\n  private scorePhone(phone: string): number {\n    if (!phone) return 0;\n    const cleanPhone = phone.replace(/\\D/g, \"\");\n    if (cleanPhone.length !== 10) return 0;\n    if (/^(555|000|111)/.test(cleanPhone)) return 40;\n    return 80;\n  }\n\n  private scoreWebsite(website: string): number {\n    if (!website) return 0;\n    if (!/^https?:\\/\\/.+/.test(website)) return 40;\n    if (website.includes(\"facebook.com\") || website.includes(\"yelp.com\"))\n      return 60;\n    return 80;\n  }\n\n  private extractDomain(website: string): string {\n    if (!website) return \"example.com\";\n    try {\n      const url = new URL(website);\n      return url.hostname;\n    } catch {\n      return \"example.com\";\n    }\n  }\n\n  private getRecommendation(score: number): string {\n    if (score >= 80) return \"High-quality lead - recommended for outreach\";\n    if (score >= 60) return \"Good lead - consider additional validation\";\n    if (score >= 40)\n      return \"Marginal lead - consider lowering threshold or adding more validation\";\n    return \"Low-quality lead - skip or improve data sources\";\n  }\n}\n\n// Google Places API integration\nclass GooglePlacesAPI {\n  private apiKey: string;\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n\n  async searchBusinesses(\n    businessType: string,\n    location: string,\n    maxResults: number = 20\n  ): Promise<any[]> {\n    const query = `${businessType} ${location}`;\n    const url = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(\n      query\n    )}&key=${this.apiKey}`;\n\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (data.status !== \"OK\") {\n        throw new Error(`Google Places API error: ${data.status}`);\n      }\n\n      return data.results.slice(0, maxResults);\n    } catch (error) {\n      console.error(\"Google Places API error:\", error);\n      throw error;\n    }\n  }\n\n  async getPlaceDetails(placeId: string): Promise<any> {\n    const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_address,formatted_phone_number,website,rating,user_ratings_total&key=${this.apiKey}`;\n\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (data.status !== \"OK\") {\n        throw new Error(`Google Places Details API error: ${data.status}`);\n      }\n\n      return data.result;\n    } catch (error) {\n      console.error(\"Google Places Details API error:\", error);\n      throw error;\n    }\n  }\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders });\n  }\n\n  try {\n    const supabase = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\"\n    );\n\n    // Get request body\n    const requestBody: BusinessDiscoveryRequest = await req.json();\n    const {\n      businessType,\n      location,\n      maxResults = 10,\n      budgetLimit = 50,\n      requireCompleteContacts = false,\n      minConfidenceScore = 50,\n      additionalQueries = [],\n    } = requestBody;\n\n    // Validate required parameters\n    if (!businessType || !location) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Business type and location are required\",\n        }),\n        {\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n          status: 400,\n        }\n      );\n    }\n\n    // Get API keys from Supabase secrets (using vault or environment)\n    const googlePlacesKey = Deno.env.get(\"GOOGLE_PLACES_API_KEY\");\n    if (!googlePlacesKey) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Google Places API key not configured\",\n        }),\n        {\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n          status: 500,\n        }\n      );\n    }\n\n    const startTime = Date.now();\n    const campaignId = `campaign_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n\n    console.log(\n      `🚀 Starting Enhanced Discovery v2.0 - Campaign: ${campaignId}`\n    );\n    console.log(`📊 Requirements: ${maxResults} qualified leads`);\n    console.log(`💰 Budget limit: $${budgetLimit}`);\n\n    // Initialize Google Places API\n    const placesAPI = new GooglePlacesAPI(googlePlacesKey);\n\n    // Initialize Quality Scorer\n    const qualityScorer = new EnhancedQualityScorer({\n      maxCostPerBusiness: budgetLimit / maxResults || 2.0,\n    });\n\n    // Search for businesses\n    const rawBusinesses = await placesAPI.searchBusinesses(\n      businessType,\n      location,\n      maxResults * 2\n    );\n\n    // Score and filter businesses\n    const scoredBusinesses = rawBusinesses.map((business) =>\n      qualityScorer.scoreBusiness(business)\n    );\n\n    // Filter by confidence score and budget\n    const qualifiedLeads = scoredBusinesses\n      .filter((lead) => lead.optimizedScore >= minConfidenceScore)\n      .slice(0, maxResults);\n\n    const processingTime = Date.now() - startTime;\n    const totalCost = qualifiedLeads.reduce(\n      (sum, lead) => sum + lead.validationCost,\n      0\n    );\n\n    // Store campaign in database\n    const campaignData = {\n      id: campaignId,\n      business_type: businessType,\n      location: location,\n      target_count: maxResults,\n      budget_limit: budgetLimit,\n      min_confidence_score: minConfidenceScore,\n      status: \"completed\",\n      results_count: qualifiedLeads.length,\n      total_cost: totalCost,\n      processing_time_ms: processingTime,\n      created_at: new Date().toISOString(),\n    };\n\n    const { data: campaign, error: campaignError } = await supabase\n      .from(\"campaigns\")\n      .insert(campaignData)\n      .select()\n      .single();\n\n    if (campaignError) {\n      console.error(\"Failed to store campaign:\", campaignError);\n      // Continue without database storage\n    }\n\n    // Store leads in database\n    if (campaign && qualifiedLeads.length > 0) {\n      const leadsData = qualifiedLeads.map((lead) => ({\n        campaign_id: campaign.id,\n        business_name: lead.businessName,\n        address: lead.address,\n        phone: lead.phone,\n        website: lead.website,\n        email: lead.email,\n        confidence_score: lead.optimizedScore,\n        score_breakdown: lead.scoreBreakdown,\n        validation_cost: lead.validationCost,\n        cost_efficient: lead.costEfficient,\n        scoring_recommendation: lead.scoringRecommendation,\n      }));\n\n      const { error: leadsError } = await supabase\n        .from(\"leads\")\n        .insert(leadsData);\n\n      if (leadsError) {\n        console.error(\"Failed to store leads:\", leadsError);\n        // Continue without database storage\n      }\n    }\n\n    // Calculate quality metrics\n    const qualityMetrics = {\n      originalCount: rawBusinesses.length,\n      processedCount: scoredBusinesses.length,\n      qualifiedCount: qualifiedLeads.length,\n      qualificationRate:\n        (qualifiedLeads.length / scoredBusinesses.length) * 100,\n      averageScore:\n        qualifiedLeads.reduce((sum, lead) => sum + lead.optimizedScore, 0) /\n          qualifiedLeads.length || 0,\n    };\n\n    // Enhanced response with comprehensive metrics\n    const response = {\n      success: true,\n      campaignId,\n      discoveryEngine: \"Enhanced Discovery Engine v2.0 + Quality Scorer v3.0\",\n      requirements: {\n        targetLeads: maxResults,\n        budgetLimit,\n        requireCompleteContacts,\n        minConfidenceScore,\n      },\n      results: {\n        totalFound: qualifiedLeads.length,\n        qualified: qualifiedLeads.length,\n        qualificationRate: `${qualityMetrics.qualificationRate.toFixed(1)}%`,\n        averageConfidence: Math.round(qualityMetrics.averageScore),\n        completeness: qualifiedLeads.filter((lead) => lead.email && lead.phone)\n          .length,\n      },\n      qualityMetrics: {\n        ...qualityMetrics,\n        optimalThreshold: minConfidenceScore,\n        thresholdAnalysis: {\n          businessesProcessed: scoredBusinesses.length,\n          averageScore: Math.round(qualityMetrics.averageScore),\n          highestScore: Math.max(\n            ...qualifiedLeads.map((l) => l.optimizedScore),\n            0\n          ),\n          lowestScore: Math.min(\n            ...qualifiedLeads.map((l) => l.optimizedScore),\n            0\n          ),\n          projectedQualificationRate: qualityMetrics.qualificationRate,\n          costEfficiency: {\n            averageCostPerBusiness: totalCost / scoredBusinesses.length || 0,\n            costPerQualifiedLead: totalCost / qualifiedLeads.length || 0,\n            costSavingsVsTraditional: budgetLimit - totalCost,\n          },\n          recommendation: \"Balanced threshold for optimal qualification rate\",\n        },\n        costEfficiency: {\n          businessesProcessed: scoredBusinesses.length,\n          averageScore: Math.round(qualityMetrics.averageScore),\n          totalCostSavings: budgetLimit - totalCost,\n          costSavingsPerBusiness:\n            (budgetLimit - totalCost) / scoredBusinesses.length || 0,\n        },\n      },\n      costs: {\n        totalCost,\n        costPerLead: totalCost / qualifiedLeads.length || 0,\n        costBreakdown: {\n          validation: totalCost,\n          discovery: 0.032, // Google Places search cost\n        },\n        validationCosts: totalCost,\n        costSavings: budgetLimit - totalCost,\n      },\n      performance: {\n        processingTime: `${(processingTime / 1000).toFixed(1)}s`,\n        avgTimePerLead: `${(\n          processingTime /\n          qualifiedLeads.length /\n          1000\n        ).toFixed(1)}s`,\n        iterationsCompleted: 1,\n      },\n      leads: qualifiedLeads,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        version: \"Enhanced Discovery Engine v2.0\",\n      },\n    };\n\n    console.log(\n      `✅ Campaign ${campaignId} completed: ${qualifiedLeads.length}/${maxResults} qualified leads`\n    );\n    console.log(`💰 Total cost: $${totalCost.toFixed(4)}`);\n    console.log(`⏱️ Processing time: ${(processingTime / 1000).toFixed(1)}s`);\n\n    return new Response(JSON.stringify(response), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n  } catch (error) {\n    console.error(\"❌ Business Discovery Error:\", error);\n\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: \"Business discovery failed\",\n        details: error.message,\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 500,\n      }\n    );\n  }\n});\n"}}},
{"type":"measure","name":"lsp.did_open","count":57,"duration":7.559},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":41,"duration":0.079},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":1,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",42]}},
{"type":"measure","name":"lsp.diagnostic","count":20,"duration":130.323},
{"type":"mark","name":"lsp.did_change_batched","count":12,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":42,"duration":0.074},
{"type":"measure","name":"lsp.did_change_batched","count":12,"duration":28.819},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":2,"duration":0.28},
{"type":"mark","name":"tsc.op.op_resolve","count":50,"args":{"base":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.58.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":50,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":51,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":51,"duration":0.073},
{"type":"mark","name":"tsc.op.op_resolve","count":52,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":52,"duration":0.046},
{"type":"mark","name":"tsc.op.op_resolve","count":53,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":53,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":54,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":54,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":55,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":55,"duration":0.053},
{"type":"mark","name":"tsc.op.op_resolve","count":56,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":56,"duration":0.047},
{"type":"mark","name":"tsc.op.op_resolve","count":57,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":57,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":58,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":58,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":59,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":59,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":60,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":60,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":61,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":61,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":62,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":62,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":63,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":63,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":64,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":64,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":65,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":65,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":66,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":66,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":67,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":67,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":68,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":68,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":69,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":69,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":70,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":70,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":71,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":71,"duration":0.034},
{"type":"mark","name":"tsc.op.op_resolve","count":72,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":72,"duration":0.055},
{"type":"mark","name":"tsc.op.op_resolve","count":73,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":73,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":74,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":74,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":75,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":75,"duration":0.038},
{"type":"mark","name":"tsc.op.op_resolve","count":76,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":76,"duration":0.025},
{"type":"mark","name":"tsc.op.op_resolve","count":77,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":77,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":78,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":78,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":79,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":79,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":80,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":80,"duration":0.041},
{"type":"mark","name":"tsc.op.op_resolve","count":81,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":81,"duration":0.023},
{"type":"mark","name":"tsc.op.op_resolve","count":82,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":82,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":83,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":83,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":84,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":84,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":85,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":85,"duration":0.039},
{"type":"mark","name":"tsc.op.op_resolve","count":86,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":86,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":87,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":87,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":88,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":88,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":89,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":89,"duration":0.035},
{"type":"mark","name":"tsc.op.op_load","count":165,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":165,"duration":0.058},
{"type":"mark","name":"tsc.op.op_resolve","count":90,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":90,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":91,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":91,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":92,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":92,"duration":0.056},
{"type":"mark","name":"tsc.op.op_resolve","count":93,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":93,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":94,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":94,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":95,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":95,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":96,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":96,"duration":0.036},
{"type":"mark","name":"tsc.op.op_resolve","count":97,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enhanced-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":97,"duration":0.025},
{"type":"mark","name":"lsp.code_action","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"tsc.op.op_release","count":1,"args":"file:///workspaces/ProspectPro/public/supabase-app-enhanced.js"},
{"type":"measure","name":"tsc.op.op_release","count":1,"duration":26.32},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":22,"duration":0.019},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":1,"duration":694.465},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":2,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",43]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":1,"duration":0.039},
{"type":"mark","name":"tsc.op.op_load","count":166,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":166,"duration":0.77},
{"type":"mark","name":"tsc.op.op_resolve","count":98,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":98,"duration":0.066},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":109,"duration":0.014},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":110,"duration":0.013},
{"type":"measure","name":"lsp.diagnostic","count":21,"duration":1033.541},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":2,"duration":509.336},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":3,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",43]}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"lsp.code_action","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":3,"duration":518.675},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":3,"duration":519.105},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":1,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":1,"duration":0.447},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":1,"duration":0.497},
{"type":"measure","name":"lsp.did_save","count":11,"duration":783.995},
{"type":"measure","name":"lsp.diagnostic","count":23,"duration":494.062},
{"type":"mark","name":"lsp.did_change_batched","count":13,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":43,"duration":0.092},
{"type":"measure","name":"lsp.did_change_batched","count":13,"duration":4.48},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":4,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",44]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":2,"duration":0.03},
{"type":"mark","name":"tsc.op.op_load","count":167,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":167,"duration":0.055},
{"type":"mark","name":"tsc.op.op_resolve","count":99,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":99,"duration":0.043},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":4,"duration":166.44},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":4,"duration":169.543},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":2,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":2,"duration":0.14},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":2,"duration":0.207},
{"type":"measure","name":"lsp.diagnostic","count":24,"duration":171.76},
{"type":"mark","name":"lsp.code_action","count":35,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":12,"duration":0.066},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":25,"duration":0.018},
{"type":"mark","name":"lsp.code_action","count":36,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":26,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":14,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":14,"duration":13.159},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.testing_update","count":44,"duration":3.094},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":5,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",45]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":3,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":168,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":168,"duration":2.094},
{"type":"mark","name":"tsc.op.op_resolve","count":100,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":100,"duration":0.04},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":5,"duration":113.59},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":5,"duration":113.765},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":3,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":3,"duration":61.528},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":3,"duration":61.661},
{"type":"measure","name":"lsp.diagnostic","count":27,"duration":182.597},
{"type":"mark","name":"lsp.code_action","count":37,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":13,"duration":0.058},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":28,"duration":0.022},
{"type":"mark","name":"lsp.code_action","count":38,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":29,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":15,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":45,"duration":0.155},
{"type":"measure","name":"lsp.did_change_batched","count":15,"duration":5.4},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":6,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",46]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":4,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":169,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":169,"duration":0.047},
{"type":"mark","name":"tsc.op.op_resolve","count":101,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":101,"duration":0.082},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":6,"duration":89.448},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":6,"duration":90.567},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":4,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":4,"duration":0.151},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":4,"duration":0.208},
{"type":"measure","name":"lsp.diagnostic","count":30,"duration":92.563},
{"type":"mark","name":"lsp.code_action","count":39,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":31,"duration":0.023},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":14,"duration":0.058},
{"type":"mark","name":"lsp.code_action","count":40,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":32,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":16,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":46,"duration":0.056},
{"type":"measure","name":"lsp.did_change_batched","count":16,"duration":5.987},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":7,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",47]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":5,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":170,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":170,"duration":0.081},
{"type":"mark","name":"tsc.op.op_resolve","count":102,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":102,"duration":0.036},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":7,"duration":115.169},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":7,"duration":115.323},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":5,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":5,"duration":0.153},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":5,"duration":0.248},
{"type":"measure","name":"lsp.diagnostic","count":33,"duration":117.934},
{"type":"mark","name":"lsp.code_action","count":41,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":34,"duration":0.022},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":15,"duration":0.058},
{"type":"mark","name":"lsp.code_action","count":42,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":35,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":17,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":47,"duration":0.062},
{"type":"measure","name":"lsp.did_change_batched","count":17,"duration":5.216},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":8,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",48]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":6,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":171,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":171,"duration":0.072},
{"type":"mark","name":"tsc.op.op_resolve","count":103,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":103,"duration":0.039},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":8,"duration":107.487},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":8,"duration":107.963},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":6,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":6,"duration":0.145},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":6,"duration":0.214},
{"type":"measure","name":"lsp.diagnostic","count":36,"duration":108.379},
{"type":"mark","name":"lsp.code_action","count":43,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":16,"duration":0.058},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":37,"duration":0.014},
{"type":"mark","name":"lsp.code_action","count":44,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":38,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":18,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":18,"duration":4.232},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.testing_update","count":48,"duration":0.135},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":9,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",49]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":7,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":172,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":172,"duration":0.093},
{"type":"mark","name":"tsc.op.op_resolve","count":104,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":104,"duration":0.042},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":9,"duration":80.314},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":9,"duration":82.748},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":7,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":7,"duration":0.142},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":7,"duration":0.2},
{"type":"measure","name":"lsp.diagnostic","count":39,"duration":87.173},
{"type":"mark","name":"lsp.code_action","count":45,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":17,"duration":0.058},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":40,"duration":0.014},
{"type":"mark","name":"lsp.code_action","count":46,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":41,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":19,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":49,"duration":0.063},
{"type":"measure","name":"lsp.did_change_batched","count":19,"duration":3.565},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":10,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",50]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":8,"duration":0.03},
{"type":"mark","name":"tsc.op.op_load","count":173,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":173,"duration":0.05},
{"type":"mark","name":"tsc.op.op_resolve","count":105,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":105,"duration":0.044},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":10,"duration":128.322},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":10,"duration":128.475},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":8,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":8,"duration":0.21},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":8,"duration":0.549},
{"type":"measure","name":"lsp.diagnostic","count":42,"duration":131.588},
{"type":"mark","name":"lsp.code_action","count":47,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":43,"duration":0.019},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":18,"duration":0.048},
{"type":"mark","name":"lsp.code_action","count":48,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":44,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":20,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":50,"duration":0.068},
{"type":"measure","name":"lsp.did_change_batched","count":20,"duration":5.858},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":11,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",51]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":9,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":174,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":174,"duration":0.05},
{"type":"mark","name":"tsc.op.op_resolve","count":106,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":106,"duration":0.036},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":11,"duration":92.732},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":11,"duration":94.478},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":9,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":9,"duration":0.185},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":9,"duration":0.361},
{"type":"measure","name":"lsp.diagnostic","count":45,"duration":95.03},
{"type":"mark","name":"lsp.code_action","count":49,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":19,"duration":0.166},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":46,"duration":0.015},
{"type":"mark","name":"lsp.code_action","count":50,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"range":{"start":{"line":743,"character":49},"end":{"line":743,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":47,"duration":0.001},
{"type":"mark","name":"lsp.did_open","count":58,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/FIXES_COMPLETE.md","languageId":"markdown","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":58,"duration":0.039},
{"type":"mark","name":"lsp.did_change_batched","count":21,"args":"file:///workspaces/ProspectPro/FIXES_COMPLETE.md"},
{"type":"measure","name":"lsp.did_change_batched","count":21,"duration":5.473},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":48,"duration":0.014},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":49,"duration":0.011},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":20,"duration":0.029},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":50,"duration":0.002},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":51,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":52,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":53,"duration":0.002},
{"type":"mark","name":"lsp.did_change_batched","count":22,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":22,"duration":7.272},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":51,"duration":0.347},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":12,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",52]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":10,"duration":0.033},
{"type":"mark","name":"tsc.op.op_load","count":175,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":175,"duration":0.667},
{"type":"mark","name":"tsc.op.op_resolve","count":107,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":107,"duration":0.044},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":12,"duration":258.744},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":12,"duration":258.922},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":10,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":10,"duration":0.15},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":10,"duration":0.203},
{"type":"measure","name":"lsp.diagnostic","count":54,"duration":259.323},
{"type":"mark","name":"lsp.did_change_batched","count":23,"args":"file:///workspaces/ProspectPro/FIXES_COMPLETE.md"},
{"type":"measure","name":"lsp.did_change_batched","count":23,"duration":0.071},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":55,"duration":0.01},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":21,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":56,"duration":0.02},
{"type":"mark","name":"lsp.did_change_batched","count":24,"args":"file:///workspaces/ProspectPro/public/index.html"},
{"type":"measure","name":"lsp.did_change_batched","count":24,"duration":8.887},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":57,"duration":0.022},
{"type":"mark","name":"lsp.did_change_batched","count":25,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":52,"duration":0.053},
{"type":"measure","name":"lsp.did_change_batched","count":25,"duration":313.924},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":58,"duration":0.01},
{"type":"mark","name":"lsp.did_change_batched","count":26,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":26,"duration":3.446},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":53,"duration":0.058},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":22,"duration":0.008},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":13,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",54]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":11,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":176,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"measure","name":"tsc.op.op_load","count":176,"duration":0.41},
{"type":"mark","name":"tsc.op.op_load","count":177,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":177,"duration":0.045},
{"type":"mark","name":"tsc.op.op_resolve","count":108,"args":{"base":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.58.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":108,"duration":0.032},
{"type":"mark","name":"tsc.op.op_resolve","count":109,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":109,"duration":0.032},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":13,"duration":94.286},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":13,"duration":96.366},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":11,"args":"GetAmbientModules"},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":23,"duration":0.022},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":11,"duration":259.143},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":11,"duration":259.911},
{"type":"measure","name":"lsp.diagnostic","count":59,"duration":356.46},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":24,"duration":0.054},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":60,"duration":0.029},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":61,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":62,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":63,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":64,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":65,"duration":0.023},
{"type":"mark","name":"lsp.code_action","count":51,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"}}},
{"type":"mark","name":"lsp.did_change_batched","count":27,"args":"file:///workspaces/ProspectPro/public/index.html"},
{"type":"measure","name":"lsp.did_change_batched","count":27,"duration":20.14},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":66,"duration":0.001},
{"type":"mark","name":"lsp.document_symbol","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"}}},
{"type":"mark","name":"lsp.code_action","count":52,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"},"range":{"start":{"line":0,"character":0},"end":{"line":112,"character":7}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":25,"duration":0.076},
{"type":"mark","name":"lsp.inlay_hint","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"},"range":{"start":{"line":0,"character":0},"end":{"line":112,"character":7}}}},
{"type":"mark","name":"lsp.inlay_hint","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"},"range":{"start":{"line":512,"character":0},"end":{"line":689,"character":33}}}},
{"type":"mark","name":"lsp.folding_range","count":6,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"}}},
{"type":"mark","name":"lsp.code_action","count":53,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"}}},
{"type":"mark","name":"lsp.inlay_hint","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"},"range":{"start":{"line":512,"character":0},"end":{"line":689,"character":33}}}},
{"type":"mark","name":"lsp.document_symbol","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/index.html"}}},
{"type":"mark","name":"lsp.did_open","count":59,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/FORM_STRUCTURE_FIX.md","languageId":"markdown","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":59,"duration":0.037},
{"type":"mark","name":"lsp.did_change_batched","count":28,"args":"file:///workspaces/ProspectPro/FORM_STRUCTURE_FIX.md"},
{"type":"measure","name":"lsp.did_change_batched","count":28,"duration":0.652},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":67,"duration":0.015},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":26,"duration":0.03},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":68,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":69,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":29,"args":"file:///workspaces/ProspectPro/public/index.html"},
{"type":"measure","name":"lsp.did_change_batched","count":29,"duration":10.496},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":27,"duration":0.02},
{"type":"mark","name":"lsp.did_change_batched","count":30,"args":"file:///workspaces/ProspectPro/FORM_STRUCTURE_FIX.md"},
{"type":"measure","name":"lsp.did_change_batched","count":30,"duration":0.086},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":28,"duration":0.022},
{"type":"mark","name":"lsp.did_open","count":60,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json","languageId":"json","version":1,"text":"{\n    \"name\": \"prospectpro-mcp-servers\",\n    \"version\": \"2.1.0\",\n    \"description\": \"Consolidated MCP servers for ProspectPro Supabase-First AI development\",\n    \"main\": \"supabase-production-server.js\",\n    \"scripts\": {\n        \"start:production\": \"node supabase-production-server.js\",\n        \"start:development\": \"node supabase-development-server.js\",\n        \"start:troubleshooting\": \"node supabase-troubleshooting-server.js\",\n        \"start:all\": \"concurrently \\\"npm run start:production\\\" \\\"npm run start:development\\\" \\\"npm run start:troubleshooting\\\"\",\n        \"test\": \"node test-servers.js\",\n        \"validate\": \"npm run test && echo '✅ All Supabase MCP servers validated successfully'\",\n        \"install:deps\": \"npm install\",\n        \"debug:anon-key\": \"echo 'Use troubleshooting server: diagnose_anon_key_mismatch tool'\",\n        \"debug:edge-functions\": \"echo 'Use troubleshooting server: test_edge_function tool'\",\n        \"debug:database\": \"echo 'Use troubleshooting server: validate_database_permissions tool'\"\n    },\n    \"dependencies\": {\n        \"@modelcontextprotocol/sdk\": \"^1.18.2\",\n        \"@supabase/supabase-js\": \"^2.58.0\"\n    },\n    \"devDependencies\": {\n        \"concurrently\": \"^8.2.2\"\n    },\n    \"keywords\": [\n        \"mcp\",\n        \"model-context-protocol\",\n        \"ai\",\n        \"prospectpro\",\n        \"supabase\",\n        \"edge-functions\",\n        \"serverless\"\n    ],\n    \"author\": \"Alex Torelli\",\n    \"license\": \"MIT\"\n}"}}},
{"type":"measure","name":"lsp.did_open","count":60,"duration":0.057},
{"type":"mark","name":"lsp.goto_definition","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},"position":{"line":295,"character":10}}},
{"type":"mark","name":"tsc.request.getDefinitionAndBoundSpan"},
{"type":"mark","name":"tsc.host.getDefinitionAndBoundSpan","count":1,"args":{"GetDefinitionAndBoundSpan":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",8784]}},
{"type":"measure","name":"tsc.host.getDefinitionAndBoundSpan","count":1,"duration":4.852},
{"type":"measure","name":"tsc.request.getDefinitionAndBoundSpan","count":1,"duration":5.368},
{"type":"measure","name":"lsp.goto_definition","count":1,"duration":5.563},
{"type":"mark","name":"lsp.did_open","count":61,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js","languageId":"javascript","version":1,"text":"#!/usr/bin/env node\n\n/**\n * ProspectPro Production MCP Server - Enhanced & Consolidated\n * Optimized for rapid CI/CD, environment switching, troubleshooting, and comprehensive development support\n *\n * Consolidated Features:\n * - Production monitoring and health checks\n * - Database analytics and lead management\n * - System diagnostics and performance monitoring\n * - API testing and integration management\n * - Filesystem analysis and codebase insights\n */\n\nconst { Server } = require(\"@modelcontextprotocol/sdk/server/index.js\");\nconst {\n  StdioServerTransport,\n} = require(\"@modelcontextprotocol/sdk/server/stdio.js\");\nconst { CallToolRequestSchema } = require(\"@modelcontextprotocol/sdk/types.js\");\nconst { createClient } = require(\"@supabase/supabase-js\");\nconst https = require(\"https\");\nconst { spawn } = require(\"child_process\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nclass ProductionMCPServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: \"prospectpro-production-enhanced\",\n        version: \"2.0.0\",\n      },\n      {\n        capabilities: {\n          tools: {},\n        },\n      }\n    );\n\n    this.supabase = null;\n    this.apiClients = {};\n    this.workspaceRoot = process.env.WORKSPACE_ROOT || process.cwd();\n    this.setupTools();\n    this.setupErrorHandling();\n  }\n\n  setupTools() {\n    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      switch (request.params.name) {\n        // === PRODUCTION MONITORING TOOLS ===\n        case \"environment_health_check\":\n          return await this.environmentHealthCheck();\n        case \"github_actions_monitor\":\n          return await this.githubActionsMonitor(request.params.arguments);\n        case \"dev_prod_config_diff\":\n          return await this.devProdConfigDiff();\n        case \"cost_budget_monitor\":\n          return await this.costBudgetMonitor();\n        case \"api_health_dashboard\":\n          return await this.apiHealthDashboard();\n        case \"vault_api_key_status\":\n          return await this.vaultApiKeyStatus();\n        case \"production_startup_validator\":\n          return await this.productionStartupValidator();\n        case \"github_workflow_optimizer\":\n          return await this.githubWorkflowOptimizer();\n\n        // === SYSTEM DIAGNOSTICS TOOLS (from monitoring-server) ===\n        case \"get_system_health\":\n          return await this.getSystemHealth(request.params.arguments);\n        case \"read_diagnostics\":\n          return await this.readDiagnostics(request.params.arguments);\n        case \"analyze_logs\":\n          return await this.analyzeLogs(request.params.arguments);\n        case \"validate_configuration\":\n          return await this.validateConfiguration(request.params.arguments);\n        case \"generate_performance_report\":\n          return await this.generatePerformanceReport(request.params.arguments);\n        case \"monitor_api_quotas\":\n          return await this.monitorAPIQuotas(request.params.arguments);\n\n        // === DATABASE ANALYTICS TOOLS (from database-server) ===\n        case \"query_leads\":\n          return await this.queryLeads(request.params.arguments);\n        case \"get_campaign_stats\":\n          return await this.getCampaignStats(request.params.arguments);\n        case \"analyze_lead_quality\":\n          return await this.analyzeLeadQuality(request.params.arguments);\n        case \"get_api_costs\":\n          return await this.getApiCosts(request.params.arguments);\n\n        // === API TESTING TOOLS (from api-server) ===\n        case \"test_google_places\":\n          return await this.testGooglePlaces(request.params.arguments);\n        case \"test_foursquare_places\":\n          return await this.testFoursquarePlaces(request.params.arguments);\n        case \"test_email_discovery\":\n          return await this.testEmailDiscovery(request.params.arguments);\n        case \"verify_email\":\n          return await this.verifyEmail(request.params.arguments);\n        case \"get_api_usage_stats\":\n          return await this.getAPIUsageStats();\n        case \"simulate_lead_discovery\":\n          return await this.simulateLeadDiscovery(request.params.arguments);\n\n        // === FILESYSTEM ANALYSIS TOOLS (from filesystem-server) ===\n        case \"analyze_project_structure\":\n          return await this.analyzeProjectStructure(request.params.arguments);\n        case \"find_code_patterns\":\n          return await this.findCodePatterns(request.params.arguments);\n        case \"analyze_api_clients\":\n          return await this.analyzeAPIClients(request.params.arguments);\n        case \"check_fake_data_violations\":\n          return await this.checkFakeDataViolations(request.params.arguments);\n\n        default:\n          throw new Error(`Unknown tool: ${request.params.name}`);\n      }\n    });\n  }\n\n  async initializeSupabase() {\n    if (!this.supabase) {\n      if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SECRET_KEY) {\n        throw new Error(\"Missing Supabase configuration\");\n      }\n\n      this.supabase = createClient(\n        process.env.SUPABASE_URL,\n        process.env.SUPABASE_SECRET_KEY\n      );\n\n      // Test connection\n      const { data, error } = await this.supabase\n        .from(\"enhanced_leads\")\n        .select(\"count\")\n        .limit(1);\n\n      if (error && !error.message.includes(\"does not exist\")) {\n        throw new Error(`Supabase connection failed: ${error.message}`);\n      }\n    }\n  }\n\n  async initializeAPIClients() {\n    if (Object.keys(this.apiClients).length === 0) {\n      try {\n        const GooglePlacesClient = require(\"../modules/api-clients/google-places-client\");\n        const FoursquareClient = require(\"../modules/api-clients/foursquare-places-client\");\n        const HunterIOClient = require(\"../modules/api-clients/hunter-io-client\");\n        const NeverBounceClient = require(\"../modules/api-clients/neverbounce-client\");\n\n        this.apiClients = {\n          googlePlaces: new GooglePlacesClient(\n            process.env.GOOGLE_PLACES_API_KEY\n          ),\n          foursquare: new FoursquareClient(process.env.FOURSQUARE_API_KEY),\n          hunterIO: new HunterIOClient(process.env.HUNTER_IO_API_KEY),\n          neverBounce: new NeverBounceClient(process.env.NEVERBOUNCE_API_KEY),\n        };\n      } catch (error) {\n        console.error(\n          \"Warning: Some API clients could not be loaded:\",\n          error.message\n        );\n      }\n    }\n  }\n\n  // === PRODUCTION MONITORING METHODS ===\n  async environmentHealthCheck() {\n    const results = {\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || \"unknown\",\n      checks: [],\n    };\n\n    try {\n      // Check 1: Environment variables\n      const requiredEnvVars = [\"SUPABASE_URL\", \"SUPABASE_SECRET_KEY\"];\n      const envCheck = {\n        name: \"Environment Variables\",\n        status: \"healthy\",\n        details: {},\n      };\n\n      requiredEnvVars.forEach((varName) => {\n        const value = process.env[varName];\n        if (!value || value.includes(\"your_\")) {\n          envCheck.status = \"unhealthy\";\n          envCheck.details[varName] = \"missing or template value\";\n        } else {\n          envCheck.details[varName] = \"configured\";\n        }\n      });\n      results.checks.push(envCheck);\n\n      // Check 2: Supabase Connection\n      if (process.env.SUPABASE_URL && process.env.SUPABASE_SECRET_KEY) {\n        const supabase = createClient(\n          process.env.SUPABASE_URL,\n          process.env.SUPABASE_SECRET_KEY\n        );\n\n        try {\n          const { error } = await supabase\n            .from(\"enhanced_leads\")\n            .select(\"count\")\n            .limit(1);\n          results.checks.push({\n            name: \"Supabase Database\",\n            status:\n              error && !error.message.includes(\"does not exist\")\n                ? \"unhealthy\"\n                : \"healthy\",\n            details: { connection: \"successful\" },\n          });\n        } catch (dbError) {\n          results.checks.push({\n            name: \"Supabase Database\",\n            status: \"unhealthy\",\n            details: { error: dbError.message },\n          });\n        }\n      }\n\n      // Check 3: GitHub Actions Integration\n      const ghToken = process.env.GHP_TOKEN || process.env.GITHUB_TOKEN;\n      results.checks.push({\n        name: \"GitHub Actions Integration\",\n        status: ghToken ? \"healthy\" : \"warning\",\n        details: { token: ghToken ? \"present\" : \"missing\" },\n      });\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🔍 **Production Environment Health Check**\\n\\n${JSON.stringify(\n              results,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Health check failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // GitHub Actions Workflow Monitor\n  async githubActionsMonitor({\n    repo = \"Alextorelli/ProspectPro\",\n    workflow = \"generate-dotenv.yml\",\n  } = {}) {\n    const token = process.env.GHP_TOKEN || process.env.GITHUB_TOKEN;\n\n    if (!token) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: \"⚠️ No GitHub token available for workflow monitoring\",\n          },\n        ],\n      };\n    }\n\n    try {\n      const [owner, repoName] = repo.split(\"/\");\n      const options = {\n        hostname: \"api.github.com\",\n        path: `/repos/${owner}/${repoName}/actions/workflows/${workflow}/runs?per_page=5`,\n        headers: {\n          Authorization: `token ${token}`,\n          \"User-Agent\": \"ProspectPro-Production-MCP\",\n        },\n      };\n\n      const response = await this.makeHttpsRequest(options);\n      const data = JSON.parse(response);\n\n      if (data.workflow_runs && data.workflow_runs.length > 0) {\n        const runs = data.workflow_runs.slice(0, 3).map((run) => ({\n          id: run.id,\n          status: run.status,\n          conclusion: run.conclusion,\n          created_at: run.created_at,\n          head_commit: run.head_commit?.message?.substring(0, 50) + \"...\",\n        }));\n\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `📊 **GitHub Actions Workflow Status**\\n\\n**Workflow**: ${workflow}\\n**Repository**: ${repo}\\n\\n**Recent Runs**:\\n${JSON.stringify(\n                runs,\n                null,\n                2\n              )}`,\n            },\n          ],\n        };\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `📊 No recent workflow runs found for ${workflow}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ GitHub Actions monitoring failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Dev/Prod Configuration Comparison\n  async devProdConfigDiff() {\n    try {\n      const prodEnvPath = path.join(process.cwd(), \".env\");\n      const devEnvPath = path.join(\n        process.cwd(),\n        \".devcontainer\",\n        \"devcontainer.json\"\n      );\n\n      const comparison = {\n        production: {\n          environment_file: fs.existsSync(prodEnvPath),\n          node_env: process.env.NODE_ENV,\n          theme: \"default (unchanged)\",\n          mcp_servers: \"production-only\",\n        },\n        development: {\n          devcontainer_config: fs.existsSync(devEnvPath),\n          theme: \"Vira Deepforest (green)\",\n          mcp_servers: \"full suite (database, API, filesystem, monitoring)\",\n        },\n      };\n\n      // Read production configuration\n      if (fs.existsSync(prodEnvPath)) {\n        const envContent = fs.readFileSync(prodEnvPath, \"utf8\");\n        comparison.production.features = {\n          supabase_configured: !envContent.includes(\"your-project-ref\"),\n          github_actions_build: envContent.includes(\"BUILD_TIMESTAMP\"),\n          vault_integration: envContent.includes(\"Vault\"),\n        };\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `🔄 **Dev/Prod Configuration Comparison**\\n\\n${JSON.stringify(\n              comparison,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Configuration comparison failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Cost Budget Monitor\n  async costBudgetMonitor() {\n    try {\n      const supabase = createClient(\n        process.env.SUPABASE_URL,\n        process.env.SUPABASE_SECRET_KEY\n      );\n\n      // Get recent API costs\n      const { data: costs, error } = await supabase\n        .from(\"api_costs\")\n        .select(\"*\")\n        .gte(\n          \"created_at\",\n          new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n        )\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n\n      const totalCost =\n        costs?.reduce((sum, cost) => sum + (cost.cost || 0), 0) || 0;\n      const budgetLimit = parseFloat(process.env.DEFAULT_BUDGET_LIMIT) || 25.0;\n      const utilization = (totalCost / budgetLimit) * 100;\n\n      const analysis = {\n        period: \"Last 24 hours\",\n        total_cost: `$${totalCost.toFixed(2)}`,\n        budget_limit: `$${budgetLimit.toFixed(2)}`,\n        utilization: `${utilization.toFixed(1)}%`,\n        status:\n          utilization > 80\n            ? \"⚠️ HIGH\"\n            : utilization > 50\n            ? \"⚡ MODERATE\"\n            : \"✅ HEALTHY\",\n        recent_costs:\n          costs?.slice(0, 5).map((cost) => ({\n            service: cost.service,\n            cost: `$${cost.cost?.toFixed(3)}`,\n            timestamp: cost.created_at,\n          })) || [],\n      };\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `💰 **Cost Budget Monitor**\\n\\n${JSON.stringify(\n              analysis,\n              null,\n              2\n            )}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Cost monitoring failed: ${error.message}\\n\\nNote: Ensure api_costs table exists in Supabase`,\n          },\n        ],\n      };\n    }\n  }\n\n  // API Health Dashboard\n  async apiHealthDashboard() {\n    const apis = [\n      { name: \"Google Places\", key: \"GOOGLE_PLACES_API_KEY\" },\n      { name: \"Hunter.io\", key: \"HUNTER_IO_API_KEY\" },\n      { name: \"NeverBounce\", key: \"NEVERBOUNCE_API_KEY\" },\n      { name: \"Foursquare\", key: \"FOURSQUARE_API_KEY\" },\n    ];\n\n    const dashboard = {\n      timestamp: new Date().toISOString(),\n      apis: [],\n    };\n\n    for (const api of apis) {\n      const status = {\n        name: api.name,\n        key_configured: !!process.env[api.key],\n        status: \"unknown\",\n      };\n\n      // Basic configuration check\n      if (process.env[api.key]) {\n        status.status = \"configured\";\n      } else {\n        status.status = \"missing_key\";\n        status.note = \"Check Supabase Vault or environment variables\";\n      }\n\n      dashboard.apis.push(status);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: `🔌 **API Health Dashboard**\\n\\n${JSON.stringify(\n            dashboard,\n            null,\n            2\n          )}`,\n        },\n      ],\n    };\n  }\n\n  // === NEW ENHANCED TOOLS FOR VAULT AND PRODUCTION OPTIMIZATION ===\n\n  // Vault API Key Status Monitor\n  async vaultApiKeyStatus() {\n    try {\n      console.log(\"🔑 Checking Supabase Vault API key status...\");\n\n      // Test Supabase connection\n      const supabaseUrl = process.env.SUPABASE_URL;\n      const supabaseKey = process.env.SUPABASE_SECRET_KEY;\n\n      if (!supabaseUrl || !supabaseKey) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"❌ Supabase credentials not configured in environment\",\n            },\n          ],\n        };\n      }\n\n      const supabase = createClient(supabaseUrl, supabaseKey);\n\n      // Check vault diagnostic function\n      const { data, error } = await supabase.rpc(\"vault_diagnostic_check\");\n\n      if (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `❌ Vault diagnostic failed: ${error.message}`,\n            },\n          ],\n        };\n      }\n\n      let report = \"🔐 **Supabase Vault API Key Status Report**\\n\\n\";\n\n      if (data && data.length > 0) {\n        data.forEach((check) => {\n          const statusIcon =\n            check.status === \"ENABLED\" || check.status === \"COMPLETE\"\n              ? \"✅\"\n              : check.status === \"PARTIAL\"\n              ? \"⚠️\"\n              : \"❌\";\n\n          report += `${statusIcon} **${check.check_name}**: ${check.status}\\n`;\n          report += `   Details: ${check.details}\\n`;\n          report += `   Recommendation: ${check.recommendation}\\n\\n`;\n        });\n      } else {\n        report += \"⚠️ No diagnostic data returned from vault\\n\";\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Error checking vault status: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // Production Startup Validator\n  async productionStartupValidator() {\n    try {\n      console.log(\"🔍 Running production startup validation...\");\n\n      const issues = [];\n      const validations = [];\n\n      // Check 1: Environment variables\n      const requiredEnvs = [\"SUPABASE_URL\", \"SUPABASE_SECRET_KEY\"];\n      requiredEnvs.forEach((env) => {\n        const value = process.env[env];\n        if (!value || value.includes(\"your_\")) {\n          issues.push(`Missing or template value for ${env}`);\n        } else {\n          validations.push(`✅ ${env} configured`);\n        }\n      });\n\n      // Check 2: Production mode settings\n      const nodeEnv = process.env.NODE_ENV;\n      if (nodeEnv === \"production\") {\n        validations.push(\"✅ NODE_ENV set to production\");\n\n        // Check degraded start setting\n        if (process.env.ALLOW_DEGRADED_START === \"true\") {\n          issues.push(\n            \"❌ ALLOW_DEGRADED_START=true is not recommended for production\"\n          );\n        } else {\n          validations.push(\n            \"✅ Strict production mode enabled (no degraded starts)\"\n          );\n        }\n      } else {\n        issues.push(`NODE_ENV is '${nodeEnv}', should be 'production'`);\n      }\n\n      // Check 3: Port configuration\n      const port = process.env.PORT;\n      if (port && port !== \"3000\") {\n        validations.push(`✅ Custom port configured: ${port}`);\n      } else {\n        validations.push(\"ℹ️ Using default/standard port configuration\");\n      }\n\n      let report = \"🏭 **Production Startup Validation Report**\\n\\n\";\n\n      report += \"**Validations Passed:**\\n\";\n      validations.forEach((validation) => {\n        report += `${validation}\\n`;\n      });\n\n      if (issues.length > 0) {\n        report += \"\\n**Issues Found:**\\n\";\n        issues.forEach((issue) => {\n          report += `❌ ${issue}\\n`;\n        });\n\n        report += \"\\n**Recommendations:**\\n\";\n        report +=\n          \"1. Ensure GitHub Actions workflows have generated proper .env\\n\";\n        report += \"2. Configure API keys in Supabase Vault\\n\";\n        report +=\n          \"3. Set ALLOW_DEGRADED_START=false for strict production mode\\n\";\n        report += \"4. Verify all secrets are present and valid\\n\";\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Production validation failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // GitHub Workflow Optimizer\n  async githubWorkflowOptimizer() {\n    try {\n      console.log(\"⚙️ Analyzing GitHub Actions workflows...\");\n\n      const workflowsDir = path.join(process.cwd(), \".github\", \"workflows\");\n\n      if (!fs.existsSync(workflowsDir)) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"❌ No .github/workflows directory found\",\n            },\n          ],\n        };\n      }\n\n      const workflows = fs\n        .readdirSync(workflowsDir)\n        .filter((file) => file.endsWith(\".yml\") || file.endsWith(\".yaml\"));\n\n      let report = \"⚙️ **GitHub Actions Workflow Analysis**\\n\\n\";\n\n      const optimizations = [];\n      const issues = [];\n\n      workflows.forEach((workflow) => {\n        const workflowPath = path.join(workflowsDir, workflow);\n        const content = fs.readFileSync(workflowPath, \"utf8\");\n\n        report += `📋 **${workflow}:**\\n`;\n\n        // Check triggers\n        if (content.includes(\"push:\") && content.includes(\"branches: [main]\")) {\n          if (\n            workflow.includes(\"repository-maintenance\") ||\n            workflow.includes(\"docker-env\")\n          ) {\n            issues.push(\n              `${workflow}: Triggers on every push (may cause cascade failures)`\n            );\n            optimizations.push(\n              `Consider schedule-only or manual triggers for ${workflow}`\n            );\n          } else {\n            report += \"  ✅ Push trigger configured for main branch\\n\";\n          }\n        }\n\n        // Check for workflow_dispatch\n        if (content.includes(\"workflow_dispatch:\")) {\n          report += \"  ✅ Manual trigger available\\n\";\n        } else {\n          optimizations.push(\n            `Add workflow_dispatch to ${workflow} for manual testing`\n          );\n        }\n\n        // Check for proper permissions\n        if (content.includes(\"permissions:\")) {\n          report += \"  ✅ Permissions configured\\n\";\n        } else {\n          if (\n            content.includes(\"GITHUB_TOKEN\") ||\n            content.includes(\"secrets.\")\n          ) {\n            issues.push(\n              `${workflow}: Uses secrets but no permissions specified`\n            );\n          }\n        }\n\n        report += \"\\n\";\n      });\n\n      if (optimizations.length > 0) {\n        report += \"**Optimization Recommendations:**\\n\";\n        optimizations.forEach((opt) => {\n          report += `💡 ${opt}\\n`;\n        });\n        report += \"\\n\";\n      }\n\n      if (issues.length > 0) {\n        report += \"**Issues Found:**\\n\";\n        issues.forEach((issue) => {\n          report += `⚠️ ${issue}\\n`;\n        });\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: report,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `❌ Workflow analysis failed: ${error.message}`,\n          },\n        ],\n      };\n    }\n  }\n\n  // === SYSTEM DIAGNOSTICS METHODS (from monitoring-server) ===\n\n  async getSystemHealth(args = {}) {\n    const { includeDetailedMetrics = false } = args;\n\n    const health = {\n      timestamp: new Date().toISOString(),\n      status: \"unknown\",\n      components: {},\n      metrics: {},\n    };\n\n    try {\n      // Check critical files\n      const packageJson = await this.checkFile(\"package.json\");\n      const dockerCompose = await this.checkFile(\"docker-compose.yml\");\n      const server = await this.checkFile(\"server.js\");\n\n      health.components = {\n        filesystem: {\n          status: \"healthy\",\n          package_json: packageJson.exists,\n          docker_compose: dockerCompose.exists,\n          server_file: server.exists,\n        },\n      };\n\n      // Check diagnostics file\n      try {\n        const diagnosticsPath = path.join(\n          this.workspaceRoot,\n          \"diagnostics.json\"\n        );\n        const diagnosticsContent = await fs.readFileSync(\n          diagnosticsPath,\n          \"utf8\"\n        );\n        const diagnostics = JSON.parse(diagnosticsContent);\n\n        health.components.diagnostics = {\n          status: diagnostics.status || \"unknown\",\n          last_check: diagnostics.timestamp,\n          database_connection: diagnostics.database?.status === \"connected\",\n        };\n      } catch (error) {\n        health.components.diagnostics = {\n          status: \"unavailable\",\n          error: \"Diagnostics file not found or invalid\",\n        };\n      }\n\n      // Overall health determination\n      const criticalComponents = [\"filesystem\"];\n      const healthyComponents = criticalComponents.filter(\n        (comp) => health.components[comp]?.status === \"healthy\"\n      );\n\n      health.status =\n        healthyComponents.length === criticalComponents.length\n          ? \"healthy\"\n          : healthyComponents.length > 0\n          ? \"degraded\"\n          : \"unhealthy\";\n\n      if (includeDetailedMetrics) {\n        health.metrics = await this.gatherDetailedMetrics();\n      }\n    } catch (error) {\n      health.status = \"error\";\n      health.error = error.message;\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(health, null, 2),\n        },\n      ],\n    };\n  }\n\n  async readDiagnostics(args = {}) {\n    const { includeHistory = true } = args;\n\n    try {\n      const diagnosticsPath = path.join(this.workspaceRoot, \"diagnostics.json\");\n      const content = await fs.readFileSync(diagnosticsPath, \"utf8\");\n      const diagnostics = JSON.parse(content);\n\n      const analysis = {\n        current_diagnostics: diagnostics,\n        analysis: {\n          timestamp: diagnostics.timestamp,\n          status: diagnostics.status,\n          critical_issues: [],\n          warnings: [],\n          recommendations: [],\n        },\n      };\n\n      // Analyze diagnostics data\n      if (diagnostics.database) {\n        if (diagnostics.database.status !== \"connected\") {\n          analysis.analysis.critical_issues.push(\"Database connection failed\");\n        }\n        if (diagnostics.database.error) {\n          analysis.analysis.critical_issues.push(\n            `Database error: ${diagnostics.database.error}`\n          );\n        }\n      }\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(analysis, null, 2),\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(\n              {\n                error: `Failed to read diagnostics: ${error.message}`,\n                suggestion:\n                  \"Run the application to generate diagnostics.json file\",\n              },\n              null,\n              2\n            ),\n          },\n        ],\n      };\n    }\n  }\n\n  async analyzeLogs(args = {}) {\n    const { logType = \"all\", timeRange = \"24h\" } = args;\n\n    const logFiles = [\n      \"startup.log\",\n      \"production.log\",\n      \"database-validation.log\",\n    ];\n    const analysis = {\n      log_type: logType,\n      time_range: timeRange,\n      log_files_checked: [],\n      patterns_found: { errors: [], warnings: [], info: [] },\n      summary: {},\n    };\n\n    for (const logFile of logFiles) {\n      try {\n        const logPath = path.join(this.workspaceRoot, logFile);\n        const content = await fs.readFileSync(logPath, \"utf8\");\n        const stats = await fs.statSync(logPath);\n\n        analysis.log_files_checked.push({\n          file: logFile,\n          size: stats.size,\n          last_modified: stats.mtime,\n          line_count: content.split(\"\\n\").length,\n        });\n\n        const errorPatterns = content.match(/ERROR|Error:|error:/gi) || [];\n        if (errorPatterns.length > 0) {\n          analysis.patterns_found.errors.push({\n            file: logFile,\n            count: errorPatterns.length,\n          });\n        }\n      } catch (error) {\n        analysis.log_files_checked.push({\n          file: logFile,\n          error: `Could not read: ${error.message}`,\n        });\n      }\n    }\n\n    analysis.summary = {\n      total_log_files: analysis.log_files_checked.filter((f) => !f.error)\n        .length,\n      total_errors: analysis.patterns_found.errors.reduce(\n        (sum, e) => sum + e.count,\n        0\n      ),\n      health_status:\n        analysis.patterns_found.errors.length === 0\n          ? \"healthy\"\n          : \"needs_attention\",\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(analysis, null, 2),\n        },\n      ],\n    };\n  }\n\n  async validateConfiguration(args = {}) {\n    const { strict = true } = args;\n\n    const validation = {\n      validation_mode: strict ? \"strict\" : \"standard\",\n      results: {},\n      issues: [],\n      recommendations: [],\n    };\n\n    // Check critical files\n    const criticalFiles = [\"package.json\", \"server.js\", \"docker-compose.yml\"];\n    validation.results.critical_files = {};\n\n    for (const file of criticalFiles) {\n      const fileInfo = await this.checkFile(file);\n      validation.results.critical_files[file] = fileInfo;\n\n      if (!fileInfo.exists) {\n        validation.issues.push(`Missing critical file: ${file}`);\n      }\n    }\n\n    if (validation.issues.length === 0) {\n      validation.recommendations.push(\n        \"Configuration appears to be complete and healthy\"\n      );\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(validation, null, 2),\n        },\n      ],\n    };\n  }\n\n  async generatePerformanceReport(args = {}) {\n    const { includeRecommendations = true } = args;\n\n    const report = {\n      generated_at: new Date().toISOString(),\n      performance_metrics: {},\n      analysis: {},\n      recommendations: [],\n    };\n\n    // File system performance metrics\n    const metrics = await this.gatherDetailedMetrics();\n    report.performance_metrics = metrics;\n\n    const totalFiles = Object.values(metrics.file_counts || {}).reduce(\n      (sum, count) => sum + count,\n      0\n    );\n\n    report.analysis = {\n      total_files: totalFiles,\n      estimated_complexity:\n        totalFiles > 100 ? \"complex\" : totalFiles > 50 ? \"moderate\" : \"simple\",\n    };\n\n    if (includeRecommendations) {\n      report.recommendations.push(\n        \"Use MCP servers to offload AI processing tasks\"\n      );\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(report, null, 2),\n        },\n      ],\n    };\n  }\n\n  async monitorAPIQuotas(args = {}) {\n    const { alertThreshold = 80 } = args;\n\n    const quotaMonitoring = {\n      alert_threshold: alertThreshold,\n      api_services: {},\n      alerts: [],\n      recommendations: [],\n    };\n\n    // Mock API quota data (integrate with actual APIs in production)\n    const apiServices = [\n      {\n        name: \"Google Places\",\n        quota: 1000,\n        used: 250,\n        cost_per_request: 0.032,\n      },\n      { name: \"Hunter.io\", quota: 100, used: 45, cost_per_request: 0.04 },\n      { name: \"NeverBounce\", quota: 1000, used: 320, cost_per_request: 0.008 },\n    ];\n\n    apiServices.forEach((service) => {\n      const usagePercent = (service.used / service.quota) * 100;\n      quotaMonitoring.api_services[service.name] = {\n        quota_limit: service.quota,\n        requests_used: service.used,\n        usage_percentage: Math.round(usagePercent),\n        status: usagePercent >= alertThreshold ? \"alert\" : \"ok\",\n      };\n    });\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(quotaMonitoring, null, 2),\n        },\n      ],\n    };\n  }\n\n  // === DATABASE ANALYTICS METHODS (from database-server) ===\n\n  async queryLeads(args = {}) {\n    const { filters = {}, limit = 10, orderBy = \"confidence_score\" } = args;\n\n    await this.initializeSupabase();\n\n    let query = this.supabase\n      .from(\"enhanced_leads\")\n      .select(\"*\")\n      .order(orderBy, { ascending: false })\n      .limit(limit);\n\n    // Apply filters\n    Object.entries(filters).forEach(([key, value]) => {\n      query = query.eq(key, value);\n    });\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw new Error(`Query failed: ${error.message}`);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              results: data,\n              count: data.length,\n              query_info: { filters, limit, orderBy },\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async getCampaignStats(args = {}) {\n    const { campaignId, timeRange = \"24h\" } = args;\n\n    await this.initializeSupabase();\n\n    const intervalMap = {\n      \"24h\": \"1 day\",\n      \"7d\": \"7 days\",\n      \"30d\": \"30 days\",\n    };\n\n    const { data, error } = await this.supabase.rpc(\"get_campaign_statistics\", {\n      p_campaign_id: campaignId,\n      p_time_interval: intervalMap[timeRange] || \"1 day\",\n    });\n\n    if (error) {\n      throw new Error(`Campaign stats query failed: ${error.message}`);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              campaign_id: campaignId,\n              time_range: timeRange,\n              statistics: data,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async analyzeLeadQuality(args = {}) {\n    const { businessType, minConfidence = 70 } = args;\n\n    await this.initializeSupabase();\n\n    let query = this.supabase\n      .from(\"enhanced_leads\")\n      .select(\n        \"confidence_score, business_name, email_confidence, phone_confidence, website_confidence\"\n      )\n      .gte(\"confidence_score\", minConfidence);\n\n    if (businessType) {\n      query = query.ilike(\"business_type\", `%${businessType}%`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw new Error(`Quality analysis failed: ${error.message}`);\n    }\n\n    const analysis = {\n      total_leads: data.length,\n      average_confidence:\n        data.reduce((sum, lead) => sum + lead.confidence_score, 0) /\n        data.length,\n      confidence_distribution: {\n        high: data.filter((l) => l.confidence_score >= 85).length,\n        medium: data.filter(\n          (l) => l.confidence_score >= 70 && l.confidence_score < 85\n        ).length,\n        low: data.filter((l) => l.confidence_score < 70).length,\n      },\n    };\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(analysis, null, 2),\n        },\n      ],\n    };\n  }\n\n  async getApiCosts(args = {}) {\n    const { timeRange = \"24h\" } = args;\n\n    await this.initializeSupabase();\n\n    const { data, error } = await this.supabase\n      .from(\"api_costs\")\n      .select(\"*\")\n      .gte(\n        \"created_at\",\n        new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n      )\n      .order(\"created_at\", { ascending: false });\n\n    if (error) {\n      throw new Error(`API costs query failed: ${error.message}`);\n    }\n\n    const totalCost =\n      data?.reduce((sum, cost) => sum + (cost.cost || 0), 0) || 0;\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              time_range: timeRange,\n              total_cost: totalCost,\n              total_requests: data?.length || 0,\n              recent_costs: data?.slice(0, 5) || [],\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  // === API TESTING METHODS (from api-server) ===\n\n  async testGooglePlaces(args = {}) {\n    const { query, location = \"New York, NY\", limit = 5 } = args;\n\n    await this.initializeAPIClients();\n\n    if (!this.apiClients.googlePlaces) {\n      throw new Error(\"Google Places API client not available\");\n    }\n\n    const results = await this.apiClients.googlePlaces.searchBusinesses(\n      query,\n      location,\n      limit\n    );\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Google Places\",\n              query,\n              location,\n              results: results.businesses || [],\n              success: results.found,\n              error: results.error || null,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async testFoursquarePlaces(args = {}) {\n    const { query, location = \"New York, NY\", limit = 5 } = args;\n\n    await this.initializeAPIClients();\n\n    if (!this.apiClients.foursquare) {\n      throw new Error(\"Foursquare API client not available\");\n    }\n\n    const results = await this.apiClients.foursquare.searchBusinesses(\n      query,\n      location,\n      limit\n    );\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Foursquare Places\",\n              query,\n              location,\n              results: results.businesses || [],\n              success: results.found,\n              error: results.error || null,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async testEmailDiscovery(args = {}) {\n    const { domain, limit = 5 } = args;\n\n    await this.initializeAPIClients();\n\n    if (!this.apiClients.hunterIO) {\n      throw new Error(\"Hunter.io API client not available\");\n    }\n\n    const results = await this.apiClients.hunterIO.findEmails(domain, limit);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"Hunter.io\",\n              domain,\n              emails: results.emails || [],\n              success: results.found,\n              error: results.error || null,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async verifyEmail(args = {}) {\n    const { email } = args;\n\n    await this.initializeAPIClients();\n\n    if (!this.apiClients.neverBounce) {\n      throw new Error(\"NeverBounce API client not available\");\n    }\n\n    const result = await this.apiClients.neverBounce.verifyEmail(email);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api: \"NeverBounce\",\n              email,\n              verification: result,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async getAPIUsageStats() {\n    await this.initializeAPIClients();\n\n    const stats = {};\n\n    Object.entries(this.apiClients).forEach(([name, client]) => {\n      if (client && typeof client.getUsageStats === \"function\") {\n        stats[name] = client.getUsageStats();\n      }\n    });\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              api_usage_statistics: stats,\n              generated_at: new Date().toISOString(),\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async simulateLeadDiscovery(args = {}) {\n    const { businessType, location, maxResults = 3 } = args;\n\n    await this.initializeAPIClients();\n\n    const results = {\n      businessType,\n      location,\n      maxResults,\n      discovery_results: {},\n      processing_summary: {\n        total_discovered: 0,\n        errors: [],\n      },\n    };\n\n    try {\n      // Business Discovery\n      if (this.apiClients.googlePlaces) {\n        const googleResults =\n          await this.apiClients.googlePlaces.searchBusinesses(\n            businessType,\n            location,\n            maxResults\n          );\n        results.discovery_results.google_places = googleResults;\n        results.processing_summary.total_discovered +=\n          googleResults.businesses?.length || 0;\n      }\n\n      if (this.apiClients.foursquare) {\n        const foursquareResults =\n          await this.apiClients.foursquare.searchBusinesses(\n            businessType,\n            location,\n            maxResults\n          );\n        results.discovery_results.foursquare = foursquareResults;\n        results.processing_summary.total_discovered +=\n          foursquareResults.businesses?.length || 0;\n      }\n    } catch (error) {\n      results.processing_summary.errors.push(error.message);\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(results, null, 2),\n        },\n      ],\n    };\n  }\n\n  // === FILESYSTEM ANALYSIS METHODS (from filesystem-server) ===\n\n  async analyzeProjectStructure(args = {}) {\n    const { includeFiles = true } = args;\n\n    const structure = await this.walkDirectory(\n      this.workspaceRoot,\n      includeFiles\n    );\n    const analysis = this.analyzeStructure(structure);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              workspace_root: this.workspaceRoot,\n              structure_analysis: analysis,\n              directory_tree: structure,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async findCodePatterns(args = {}) {\n    const {\n      pattern,\n      fileExtensions = [\".js\", \".json\", \".md\", \".sql\"],\n      excludeDirectories = [\"node_modules\", \".git\", \"archive\"],\n    } = args;\n\n    const results = [];\n    const regex = new RegExp(pattern, \"gi\");\n\n    const searchInDirectory = async (dirPath) => {\n      try {\n        const items = await fs.readdirSync(dirPath);\n\n        for (const item of items) {\n          const itemPath = path.join(dirPath, item);\n          const stats = await fs.statSync(itemPath);\n\n          if (stats.isDirectory()) {\n            if (!excludeDirectories.includes(item) && !item.startsWith(\".\")) {\n              await searchInDirectory(itemPath);\n            }\n          } else if (fileExtensions.includes(path.extname(item))) {\n            try {\n              const content = await fs.readFileSync(itemPath, \"utf8\");\n              const matches = [...content.matchAll(regex)];\n\n              if (matches.length > 0) {\n                results.push({\n                  file: path.relative(this.workspaceRoot, itemPath),\n                  matches: matches.length,\n                  details: matches.slice(0, 5).map((match) => ({\n                    match: match[0],\n                  })),\n                });\n              }\n            } catch (readError) {\n              // Skip files that can't be read\n            }\n          }\n        }\n      } catch (error) {\n        // Skip directories that can't be accessed\n      }\n    };\n\n    await searchInDirectory(this.workspaceRoot);\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              pattern,\n              total_matches: results.reduce((sum, r) => sum + r.matches, 0),\n              files_with_matches: results.length,\n              results,\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  async analyzeAPIClients(args = {}) {\n    const { detailed = false } = args;\n    const apiClientsPath = path.join(\n      this.workspaceRoot,\n      \"modules\",\n      \"api-clients\"\n    );\n\n    try {\n      const files = await fs.readdirSync(apiClientsPath);\n      const analysis = { clients: [], summary: {} };\n\n      for (const file of files) {\n        if (path.extname(file) === \".js\") {\n          const filePath = path.join(apiClientsPath, file);\n          const content = await fs.readFileSync(filePath, \"utf8\");\n\n          const clientAnalysis = {\n            name: file,\n            size: content.length,\n            method_count: (content.match(/async\\s+\\w+\\(|^\\s*\\w+\\s*\\(/gm) || [])\n              .length,\n            error_handling: (content.match(/try\\s*{|catch\\s*\\(/g) || []).length,\n            caching_implemented:\n              content.includes(\"cache\") || content.includes(\"Cache\"),\n          };\n\n          analysis.clients.push(clientAnalysis);\n        }\n      }\n\n      analysis.summary = {\n        total_clients: analysis.clients.length,\n        total_methods: analysis.clients.reduce(\n          (sum, c) => sum + c.method_count,\n          0\n        ),\n        clients_with_caching: analysis.clients.filter(\n          (c) => c.caching_implemented\n        ).length,\n      };\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(analysis, null, 2),\n          },\n        ],\n      };\n    } catch (error) {\n      throw new Error(`Failed to analyze API clients: ${error.message}`);\n    }\n  }\n\n  async checkFakeDataViolations(args = {}) {\n    const { strict = true } = args;\n\n    const suspiciousPatterns = [\n      \"Artisan\\\\s+Bistro\",\n      \"Downtown\\\\s+Café?\",\n      \"Business\\\\s+LLC\",\n      \"\\\\(555\\\\)\\\\s*\\\\d{3}-\\\\d{4}\",\n      \"example\\\\.com\",\n      \"generateFake\",\n      \"mockData\",\n    ];\n\n    const violations = [];\n\n    for (const pattern of suspiciousPatterns) {\n      const patternResults = await this.findCodePatterns({\n        pattern,\n        fileExtensions: [\".js\", \".json\"],\n        excludeDirectories: [\"node_modules\", \".git\", \"archive\", \"tests\"],\n      });\n\n      const data = JSON.parse(patternResults.content[0].text);\n      if (data.results.length > 0) {\n        violations.push({\n          pattern,\n          severity: strict ? \"HIGH\" : \"MEDIUM\",\n          matches: data.results,\n        });\n      }\n    }\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            {\n              check_mode: strict ? \"strict\" : \"standard\",\n              total_violations: violations.length,\n              violations,\n              recommendation:\n                violations.length > 0\n                  ? \"IMMEDIATE ACTION REQUIRED: Remove all fake data patterns\"\n                  : \"No fake data violations detected - good!\",\n            },\n            null,\n            2\n          ),\n        },\n      ],\n    };\n  }\n\n  // === HELPER METHODS ===\n\n  async checkFile(relativePath) {\n    try {\n      const filePath = path.join(this.workspaceRoot, relativePath);\n      const stats = await fs.statSync(filePath);\n      return {\n        exists: true,\n        size: stats.size,\n        modified: stats.mtime,\n      };\n    } catch (error) {\n      return {\n        exists: false,\n        error: error.message,\n      };\n    }\n  }\n\n  async gatherDetailedMetrics() {\n    const metrics = {\n      disk_usage: {},\n      file_counts: {},\n    };\n\n    try {\n      // Count files by extension\n      const fileExtensions = await this.countFilesByExtension();\n      metrics.file_counts = fileExtensions;\n\n      // Calculate directory sizes for key directories\n      const directories = [\"modules\", \"api\", \"database\", \"mcp-servers\"];\n      for (const dir of directories) {\n        try {\n          const dirPath = path.join(this.workspaceRoot, dir);\n          const size = await this.getDirectorySize(dirPath);\n          metrics.disk_usage[dir] = size;\n        } catch (error) {\n          metrics.disk_usage[dir] = { error: error.message };\n        }\n      }\n    } catch (error) {\n      metrics.error = error.message;\n    }\n\n    return metrics;\n  }\n\n  async countFilesByExtension() {\n    const counts = {};\n\n    const countInDirectory = async (dirPath) => {\n      try {\n        const items = await fs.readdirSync(dirPath);\n\n        for (const item of items) {\n          const itemPath = path.join(dirPath, item);\n          const stats = await fs.statSync(itemPath);\n\n          if (stats.isDirectory()) {\n            if (\n              item !== \"node_modules\" &&\n              !item.startsWith(\".\") &&\n              item !== \"archive\"\n            ) {\n              await countInDirectory(itemPath);\n            }\n          } else {\n            const ext = path.extname(item) || \"no-extension\";\n            counts[ext] = (counts[ext] || 0) + 1;\n          }\n        }\n      } catch (error) {\n        // Skip inaccessible directories\n      }\n    };\n\n    await countInDirectory(this.workspaceRoot);\n    return counts;\n  }\n\n  async getDirectorySize(dirPath) {\n    let totalSize = 0;\n\n    try {\n      const items = await fs.readdirSync(dirPath);\n\n      for (const item of items) {\n        const itemPath = path.join(dirPath, item);\n        const stats = await fs.statSync(itemPath);\n\n        if (stats.isDirectory()) {\n          if (item !== \"node_modules\" && !item.startsWith(\".\")) {\n            totalSize += await this.getDirectorySize(itemPath);\n          }\n        } else {\n          totalSize += stats.size;\n        }\n      }\n    } catch (error) {\n      // Skip inaccessible directories\n    }\n\n    return totalSize;\n  }\n\n  async walkDirectory(dirPath, includeFiles, currentDepth = 0, maxDepth = 4) {\n    if (currentDepth > maxDepth) return null;\n\n    const result = {\n      name: path.basename(dirPath),\n      type: \"directory\",\n      children: [],\n    };\n\n    try {\n      const items = await fs.readdirSync(dirPath);\n\n      for (const item of items) {\n        if (item.startsWith(\".\") && !item.includes(\"vscode\")) continue;\n        if ([\"node_modules\", \"archive\"].includes(item)) continue;\n\n        const itemPath = path.join(dirPath, item);\n        const stats = await fs.statSync(itemPath);\n\n        if (stats.isDirectory()) {\n          const childResult = await this.walkDirectory(\n            itemPath,\n            includeFiles,\n            currentDepth + 1,\n            maxDepth\n          );\n          if (childResult) result.children.push(childResult);\n        } else if (includeFiles) {\n          result.children.push({\n            name: item,\n            type: \"file\",\n            size: stats.size,\n            extension: path.extname(item),\n          });\n        }\n      }\n    } catch (error) {\n      result.error = error.message;\n    }\n\n    return result;\n  }\n\n  analyzeStructure(structure) {\n    const analysis = {\n      total_directories: 0,\n      total_files: 0,\n      file_types: {},\n      key_directories: [],\n    };\n\n    const analyzeNode = (node) => {\n      if (node.type === \"directory\") {\n        analysis.total_directories++;\n\n        // Identify key directories\n        const keyDirs = [\n          \"api\",\n          \"modules\",\n          \"config\",\n          \"database\",\n          \"mcp-servers\",\n          \"scripts\",\n        ];\n        if (keyDirs.includes(node.name)) {\n          analysis.key_directories.push({\n            name: node.name,\n            children_count: node.children?.length || 0,\n          });\n        }\n\n        if (node.children) {\n          node.children.forEach(analyzeNode);\n        }\n      } else if (node.type === \"file\") {\n        analysis.total_files++;\n        const ext = node.extension || \"no-extension\";\n        analysis.file_types[ext] = (analysis.file_types[ext] || 0) + 1;\n      }\n    };\n\n    analyzeNode(structure);\n    return analysis;\n  }\n\n  // Additional helper methods...\n  async makeHttpsRequest(options) {\n    return new Promise((resolve, reject) => {\n      const req = https.request(options, (res) => {\n        let data = \"\";\n        res.on(\"data\", (chunk) => (data += chunk));\n        res.on(\"end\", () => {\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            resolve(data);\n          } else {\n            reject(new Error(`HTTP ${res.statusCode}: ${data}`));\n          }\n        });\n      });\n      req.on(\"error\", reject);\n      req.end();\n    });\n  }\n\n  setupErrorHandling() {\n    this.server.onerror = (error) => {\n      console.error(\"[Production MCP Server Error]:\", error);\n    };\n\n    process.on(\"SIGINT\", async () => {\n      await this.server.close();\n      process.exit(0);\n    });\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\n      \"🚀 ProspectPro Production MCP Server v2.0 - Enhanced & Consolidated\"\n    );\n    console.error(\n      \"   📊 Production Monitoring | 🗄️  Database Analytics | 🔧 System Diagnostics\"\n    );\n    console.error(\n      \"   🔌 API Testing | 📁 Filesystem Analysis | 🛡️  Security Validation\"\n    );\n  }\n}\n\n// Start server if run directly\nif (require.main === module) {\n  const server = new ProductionMCPServer();\n  server.run().catch(console.error);\n}\n\nmodule.exports = ProductionMCPServer;\n"}}},
{"type":"measure","name":"lsp.did_open","count":61,"duration":20.527},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":54,"duration":0.058},
{"type":"mark","name":"lsp.did_change_batched","count":31,"args":"file:///workspaces/ProspectPro/mcp-servers/package.json"},
{"type":"measure","name":"lsp.did_change_batched","count":31,"duration":0.088},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":70,"duration":0.022},
{"type":"mark","name":"lsp.code_action","count":54,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"}}},
{"type":"mark","name":"lsp.inlay_hint","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":35,"character":1}}}},
{"type":"mark","name":"lsp.code_action","count":55,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":29,"duration":0.021},
{"type":"mark","name":"lsp.inlay_hint","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":35,"character":1}}}},
{"type":"mark","name":"lsp.document_symbol","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"}}},
{"type":"mark","name":"lsp.did_change_watched_files","count":1,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json","type":2}]}},
Refreshing configuration tree...
{"type":"mark","name":"lsp.update_cache"},
{"type":"measure","name":"lsp.update_cache","count":2,"duration":0.001},
{"type":"mark","name":"tsc.request.$cleanupSemanticCache"},
{"type":"mark","name":"tsc.host.$cleanupSemanticCache","count":1,"args":"CleanupSemanticCache"},
{"type":"measure","name":"tsc.host.$cleanupSemanticCache","count":1,"duration":1.359},
{"type":"measure","name":"tsc.request.$cleanupSemanticCache","count":1,"duration":24.099},
{"type":"measure","name":"lsp.did_change_watched_files","count":1,"duration":110.401},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.folding_range","count":7,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"}}},
{"type":"mark","name":"lsp.code_action","count":56,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"measure","name":"lsp.testing_update","count":55,"duration":0.089},
{"type":"mark","name":"lsp.did_change_watched_files","count":2,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json","type":2}]}},
Refreshing configuration tree...
{"type":"mark","name":"lsp.update_cache"},
{"type":"measure","name":"lsp.update_cache","count":3,"duration":0.001},
{"type":"mark","name":"tsc.request.$cleanupSemanticCache"},
{"type":"mark","name":"tsc.host.$cleanupSemanticCache","count":2,"args":"CleanupSemanticCache"},
{"type":"measure","name":"tsc.host.$cleanupSemanticCache","count":2,"duration":0.29},
{"type":"measure","name":"tsc.request.$cleanupSemanticCache","count":2,"duration":9.705},
{"type":"measure","name":"lsp.did_change_watched_files","count":2,"duration":82.226},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":56,"duration":0.054},
{"type":"mark","name":"lsp.code_lens","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"}}},
{"type":"mark","name":"lsp.code_action","count":57,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":35,"character":1}}}},
{"type":"mark","name":"lsp.code_action","count":58,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":59,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_open","count":62,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/PRODUCTION_MCP_INITIALIZED.md","languageId":"markdown","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":62,"duration":0.043},
{"type":"mark","name":"lsp.did_change_batched","count":32,"args":"file:///workspaces/ProspectPro/mcp-servers/PRODUCTION_MCP_INITIALIZED.md"},
{"type":"measure","name":"lsp.did_change_batched","count":32,"duration":1.062},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":71,"duration":0.017},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":72,"duration":0.015},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":30,"duration":0.022},
{"type":"mark","name":"lsp.code_action","count":60,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_close","count":55,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/production-server.js"}}},
{"type":"measure","name":"lsp.did_close","count":55,"duration":0.267},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":57,"duration":0.047},
{"type":"mark","name":"lsp.did_change_batched","count":33,"args":"file:///workspaces/ProspectPro/mcp-servers/PRODUCTION_MCP_INITIALIZED.md"},
{"type":"measure","name":"lsp.did_change_batched","count":33,"duration":0.075},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":73,"duration":0.013},
{"type":"mark","name":"lsp.inlay_hint","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":35,"character":1}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":31,"duration":0.022},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":32,"duration":0.032},
{"type":"mark","name":"lsp.code_action","count":61,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":74,"duration":0.002},
{"type":"mark","name":"lsp.did_change_watched_files","count":3,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json","type":2},{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json","type":2}]}},
Refreshing configuration tree...
{"type":"mark","name":"lsp.update_cache"},
{"type":"measure","name":"lsp.update_cache","count":4,"duration":0.001},
{"type":"mark","name":"tsc.request.$cleanupSemanticCache"},
{"type":"mark","name":"tsc.host.$cleanupSemanticCache","count":3,"args":"CleanupSemanticCache"},
{"type":"measure","name":"tsc.host.$cleanupSemanticCache","count":3,"duration":0.271},
{"type":"measure","name":"tsc.request.$cleanupSemanticCache","count":3,"duration":12.977},
{"type":"measure","name":"lsp.did_change_watched_files","count":3,"duration":44.052},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":58,"duration":0.053},
{"type":"mark","name":"lsp.code_action","count":62,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"}}},
{"type":"mark","name":"lsp.code_action","count":63,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/mcp-servers/package.json"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_open","count":63,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md","languageId":"markdown","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":63,"duration":0.04},
{"type":"mark","name":"lsp.did_change_batched","count":34,"args":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"},
{"type":"measure","name":"lsp.did_change_batched","count":34,"duration":2.592},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":75,"duration":0.015},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":76,"duration":0.012},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":33,"duration":0.023},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":77,"duration":0.025},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":78,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":79,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":64,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"}}},
{"type":"mark","name":"lsp.inlay_hint","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"},"range":{"start":{"line":0,"character":0},"end":{"line":94,"character":87}}}},
{"type":"mark","name":"lsp.document_symbol","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"}}},
{"type":"mark","name":"lsp.code_lens","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"}}},
{"type":"mark","name":"lsp.code_action","count":65,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.folding_range","count":8,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"}}},
{"type":"mark","name":"lsp.did_change_batched","count":35,"args":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"},
{"type":"measure","name":"lsp.did_change_batched","count":35,"duration":0.074},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":80,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":34,"duration":0.022},
{"type":"mark","name":"lsp.folding_range","count":9,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"}}},
{"type":"mark","name":"lsp.code_lens","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"}}},
{"type":"mark","name":"lsp.inlay_hint","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"},"range":{"start":{"line":0,"character":0},"end":{"line":112,"character":24}}}},
{"type":"mark","name":"lsp.document_symbol","count":19,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":81,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":66,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":20,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"}}},
{"type":"mark","name":"lsp.inlay_hint","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"},"range":{"start":{"line":0,"character":0},"end":{"line":112,"character":24}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":82,"duration":0.001},
{"type":"mark","name":"lsp.did_open","count":64,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json","languageId":"json","version":1,"text":"{\n    \"headers\": [\n        {\n            \"source\": \"/(.*)\",\n            \"headers\": [\n                {\n                    \"key\": \"X-Frame-Options\",\n                    \"value\": \"SAMEORIGIN\"\n                },\n                {\n                    \"key\": \"Access-Control-Allow-Origin\",\n                    \"value\": \"*\"\n                },\n                {\n                    \"key\": \"Access-Control-Allow-Methods\",\n                    \"value\": \"GET, POST, PUT, DELETE, OPTIONS\"\n                },\n                {\n                    \"key\": \"Access-Control-Allow-Headers\",\n                    \"value\": \"Content-Type, Authorization\"\n                }\n            ]\n        }\n    ]\n}"}}},
{"type":"measure","name":"lsp.did_open","count":64,"duration":0.06},
{"type":"mark","name":"lsp.did_open","count":65,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/vercel.json","languageId":"json","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":65,"duration":0.04},
{"type":"mark","name":"lsp.did_change_batched","count":36,"args":"file:///workspaces/ProspectPro/vercel.json"},
{"type":"measure","name":"lsp.did_change_batched","count":36,"duration":1.688},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":83,"duration":0.013},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":84,"duration":0.014},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":35,"duration":0.02},
{"type":"mark","name":"lsp.did_change_watched_files","count":4,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/vercel.json","type":1}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":4,"duration":0.01},
{"type":"mark","name":"lsp.code_action","count":67,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":85,"duration":0.002},
{"type":"mark","name":"lsp.code_action","count":68,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_watched_files","count":5,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/vercel.json","type":2},{"uri":"file:///workspaces/ProspectPro/vercel.json","type":2}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":5,"duration":0.012},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":86,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":87,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":69,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":70,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.folding_range","count":10,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"}}},
{"type":"mark","name":"lsp.document_symbol","count":21,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"}}},
{"type":"mark","name":"lsp.did_open","count":66,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md","languageId":"markdown","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":66,"duration":0.048},
{"type":"mark","name":"lsp.did_change_batched","count":37,"args":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},
{"type":"measure","name":"lsp.did_change_batched","count":37,"duration":13.536},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":88,"duration":0.016},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":89,"duration":0.013},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":36,"duration":0.037},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":90,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":91,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":92,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":93,"duration":0.002},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":94,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":71,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.document_symbol","count":22,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"}}},
{"type":"mark","name":"lsp.inlay_hint","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":99,"character":73}}}},
{"type":"mark","name":"lsp.document_symbol","count":23,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"}}},
{"type":"mark","name":"lsp.code_lens","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"}}},
{"type":"mark","name":"lsp.folding_range","count":11,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"}}},
{"type":"mark","name":"lsp.code_action","count":72,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":73,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.inlay_hint","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":99,"character":73}}}},
{"type":"mark","name":"lsp.did_close","count":56,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/vercel.json"}}},
{"type":"measure","name":"lsp.did_close","count":56,"duration":0.053},
{"type":"mark","name":"lsp.did_change_batched","count":38,"args":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},
{"type":"measure","name":"lsp.did_change_batched","count":38,"duration":0.101},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":95,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":37,"duration":0.05},
{"type":"mark","name":"lsp.document_symbol","count":24,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"}}},
{"type":"mark","name":"lsp.code_action","count":74,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":96,"duration":0.001},
{"type":"mark","name":"lsp.folding_range","count":12,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"}}},
{"type":"mark","name":"lsp.inlay_hint","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":111,"character":0}}}},
{"type":"mark","name":"lsp.inlay_hint","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":111,"character":0}}}},
{"type":"mark","name":"lsp.code_action","count":75,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":97,"duration":0.001},
{"type":"mark","name":"lsp.code_lens","count":15,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"}}},
{"type":"mark","name":"lsp.document_symbol","count":25,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":98,"duration":0.002},
{"type":"mark","name":"lsp.inlay_hint","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":111,"character":0}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":99,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":39,"args":"file:///workspaces/ProspectPro/vercel.json"},
{"type":"measure","name":"lsp.did_change_batched","count":39,"duration":0.067},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":100,"duration":0.001},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":38,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":101,"duration":0.002},
{"type":"mark","name":"lsp.code_action","count":76,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_watched_files","count":6,"args":{"changes":[{"uri":"file:///workspaces/ProspectPro/vercel.json","type":2},{"uri":"file:///workspaces/ProspectPro/vercel.json","type":2}]}},
{"type":"measure","name":"lsp.did_change_watched_files","count":6,"duration":0.01},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":102,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":103,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":104,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":14,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",62]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":3,"duration":0.209},
{"type":"mark","name":"tsc.op.op_load","count":178,"args":"file:///workspaces/ProspectPro/BUSINESS_TAXONOMY_IMPLEMENTED.md"},
{"type":"measure","name":"tsc.op.op_load","count":178,"duration":0.038},
{"type":"mark","name":"tsc.op.op_load","count":179,"args":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},
{"type":"measure","name":"tsc.op.op_load","count":179,"duration":0.076},
{"type":"mark","name":"tsc.op.op_load","count":180,"args":"file:///workspaces/ProspectPro/FIXES_COMPLETE.md"},
{"type":"measure","name":"tsc.op.op_load","count":180,"duration":0.053},
{"type":"mark","name":"tsc.op.op_load","count":181,"args":"file:///workspaces/ProspectPro/FORM_STRUCTURE_FIX.md"},
{"type":"measure","name":"tsc.op.op_load","count":181,"duration":0.048},
{"type":"mark","name":"tsc.op.op_load","count":182,"args":"file:///workspaces/ProspectPro/mcp-servers/PRODUCTION_MCP_INITIALIZED.md"},
{"type":"measure","name":"tsc.op.op_load","count":182,"duration":0.031},
{"type":"mark","name":"tsc.op.op_load","count":183,"args":"file:///workspaces/ProspectPro/mcp-servers/package.json"},
{"type":"measure","name":"tsc.op.op_load","count":183,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":110,"args":{"base":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.58.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":110,"duration":0.451},
{"type":"mark","name":"tsc.op.op_resolve","count":111,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":111,"duration":1.859},
{"type":"mark","name":"tsc.op.op_resolve","count":112,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":112,"duration":0.29},
{"type":"mark","name":"tsc.op.op_resolve","count":113,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":113,"duration":0.872},
{"type":"mark","name":"tsc.op.op_resolve","count":114,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":114,"duration":0.013},
{"type":"mark","name":"tsc.op.op_resolve","count":115,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":115,"duration":4.138},
{"type":"mark","name":"tsc.op.op_resolve","count":116,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":116,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":117,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":117,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":118,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":118,"duration":1.61},
{"type":"mark","name":"tsc.op.op_resolve","count":119,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":119,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":120,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":120,"duration":0.412},
{"type":"mark","name":"tsc.op.op_resolve","count":121,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":121,"duration":0.019},
{"type":"mark","name":"tsc.op.op_resolve","count":122,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":122,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":123,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":123,"duration":1.356},
{"type":"mark","name":"tsc.op.op_resolve","count":124,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":124,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":125,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":125,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":126,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":126,"duration":2.294},
{"type":"mark","name":"tsc.op.op_resolve","count":127,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":127,"duration":0.994},
{"type":"mark","name":"tsc.op.op_resolve","count":128,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":128,"duration":0.414},
{"type":"mark","name":"tsc.op.op_resolve","count":129,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":129,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":130,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":130,"duration":1.172},
{"type":"mark","name":"tsc.op.op_resolve","count":131,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":131,"duration":1.027},
{"type":"mark","name":"tsc.op.op_resolve","count":132,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":132,"duration":1.197},
{"type":"mark","name":"tsc.op.op_resolve","count":133,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":133,"duration":0.221},
{"type":"mark","name":"tsc.op.op_resolve","count":134,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":134,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":135,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":135,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":136,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":136,"duration":0.199},
{"type":"mark","name":"tsc.op.op_resolve","count":137,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":137,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":138,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":138,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":139,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":139,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":140,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":140,"duration":3.798},
{"type":"mark","name":"tsc.op.op_resolve","count":141,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":141,"duration":0.252},
{"type":"mark","name":"tsc.op.op_resolve","count":142,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":142,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":143,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":143,"duration":0.663},
{"type":"mark","name":"tsc.op.op_resolve","count":144,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":144,"duration":0.198},
{"type":"mark","name":"tsc.op.op_resolve","count":145,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":145,"duration":0.369},
{"type":"mark","name":"tsc.op.op_resolve","count":146,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":146,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":147,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":147,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":148,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":148,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":149,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":149,"duration":0.018},
{"type":"mark","name":"tsc.op.op_resolve","count":150,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":150,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":151,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":151,"duration":0.211},
{"type":"mark","name":"tsc.op.op_resolve","count":152,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":152,"duration":2.788},
{"type":"mark","name":"tsc.op.op_resolve","count":153,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":153,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":154,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":154,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":155,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":155,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":156,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":156,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":157,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enhanced-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":157,"duration":0.014},
{"type":"mark","name":"tsc.op.op_load","count":184,"args":"file:///workspaces/ProspectPro/vercel.json"},
{"type":"measure","name":"tsc.op.op_load","count":184,"duration":0.015},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":111,"duration":0.005},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":112,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":113,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":114,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":115,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":116,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":117,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":118,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":119,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":120,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":121,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":122,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":123,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":124,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":125,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":126,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":127,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":128,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":129,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":130,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":131,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":132,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":133,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":134,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":135,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":136,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":137,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":138,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":139,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":140,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":141,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":142,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":143,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":144,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":145,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":146,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":147,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":148,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":149,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":150,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":151,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":152,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":153,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":154,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":155,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":156,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":157,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":158,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":159,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":160,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":161,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":162,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":163,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":164,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":165,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":166,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":167,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":168,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":169,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":170,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":171,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":172,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":173,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":174,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":175,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":176,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":177,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":178,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":179,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":180,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":181,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":182,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":183,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":184,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":185,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":186,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":187,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":188,"duration":0.002},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":189,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":190,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":191,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":192,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":193,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":194,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":195,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":196,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":197,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":198,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":199,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":200,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":201,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":202,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":203,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":204,"duration":0.0},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":205,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":206,"duration":0.003},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":207,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":208,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":209,"duration":0.001},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":210,"duration":0.007},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":211,"duration":0.005},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":212,"duration":0.008},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":213,"duration":0.005},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":214,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":215,"duration":0.004},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":216,"duration":0.005},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":217,"duration":0.007},
{"type":"mark","name":"tsc.op.op_is_node_file"},
{"type":"measure","name":"tsc.op.op_is_node_file","count":218,"duration":0.005},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":14,"duration":171.907},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":14,"duration":179.414},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":12,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":12,"duration":0.136},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":12,"duration":0.208},
{"type":"measure","name":"lsp.diagnostic","count":105,"duration":186.283},
{"type":"mark","name":"lsp.did_change_batched","count":40,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":40,"duration":2.624},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":59,"duration":0.058},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":15,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",63]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":12,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":185,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":185,"duration":0.046},
{"type":"mark","name":"tsc.op.op_resolve","count":158,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":158,"duration":0.03},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":15,"duration":96.724},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":15,"duration":99.389},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":13,"args":"GetAmbientModules"},
{"type":"mark","name":"lsp.code_action","count":77,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":13,"duration":161.129},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":13,"duration":162.495},
{"type":"measure","name":"lsp.diagnostic","count":106,"duration":262.075},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":107,"duration":0.022},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":39,"duration":0.057},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":108,"duration":0.021},
{"type":"mark","name":"lsp.code_action","count":78,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":109,"duration":0.018},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":110,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":111,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":41,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":60,"duration":0.062},
{"type":"measure","name":"lsp.did_change_batched","count":41,"duration":2.353},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":16,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",64]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":13,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":186,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":186,"duration":0.049},
{"type":"mark","name":"tsc.op.op_resolve","count":159,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":159,"duration":0.072},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":16,"duration":129.877},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":16,"duration":130.088},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":14,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":14,"duration":2.512},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":14,"duration":2.582},
{"type":"measure","name":"lsp.diagnostic","count":112,"duration":132.873},
{"type":"mark","name":"lsp.code_action","count":79,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":40,"duration":0.064},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":113,"duration":0.018},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":114,"duration":0.024},
{"type":"mark","name":"lsp.code_action","count":80,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":115,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":116,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":117,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":42,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":42,"duration":5.255},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.testing_update","count":61,"duration":3.841},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":17,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",65]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":14,"duration":0.023},
{"type":"mark","name":"tsc.op.op_load","count":187,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":187,"duration":0.054},
{"type":"mark","name":"tsc.op.op_resolve","count":160,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":160,"duration":0.044},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":17,"duration":119.417},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":17,"duration":119.71},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":15,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":15,"duration":0.152},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":15,"duration":0.201},
{"type":"measure","name":"lsp.diagnostic","count":118,"duration":125.808},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":119,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":120,"duration":0.023},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":121,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":122,"duration":0.019},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":123,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":43,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":43,"duration":10.31},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":18,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",66]}},
{"type":"measure","name":"lsp.testing_update","count":62,"duration":4.526},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":15,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":188,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":188,"duration":5.389},
{"type":"mark","name":"tsc.op.op_resolve","count":161,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":161,"duration":0.043},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":18,"duration":83.512},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":18,"duration":87.973},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":16,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":16,"duration":64.475},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":16,"duration":64.569},
{"type":"measure","name":"lsp.diagnostic","count":124,"duration":152.743},
{"type":"mark","name":"lsp.code_action","count":81,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":41,"duration":0.075},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":125,"duration":0.008},
{"type":"mark","name":"lsp.code_action","count":82,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":126,"duration":0.013},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":127,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":128,"duration":0.019},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":129,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":44,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":44,"duration":7.873},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"measure","name":"lsp.testing_update","count":63,"duration":0.253},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":19,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",67]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":16,"duration":0.017},
{"type":"mark","name":"tsc.op.op_load","count":189,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":189,"duration":0.047},
{"type":"mark","name":"tsc.op.op_resolve","count":162,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":162,"duration":0.038},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":19,"duration":73.143},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":19,"duration":73.43},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":17,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":17,"duration":0.143},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":17,"duration":0.205},
{"type":"measure","name":"lsp.diagnostic","count":130,"duration":73.808},
{"type":"mark","name":"lsp.code_action","count":83,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":131,"duration":0.02},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":42,"duration":0.053},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":132,"duration":0.02},
{"type":"mark","name":"lsp.code_action","count":84,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":133,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":134,"duration":0.018},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":135,"duration":0.001},
{"type":"mark","name":"lsp.did_open","count":67,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/UI_CSV_FIXES_COMPLETE.md","languageId":"markdown","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":67,"duration":1.254},
{"type":"mark","name":"lsp.did_change_batched","count":45,"args":"file:///workspaces/ProspectPro/UI_CSV_FIXES_COMPLETE.md"},
{"type":"measure","name":"lsp.did_change_batched","count":45,"duration":1.305},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":136,"duration":0.014},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":137,"duration":0.014},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":43,"duration":0.022},
{"type":"mark","name":"lsp.code_action","count":85,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":138,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":86,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":139,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":140,"duration":0.002},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":141,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":142,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":143,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":87,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":88,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CI_CD_ALIGNMENT_COMPLETE.md"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":46,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":64,"duration":0.168},
{"type":"measure","name":"lsp.did_change_batched","count":46,"duration":5.722},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":20,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",68]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":17,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":190,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":190,"duration":0.052},
{"type":"mark","name":"tsc.op.op_resolve","count":163,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":163,"duration":0.05},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":20,"duration":80.04},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":20,"duration":80.311},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":18,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":18,"duration":0.138},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":18,"duration":0.212},
{"type":"measure","name":"lsp.diagnostic","count":144,"duration":82.986},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":145,"duration":0.024},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":44,"duration":0.056},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":146,"duration":0.023},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":147,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":148,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":149,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":150,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":151,"duration":0.018},
{"type":"mark","name":"lsp.did_change_batched","count":47,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":47,"duration":16.512},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.testing_update","count":65,"duration":0.09},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":21,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",69]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":18,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":191,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":191,"duration":0.051},
{"type":"mark","name":"tsc.op.op_resolve","count":164,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":164,"duration":0.053},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":21,"duration":112.906},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":21,"duration":114.65},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":19,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":19,"duration":59.286},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":19,"duration":59.4},
{"type":"measure","name":"lsp.diagnostic","count":152,"duration":174.301},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":45,"duration":0.062},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":153,"duration":0.019},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":154,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":155,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":156,"duration":0.022},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":157,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":158,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":159,"duration":0.024},
{"type":"mark","name":"lsp.did_open","count":68,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/CONTACT_INFO_VERIFICATION_REPORT.md","languageId":"markdown","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":68,"duration":0.038},
{"type":"mark","name":"lsp.did_change_batched","count":48,"args":"file:///workspaces/ProspectPro/CONTACT_INFO_VERIFICATION_REPORT.md"},
{"type":"measure","name":"lsp.did_change_batched","count":48,"duration":9.016},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":160,"duration":0.015},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":161,"duration":0.012},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":46,"duration":0.023},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":162,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":163,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":164,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":165,"duration":0.002},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":166,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":167,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":168,"duration":0.002},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":169,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":49,"args":"file:///workspaces/ProspectPro/UI_CSV_FIXES_COMPLETE.md"},
{"type":"measure","name":"lsp.did_change_batched","count":49,"duration":0.069},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":170,"duration":0.001},
{"type":"mark","name":"lsp.did_change_batched","count":50,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":66,"duration":0.06},
{"type":"measure","name":"lsp.did_change_batched","count":50,"duration":6.451},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":22,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",70]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":19,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":192,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":192,"duration":0.053},
{"type":"mark","name":"tsc.op.op_resolve","count":165,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":165,"duration":0.054},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":47,"duration":0.021},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":22,"duration":316.317},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":22,"duration":325.974},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":20,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":20,"duration":0.149},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":20,"duration":2.14},
{"type":"measure","name":"lsp.diagnostic","count":171,"duration":332.402},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":172,"duration":0.025},
{"type":"mark","name":"lsp.did_change_batched","count":51,"args":"file:///workspaces/ProspectPro/CONTACT_INFO_VERIFICATION_REPORT.md"},
{"type":"measure","name":"lsp.did_change_batched","count":51,"duration":0.091},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":173,"duration":0.013},
{"type":"mark","name":"lsp.did_change_batched","count":52,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":67,"duration":0.067},
{"type":"measure","name":"lsp.did_change_batched","count":52,"duration":20.286},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":23,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",71]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":20,"duration":0.021},
{"type":"mark","name":"tsc.op.op_load","count":193,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":193,"duration":4.092},
{"type":"mark","name":"tsc.op.op_resolve","count":166,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":166,"duration":0.045},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":23,"duration":131.228},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":23,"duration":133.043},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":21,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":21,"duration":0.17},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":21,"duration":3.495},
{"type":"measure","name":"lsp.diagnostic","count":174,"duration":140.649},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":48,"duration":0.023},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":175,"duration":0.023},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":49,"duration":0.061},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":176,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":177,"duration":0.019},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":178,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":179,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":180,"duration":0.023},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":181,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":182,"duration":0.022},
{"type":"mark","name":"lsp.did_open","count":69,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/core/core-business-discovery-engine.js","languageId":"javascript","version":1,"text":"/**\n * Enhanced Discovery Engine v2.0\n * Core discovery system with iterative quality-focused lead generation\n *\n * Key Features:\n * - Iterative search until target qualified leads found\n * - Complete contact information requirements (name, address, phone, website, email)\n * - Multiple search query strategies\n * - Duplicate prevention and quality filtering\n * - Budget and cost optimization\n * - Real-time feedback and progress tracking\n *\n * ProspectPro v2.0 - Zero Fake Data Policy\n */\n\nconst GooglePlacesClient = require(\"../api-clients/api-google-places-client\");\nconst FoursquareClient = require(\"../api-clients/api-foursquare-places-client\");\nconst EnhancedLeadDiscovery = require(\"./core-lead-discovery-engine\");\nconst CampaignCSVExporter = require(\"./export-campaign-csv-system\");\nconst logger = require(\"../utils/logger\");\n\nclass EnhancedDiscoveryEngine {\n  constructor(apiKeys = {}) {\n    this.leadDiscovery = new EnhancedLeadDiscovery(apiKeys);\n    this.googleClient = new GooglePlacesClient(apiKeys.googlePlaces);\n    this.foursquareClient = new FoursquareClient(apiKeys.foursquare);\n    this.csvExporter = new CampaignCSVExporter();\n    this.logger = logger;\n    this.sessionStats = {\n      totalQueries: 0,\n      businessesProcessed: 0,\n      qualifiedLeads: 0,\n      totalCost: 0,\n      averageConfidence: 0,\n      successRate: 0,\n    };\n\n    // Discovery stats\n    this.totalProcessed = 0;\n    this.totalCost = 0;\n    this.startTime = null;\n\n    // Multi-source discovery tracking\n    this.sourceStats = {\n      foursquare: { searches: 0, businesses: 0, cost: 0 },\n      google: { searches: 0, businesses: 0, cost: 0 },\n    };\n\n    // CACHE RESET: Clear all cached data for fresh discoveries\n    this.discoveryCache = new Map(); // Fresh cache per session\n    this.lastCacheReset = Date.now();\n\n    console.log(\n      \"🔄 Discovery caches cleared - ensuring fresh business discoveries\"\n    );\n  }\n\n  /**\n   * Core discovery method - finds qualified leads until target met\n   * @param {Object} config - Complete configuration object\n   * @returns {Promise<Object>} Discovery results with qualified leads\n   */\n  async discoverQualifiedLeads(config) {\n    const {\n      businessType,\n      location,\n      targetCount = 3,\n      budgetLimit = 10.0,\n      requireCompleteContacts = true,\n      minConfidenceScore = 70,\n      additionalQueries = [],\n    } = config;\n\n    console.log(`🚀 Enhanced Discovery Engine v2.0 - Multi-Source Starting`);\n    console.log(\n      `🎯 Target: ${targetCount} qualified leads with complete contact info`\n    );\n    console.log(\n      `� Budget: $${budgetLimit} | Confidence: ${minConfidenceScore}%`\n    );\n    console.log(\"=\".repeat(70));\n\n    this.startTime = Date.now();\n    let allQualifiedLeads = [];\n    let currentQueryIndex = 0;\n    let attemptCount = 0;\n    const maxAttempts = 20;\n\n    // Generate comprehensive search queries\n    const searchQueries = this.generateSearchQueries(businessType, location);\n    if (additionalQueries.length > 0) {\n      searchQueries.push(...additionalQueries);\n    }\n\n    const maxResultsPerQuery = Math.ceil(\n      (targetCount * 2.5) / searchQueries.length\n    );\n\n    console.log(\n      `📋 Multi-source strategy: ${searchQueries.length} queries, ${maxResultsPerQuery} results each`\n    );\n    console.log(\"\");\n\n    // Enhanced multi-source discovery loop\n    while (\n      allQualifiedLeads.length < targetCount &&\n      currentQueryIndex < searchQueries.length &&\n      attemptCount < maxAttempts &&\n      this.totalCost < budgetLimit\n    ) {\n      attemptCount++;\n      const currentQuery = searchQueries[currentQueryIndex];\n\n      console.log(`🔍 Multi-Source Query ${attemptCount}: \"${currentQuery}\"`);\n      console.log(\n        `   💰 Budget Used: $${this.totalCost.toFixed(3)}/$${budgetLimit}`\n      );\n\n      try {\n        // ESSENTIAL DUAL-SOURCE DISCOVERY: Both APIs required for comprehensive coverage\n        console.log(\n          `   📍 Foursquare search: \"${currentQuery}\" near ${location}`\n        );\n        const foursquareResults = await this.discoverViaFoursquare(\n          currentQuery,\n          location,\n          maxResultsPerQuery\n        );\n\n        console.log(\n          `   🔍 Google Places search: \"${currentQuery}\" near ${location}`\n        );\n        const googleResults = await this.discoverViaGooglePlaces(\n          currentQuery,\n          location,\n          maxResultsPerQuery\n        );\n\n        // CRITICAL: Ensure both APIs contribute to discovery diversity\n        if (foursquareResults.length === 0 && googleResults.length === 0) {\n          console.log(\n            `   ⚠️ No results from either API for query: ${currentQuery}`\n          );\n          currentQueryIndex++;\n          attemptCount++;\n          continue;\n        }\n\n        // Phase 3: Merge and deduplicate results ensuring maximum diversity\n        const allDiscoveredBusinesses = this.mergeAndDeduplicateResults(\n          foursquareResults,\n          googleResults\n        );\n\n        console.log(\n          `   📊 Discovery Results: ${foursquareResults.length} Foursquare + ${googleResults.length} Google = ${allDiscoveredBusinesses.length} unique`\n        );\n\n        if (allDiscoveredBusinesses.length === 0) {\n          console.log(\n            `   ⚠️ No unique businesses after deduplication for: ${currentQuery}`\n          );\n          currentQueryIndex++;\n          attemptCount++;\n          continue;\n        }\n\n        // Phase 4: Enhanced processing with pre-validated data\n        const remainingBudget = budgetLimit - this.totalCost;\n        const discoveryOptions = {\n          budgetLimit: Math.min(2.0, remainingBudget),\n          qualityThreshold: minConfidenceScore,\n          maxResults: allDiscoveredBusinesses.length,\n          prioritizeLocalBusinesses: true,\n          enablePropertyIntelligence: true,\n          enableRegistryValidation: true,\n          enableRealTimeFeedback: true,\n          minimumPreValidationScore: minConfidenceScore - 10,\n          // Pass cached data to avoid redundant API calls\n          preEnrichedData: true,\n        };\n\n        const enhancedResults =\n          await this.leadDiscovery.discoverAndValidateLeads(\n            allDiscoveredBusinesses,\n            discoveryOptions\n          );\n\n        this.totalProcessed += enhancedResults.totalProcessed;\n        this.totalCost += enhancedResults.totalCost;\n        this.sessionStats.queriesExecuted++;\n        this.sessionStats.businessesProcessed += enhancedResults.totalProcessed;\n\n        console.log(\n          `   📈 Pipeline Results: ${enhancedResults.leads.length} qualified from ${enhancedResults.totalProcessed}`\n        );\n        console.log(\n          `   💰 Query Cost: $${enhancedResults.totalCost.toFixed(3)}`\n        );\n\n        // Apply strict quality filtering\n        const strictQualifiedLeads = this.applyQualityFilter(\n          enhancedResults.leads,\n          {\n            requireEmail: requireCompleteContacts,\n            requirePhone: requireCompleteContacts,\n            requireWebsite: requireCompleteContacts,\n            // Owner must be qualified (owner verified email OR owner name + verified company email)\n            requireOwnerQualified: requireCompleteContacts,\n            minimumConfidence: minConfidenceScore,\n            industry: businessType,\n          }\n        );\n\n        console.log(\n          `   🎯 Strict Quality Filter: ${strictQualifiedLeads.length} leads with complete info`\n        );\n\n        // Add new qualified leads (avoid duplicates)\n        const newLeads = this.removeDuplicates(\n          strictQualifiedLeads,\n          allQualifiedLeads\n        );\n        allQualifiedLeads = [...allQualifiedLeads, ...newLeads];\n\n        console.log(\n          `   📊 Total Qualified: ${allQualifiedLeads.length}/${targetCount}`\n        );\n        console.log(\n          `   💡 Cost Savings: $${this.calculateCostSavings().toFixed(\n            3\n          )} from multi-source approach`\n        );\n\n        if (allQualifiedLeads.length >= targetCount) {\n          console.log(\n            `   🎉 Target Achieved! Found ${allQualifiedLeads.length} qualified leads`\n          );\n          break;\n        }\n\n        // Strategy for next iteration\n        if (newLeads.length === 0) {\n          console.log(`   ⏭️ No new qualified leads, moving to next query`);\n          currentQueryIndex++;\n        } else if (newLeads.length < 2) {\n          console.log(\n            `   📈 Low yield (${newLeads.length}), trying next query variation`\n          );\n          currentQueryIndex++;\n        }\n        // If we got good results (2+), try the same query type again with different parameters\n      } catch (error) {\n        console.error(`   ❌ Multi-source query failed: ${error.message}`);\n        currentQueryIndex++;\n      }\n\n      console.log(\"\"); // Spacing between attempts\n    }\n\n    return this.generateDiscoveryResults(\n      allQualifiedLeads,\n      targetCount,\n      null, // campaignId\n      businessType,\n      location\n    );\n  }\n\n  /**\n   * Apply strict quality filtering for complete contact information\n   */\n  applyQualityFilter(leads, requirements) {\n    const {\n      requireEmail = true,\n      requirePhone = true,\n      requireWebsite = true,\n      requireOwnerQualified = false,\n      minimumConfidence = 70,\n      industry = null,\n    } = requirements;\n\n    return leads.filter((lead) => {\n      const hasName = !!(lead.name || lead.businessName);\n      const hasAddress = !!(lead.address || lead.formatted_address);\n      const hasPhone = !!(lead.phone || lead.companyPhone);\n      const hasWebsite = !!lead.website;\n      const websiteAccessible = lead.websiteValidation?.accessible === true;\n      const hasEmail = !!(lead.email || lead.companyEmail);\n      const hasOwnerEmail = !!lead.ownerEmail;\n      const hasOwnerName = !!lead.ownerName;\n\n      const companyEmailConfidence = parseInt(\n        lead.companyEmailConfidence || lead.emailConfidence || 0\n      );\n      const ownerEmailConfidence = parseInt(lead.ownerEmailConfidence || 0);\n\n      const companyEmailSource = (\n        lead.companyEmailSource ||\n        lead.emailSource ||\n        \"\"\n      ).toLowerCase();\n      const ownerEmailSource = (lead.ownerEmailSource || \"\").toLowerCase();\n      const isPatternSource = (src) => /pattern_generation|pattern/.test(src);\n      const looksVerifiedSource = (src) =>\n        /(hunter|neverbounce|apollo|zoominfo|scrapingdog|mx|dns|verify|validated)/.test(\n          src\n        );\n\n      const ownerEmailVerified =\n        ownerEmailConfidence >= 70 && !isPatternSource(ownerEmailSource);\n      const companyEmailVerified =\n        companyEmailConfidence >= 70 && !isPatternSource(companyEmailSource);\n\n      // If NeverBounce ran and found a deliverable email, accept as verified regardless of source strings\n      const hasDeliverableEmail =\n        !!lead.emailValidation?.bestEmail?.isDeliverable;\n      const emailVerifiedEvidence =\n        hasDeliverableEmail ||\n        looksVerifiedSource(companyEmailSource) ||\n        looksVerifiedSource(ownerEmailSource);\n\n      // Owner qualified if we have verified owner email OR owner name + verified company email\n      const ownerQualified =\n        (hasOwnerEmail && ownerEmailVerified) ||\n        (hasOwnerName &&\n          (lead.companyEmail || lead.email) &&\n          (companyEmailVerified || emailVerifiedEvidence)) ||\n        // Fallback: if owner email exists and is not pattern-generated with decent confidence\n        (hasOwnerEmail &&\n          !isPatternSource(ownerEmailSource) &&\n          ownerEmailConfidence >= 60);\n\n      const hasVerifiedEmail =\n        emailVerifiedEvidence || companyEmailVerified || ownerEmailVerified;\n\n      const hasConfidence =\n        (lead.finalConfidenceScore || lead.confidenceScore) >=\n        minimumConfidence;\n\n      // Log email qualification details for debugging\n      if (requireEmail && this.logger) {\n        this.logger.emailFilterLog(\n          lead,\n          hasEmail,\n          hasVerifiedEmail,\n          [companyEmailSource, ownerEmailSource].filter((s) => s),\n          Math.max(companyEmailConfidence, ownerEmailConfidence)\n        );\n      }\n\n      // Industry/category enforcement (e.g., wellness)\n      let passesIndustry = true;\n      if (industry) {\n        const category = (\n          lead.category ||\n          lead.types?.join(\" \") ||\n          \"\"\n        ).toLowerCase();\n        const name = (lead.name || lead.businessName || \"\").toLowerCase();\n        if (industry.toLowerCase() === \"wellness\") {\n          const wellnessTerms = [\n            \"wellness\",\n            \"spa\",\n            \"massage\",\n            \"acupuncture\",\n            \"clinic\",\n            \"chiropractic\",\n            \"nutrition\",\n            \"fitness\",\n            \"yoga\",\n            \"pilates\",\n            \"med spa\",\n            \"aesthetics\",\n            \"integrative\",\n            \"mental health\",\n            \"therapy\",\n          ];\n          const text = `${category} ${name}`;\n          passesIndustry = wellnessTerms.some((t) => text.includes(t));\n        }\n      }\n\n      const meetsCriteria =\n        hasName &&\n        hasAddress &&\n        (!requirePhone || hasPhone) &&\n        (!requireWebsite || (hasWebsite && websiteAccessible)) &&\n        (!requireEmail || hasEmail) &&\n        (!requireOwnerQualified || ownerQualified) &&\n        hasConfidence &&\n        passesIndustry;\n\n      return meetsCriteria;\n    });\n  }\n\n  /**\n   * Remove duplicate leads based on business name and phone\n   */\n  removeDuplicates(newLeads, existingLeads) {\n    return newLeads.filter((newLead) => {\n      const newName = (\n        newLead.name ||\n        newLead.businessName ||\n        \"\"\n      ).toLowerCase();\n      const newPhone = (newLead.phone || newLead.companyPhone || \"\").replace(\n        /\\D/g,\n        \"\"\n      );\n\n      return !existingLeads.some((existing) => {\n        const existingName = (\n          existing.name ||\n          existing.businessName ||\n          \"\"\n        ).toLowerCase();\n        const existingPhone = (\n          existing.phone ||\n          existing.companyPhone ||\n          \"\"\n        ).replace(/\\D/g, \"\");\n\n        return (\n          newName === existingName ||\n          (newPhone && existingPhone && newPhone === existingPhone)\n        );\n      });\n    });\n  }\n\n  /**\n   * Generate comprehensive search queries for industry and location\n   */\n  generateSearchQueries(industry, location) {\n    const baseQueries = [\n      `${industry} in ${location}`,\n      `${industry} ${location}`,\n      `${industry} businesses ${location}`,\n      `${industry} services ${location}`,\n      `${industry} companies ${location}`,\n    ];\n\n    // Add industry-specific variations\n    const industryVariations = this.getIndustryVariations(industry);\n    industryVariations.forEach((variation) => {\n      baseQueries.push(`${variation} in ${location}`);\n      baseQueries.push(`${variation} near ${location}`);\n    });\n\n    // Add location-specific variations for geographic diversity\n    const locationVariations = this.getLocationVariations(location);\n    locationVariations.forEach((locVar) => {\n      baseQueries.push(`${industry} in ${locVar}`);\n      baseQueries.push(`${industry} near ${locVar}`);\n      // Add industry variations to location variations\n      industryVariations.slice(0, 2).forEach((indVar) => {\n        baseQueries.push(`${indVar} in ${locVar}`);\n      });\n    });\n\n    // ENHANCED: Add neighborhood and area-specific searches\n    const neighborhoods = this.getNeighborhoodVariations(location);\n    neighborhoods.forEach((neighborhood) => {\n      baseQueries.push(`${industry} ${neighborhood}`);\n      baseQueries.push(`${industry} near ${neighborhood}`);\n    });\n\n    console.log(\n      `📋 Generated ${baseQueries.length} diverse search queries for maximum coverage`\n    );\n    return baseQueries;\n  }\n  /**\n   * Get industry-specific variations\n   */\n  getIndustryVariations(industry) {\n    const variationMap = {\n      wellness: [\n        \"wellness center\",\n        \"health center\",\n        \"holistic health\",\n        \"wellness clinic\",\n      ],\n      restaurant: [\"dining\", \"food\", \"cuisine\", \"eatery\"],\n      legal: [\"law firm\", \"attorney\", \"legal services\", \"lawyer\"],\n      retail: [\"store\", \"shop\", \"boutique\", \"retailer\"],\n    };\n\n    return variationMap[industry.toLowerCase()] || [];\n  }\n\n  /**\n   * Get location-specific variations\n   */\n  getLocationVariations(location) {\n    const variations = [];\n\n    if (location.includes(\",\")) {\n      const parts = location.split(\",\");\n      const city = parts[0].trim();\n      const state = parts[1]?.trim();\n\n      variations.push(location, city);\n      if (state) {\n        variations.push(`${city}, ${state}`);\n        variations.push(`${city} ${state}`);\n        variations.push(state);\n      }\n\n      // ENHANCED: Add comprehensive metro area variations for major cities\n      const metroAreas = {\n        \"San Diego\": [\n          \"San Diego County\",\n          \"North County San Diego\",\n          \"East County San Diego\",\n          \"South Bay San Diego\",\n        ],\n        \"Los Angeles\": [\n          \"LA\",\n          \"Greater Los Angeles\",\n          \"LA Metro\",\n          \"Orange County\",\n          \"Inland Empire\",\n        ],\n        \"San Francisco\": [\n          \"Bay Area\",\n          \"SF\",\n          \"Silicon Valley\",\n          \"Peninsula\",\n          \"East Bay\",\n        ],\n        \"New York\": [\n          \"NYC\",\n          \"Manhattan\",\n          \"Brooklyn\",\n          \"Queens\",\n          \"Bronx\",\n          \"Staten Island\",\n          \"Tri-State Area\",\n        ],\n        Chicago: [\n          \"Chicagoland\",\n          \"Cook County\",\n          \"Greater Chicago\",\n          \"North Shore\",\n        ],\n        Houston: [\n          \"Greater Houston\",\n          \"Harris County\",\n          \"The Woodlands\",\n          \"Sugar Land\",\n        ],\n        Phoenix: [\"Phoenix Metro\", \"Maricopa County\", \"Scottsdale\", \"Tempe\"],\n        Philadelphia: [\n          \"Philly\",\n          \"Delaware Valley\",\n          \"Main Line\",\n          \"South Jersey\",\n        ],\n        Atlanta: [\n          \"Metro Atlanta\",\n          \"Fulton County\",\n          \"Gwinnett County\",\n          \"North Atlanta\",\n        ],\n        Miami: [\n          \"Miami-Dade\",\n          \"South Florida\",\n          \"Broward County\",\n          \"Palm Beach County\",\n        ],\n      };\n\n      if (metroAreas[city]) {\n        variations.push(...metroAreas[city]);\n      }\n    } else {\n      variations.push(location);\n    }\n\n    return variations;\n  }\n\n  /**\n   * Get neighborhood and area variations for deeper geographic coverage\n   */\n  getNeighborhoodVariations(location) {\n    const neighborhoods = [];\n    const cityLower = location.toLowerCase();\n\n    // San Diego neighborhoods and suburbs\n    if (cityLower.includes(\"san diego\")) {\n      neighborhoods.push(\n        \"Downtown San Diego\",\n        \"La Jolla\",\n        \"Pacific Beach\",\n        \"Mission Valley\",\n        \"Hillcrest\",\n        \"North Park\",\n        \"South Park\",\n        \"Chula Vista\",\n        \"Escondido\",\n        \"Carlsbad\",\n        \"Encinitas\",\n        \"Del Mar\",\n        \"Poway\",\n        \"Santee\",\n        \"El Cajon\"\n      );\n    }\n\n    // Los Angeles neighborhoods and suburbs\n    if (cityLower.includes(\"los angeles\") || cityLower.includes(\" la \")) {\n      neighborhoods.push(\n        \"Hollywood\",\n        \"Beverly Hills\",\n        \"Santa Monica\",\n        \"Venice\",\n        \"Pasadena\",\n        \"Glendale\",\n        \"Burbank\",\n        \"Long Beach\",\n        \"Torrance\",\n        \"El Segundo\",\n        \"Culver City\"\n      );\n    }\n\n    // New York neighborhoods and boroughs\n    if (cityLower.includes(\"new york\") || cityLower.includes(\"nyc\")) {\n      neighborhoods.push(\n        \"Midtown Manhattan\",\n        \"Lower East Side\",\n        \"Upper West Side\",\n        \"SoHo\",\n        \"Brooklyn Heights\",\n        \"Williamsburg\",\n        \"Astoria\",\n        \"Flushing\",\n        \"Battery Park\"\n      );\n    }\n\n    return neighborhoods;\n  }\n\n  /**\n   * Get appropriate Google Places search type for industry\n   */\n  getSearchType(businessType) {\n    const typeMapping = {\n      wellness: \"health\",\n      healthcare: \"health\",\n      restaurant: \"restaurant\",\n      legal: \"establishment\",\n      retail: \"store\",\n      default: \"establishment\",\n    };\n\n    return typeMapping[businessType.toLowerCase()] || typeMapping.default;\n  }\n\n  /**\n   * Format quality requirements for display\n   */\n  formatRequirements(requirements) {\n    const parts = [];\n    if (requirements.requireEmail) parts.push(\"Email\");\n    if (requirements.requirePhone) parts.push(\"Phone\");\n    if (requirements.requireWebsite) parts.push(\"Website\");\n    return parts.join(\", \") || \"Basic contact info\";\n  }\n\n  /**\n   * Generate comprehensive discovery results\n   */\n  async generateDiscoveryResults(\n    qualifiedLeads,\n    targetLeads,\n    campaignId,\n    industry,\n    location\n  ) {\n    const processingTime = Date.now() - this.startTime;\n\n    // Cap exported leads at the target (max 5 by requirement)\n    const exportCap = Math.min(targetLeads, 5);\n    const cappedLeads = qualifiedLeads.slice(0, exportCap);\n\n    // Update session stats\n    this.sessionStats.qualifiedLeadsFound = cappedLeads.length;\n    this.sessionStats.averageConfidence =\n      cappedLeads.length > 0\n        ? cappedLeads.reduce(\n            (sum, lead) =>\n              sum + (lead.finalConfidenceScore || lead.confidenceScore),\n            0\n          ) / cappedLeads.length\n        : 0;\n    this.sessionStats.costPerLead =\n      cappedLeads.length > 0 ? this.totalCost / cappedLeads.length : 0;\n    this.sessionStats.successRate =\n      this.totalProcessed > 0\n        ? (cappedLeads.length / this.totalProcessed) * 100\n        : 0;\n\n    // Quality metrics\n    const qualityMetrics = {\n      allHaveEmail: cappedLeads.every(\n        (lead) => !!(lead.email || lead.companyEmail)\n      ),\n      allHavePhone: cappedLeads.every(\n        (lead) => !!(lead.phone || lead.companyPhone)\n      ),\n      allHaveWebsite: cappedLeads.every((lead) => !!lead.website),\n      avgConfidence: this.sessionStats.averageConfidence,\n      targetMet: qualifiedLeads.length >= targetLeads,\n    };\n\n    // Display results\n    console.log(\"=\".repeat(70));\n    console.log(\"📊 ENHANCED DISCOVERY RESULTS\");\n    console.log(\"=\".repeat(70));\n    console.log(`🎯 Target: ${targetLeads} | Achieved: ${cappedLeads.length}`);\n    console.log(\n      `⏱️  Processing Time: ${(processingTime / 1000).toFixed(1)} seconds`\n    );\n    console.log(\n      `💰 Total Cost: $${this.totalCost.toFixed(\n        3\n      )} (${this.sessionStats.costPerLead.toFixed(3)}/lead)`\n    );\n    console.log(\n      `📈 Success Rate: ${this.sessionStats.successRate.toFixed(1)}% (${\n        cappedLeads.length\n      }/${this.totalProcessed})`\n    );\n    console.log(\"\");\n\n    // Quality assessment\n    console.log(\"🎯 QUALITY METRICS:\");\n    console.log(\n      `   📧 All have email: ${qualityMetrics.allHaveEmail ? \"✅\" : \"❌\"}`\n    );\n    console.log(\n      `   📞 All have phone: ${qualityMetrics.allHavePhone ? \"✅\" : \"❌\"}`\n    );\n    console.log(\n      `   🌐 All have website: ${qualityMetrics.allHaveWebsite ? \"✅\" : \"❌\"}`\n    );\n    console.log(\n      `   📊 Average confidence: ${qualityMetrics.avgConfidence.toFixed(1)}%`\n    );\n    console.log(\"\");\n\n    // Display qualified leads\n    if (qualifiedLeads.length > 0) {\n      console.log(\"🎯 QUALIFIED LEADS (Complete Contact Info):\");\n      console.log(\"-\".repeat(70));\n\n      cappedLeads.forEach((lead, index) => {\n        const email = lead.email || lead.companyEmail || \"N/A\";\n        const phone = lead.phone || lead.companyPhone || \"N/A\";\n        const confidence = (\n          lead.finalConfidenceScore ||\n          lead.confidenceScore ||\n          0\n        ).toFixed(1);\n\n        console.log(`${index + 1}. ${lead.name || lead.businessName}`);\n        console.log(`   📧 ${email}`);\n        console.log(`   📞 ${phone}`);\n        console.log(`   🌐 ${lead.website || \"N/A\"}`);\n        console.log(`   📊 ${confidence}% confidence`);\n        console.log(\"\");\n      });\n    }\n\n    return {\n      success: cappedLeads.length > 0,\n      totalFound: qualifiedLeads.length,\n      exported: cappedLeads.length,\n      target: targetLeads,\n      targetMet: qualifiedLeads.length >= targetLeads,\n      leads: cappedLeads,\n      processingTime,\n      totalCost: this.totalCost,\n      sessionStats: this.sessionStats,\n      qualityMetrics,\n      costPerLead: this.sessionStats.costPerLead,\n    };\n  }\n\n  /**\n   * Quick discovery method for testing and validation\n   */\n  async quickDiscovery(industry, location, targetLeads = 3) {\n    const searchConfig = {\n      businessType: industry,\n      location: location,\n      targetCount: targetLeads,\n      budgetLimit: 5.0,\n      requireCompleteContacts: true,\n      minConfidenceScore: 70,\n    };\n\n    return await this.discoverQualifiedLeads(searchConfig);\n  }\n\n  /**\n   * Discover businesses via Foursquare Places API\n   * @param {string} query - Search query\n   * @param {string} location - Location string\n   * @param {number} maxResults - Maximum results to return\n   * @returns {Array} Array of normalized business objects\n   */\n  async discoverViaFoursquare(query, location, maxResults = 20) {\n    if (!this.foursquareClient) {\n      console.warn(\n        `⚠️ Foursquare Service Key not configured, returning mock response`\n      );\n      // Return empty results instead of mock data for fresh discoveries\n      return [];\n    }\n\n    try {\n      this.sourceStats.foursquare.searches++;\n\n      const results = await this.foursquareClient.searchPlaces(query, {\n        near: location,\n        limit: maxResults,\n        categories: this.mapBusinessTypeToFoursquareCategory(query),\n      });\n\n      this.sourceStats.foursquare.cost += results.apiCost || 0;\n\n      if (!results.found || !results.places.length) {\n        console.log(`   ⚠️ No Foursquare results for \"${query}\"`);\n        return [];\n      }\n\n      const normalizedBusinesses = results.places.map((place) => ({\n        // Core business info\n        name: place.name,\n        businessName: place.name,\n        address: place.formattedAddress || place.address,\n        formatted_address: place.formattedAddress,\n        city: place.city,\n        state: place.region,\n        zipCode: place.postalCode,\n        country: place.country,\n\n        // Contact info\n        phone: place.telephone,\n        website: place.website,\n\n        // Location data\n        geometry: {\n          location: {\n            lat: place.latitude,\n            lng: place.longitude,\n          },\n        },\n\n        // Foursquare-specific data\n        fsqId: place.fsqId,\n        categories: place.categories,\n        primaryCategory: place.primaryCategory,\n        businessType: place.businessType,\n\n        // Metadata\n        source: \"foursquare\",\n        foursquareData: place, // Cache for later validation\n        preValidationScore: this.calculateFoursquarePreScore(place),\n        sourceConfidenceBoost: results.confidenceBoost || 0,\n\n        // For Google Places compatibility\n        place_id: `foursquare_${place.fsqId}`,\n        types: place.categories?.map((cat) => cat.name.toLowerCase()) || [],\n        rating: null, // Foursquare doesn't provide ratings in free tier\n        user_ratings_total: null,\n      }));\n\n      this.sourceStats.foursquare.businesses += normalizedBusinesses.length;\n\n      console.log(\n        `   ✅ Foursquare found ${normalizedBusinesses.length} businesses`\n      );\n      return normalizedBusinesses;\n    } catch (error) {\n      console.warn(`   ⚠️ Foursquare search failed: ${error.message}`);\n      this.sourceStats.foursquare.searches++;\n      return [];\n    }\n  }\n\n  /**\n   * Discover businesses via Google Places API\n   * @param {string} query - Search query\n   * @param {string} location - Location string\n   * @param {number} maxResults - Maximum results to return\n   * @returns {Array} Array of business objects\n   */\n  async discoverViaGooglePlaces(query, location, maxResults = 20) {\n    if (!this.googleClient) {\n      console.log(`   ⚠️ Google Places client not configured, skipping`);\n      return [];\n    }\n\n    try {\n      console.log(`   🔍 Google Places search: \"${query}\" near ${location}`);\n\n      const searchResults = await this.googleClient.textSearch({\n        query: query,\n        location: location,\n        type: this.getSearchType(query),\n      });\n\n      this.sourceStats.google.searches++;\n      this.sourceStats.google.cost += 0.032; // Approximate Google Places cost\n\n      if (!searchResults || searchResults.length === 0) {\n        console.log(`   ⚠️ No Google Places results for \"${query}\"`);\n        return [];\n      }\n\n      // Normalize results to match Foursquare format\n      const normalizedBusinesses = searchResults\n        .slice(0, maxResults)\n        .map((place) => ({\n          ...place,\n          source: \"google\",\n          preValidationScore: this.calculatePreValidationScore(place),\n          sourceConfidenceBoost: 5, // Standard Google boost\n        }));\n\n      this.sourceStats.google.businesses += normalizedBusinesses.length;\n\n      console.log(\n        `   ✅ Google Places found ${normalizedBusinesses.length} businesses`\n      );\n      return normalizedBusinesses;\n    } catch (error) {\n      console.warn(`   ⚠️ Google Places search failed: ${error.message}`);\n      this.sourceStats.google.searches++;\n      return [];\n    }\n  }\n\n  /**\n   * Merge results from multiple sources and remove duplicates\n   * @param {Array} foursquareResults - Results from Foursquare\n   * @param {Array} googleResults - Results from Google Places\n   * @returns {Array} Merged and deduplicated results\n   */\n  mergeAndDeduplicateResults(foursquareResults, googleResults) {\n    const allResults = [...foursquareResults];\n\n    // Add Google results that don't match existing Foursquare results\n    googleResults.forEach((googleBusiness) => {\n      const isDuplicate = foursquareResults.some((foursquareBusiness) =>\n        this.businessesMatch(googleBusiness, foursquareBusiness)\n      );\n\n      if (!isDuplicate) {\n        allResults.push(googleBusiness);\n      } else {\n        // If it's a duplicate, enhance the Foursquare result with Google data\n        const matchingFoursquare = foursquareResults.find((fb) =>\n          this.businessesMatch(googleBusiness, fb)\n        );\n        if (matchingFoursquare) {\n          this.enhanceBusinessWithCrossData(matchingFoursquare, googleBusiness);\n        }\n      }\n    });\n\n    return allResults;\n  }\n\n  /**\n   * Check if two businesses are the same\n   * @param {Object} business1 - First business\n   * @param {Object} business2 - Second business\n   * @returns {boolean} True if they match\n   */\n  businessesMatch(business1, business2) {\n    const name1 = (business1.name || business1.businessName || \"\")\n      .toLowerCase()\n      .trim();\n    const name2 = (business2.name || business2.businessName || \"\")\n      .toLowerCase()\n      .trim();\n\n    // Exact name match\n    if (name1 === name2 && name1.length > 3) {\n      return true;\n    }\n\n    // Phone number match (if both have phones)\n    const phone1 = (business1.phone || \"\").replace(/\\D/g, \"\");\n    const phone2 = (business2.phone || \"\").replace(/\\D/g, \"\");\n\n    if (phone1 && phone2 && phone1 === phone2 && phone1.length >= 10) {\n      return true;\n    }\n\n    // Address similarity with name similarity\n    const addr1 = (\n      business1.address ||\n      business1.formatted_address ||\n      \"\"\n    ).toLowerCase();\n    const addr2 = (\n      business2.address ||\n      business2.formatted_address ||\n      \"\"\n    ).toLowerCase();\n\n    if (\n      addr1 &&\n      addr2 &&\n      this.addressesSimilar(addr1, addr2) &&\n      this.namesSimilar(name1, name2)\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Enhance a business with cross-platform data\n   * @param {Object} primaryBusiness - Main business to enhance\n   * @param {Object} secondaryBusiness - Secondary business data\n   */\n  enhanceBusinessWithCrossData(primaryBusiness, secondaryBusiness) {\n    // Enhance with missing contact info\n    if (!primaryBusiness.phone && secondaryBusiness.phone) {\n      primaryBusiness.phone = secondaryBusiness.phone;\n    }\n    if (!primaryBusiness.website && secondaryBusiness.website) {\n      primaryBusiness.website = secondaryBusiness.website;\n    }\n\n    // Add cross-platform validation boost\n    primaryBusiness.crossPlatformMatch = true;\n    primaryBusiness.sourceConfidenceBoost += 10;\n    primaryBusiness.preValidationScore = Math.min(\n      primaryBusiness.preValidationScore + 15,\n      100\n    );\n\n    // Store secondary data for validation\n    primaryBusiness.crossPlatformData = {\n      source: secondaryBusiness.source,\n      data: secondaryBusiness,\n    };\n  }\n\n  /**\n   * Calculate pre-validation score for Foursquare businesses\n   * @param {Object} place - Foursquare place object\n   * @returns {number} Score from 0-100\n   */\n  calculateFoursquarePreScore(place) {\n    let score = 0;\n\n    // Business name quality (25 points)\n    if (place.name) {\n      score += this.isGenericBusinessName(place.name) ? 10 : 25;\n    }\n\n    // Address completeness (20 points)\n    if (place.formattedAddress) {\n      score += place.formattedAddress.length > 20 ? 20 : 15;\n    }\n\n    // Contact information (30 points total)\n    if (place.telephone) score += 15;\n    if (place.website) score += 15;\n\n    // Category verification (15 points)\n    if (place.categories && place.categories.length > 0) {\n      score += place.categories.length > 1 ? 15 : 10;\n    }\n\n    // Location data quality (10 points)\n    if (place.latitude && place.longitude) {\n      score += 10;\n    }\n\n    return Math.min(score, 100);\n  }\n\n  /**\n   * Map business type to Foursquare category\n   * @param {string} businessType - Business type string\n   * @returns {string} Foursquare category ID\n   */\n  mapBusinessTypeToFoursquareCategory(businessType) {\n    const categoryMap = {\n      wellness: \"4bf58dd8d48988d177941735\", // Health & Medical\n      restaurant: \"4d4b7105d754a06374d81259\", // Food & Dining\n      retail: \"4d4b7105d754a06378d81259\", // Shop & Service\n      legal: \"4d4b7105d754a06379d81259\", // Professional Services\n      healthcare: \"4d4b7105d754a0637cd81259\", // Health & Medical\n      fitness: \"4bf58dd8d48988d176941735\", // Gym\n      beauty: \"4bf58dd8d48988d110941735\", // Salon\n      automotive: \"4d4b7105d754a06378d81259\", // Automotive\n    };\n\n    const type = businessType.toLowerCase();\n\n    // Check for exact matches first\n    for (const [key, categoryId] of Object.entries(categoryMap)) {\n      if (type.includes(key)) {\n        return categoryId;\n      }\n    }\n\n    // Default to professional services\n    return \"4d4b7105d754a06379d81259\";\n  }\n\n  /**\n   * Calculate cost savings from multi-source approach\n   * @returns {number} Estimated savings in dollars\n   */\n  calculateCostSavings() {\n    const foursquareCount = this.sourceStats.foursquare.businesses;\n    const googleCount = this.sourceStats.google.businesses;\n\n    // If we only used Google, estimate the cost\n    const googleOnlyCost = (foursquareCount + googleCount) * 0.032;\n    const actualCost =\n      this.sourceStats.foursquare.cost + this.sourceStats.google.cost;\n\n    return Math.max(0, googleOnlyCost - actualCost);\n  }\n\n  /**\n   * Helper method to check if names are similar\n   * @param {string} name1 - First name\n   * @param {string} name2 - Second name\n   * @returns {boolean} True if similar\n   */\n  namesSimilar(name1, name2) {\n    if (!name1 || !name2) return false;\n\n    // Remove common business suffixes for comparison\n    const cleanName1 = name1.replace(/\\s+(llc|inc|corp|ltd)\\.?$/i, \"\").trim();\n    const cleanName2 = name2.replace(/\\s+(llc|inc|corp|ltd)\\.?$/i, \"\").trim();\n\n    // Check if one name contains the other (for cases like \"ABC Corp\" vs \"ABC Corporation\")\n    return cleanName1.includes(cleanName2) || cleanName2.includes(cleanName1);\n  }\n\n  /**\n   * Helper method to check if addresses are similar\n   * @param {string} addr1 - First address\n   * @param {string} addr2 - Second address\n   * @returns {boolean} True if similar\n   */\n  addressesSimilar(addr1, addr2) {\n    if (!addr1 || !addr2) return false;\n\n    // Extract street numbers and names for comparison\n    const streetNum1 = addr1.match(/^\\d+/);\n    const streetNum2 = addr2.match(/^\\d+/);\n\n    // If street numbers match, consider similar\n    if (streetNum1 && streetNum2 && streetNum1[0] === streetNum2[0]) {\n      return true;\n    }\n\n    // Check for substantial overlap in address text\n    const words1 = addr1.split(/\\s+/);\n    const words2 = addr2.split(/\\s+/);\n    const commonWords = words1.filter(\n      (word) => word.length > 3 && words2.includes(word)\n    );\n\n    return commonWords.length >= 2;\n  }\n\n  /**\n   * Helper method to check if business name is generic\n   * @param {string} name - Business name\n   * @returns {boolean} True if generic\n   */\n  isGenericBusinessName(name) {\n    const genericPatterns = [\n      /business\\s+(llc|inc|corp)/i,\n      /company\\s+(llc|inc|corp)/i,\n      /^(business|company)$/i,\n      /test\\s*business/i,\n      /^(store|shop|office)$/i,\n    ];\n    return genericPatterns.some((pattern) => pattern.test(name));\n  }\n\n  /**\n   * Calculate pre-validation score to filter businesses early\n   * @param {Object} business - Business data object\n   * @returns {number} Pre-validation score (0-100)\n   */\n  calculatePreValidationScore(business) {\n    let score = 0;\n\n    // Business name quality (25 points max)\n    if (business.name) {\n      score += !this.isGenericBusinessName(business.name) ? 25 : 15;\n    }\n\n    // Address completeness (20 points max)\n    if (business.formatted_address || business.address) {\n      const address = business.formatted_address || business.address;\n      score += address.split(\",\").length >= 3 ? 20 : 15; // Simple completeness check\n    }\n\n    // Phone number presence (20 points max)\n    if (business.formatted_phone_number || business.phone) {\n      const phone = business.formatted_phone_number || business.phone;\n      score += phone && phone.match(/\\d{10,}/) ? 20 : 10;\n    }\n\n    // Google rating and review indicators (15 points max)\n    if (business.rating >= 4.0 && business.user_ratings_total >= 10) {\n      score += 15;\n    } else if (business.rating >= 3.5) {\n      score += 10;\n    }\n\n    // Website presence (20 points max)\n    if (business.website && business.website !== \"http://example.com\") {\n      score += 20;\n    } else if (business.website) {\n      score += 10;\n    }\n\n    return Math.min(score, 100);\n  }\n}\n\nmodule.exports = EnhancedDiscoveryEngine;\n"}}},
{"type":"measure","name":"lsp.did_open","count":69,"duration":17.11},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.document_symbol","count":26,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/core/core-business-discovery-engine.js"}}},
{"type":"measure","name":"lsp.testing_update","count":68,"duration":0.058},
{"type":"mark","name":"lsp.did_open","count":70,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/core/core-lead-discovery-engine.js","languageId":"javascript","version":1,"text":"/**\r\n * Enhanced Lead Discovery Algorithm\r\n * Integrates multiple data sources with cost optimization and Enhanced Quality Scoring v3.0\r\n */\r\n\r\nconst CaliforniaSOS = require(\"../api-clients/california-sos-client\");\r\nconst NewYorkSOS = require(\"../api-clients/newyork-sos-client\");\r\nconst NYTaxParcels = require(\"../api-clients/ny-tax-parcels-client\");\r\nconst GooglePlacesClient = require(\"../api-clients/api-google-places-client\");\r\nconst RegistryValidationEngine = require(\"../registry-engines/registry-validation-core-engine\");\r\nconst { batchProcessor } = require(\"../utils/batch-processing-manager\");\r\nconst logger = require(\"../utils/logger\");\r\n// Import API clients\r\nconst MultiSourceEmailDiscovery = require(\"../api-clients/multi-api-email-discovery-client\");\r\nconst ComprehensiveHunterClient = require(\"../api-clients/api-hunter-comprehensive-client\");\r\nconst NeverBounceClient = require(\"../api-clients/neverbounce-client\");\r\nconst SECEdgarClient = require(\"../api-clients/api-sec-edgar-enhanced-client\");\r\nconst ProPublicaClient = require(\"../api-clients/propublica-nonprofit-client\");\r\nconst FoursquareClient = require(\"../api-clients/api-foursquare-places-client\");\r\n\r\nclass EnhancedLeadDiscovery {\r\n  constructor(apiKeys = {}) {\r\n    // Initialize Registry Validation Engine with all providers\r\n    this.registryEngine = new RegistryValidationEngine({\r\n      concurrency: 3,\r\n      cacheEnabled: true,\r\n      cacheTTL: 3600000, // 1 hour\r\n      providerConfig: {\r\n        \"california-sos\": { apiKey: apiKeys.californiaSOS },\r\n        \"newyork-sos\": { apiKey: apiKeys.newYorkSOS },\r\n        propublica: { apiKey: apiKeys.proPublica },\r\n        \"sec-edgar\": { userAgent: \"ProspectPro Lead Discovery Tool\" },\r\n        uspto: { apiKey: apiKeys.uspto },\r\n        \"companies-house-uk\": { apiKey: apiKeys.companiesHouseUK },\r\n      },\r\n    });\r\n\r\n    // Initialize all API clients\r\n    this.californiaSOSClient = new CaliforniaSOS();\r\n    this.newYorkSOSClient = new NewYorkSOS();\r\n    this.nyTaxParcelsClient = new NYTaxParcels();\r\n\r\n    // Google Places client for contact enrichment\r\n    this.googlePlacesClient = apiKeys.googlePlaces\r\n      ? new GooglePlacesClient(apiKeys.googlePlaces)\r\n      : null;\r\n\r\n    // Government API clients for small business validation\r\n    this.proPublicaClient = new ProPublicaClient();\r\n    this.foursquareClient = new FoursquareClient(apiKeys.foursquare);\r\n\r\n    // Multi-source email discovery system with circuit breaker\r\n    this.emailDiscovery = new MultiSourceEmailDiscovery({\r\n      hunterApiKey: apiKeys.hunterIO,\r\n      apolloApiKey: apiKeys.apollo,\r\n      zoomInfoApiKey: apiKeys.zoomInfo,\r\n      neverBounceApiKey: apiKeys.neverBounce,\r\n      maxDailyCost: 50.0,\r\n      maxPerLeadCost: 2.0,\r\n      minEmailConfidence: 70,\r\n    });\r\n    this.neverBounceClient = apiKeys.neverBounce\r\n      ? new NeverBounceClient(apiKeys.neverBounce)\r\n      : null;\r\n\r\n    // Cost tracking\r\n    this.totalCost = 0;\r\n    this.apiUsageStats = {};\r\n\r\n    // High Priority: API Prioritization & Caching\r\n    this.cache = new Map(); // Fresh cache for each session - NO STALE DATA\r\n    this.cacheTTL = 900000; // Reduced to 15 minutes for fresher data\r\n\r\n    // Clear any global caches to ensure fresh discoveries\r\n    if (typeof globalCache !== \"undefined\" && globalCache.clear) {\r\n      globalCache.clear();\r\n      console.log(\"🔄 Global cache cleared for fresh business discovery\");\r\n    }\r\n\r\n    console.log(\r\n      \"🔧 Enhanced Lead Discovery Algorithm initialized with government APIs and caching\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * High Priority: API Prioritization & Caching - Cache getter/setter\r\n   */\r\n  getCache(key) {\r\n    const cached = this.cache.get(key);\r\n    if (cached && Date.now() - cached.timestamp < this.cacheTTL) {\r\n      return cached.data;\r\n    }\r\n    this.cache.delete(key);\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Lightweight website email scraper\r\n   * - Fetches the homepage and tries a few common contact paths\r\n   * - Extracts emails via regex\r\n   */\r\n  async scrapeEmailsFromWebsite(websiteUrl) {\r\n    const urlsToTry = [websiteUrl];\r\n    // Add common contact paths\r\n    try {\r\n      const base = new URL(websiteUrl);\r\n      const make = (p) => new URL(p, base.origin).toString();\r\n      urlsToTry.push(make(\"/contact\"), make(\"/contact-us\"), make(\"/about\"));\r\n    } catch (_) {\r\n      // If URL parsing fails, just use the original\r\n    }\r\n\r\n    const emails = new Set();\r\n    let lastStatus = null;\r\n\r\n    for (const url of urlsToTry) {\r\n      try {\r\n        const res = await fetch(url, {\r\n          method: \"GET\",\r\n          headers: { \"User-Agent\": \"ProspectPro-EmailScraper/1.0\" },\r\n          redirect: \"follow\",\r\n        });\r\n        lastStatus = res.status;\r\n        if (!res.ok) continue;\r\n        const html = await res.text();\r\n        // Basic email regex; avoids overly permissive patterns\r\n        const regex = /[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/gi;\r\n        const matches = html.match(regex) || [];\r\n        for (const m of matches) {\r\n          // Filter out image names or obvious false positives\r\n          if (\r\n            !m.toLowerCase().endsWith(\".png\") &&\r\n            !m.toLowerCase().endsWith(\".jpg\")\r\n          ) {\r\n            emails.add(m);\r\n          }\r\n        }\r\n        // If we found any emails, no need to fetch more pages\r\n        if (emails.size > 0) break;\r\n      } catch (_) {\r\n        // Ignore fetch errors and try next path\r\n      }\r\n    }\r\n\r\n    return { emails: Array.from(emails).slice(0, 5), status: lastStatus };\r\n  }\r\n\r\n  setCache(key, data) {\r\n    this.cache.set(key, { data, timestamp: Date.now() });\r\n  }\r\n\r\n  /**\r\n   * High Priority: Dynamic - Real-Time Campaign Feedback\r\n   */\r\n  generateRealTimeFeedback(scoredBusinesses, options) {\r\n    const totalProcessed = scoredBusinesses.length;\r\n    const qualified = scoredBusinesses.filter(\r\n      (b) => b.finalConfidenceScore >= options.qualityThreshold\r\n    ).length;\r\n    const qualificationRate =\r\n      totalProcessed > 0 ? (qualified / totalProcessed) * 100 : 0;\r\n\r\n    const avgConfidence =\r\n      totalProcessed > 0\r\n        ? scoredBusinesses.reduce((sum, b) => sum + b.finalConfidenceScore, 0) /\r\n          totalProcessed\r\n        : 0;\r\n\r\n    const recommendations = [];\r\n    if (qualificationRate < 30) {\r\n      recommendations.push(\r\n        \"Consider lowering quality threshold or expanding search radius\"\r\n      );\r\n    }\r\n    if (this.totalCost > options.budgetLimit * 0.8) {\r\n      recommendations.push(\r\n        \"Approaching budget limit - consider pausing expensive validations\"\r\n      );\r\n    }\r\n\r\n    return {\r\n      processed: totalProcessed,\r\n      qualified,\r\n      qualificationRate: Math.round(qualificationRate),\r\n      averageConfidence: Math.round(avgConfidence),\r\n      totalCost: this.totalCost,\r\n      recommendations,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n  }\r\n  async discoverAndValidateLeads(businesses, options = {}) {\r\n    const {\r\n      budgetLimit = 50.0,\r\n      qualityThreshold = 50,\r\n      maxResults = 100,\r\n      enableRealTimeFeedback = true, // High Priority: Dynamic - Real-Time Campaign Feedback\r\n      interactiveTuning = true, // High Priority: Dynamic - Interactive Parameter Tuning\r\n    } = options;\r\n\r\n    console.log(\r\n      `🚀 Starting enhanced lead discovery for ${businesses.length} businesses`\r\n    );\r\n    console.log(\r\n      `💰 Budget limit: $${budgetLimit}, Quality threshold: ${qualityThreshold}%`\r\n    );\r\n\r\n    // High Priority: Module Disaggregation - Run stages separately\r\n    const preValidated = await this.runDiscoveryStage(\r\n      businesses.slice(0, maxResults),\r\n      options\r\n    );\r\n    const filteredForEnrichment = preValidated.filter(\r\n      (b) => b.preValidationScore >= 40\r\n    ); // Adaptive threshold\r\n\r\n    const enriched = await this.runEnrichmentStage(\r\n      filteredForEnrichment,\r\n      options\r\n    );\r\n    const validated = await this.runValidationStage(enriched, options);\r\n    const scored = await this.runScoringStage(validated, options);\r\n\r\n    // High Priority: Dynamic - Real-Time Campaign Feedback\r\n    const feedback = this.generateRealTimeFeedback(scored, options);\r\n    if (enableRealTimeFeedback) {\r\n      console.log(\"📊 Real-Time Feedback:\", feedback);\r\n    }\r\n\r\n    // Filter final results\r\n    const results = scored.filter(\r\n      (b) => b.finalConfidenceScore >= qualityThreshold\r\n    );\r\n\r\n    console.log(\r\n      `🎯 Enhanced discovery complete: ${results.length} qualified leads from ${businesses.length} businesses`\r\n    );\r\n    console.log(`💰 Total cost: $${this.totalCost.toFixed(2)}`);\r\n\r\n    return {\r\n      leads: results,\r\n      totalProcessed: businesses.length,\r\n      totalCost: this.totalCost,\r\n      usageStats: this.getUsageStats(),\r\n      qualityMetrics: this.calculateQualityMetrics(results),\r\n      realTimeFeedback: feedback,\r\n    };\r\n  }\r\n\r\n  // Stage wrapper methods to match expected interface\r\n  async runDiscoveryStage(businesses, options) {\r\n    console.log(\r\n      `🔍 Running discovery stage for ${businesses.length} businesses`\r\n    );\r\n    const results = [];\r\n    for (const business of businesses) {\r\n      try {\r\n        const result = await this.stage1_DiscoveryAndPreValidation(business);\r\n        results.push(result);\r\n      } catch (error) {\r\n        console.error(`Error in discovery stage for ${business.name}:`, error);\r\n        results.push({ ...business, preValidationScore: 0, isValid: false });\r\n      }\r\n    }\r\n    return results;\r\n  }\r\n\r\n  async runEnrichmentStage(businesses, options) {\r\n    console.log(\r\n      `🔧 Running enrichment stage for ${businesses.length} businesses`\r\n    );\r\n    const results = [];\r\n    for (const business of businesses) {\r\n      try {\r\n        const result = await this.stage2_EnrichmentAndPropertyIntel(business);\r\n        results.push(result);\r\n      } catch (error) {\r\n        console.error(`Error in enrichment stage for ${business.name}:`, error);\r\n        results.push(business);\r\n      }\r\n    }\r\n    return results;\r\n  }\r\n\r\n  async runValidationStage(businesses, options) {\r\n    console.log(\r\n      `✅ Running validation stage for ${businesses.length} businesses`\r\n    );\r\n    const results = [];\r\n    for (const business of businesses) {\r\n      try {\r\n        const result = await this.stage3_ValidationAndRiskAssessment(business);\r\n        results.push(result);\r\n      } catch (error) {\r\n        console.error(`Error in validation stage for ${business.name}:`, error);\r\n        results.push(business);\r\n      }\r\n    }\r\n    return results;\r\n  }\r\n\r\n  async runScoringStage(businesses, options) {\r\n    console.log(`📊 Running scoring stage for ${businesses.length} businesses`);\r\n    const results = [];\r\n    for (const business of businesses) {\r\n      try {\r\n        const result = await this.stage4_QualityScoringAndExport(business);\r\n        results.push(result);\r\n      } catch (error) {\r\n        console.error(`Error in scoring stage for ${business.name}:`, error);\r\n        results.push(business);\r\n      }\r\n    }\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Process single business through enhanced 4-stage pipeline\r\n   */\r\n  async processBusinessThroughPipeline(business, options) {\r\n    // Check if we already have Foursquare data from discovery stage\r\n    if (business.source === \"foursquare\" && business.foursquareData) {\r\n      console.log(\r\n        `   📍 Using cached Foursquare data for ${\r\n          business.name || business.businessName\r\n        }`\r\n      );\r\n      // Skip redundant Foursquare API call since we have the data\r\n      business.foursquareData = {\r\n        found: true,\r\n        places: [business.foursquareData],\r\n        cached: true,\r\n      };\r\n    } else {\r\n      // Prioritize Foursquare and other free APIs first\r\n      let discoveryResult = await this.foursquareClient.searchPlaces(\r\n        business.name,\r\n        {\r\n          near: business.address,\r\n          limit: 10,\r\n        }\r\n      );\r\n      if (discoveryResult.found && discoveryResult.places.length > 0) {\r\n        business.foursquareData = discoveryResult;\r\n      }\r\n    }\r\n\r\n    // Now run standard pre-validation\r\n    const stage1Result = await this.stage1_DiscoveryAndPreValidation(business);\r\n    // Early filtering - only proceed if pre-validation score is promising\r\n    if (stage1Result.preValidationScore < 50) {\r\n      console.log(\r\n        `⏭️ Skipping ${business.name} - low pre-validation score: ${stage1Result.preValidationScore}`\r\n      );\r\n      return {\r\n        ...stage1Result,\r\n        finalConfidenceScore: stage1Result.preValidationScore,\r\n        stage: \"pre-validation-filtered\",\r\n      };\r\n    }\r\n    // Google Places discovery with pagination\r\n    let googleResults = [];\r\n    if (this.googlePlacesClient) {\r\n      let pageToken = null;\r\n      let pagesFetched = 0;\r\n      do {\r\n        const response = await this.googlePlacesClient.textSearch({\r\n          query: `${business.name} in ${business.address}`,\r\n          type: \"establishment\",\r\n          pagetoken: pageToken,\r\n        });\r\n        if (response && response.results) {\r\n          googleResults = googleResults.concat(response.results);\r\n        }\r\n        pageToken = response.next_page_token || null;\r\n        pagesFetched++;\r\n      } while (pageToken && pagesFetched < 3); // Fetch up to 3 pages\r\n      business.googlePlacesResults = googleResults;\r\n    }\r\n    // Stage 2: Enrichment + Property Intelligence\r\n    const stage2Result = await this.stage2_EnrichmentAndPropertyIntel(\r\n      stage1Result\r\n    );\r\n    // Stage 3: Validation + Risk Assessment\r\n    const stage3Result = await this.stage3_ValidationAndRiskAssessment(\r\n      stage2Result\r\n    );\r\n    // Stage 4: Quality Scoring + Export Preparation\r\n    const finalResult = await this.stage4_QualityScoringAndExport(stage3Result);\r\n    return finalResult;\r\n  }\r\n\r\n  /**\r\n   * Stage 1: Discovery + Pre-validation Scoring\r\n   */\r\n  async stage1_DiscoveryAndPreValidation(business) {\r\n    console.log(`🔍 Stage 1: Pre-validation for ${business.name}`);\r\n\r\n    const preValidationScore = this.calculatePreValidationScore(business);\r\n\r\n    // Soften registry validation: allow for scores >= 50\r\n    let registryValidation = {};\r\n    if (preValidationScore >= 50) {\r\n      registryValidation = await this.validateBusinessRegistration(business);\r\n    }\r\n\r\n    return {\r\n      ...business,\r\n      preValidationScore,\r\n      registryValidation,\r\n      stage: \"discovery\",\r\n      processingCost: 0, // Stage 1 is free\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Stage 2: Enrichment + Property Intelligence + Location Data\r\n   * High Priority: API Prioritization & Caching\r\n   */\r\n  async stage2_EnrichmentAndPropertyIntel(businessData) {\r\n    console.log(`🏢 Stage 2: Property intel for ${businessData.name}`);\r\n\r\n    let propertyData = {};\r\n    let emailDiscovery = {};\r\n    let foursquareData = {};\r\n    let googlePlacesDetails = {};\r\n    let stageCost = 0;\r\n\r\n    // Google Places Details Enrichment (paid but essential for contact info)\r\n    if (this.googlePlacesClient && businessData.placeId) {\r\n      const cacheKey = `google_details_${businessData.placeId}`;\r\n      googlePlacesDetails = this.getCache(cacheKey);\r\n      if (!googlePlacesDetails) {\r\n        try {\r\n          console.log(`📞 Fetching contact details for ${businessData.name}`);\r\n          googlePlacesDetails = await this.googlePlacesClient.getPlaceDetails(\r\n            businessData.placeId\r\n          );\r\n          this.setCache(cacheKey, googlePlacesDetails);\r\n          stageCost += 0.017; // Google Places Details API cost\r\n\r\n          // Enhanced contact differentiation: Company vs Owner information\r\n          if (googlePlacesDetails.phone) {\r\n            businessData.phone = googlePlacesDetails.phone;\r\n            businessData.companyPhone = googlePlacesDetails.phone; // Google Places typically provides main business line\r\n            businessData.companyPhoneSource = \"Google Places\";\r\n          }\r\n          if (googlePlacesDetails.website) {\r\n            businessData.website = googlePlacesDetails.website;\r\n          }\r\n          if (googlePlacesDetails.hours) {\r\n            businessData.hours = googlePlacesDetails.hours;\r\n          }\r\n        } catch (error) {\r\n          console.warn(\r\n            `⚠️ Google Places details failed for ${businessData.name}:`,\r\n            error.message\r\n          );\r\n          googlePlacesDetails = { found: false, error: error.message };\r\n        }\r\n      } else {\r\n        // Apply cached contact details with enhanced differentiation\r\n        if (googlePlacesDetails.phone) {\r\n          businessData.phone = googlePlacesDetails.phone;\r\n          businessData.companyPhone = googlePlacesDetails.phone;\r\n          businessData.companyPhoneSource = \"Google Places\";\r\n        }\r\n        if (googlePlacesDetails.website)\r\n          businessData.website = googlePlacesDetails.website;\r\n        if (googlePlacesDetails.hours)\r\n          businessData.hours = googlePlacesDetails.hours;\r\n      }\r\n    }\r\n\r\n    // Attempt to scrape emails directly from the website (real data, free)\r\n    if (businessData.website) {\r\n      try {\r\n        const scraped = await this.scrapeEmailsFromWebsite(\r\n          businessData.website\r\n        );\r\n        if (scraped && scraped.emails && scraped.emails.length > 0) {\r\n          // Prefer non-generic emails if available\r\n          const nonGeneric = scraped.emails.find(\r\n            (e) => !/^(info|contact|support|admin|hello|sales|team)@/i.test(e)\r\n          );\r\n          const selected = nonGeneric || scraped.emails[0];\r\n          if (selected) {\r\n            businessData.companyEmail = selected;\r\n            businessData.companyEmailSource = `website_scrape (${\r\n              scraped.status || \"HTTP\"\r\n            })`;\r\n            businessData.companyEmailConfidence = 75; // Real source but not deliverability-verified\r\n\r\n            // Legacy fields for compatibility\r\n            businessData.email = selected;\r\n            businessData.emailSource = businessData.companyEmailSource;\r\n            businessData.emailConfidence = businessData.companyEmailConfidence;\r\n          }\r\n        }\r\n      } catch (e) {\r\n        // Non-fatal: continue without website scrape\r\n      }\r\n    }\r\n\r\n    // High Priority: API Prioritization - Free APIs first\r\n    // Property intelligence (free)\r\n    if (businessData.address) {\r\n      const cacheKey = `property_${businessData.address}`;\r\n      propertyData = this.getCache(cacheKey);\r\n      if (!propertyData) {\r\n        propertyData = await this.nyTaxParcelsClient.getPropertyData(\r\n          businessData.address\r\n        );\r\n        this.setCache(cacheKey, propertyData);\r\n      }\r\n    }\r\n\r\n    // Foursquare location intelligence (free) - Prioritized\r\n    if (businessData.name && businessData.address) {\r\n      const cacheKey = `foursquare_${businessData.name}_${businessData.address}`;\r\n      foursquareData = this.getCache(cacheKey);\r\n      if (!foursquareData) {\r\n        try {\r\n          foursquareData = await this.foursquareClient.searchPlaces(\r\n            businessData.name,\r\n            {\r\n              near: businessData.address,\r\n              limit: 5,\r\n            }\r\n          );\r\n          this.setCache(cacheKey, foursquareData);\r\n        } catch (error) {\r\n          console.warn(\r\n            `⚠️ Foursquare search failed for ${businessData.name}:`,\r\n            error.message\r\n          );\r\n          foursquareData = { found: false, error: error.message };\r\n        }\r\n      }\r\n    }\r\n\r\n    // Enhanced Email discovery using multi-source system\r\n    if (\r\n      this.emailDiscovery &&\r\n      businessData.website &&\r\n      businessData.preValidationScore >= 50 // Quality threshold for email discovery\r\n    ) {\r\n      console.log(\r\n        `📧 Starting multi-source email discovery for ${businessData.name}`\r\n      );\r\n\r\n      const emailResult = await this.emailDiscovery.discoverBusinessEmails({\r\n        business_name: businessData.name,\r\n        website: businessData.website,\r\n        owner_name: businessData.ownerName || null,\r\n        location: businessData.formattedAddress || businessData.address,\r\n      });\r\n\r\n      stageCost += emailResult.total_cost || 0;\r\n\r\n      if (\r\n        emailResult.success &&\r\n        emailResult.emails &&\r\n        emailResult.emails.length > 0\r\n      ) {\r\n        console.log(\r\n          `✅ Found ${emailResult.emails.length} verified emails for ${businessData.name}`\r\n        );\r\n\r\n        // Process discovered emails and contacts\r\n        emailDiscovery = {\r\n          emails: emailResult.emails,\r\n          domain: emailResult.domain,\r\n          sources_used: emailResult.sources_used,\r\n          confidence_score: emailResult.confidence_score,\r\n          cost: emailResult.total_cost,\r\n        };\r\n\r\n        // Enhanced contact differentiation using business contacts\r\n        if (emailResult.business_contacts) {\r\n          const { owner, manager, primary } = emailResult.business_contacts;\r\n\r\n          // Set owner contact if found with high confidence\r\n          if (owner && owner.confidence >= 70) {\r\n            businessData.ownerEmail = owner.value;\r\n            businessData.ownerEmailSource = `${owner.source} (${owner.confidence}% confidence)`;\r\n            businessData.ownerEmailConfidence = owner.confidence;\r\n\r\n            // Extract owner name if available\r\n            if (owner.first_name && owner.last_name) {\r\n              businessData.ownerName = `${owner.first_name} ${owner.last_name}`;\r\n            }\r\n\r\n            // Extract title/position if available\r\n            if (owner.position || owner.type === \"personal\") {\r\n              businessData.ownerTitle = owner.position || \"Owner\";\r\n            }\r\n          }\r\n\r\n          // Set company email using primary or manager\r\n          const companyEmail = primary || manager;\r\n          if (companyEmail && companyEmail.confidence >= 60) {\r\n            businessData.email = companyEmail.value;\r\n            businessData.emailSource = `${companyEmail.source} (${companyEmail.confidence}% confidence)`;\r\n            businessData.emailConfidence = companyEmail.confidence;\r\n          }\r\n        } else {\r\n          // Fallback to legacy email processing\r\n          const emails = emailResult.emails;\r\n\r\n          // Find high-confidence owner email (80%+ confidence with owner-like titles)\r\n          const ownerEmail = emails.find(\r\n            (email) =>\r\n              email.confidence >= 80 &&\r\n              this.isOwnerPosition(\r\n                email.position || email.position_raw,\r\n                email.first_name,\r\n                email.last_name,\r\n                businessData.name\r\n              )\r\n          );\r\n\r\n          // Find high-confidence management email\r\n          const mgmtEmail = emails.find(\r\n            (email) =>\r\n              email.confidence >= 80 &&\r\n              this.isManagementPosition(email.position || email.position_raw)\r\n          );\r\n\r\n          // Set owner contact if found with high confidence\r\n          if (ownerEmail) {\r\n            businessData.ownerEmail = ownerEmail.value;\r\n            businessData.ownerEmailSource = `${emailResult.sources_used.join(\r\n              \", \"\r\n            )} (${ownerEmail.confidence}% confidence)`;\r\n            businessData.ownerEmailConfidence = ownerEmail.confidence;\r\n            businessData.ownerName = `${ownerEmail.first_name || \"\"} ${\r\n              ownerEmail.last_name || \"\"\r\n            }`.trim();\r\n            businessData.ownerTitle =\r\n              ownerEmail.position || ownerEmail.position_raw;\r\n          }\r\n\r\n          // Set company contact (primary or management)\r\n          const companyEmail = mgmtEmail || emails[0];\r\n          if (companyEmail) {\r\n            businessData.companyEmail = companyEmail.value;\r\n            businessData.companyEmailSource = `${emailResult.sources_used.join(\r\n              \", \"\r\n            )} (${companyEmail.confidence}% confidence)`;\r\n            businessData.companyEmailConfidence = companyEmail.confidence;\r\n\r\n            // Legacy field for backwards compatibility\r\n            businessData.email = companyEmail.value;\r\n            businessData.emailSource = `${emailResult.sources_used.join(\", \")}`;\r\n            businessData.emailConfidence = companyEmail.confidence;\r\n          }\r\n        }\r\n      } else {\r\n        console.log(\r\n          `⚠️ No emails found for ${\r\n            businessData.name\r\n          } (Sources: ${emailResult.sources_used.join(\", \")})`\r\n        );\r\n        if (emailResult.error) {\r\n          console.error(`   Email discovery error: ${emailResult.error}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Enhanced Foursquare + Google Places cross-validation for contact enrichment\r\n    if (\r\n      foursquareData.found &&\r\n      foursquareData.places &&\r\n      foursquareData.places.length > 0\r\n    ) {\r\n      const fsPlace = foursquareData.places[0];\r\n      console.log(\r\n        `🔗 Cross-referencing ${businessData.name} data: Google + Foursquare`\r\n      );\r\n\r\n      // Enhanced contact differentiation for phone numbers\r\n      if (!businessData.phone && fsPlace.contact && fsPlace.contact.phone) {\r\n        // Foursquare phones are typically company main numbers\r\n        businessData.phone = fsPlace.contact.phone;\r\n        businessData.companyPhone = fsPlace.contact.phone;\r\n        businessData.phoneSource = \"Foursquare\";\r\n        businessData.companyPhoneSource = \"Foursquare\";\r\n      }\r\n      if (!businessData.website && fsPlace.url) {\r\n        businessData.website = fsPlace.url;\r\n        businessData.websiteSource = \"Foursquare\";\r\n      }\r\n      if (fsPlace.categories && fsPlace.categories.length > 0) {\r\n        businessData.category = fsPlace.categories[0].name;\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...businessData,\r\n      propertyIntelligence: propertyData,\r\n      foursquareData,\r\n      emailDiscovery,\r\n      googlePlacesDetails,\r\n      stage: \"enrichment\",\r\n      processingCost: stageCost,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Stage 3: Validation + Risk Assessment\r\n   * High Priority: API Prioritization & Caching\r\n   */\r\n  async stage3_ValidationAndRiskAssessment(businessData) {\r\n    console.log(`✅ Stage 3: Validation for ${businessData.name}`);\r\n\r\n    let emailValidation = {};\r\n    let websiteValidation = {};\r\n    let stageCost = 0;\r\n\r\n    // Website validation (free, cached)\r\n    // Website validation - now uses batch processor with domain-level caching\r\n    if (businessData.website) {\r\n      logger.debug(\r\n        `🌐 Batch validating website for ${businessData.name}: ${businessData.website}`\r\n      );\r\n\r\n      try {\r\n        // Use batch processor for website scraping (with domain-level caching)\r\n        const websiteResults = await batchProcessor.batchWebsiteScraping([\r\n          businessData.website,\r\n        ]);\r\n        websiteValidation = websiteResults[0] || {\r\n          isAccessible: false,\r\n          error: \"No result returned from batch processor\",\r\n        };\r\n      } catch (error) {\r\n        logger.warn(\r\n          `⚠️ Batch website validation failed for ${businessData.name}: ${error.message}`\r\n        );\r\n        websiteValidation = {\r\n          isAccessible: false,\r\n          error: error.message,\r\n          batchProcessed: false,\r\n        };\r\n      }\r\n    }\r\n\r\n    // Email validation (paid - selective usage, cached) - Now uses batch processor\r\n    if (\r\n      this.neverBounceClient &&\r\n      businessData.emailDiscovery?.emails?.length > 0\r\n    ) {\r\n      const priorityEmails = businessData.emailDiscovery.emails.slice(0, 2);\r\n      const emailsToVerify = priorityEmails.map((e) => e.value || e);\r\n\r\n      logger.debug(\r\n        `🔍 Batch verifying ${emailsToVerify.length} emails for ${businessData.name}`\r\n      );\r\n\r\n      try {\r\n        // Use batch processor for email verification\r\n        const verificationResults = await batchProcessor.batchEmailVerification(\r\n          emailsToVerify,\r\n          this.neverBounceClient\r\n        );\r\n\r\n        emailValidation = {\r\n          results: verificationResults,\r\n          bestEmail: verificationResults.find((r) => r.isDeliverable),\r\n          deliverableCount: verificationResults.filter((r) => r.isDeliverable)\r\n            .length,\r\n          batchProcessed: true,\r\n        };\r\n\r\n        stageCost += verificationResults.reduce(\r\n          (sum, r) => sum + (r.cost || 0),\r\n          0\r\n        );\r\n      } catch (error) {\r\n        logger.warn(\r\n          `⚠️ Batch email verification failed for ${businessData.name}: ${error.message}`\r\n        );\r\n        emailValidation = {\r\n          results: [],\r\n          error: error.message,\r\n          batchProcessed: false,\r\n        };\r\n      }\r\n    }\r\n\r\n    this.totalCost += stageCost;\r\n\r\n    return {\r\n      ...businessData,\r\n      emailValidation,\r\n      websiteValidation,\r\n      stage: \"validation\",\r\n      processingCost: (businessData.processingCost || 0) + stageCost,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Stage 4: Quality Scoring + Export Preparation\r\n   */\r\n  async stage4_QualityScoringAndExport(businessData) {\r\n    console.log(`🎯 Stage 4: Final scoring for ${businessData.name}`);\r\n\r\n    const qualityScores = this.calculateQualityScores(businessData);\r\n    const finalConfidenceScore =\r\n      this.calculateFinalConfidenceScore(qualityScores);\r\n\r\n    return {\r\n      ...businessData,\r\n      qualityScores,\r\n      finalConfidenceScore,\r\n      exportReady: finalConfidenceScore >= 50,\r\n      stage: \"completed\",\r\n      completedAt: new Date().toISOString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate pre-validation score to filter businesses early\r\n   */\r\n  calculatePreValidationScore(business) {\r\n    let score = 0;\r\n\r\n    // Business name quality (25 points max)\r\n    if (business.name) {\r\n      score += !this.isGenericBusinessName(business.name) ? 25 : 15;\r\n    }\r\n\r\n    // Address completeness (20 points max)\r\n    if (business.address) {\r\n      score += this.isCompleteAddress(business.address) ? 20 : 15;\r\n    }\r\n\r\n    // Phone number format (20 points max)\r\n    if (business.phone) {\r\n      score +=\r\n        this.isValidPhoneFormat(business.phone) &&\r\n        !this.isFakePhone(business.phone)\r\n          ? 20\r\n          : 10;\r\n    }\r\n\r\n    // Google rating and review indicators (15 points max)\r\n    if (business.rating >= 4.0 && business.user_ratings_total >= 10) {\r\n      score += 15;\r\n    } else if (business.rating >= 3.5) {\r\n      score += 10;\r\n    }\r\n\r\n    // Website presence (20 points max)\r\n    if (business.website && business.website !== \"http://example.com\") {\r\n      score += 20;\r\n    } else if (business.website) {\r\n      score += 10;\r\n    }\r\n\r\n    return Math.min(score, 100);\r\n  }\r\n\r\n  /**\r\n   * Validate business registration with state registries and federal sources\r\n   * Uses dynamic routing to only call relevant APIs based on business location/type\r\n   */\r\n  async validateBusinessRegistration(business, searchParams = {}) {\r\n    logger.debug(\r\n      `🔍 Running registry validation for ${business.name} using modular engine`\r\n    );\r\n\r\n    try {\r\n      // Use the modular registry validation engine\r\n      const validationResult = await this.registryEngine.validateBusiness(\r\n        business,\r\n        searchParams\r\n      );\r\n\r\n      if (validationResult.skipped) {\r\n        logger.debug(\r\n          `⏭️ Registry validation skipped for ${business.name} - no relevant providers`\r\n        );\r\n        return {\r\n          california: {\r\n            found: false,\r\n            skipped: true,\r\n            reason: \"No relevant providers\",\r\n          },\r\n          newYork: {\r\n            found: false,\r\n            skipped: true,\r\n            reason: \"No relevant providers\",\r\n          },\r\n          proPublica: {\r\n            found: false,\r\n            skipped: true,\r\n            reason: \"No relevant providers\",\r\n          },\r\n          secEdgar: {\r\n            found: false,\r\n            skipped: true,\r\n            reason: \"No relevant providers\",\r\n          },\r\n          uspto: {\r\n            found: false,\r\n            skipped: true,\r\n            reason: \"No relevant providers\",\r\n          },\r\n          companiesHouseUK: {\r\n            found: false,\r\n            skipped: true,\r\n            reason: \"No relevant providers\",\r\n          },\r\n          registeredInAnyState: false,\r\n          isNonprofit: false,\r\n          isPublicCompany: false,\r\n          hasIntellectualProperty: false,\r\n          isInternational: false,\r\n          confidence: 0,\r\n          providersUsed: [],\r\n          engineStats: this.registryEngine.getStats(),\r\n        };\r\n      }\r\n\r\n      const { validationResults, providersUsed, errors } = validationResult;\r\n\r\n      // Map results to legacy format for backward compatibility\r\n      const california = validationResults[\"california-sos\"] || {\r\n        found: false,\r\n        skipped: true,\r\n      };\r\n      const newYork = validationResults[\"newyork-sos\"] || {\r\n        found: false,\r\n        skipped: true,\r\n      };\r\n      const proPublica = validationResults[\"propublica\"] || {\r\n        found: false,\r\n        skipped: true,\r\n      };\r\n      const secEdgar = validationResults[\"sec-edgar\"] || {\r\n        found: false,\r\n        skipped: true,\r\n      };\r\n      const uspto = validationResults[\"uspto\"] || {\r\n        found: false,\r\n        skipped: true,\r\n      };\r\n      const companiesHouseUK = validationResults[\"companies-house-uk\"] || {\r\n        found: false,\r\n        skipped: true,\r\n      };\r\n\r\n      // Log validation errors\r\n      if (errors && errors.length > 0) {\r\n        errors.forEach((error) => {\r\n          logger.warn(\r\n            `⚠️ ${error.provider} validation failed for ${error.business}: ${error.error}`\r\n          );\r\n        });\r\n      }\r\n\r\n      // Calculate overall confidence and registration status\r\n      const allConfidences = [\r\n        california.confidence || 0,\r\n        newYork.confidence || 0,\r\n        proPublica.confidence || 0,\r\n        secEdgar.confidence || 0,\r\n        uspto.confidence || 0,\r\n        companiesHouseUK.confidence || 0,\r\n      ];\r\n      const maxConfidence = Math.max(...allConfidences);\r\n\r\n      const registeredInAnyState =\r\n        california.found || newYork.found || companiesHouseUK.found;\r\n      const isNonprofit = proPublica.found;\r\n      const isPublicCompany = secEdgar.found;\r\n      const hasIntellectualProperty = uspto.found;\r\n      const isInternational = companiesHouseUK.found;\r\n\r\n      logger.debug(\r\n        `✅ Registry validation complete for ${business.name}: ${providersUsed.length} providers used, confidence ${maxConfidence}%`\r\n      );\r\n\r\n      return {\r\n        california,\r\n        newYork,\r\n        proPublica,\r\n        secEdgar,\r\n        uspto,\r\n        companiesHouseUK,\r\n        registeredInAnyState,\r\n        isNonprofit,\r\n        isPublicCompany,\r\n        hasIntellectualProperty,\r\n        isInternational,\r\n        confidence: maxConfidence,\r\n        providersUsed,\r\n        validationResults: validationResults,\r\n        engineStats: this.registryEngine.getStats(),\r\n        errors: errors || [],\r\n      };\r\n    } catch (error) {\r\n      logger.error(\r\n        `❌ Registry validation engine failed for ${business.name}:`,\r\n        error.message\r\n      );\r\n\r\n      // Fallback to no validation rather than fake data\r\n      return {\r\n        california: { found: false, error: error.message },\r\n        newYork: { found: false, error: error.message },\r\n        proPublica: { found: false, error: error.message },\r\n        secEdgar: { found: false, error: error.message },\r\n        uspto: { found: false, error: error.message },\r\n        companiesHouseUK: { found: false, error: error.message },\r\n        registeredInAnyState: false,\r\n        isNonprofit: false,\r\n        isPublicCompany: false,\r\n        hasIntellectualProperty: false,\r\n        isInternational: false,\r\n        confidence: 0,\r\n        providersUsed: [],\r\n        error: error.message,\r\n        engineStats: this.registryEngine.getStats(),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate website accessibility\r\n   */\r\n  async validateWebsiteAccessibility(website) {\r\n    try {\r\n      const startTime = Date.now();\r\n      const response = await fetch(website, {\r\n        method: \"HEAD\",\r\n        timeout: 5000,\r\n        headers: {\r\n          \"User-Agent\": \"ProspectPro-WebsiteValidator/1.0\",\r\n        },\r\n      });\r\n\r\n      const responseTime = Date.now() - startTime;\r\n      const isAccessible = response.status >= 200 && response.status < 400;\r\n\r\n      return {\r\n        url: website,\r\n        accessible: isAccessible,\r\n        statusCode: response.status,\r\n        responseTime,\r\n        confidence: isAccessible ? 95 : 10,\r\n        checkedAt: new Date().toISOString(),\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        url: website,\r\n        accessible: false,\r\n        error: error.message,\r\n        confidence: 5,\r\n        checkedAt: new Date().toISOString(),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate quality scores across all data points\r\n   */\r\n  calculateQualityScores(businessData) {\r\n    return {\r\n      businessNameScore: this.scoreBusinessName(businessData),\r\n      addressScore: this.scoreAddress(businessData),\r\n      phoneScore: this.scorePhone(businessData),\r\n      websiteScore: this.scoreWebsite(businessData),\r\n      emailScore: this.scoreEmail(businessData),\r\n      registrationScore: this.scoreRegistration(businessData),\r\n      propertyScore: this.scoreProperty(businessData),\r\n      foursquareScore: this.scoreFoursquare(businessData),\r\n      nonprofitScore: this.scoreNonprofit(businessData),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate final confidence score\r\n   */\r\n  calculateFinalConfidenceScore(qualityScores) {\r\n    const weights = {\r\n      businessNameScore: 0.12,\r\n      addressScore: 0.12,\r\n      phoneScore: 0.15,\r\n      websiteScore: 0.12,\r\n      emailScore: 0.15,\r\n      registrationScore: 0.12,\r\n      propertyScore: 0.05,\r\n      foursquareScore: 0.1,\r\n      nonprofitScore: 0.07,\r\n    };\r\n\r\n    let weightedSum = 0;\r\n    let totalWeight = 0;\r\n\r\n    for (const [metric, score] of Object.entries(qualityScores)) {\r\n      if (score > 0) {\r\n        weightedSum += score * weights[metric];\r\n        totalWeight += weights[metric];\r\n      }\r\n    }\r\n\r\n    return totalWeight > 0 ? Math.round(weightedSum / totalWeight) : 0;\r\n  }\r\n\r\n  // Helper methods for validation and scoring\r\n  isGenericBusinessName(name) {\r\n    const genericPatterns = [\r\n      /business\\s+(llc|inc|corp)/i,\r\n      /company\\s+(llc|inc|corp)/i,\r\n      /^(business|company)$/i,\r\n      /test\\s*business/i,\r\n    ];\r\n    return genericPatterns.some((pattern) => pattern.test(name));\r\n  }\r\n\r\n  isCompleteAddress(address) {\r\n    return (\r\n      address &&\r\n      address.length > 10 &&\r\n      /\\d/.test(address) &&\r\n      /[a-zA-Z]/.test(address) &&\r\n      !address.includes(\"Main St, Main St\")\r\n    ); // Avoid obvious fakes\r\n  }\r\n\r\n  isValidPhoneFormat(phone) {\r\n    return /^\\+?[\\d\\s\\-\\(\\)]{10,}$/.test(phone);\r\n  }\r\n\r\n  isFakePhone(phone) {\r\n    return (\r\n      phone.includes(\"555-\") ||\r\n      phone.includes(\"(555)\") ||\r\n      phone.includes(\"000-000\")\r\n    );\r\n  }\r\n\r\n  extractDomainFromWebsite(website) {\r\n    try {\r\n      const url = new URL(website);\r\n      return url.hostname.replace(\"www.\", \"\");\r\n    } catch {\r\n      return website\r\n        .replace(/^https?:\\/\\//, \"\")\r\n        .replace(\"www.\", \"\")\r\n        .split(\"/\")[0];\r\n    }\r\n  }\r\n\r\n  // Scoring methods\r\n  scoreBusinessName(data) {\r\n    if (!data.name) return 0;\r\n    return this.isGenericBusinessName(data.name) ? 30 : 90;\r\n  }\r\n\r\n  scoreAddress(data) {\r\n    if (!data.address) return 0;\r\n    if (data.propertyIntelligence?.found) return 95;\r\n    return this.isCompleteAddress(data.address) ? 80 : 40;\r\n  }\r\n\r\n  scorePhone(data) {\r\n    if (!data.phone) return 0;\r\n    if (this.isFakePhone(data.phone)) return 10;\r\n    return this.isValidPhoneFormat(data.phone) ? 85 : 30;\r\n  }\r\n\r\n  scoreWebsite(data) {\r\n    if (!data.website) return 0;\r\n    if (data.websiteValidation?.accessible) return 95;\r\n    return data.website !== \"http://example.com\" ? 50 : 10;\r\n  }\r\n\r\n  scoreEmail(data) {\r\n    if (!data.emailValidation?.bestEmail) return 0;\r\n    return data.emailValidation.bestEmail.confidence || 50;\r\n  }\r\n\r\n  scoreRegistration(data) {\r\n    if (!data.registryValidation) return 50;\r\n    return data.registryValidation.registeredInAnyState ? 90 : 20;\r\n  }\r\n\r\n  scoreProperty(data) {\r\n    if (!data.propertyIntelligence?.found) return 50;\r\n    return data.propertyIntelligence.isCommercial ? 90 : 70;\r\n  }\r\n\r\n  scoreFoursquare(data) {\r\n    if (!data.foursquareData?.found) return 50;\r\n    const places = data.foursquareData.places || [];\r\n    if (places.length === 0) return 30;\r\n\r\n    // Score based on number of matching places and their ratings\r\n    const avgRating =\r\n      places.reduce((sum, place) => sum + (place.rating || 0), 0) /\r\n      places.length;\r\n    const score = Math.min(places.length * 15 + avgRating * 10, 95);\r\n    return Math.max(score, 60); // Minimum score for found places\r\n  }\r\n\r\n  scoreNonprofit(data) {\r\n    if (!data.registryValidation?.proPublica) return 50;\r\n    return data.registryValidation.proPublica.found ? 95 : 70;\r\n  }\r\n\r\n  calculateQualityMetrics(results) {\r\n    if (!results.length) return {};\r\n\r\n    return {\r\n      averageConfidence: Math.round(\r\n        results.reduce((sum, r) => sum + r.finalConfidenceScore, 0) /\r\n          results.length\r\n      ),\r\n      registrationVerified: results.filter(\r\n        (r) => r.registryValidation?.registeredInAnyState\r\n      ).length,\r\n      federalRegistration: results.filter(\r\n        (r) => r.registryValidation?.registeredFederally\r\n      ).length,\r\n      nonprofits: results.filter((r) => r.registryValidation?.isNonprofit)\r\n        .length,\r\n      websitesAccessible: results.filter((r) => r.websiteValidation?.accessible)\r\n        .length,\r\n      emailsVerified: results.filter(\r\n        (r) => r.emailValidation?.bestEmail?.isDeliverable\r\n      ).length,\r\n      propertiesFound: results.filter((r) => r.propertyIntelligence?.found)\r\n        .length,\r\n      commercialProperties: results.filter(\r\n        (r) => r.propertyIntelligence?.isCommercial\r\n      ).length,\r\n      foursquareMatches: results.filter((r) => r.foursquareData?.found).length,\r\n    };\r\n  }\r\n\r\n  getUsageStats() {\r\n    const stats = {};\r\n\r\n    // Registry validation engine statistics\r\n    if (this.registryEngine) {\r\n      stats.registryEngine = this.registryEngine.getStats();\r\n    }\r\n\r\n    // Batch processor statistics\r\n    if (batchProcessor && batchProcessor.getStats) {\r\n      stats.batchProcessor = batchProcessor.getStats();\r\n    }\r\n\r\n    // Global cache statistics\r\n    const { globalCache } = require(\"../utils/cache-ttl-manager\");\r\n    if (globalCache && globalCache.getStats) {\r\n      stats.globalCache = globalCache.getStats();\r\n    }\r\n\r\n    // Only include stats for initialized clients\r\n    if (this.californiaSOSClient && this.californiaSOSClient.getUsageStats) {\r\n      stats.californiaSOSRequests = this.californiaSOSClient.getUsageStats();\r\n    }\r\n    if (this.newYorkSOSClient && this.newYorkSOSClient.getUsageStats) {\r\n      stats.newYorkSOSRequests = this.newYorkSOSClient.getUsageStats();\r\n    }\r\n    if (this.nyTaxParcelsClient && this.nyTaxParcelsClient.getUsageStats) {\r\n      stats.nyTaxParcelsRequests = this.nyTaxParcelsClient.getUsageStats();\r\n    }\r\n    if (this.secEdgarClient && this.secEdgarClient.getUsageStats) {\r\n      stats.secEdgarRequests = this.secEdgarClient.getUsageStats();\r\n    }\r\n    if (this.proPublicaClient && this.proPublicaClient.getUsageStats) {\r\n      stats.proPublicaRequests = this.proPublicaClient.getUsageStats();\r\n    }\r\n    if (this.foursquareClient && this.foursquareClient.getUsageStats) {\r\n      stats.foursquareRequests = this.foursquareClient.getUsageStats();\r\n    }\r\n    if (this.hunterClient && this.hunterClient.getUsageStats) {\r\n      stats.hunterIOUsage = this.hunterClient.getUsageStats();\r\n    }\r\n    if (this.neverBounceClient && this.neverBounceClient.getUsageStats) {\r\n      stats.neverBounceUsage = this.neverBounceClient.getUsageStats();\r\n    }\r\n    if (this.googlePlacesClient && this.googlePlacesClient.getUsageStats) {\r\n      stats.googlePlacesUsage = this.googlePlacesClient.getUsageStats();\r\n    }\r\n\r\n    return stats;\r\n  }\r\n\r\n  /**\r\n   * Helper methods for contact role identification\r\n   */\r\n  isOwnerPosition(position, firstName, lastName, businessName) {\r\n    if (!position) return false;\r\n\r\n    // Primary owner titles\r\n    const ownerTitles = [\r\n      \"owner\",\r\n      \"founder\",\r\n      \"ceo\",\r\n      \"president\",\r\n      \"principal\",\r\n      \"proprietor\",\r\n      \"managing director\",\r\n      \"managing partner\",\r\n      \"executive director\",\r\n    ];\r\n\r\n    // Additional titles that often indicate ownership in small businesses\r\n    const likelyOwnerTitles = [\r\n      \"accountant\", // Often owner-operated businesses\r\n      \"attorney\",\r\n      \"lawyer\", // Solo practitioners\r\n      \"consultant\",\r\n      \"advisor\", // Independent consultants\r\n      \"practitioner\", // Medical/legal practices\r\n    ];\r\n\r\n    const positionLower = position.toLowerCase();\r\n\r\n    // Direct owner title match\r\n    if (ownerTitles.some((title) => positionLower.includes(title))) {\r\n      return true;\r\n    }\r\n\r\n    // Name matching with business for likely owner titles\r\n    if (likelyOwnerTitles.some((title) => positionLower.includes(title))) {\r\n      if (firstName && lastName && businessName) {\r\n        const fullName = `${firstName} ${lastName}`.toLowerCase();\r\n        const businessLower = businessName.toLowerCase();\r\n\r\n        // Check if person's name appears in business name\r\n        if (\r\n          businessLower.includes(firstName.toLowerCase()) ||\r\n          businessLower.includes(lastName.toLowerCase()) ||\r\n          businessLower.includes(fullName)\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  isManagementPosition(position) {\r\n    if (!position) return false;\r\n    const mgmtTitles = [\r\n      \"manager\",\r\n      \"director\",\r\n      \"vp\",\r\n      \"vice president\",\r\n      \"supervisor\",\r\n      \"coordinator\",\r\n      \"lead\",\r\n      \"head\",\r\n      \"chief\",\r\n      \"general manager\",\r\n    ];\r\n    return mgmtTitles.some((title) => position.toLowerCase().includes(title));\r\n  }\r\n}\r\n\r\nmodule.exports = EnhancedLeadDiscovery;\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":70,"duration":24.556},
{"type":"mark","name":"lsp.document_symbol","count":27,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/core/core-lead-discovery-engine.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":69,"duration":0.059},
{"type":"mark","name":"lsp.did_open","count":71,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/enrichment/production-cost-efficient-enrichment.js","languageId":"javascript","version":1,"text":"/**\r\n * Cost-Efficient Enrichment Orchestrator\r\n *\r\n * Implements tiered API usage: Free sources first, then low-cost APIs only when necessary\r\n * Maximizes data quality while minimizing API costs per lead\r\n */\r\n\r\nconst StateRegistryClient = require(\"../api-clients/enhanced-state-registry-client\");\r\nconst OpenCorporatesClient = require(\"../api-clients/opencorporates-client\");\r\nconst ComprehensiveHunterClient = require(\"../api-clients/api-hunter-comprehensive-client\");\r\nconst NeverBounceClient = require(\"../api-clients/neverbounce-client\");\r\n\r\nclass CostEfficientEnrichment {\r\n  constructor(apiKeys = {}) {\r\n    // Initialize clients\r\n    this.stateRegistry = new StateRegistryClient();\r\n    this.openCorporates = new OpenCorporatesClient(apiKeys.openCorporates);\r\n    this.hunter = apiKeys.hunter ? new HunterClient(apiKeys.hunter) : null;\r\n    this.neverBounce = apiKeys.neverBounce\r\n      ? new NeverBounceClient(apiKeys.neverBounce)\r\n      : null;\r\n\r\n    // Cost tracking\r\n    this.costs = {\r\n      hunter: 0.1, // ~$0.10 per email search\r\n      neverBounce: 0.018, // ~$0.018 per email verification\r\n      openCorporates: 0, // Free tier\r\n      stateRegistry: 0, // Free government APIs\r\n    };\r\n\r\n    // Quality thresholds\r\n    this.qualityThresholds = {\r\n      minimumConfidence: 70,\r\n      requiredFields: [\"ownerName\", \"ownerEmail\"],\r\n      emailVerificationThreshold: 80,\r\n    };\r\n\r\n    this.sessionStats = {\r\n      totalCost: 0,\r\n      apiCalls: {\r\n        free: 0,\r\n        lowCost: 0,\r\n        expensive: 0,\r\n      },\r\n      successRate: {\r\n        ownerFound: 0,\r\n        emailFound: 0,\r\n        emailVerified: 0,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Main enrichment method with cost optimization\r\n   */\r\n  async enrichBusinessOwnerData(business) {\r\n    console.log(\r\n      `\\n💰 Starting cost-efficient enrichment for: ${business.name}`\r\n    );\r\n\r\n    const enrichmentResult = {\r\n      originalBusiness: business,\r\n      ownerData: null,\r\n      enrichmentSources: [],\r\n      confidenceScore: 0,\r\n      estimatedCost: 0,\r\n      actualCost: 0,\r\n      qualityGrade: \"F\",\r\n    };\r\n\r\n    try {\r\n      // Phase 1: FREE SOURCES ONLY (Government & Open Data)\r\n      console.log(\r\n        \"📋 Phase 1: Searching FREE government and open data sources...\"\r\n      );\r\n      const freeResults = await this.searchFreeSources(business);\r\n\r\n      if (freeResults.ownerName) {\r\n        enrichmentResult.ownerData = freeResults;\r\n        enrichmentResult.enrichmentSources.push(...freeResults.sources);\r\n        console.log(\r\n          `✅ Found owner via free sources: ${freeResults.ownerName}`\r\n        );\r\n\r\n        // Try to find email using free methods\r\n        const freeEmail = await this.findEmailFreeMethods(\r\n          freeResults.ownerName,\r\n          business.website\r\n        );\r\n        if (freeEmail) {\r\n          enrichmentResult.ownerData.ownerEmail = freeEmail;\r\n          enrichmentResult.ownerData.emailSources = [\"free_generation\"];\r\n        }\r\n      }\r\n\r\n      // Phase 2: LOW-COST APIs (Only if free sources insufficient)\r\n      if (this.shouldProceedToLowCost(enrichmentResult.ownerData)) {\r\n        console.log(\r\n          \"💳 Phase 2: Proceeding to LOW-COST APIs for email discovery...\"\r\n        );\r\n        const lowCostResults = await this.searchLowCostAPIs(\r\n          business,\r\n          enrichmentResult.ownerData\r\n        );\r\n\r\n        if (lowCostResults.emails && lowCostResults.emails.length > 0) {\r\n          if (!enrichmentResult.ownerData) {\r\n            enrichmentResult.ownerData = { sources: [] };\r\n          }\r\n\r\n          enrichmentResult.ownerData.ownerEmail =\r\n            lowCostResults.emails[0].value;\r\n          enrichmentResult.ownerData.emailConfidence =\r\n            lowCostResults.emails[0].confidence;\r\n          enrichmentResult.ownerData.emailSources =\r\n            lowCostResults.emails[0].sources;\r\n          enrichmentResult.enrichmentSources.push(...lowCostResults.sources);\r\n          enrichmentResult.actualCost += lowCostResults.cost;\r\n        }\r\n      }\r\n\r\n      // Phase 3: EMAIL VERIFICATION (Only for high-value emails)\r\n      if (\r\n        enrichmentResult.ownerData?.ownerEmail &&\r\n        this.shouldVerifyEmail(enrichmentResult.ownerData)\r\n      ) {\r\n        console.log(\"🔍 Phase 3: Verifying email deliverability...\");\r\n        const verification = await this.verifyEmailDeliverability(\r\n          enrichmentResult.ownerData.ownerEmail\r\n        );\r\n\r\n        if (verification) {\r\n          enrichmentResult.ownerData.emailVerification = verification;\r\n          enrichmentResult.actualCost += this.costs.neverBounce;\r\n\r\n          // Remove email if verification fails\r\n          if (\r\n            !verification.isValid ||\r\n            verification.confidence <\r\n              this.qualityThresholds.emailVerificationThreshold\r\n          ) {\r\n            console.log(\"❌ Email failed verification - removing from results\");\r\n            delete enrichmentResult.ownerData.ownerEmail;\r\n            delete enrichmentResult.ownerData.emailConfidence;\r\n            delete enrichmentResult.ownerData.emailSources;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Calculate final quality metrics\r\n      enrichmentResult.confidenceScore = this.calculateOverallConfidence(\r\n        enrichmentResult.ownerData\r\n      );\r\n      enrichmentResult.qualityGrade = this.assignQualityGrade(\r\n        enrichmentResult.ownerData,\r\n        enrichmentResult.confidenceScore\r\n      );\r\n\r\n      // Update session statistics\r\n      this.updateSessionStats(enrichmentResult);\r\n\r\n      console.log(\r\n        `📊 Enrichment complete - Grade: ${\r\n          enrichmentResult.qualityGrade\r\n        }, Confidence: ${\r\n          enrichmentResult.confidenceScore\r\n        }%, Cost: $${enrichmentResult.actualCost.toFixed(4)}`\r\n      );\r\n\r\n      return enrichmentResult;\r\n    } catch (error) {\r\n      console.error(\"Enrichment failed:\", error);\r\n      enrichmentResult.error = error.message;\r\n      return enrichmentResult;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Phase 1: Search FREE sources (government, open data)\r\n   * Now includes Enhanced State Registry with 7 high-value APIs\r\n   * Provides 40-60% quality improvement at zero cost\r\n   */\r\n  async searchFreeSources(business) {\r\n    const results = {\r\n      ownerName: null,\r\n      ownerTitle: null,\r\n      officers: [],\r\n      sources: [],\r\n      // Enhanced validation data from new APIs\r\n      validationData: {},\r\n      qualityMetrics: {\r\n        confidenceScore: 0,\r\n        validationAPIs: 0,\r\n        successfulValidations: 0,\r\n      },\r\n    };\r\n\r\n    try {\r\n      // Enhanced State Business Registry Search (7 FREE APIs)\r\n      console.log(\r\n        \"🏛️ Searching Enhanced State Registries (7 free government APIs)...\"\r\n      );\r\n      const stateResults = await this.stateRegistry.searchBusinessAcrossStates(\r\n        business.name,\r\n        business.address,\r\n        business.state\r\n      );\r\n\r\n      if (stateResults && stateResults.isLegitimate) {\r\n        // Extract owner information from enhanced results\r\n        results.ownerName =\r\n          stateResults.registrationDetails.officers?.[0]?.name || null;\r\n        results.ownerTitle =\r\n          stateResults.registrationDetails.officers?.[0]?.title || \"Owner\";\r\n        results.officers = stateResults.registrationDetails.officers || [];\r\n\r\n        // Enhanced validation data\r\n        results.validationData = {\r\n          isLegitimate: stateResults.isLegitimate,\r\n          confidenceScore: stateResults.confidenceScore,\r\n          registeredStates: stateResults.registrationDetails.registeredStates,\r\n          businessTypes: stateResults.registrationDetails.businessTypes,\r\n          businessRegistrations: stateResults.validationResults,\r\n          propertyInformation: stateResults.propertyInformation,\r\n          riskAssessment: stateResults.riskAssessment,\r\n          legalHistory: stateResults.legalHistory,\r\n        };\r\n\r\n        results.qualityMetrics = {\r\n          confidenceScore: stateResults.confidenceScore,\r\n          validationAPIs: stateResults.qualityMetrics.totalAPIsQueried,\r\n          successfulValidations: stateResults.qualityMetrics.successfulAPIs,\r\n        };\r\n\r\n        results.sources.push(\"enhanced_state_registries\");\r\n        this.sessionStats.apiCalls.free +=\r\n          stateResults.qualityMetrics.totalAPIsQueried;\r\n\r\n        console.log(\r\n          `✅ Enhanced State Registries: ${stateResults.confidenceScore}% confidence, ${stateResults.qualityMetrics.successfulAPIs}/${stateResults.qualityMetrics.totalAPIsQueried} APIs successful`\r\n        );\r\n      }\r\n\r\n      // OpenCorporates (FREE tier) - fallback/additional validation\r\n      if (!results.ownerName) {\r\n        console.log(\"🌐 Searching OpenCorporates (backup)...\");\r\n        const openCorpResults = await this.openCorporates.searchBusinessOwners(\r\n          business.name,\r\n          business.address\r\n        );\r\n        if (openCorpResults && openCorpResults.ownerName) {\r\n          this.mergeFreeResults(results, openCorpResults);\r\n          this.sessionStats.apiCalls.free++;\r\n          console.log(\r\n            `✅ OpenCorporates: Found owner ${openCorpResults.ownerName}`\r\n          );\r\n        }\r\n      }\r\n\r\n      return results;\r\n    } catch (error) {\r\n      console.error(\"Free sources search failed:\", error);\r\n      return results;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Phase 2: Search LOW-COST APIs (Hunter.io)\r\n   */\r\n  async searchLowCostAPIs(business, ownerData) {\r\n    const results = {\r\n      emails: [],\r\n      cost: 0,\r\n      sources: [],\r\n    };\r\n\r\n    try {\r\n      if (!this.hunter) {\r\n        console.log(\"⚠️ Hunter.io not configured - skipping email discovery\");\r\n        return results;\r\n      }\r\n\r\n      if (!business.website) {\r\n        console.log(\"⚠️ No website URL - skipping Hunter.io email discovery\");\r\n        return results;\r\n      }\r\n\r\n      const domain = this.extractDomain(business.website);\r\n      if (!domain) {\r\n        console.log(\"⚠️ Invalid website domain - skipping Hunter.io\");\r\n        return results;\r\n      }\r\n\r\n      // Extract name components for targeted search\r\n      const firstName = ownerData?.ownerName\r\n        ? this.extractFirstName(ownerData.ownerName)\r\n        : null;\r\n      const lastName = ownerData?.ownerName\r\n        ? this.extractLastName(ownerData.ownerName)\r\n        : null;\r\n\r\n      // Search for emails at the business domain\r\n      const hunterResults = await this.hunter.findDomainEmails(\r\n        domain,\r\n        firstName,\r\n        lastName\r\n      );\r\n\r\n      if (hunterResults && hunterResults.emails.length > 0) {\r\n        results.emails = hunterResults.emails;\r\n        results.sources.push(\"hunter_io\");\r\n        results.cost += this.costs.hunter;\r\n        this.sessionStats.apiCalls.lowCost++;\r\n      }\r\n\r\n      return results;\r\n    } catch (error) {\r\n      console.error(\"Low-cost APIs search failed:\", error);\r\n      return results;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Phase 3: Email verification\r\n   */\r\n  async verifyEmailDeliverability(email) {\r\n    try {\r\n      if (!this.neverBounce) {\r\n        console.log(\r\n          \"⚠️ NeverBounce not configured - skipping email verification\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n      const verification = await this.neverBounce.verifyEmail(email);\r\n      this.sessionStats.apiCalls.lowCost++;\r\n\r\n      return verification;\r\n    } catch (error) {\r\n      console.error(\"Email verification failed:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decision logic methods\r\n   */\r\n  shouldProceedToLowCost(ownerData) {\r\n    // Only proceed to paid APIs if we found owner but no email\r\n    return ownerData && ownerData.ownerName && !ownerData.ownerEmail;\r\n  }\r\n\r\n  shouldVerifyEmail(ownerData) {\r\n    // Only verify emails that look promising and aren't obviously fake\r\n    if (!ownerData.ownerEmail) return false;\r\n\r\n    const email = ownerData.ownerEmail.toLowerCase();\r\n\r\n    // Skip verification for obviously fake emails\r\n    if (\r\n      email.includes(\"test\") ||\r\n      email.includes(\"example\") ||\r\n      email.includes(\"noreply\")\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    // Verify if email has decent confidence from discovery\r\n    return !ownerData.emailConfidence || ownerData.emailConfidence >= 50;\r\n  }\r\n\r\n  /**\r\n   * Free email finding methods\r\n   */\r\n  async findEmailFreeMethods(ownerName, websiteUrl) {\r\n    if (!websiteUrl || !ownerName) return null;\r\n\r\n    try {\r\n      const domain = this.extractDomain(websiteUrl);\r\n      if (!domain) return null;\r\n\r\n      const firstName = this.extractFirstName(ownerName);\r\n      const lastName = this.extractLastName(ownerName);\r\n\r\n      if (!firstName || !lastName) return null;\r\n\r\n      // Generate common email patterns\r\n      const patterns = [\r\n        `${firstName.toLowerCase()}@${domain}`,\r\n        `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${domain}`,\r\n        `${firstName.toLowerCase()}${lastName.toLowerCase()}@${domain}`,\r\n        `${firstName[0].toLowerCase()}${lastName.toLowerCase()}@${domain}`,\r\n        `${firstName.toLowerCase()}${lastName[0].toLowerCase()}@${domain}`,\r\n      ];\r\n\r\n      // Return the most likely pattern (without verification)\r\n      return patterns[0];\r\n    } catch (error) {\r\n      console.error(\"Free email generation failed:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Quality scoring and grading\r\n   */\r\n  calculateOverallConfidence(ownerData) {\r\n    if (!ownerData) return 0;\r\n\r\n    let score = 0;\r\n    let factors = 0;\r\n\r\n    // Owner name found\r\n    if (ownerData.ownerName) {\r\n      score += 30;\r\n      factors++;\r\n    }\r\n\r\n    // Email found\r\n    if (ownerData.ownerEmail) {\r\n      score += 40;\r\n      factors++;\r\n\r\n      // Email verified\r\n      if (ownerData.emailVerification && ownerData.emailVerification.isValid) {\r\n        score += 30;\r\n        factors++;\r\n      }\r\n    }\r\n\r\n    // Multiple sources increase confidence\r\n    if (ownerData.sources && ownerData.sources.length > 1) {\r\n      score += 10;\r\n    }\r\n\r\n    return factors > 0 ? Math.min(score, 100) : 0;\r\n  }\r\n\r\n  assignQualityGrade(ownerData, confidenceScore) {\r\n    if (!ownerData || !ownerData.ownerName) return \"F\";\r\n\r\n    if (\r\n      confidenceScore >= 90 &&\r\n      ownerData.ownerEmail &&\r\n      ownerData.emailVerification?.isValid\r\n    ) {\r\n      return \"A\";\r\n    } else if (confidenceScore >= 75 && ownerData.ownerEmail) {\r\n      return \"B\";\r\n    } else if (confidenceScore >= 60) {\r\n      return \"C\";\r\n    } else if (confidenceScore >= 40) {\r\n      return \"D\";\r\n    } else {\r\n      return \"F\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Utility methods\r\n   */\r\n  mergeFreeResults(target, source) {\r\n    if (source.ownerName && !target.ownerName) {\r\n      target.ownerName = source.ownerName;\r\n    }\r\n    if (source.ownerTitle && !target.ownerTitle) {\r\n      target.ownerTitle = source.ownerTitle;\r\n    }\r\n    if (source.officers && source.officers.length > 0) {\r\n      target.officers = [...target.officers, ...source.officers];\r\n    }\r\n    if (source.sources) {\r\n      target.sources = [...target.sources, ...source.sources];\r\n    }\r\n  }\r\n\r\n  extractDomain(url) {\r\n    try {\r\n      if (!url.startsWith(\"http\")) {\r\n        url = \"https://\" + url;\r\n      }\r\n      return new URL(url).hostname.replace(\"www.\", \"\");\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  extractFirstName(fullName) {\r\n    return fullName ? fullName.split(\" \")[0] : null;\r\n  }\r\n\r\n  extractLastName(fullName) {\r\n    if (!fullName) return null;\r\n    const parts = fullName.split(\" \");\r\n    return parts.length > 1 ? parts[parts.length - 1] : null;\r\n  }\r\n\r\n  updateSessionStats(result) {\r\n    this.sessionStats.totalCost += result.actualCost;\r\n\r\n    if (result.ownerData?.ownerName) {\r\n      this.sessionStats.successRate.ownerFound++;\r\n    }\r\n    if (result.ownerData?.ownerEmail) {\r\n      this.sessionStats.successRate.emailFound++;\r\n    }\r\n    if (result.ownerData?.emailVerification?.isValid) {\r\n      this.sessionStats.successRate.emailVerified++;\r\n    }\r\n  }\r\n\r\n  getSessionStats() {\r\n    return {\r\n      ...this.sessionStats,\r\n      averageCostPerLead:\r\n        this.sessionStats.totalCost /\r\n        Math.max(1, this.sessionStats.successRate.ownerFound),\r\n      totalApiCalls:\r\n        this.sessionStats.apiCalls.free +\r\n        this.sessionStats.apiCalls.lowCost +\r\n        this.sessionStats.apiCalls.expensive,\r\n    };\r\n  }\r\n\r\n  resetSessionStats() {\r\n    this.sessionStats = {\r\n      totalCost: 0,\r\n      apiCalls: { free: 0, lowCost: 0, expensive: 0 },\r\n      successRate: { ownerFound: 0, emailFound: 0, emailVerified: 0 },\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = CostEfficientEnrichment;\r\n"}}},
{"type":"measure","name":"lsp.did_open","count":71,"duration":10.154},
{"type":"mark","name":"lsp.document_symbol","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/enrichment/production-cost-efficient-enrichment.js"}}},
{"type":"mark","name":"lsp.did_open","count":72,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/api-clients/multi-api-email-discovery-client.js","languageId":"javascript","version":1,"text":"/**\n * PRODUCTION-READY MULTI-SOURCE EMAIL DISCOVERY ENGINE\n *\n * Comprehensive email discovery with fault tolerance, circuit breakers,\n * and multi-API redundancy to eliminate single-point-of-failure issues.\n *\n * Features:\n * - Circuit breaker pattern for API failures\n * - Multi-source email discovery (Hunter.io + Apollo + ZoomInfo)\n * - Exponential backoff for rate limiting\n * - Cost optimization and budget management\n * - Pattern-first approach to reduce API costs\n * - Comprehensive email validation pipeline\n *\n * Business Impact: Ensures 80%+ email discovery success rate\n */\n\nconst axios = require(\"axios\");\nconst ComprehensiveHunterClient = require(\"./api-hunter-comprehensive-client\");\nconst CostOptimizedApolloClient = require(\"./api-apollo-cost-optimized-client\");\n\nclass MultiSourceEmailDiscovery {\n  constructor(config = {}) {\n    this.config = {\n      // API Configuration\n      hunterApiKey: process.env.HUNTER_IO_API_KEY,\n      apolloApiKey: process.env.APOLLO_API_KEY,\n      zoomInfoApiKey: process.env.ZOOMINFO_API_KEY,\n      neverBounceApiKey: process.env.NEVERBOUNCE_API_KEY,\n\n      // Budget Management\n      maxDailyCost: config.maxDailyCost || 50.0,\n      maxPerLeadCost: config.maxPerLeadCost || 2.0,\n\n      // Circuit Breaker Settings\n      circuitBreakerThreshold: 5, // failures before opening circuit\n      circuitBreakerTimeout: 300000, // 5 minutes recovery time\n\n      // Rate Limiting\n      maxConcurrentRequests: 3,\n      requestDelay: 1000, // 1 second between requests\n\n      // Quality Thresholds\n      minEmailConfidence: 70,\n      maxEmailsPerBusiness: 5,\n\n      ...config,\n    };\n\n    // Initialize API clients\n    this.initializeClients();\n\n    // Circuit breaker states\n    this.circuitBreakers = {\n      hunter: { failures: 0, state: \"closed\", lastFailure: null },\n      apollo: { failures: 0, state: \"closed\", lastFailure: null },\n      zoominfo: { failures: 0, state: \"closed\", lastFailure: null },\n    };\n\n    // Performance tracking\n    this.stats = {\n      totalRequests: 0,\n      successfulRequests: 0,\n      totalCost: 0,\n      apiUsage: {\n        hunter: 0,\n        apollo: 0,\n        zoominfo: 0,\n        patterns: 0,\n      },\n      emailsFound: 0,\n      averageConfidence: 0,\n    };\n\n    console.log(\"🔧 Multi-Source Email Discovery Engine initialized\");\n    console.log(\n      `   💰 Budget: $${this.config.maxDailyCost}/day, $${this.config.maxPerLeadCost}/lead`\n    );\n    console.log(`   🎯 Min Confidence: ${this.config.minEmailConfidence}%`);\n  }\n\n  initializeClients() {\n    // Comprehensive Hunter.io client with all API endpoints\n    if (this.config.hunterApiKey) {\n      this.hunterClient = new ComprehensiveHunterClient(\n        this.config.hunterApiKey,\n        {\n          maxDailyCost: this.config.maxDailyCost * 0.6, // 60% budget allocation\n          maxPerLeadCost: this.config.maxPerLeadCost * 0.7,\n          minEmailConfidence: this.config.minEmailConfidence,\n        }\n      );\n      console.log(\"✅ Comprehensive Hunter.io client initialized\");\n    }\n\n    // Apollo.io client (organization enrichment - FREE)\n    if (this.config.apolloApiKey) {\n      this.apolloClient = new CostOptimizedApolloClient(\n        this.config.apolloApiKey\n      );\n      console.log(\n        \"✅ Cost-Optimized Apollo.io client initialized (FREE Organization Enrichment)\"\n      );\n    }\n\n    // ZoomInfo client (enterprise email discovery)\n    if (this.config.zoomInfoApiKey) {\n      this.zoomInfoClient = new ZoomInfoEmailClient(this.config.zoomInfoApiKey);\n      console.log(\"✅ ZoomInfo client initialized\");\n    }\n  }\n\n  /**\n   * MAIN EMAIL DISCOVERY ORCHESTRATOR\n   * Implements intelligent multi-source strategy with cost optimization\n   */\n  async discoverBusinessEmails(businessData) {\n    const startTime = Date.now();\n    this.stats.totalRequests++;\n\n    console.log(\n      `📧 Starting multi-source email discovery: ${businessData.business_name}`\n    );\n\n    const result = {\n      business_name: businessData.business_name,\n      domain: this.extractDomain(businessData.website),\n      emails: [],\n      sources_used: [],\n      total_cost: 0,\n      confidence_score: 0,\n      discovery_strategy: \"multi-source\",\n      processing_time: 0,\n      success: false,\n      error: null,\n    };\n\n    try {\n      // Validate domain before proceeding\n      if (!result.domain || this.isInvalidDomain(result.domain)) {\n        throw new Error(`Invalid domain for ${businessData.business_name}`);\n      }\n\n      // STAGE 1: Pattern-based discovery (FREE - always try first)\n      const patternEmails = await this.discoverPatternEmails(\n        businessData,\n        result.domain\n      );\n      if (patternEmails.length > 0) {\n        result.emails.push(...patternEmails);\n        result.sources_used.push(\"patterns\");\n        this.stats.apiUsage.patterns++;\n        console.log(`🎯 Found ${patternEmails.length} pattern-based emails`);\n      }\n\n      // STAGE 2: API-based discovery (PAID - use circuit breaker logic)\n      const remainingBudget = this.config.maxPerLeadCost - result.total_cost;\n      if (\n        remainingBudget > 0.1 &&\n        result.emails.length < this.config.maxEmailsPerBusiness\n      ) {\n        await this.discoverApiEmails(businessData, result, remainingBudget);\n      }\n\n      // STAGE 3: Email validation and quality scoring\n      if (result.emails.length > 0) {\n        result.emails = await this.validateAndScoreEmails(\n          result.emails,\n          result.domain\n        );\n        result.confidence_score = this.calculateOverallConfidence(\n          result.emails\n        );\n        result.success =\n          result.confidence_score >= this.config.minEmailConfidence;\n      }\n\n      // STAGE 4: Business contact extraction (Owner/Manager identification)\n      if (result.success) {\n        result.business_contacts = this.extractBusinessContacts(\n          result.emails,\n          businessData\n        );\n      }\n\n      result.processing_time = Date.now() - startTime;\n\n      if (result.success) {\n        this.stats.successfulRequests++;\n        this.stats.emailsFound += result.emails.length;\n      }\n\n      console.log(\n        `✅ Email discovery complete: ${result.emails.length} emails, ${\n          result.confidence_score\n        }% confidence, $${result.total_cost.toFixed(3)}`\n      );\n      return result;\n    } catch (error) {\n      console.error(\n        `❌ Email discovery failed for ${businessData.business_name}:`,\n        error.message\n      );\n      result.error = error.message;\n      result.processing_time = Date.now() - startTime;\n      return result;\n    }\n  }\n\n  /**\n   * STAGE 1: Pattern-based email discovery (FREE)\n   * Generate and validate common email patterns before using paid APIs\n   */\n  async discoverPatternEmails(businessData, domain) {\n    console.log(`🔍 Generating email patterns for domain: ${domain}`);\n\n    const patterns = [];\n\n    // Generate patterns based on available business data\n    const businessName = businessData.business_name || \"\";\n    const ownerName = businessData.owner_name || \"\";\n\n    // Common business email patterns\n    const commonPatterns = [\n      \"info\",\n      \"contact\",\n      \"hello\",\n      \"sales\",\n      \"admin\",\n      \"owner\",\n      \"manager\",\n      \"support\",\n    ];\n\n    // Add business-specific patterns\n    if (businessName) {\n      const businessWords = businessName\n        .toLowerCase()\n        .replace(/[^\\w\\s]/g, \"\")\n        .split(/\\s+/)\n        .filter(\n          (word) =>\n            word.length > 2 && ![\"llc\", \"inc\", \"corp\", \"ltd\"].includes(word)\n        );\n\n      businessWords.forEach((word) => {\n        commonPatterns.push(word);\n        if (word.length > 5) {\n          commonPatterns.push(word.substring(0, 5)); // First 5 letters\n        }\n      });\n    }\n\n    // Generate owner-specific patterns if available\n    if (ownerName && ownerName.includes(\" \")) {\n      const [firstName, ...lastNameParts] = ownerName.split(\" \");\n      const lastName = lastNameParts[0] || \"\";\n\n      if (firstName && lastName) {\n        patterns.push(\n          `${firstName.toLowerCase()}@${domain}`,\n          `${lastName.toLowerCase()}@${domain}`,\n          `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${domain}`,\n          `${firstName\n            .charAt(0)\n            .toLowerCase()}${lastName.toLowerCase()}@${domain}`,\n          `${firstName.toLowerCase()}${lastName\n            .charAt(0)\n            .toLowerCase()}@${domain}`\n        );\n      }\n    }\n\n    // Generate common patterns\n    commonPatterns.forEach((pattern) => {\n      patterns.push(`${pattern}@${domain}`);\n    });\n\n    // Remove duplicates and validate format\n    const validPatterns = [...new Set(patterns)]\n      .filter((email) => this.isValidEmailFormat(email))\n      .slice(0, 10); // Limit to prevent overwhelming\n\n    console.log(`📝 Generated ${validPatterns.length} email patterns to test`);\n\n    // Basic email pattern validation (check MX records, basic format)\n    const validEmails = [];\n    for (const email of validPatterns) {\n      try {\n        if (await this.quickEmailValidation(email)) {\n          validEmails.push({\n            value: email,\n            type: this.categorizeEmail(email),\n            confidence: 60, // Pattern-based emails get moderate confidence\n            source: \"pattern_generation\",\n            validation_method: \"mx_record_check\",\n          });\n        }\n      } catch (error) {\n        // Skip invalid patterns\n      }\n    }\n\n    return validEmails;\n  }\n\n  /**\n   * Apollo.io Organization Enrichment (FREE during trial, 1 credit post-trial)\n   * Enhanced with new pricing-aware client and intelligent pattern generation\n   */\n  async apolloOrganizationEnrichment(domain, businessData) {\n    console.log(`🏢 Apollo Organization Enrichment for domain: ${domain}`);\n\n    const startTime = Date.now();\n    const result = {\n      emails: [],\n      cost: 0,\n      source: \"apollo_organization_enrichment\",\n      organization_data: null,\n      enhanced_patterns: [],\n      credits_used: 0,\n    };\n\n    try {\n      // Use the new cost-optimized Apollo client\n      const enrichmentResult = await this.apolloClient.enrichOrganization({\n        domain,\n      });\n\n      if (enrichmentResult.success && enrichmentResult.matched) {\n        result.organization_data = enrichmentResult.organization;\n        result.cost = enrichmentResult.estimatedCost;\n        result.credits_used = enrichmentResult.creditsUsed;\n\n        console.log(\n          `✅ Organization enriched: ${result.organization_data.name}`\n        );\n        console.log(\n          `👥 Employees: ${result.organization_data.employees || \"Unknown\"}`\n        );\n        console.log(\n          `🏭 Industry: ${result.organization_data.industry || \"Unknown\"}`\n        );\n        console.log(`💰 Credits used: ${result.credits_used}`);\n\n        // Generate enhanced email patterns based on enriched data\n        const enhancedPatterns = this.generateEnhancedEmailPatterns(\n          result.organization_data,\n          domain,\n          businessData\n        );\n\n        // Validate enhanced patterns\n        for (const pattern of enhancedPatterns) {\n          try {\n            if (await this.quickEmailValidation(pattern.email)) {\n              result.emails.push({\n                value: pattern.email,\n                type: pattern.type,\n                confidence: pattern.confidence,\n                source: \"apollo_enhanced_pattern\",\n                validation_method: \"mx_record_check\",\n                reasoning: pattern.reasoning,\n                apollo_enhanced: true,\n              });\n            }\n          } catch (error) {\n            // Skip invalid patterns\n          }\n        }\n\n        console.log(\n          `📧 Generated ${result.emails.length} validated Apollo-enhanced email patterns`\n        );\n      } else {\n        console.log(`⚠️ Apollo organization not found for domain: ${domain}`);\n      }\n\n      const responseTime = Date.now() - startTime;\n      console.log(`⏱️ Apollo enrichment completed in ${responseTime}ms`);\n\n      return result;\n    } catch (error) {\n      console.error(`❌ Apollo organization enrichment failed:`, error.message);\n      throw new Error(`Apollo organization enrichment error: ${error.message}`);\n    }\n  }\n\n  /**\n   * Generate enhanced email patterns using Apollo organization data\n   */\n  generateEnhancedEmailPatterns(organizationData, domain, businessData) {\n    const patterns = [];\n\n    // Industry-specific email patterns\n    const industryPatterns = this.getIndustrySpecificEmailPatterns(\n      organizationData.industry\n    );\n    industryPatterns.forEach((pattern) => {\n      patterns.push({\n        email: `${pattern}@${domain}`,\n        type: \"industry_specific\",\n        confidence: 75,\n        reasoning: `Industry-specific pattern for ${organizationData.industry}`,\n      });\n    });\n\n    // Company size-based patterns\n    if (organizationData.employees) {\n      const sizePatterns = this.getCompanySizeEmailPatterns(\n        organizationData.employees\n      );\n      sizePatterns.forEach((pattern) => {\n        patterns.push({\n          email: `${pattern}@${domain}`,\n          type: \"company_size_specific\",\n          confidence: 70,\n          reasoning: `Company size pattern for ${organizationData.employees} employees`,\n        });\n      });\n    }\n\n    // Enhanced business name patterns using Apollo data\n    if (organizationData.name) {\n      const namePatterns = this.generateAdvancedNamePatterns(\n        organizationData.name,\n        domain\n      );\n      patterns.push(...namePatterns);\n    }\n\n    // Remove duplicates and return top patterns\n    const uniquePatterns = patterns\n      .filter(\n        (pattern, index, self) =>\n          index === self.findIndex((p) => p.email === pattern.email)\n      )\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 8); // Limit to top 8 patterns\n\n    return uniquePatterns;\n  }\n\n  /**\n   * Get industry-specific email patterns\n   */\n  getIndustrySpecificEmailPatterns(industry) {\n    const industryMap = {\n      technology: [\"tech\", \"dev\", \"it\", \"engineering\"],\n      healthcare: [\"medical\", \"health\", \"patient\", \"clinic\"],\n      finance: [\"accounting\", \"finance\", \"billing\", \"payments\"],\n      retail: [\"orders\", \"customers\", \"returns\", \"shopping\"],\n      \"real estate\": [\"properties\", \"listings\", \"realty\", \"homes\"],\n      legal: [\"legal\", \"attorney\", \"law\", \"counsel\"],\n      consulting: [\"consulting\", \"advisor\", \"strategy\", \"solutions\"],\n      marketing: [\"marketing\", \"campaigns\", \"advertising\", \"media\"],\n      default: [\"business\", \"team\", \"office\", \"company\"],\n    };\n\n    const normalizedIndustry = industry?.toLowerCase() || \"\";\n    for (const [key, patterns] of Object.entries(industryMap)) {\n      if (normalizedIndustry.includes(key)) {\n        return patterns;\n      }\n    }\n    return industryMap.default;\n  }\n\n  /**\n   * Get company size-based email patterns\n   */\n  getCompanySizeEmailPatterns(employeeCount) {\n    if (employeeCount <= 10) {\n      return [\"founder\", \"owner\", \"ceo\", \"director\"]; // Small company patterns\n    } else if (employeeCount <= 50) {\n      return [\"manager\", \"lead\", \"head\", \"coordinator\"]; // Medium company patterns\n    } else {\n      return [\"department\", \"division\", \"regional\", \"corporate\"]; // Large company patterns\n    }\n  }\n\n  /**\n   * Generate advanced name-based email patterns\n   */\n  generateAdvancedNamePatterns(companyName, domain) {\n    const patterns = [];\n    const cleanName = companyName\n      .toLowerCase()\n      .replace(/[^\\w\\s]/g, \"\")\n      .replace(/\\b(inc|llc|corp|ltd|company|co)\\b/g, \"\")\n      .trim();\n\n    const words = cleanName.split(/\\s+/).filter((word) => word.length > 2);\n\n    if (words.length >= 1) {\n      const primaryWord = words[0];\n      patterns.push({\n        email: `${primaryWord}@${domain}`,\n        type: \"company_name_primary\",\n        confidence: 80,\n        reasoning: `Primary company name: ${primaryWord}`,\n      });\n\n      if (primaryWord.length > 5) {\n        patterns.push({\n          email: `${primaryWord.substring(0, 5)}@${domain}`,\n          type: \"company_name_abbreviated\",\n          confidence: 75,\n          reasoning: `Abbreviated company name: ${primaryWord.substring(0, 5)}`,\n        });\n      }\n    }\n\n    if (words.length >= 2) {\n      const acronym = words.map((word) => word.charAt(0)).join(\"\");\n      patterns.push({\n        email: `${acronym}@${domain}`,\n        type: \"company_acronym\",\n        confidence: 70,\n        reasoning: `Company acronym: ${acronym}`,\n      });\n    }\n\n    return patterns;\n  }\n\n  /**\n   * STAGE 2: API-based email discovery with circuit breaker\n   * Intelligently use multiple APIs based on availability and cost\n   */\n  async discoverApiEmails(businessData, result, budgetRemaining) {\n    console.log(\n      `💰 API email discovery with $${budgetRemaining.toFixed(3)} budget`\n    );\n\n    // Determine API priority based on circuit breaker states and costs\n    const availableApis = this.getAvailableApis();\n\n    for (const api of availableApis) {\n      if (result.emails.length >= this.config.maxEmailsPerBusiness) break;\n      if (result.total_cost >= budgetRemaining) break;\n\n      try {\n        console.log(`🔌 Attempting ${api.name} email discovery...`);\n\n        const apiResult = await this.executeApiCall(\n          api,\n          businessData,\n          result.domain\n        );\n\n        if (apiResult && apiResult.emails && apiResult.emails.length > 0) {\n          // Add new unique emails\n          const newEmails = apiResult.emails.filter(\n            (newEmail) =>\n              !result.emails.some(\n                (existingEmail) =>\n                  existingEmail.value.toLowerCase() ===\n                  newEmail.value.toLowerCase()\n              )\n          );\n\n          result.emails.push(...newEmails);\n          result.sources_used.push(api.name);\n          result.total_cost += apiResult.cost || 0;\n\n          this.stats.apiUsage[api.id]++;\n          this.recordApiSuccess(api.id);\n\n          console.log(\n            `✅ ${api.name} found ${newEmails.length} new emails (Cost: $${(\n              apiResult.cost || 0\n            ).toFixed(3)})`\n          );\n\n          // Break if we found high-confidence emails\n          if (newEmails.some((email) => email.confidence > 80)) {\n            console.log(\n              `🎯 High-confidence emails found, stopping API discovery`\n            );\n            break;\n          }\n        } else {\n          console.log(`⚠️ ${api.name} returned no results`);\n        }\n      } catch (error) {\n        console.error(`❌ ${api.name} failed:`, error.message);\n        this.recordApiFailure(api.id, error);\n      }\n\n      // Respect rate limits\n      await this.delay(this.config.requestDelay);\n    }\n\n    this.stats.totalCost += result.total_cost;\n  }\n\n  /**\n   * Circuit breaker logic - determine available APIs\n   */\n  getAvailableApis() {\n    const currentTime = Date.now();\n    const apis = [];\n\n    // Hunter.io (Primary)\n    if (this.isApiAvailable(\"hunter\", currentTime) && this.hunterClient) {\n      apis.push({\n        id: \"hunter\",\n        name: \"Hunter.io\",\n        cost: 0.1,\n        client: this.hunterClient,\n      });\n    }\n\n    // Apollo.io (Secondary)\n    if (this.isApiAvailable(\"apollo\", currentTime) && this.apolloClient) {\n      apis.push({\n        id: \"apollo\",\n        name: \"Apollo.io\",\n        cost: 0.15,\n        client: this.apolloClient,\n      });\n    }\n\n    // ZoomInfo (Tertiary)\n    if (this.isApiAvailable(\"zoominfo\", currentTime) && this.zoomInfoClient) {\n      apis.push({\n        id: \"zoominfo\",\n        name: \"ZoomInfo\",\n        cost: 0.25,\n        client: this.zoomInfoClient,\n      });\n    }\n\n    // Sort by cost (cheapest first)\n    return apis.sort((a, b) => a.cost - b.cost);\n  }\n\n  /**\n   * Check if API is available based on circuit breaker state\n   */\n  isApiAvailable(apiId, currentTime) {\n    const breaker = this.circuitBreakers[apiId];\n\n    if (breaker.state === \"closed\") {\n      return true;\n    }\n\n    if (breaker.state === \"open\") {\n      // Check if enough time has passed to attempt recovery\n      if (\n        currentTime - breaker.lastFailure >\n        this.config.circuitBreakerTimeout\n      ) {\n        breaker.state = \"half-open\";\n        console.log(\n          `🔄 ${apiId} circuit breaker: HALF-OPEN (attempting recovery)`\n        );\n        return true;\n      }\n      return false;\n    }\n\n    if (breaker.state === \"half-open\") {\n      return true; // Allow one test request\n    }\n\n    return false;\n  }\n\n  /**\n   * Execute API call with error handling\n   */\n  async executeApiCall(api, businessData, domain) {\n    try {\n      let result;\n\n      switch (api.id) {\n        case \"hunter\":\n          // Use comprehensive Hunter.io discovery with all endpoints\n          result = await this.hunterClient.comprehensiveEmailDiscovery(\n            businessData\n          );\n\n          // Transform result to match expected format\n          if (result && result.success) {\n            return {\n              emails: result.emails || [],\n              cost: result.total_cost || 0,\n              source: \"hunter_comprehensive\",\n              enrichment_data: {\n                company: result.companyData,\n                persons: result.personData,\n                combined: result.combinedData,\n                similar_companies: result.similarCompanies,\n              },\n              confidence_score: result.confidence_score,\n              endpoints_used: result.endpoints_used,\n            };\n          }\n\n          return { emails: [], cost: 0, source: \"hunter_comprehensive\" };\n\n        case \"apollo\":\n          result = await this.apolloOrganizationEnrichment(\n            domain,\n            businessData\n          );\n          break;\n        case \"zoominfo\":\n          result = await this.zoomInfoClient.discoverEmails(\n            domain,\n            businessData\n          );\n          break;\n        default:\n          throw new Error(`Unknown API: ${api.id}`);\n      }\n\n      return result;\n    } catch (error) {\n      // Handle rate limiting specifically\n      if (\n        error.message.includes(\"429\") ||\n        error.message.includes(\"rate limit\")\n      ) {\n        console.warn(\n          `⚠️ ${api.name} rate limited - implementing exponential backoff`\n        );\n\n        // Implement exponential backoff for rate limiting\n        const backoffDelay = Math.min(\n          30000,\n          Math.pow(2, this.circuitBreakers[api.id].failures) * 1000\n        );\n        await this.delay(backoffDelay);\n\n        // Retry once after backoff\n        if (api.id === \"hunter\" && this.hunterClient) {\n          return await this.hunterClient.discoverBusinessEmails(businessData);\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Record API success for circuit breaker\n   */\n  recordApiSuccess(apiId) {\n    const breaker = this.circuitBreakers[apiId];\n\n    if (breaker.state === \"half-open\") {\n      breaker.state = \"closed\";\n      breaker.failures = 0;\n      console.log(`✅ ${apiId} circuit breaker: CLOSED (recovered)`);\n    } else {\n      breaker.failures = Math.max(0, breaker.failures - 1); // Gradually reduce failure count on success\n    }\n  }\n\n  /**\n   * Record API failure for circuit breaker\n   */\n  recordApiFailure(apiId, error) {\n    const breaker = this.circuitBreakers[apiId];\n    breaker.failures++;\n    breaker.lastFailure = Date.now();\n\n    if (breaker.failures >= this.config.circuitBreakerThreshold) {\n      breaker.state = \"open\";\n      console.warn(\n        `🚫 ${apiId} circuit breaker: OPEN (${breaker.failures} failures)`\n      );\n      console.warn(`   Last error: ${error.message}`);\n      console.warn(\n        `   Recovery attempt in ${Math.floor(\n          this.config.circuitBreakerTimeout / 60000\n        )} minutes`\n      );\n    }\n  }\n\n  /**\n   * STAGE 3: Email validation and quality scoring\n   */\n  async validateAndScoreEmails(emails, domain) {\n    console.log(`🔍 Validating ${emails.length} discovered emails...`);\n\n    const validatedEmails = [];\n\n    for (const email of emails) {\n      try {\n        // Enhanced email validation\n        const validation = await this.comprehensiveEmailValidation(\n          email,\n          domain\n        );\n\n        if (\n          validation.isValid &&\n          validation.confidence >= this.config.minEmailConfidence\n        ) {\n          validatedEmails.push({\n            ...email,\n            confidence: validation.confidence,\n            validation_details: validation.details,\n            deliverability_score: validation.deliverabilityScore,\n            is_role_based: validation.isRoleBased,\n            is_disposable: validation.isDisposable,\n          });\n        }\n      } catch (error) {\n        console.warn(\n          `⚠️ Email validation failed for ${email.value}: ${error.message}`\n        );\n      }\n    }\n\n    // Sort by confidence score (highest first)\n    return validatedEmails\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, this.config.maxEmailsPerBusiness);\n  }\n\n  /**\n   * Comprehensive email validation using multiple methods\n   */\n  async comprehensiveEmailValidation(email, domain) {\n    const validation = {\n      isValid: false,\n      confidence: 0,\n      details: {},\n      deliverabilityScore: 0,\n      isRoleBased: false,\n      isDisposable: false,\n    };\n\n    try {\n      // 1. Format validation\n      if (!this.isValidEmailFormat(email.value)) {\n        return validation;\n      }\n\n      // 2. Domain consistency check\n      const emailDomain = email.value.split(\"@\")[1];\n      validation.details.domainMatch = emailDomain === domain;\n\n      // 3. Role-based email detection\n      validation.isRoleBased = this.isRoleBasedEmail(email.value);\n\n      // 4. Disposable email detection\n      validation.isDisposable = await this.isDisposableEmail(emailDomain);\n\n      // 5. MX record validation\n      validation.details.mxValid = await this.checkMXRecord(emailDomain);\n\n      // 6. NeverBounce validation (if available)\n      if (this.config.neverBounceApiKey) {\n        const nbResult = await this.neverBounceValidation(email.value);\n        if (nbResult) {\n          validation.details.neverBounce = nbResult;\n          validation.deliverabilityScore = nbResult.score || 0;\n        }\n      }\n\n      // Calculate overall confidence\n      validation.confidence = this.calculateEmailConfidence(email, validation);\n      validation.isValid =\n        validation.confidence >= this.config.minEmailConfidence;\n\n      return validation;\n    } catch (error) {\n      console.error(\n        `Email validation error for ${email.value}:`,\n        error.message\n      );\n      return validation;\n    }\n  }\n\n  /**\n   * Calculate email confidence score based on multiple factors\n   */\n  calculateEmailConfidence(email, validation) {\n    let confidence = email.confidence || 50;\n\n    // Domain match bonus\n    if (validation.details.domainMatch) {\n      confidence += 10;\n    }\n\n    // MX record bonus\n    if (validation.details.mxValid) {\n      confidence += 15;\n    }\n\n    // Source reliability bonus\n    const sourceBonus = {\n      hunter_io: 20,\n      apollo: 18, // Increased for organization enrichment data quality\n      apollo_enhanced_pattern: 22, // Higher bonus for Apollo-enhanced patterns\n      apollo_organization_enrichment: 20,\n      zoominfo: 25,\n      pattern_generation: 5,\n    };\n    confidence += sourceBonus[email.source] || 0;\n\n    // NeverBounce integration\n    if (validation.deliverabilityScore > 0) {\n      confidence = Math.max(confidence, validation.deliverabilityScore);\n    }\n\n    // Penalties\n    if (validation.isRoleBased) confidence -= 10;\n    if (validation.isDisposable) confidence -= 30;\n\n    return Math.min(100, Math.max(0, confidence));\n  }\n\n  /**\n   * Extract business contacts (Owner, Manager, etc.)\n   */\n  extractBusinessContacts(emails, businessData) {\n    const contacts = {\n      owner: null,\n      manager: null,\n      primary: null,\n      all: emails,\n    };\n\n    // Look for owner/manager emails\n    for (const email of emails) {\n      const address = email.value.toLowerCase();\n\n      if (\n        address.includes(\"owner\") ||\n        address.includes(\"ceo\") ||\n        address.includes(\"president\")\n      ) {\n        contacts.owner = email;\n      } else if (address.includes(\"manager\") || address.includes(\"director\")) {\n        contacts.manager = email;\n      } else if (address.includes(\"info\") || address.includes(\"contact\")) {\n        contacts.primary = contacts.primary || email;\n      }\n    }\n\n    // If we have owner name, try to match\n    if (businessData.owner_name && businessData.owner_name.includes(\" \")) {\n      const [firstName, lastName] = businessData.owner_name.split(\" \");\n      const ownerEmail = emails.find((email) => {\n        const addr = email.value.toLowerCase();\n        return (\n          addr.includes(firstName.toLowerCase()) &&\n          addr.includes(lastName.toLowerCase())\n        );\n      });\n\n      if (ownerEmail) {\n        contacts.owner = ownerEmail;\n      }\n    }\n\n    // Set primary as highest confidence email if not set\n    if (!contacts.primary) {\n      contacts.primary = emails[0]; // Already sorted by confidence\n    }\n\n    return contacts;\n  }\n\n  /**\n   * Calculate overall confidence score for all discovered emails\n   */\n  calculateOverallConfidence(emails) {\n    if (emails.length === 0) return 0;\n\n    // Weight by email type and confidence\n    let totalWeight = 0;\n    let weightedScore = 0;\n\n    for (const email of emails) {\n      const typeWeight = {\n        personal: 3,\n        professional: 2,\n        generic: 1,\n      };\n\n      const weight = typeWeight[email.type] || 1;\n      totalWeight += weight;\n      weightedScore += email.confidence * weight;\n    }\n\n    return Math.round(weightedScore / totalWeight);\n  }\n\n  /**\n   * Generate performance statistics\n   */\n  getPerformanceStats() {\n    return {\n      ...this.stats,\n      successRate:\n        this.stats.totalRequests > 0\n          ? (\n              (this.stats.successfulRequests / this.stats.totalRequests) *\n              100\n            ).toFixed(1)\n          : 0,\n      averageCostPerLead:\n        this.stats.successfulRequests > 0\n          ? (this.stats.totalCost / this.stats.successfulRequests).toFixed(3)\n          : 0,\n      averageEmailsPerLead:\n        this.stats.successfulRequests > 0\n          ? (this.stats.emailsFound / this.stats.successfulRequests).toFixed(1)\n          : 0,\n      circuitBreakerStatus: this.circuitBreakers,\n    };\n  }\n\n  // ========================\n  // UTILITY FUNCTIONS\n  // ========================\n\n  extractDomain(website) {\n    if (!website) return null;\n    try {\n      const url = website.startsWith(\"http\") ? website : `https://${website}`;\n      return new URL(url).hostname.replace(\"www.\", \"\");\n    } catch {\n      return null;\n    }\n  }\n\n  isInvalidDomain(domain) {\n    const invalidPatterns = [\n      \"localhost\",\n      \"127.0.0.1\",\n      \"example.com\",\n      \"test.com\",\n      \"facebook.com\",\n      \"instagram.com\",\n      \"twitter.com\",\n      \"linkedin.com\",\n    ];\n    return (\n      !domain || invalidPatterns.some((pattern) => domain.includes(pattern))\n    );\n  }\n\n  isValidEmailFormat(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  categorizeEmail(email) {\n    const address = email.toLowerCase();\n\n    if (\n      address.includes(\".\") &&\n      !address.includes(\"info\") &&\n      !address.includes(\"contact\")\n    ) {\n      return \"personal\";\n    } else if (\n      address.includes(\"info\") ||\n      address.includes(\"contact\") ||\n      address.includes(\"sales\")\n    ) {\n      return \"generic\";\n    } else {\n      return \"professional\";\n    }\n  }\n\n  isRoleBasedEmail(email) {\n    const rolePatterns = [\n      \"info@\",\n      \"contact@\",\n      \"admin@\",\n      \"support@\",\n      \"sales@\",\n      \"marketing@\",\n      \"no-reply@\",\n      \"noreply@\",\n    ];\n    return rolePatterns.some((pattern) =>\n      email.toLowerCase().includes(pattern)\n    );\n  }\n\n  async isDisposableEmail(domain) {\n    // Simple disposable email detection - in production, use a comprehensive list\n    const disposableDomains = [\n      \"tempmail.org\",\n      \"10minutemail.com\",\n      \"guerrillamail.com\",\n    ];\n    return disposableDomains.includes(domain.toLowerCase());\n  }\n\n  async checkMXRecord(domain) {\n    // Basic MX record check - implement DNS lookup\n    try {\n      // Placeholder - implement actual MX record lookup\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async quickEmailValidation(email) {\n    // Quick validation for pattern-based emails\n    // Check format and basic domain validity\n    return this.isValidEmailFormat(email);\n  }\n\n  async neverBounceValidation(email) {\n    // NeverBounce API integration\n    if (!this.config.neverBounceApiKey) return null;\n\n    try {\n      // Implement NeverBounce API call\n      return { score: 75, result: \"deliverable\" };\n    } catch {\n      return null;\n    }\n  }\n\n  delay(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\n/**\n * Apollo.io integration is now handled by CostOptimizedApolloClient\n * Focus: FREE Organization Enrichment during trial + Enhanced Email Pattern Generation\n *\n * ACCOUNT STATUS: Paid Basic Account (Free Trial)\n * AVAILABLE ENDPOINTS: All Apollo endpoints available with credit costs\n *\n * PRICING (Based on provided table):\n * ✅ Organization Enrichment: 1 credit per result (FREE during trial)\n * ✅ People Search: 1 credit per page returned\n * ✅ Organization Search: 1 credit per page returned\n * ✅ People Enrichment: 1 credit/email + 8 credits/phone (avoid phones)\n * ✅ Bulk Operations: Same pricing as single operations\n *\n * OPTIMIZATION STRATEGY:\n * 1. Use Organization Enrichment (FREE during trial) for company intelligence\n * 2. Generate enhanced email patterns from Apollo organization data\n * 3. Avoid expensive phone number revelation (8 credits each)\n * 4. Use People Enrichment only for emails, not phones\n * 5. Implement credit budgeting and cost tracking\n *\n * Key Features:\n * - Organization data enrichment (industry, employee count, revenue)\n * - Industry-specific email pattern generation\n * - Company size-based email patterns\n * - Advanced name-based patterns using Apollo data\n * - Cost optimization with credit awareness\n *\n * Upgrade Path: Apollo Pro ($39/month) for advanced people search & mobile phone data\n */\n\n/**\n * ZoomInfo Email Client (Enterprise Grade)\n */\nclass ZoomInfoEmailClient {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseUrl = \"https://api.zoominfo.com/lookup\";\n    this.costPerRequest = 0.25;\n  }\n\n  async discoverEmails(domain, businessData) {\n    // Implement ZoomInfo API integration\n    console.log(`🔍 ZoomInfo discovery for domain: ${domain}`);\n\n    try {\n      // Placeholder for ZoomInfo API call\n      return {\n        emails: [],\n        cost: this.costPerRequest,\n        source: \"zoominfo\",\n      };\n    } catch (error) {\n      throw new Error(`ZoomInfo API error: ${error.message}`);\n    }\n  }\n}\n\nmodule.exports = MultiSourceEmailDiscovery;\n"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":70,"duration":0.085},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":71,"duration":0.098},
{"type":"measure","name":"lsp.did_open","count":72,"duration":32.4},
{"type":"mark","name":"lsp.document_symbol","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/api-clients/multi-api-email-discovery-client.js"}}},
{"type":"mark","name":"lsp.did_close","count":57,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/core/core-business-discovery-engine.js"}}},
{"type":"measure","name":"lsp.did_close","count":57,"duration":0.901},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":72,"duration":0.114},
{"type":"mark","name":"lsp.did_close","count":58,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/core/core-lead-discovery-engine.js"}}},
{"type":"measure","name":"lsp.did_close","count":58,"duration":1.128},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":73,"duration":0.088},
{"type":"mark","name":"lsp.did_close","count":59,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/enrichment/production-cost-efficient-enrichment.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":74,"duration":0.061},
{"type":"measure","name":"lsp.did_close","count":59,"duration":6.848},
{"type":"mark","name":"lsp.did_close","count":60,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/api-clients/multi-api-email-discovery-client.js"}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":75,"duration":0.043},
{"type":"measure","name":"lsp.did_close","count":60,"duration":0.705},
{"type":"mark","name":"lsp.did_open","count":73,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md","languageId":"markdown","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":73,"duration":0.043},
{"type":"mark","name":"lsp.document_symbol","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"}}},
{"type":"mark","name":"lsp.did_change_batched","count":53,"args":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},
{"type":"measure","name":"lsp.did_change_batched","count":53,"duration":177.959},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":183,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":184,"duration":0.022},
{"type":"mark","name":"lsp.inlay_hint","count":28,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":44,"character":0}}}},
{"type":"mark","name":"lsp.folding_range","count":13,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"}}},
{"type":"mark","name":"lsp.inlay_hint","count":29,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":44,"character":0}}}},
{"type":"mark","name":"lsp.document_symbol","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"}}},
{"type":"mark","name":"lsp.code_action","count":89,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":50,"duration":0.036},
{"type":"mark","name":"lsp.code_lens","count":16,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"}}},
{"type":"mark","name":"lsp.document_symbol","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"}}},
{"type":"mark","name":"lsp.code_action","count":90,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":91,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_action","count":92,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_open","count":74,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/modules/api-clients/chamber-directory-client.js","languageId":"javascript","version":1,"text":""}}},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":76,"duration":0.057},
{"type":"measure","name":"lsp.did_open","count":74,"duration":4.277},
{"type":"mark","name":"lsp.did_change_batched","count":54,"args":"file:///workspaces/ProspectPro/modules/api-clients/chamber-directory-client.js"},
{"type":"measure","name":"lsp.did_change_batched","count":54,"duration":56.151},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":185,"duration":0.014},
{"type":"measure","name":"lsp.testing_update","count":77,"duration":0.066},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":186,"duration":0.017},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":51,"duration":0.024},
{"type":"mark","name":"lsp.code_action","count":93,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":55,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":78,"duration":0.214},
{"type":"measure","name":"lsp.did_change_batched","count":55,"duration":3.903},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":24,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",82]}},
{"type":"mark","name":"tsc.op.op_script_names"},
{"type":"measure","name":"tsc.op.op_script_names","count":4,"duration":0.199},
{"type":"mark","name":"tsc.op.op_load","count":194,"args":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},
{"type":"measure","name":"tsc.op.op_load","count":194,"duration":0.04},
{"type":"mark","name":"tsc.op.op_load","count":195,"args":"file:///workspaces/ProspectPro/CONTACT_INFO_VERIFICATION_REPORT.md"},
{"type":"measure","name":"tsc.op.op_load","count":195,"duration":0.029},
{"type":"mark","name":"tsc.op.op_load","count":196,"args":"file:///workspaces/ProspectPro/UI_CSV_FIXES_COMPLETE.md"},
{"type":"measure","name":"tsc.op.op_load","count":196,"duration":0.038},
{"type":"mark","name":"tsc.op.op_load","count":197,"args":"file:///workspaces/ProspectPro/modules/api-clients/chamber-directory-client.js"},
{"type":"measure","name":"tsc.op.op_load","count":197,"duration":0.042},
{"type":"mark","name":"tsc.op.op_resolve","count":167,"args":{"base":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.58.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":167,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":168,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/index.d.ts","specifiers":[[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"./SupabaseClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":168,"duration":0.062},
{"type":"mark","name":"tsc.op.op_resolve","count":169,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/SupabaseClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"],[false,"./lib/SupabaseAuthClient.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":169,"duration":0.044},
{"type":"mark","name":"tsc.op.op_resolve","count":170,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/index.d.ts","specifiers":[[false,"./FunctionsClient.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":170,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":171,"args":{"base":"https://esm.sh/@supabase/functions-js@2.5.0/dist/module/FunctionsClient.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":171,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":172,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts","specifiers":[[false,"./PostgrestClient.d.ts"],[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./PostgrestTransformBuilder.d.ts"],[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestError.d.ts"],[false,"./types.d.ts"],[false,"./select-query-parser/result.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":172,"duration":0.037},
{"type":"mark","name":"tsc.op.op_resolve","count":173,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestClient.d.ts","specifiers":[[false,"./PostgrestQueryBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":173,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":174,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestQueryBuilder.d.ts","specifiers":[[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":174,"duration":0.027},
{"type":"mark","name":"tsc.op.op_resolve","count":175,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestFilterBuilder.d.ts","specifiers":[[false,"./PostgrestTransformBuilder.d.ts"],[false,"./select-query-parser/utils.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":175,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":176,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestTransformBuilder.d.ts","specifiers":[[false,"./PostgrestBuilder.d.ts"],[false,"./PostgrestFilterBuilder.d.ts"],[false,"./select-query-parser/result.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":176,"duration":0.026},
{"type":"mark","name":"tsc.op.op_resolve","count":177,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/PostgrestBuilder.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./select-query-parser/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":177,"duration":0.015},
{"type":"mark","name":"tsc.op.op_resolve","count":178,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/types.d.ts","specifiers":[[false,"./PostgrestError.d.ts"],[false,"./select-query-parser/types.d.ts"],[false,"./select-query-parser/utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":178,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":179,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/types.d.ts","specifiers":[[false,"../types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":179,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":180,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/utils.d.ts","specifiers":[[false,"./parser.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":180,"duration":0.04},
{"type":"mark","name":"tsc.op.op_resolve","count":181,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/parser.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":181,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":182,"args":{"base":"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/select-query-parser/result.d.ts","specifiers":[[false,"../types.d.ts"],[false,"./types.d.ts"],[false,"./parser.d.ts"],[false,"./types.d.ts"],[false,"./utils.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":182,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":183,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts","specifiers":[[false,"./RealtimeClient.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./lib/websocket-factory.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":183,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":184,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeClient.d.ts","specifiers":[[false,"./lib/websocket-factory.d.ts"],[false,"./lib/constants.d.ts"],[false,"./lib/serializer.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimeChannel.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":184,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":185,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimeChannel.d.ts","specifiers":[[false,"./lib/constants.d.ts"],[false,"./lib/push.d.ts"],[false,"./RealtimeClient.d.ts"],[false,"./lib/timer.d.ts"],[false,"./RealtimePresence.d.ts"],[false,"./RealtimePresence.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":185,"duration":0.043},
{"type":"mark","name":"tsc.op.op_resolve","count":186,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/lib/push.d.ts","specifiers":[[false,"../RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":186,"duration":0.024},
{"type":"mark","name":"tsc.op.op_resolve","count":187,"args":{"base":"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/RealtimePresence.d.ts","specifiers":[[false,"https://esm.sh/@types/phoenix@1.6.6/index.d.ts"],[false,"./RealtimeChannel.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":187,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":188,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts","specifiers":[[false,"./StorageClient.d.ts"],[false,"./StorageClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":188,"duration":0.022},
{"type":"mark","name":"tsc.op.op_resolve","count":189,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/StorageClient.d.ts","specifiers":[[false,"./packages/StorageFileApi.d.ts"],[false,"./packages/StorageBucketApi.d.ts"],[false,"./lib/fetch.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":189,"duration":0.016},
{"type":"mark","name":"tsc.op.op_resolve","count":190,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageFileApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"./BlobDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":190,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":191,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":191,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":192,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/lib/types.d.ts","specifiers":[[false,"./errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":192,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":193,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/BlobDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"],[false,"./StreamDownloadBuilder.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":193,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":194,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StreamDownloadBuilder.d.ts","specifiers":[[false,"../lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":194,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":195,"args":{"base":"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/packages/StorageBucketApi.d.ts","specifiers":[[false,"../lib/errors.d.ts"],[false,"../lib/fetch.d.ts"],[false,"../lib/types.d.ts"],[false,"../StorageClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":195,"duration":0.017},
{"type":"mark","name":"tsc.op.op_resolve","count":196,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/SupabaseAuthClient.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":196,"duration":0.012},
{"type":"mark","name":"tsc.op.op_resolve","count":197,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./GoTrueClient.d.ts"],[false,"./AuthAdminApi.d.ts"],[false,"./AuthClient.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/locks.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":197,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":198,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueAdminApi.d.ts","specifiers":[[false,"./lib/fetch.d.ts"],[false,"./lib/types.d.ts"],[false,"./lib/errors.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":198,"duration":0.014},
{"type":"mark","name":"tsc.op.op_resolve","count":199,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/fetch.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":199,"duration":0.007},
{"type":"mark","name":"tsc.op.op_resolve","count":200,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/types.d.ts","specifiers":[[false,"./web3/ethereum.d.ts"],[false,"./errors.d.ts"],[false,"./fetch.d.ts"],[false,"./web3/solana.d.ts"],[false,"./web3/ethereum.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":200,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":201,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/errors.d.ts","specifiers":[[false,"./types.d.ts"],[false,"./error-codes.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":201,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":202,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/GoTrueClient.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"],[false,"./lib/errors.d.ts"],[false,"./lib/fetch.d.ts"],[false,"./lib/helpers.d.ts"],[false,"./lib/types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":202,"duration":0.02},
{"type":"mark","name":"tsc.op.op_resolve","count":203,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/lib/helpers.d.ts","specifiers":[[false,"./types.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":203,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":204,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthAdminApi.d.ts","specifiers":[[false,"./GoTrueAdminApi.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":204,"duration":0.01},
{"type":"mark","name":"tsc.op.op_resolve","count":205,"args":{"base":"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/AuthClient.d.ts","specifiers":[[false,"./GoTrueClient.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":205,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":206,"args":{"base":"https://esm.sh/@supabase/supabase-js@2.58.0/dist/module/lib/types.d.ts","specifiers":[[false,"https://esm.sh/@supabase/auth-js@2.72.0/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/realtime-js@2.15.5/dist/module/index.d.ts"],[false,"https://esm.sh/@supabase/postgrest-js@1.21.4/dist/cjs/index.d.ts"],[false,"https://esm.sh/@supabase/storage-js@2.12.2/dist/module/index.d.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":206,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":198,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":198,"duration":0.029},
{"type":"mark","name":"tsc.op.op_resolve","count":207,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":207,"duration":0.028},
{"type":"mark","name":"tsc.op.op_resolve","count":208,"args":{"base":"https://deno.land/std@0.168.0/http/server.ts","specifiers":[[false,"../async/mod.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":208,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":209,"args":{"base":"https://deno.land/std@0.168.0/async/mod.ts","specifiers":[[false,"./abortable.ts"],[false,"./deadline.ts"],[false,"./debounce.ts"],[false,"./deferred.ts"],[false,"./delay.ts"],[false,"./mux_async_iterator.ts"],[false,"./pool.ts"],[false,"./tee.ts"],[false,"./retry.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":209,"duration":0.033},
{"type":"mark","name":"tsc.op.op_resolve","count":210,"args":{"base":"https://deno.land/std@0.168.0/async/abortable.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":210,"duration":0.008},
{"type":"mark","name":"tsc.op.op_resolve","count":211,"args":{"base":"https://deno.land/std@0.168.0/async/deadline.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":211,"duration":0.011},
{"type":"mark","name":"tsc.op.op_resolve","count":212,"args":{"base":"https://deno.land/std@0.168.0/async/mux_async_iterator.ts","specifiers":[[false,"./deferred.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":212,"duration":0.009},
{"type":"mark","name":"tsc.op.op_resolve","count":213,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/campaign-export/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":213,"duration":0.021},
{"type":"mark","name":"tsc.op.op_resolve","count":214,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/enhanced-business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":214,"duration":0.015},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":24,"duration":221.145},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":24,"duration":221.298},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":22,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":22,"duration":0.145},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":22,"duration":0.208},
{"type":"measure","name":"lsp.diagnostic","count":187,"duration":221.743},
{"type":"mark","name":"lsp.code_action","count":94,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":52,"duration":0.057},
{"type":"mark","name":"lsp.code_action","count":95,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":56,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":79,"duration":1.763},
{"type":"measure","name":"lsp.did_change_batched","count":56,"duration":15.779},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":25,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",83]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":21,"duration":0.033},
{"type":"mark","name":"tsc.op.op_load","count":199,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":199,"duration":0.035},
{"type":"mark","name":"tsc.op.op_resolve","count":215,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":215,"duration":0.035},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":25,"duration":148.375},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":25,"duration":152.392},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":23,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":23,"duration":0.137},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":23,"duration":0.195},
{"type":"measure","name":"lsp.diagnostic","count":188,"duration":152.792},
{"type":"mark","name":"lsp.code_action","count":96,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":53,"duration":0.06},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":189,"duration":0.017},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":190,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":97,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":57,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":80,"duration":0.063},
{"type":"measure","name":"lsp.did_change_batched","count":57,"duration":5.386},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":26,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",84]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":22,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":200,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":200,"duration":0.052},
{"type":"mark","name":"tsc.op.op_resolve","count":216,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":216,"duration":0.057},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":26,"duration":125.613},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":26,"duration":125.792},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":24,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":24,"duration":52.835},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":24,"duration":52.945},
{"type":"measure","name":"lsp.diagnostic","count":191,"duration":181.253},
{"type":"mark","name":"lsp.code_action","count":98,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":192,"duration":0.025},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":54,"duration":0.069},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":193,"duration":0.002},
{"type":"mark","name":"lsp.code_action","count":99,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.code_lens","count":17,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"}}},
{"type":"mark","name":"lsp.inlay_hint","count":30,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":61,"character":1}}}},
{"type":"mark","name":"lsp.hover","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"position":{"line":5,"character":17}}},
{"type":"mark","name":"lsp.did_change_batched","count":58,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":81,"duration":0.168},
{"type":"measure","name":"lsp.did_change_batched","count":58,"duration":5.292},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":27,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",85]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":23,"duration":0.02},
{"type":"mark","name":"tsc.op.op_load","count":201,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":201,"duration":0.053},
{"type":"mark","name":"tsc.op.op_resolve","count":217,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":217,"duration":0.044},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":27,"duration":106.029},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":27,"duration":106.201},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":25,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":25,"duration":1.378},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":25,"duration":1.455},
{"type":"measure","name":"lsp.diagnostic","count":194,"duration":109.966},
{"type":"mark","name":"lsp.code_action","count":100,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":195,"duration":0.026},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":55,"duration":0.052},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":196,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":101,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":59,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":59,"duration":4.493},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":82,"duration":0.067},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":28,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",86]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":24,"duration":0.019},
{"type":"mark","name":"tsc.op.op_load","count":202,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":202,"duration":0.053},
{"type":"mark","name":"tsc.op.op_resolve","count":218,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":218,"duration":0.042},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":28,"duration":117.041},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":28,"duration":120.251},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":26,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":26,"duration":0.117},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":26,"duration":0.181},
{"type":"measure","name":"lsp.diagnostic","count":197,"duration":122.47},
{"type":"mark","name":"lsp.code_action","count":102,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":198,"duration":0.019},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":56,"duration":0.063},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":199,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":103,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":60,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":60,"duration":9.663},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":83,"duration":0.067},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":29,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",87]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":25,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":203,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":203,"duration":0.069},
{"type":"mark","name":"tsc.op.op_resolve","count":219,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":219,"duration":0.041},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":29,"duration":93.471},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":29,"duration":93.618},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":27,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":27,"duration":2.861},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":27,"duration":2.98},
{"type":"measure","name":"lsp.diagnostic","count":200,"duration":96.861},
{"type":"mark","name":"lsp.code_action","count":104,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":201,"duration":0.021},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":57,"duration":0.06},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":202,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":105,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":203,"duration":0.023},
{"type":"mark","name":"lsp.did_change_batched","count":61,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"measure","name":"lsp.did_change_batched","count":61,"duration":12.858},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":204,"duration":0.011},
{"type":"measure","name":"lsp.testing_update","count":84,"duration":0.062},
{"type":"mark","name":"lsp.code_action","count":106,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":205,"duration":0.023},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":30,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",88]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":26,"duration":0.099},
{"type":"mark","name":"tsc.op.op_load","count":204,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"measure","name":"tsc.op.op_load","count":204,"duration":0.08},
{"type":"mark","name":"tsc.op.op_resolve","count":220,"args":{"base":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.58.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":220,"duration":0.047},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":30,"duration":171.635},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":30,"duration":171.835},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":28,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":28,"duration":0.108},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":28,"duration":0.169},
{"type":"measure","name":"lsp.diagnostic","count":206,"duration":172.287},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":58,"duration":0.04},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":207,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":107,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":62,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":85,"duration":0.087},
{"type":"measure","name":"lsp.did_change_batched","count":62,"duration":8.655},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":208,"duration":0.011},
{"type":"mark","name":"lsp.code_action","count":108,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":209,"duration":0.023},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":59,"duration":0.02},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":31,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",89]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":27,"duration":0.022},
{"type":"mark","name":"tsc.op.op_load","count":205,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"measure","name":"tsc.op.op_load","count":205,"duration":10.061},
{"type":"mark","name":"tsc.op.op_resolve","count":221,"args":{"base":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.58.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":221,"duration":0.044},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":31,"duration":235.649},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":31,"duration":245.549},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":29,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":29,"duration":4.976},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":29,"duration":5.071},
{"type":"measure","name":"lsp.diagnostic","count":210,"duration":250.992},
{"type":"mark","name":"lsp.code_action","count":109,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":659,"character":214},"end":{"line":659,"character":214}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":211,"duration":0.001},
{"type":"mark","name":"lsp.document_highlight","count":1,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"position":{"line":5,"character":18}}},
{"type":"mark","name":"lsp.code_action","count":110,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":63,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"measure","name":"lsp.did_change_batched","count":63,"duration":15.851},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":212,"duration":0.012},
{"type":"measure","name":"lsp.testing_update","count":86,"duration":0.253},
{"type":"mark","name":"lsp.code_action","count":111,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":213,"duration":0.025},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":60,"duration":0.036},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":32,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",90]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":28,"duration":0.03},
{"type":"mark","name":"tsc.op.op_load","count":206,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"measure","name":"tsc.op.op_load","count":206,"duration":0.07},
{"type":"mark","name":"tsc.op.op_resolve","count":222,"args":{"base":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.58.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":222,"duration":0.031},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":32,"duration":136.753},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":32,"duration":136.912},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":30,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":30,"duration":0.148},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":30,"duration":0.231},
{"type":"measure","name":"lsp.diagnostic","count":214,"duration":137.414},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":215,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":112,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":64,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"measure","name":"lsp.did_change_batched","count":64,"duration":12.154},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":216,"duration":0.009},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":87,"duration":0.056},
{"type":"mark","name":"lsp.code_action","count":113,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":217,"duration":0.024},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":61,"duration":0.021},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":33,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",91]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":29,"duration":0.018},
{"type":"mark","name":"tsc.op.op_load","count":207,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"measure","name":"tsc.op.op_load","count":207,"duration":0.086},
{"type":"mark","name":"tsc.op.op_resolve","count":223,"args":{"base":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.58.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":223,"duration":0.048},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":33,"duration":172.205},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":33,"duration":173.323},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":31,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":31,"duration":0.144},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":31,"duration":0.423},
{"type":"measure","name":"lsp.diagnostic","count":218,"duration":179.72},
{"type":"mark","name":"lsp.code_action","count":114,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":219,"duration":0.001},
{"type":"mark","name":"lsp.did_open","count":75,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/P0_P1_IMPLEMENTATION_COMPLETE.md","languageId":"markdown","version":1,"text":""}}},
{"type":"measure","name":"lsp.did_open","count":75,"duration":0.043},
{"type":"mark","name":"lsp.did_change_batched","count":65,"args":"file:///workspaces/ProspectPro/P0_P1_IMPLEMENTATION_COMPLETE.md"},
{"type":"measure","name":"lsp.did_change_batched","count":65,"duration":27.512},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":220,"duration":0.048},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":221,"duration":0.033},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":222,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":223,"duration":0.001},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":224,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":115,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":62,"duration":0.023},
{"type":"mark","name":"lsp.code_action","count":116,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":225,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":117,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.goto_definition","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},"position":{"line":964,"character":8}}},
{"type":"mark","name":"lsp.code_action","count":118,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_change_batched","count":66,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"lsp.did_change_batched","count":66,"duration":14.498},
{"type":"mark","name":"lsp.testing_update"},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"measure","name":"lsp.testing_update","count":88,"duration":0.282},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":34,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",92]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":30,"duration":0.039},
{"type":"mark","name":"tsc.op.op_load","count":208,"args":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts"},
{"type":"measure","name":"tsc.op.op_load","count":208,"duration":0.052},
{"type":"mark","name":"tsc.op.op_resolve","count":224,"args":{"base":"file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts","specifiers":[[false,"https://deno.land/std@0.168.0/http/server.ts"],[false,"https://esm.sh/@supabase/supabase-js@2"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":224,"duration":0.052},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":34,"duration":277.896},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":34,"duration":279.772},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":32,"args":"GetAmbientModules"},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":32,"duration":0.146},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":32,"duration":0.198},
{"type":"measure","name":"lsp.diagnostic","count":226,"duration":280.169},
{"type":"mark","name":"lsp.did_change_batched","count":67,"args":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},
{"type":"measure","name":"lsp.did_change_batched","count":67,"duration":18.618},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":227,"duration":0.013},
{"type":"mark","name":"lsp.did_change_batched","count":68,"args":"file:///workspaces/ProspectPro/P0_P1_IMPLEMENTATION_COMPLETE.md"},
{"type":"measure","name":"lsp.did_change_batched","count":68,"duration":2.613},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":228,"duration":0.012},
{"type":"mark","name":"lsp.code_lens","count":18,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"}}},
{"type":"mark","name":"lsp.document_symbol","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"}}},
{"type":"mark","name":"lsp.code_action","count":119,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":229,"duration":0.023},
{"type":"mark","name":"lsp.inlay_hint","count":31,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":61,"character":3}}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":63,"duration":0.015},
{"type":"mark","name":"lsp.document_symbol","count":34,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"}}},
{"type":"mark","name":"lsp.inlay_hint","count":32,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":61,"character":3}}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":230,"duration":0.001},
{"type":"mark","name":"lsp.folding_range","count":14,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"}}},
{"type":"mark","name":"lsp.did_change_batched","count":69,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"measure","name":"lsp.did_change_batched","count":69,"duration":88.543},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":231,"duration":0.011},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":89,"duration":0.075},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":232,"duration":0.002},
{"type":"mark","name":"lsp.did_change_batched","count":70,"args":"file:///workspaces/ProspectPro/modules/api-clients/chamber-directory-client.js"},
{"type":"mark","name":"lsp.testing_update"},
{"type":"measure","name":"lsp.testing_update","count":90,"duration":0.081},
{"type":"measure","name":"lsp.did_change_batched","count":70,"duration":6.327},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":233,"duration":0.014},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":64,"duration":0.021},
{"type":"mark","name":"lsp.code_action","count":120,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":234,"duration":0.024},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":65,"duration":0.031},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":235,"duration":0.001},
{"type":"mark","name":"lsp.code_action","count":121,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"mark","name":"lsp.did_save"},
{"type":"mark","name":"tsc.request.$getDiagnostics"},
{"type":"mark","name":"lsp.did_save"},
{"type":"measure","name":"lsp.did_save","count":67,"duration":0.015},
{"type":"mark","name":"tsc.host.$getDiagnostics","count":35,"args":{"GetDiagnostics":["file:///workspaces/ProspectPro/supabase/functions/business-discovery/index.ts",94]}},
{"type":"mark","name":"tsc.op.op_script_version"},
{"type":"measure","name":"tsc.op.op_script_version","count":31,"duration":0.023},
{"type":"mark","name":"tsc.op.op_load","count":209,"args":"file:///workspaces/ProspectPro/modules/api-clients/chamber-directory-client.js"},
{"type":"measure","name":"tsc.op.op_load","count":209,"duration":0.053},
{"type":"mark","name":"tsc.op.op_load","count":210,"args":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js"},
{"type":"measure","name":"tsc.op.op_load","count":210,"duration":0.1},
{"type":"mark","name":"tsc.op.op_resolve","count":225,"args":{"base":"file:///workspaces/ProspectPro/public/supabase-app-fixed.js","specifiers":[[false,"https://esm.sh/@supabase/supabase-js@2.58.0"]]}},
{"type":"measure","name":"tsc.op.op_resolve","count":225,"duration":0.06},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"tsc.host.$getDiagnostics","count":35,"duration":247.378},
{"type":"measure","name":"tsc.request.$getDiagnostics","count":35,"duration":247.892},
{"type":"mark","name":"tsc.request.$getAmbientModules"},
{"type":"mark","name":"tsc.host.$getAmbientModules","count":33,"args":"GetAmbientModules"},
{"type":"mark","name":"lsp.code_action","count":122,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}},
{"type":"measure","name":"tsc.host.$getAmbientModules","count":33,"duration":164.763},
{"type":"measure","name":"tsc.request.$getAmbientModules","count":33,"duration":165.429},
{"type":"measure","name":"lsp.did_save","count":66,"duration":417.001},
{"type":"measure","name":"lsp.diagnostic","count":236,"duration":205.739},
{"type":"mark","name":"lsp.diagnostic"},
{"type":"measure","name":"lsp.diagnostic","count":237,"duration":0.019},
{"type":"mark","name":"lsp.hover","count":2,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"position":{"line":4,"character":10}}},
{"type":"mark","name":"lsp.inlay_hint","count":33,"args":{"textDocument":{"uri":"file:///workspaces/ProspectPro/ACTION_PLAN_FREE_INTEGRATIONS.md"},"range":{"start":{"line":0,"character":0},"end":{"line":44,"character":3}}}},
