#!/bin/bash

# ProspectPro API Key Injection Script
# Injects API keys from Supabase Edge Function secrets into Vite environment variables

set -euo pipefail

EXPECTED_REPO_ROOT=${EXPECTED_REPO_ROOT:-/workspaces/ProspectPro}

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
# shellcheck source=/workspaces/ProspectPro/scripts/lib/supabase_cli_helpers.sh
source "$SCRIPT_DIR/lib/supabase_cli_helpers.sh"

require_repo_root() {
    local repo_root
    if ! repo_root=$(git rev-parse --show-toplevel 2>/dev/null); then
        echo "❌ Run this script from inside the ProspectPro repo"
        exit 1
    fi

    if [ "$repo_root" != "$EXPECTED_REPO_ROOT" ]; then
        echo "❌ Wrong directory. Expected repo root: $EXPECTED_REPO_ROOT"
        echo "   Current directory: $repo_root"
        exit 1
    fi
}

require_repo_root

echo "🔑 ProspectPro API Key Injection"
echo "================================"

pp_require_npx

# Check if we're linked to a Supabase project
if ! prospectpro_supabase_cli status >/dev/null 2>&1; then
    echo "❌ Not linked to Supabase project. Run: supabase link --project-ref sriycekxdqnesdsgwiuc"
    exit 1
fi

echo "📡 Fetching API keys from Supabase Edge Function secrets..."

resolve_env() {
    for var in "$@"; do
        local value="${!var}"
        if [ -n "$value" ]; then
            echo "$value"
            return 0
        fi
    done
    echo ""
}

SUPABASE_URL_VALUE=$(resolve_env VITE_SUPABASE_URL NEXT_PUBLIC_SUPABASE_URL SUPABASE_URL)
SUPABASE_ANON_KEY_VALUE=$(resolve_env VITE_SUPABASE_ANON_KEY NEXT_PUBLIC_SUPABASE_ANON_KEY SUPABASE_ANON_KEY)
EDGE_FUNCTIONS_URL_VALUE=$(resolve_env VITE_EDGE_FUNCTIONS_URL NEXT_PUBLIC_SUPABASE_FUNCTIONS_URL SUPABASE_FUNCTIONS_URL)

if [ -z "$SUPABASE_URL_VALUE" ]; then
    SUPABASE_URL_VALUE="https://sriycekxdqnesdsgwiuc.supabase.co"
    echo "ℹ️  VITE/NEXT_PUBLIC_SUPABASE_URL not set. Falling back to project URL: $SUPABASE_URL_VALUE"
else
    echo "✅ Resolved Supabase URL from environment"
fi

if [ -z "$SUPABASE_ANON_KEY_VALUE" ]; then
    echo "❌ Supabase anon key not found in environment"
    echo "   Set one of: VITE_SUPABASE_ANON_KEY, NEXT_PUBLIC_SUPABASE_ANON_KEY, SUPABASE_ANON_KEY"
    exit 1
fi

if [ -z "$EDGE_FUNCTIONS_URL_VALUE" ]; then
    EDGE_FUNCTIONS_URL_VALUE="${SUPABASE_URL_VALUE%/}/functions/v1"
    echo "ℹ️  Edge Functions URL not set. Using default: $EDGE_FUNCTIONS_URL_VALUE"
else
    echo "✅ Resolved Edge Functions URL from environment"
fi

# Supabase CLI v2 no longer exposes raw secret values. Prompt the user if the key
# is missing rather than attempting unsupported retrieval.
GOOGLE_MAPS_KEY="${VITE_GOOGLE_MAPS_API_KEY:-${GOOGLE_MAPS_API_KEY:-}}"

if [ -z "$GOOGLE_MAPS_KEY" ]; then
    echo "⚠️  Warning: GOOGLE_PLACES_API_KEY is not present in the environment."
    echo "   Retrieve the value from the Supabase dashboard → Edge Function secrets."
    echo "   Leaving it blank for local development."
else
    echo "✅ GOOGLE_PLACES_API_KEY sourced from local environment"
fi

# Update .env.local with injected API keys
cat > .env.local << EOF
# Vite Environment Variables for ProspectPro
# Generated by inject-api-keys.sh on $(date)

# Supabase Configuration
VITE_SUPABASE_URL=$SUPABASE_URL_VALUE
VITE_SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY_VALUE
VITE_EDGE_FUNCTIONS_URL=$EDGE_FUNCTIONS_URL_VALUE

# Google Maps API Configuration (injected from Supabase secrets)
VITE_GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_KEY
VITE_GOOGLE_PLACES_API_KEY=$GOOGLE_MAPS_KEY

# Note: Other API keys (Hunter.io, NeverBounce, etc.) are stored in
# Supabase Edge Function secrets and accessed only by Edge Functions
# They are NOT exposed to the frontend for security
EOF

echo "✅ API keys injected into .env.local"
echo "📁 Frontend now has access to:"
echo "   - Supabase connection details from environment"
echo "   - Google Maps API key for map display (if configured)"
echo ""
echo "🔒 Security Note: Sensitive API keys (Hunter.io, NeverBounce) remain"
echo "   secure in Supabase Edge Function secrets and are not exposed to frontend"
echo ""
echo "🚀 Ready to build and deploy!"