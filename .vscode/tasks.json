{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Start Codespace",
      "dependsOrder": "sequence",
      "dependsOn": [
        "Supabase: Ensure Session",
        "Supabase: Link Project",
        "GitHub: Ensure Auth (Non-blocking)",
        "MCP: Start All Servers"
      ],
      "problemMatcher": []
    },
    {
      "label": "Close Codespace",
      "dependsOrder": "sequence",
      "dependsOn": [
        "MCP: Stop All Servers",
        "Docs: Update All Documentation",
        "Workspace: Validate Configuration",
        "Git: Remind to Push Before Exit"
      ],
      "problemMatcher": []
    },
    {
      "label": "GitHub: Ensure Auth (Non-blocking)",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "if command -v gh >/dev/null 2>&1; then gh auth status || echo \"⚠️ GitHub CLI not authenticated. Run: gh auth login\"; else echo \"⚠️ GitHub CLI not installed\"; fi"
      ],
      "group": "build",
      "presentation": {
        "echo": false,
        "reveal": "silent",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Supabase: Ensure Session",
      "type": "shell",
      "command": "bash",
      "args": ["-lc", "source scripts/ensure-supabase-cli-session.sh"],
      "group": "build",
      "presentation": {
        "echo": false,
        "reveal": "silent",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Supabase: Link Project",
      "type": "shell",
      "command": "npm",
      "args": ["run", "supabase:link"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Supabase: Pull Public Schema",
      "type": "shell",
      "command": "npm",
      "args": ["run", "supabase:db:pull"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Supabase: Generate Types",
      "type": "shell",
      "command": "npm",
      "args": ["run", "supabase:types"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Supabase: List Migrations",
      "type": "shell",
      "command": "npm",
      "args": ["run", "supabase:migrations:list"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Supabase: Push Database",
      "type": "shell",
      "command": "npm",
      "args": ["run", "supabase:db:push"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Supabase: Start Local Stack",
      "type": "shell",
      "command": "npm",
      "args": ["run", "supabase:start:local"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Database: Create Migration",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "cd supabase && source ../scripts/ensure-supabase-cli-session.sh && npx --yes supabase@latest migration new ${input:migrationName}"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Supabase: Serve Local Functions",
      "type": "shell",
      "command": "npm",
      "args": ["run", "edge:serve"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": true,
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "Edge Functions: Deploy Function",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "cd supabase && source ../scripts/ensure-supabase-cli-session.sh && npx --yes supabase@latest functions deploy ${input:functionName} --no-verify-jwt"
      ],
      "group": "build",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Edge Functions: Deploy Critical Set",
      "type": "shell",
      "command": "npm",
      "args": ["run", "deploy:critical"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Edge Functions: Deploy Discovery Group",
      "type": "shell",
      "command": "npm",
      "args": ["run", "deploy:discovery"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Edge Functions: Deploy Enrichment Group",
      "type": "shell",
      "command": "npm",
      "args": ["run", "deploy:enrichment"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Edge Functions: Deploy Export Functions",
      "type": "shell",
      "command": "npm",
      "args": ["run", "deploy:exports"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Edge Functions: Deploy Diagnostics",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "cd supabase && source ../scripts/ensure-supabase-cli-session.sh && npx --yes supabase@latest functions deploy test-google-places --no-verify-jwt && npx --yes supabase@latest functions deploy test-new-auth --no-verify-jwt && npx --yes supabase@latest functions deploy auth-diagnostics --no-verify-jwt"
      ],
      "group": "build",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Edge Functions: Deploy All Functions",
      "dependsOrder": "sequence",
      "dependsOn": [
        "Edge Functions: Deploy Discovery Group",
        "Edge Functions: Deploy Enrichment Group",
        "Edge Functions: Deploy Export Functions",
        "Edge Functions: Deploy Diagnostics"
      ]
    },
    {
      "label": "Edge Functions: List Functions",
      "type": "shell",
      "command": "npm",
      "args": ["run", "edge:list"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Edge Functions: Live Logs (All)",
      "type": "shell",
      "command": "npm",
      "args": ["run", "edge:logs"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": true,
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "Edge Functions: Error Logs Only",
      "type": "shell",
      "command": "npm",
      "args": ["run", "edge:logs:errors"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": true,
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "Logs: Edge Function",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "cd supabase && source ../scripts/ensure-supabase-cli-session.sh && npx --yes supabase@latest functions logs ${input:functionName} --follow"
      ],
      "group": "build",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Edge Functions: Test Business Discovery (Local)",
      "type": "shell",
      "command": "npm",
      "args": ["run", "edge:test:local"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Edge Functions: Full Development Workflow",
      "dependsOrder": "sequence",
      "dependsOn": [
        "Supabase: Ensure Session",
        "Supabase: Link Project",
        "Edge Functions: List Functions",
        "Supabase: Serve Local Functions"
      ]
    },
    {
      "label": "Edge Functions: Production Deploy Workflow",
      "dependsOrder": "sequence",
      "dependsOn": [
        "Supabase: Ensure Session",
        "Edge Functions: Deploy Critical Set",
        "Edge Functions: Live Logs (All)"
      ]
    },
    {
      "label": "Test: Run Database Tests",
      "type": "shell",
      "command": "npm",
      "args": ["run", "supabase:test:db"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "test",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Test: Run Edge Function Tests (Local, Auth Required)",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "export SUPABASE_SESSION_JWT='${input:sessionJWT}' && npm run supabase:test:functions"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "test",
      "dependsOn": "Supabase: Ensure Session",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Test: Discovery Pipeline",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "cd ${workspaceFolder} && ./scripts/test-discovery-pipeline.sh"
      ],
      "group": "test",
      "dependsOn": "Supabase: Ensure Session",
      "options": {
        "env": {
          "SUPABASE_SESSION_JWT": "${input:sessionJWT}"
        }
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Test: Enrichment Chain",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "cd ${workspaceFolder} && ./scripts/test-enrichment-chain.sh"
      ],
      "group": "test",
      "dependsOn": "Supabase: Ensure Session",
      "options": {
        "env": {
          "SUPABASE_SESSION_JWT": "${input:sessionJWT}"
        }
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Test: Export Flow",
      "type": "shell",
      "command": "bash",
      "args": ["-lc", "cd ${workspaceFolder} && ./scripts/test-export-flow.sh"],
      "group": "test",
      "dependsOn": "Supabase: Ensure Session",
      "options": {
        "env": {
          "SUPABASE_SESSION_JWT": "${input:sessionJWT}"
        }
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Test: Full Stack Validation",
      "dependsOrder": "sequence",
      "dependsOn": [
        "Test: Discovery Pipeline",
        "Test: Enrichment Chain",
        "Test: Export Flow"
      ]
    },
    {
      "label": "Test: Campaign Validation",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "${workspaceFolder}/scripts/campaign-validation.sh ${input:sessionJWT}"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Test: Auth Patterns",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "${workspaceFolder}/scripts/test-auth-patterns.sh ${input:sessionJWT}"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Diagnostics: Full Campaign",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "${workspaceFolder}/scripts/edge-function-diagnostics.sh ${input:sessionJWT}"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "MCP: Start All Servers",
      "type": "shell",
      "command": "npm",
      "args": ["run", "mcp:start"],
      "options": { "cwd": "${workspaceFolder}" },
      "problemMatcher": []
    },
    {
      "label": "MCP: Stop All Servers",
      "type": "shell",
      "command": "npm",
      "args": ["run", "mcp:stop"],
      "options": { "cwd": "${workspaceFolder}" },
      "problemMatcher": []
    },
    {
      "label": "Build: Frontend Production",
      "type": "shell",
      "command": "npm",
      "args": ["run", "build"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": ["$tsc", "$eslint-stylish"]
    },
    {
      "label": "Deploy: Vercel Production",
      "type": "shell",
      "command": "bash",
      "args": ["-lc", "cd dist && npx --yes vercel@latest --prod"],
      "group": "build",
      "dependsOn": "Build: Frontend Production",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Docs: Update All Documentation",
      "type": "shell",
      "command": "npm",
      "args": ["run", "docs:update"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared",
        "showReuseMessage": false
      },
      "problemMatcher": []
    },
    {
      "label": "Docs: Update System Reference (Legacy)",
      "type": "shell",
      "command": "npm",
      "args": ["run", "system:reference"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Docs: Update Codebase Index (Legacy)",
      "type": "shell",
      "command": "npm",
      "args": ["run", "codebase:index"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🚀 Create Epic (Guided)",
      "type": "shell",
      "command": "npm",
      "args": ["run", "roadmap:epic"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🗂️ Batch Generate Epics",
      "type": "shell",
      "command": "npm",
      "args": ["run", "roadmap:batch"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🗂️ Batch Generate Epics + Project",
      "type": "shell",
      "command": "npm",
      "args": ["run", "roadmap:batch", "--", "--project"],
      "options": {
        "cwd": "${workspaceFolder}",
        "env": {
          "GH_PROJECT_TOKEN": "${env:GH_PROJECT_TOKEN}"
        }
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🌐 Open Project 5",
      "type": "shell",
      "command": "npm",
      "args": ["run", "roadmap:open"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🔍 Project Dashboard",
      "type": "shell",
      "command": "npm",
      "args": ["run", "roadmap:dashboard"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🛠️ Start Epic Scaffolding",
      "type": "shell",
      "command": "npm",
      "args": ["run", "roadmap:start", "--", "${input:epicKey}"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "📋 Roadmap: Pull Open Items",
      "type": "shell",
      "command": "npm",
      "args": ["run", "roadmap:pull"],
      "options": {
        "cwd": "${workspaceFolder}",
        "env": {
          "GH_PROJECT_TOKEN": "${env:GH_PROJECT_TOKEN}"
        }
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Roadmap: Sync Epics to GitHub",
      "type": "shell",
      "command": "bash",
      "args": ["${workspaceFolder}/scripts/roadmap/sync-epics-to-github.sh"],
      "options": {
        "cwd": "${workspaceFolder}",
        "env": {
          "GH_PROJECT_TOKEN": "${env:GH_PROJECT_TOKEN}"
        }
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Context: Fetch Repo Snapshot",
      "type": "shell",
      "command": "node",
      "args": ["scripts/context/fetch-repo-context.js"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "none",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Context: Fetch Supabase Snapshot",
      "type": "shell",
      "command": "node",
      "args": ["scripts/context/fetch-supabase-context.js"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "none",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Context: Cache Session JWT",
      "type": "shell",
      "command": "node",
      "args": ["scripts/context/cache-session.js", "${input:sessionJWT}"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "none",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Workspace: Validate Configuration",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "${workspaceFolder}/.vscode/validate-workspace-config.sh"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Thunder: Run Auth Tests",
      "type": "shell",
      "command": "echo",
      "args": ["Run Thunder Client with ProspectPro-Auth.json collection"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Thunder: Run Discovery Tests",
      "type": "shell",
      "command": "echo",
      "args": ["Run Thunder Client with ProspectPro-Discovery.json collection"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Thunder: Run Enrichment Tests",
      "type": "shell",
      "command": "echo",
      "args": [
        "Run Thunder Client with ProspectPro-Enrichment.json collection"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Thunder: Run Export Tests",
      "type": "shell",
      "command": "echo",
      "args": ["Run Thunder Client with ProspectPro-Export.json collection"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Thunder: Run Database Tests",
      "type": "shell",
      "command": "echo",
      "args": ["Run Thunder Client with ProspectPro-Database.json collection"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Thunder: Run Full Test Suite",
      "dependsOrder": "sequence",
      "dependsOn": [
        "Thunder: Run Auth Tests",
        "Thunder: Run Discovery Tests",
        "Thunder: Run Enrichment Tests",
        "Thunder: Run Export Tests",
        "Thunder: Run Database Tests"
      ],
      "group": "test"
    },
    {
      "label": "Thunder: Sync Environment Variables",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "echo 'Syncing Thunder Client environment from Vercel/Supabase...' && npx --yes vercel@latest env pull .env.thunder --yes && echo 'Environment synced to .env.thunder'"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Workspace: Verify Toolchain",
      "type": "shell",
      "command": "bash",
      "args": ["-lc", "./scripts/verify-toolchain.sh"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Git: Remind to Push Before Exit",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "git status && echo 'REMINDER: Commit and push your changes before closing Codespace!'"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Git: Commit and Push All",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "git add . && git commit -m 'Codespace close: doc update, MCP stop, codebase index' || echo 'No changes to commit.' && git push"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "type": "npm",
      "script": "mcp:prod",
      "label": "npm: mcp:prod",
      "detail": "cd mcp-servers && npm run start:production",
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "functionName",
      "type": "pickString",
      "description": "Supabase Edge Function",
      "options": [
        "auth-diagnostics",
        "business-discovery-background",
        "business-discovery-deduplication",
        "business-discovery-optimized",
        "business-discovery-user-aware",
        "campaign-export",
        "campaign-export-user-aware",
        "enrichment-business-license",
        "enrichment-cobalt",
        "enrichment-hunter",
        "enrichment-neverbounce",
        "enrichment-orchestrator",
        "enrichment-pdl",
        "test-google-places",
        "test-new-auth",
        "test-user-deduplication"
      ],
      "default": "business-discovery-background"
    },
    {
      "id": "migrationName",
      "type": "promptString",
      "description": "Database migration name"
    },
    {
      "id": "sessionJWT",
      "type": "promptString",
      "description": "Paste SUPABASE_SESSION_JWT (kept in memory only)"
    },
    {
      "id": "epicKey",
      "type": "promptString",
      "description": "Epic key (kebab-case)"
    }
  ]
}
