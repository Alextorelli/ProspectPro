// Test all 7 free state registry APIs
const testAPIs = async () => {
  const results = {
    california_sos: false,
    ny_business: false, 
    ny_tax_parcels: false,
    ct_ucc: false,
    sec_edgar: false,
    uspto_trademark: false,
    courtlistener: false
  };

  // 1. Test California SOS
  try {
    const response = await fetch('https://calico.sos.ca.gov/cbc/v1/api/ServerStatus', {
      headers: { 'Ocp-Apim-Subscription-Key': process.env.CALIFORNIA_SOS_API_KEY }
    });
    results.california_sos = response.status === 200;
  } catch (e) { console.log('CA SOS Error:', e.message); }

  // 2. Test NY Business Registry
  try {
    const response = await fetch('https://data.ny.gov/resource/n9v6-gdp6.json?$limit=1');
    results.ny_business = response.status === 200;
  } catch (e) { console.log('NY Business Error:', e.message); }

  // 3. Test NY Tax Parcels
  try {
    const response = await fetch('https://gis.ny.gov/gisdata/rest/services/NYS_Tax_Parcels/MapServer/0/query?where=1%3D1&outFields=*&f=json&resultRecordCount=1');
    results.ny_tax_parcels = response.status === 200;
  } catch (e) { console.log('NY Tax Error:', e.message); }

  // 4. Test CT UCC
  try {
    const response = await fetch('https://data.ct.gov/resource/xfev-8smz.json?$limit=1');
    results.ct_ucc = response.status === 200;
  } catch (e) { console.log('CT UCC Error:', e.message); }

  // 5. Test SEC EDGAR
  try {
    const response = await fetch('https://data.sec.gov/submissions/CIK0000320193.json', {
      headers: { 'User-Agent': process.env.SEC_USER_AGENT }
    });
    results.sec_edgar = response.status === 200;
  } catch (e) { console.log('SEC Error:', e.message); }

  // 6. Test USPTO (if key available)
  if (process.env.USPTO_API_KEY) {
    try {
      const response = await fetch('https://tsdrapi.uspto.gov/ts/cd/casestatus/sn78787878/info.json', {
        headers: { 'USPTO-API-KEY': process.env.USPTO_API_KEY }
      });
      results.uspto_trademark = response.status === 200;
    } catch (e) { console.log('USPTO Error:', e.message); }
  }

  // 7. Test CourtListener
  try {
    const headers = {};
    if (process.env.COURTLISTENER_TOKEN) {
      headers['Authorization'] = `Token ${process.env.COURTLISTENER_TOKEN}`;
    }
    const response = await fetch('https://www.courtlistener.com/api/rest/v3/courts/', { headers });
    results.courtlistener = response.status === 200;
  } catch (e) { console.log('Court Error:', e.message); }

  return results;
};

// Run the test
testAPIs().then(results => {
  console.log('\n🧪 Enhanced State Registry API Test Results:');
  console.log('================================================');
  Object.entries(results).forEach(([api, status]) => {
    console.log(`${status ? '✅' : '❌'} ${api.replace(/_/g, ' ').toUpperCase()}: ${status ? 'WORKING' : 'NEEDS SETUP'}`);
  });
  
  const working = Object.values(results).filter(Boolean).length;
  console.log(`\n📊 ${working}/7 APIs working (${Math.round(working/7*100)}% ready)`);
});
