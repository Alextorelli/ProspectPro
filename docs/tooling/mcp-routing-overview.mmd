---
id: mcp-routing-overview
intent: "Show routing from ingress through the context router to MCP servers and telemetry sinks with validation checkpoints."
context: |
  Node IDs map to stable repo paths so agents can cross-reference scripts quickly. Zero-fake-data validation and ContextManager routing must occur before invoking any MCP server.
---

flowchart TD
  subgraph AccessLayer["Access"]
    direction LR
    INGRESS_GATEWAY["Ingress Gateway\n(scripts/shell/ingress-gateway.sh)"]:::access
  end

  subgraph RoutingLayer["Routing"]
    direction LR
    CONTEXT_ROUTER["Context Router\n(scripts/shell/context-router.sh)"]:::router
    ZERO_FAKE_DATA_CHECK["ZeroFakeData Checkpoint\n(scripts/shell/zero-fake-data-check.sh)"]:::validate
    CONTEXT_MANAGER["ContextManager\n(dev-tools/context/context-manager.ts)"]:::context
  end

  subgraph MCPLayer["MCP Servers"]
    direction LR
    MCP_PROD["Production\n(mcp-servers/production-server.js)"]:::mcp
    MCP_DEV["Development\n(mcp-servers/development-server.js)"]:::mcp
    MCP_TROUBLE["Troubleshooting\n(mcp-servers/troubleshooting-server.js)"]:::mcp
  end

  subgraph TelemetryLayer["Telemetry"]
    direction LR
    TELEMETRY_STREAM["Telemetry Stream\n(dev-tools/monitoring/log-forwarder.ts)"]:::telemetry
    SUPABASE_LOGS["Supabase Logs\n(supabase/functions/)"]:::telemetry
  end

  INGRESS_GATEWAY -- "receive" --> CONTEXT_ROUTER
  CONTEXT_ROUTER -- "validate" --> ZERO_FAKE_DATA_CHECK
  ZERO_FAKE_DATA_CHECK -- "pass" --> CONTEXT_MANAGER
  CONTEXT_MANAGER -- "route:prod" --> MCP_PROD
  CONTEXT_MANAGER -- "route:dev" --> MCP_DEV
  CONTEXT_MANAGER -- "route:trouble" --> MCP_TROUBLE
  MCP_PROD -- "emit:telemetry" --> TELEMETRY_STREAM
  MCP_PROD -- "emit:logs" --> SUPABASE_LOGS
  MCP_DEV -- "emit:telemetry" --> TELEMETRY_STREAM
  MCP_TROUBLE -- "emit:logs" --> SUPABASE_LOGS
  MCP_PROD -. "escalate" .-> MCP_TROUBLE

  classDef access fill:#f97316,color:#fff;
  classDef router fill:#64748b,color:#fff;
  classDef validate fill:#facc15,color:#222,stroke:#f59e42,stroke-width:2px;
  classDef context fill:#2563eb,color:#fff;
  classDef mcp fill:#16a34a,color:#fff;
  classDef telemetry fill:#facc15,color:#222;

  subgraph Legend["Legend"]
    direction LR
    L1["Access"]
    L2["Router"]
    L3["Validation"]
    L4["Context"]
    L5["MCP"]
    L6["Telemetry"]
    style Legend fill:#fff,stroke:#888,stroke-width:1px
    style L1 fill:#f97316,color:#fff
    style L2 fill:#64748b,color:#fff
    style L3 fill:#facc15,color:#222
    style L4 fill:#2563eb,color:#fff
    style L5 fill:#16a34a,color:#fff
    style L6 fill:#facc15,color:#222
  end
