{
  "version": "2.0",
  "description": "ProspectPro MCP configuration aligned with Option A participants, React DevTools, and Vercel CLI aware routing.",
  "clusters": {
    "development": {
      "environments": ["sandbox", "development"],
      "participants": ["ux", "platform", "devops"],
      "servers": [
        "prospectpro-development",
        "platform-postgresql",
        "integrations-hub",
        "devops-vercel-cli"
      ]
    },
    "testing": {
      "environments": ["testing"],
      "participants": ["platform", "devops"],
      "servers": [
        "prospectpro-development",
        "platform-postgresql",
        "integrations-hub"
      ]
    },
    "staging": {
      "environments": ["staging"],
      "participants": ["platform", "devops", "secops"],
      "servers": [
        "devops-vercel-cli",
        "prospectpro-production",
        "platform-postgresql"
      ]
    },
    "production": {
      "environments": ["production"],
      "participants": ["platform", "secops", "integrations"],
      "servers": [
        "prospectpro-production",
        "devops-vercel-cli",
        "integrations-hub"
      ]
    },
    "incident": {
      "environments": ["incident"],
      "participants": ["secops", "devops"],
      "servers": ["devops-vercel-cli", "prospectpro-production"]
    }
  },
  "servers": {
    "prospectpro-development": {
      "registryKey": "platform-development",
      "participants": ["ux", "platform", "devops"],
      "environments": ["sandbox", "development"],
      "toolSets": [
        {
          "label": "frontend-react",
          "tools": [
            "launch_react_devtools",
            "react_component_health",
            "run_eslint_autofix"
          ],
          "npmScripts": ["dev", "devtools:react"],
          "notes": [
            "React DevTools are wired through app/frontend/main.tsx via react-devtools-core when import.meta.env.DEV is true (port 8097).",
            "Use npm run devtools:react to open the standalone React DevTools bridge while iterating on the Vite frontend."
          ]
        },
        {
          "label": "api-integrations",
          "tools": [
            "test_new_api_integration",
            "compare_api_sources",
            "benchmark_api_performance"
          ],
          "npmScripts": ["supabase:workflow", "supabase:types"],
          "notes": [
            "Covers Option A @platform and @integrations diagnostics for discovery/enrichment flows."
          ]
        },
        {
          "label": "supabase-edge",
          "tools": [
            "deploy_and_validate_function",
            "compare_edge_function_versions",
            "update_technical_docs",
            "generate_api_changelog"
          ],
          "npmScripts": [
            "deploy:discovery",
            "deploy:enrichment",
            "docs:update"
          ],
          "notes": [
            "Targets Edge functions in app/backend/supabase/functions and aligns docs:update output with Option A guidance."
          ]
        }
      ],
      "activationKeywords": [
        "react",
        "frontend",
        "vercel",
        "supabase",
        "integration",
        "docs"
      ],
      "env": {
        "NODE_ENV": "development",
        "REACT_DEVTOOLS_PORT": "8097",
        "SUPABASE_BRANCH": "dev"
      }
    },
    "devops-vercel-cli": {
      "registryKey": "devops-vercel-cli",
      "participants": ["devops", "secops"],
      "environments": ["development", "staging", "production", "incident"],
      "toolSets": [
        {
          "label": "vercel-deployment",
          "tools": [
            "vercel_status_check",
            "generate_debugging_commands",
            "collect_react_runtime_logs"
          ],
          "npmScripts": ["frontend:build", "frontend:deploy"],
          "notes": [
            "Wraps the Vercel CLI integration used by npm run frontend:deploy (npx vercel@latest --prod).",
            "collect_react_runtime_logs tails reports/logs/vercel-build.log for React runtime issues during deployments."
          ]
        },
        {
          "label": "supabase-triage",
          "tools": [
            "test_edge_function",
            "validate_database_permissions",
            "run_rls_diagnostics",
            "supabase_cli_healthcheck",
            "validate_ci_cd_suite"
          ],
          "notes": [
            "Provides shared @platform/@secops diagnostics for Supabase Edge functions, CI enforcement, and auth guardrails."
          ]
        }
      ],
      "activationKeywords": [
        "vercel",
        "deploy",
        "incident",
        "prod",
        "rls",
        "ci",
        "troubleshoot"
      ],
      "env": {
        "VERCEL_ORG_ID": "${VERCEL_ORG_ID}",
        "VERCEL_PROJECT_ID": "${VERCEL_PROJECT_ID}"
      }
    },
    "prospectpro-production": {
      "registryKey": "platform-production",
      "participants": ["platform", "secops", "integrations"],
      "environments": ["staging", "production", "incident"],
      "toolSets": [
        {
          "label": "production-monitoring",
          "tools": [
            "environment_health_check",
            "github_actions_monitor",
            "cost_budget_monitor",
            "vercel_status_check",
            "supabase_cli_healthcheck"
          ],
          "notes": [
            "Production tooling enforces SECOPS_MODE guardrails before activation and mirrors Option A @secops responsibilities."
          ]
        },
        {
          "label": "campaign-analytics",
          "tools": [
            "analyze_campaign_costs",
            "predict_campaign_cost",
            "query_leads",
            "get_campaign_stats",
            "analyze_lead_quality"
          ],
          "notes": [
            "Uses Supabase service role credentials; ensure SUPABASE_SECRET_KEY is available for analytics heavy tooling."
          ]
        }
      ],
      "activationKeywords": [
        "production",
        "vercel",
        "analytics",
        "cost",
        "supabase",
        "support"
      ],
      "env": {
        "NODE_ENV": "production",
        "SECOPS_MODE": "${SECOPS_MODE:-false}"
      }
    },
    "platform-postgresql": {
      "registryKey": "platform-postgresql",
      "participants": ["platform", "devops"],
      "environments": ["development", "testing", "staging"],
      "toolSets": [
        {
          "label": "database-operations",
          "tools": [
            "execute_query",
            "explain_query",
            "validate_migration",
            "check_pool_health",
            "analyze_slow_queries"
          ],
          "notes": [
            "Backs Supabase Postgres via SUPABASE_DB_URL; leverage for schema validation before Option A migrations."
          ]
        }
      ],
      "activationKeywords": ["database", "sql", "schema", "migration"]
    },
    "integrations-hub": {
      "registryKey": "integrations-hub",
      "participants": ["integrations", "platform"],
      "environments": ["development", "testing", "production"],
      "toolSets": [
        {
          "label": "webhook-automation",
          "tools": [
            "register_webhook",
            "validate_webhook_signature",
            "send_notification",
            "execute_workflow",
            "check_integration_health"
          ],
          "notes": [
            "Coordinates partner APIs (Stripe-ready), notification routing, and workflow automation as defined in Option A end-state docs."
          ]
        }
      ],
      "activationKeywords": [
        "integration",
        "webhook",
        "automation",
        "notification",
        "stripe"
      ]
    }
  },
  "routing": {
    "branchRules": {
      "dev/*": "development",
      "feature/*": "development",
      "test/*": "testing",
      "qa/*": "testing",
      "staging": "staging",
      "release/*": "staging",
      "main": "production",
      "hotfix/*": "incident"
    },
    "keywordRules": {
      "incident": "incident",
      "rollback": "incident",
      "vercel": "staging",
      "react": "development",
      "supabase": "development"
    }
  },
  "globalSettings": {
    "maxConcurrentServers": 3,
    "memoryThreshold": "512MB",
    "smartLoading": true,
    "contextOptimization": true
  },
  "quickCommands": {
    "react_devtools": "npm run devtools:react",
    "start_frontend": "npm run dev",
    "vercel_deploy_prod": "npm run frontend:deploy",
    "vercel_prod_status": "curl -I https://prospect-fyhedobh1-appsmithery.vercel.app",
    "supabase_functions_list": "cd supabase && npx --yes supabase@latest functions list",
    "docs_patch_diagrams": "npm run docs:patch:diagrams",
    "mcp_validate": "npm run mcp:chat:validate"
  },
  "metadata": {
    "frontendEntry": "app/frontend/main.tsx",
    "frontendBuildScript": "npm run build",
    "vercelCliScript": "npm run frontend:deploy",
    "supabaseFunctionsRoot": "app/backend/supabase/functions",
    "optionAReferenceDocs": [
      "docs/tooling/end-state/chat-participants-taxonomy.md",
      "docs/tooling/end-state/devops-environment-taxonomy.md",
      "docs/tooling/end-state/tools-suite-migration-plan.md",
      "docs/tooling/end-state/mcp-config-scaffolding.md"
    ]
  }
}
