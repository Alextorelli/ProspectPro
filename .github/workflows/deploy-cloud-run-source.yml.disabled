name: Deploy to Google Cloud Run (Simple)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: prospectpro
  REGION: ${{ secrets.GCP_REGION || 'us-central1' }}

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Enable required APIs
        run: |
          echo "🔧 Enabling required Google Cloud APIs..."
          gcloud services enable run.googleapis.com || true
          gcloud services enable cloudbuild.googleapis.com || true
          gcloud services enable containerregistry.googleapis.com || true
          gcloud services enable artifactregistry.googleapis.com || true
          echo "✅ APIs enabled"

      - name: Deploy to Cloud Run (Source-based)
        run: |
          echo "🚀 Deploying ProspectPro to Cloud Run..."
          gcloud run deploy $SERVICE_NAME \
            --source . \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --port 3100 \
            --memory 2Gi \
            --cpu 2 \
            --min-instances 0 \
            --max-instances 10 \
            --concurrency 100 \
            --timeout 300 \
            --set-env-vars NODE_ENV=production \
            --set-env-vars SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
            --set-env-vars SUPABASE_SECRET_KEY="${{ secrets.SUPABASE_SECRET_KEY }}" \
            --set-env-vars PORT=3100 \
            --set-env-vars ALLOW_DEGRADED_START=true \
            --quiet

      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "🚀 Service deployed at: $SERVICE_URL"

      - name: Test deployment
        run: |
          echo "⏳ Waiting for service to be ready..."
          sleep 45

          SERVICE_URL="${{ steps.get-url.outputs.SERVICE_URL }}"

          echo "🧪 Testing health endpoint..."
          if curl -f --max-time 30 "$SERVICE_URL/health"; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
          fi

          echo "🧪 Testing diagnostic endpoint..."
          if curl -f --max-time 30 "$SERVICE_URL/diag"; then
            echo "✅ Diagnostic check passed"
          else
            echo "❌ Diagnostic check failed"
          fi

          echo "🧪 Testing business discovery API..."
          if curl -X POST --max-time 30 -H "Content-Type: application/json" \
            -d '{"businessType":"test","location":"San Francisco, CA","maxResults":1}' \
            -f "$SERVICE_URL/api/business/discover-businesses"; then
            echo "✅ Business discovery API working"
          else
            echo "❌ Business discovery API failed"
          fi

      - name: Deployment summary
        run: |
          echo "✅ Deployment completed!"
          echo "🌐 Service URL: ${{ steps.get-url.outputs.SERVICE_URL }}"
          echo "📊 Health: ${{ steps.get-url.outputs.SERVICE_URL }}/health"
          echo "🔍 Diagnostics: ${{ steps.get-url.outputs.SERVICE_URL }}/diag"
          echo "📋 Business Discovery API: ${{ steps.get-url.outputs.SERVICE_URL }}/api/business-discovery"
