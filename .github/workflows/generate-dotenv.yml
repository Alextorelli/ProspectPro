name: Generate Production Environment Configuration

# Trigger on push to main branch, server initialization, or manual dispatch
on:
  push:
    branches: [main]
  deployment:
  repository_dispatch:
    types: [generate_dotenv, server-init, prod-server-start]
  workflow_dispatch:
    inputs:
      deployment_target:
        description: "Deployment target (production/staging)"
        required: false
        default: "production"
      trigger_source:
        description: "What triggered this workflow"
        required: false
        default: "manual"

jobs:
  generate-env-and-deploy:
    name: Generate .env and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Verify Required Secrets
        run: |
          echo "🔍 Verifying required GitHub repository secrets..."

          # Check if required secrets are present
          if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
            echo "❌ ERROR: SUPABASE_URL secret is not set"
            echo "💡 Add it in: Repository Settings → Secrets and variables → Actions"
            exit 1
          fi

          if [ -z "${{ secrets.SUPABASE_SECRET_KEY }}" ]; then
            echo "❌ ERROR: SUPABASE_SECRET_KEY secret is not set"
            echo "💡 Add it in: Repository Settings → Secrets and variables → Actions"
            exit 1
          fi

          echo "✅ All required secrets are present"
          echo "🔗 SUPABASE_URL: ${SUPABASE_URL:0:30}..."
          echo "🔑 SUPABASE_SECRET_KEY: ${SUPABASE_SECRET_KEY:0:20}..."
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}

      - name: Generate Production .env File
        id: generate-env
        run: |
          echo "🏗️ Generating production .env configuration..."

          # Create .env file with production configuration
          cat > .env << EOF
          # ================================
          # PRODUCTION ENVIRONMENT CONFIGURATION
          # Generated by GitHub Actions on $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          # Commit: ${{ github.sha }}
          # Branch: ${{ github.ref_name }}
          # ================================

          # Environment Settings
          NODE_ENV=production
          PORT=3000
          ALLOW_DEGRADED_START=false

          # Supabase Database Connection (from GitHub Secrets)
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY=${{ secrets.SUPABASE_SECRET_KEY }}

          # Production Performance Settings
          DAILY_BUDGET_LIMIT=100.00
          DEFAULT_BUDGET_LIMIT=25.00
          PER_LEAD_COST_LIMIT=2.00
          COST_ALERT_THRESHOLD=80.00

          MIN_CONFIDENCE_SCORE=85
          PRE_VALIDATION_THRESHOLD=75
          EXPORT_CONFIDENCE_THRESHOLD=90

          REQUEST_TIMEOUT=30000
          REQUEST_DELAY=500
          MAX_CONCURRENT_REQUESTS=10
          BATCH_SIZE=25
          CACHE_TTL_SECONDS=3600

          GOOGLE_PLACES_RPM=1000
          HUNTER_IO_RPM=100
          NEVERBOUNCE_RPM=300
          RATE_LIMIT_WINDOW=60000

          # Production Features (All Enabled)
          ENABLE_PROMETHEUS_METRICS=true
          ENABLE_PERFORMANCE_LOGGING=true
          ENABLE_COST_TRACKING=true
          ENABLE_ERROR_REPORTING=true
          LOG_LEVEL=info

          ENABLE_TTL_CACHE=true
          ENABLE_BATCH_PROCESSING=true
          ENABLE_SMART_ROUTING=true
          ENABLE_CIRCUIT_BREAKER=true

          ENABLE_REQUEST_VALIDATION=true
          ENABLE_RATE_LIMITING=true
          REQUIRE_API_AUTHENTICATION=true

          ENABLE_DATABASE_CONNECTION_POOLING=true
          ENABLE_GRACEFUL_SHUTDOWN=true
          ENABLE_HEALTH_CHECKS=true

          # Deployment Settings
          BIND_ADDRESS=0.0.0.0
          GRACEFUL_SHUTDOWN_TIMEOUT=30000
          HEALTH_CHECK_INTERVAL=30000
          DATABASE_CONNECTION_TIMEOUT=5000
          API_CLIENT_TIMEOUT=15000
          WEBHOOK_TIMEOUT=10000

          # Build Information
          BUILD_TIMESTAMP=$(date -u +"%Y-%m-%d_%H-%M-%S_UTC")
          BUILD_COMMIT=${{ github.sha }}
          BUILD_BRANCH=${{ github.ref_name }}
          BUILD_ACTOR=${{ github.actor }}
          EOF

          echo "✅ Production .env file generated successfully"
          echo "📄 File size: $(wc -c < .env) bytes"
          echo "📋 Configuration lines: $(wc -l < .env) lines"

          # Export .env content as workflow output for direct access
          echo "ENV_CONTENT<<ENVEOF" >> $GITHUB_OUTPUT
          cat .env >> $GITHUB_OUTPUT
          echo "ENVEOF" >> $GITHUB_OUTPUT

          # Export metadata
          echo "BUILD_TIMESTAMP=$(date -u +"%Y-%m-%d_%H-%M-%S_UTC")" >> $GITHUB_OUTPUT
          echo "BUILD_COMMIT=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Validate Environment Configuration
        run: |
          echo "🧪 Validating generated environment configuration..."

          # Install dependencies for validation
          npm ci --only=production --silent

          # Test environment loading
          node -e "
          require('dotenv').config();
          const requiredVars = [
            'NODE_ENV', 'SUPABASE_URL', 'SUPABASE_SECRET_KEY',
            'ENABLE_PROMETHEUS_METRICS', 'ENABLE_TTL_CACHE'
          ];

          let missingVars = [];
          requiredVars.forEach(varName => {
            if (!process.env[varName]) {
              missingVars.push(varName);
            }
          });

          if (missingVars.length > 0) {
            console.log('❌ Missing required environment variables:', missingVars);
            process.exit(1);
          }

          console.log('✅ All required environment variables are present');
          console.log('🎯 NODE_ENV:', process.env.NODE_ENV);
          console.log('🏭 Production features enabled:', {
            metrics: process.env.ENABLE_PROMETHEUS_METRICS,
            caching: process.env.ENABLE_TTL_CACHE,
            batching: process.env.ENABLE_BATCH_PROCESSING
          });
          "

      - name: Validate Server Module Dependencies
        run: |
          echo "🔍 Checking server.js module dependencies..."

          # Test that server.js can be parsed and required modules exist
          node -e "
          try {
            // Test core modules exist
            const fs = require('fs');
            const path = require('path');
            
            // Check critical modules exist
            const requiredModules = [
              './config/environment-loader',
              './config/supabase',
              './modules/monitoring/prometheus-metrics',
              './modules/utils/security-hardening',
              './modules/utils/boot-debugger'
            ];
            
            let missingModules = [];
            requiredModules.forEach(modulePath => {
              try {
                const resolvedPath = require.resolve(modulePath);
                if (!fs.existsSync(resolvedPath)) {
                  missingModules.push(modulePath);
                }
              } catch (e) {
                missingModules.push(modulePath + ' (resolve error: ' + e.message + ')');
              }
            });
            
            if (missingModules.length > 0) {
              console.log('❌ Missing required modules:', missingModules);
              process.exit(1);
            }
            
            console.log('✅ All critical server modules are available');
            
            // Test that server.js can at least be parsed
            const serverPath = path.join(__dirname, 'server.js');
            const serverCode = fs.readFileSync(serverPath, 'utf8');
            
            // Basic syntax validation
            const vm = require('vm');
            new vm.Script(serverCode);
            
            console.log('✅ server.js syntax validation passed');
            console.log('⚠️  Note: Full server startup test skipped (requires API keys)');
            
          } catch (error) {
            console.log('❌ Server validation failed:', error.message);
            process.exit(1);
          }
          "

      - name: Archive Environment Configuration
        uses: actions/upload-artifact@v4
        with:
          name: production-environment-config
          path: |
            .env
          retention-days: 30
          if-no-files-found: warn

      - name: Verify Artifact Contents
        run: |
          echo "🔍 Verifying files to be archived..."
          ls -la .env || echo ".env file may not exist"
          echo "📁 .env file contents preview:"
          head -5 .env || echo "No .env file found"

      - name: Prepare Production Environment
        if: github.ref == 'refs/heads/main' || github.event_name == 'repository_dispatch'
        run: |
          echo "🚀 Production environment ready for server initialization..."
          echo "📁 Generated .env file available for production server"
          echo "🎯 Trigger source: ${{ github.event.action || 'push' }}"

          # Validate .env file is production-ready
          if grep -q "your_.*_here" .env; then
            echo "⚠️  Warning: Template values detected in .env - ensure secrets are properly injected"
          fi

          echo "ENV_BUILD_TIME=$(date -u +'%Y-%m-%d_%H-%M-%S_UTC')" >> environment.log
          echo "✅ Environment configuration ready for production server initialization"

      - name: Server Initialization Signal
        if: github.ref == 'refs/heads/main' || github.event_name == 'repository_dispatch'
        run: |
          echo "🔔 Signaling server initialization readiness..."
          if [ -f environment.log ]; then
            echo "Environment details:"
            cat environment.log
          fi
          echo "✅ Production server can now be initialized with generated environment"

      - name: Deployment Summary
        run: |
          echo "## 🎯 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Environment Configuration Generated Successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Generated**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Config Lines**: $(wc -l < .env)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Production Features Enabled:" >> $GITHUB_STEP_SUMMARY
          echo "- Prometheus Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- TTL Caching & Batch Processing" >> $GITHUB_STEP_SUMMARY  
          echo "- Circuit Breaker & Smart Routing" >> $GITHUB_STEP_SUMMARY
          echo "- Cost Tracking & Performance Monitoring" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Ensure Supabase Vault contains all required API keys" >> $GITHUB_STEP_SUMMARY
          echo "2. Deploy to production platform with generated .env" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor deployment health via \`/health\` endpoint" >> $GITHUB_STEP_SUMMARY
