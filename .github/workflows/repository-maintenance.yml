name: Repository Maintenance & Optimization

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  detect-development-artifacts:
    name: Detect Development Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect development artifacts in main branch
        id: detect-artifacts
        run: |
          echo "üîç Scanning for development artifacts..."
          
          ARTIFACTS_FOUND=false
          
          # Check for development scripts
          if find . -name "quick-*.js" -o -name "test-*.js" -o -name "demo-*.js" -o -name "*-simulation.js" -o -name "verify-*.js" -o -name "debug-*.js" | grep -q .; then
            echo "‚ö†Ô∏è  Development scripts detected:"
            find . -name "quick-*.js" -o -name "test-*.js" -o -name "demo-*.js" -o -name "*-simulation.js" -o -name "verify-*.js" -o -name "debug-*.js"
            ARTIFACTS_FOUND=true
          fi
          
          # Check for temporary files
          if find . -name "*.log" -o -name "*.tmp" -o -name "*.temp" -o -name "diagnostics.json" | grep -q .; then
            echo "‚ö†Ô∏è  Temporary files detected:"
            find . -name "*.log" -o -name "*.tmp" -o -name "*.temp" -o -name "diagnostics.json"
            ARTIFACTS_FOUND=true
          fi
          
          # Check for CSV exports (except essential ones)
          if find . -name "*.csv" ! -name "google_places_mece_mapping.csv" | grep -q .; then
            echo "‚ö†Ô∏è  CSV export files detected:"
            find . -name "*.csv" ! -name "google_places_mece_mapping.csv"
            ARTIFACTS_FOUND=true
          fi
          
          echo "artifacts_found=$ARTIFACTS_FOUND" >> $GITHUB_OUTPUT

      - name: Create issue for artifact cleanup
        if: steps.detect-artifacts.outputs.artifacts_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'üßπ Development Artifacts Detected in Main Branch';
            const body = `## Repository Cleanup Required
            
            Development artifacts have been detected in the main branch that should be archived or removed:
            
            ### Automated Detection Results
            - **Date**: ${new Date().toISOString()}
            - **Branch**: main
            - **Trigger**: Repository maintenance workflow
            
            ### Recommended Actions
            1. Review detected artifacts
            2. Archive development files to appropriate archive branches
            3. Remove temporary files and logs
            4. Update .gitignore if needed
            
            ### Archive Branch Strategy
            - \`archive/development-phase\` - Development scripts and utilities
            - \`archive/old-tests\` - Testing infrastructure
            - \`archive/legacy-files\` - Sample data and examples
            - \`archive/debug-tools\` - Debug logs and diagnostic files
            
            This issue was created automatically by the repository maintenance workflow.`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['maintenance', 'cleanup', 'automated']
            });

  validate-production-structure:
    name: Validate Production Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate core production files
        run: |
          echo "‚úÖ Validating production file structure..."
          
          REQUIRED_FILES=(
            "server.js"
            "package.json"
            "README.md"
            "api/business-discovery.js"
            "config/supabase.js"
            "modules/core/core-business-discovery-engine.js"
            "modules/core/core-lead-discovery-engine.js"
          )
          
          MISSING_FILES=()
          for file in "${REQUIRED_FILES[@]}"; do
            if [[ ! -f "$file" ]]; then
              MISSING_FILES+=("$file")
            fi
          done
          
          if [[ ${#MISSING_FILES[@]} -eq 0 ]]; then
            echo "‚úÖ All required production files present"
          else
            echo "‚ùå Missing required files:"
            printf '%s\n' "${MISSING_FILES[@]}"
            exit 1
          fi

      - name: Check documentation schema compliance
        run: |
          echo "üìã Validating documentation structure..."
          
          # Check for required documentation sections
          if [[ -f "README.md" ]]; then
            if ! grep -q "## ProspectPro" README.md; then
              echo "‚ö†Ô∏è  README.md missing ProspectPro section"
            fi
            if ! grep -q "Zero Fake Data Policy" README.md; then
              echo "‚ö†Ô∏è  README.md missing Zero Fake Data Policy section"
            fi
          fi
          
          echo "‚úÖ Documentation validation complete"

  optimize-repository:
    name: Optimize Repository Performance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze repository size
        run: |
          echo "üìä Repository size analysis:"
          du -sh . | head -1
          
          echo "üìä Largest directories:"
          du -sh */ 2>/dev/null | sort -hr | head -10 || echo "No subdirectories found"
          
          echo "üìä File type distribution:"
          find . -type f | grep -E '\.[^./]*$' | rev | cut -d. -f1 | rev | sort | uniq -c | sort -nr | head -10

      - name: Check for large files
        run: |
          echo "üîç Scanning for large files (>1MB)..."
          find . -type f -size +1M -exec ls -lh {} \; | awk '{print $5 " " $9}' | sort -hr || echo "No large files found"

      - name: Validate git configuration
        run: |
          echo "‚öôÔ∏è  Git configuration validation:"
          echo "Default branch: $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')"
          echo "Archive branches: $(git branch -r | grep archive | wc -l)"
          echo "Total branches: $(git branch -r | wc -l)"

  security-scan:
    name: Security & Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for exposed secrets
        run: |
          echo "üîí Scanning for potential secrets exposure..."
          
          # Check for common secret patterns (excluding false positives)
          if grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.json" --exclude-dir=node_modules . | grep -v -E "(placeholder|example|test|demo|fake)" | head -5; then
            echo "‚ö†Ô∏è  Potential secrets detected - please review"
          else
            echo "‚úÖ No obvious secrets detected in code"
          fi

      - name: Validate environment file templates
        run: |
          if [[ -f ".env.example" ]]; then
            echo "‚úÖ Environment template found"
            echo "üìã Environment variables defined:"
            grep -E "^[A-Z_]+" .env.example | cut -d= -f1 | sort
          else
            echo "‚ö†Ô∏è  No .env.example template found"
          fi